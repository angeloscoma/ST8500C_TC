CCS PCH C Compiler, Version 5.109, 60686               04-out-22 14:42

               Filename:   C:\Users\Ângelo\ST8500 - ATUAL\TC\ST8500C_16_TC_67K22.lst

               ROM used:   114910 bytes (88%)
                           Largest free fragment is 16160
               RAM used:   2474 (64%) at main() level
                           2555 (66%) worst case
               Stack used: 10 locations (9 in main + 1 for interrupts)
               Stack size: 30

*
00000:  GOTO   1BC66
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FA0.1
0005E:  GOTO   0068
00062:  BTFSC  FA1.1
00064:  GOTO   13B8
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   12EE
00074:  BTFSS  FF2.4
00076:  GOTO   0080
0007A:  BTFSC  FF2.1
0007C:  GOTO   15BA
00080:  BTFSS  FF0.3
00082:  GOTO   008C
00086:  BTFSC  FF0.0
00088:  GOTO   161C
0008C:  BTFSS  F9D.5
0008E:  GOTO   0098
00092:  BTFSC  F9E.5
00094:  GOTO   164A
00098:  MOVFF  0E,00
0009C:  MOVFF  0F,01
000A0:  MOVFF  10,02
000A4:  MOVFF  11,03
000A8:  MOVFF  0C,FE9
000AC:  MOVFF  07,FEA
000B0:  BSF    07.7
000B2:  MOVFF  08,FE1
000B6:  MOVFF  09,FE2
000BA:  MOVFF  0A,FD9
000BE:  MOVFF  0B,FDA
000C2:  MOVFF  12,FF3
000C6:  MOVFF  13,FF4
000CA:  MOVFF  14,FFA
000CE:  MOVFF  15,FF5
000D2:  MOVFF  16,FF6
000D6:  MOVFF  17,FF7
000DA:  MOVFF  18,FF8
000DE:  MOVFF  19,FFB
000E2:  MOVF   04,W
000E4:  MOVFF  06,FE0
000E8:  MOVFF  05,FD8
000EC:  RETFIE 0
.................... //***********************************************************************
.................... // Empresa: Sultech Sistemas Eletrônicos								*
.................... // Módulo: Configuração													*
.................... // Função: Definir o funcionamento do equipamento						*
.................... // Responsável: Edison Valério Nunes Junior								*
.................... // Modificado: Edison Valério Nunes Junior								*
.................... // Inicio: 01/08/2003													*
.................... // Revisão: Edison Valério Nunes Junior									*
.................... //***********************************************************************
.................... 
.................... #include <18F67K22.H>
.................... //////////// Standard Header file for the PIC18F67K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67K22
000EE:  CLRF   FF7
000F0:  ADDLW  02
000F2:  MOVWF  FF6
000F4:  MOVLW  01
000F6:  ADDWFC FF7,F
000F8:  MOVLW  00
000FA:  MOVWF  FF8
000FC:  TBLRD*+
000FE:  MOVF   FF5,W
00100:  RETURN 0
00102:  DATA 7F,00
00104:  DATA DC,00
00106:  DATA FE,00
00108:  CLRF   FF7
0010A:  ADDLW  1C
0010C:  MOVWF  FF6
0010E:  MOVLW  01
00110:  ADDWFC FF7,F
00112:  MOVLW  00
00114:  MOVWF  FF8
00116:  TBLRD*+
00118:  MOVF   FF5,W
0011A:  RETURN 0
0011C:  DATA 60,09
0011E:  DATA C0,12
00120:  DATA 80,25
00122:  DATA 00,4B
00124:  DATA 00,96
00126:  DATA 00,E1
00128:  CLRF   FF7
0012A:  ADDLW  3C
0012C:  MOVWF  FF6
0012E:  MOVLW  01
00130:  ADDWFC FF7,F
00132:  MOVLW  00
00134:  MOVWF  FF8
00136:  TBLRD*+
00138:  MOVF   FF5,W
0013A:  RETURN 0
0013C:  DATA 05,00
0013E:  DATA 0A,00
00140:  DATA 0F,00
00142:  DATA 14,00
00144:  DATA 19,00
00146:  DATA 1E,00
00148:  DATA 28,00
0014A:  DATA 32,00
0014C:  DATA 3C,00
0014E:  DATA 4B,00
00150:  DATA 50,00
00152:  DATA 64,00
00154:  DATA 78,00
00156:  DATA 7D,00
00158:  DATA 96,00
0015A:  DATA C8,00
0015C:  DATA FA,00
0015E:  DATA 2C,01
00160:  DATA 5E,01
00162:  DATA 90,01
00164:  DATA F4,01
00166:  DATA 58,02
00168:  DATA BC,02
0016A:  DATA EE,02
0016C:  DATA 20,03
0016E:  DATA E8,03
00170:  DATA B0,04
00172:  DATA E2,04
00174:  DATA DC,05
00176:  DATA 40,06
00178:  DATA D0,07
0017A:  DATA C4,09
0017C:  DATA B8,0B
0017E:  DATA 80,0C
00180:  DATA A0,0F
00182:  DATA 88,13
00184:  DATA 70,17
00186:  CLRF   FF7
00188:  ADDLW  9A
0018A:  MOVWF  FF6
0018C:  MOVLW  01
0018E:  ADDWFC FF7,F
00190:  MOVLW  00
00192:  MOVWF  FF8
00194:  TBLRD*+
00196:  MOVF   FF5,W
00198:  RETURN 0
0019A:  DATA 34,2D
0019C:  DATA 4F,63
0019E:  DATA 74,2D
001A0:  DATA 32,32
001A2:  DATA 00,00
001A4:  CLRF   FF7
001A6:  ADDLW  B8
001A8:  MOVWF  FF6
001AA:  MOVLW  01
001AC:  ADDWFC FF7,F
001AE:  MOVLW  00
001B0:  MOVWF  FF8
001B2:  TBLRD*+
001B4:  MOVF   FF5,W
001B6:  RETURN 0
001B8:  DATA 31,34
001BA:  DATA 3A,34
001BC:  DATA 32,3A
001BE:  DATA 33,32
001C0:  DATA 00,00
001C2:  CLRF   FF7
001C4:  ADDLW  D6
001C6:  MOVWF  FF6
001C8:  MOVLW  01
001CA:  ADDWFC FF7,F
001CC:  MOVLW  00
001CE:  MOVWF  FF8
001D0:  TBLRD*+
001D2:  MOVF   FF5,W
001D4:  RETURN 0
001D6:  DATA 53,54
001D8:  DATA 38,35
001DA:  DATA 30,30
001DC:  DATA 43,2D
001DE:  DATA 56,32
001E0:  DATA 2E,58
001E2:  DATA 58,40
001E4:  DATA 30,30
001E6:  DATA 30,31
001E8:  DATA 2E,42
001EA:  DATA 00,00
001EC:  CLRF   FF7
001EE:  ADDLW  00
001F0:  MOVWF  FF6
001F2:  MOVLW  02
001F4:  ADDWFC FF7,F
001F6:  MOVLW  00
001F8:  MOVWF  FF8
001FA:  TBLRD*+
001FC:  MOVF   FF5,W
001FE:  RETURN 0
00200:  DATA 38,38
00202:  DATA 06,0C
00204:  CLRF   FF7
00206:  ADDLW  18
00208:  MOVWF  FF6
0020A:  MOVLW  02
0020C:  ADDWFC FF7,F
0020E:  MOVLW  00
00210:  MOVWF  FF8
00212:  TBLRD*+
00214:  MOVF   FF5,W
00216:  RETURN 0
00218:  DATA 01,03
0021A:  DATA 03,03
0021C:  DATA 03,03
0021E:  DATA 03,01
00220:  CLRF   FF7
00222:  ADDLW  34
00224:  MOVWF  FF6
00226:  MOVLW  02
00228:  ADDWFC FF7,F
0022A:  MOVLW  00
0022C:  MOVWF  FF8
0022E:  TBLRD*+
00230:  MOVF   FF5,W
00232:  RETURN 0
00234:  DATA 10,18
00236:  DATA 18,18
00238:  DATA 18,18
0023A:  DATA 18,10
0023C:  CLRF   FF7
0023E:  ADDLW  50
00240:  MOVWF  FF6
00242:  MOVLW  02
00244:  ADDWFC FF7,F
00246:  MOVLW  00
00248:  MOVWF  FF8
0024A:  TBLRD*+
0024C:  MOVF   FF5,W
0024E:  RETURN 0
00250:  DATA 1F,1F
00252:  DATA 00,00
00254:  DATA 00,00
00256:  DATA 00,00
00258:  CLRF   FF7
0025A:  ADDLW  6C
0025C:  MOVWF  FF6
0025E:  MOVLW  02
00260:  ADDWFC FF7,F
00262:  MOVLW  00
00264:  MOVWF  FF8
00266:  TBLRD*+
00268:  MOVF   FF5,W
0026A:  RETURN 0
0026C:  DATA 00,00
0026E:  DATA 00,00
00270:  DATA 00,00
00272:  DATA 1F,1F
00274:  CLRF   FF7
00276:  ADDLW  88
00278:  MOVWF  FF6
0027A:  MOVLW  02
0027C:  ADDWFC FF7,F
0027E:  MOVLW  00
00280:  MOVWF  FF8
00282:  TBLRD*+
00284:  MOVF   FF5,W
00286:  RETURN 0
00288:  DATA 1F,1F
0028A:  DATA 00,00
0028C:  DATA 00,00
0028E:  DATA 00,1F
00290:  CLRF   FF7
00292:  ADDLW  A4
00294:  MOVWF  FF6
00296:  MOVLW  02
00298:  ADDWFC FF7,F
0029A:  MOVLW  00
0029C:  MOVWF  FF8
0029E:  TBLRD*+
002A0:  MOVF   FF5,W
002A2:  RETURN 0
002A4:  DATA 1F,00
002A6:  DATA 00,00
002A8:  DATA 00,00
002AA:  DATA 1F,1F
002AC:  CLRF   FF7
002AE:  ADDLW  C0
002B0:  MOVWF  FF6
002B2:  MOVLW  02
002B4:  ADDWFC FF7,F
002B6:  MOVLW  00
002B8:  MOVWF  FF8
002BA:  TBLRD*+
002BC:  MOVF   FF5,W
002BE:  RETURN 0
002C0:  DATA 1F,00
002C2:  DATA 00,00
002C4:  DATA 00,00
002C6:  DATA 00,00
002C8:  CLRF   FF7
002CA:  ADDLW  DC
002CC:  MOVWF  FF6
002CE:  MOVLW  02
002D0:  ADDWFC FF7,F
002D2:  MOVLW  00
002D4:  MOVWF  FF8
002D6:  TBLRD*+
002D8:  MOVF   FF5,W
002DA:  RETURN 0
002DC:  DATA 00,00
002DE:  DATA 00,00
002E0:  DATA 00,00
002E2:  DATA 00,1F
002E4:  CLRF   FF7
002E6:  ADDLW  F8
002E8:  MOVWF  FF6
002EA:  MOVLW  02
002EC:  ADDWFC FF7,F
002EE:  MOVLW  00
002F0:  MOVWF  FF8
002F2:  TBLRD*+
002F4:  MOVF   FF5,W
002F6:  RETURN 0
002F8:  DATA 00,02
002FA:  DATA 02,01
002FC:  CLRF   FF7
002FE:  ADDLW  10
00300:  MOVWF  FF6
00302:  MOVLW  03
00304:  ADDWFC FF7,F
00306:  MOVLW  00
00308:  MOVWF  FF8
0030A:  TBLRD*+
0030C:  MOVF   FF5,W
0030E:  RETURN 0
00310:  DATA 00,03
00312:  DATA 03,01
00314:  CLRF   FF7
00316:  ADDLW  28
00318:  MOVWF  FF6
0031A:  MOVLW  03
0031C:  ADDWFC FF7,F
0031E:  MOVLW  00
00320:  MOVWF  FF8
00322:  TBLRD*+
00324:  MOVF   FF5,W
00326:  RETURN 0
00328:  DATA 20,00
0032A:  DATA 20,20
0032C:  CLRF   FF7
0032E:  ADDLW  40
00330:  MOVWF  FF6
00332:  MOVLW  03
00334:  ADDWFC FF7,F
00336:  MOVLW  00
00338:  MOVWF  FF8
0033A:  TBLRD*+
0033C:  MOVF   FF5,W
0033E:  RETURN 0
00340:  DATA 20,04
00342:  DATA 04,01
00344:  CLRF   FF7
00346:  ADDLW  58
00348:  MOVWF  FF6
0034A:  MOVLW  03
0034C:  ADDWFC FF7,F
0034E:  MOVLW  00
00350:  MOVWF  FF8
00352:  TBLRD*+
00354:  MOVF   FF5,W
00356:  RETURN 0
00358:  DATA 00,05
0035A:  DATA 05,20
0035C:  CLRF   FF7
0035E:  ADDLW  70
00360:  MOVWF  FF6
00362:  MOVLW  03
00364:  ADDWFC FF7,F
00366:  MOVLW  00
00368:  MOVWF  FF8
0036A:  TBLRD*+
0036C:  MOVF   FF5,W
0036E:  RETURN 0
00370:  DATA 20,05
00372:  DATA 05,01
00374:  CLRF   FF7
00376:  ADDLW  88
00378:  MOVWF  FF6
0037A:  MOVLW  03
0037C:  ADDWFC FF7,F
0037E:  MOVLW  00
00380:  MOVWF  FF8
00382:  TBLRD*+
00384:  MOVF   FF5,W
00386:  RETURN 0
00388:  DATA 00,07
0038A:  DATA 07,01
0038C:  CLRF   FF7
0038E:  ADDLW  A0
00390:  MOVWF  FF6
00392:  MOVLW  03
00394:  ADDWFC FF7,F
00396:  MOVLW  00
00398:  MOVWF  FF8
0039A:  TBLRD*+
0039C:  MOVF   FF5,W
0039E:  RETURN 0
003A0:  DATA 20,06
003A2:  DATA 06,01
003A4:  CLRF   FF7
003A6:  ADDLW  B8
003A8:  MOVWF  FF6
003AA:  MOVLW  03
003AC:  ADDWFC FF7,F
003AE:  MOVLW  00
003B0:  MOVWF  FF8
003B2:  TBLRD*+
003B4:  MOVF   FF5,W
003B6:  RETURN 0
003B8:  DATA 00,04
003BA:  DATA 04,20
003BC:  CLRF   FF7
003BE:  ADDLW  D0
003C0:  MOVWF  FF6
003C2:  MOVLW  03
003C4:  ADDWFC FF7,F
003C6:  MOVLW  00
003C8:  MOVWF  FF8
003CA:  TBLRD*+
003CC:  MOVF   FF5,W
003CE:  RETURN 0
003D0:  DATA 00,05
003D2:  DATA 05,01
003D4:  CLRF   FF7
003D6:  ADDLW  E8
003D8:  MOVWF  FF6
003DA:  MOVLW  03
003DC:  ADDWFC FF7,F
003DE:  MOVLW  00
003E0:  MOVWF  FF8
003E2:  TBLRD*+
003E4:  MOVF   FF5,W
003E6:  RETURN 0
003E8:  DATA 20,02
003EA:  DATA 02,01
003EC:  CLRF   FF7
003EE:  ADDLW  00
003F0:  MOVWF  FF6
003F2:  MOVLW  04
003F4:  ADDWFC FF7,F
003F6:  MOVLW  00
003F8:  MOVWF  FF8
003FA:  TBLRD*+
003FC:  MOVF   FF5,W
003FE:  RETURN 0
00400:  DATA 20,20
00402:  DATA 20,01
00404:  CLRF   FF7
00406:  ADDLW  18
00408:  MOVWF  FF6
0040A:  MOVLW  04
0040C:  ADDWFC FF7,F
0040E:  MOVLW  00
00410:  MOVWF  FF8
00412:  TBLRD*+
00414:  MOVF   FF5,W
00416:  RETURN 0
00418:  DATA 00,04
0041A:  DATA 04,01
0041C:  ADDLW  2E
0041E:  MOVWF  FF6
00420:  MOVLW  04
00422:  ADDWFC FF7,F
00424:  MOVLW  00
00426:  MOVWF  FF8
00428:  TBLRD*+
0042A:  MOVF   FF5,W
0042C:  RETURN 0
0042E:  DATA 20,20
00430:  DATA 20,20
00432:  DATA 20,20
00434:  DATA 20,20
00436:  DATA 20,20
00438:  DATA 20,20
0043A:  DATA 20,20
0043C:  DATA 20,20
0043E:  DATA 00,53
00440:  DATA 20,54
00442:  DATA 20,38
00444:  DATA 20,35
00446:  DATA 20,30
00448:  DATA 20,30
0044A:  DATA 20,43
0044C:  DATA 2F,54
0044E:  DATA 43,00
00450:  DATA 4E,40
00452:  DATA 3A,40
00454:  DATA 40,40
00456:  DATA 40,2E
00458:  DATA 40,20
0045A:  DATA 56,3A
0045C:  DATA 40,2E
0045E:  DATA 40,40
00460:  DATA 00,20
00462:  DATA 4D,65
00464:  DATA 64,2E
00466:  DATA 20,45
00468:  DATA 6C,65
0046A:  DATA 74,72
0046C:  DATA 69,63
0046E:  DATA 61,73
00470:  DATA 20,00
00472:  DATA 20,20
00474:  DATA 45,20
00476:  DATA 52,20
00478:  DATA 52,20
0047A:  DATA 4F,20
0047C:  DATA 21,21
0047E:  DATA 21,21
00480:  DATA 21,20
00482:  DATA 00,46
00484:  DATA 61,6C
00486:  DATA 74,61
00488:  DATA 20,53
0048A:  DATA 69,6E
0048C:  DATA 61,6C
0048E:  DATA 20,52
00490:  DATA 45,50
00492:  DATA 21,00
00494:  DATA 20,20
00496:  DATA 20,4F
00498:  DATA 63,6F
0049A:  DATA 72,72
0049C:  DATA 65,6E
0049E:  DATA 63,69
004A0:  DATA 61,73
004A2:  DATA 20,20
004A4:  DATA 00,20
004A6:  DATA 50,72
004A8:  DATA 6F,67
004AA:  DATA 72,61
004AC:  DATA 6D,61
004AE:  DATA 20,47
004B0:  DATA 65,72
004B2:  DATA 61,6C
004B4:  DATA 20,00
004B6:  DATA 50,72
004B8:  DATA 6F,67
004BA:  DATA 72,61
004BC:  DATA 6D,61
004BE:  DATA 20,20
004C0:  DATA 43,61
004C2:  DATA 72,67
004C4:  DATA 61,73
004C6:  DATA 00,50
004C8:  DATA 72,6F
004CA:  DATA 67,72
004CC:  DATA 61,6D
004CE:  DATA 61,20
004D0:  DATA 41,6C
004D2:  DATA 61,72
004D4:  DATA 6D,65
004D6:  DATA 73,00
004D8:  DATA 50,72
004DA:  DATA 6F,67
004DC:  DATA 72,61
004DE:  DATA 6D,61
004E0:  DATA 20,44
004E2:  DATA 65,73
004E4:  DATA 6C,69
004E6:  DATA 67,61
004E8:  DATA 00,20
004EA:  DATA 20,20
004EC:  DATA 4D,61
004EE:  DATA 6E,75
004F0:  DATA 74,65
004F2:  DATA 6E,63
004F4:  DATA 61,6F
004F6:  DATA 20,20
004F8:  DATA 20,00
004FA:  DATA 20,20
004FC:  DATA 20,49
004FE:  DATA 6E,73
00500:  DATA 74,61
00502:  DATA 6C,61
00504:  DATA 63,61
00506:  DATA 6F,20
00508:  DATA 20,20
0050A:  DATA 00,50
0050C:  DATA 6F,74
0050E:  DATA 2E,49
00510:  DATA 6E,73
00512:  DATA 74,3A
00514:  DATA 40,40
00516:  DATA 40,40
00518:  DATA 40,6B
0051A:  DATA 57,00
0051C:  DATA 4E,72
0051E:  DATA 6F,20
00520:  DATA 64,65
00522:  DATA 20,43
00524:  DATA 61,72
00526:  DATA 67,61
00528:  DATA 73,3A
0052A:  DATA 20,20
0052C:  DATA 00,20
0052E:  DATA 20,20
00530:  DATA 20,20
00532:  DATA 55,73
00534:  DATA 75,61
00536:  DATA 72,69
00538:  DATA 6F,20
0053A:  DATA 20,20
0053C:  DATA 20,00
0053E:  DATA 4D,61
00540:  DATA 78,2E
00542:  DATA 43,61
00544:  DATA 72,67
00546:  DATA 61,3A
00548:  DATA 40,40
0054A:  DATA 40,40
0054C:  DATA 6B,57
0054E:  DATA 00,53
00550:  DATA 65,74
00552:  DATA 2D,70
00554:  DATA 6F,69
00556:  DATA 6E,74
00558:  DATA 3A,40
0055A:  DATA 40,40
0055C:  DATA 40,6B
0055E:  DATA 57,00
00560:  DATA 41,63
00562:  DATA 69,6F
00564:  DATA 6E,61
00566:  DATA 6D,65
00568:  DATA 6E,74
0056A:  DATA 6F,3A
0056C:  DATA 20,20
0056E:  DATA 20,73
00570:  DATA 00,43
00572:  DATA 61,72
00574:  DATA 67,61
00576:  DATA 20,40
00578:  DATA 40,3A
0057A:  DATA 20,20
0057C:  DATA 20,20
0057E:  DATA 20,6B
00580:  DATA 57,00
00582:  DATA 54,2E
00584:  DATA 43,61
00586:  DATA 72,67
00588:  DATA 61,20
0058A:  DATA 40,40
0058C:  DATA 3A,20
0058E:  DATA 20,20
00590:  DATA 20,73
00592:  DATA 00,44
00594:  DATA 65,6D
00596:  DATA 2E,41
00598:  DATA 74,69
0059A:  DATA 76,61
0059C:  DATA 3A,20
0059E:  DATA 20,20
005A0:  DATA 40,40
005A2:  DATA 25,00
005A4:  DATA 41,63
005A6:  DATA 69,6F
005A8:  DATA 6E,61
005AA:  DATA 64,6F
005AC:  DATA 3A,20
005AE:  DATA 40,40
005B0:  DATA 40,40
005B2:  DATA 6B,57
005B4:  DATA 00,54
005B6:  DATA 65,6E
005B8:  DATA 2E,20
005BA:  DATA 28,56
005BC:  DATA 29,3A
005BE:  DATA 20,20
005C0:  DATA 20,20
005C2:  DATA 20,20
005C4:  DATA 20,00
005C6:  DATA 43,6F
005C8:  DATA 72,2E
005CA:  DATA 20,28
005CC:  DATA 41,29
005CE:  DATA 3A,20
005D0:  DATA 20,20
005D2:  DATA 20,20
005D4:  DATA 20,20
005D6:  DATA 00,20
005D8:  DATA 20,20
005DA:  DATA 46,72
005DC:  DATA 65,71
005DE:  DATA 75,65
005E0:  DATA 6E,63
005E2:  DATA 69,61
005E4:  DATA 20,20
005E6:  DATA 20,00
005E8:  DATA 50,6F
005EA:  DATA 74,2E
005EC:  DATA 6B,57
005EE:  DATA 20,20
005F0:  DATA 20,20
005F2:  DATA 20,20
005F4:  DATA 20,20
005F6:  DATA 20,20
005F8:  DATA 00,50
005FA:  DATA 6F,74
005FC:  DATA 2E,6B
005FE:  DATA 56,41
00600:  DATA 20,20
00602:  DATA 20,20
00604:  DATA 20,20
00606:  DATA 20,20
00608:  DATA 20,00
0060A:  DATA 50,6F
0060C:  DATA 74,2E
0060E:  DATA 6B,56
00610:  DATA 41,72
00612:  DATA 20,20
00614:  DATA 20,20
00616:  DATA 20,20
00618:  DATA 20,20
0061A:  DATA 00,46
0061C:  DATA 74,72
0061E:  DATA 20,43
00620:  DATA 72,67
00622:  DATA 3A,20
00624:  DATA 20,20
00626:  DATA 20,20
00628:  DATA 20,20
0062A:  DATA 25,00
0062C:  DATA 46,74
0062E:  DATA 72,20
00630:  DATA 44,6D
00632:  DATA 64,3A
00634:  DATA 20,20
00636:  DATA 20,20
00638:  DATA 20,20
0063A:  DATA 20,25
0063C:  DATA 00,46
0063E:  DATA 6C,74
00640:  DATA 2E,6B
00642:  DATA 56,41
00644:  DATA 72,3A
00646:  DATA 20,20
00648:  DATA 20,20
0064A:  DATA 20,20
0064C:  DATA 20,00
0064E:  DATA 45,78
00650:  DATA 63,2E
00652:  DATA 6B,56
00654:  DATA 41,72
00656:  DATA 3A,20
00658:  DATA 20,20
0065A:  DATA 20,20
0065C:  DATA 20,20
0065E:  DATA 00,20
00660:  DATA 20,20
00662:  DATA 20,20
00664:  DATA 20,20
00666:  DATA 20,20
00668:  DATA 20,48
0066A:  DATA 7A,20
0066C:  DATA 20,20
0066E:  DATA 20,00
00670:  DATA 44,65
00672:  DATA 6D,2E
00674:  DATA 43,6F
00676:  DATA 6E,74
00678:  DATA 2E,4D
0067A:  DATA 65,73
0067C:  DATA 3A,20
0067E:  DATA 40,40
00680:  DATA 00,50
00682:  DATA 6F,6E
00684:  DATA 74,61
00686:  DATA 3A,20
00688:  DATA 20,20
0068A:  DATA 40,40
0068C:  DATA 40,40
0068E:  DATA 40,6B
00690:  DATA 57,00
00692:  DATA 46,2E
00694:  DATA 50,6F
00696:  DATA 6E,74
00698:  DATA 61,3A
0069A:  DATA 20,40
0069C:  DATA 40,40
0069E:  DATA 40,40
006A0:  DATA 6B,57
006A2:  DATA 00,20
006A4:  DATA 20,41
006A6:  DATA 70,61
006A8:  DATA 67,61
006AA:  DATA 6E,64
006AC:  DATA 6F,21
006AE:  DATA 21,21
006B0:  DATA 20,20
006B2:  DATA 20,00
006B4:  DATA 54,69
006B6:  DATA 70,6F
006B8:  DATA 20,4C
006BA:  DATA 69,67
006BC:  DATA 61,63
006BE:  DATA 61,6F
006C0:  DATA 3A,20
006C2:  DATA 20,20
006C4:  DATA 00,45
006C6:  DATA 6E,64
006C8:  DATA 2E,20
006CA:  DATA 4D,6F
006CC:  DATA 64,62
006CE:  DATA 75,73
006D0:  DATA 3A,20
006D2:  DATA 20,20
006D4:  DATA 20,00
006D6:  DATA 42,61
006D8:  DATA 75,64
006DA:  DATA 20,52
006DC:  DATA 61,74
006DE:  DATA 65,3A
006E0:  DATA 20,20
006E2:  DATA 20,20
006E4:  DATA 20,20
006E6:  DATA 00,46
006E8:  DATA 50,20
006EA:  DATA 49,6E
006EC:  DATA 64,75
006EE:  DATA 74,69
006F0:  DATA 76,6F
006F2:  DATA 3A,20
006F4:  DATA 20,20
006F6:  DATA 20,00
006F8:  DATA 46,50
006FA:  DATA 20,43
006FC:  DATA 61,70
006FE:  DATA 61,63
00700:  DATA 69,74
00702:  DATA 2E,3A
00704:  DATA 20,20
00706:  DATA 20,20
00708:  DATA 00,54
0070A:  DATA 65,6E
0070C:  DATA 73,61
0070E:  DATA 6F,20
00710:  DATA 41,6C
00712:  DATA 74,61
00714:  DATA 3A,20
00716:  DATA 20,20
00718:  DATA 25,00
0071A:  DATA 53,75
0071C:  DATA 62,20
0071E:  DATA 54,65
00720:  DATA 6E,73
00722:  DATA 61,6F
00724:  DATA 3A,20
00726:  DATA 20,20
00728:  DATA 20,25
0072A:  DATA 00,20
0072C:  DATA 20,50
0072E:  DATA 65,72
00730:  DATA 69,6F
00732:  DATA 64,6F
00734:  DATA 20,53
00736:  DATA 45,43
00738:  DATA 4F,20
0073A:  DATA 20,00
0073C:  DATA 49,2E
0073E:  DATA 40,40
00740:  DATA 2F,40
00742:  DATA 40,20
00744:  DATA 46,2E
00746:  DATA 40,40
00748:  DATA 2F,40
0074A:  DATA 40,20
0074C:  DATA 00,44
0074E:  DATA 2E,20
00750:  DATA 4D,65
00752:  DATA 64,2E
00754:  DATA 20,6B
00756:  DATA 57,3A
00758:  DATA 20,20
0075A:  DATA 20,20
0075C:  DATA 20,00
0075E:  DATA 44,2E
00760:  DATA 20,50
00762:  DATA 72,6A
00764:  DATA 2E,20
00766:  DATA 6B,57
00768:  DATA 3A,20
0076A:  DATA 20,20
0076C:  DATA 20,20
0076E:  DATA 00,50
00770:  DATA 72,6F
00772:  DATA 67,2E
00774:  DATA 20,4E
00776:  DATA 61,6F
00778:  DATA 20,41
0077A:  DATA 75,74
0077C:  DATA 6F,72
0077E:  DATA 2E,00
00780:  DATA 20,50
00782:  DATA 72,6F
00784:  DATA 67,2E
00786:  DATA 20,4C
00788:  DATA 69,62
0078A:  DATA 65,72
0078C:  DATA 61,64
0078E:  DATA 61,20
00790:  DATA 00,40
00792:  DATA 40,40
00794:  DATA 40,40
00796:  DATA 20,53
00798:  DATA 65,6D
0079A:  DATA 20,4C
0079C:  DATA 69,6D
0079E:  DATA 69,74
007A0:  DATA 65,00
007A2:  DATA 20,4C
007A4:  DATA 69,67
007A6:  DATA 61,20
007A8:  DATA 43,61
007AA:  DATA 72,67
007AC:  DATA 61,3A
007AE:  DATA 20,20
007B0:  DATA 20,20
007B2:  DATA 00,20
007B4:  DATA 44,65
007B6:  DATA 73,6C
007B8:  DATA 20,43
007BA:  DATA 61,72
007BC:  DATA 67,61
007BE:  DATA 3A,20
007C0:  DATA 20,20
007C2:  DATA 20,00
007C4:  DATA 44,2E
007C6:  DATA 4D,64
007C8:  DATA 2E,20
007CA:  DATA 6B,56
007CC:  DATA 41,72
007CE:  DATA 3A,20
007D0:  DATA 20,20
007D2:  DATA 20,20
007D4:  DATA 00,44
007D6:  DATA 2E,50
007D8:  DATA 6A,2E
007DA:  DATA 20,6B
007DC:  DATA 56,41
007DE:  DATA 72,3A
007E0:  DATA 20,20
007E2:  DATA 20,20
007E4:  DATA 20,00
007E6:  DATA 46,50
007E8:  DATA 3A,20
007EA:  DATA 20,20
007EC:  DATA 20,20
007EE:  DATA 20,20
007F0:  DATA 20,20
007F2:  DATA 20,20
007F4:  DATA 20,20
007F6:  DATA 00,48
007F8:  DATA 6F,72
007FA:  DATA 61,72
007FC:  DATA 69,6F
007FE:  DATA 20,64
00800:  DATA 65,20
00802:  DATA 50,6F
00804:  DATA 6E,74
00806:  DATA 61,00
00808:  DATA 41,6A
0080A:  DATA 75,73
0080C:  DATA 74,65
0080E:  DATA 20,52
00810:  DATA 65,6C
00812:  DATA 6F,67
00814:  DATA 69,6F
00816:  DATA 21,21
00818:  DATA 00,49
0081A:  DATA 2E,40
0081C:  DATA 40,3A
0081E:  DATA 40,40
00820:  DATA 20,46
00822:  DATA 2E,40
00824:  DATA 40,3A
00826:  DATA 40,40
00828:  DATA 20,00
0082A:  DATA 20,20
0082C:  DATA 20,2F
0082E:  DATA 20,20
00830:  DATA 2F,20
00832:  DATA 20,20
00834:  DATA 20,20
00836:  DATA 3A,20
00838:  DATA 20,20
0083A:  DATA 00,20
0083C:  DATA 20,20
0083E:  DATA 20,20
00840:  DATA 20,20
00842:  DATA 25,20
00844:  DATA 20,20
00846:  DATA 20,20
00848:  DATA 20,20
0084A:  DATA 25,00
0084C:  DATA 54,65
0084E:  DATA 6D,70
00850:  DATA 6F,20
00852:  DATA 20,43
00854:  DATA 61,72
00856:  DATA 67,61
00858:  DATA 3A,20
0085A:  DATA 20,20
0085C:  DATA 00,41
0085E:  DATA 63,69
00860:  DATA 6F,6E
00862:  DATA 61,20
00864:  DATA 43,61
00866:  DATA 72,67
00868:  DATA 61,3A
0086A:  DATA 20,20
0086C:  DATA 20,00
0086E:  DATA 20,20
00870:  DATA 20,20
00872:  DATA 20,20
00874:  DATA 20,20
00876:  DATA 20,48
00878:  DATA 6F,72
0087A:  DATA 61,73
0087C:  DATA 20,20
0087E:  DATA 00,20
00880:  DATA 20,20
00882:  DATA 20,20
00884:  DATA 20,20
00886:  DATA 20,20
00888:  DATA 56,65
0088A:  DATA 7A,65
0088C:  DATA 73,20
0088E:  DATA 20,00
00890:  DATA 20,46
00892:  DATA 69,6D
00894:  DATA 20,4F
00896:  DATA 63,6F
00898:  DATA 72,72
0089A:  DATA 65,6E
0089C:  DATA 63,69
0089E:  DATA 61,73
008A0:  DATA 00,52
008A2:  DATA 65,67
008A4:  DATA 69,73
008A6:  DATA 74,72
008A8:  DATA 6F,20
008AA:  DATA 20,4E
008AC:  DATA 6F,72
008AE:  DATA 6D,61
008B0:  DATA 6C,00
008B2:  DATA 54,65
008B4:  DATA 6E,73
008B6:  DATA 20,41
008B8:  DATA 6C,74
008BA:  DATA 61,20
008BC:  DATA 46,61
008BE:  DATA 73,65
008C0:  DATA 20,52
008C2:  DATA 00,54
008C4:  DATA 65,6E
008C6:  DATA 73,20
008C8:  DATA 41,6C
008CA:  DATA 74,61
008CC:  DATA 20,46
008CE:  DATA 61,73
008D0:  DATA 65,20
008D2:  DATA 53,00
008D4:  DATA 54,65
008D6:  DATA 6E,73
008D8:  DATA 20,41
008DA:  DATA 6C,74
008DC:  DATA 61,20
008DE:  DATA 46,61
008E0:  DATA 73,65
008E2:  DATA 20,54
008E4:  DATA 00,54
008E6:  DATA 65,6E
008E8:  DATA 20,42
008EA:  DATA 61,69
008EC:  DATA 78,61
008EE:  DATA 20,46
008F0:  DATA 61,73
008F2:  DATA 65,20
008F4:  DATA 52,00
008F6:  DATA 54,65
008F8:  DATA 6E,20
008FA:  DATA 42,61
008FC:  DATA 69,78
008FE:  DATA 61,20
00900:  DATA 46,61
00902:  DATA 73,65
00904:  DATA 20,53
00906:  DATA 00,54
00908:  DATA 65,6E
0090A:  DATA 20,42
0090C:  DATA 61,69
0090E:  DATA 78,61
00910:  DATA 20,46
00912:  DATA 61,73
00914:  DATA 65,20
00916:  DATA 54,00
00918:  DATA 4D,53
0091A:  DATA 47,2D
0091C:  DATA 4F,43
0091E:  DATA 4F,52
00920:  DATA 2D,37
00922:  DATA 34,2D
00924:  DATA 46,52
00926:  DATA 45,45
00928:  DATA 00,4D
0092A:  DATA 53,47
0092C:  DATA 2D,4F
0092E:  DATA 43,4F
00930:  DATA 52,2D
00932:  DATA 37,35
00934:  DATA 2D,46
00936:  DATA 52,45
00938:  DATA 45,00
0093A:  DATA 4D,53
0093C:  DATA 47,2D
0093E:  DATA 4F,43
00940:  DATA 4F,52
00942:  DATA 2D,37
00944:  DATA 36,2D
00946:  DATA 46,52
00948:  DATA 45,45
0094A:  DATA 00,43
0094C:  DATA 6F,72
0094E:  DATA 72,20
00950:  DATA 41,6C
00952:  DATA 74,61
00954:  DATA 20,46
00956:  DATA 61,73
00958:  DATA 65,20
0095A:  DATA 52,00
0095C:  DATA 43,6F
0095E:  DATA 72,72
00960:  DATA 20,41
00962:  DATA 6C,74
00964:  DATA 61,20
00966:  DATA 46,61
00968:  DATA 73,65
0096A:  DATA 20,53
0096C:  DATA 00,43
0096E:  DATA 6F,72
00970:  DATA 72,20
00972:  DATA 41,6C
00974:  DATA 74,61
00976:  DATA 20,46
00978:  DATA 61,73
0097A:  DATA 65,20
0097C:  DATA 54,00
0097E:  DATA 20,20
00980:  DATA 46,50
00982:  DATA 20,20
00984:  DATA 49,6E
00986:  DATA 64,75
00988:  DATA 74,69
0098A:  DATA 76,6F
0098C:  DATA 20,20
0098E:  DATA 00,20
00990:  DATA 46,50
00992:  DATA 20,20
00994:  DATA 43,61
00996:  DATA 70,61
00998:  DATA 63,69
0099A:  DATA 74,69
0099C:  DATA 76,6F
0099E:  DATA 20,00
009A0:  DATA 20,20
009A2:  DATA 44,65
009A4:  DATA 6D,61
009A6:  DATA 6E,64
009A8:  DATA 61,20
009AA:  DATA 41,4C
009AC:  DATA 54,41
009AE:  DATA 20,20
009B0:  DATA 00,20
009B2:  DATA 54,43
009B4:  DATA 20,49
009B6:  DATA 6E,76
009B8:  DATA 65,72
009BA:  DATA 74,69
009BC:  DATA 64,6F
009BE:  DATA 20,52
009C0:  DATA 20,00
009C2:  DATA 20,54
009C4:  DATA 43,20
009C6:  DATA 49,6E
009C8:  DATA 76,65
009CA:  DATA 72,74
009CC:  DATA 69,64
009CE:  DATA 6F,20
009D0:  DATA 53,20
009D2:  DATA 00,20
009D4:  DATA 54,43
009D6:  DATA 20,49
009D8:  DATA 6E,76
009DA:  DATA 65,72
009DC:  DATA 74,69
009DE:  DATA 64,6F
009E0:  DATA 20,54
009E2:  DATA 20,00
009E4:  DATA 20,53
009E6:  DATA 65,71
009E8:  DATA 2E,20
009EA:  DATA 49,6E
009EC:  DATA 76,65
009EE:  DATA 72,74
009F0:  DATA 69,64
009F2:  DATA 61,20
009F4:  DATA 00,4D
009F6:  DATA 53,47
009F8:  DATA 2D,4F
009FA:  DATA 43,4F
009FC:  DATA 52,2D
009FE:  DATA 38,37
00A00:  DATA 2D,46
00A02:  DATA 52,45
00A04:  DATA 45,00
00A06:  DATA 54,72
00A08:  DATA 61,6E
00A0A:  DATA 73,6D
00A0C:  DATA 69,73
00A0E:  DATA 73,61
00A10:  DATA 6F,20
00A12:  DATA 52,65
00A14:  DATA 67,2E
00A16:  DATA 00,54
00A18:  DATA 72,61
00A1A:  DATA 6E,73
00A1C:  DATA 6D,69
00A1E:  DATA 73,73
00A20:  DATA 61,6F
00A22:  DATA 20,4F
00A24:  DATA 63,6F
00A26:  DATA 72,00
00A28:  DATA 56,6F
00A2A:  DATA 6C,74
00A2C:  DATA 61,20
00A2E:  DATA 64,65
00A30:  DATA 20,45
00A32:  DATA 6E,65
00A34:  DATA 72,67
00A36:  DATA 69,61
00A38:  DATA 00,20
00A3A:  DATA 20,20
00A3C:  DATA 20,20
00A3E:  DATA 20,52
00A40:  DATA 65,73
00A42:  DATA 65,74
00A44:  DATA 20,20
00A46:  DATA 20,20
00A48:  DATA 20,00
00A4A:  DATA 49,6E
00A4C:  DATA 69,63
00A4E:  DATA 69,6F
00A50:  DATA 20,20
00A52:  DATA 52,65
00A54:  DATA 67,69
00A56:  DATA 73,74
00A58:  DATA 72,6F
00A5A:  DATA 00,20
00A5C:  DATA 46,69
00A5E:  DATA 6E,61
00A60:  DATA 6C,20
00A62:  DATA 52,65
00A64:  DATA 67,69
00A66:  DATA 73,74
00A68:  DATA 72,6F
00A6A:  DATA 20,00
00A6C:  DATA 20,41
00A6E:  DATA 6A,75
00A70:  DATA 73,74
00A72:  DATA 65,20
00A74:  DATA 64,65
00A76:  DATA 20,44
00A78:  DATA 61,74
00A7A:  DATA 61,20
00A7C:  DATA 00,20
00A7E:  DATA 20,20
00A80:  DATA 41,70
00A82:  DATA 61,67
00A84:  DATA 61,6D
00A86:  DATA 65,6E
00A88:  DATA 74,6F
00A8A:  DATA 20,20
00A8C:  DATA 20,00
00A8E:  DATA 50,72
00A90:  DATA 6F,67
00A92:  DATA 72,61
00A94:  DATA 6D,61
00A96:  DATA 20,54
00A98:  DATA 65,63
00A9A:  DATA 6C,61
00A9C:  DATA 64,6F
00A9E:  DATA 00,50
00AA0:  DATA 72,6F
00AA2:  DATA 67,20
00AA4:  DATA 4E,61
00AA6:  DATA 6F,20
00AA8:  DATA 41,75
00AAA:  DATA 74,6F
00AAC:  DATA 72,69
00AAE:  DATA 7A,00
00AB0:  DATA 46,61
00AB2:  DATA 6C,74
00AB4:  DATA 61,20
00AB6:  DATA 64,65
00AB8:  DATA 20,45
00ABA:  DATA 6E,65
00ABC:  DATA 72,67
00ABE:  DATA 69,61
00AC0:  DATA 00,4D
00AC2:  DATA 53,47
00AC4:  DATA 2D,4F
00AC6:  DATA 43,4F
00AC8:  DATA 52,2D
00ACA:  DATA 39,39
00ACC:  DATA 2D,46
00ACE:  DATA 52,45
00AD0:  DATA 45,00
00AD2:  DATA 4D,53
00AD4:  DATA 47,2D
00AD6:  DATA 4F,43
00AD8:  DATA 4F,52
00ADA:  DATA 2D,31
00ADC:  DATA 30,30
00ADE:  DATA 46,52
00AE0:  DATA 45,45
00AE2:  DATA 00,4D
00AE4:  DATA 53,47
00AE6:  DATA 2D,4F
00AE8:  DATA 43,4F
00AEA:  DATA 52,2D
00AEC:  DATA 31,30
00AEE:  DATA 31,46
00AF0:  DATA 52,45
00AF2:  DATA 45,00
00AF4:  DATA 4D,53
00AF6:  DATA 47,2D
00AF8:  DATA 4F,43
00AFA:  DATA 4F,52
00AFC:  DATA 2D,31
00AFE:  DATA 30,32
00B00:  DATA 46,52
00B02:  DATA 45,45
00B04:  DATA 00,52
00B06:  DATA 65,73
00B08:  DATA 65,74
00B0A:  DATA 20,64
00B0C:  DATA 6F,20
00B0E:  DATA 41,6C
00B10:  DATA 61,72
00B12:  DATA 6D,65
00B14:  DATA 20,00
00B16:  DATA 20,20
00B18:  DATA 54,65
00B1A:  DATA 6E,73
00B1C:  DATA 61,6F
00B1E:  DATA 20,20
00B20:  DATA 41,6C
00B22:  DATA 74,61
00B24:  DATA 20,20
00B26:  DATA 00,20
00B28:  DATA 20,54
00B2A:  DATA 65,6E
00B2C:  DATA 73,61
00B2E:  DATA 6F,20
00B30:  DATA 42,61
00B32:  DATA 69,78
00B34:  DATA 61,20
00B36:  DATA 20,00
00B38:  DATA 20,43
00B3A:  DATA 6F,72
00B3C:  DATA 72,65
00B3E:  DATA 6E,74
00B40:  DATA 65,20
00B42:  DATA 20,41
00B44:  DATA 6C,74
00B46:  DATA 61,20
00B48:  DATA 00,20
00B4A:  DATA 20,46
00B4C:  DATA 61,6C
00B4E:  DATA 74,61
00B50:  DATA 20,46
00B52:  DATA 61,73
00B54:  DATA 65,20
00B56:  DATA 52,20
00B58:  DATA 20,00
00B5A:  DATA 20,20
00B5C:  DATA 46,61
00B5E:  DATA 6C,74
00B60:  DATA 61,20
00B62:  DATA 46,61
00B64:  DATA 73,65
00B66:  DATA 20,53
00B68:  DATA 20,20
00B6A:  DATA 00,20
00B6C:  DATA 20,46
00B6E:  DATA 61,6C
00B70:  DATA 74,61
00B72:  DATA 20,46
00B74:  DATA 61,73
00B76:  DATA 65,20
00B78:  DATA 54,20
00B7A:  DATA 20,00
00B7C:  DATA 20,20
00B7E:  DATA 46,61
00B80:  DATA 6C,74
00B82:  DATA 61,20
00B84:  DATA 20,46
00B86:  DATA 61,73
00B88:  DATA 65,73
00B8A:  DATA 20,20
00B8C:  DATA 00,43
00B8E:  DATA 6F,72
00B90:  DATA 72,65
00B92:  DATA 6E,74
00B94:  DATA 65,20
00B96:  DATA 42,61
00B98:  DATA 69,78
00B9A:  DATA 61,20
00B9C:  DATA 52,00
00B9E:  DATA 43,6F
00BA0:  DATA 72,72
00BA2:  DATA 65,6E
00BA4:  DATA 74,65
00BA6:  DATA 20,42
00BA8:  DATA 61,69
00BAA:  DATA 78,61
00BAC:  DATA 20,53
00BAE:  DATA 00,43
00BB0:  DATA 6F,72
00BB2:  DATA 72,65
00BB4:  DATA 6E,74
00BB6:  DATA 65,20
00BB8:  DATA 42,61
00BBA:  DATA 69,78
00BBC:  DATA 61,20
00BBE:  DATA 54,00
00BC0:  DATA 20,43
00BC2:  DATA 6F,72
00BC4:  DATA 72,65
00BC6:  DATA 6E,74
00BC8:  DATA 65,20
00BCA:  DATA 42,61
00BCC:  DATA 69,78
00BCE:  DATA 61,20
00BD0:  DATA 00,20
00BD2:  DATA 20,54
00BD4:  DATA 72,6F
00BD6:  DATA 63,61
00BD8:  DATA 20,54
00BDA:  DATA 65,6E
00BDC:  DATA 73,61
00BDE:  DATA 6F,20
00BE0:  DATA 20,00
00BE2:  DATA 20,50
00BE4:  DATA 6F,74
00BE6:  DATA 65,6E
00BE8:  DATA 63,69
00BEA:  DATA 61,20
00BEC:  DATA 20,41
00BEE:  DATA 6C,74
00BF0:  DATA 61,20
00BF2:  DATA 00,50
00BF4:  DATA 6F,74
00BF6:  DATA 65,6E
00BF8:  DATA 63,69
00BFA:  DATA 61,20
00BFC:  DATA 41,6C
00BFE:  DATA 74,61
00C00:  DATA 20,20
00C02:  DATA 52,00
00C04:  DATA 50,6F
00C06:  DATA 74,65
00C08:  DATA 6E,63
00C0A:  DATA 69,61
00C0C:  DATA 20,41
00C0E:  DATA 6C,74
00C10:  DATA 61,20
00C12:  DATA 20,53
00C14:  DATA 00,50
00C16:  DATA 6F,74
00C18:  DATA 65,6E
00C1A:  DATA 63,69
00C1C:  DATA 61,20
00C1E:  DATA 41,6C
00C20:  DATA 74,61
00C22:  DATA 20,20
00C24:  DATA 54,00
00C26:  DATA 20,20
00C28:  DATA 43,6F
00C2A:  DATA 64,69
00C2C:  DATA 67,6F
00C2E:  DATA 20,4C
00C30:  DATA 6F,63
00C32:  DATA 61,6C
00C34:  DATA 20,20
00C36:  DATA 00,20
00C38:  DATA 52,65
00C3A:  DATA 67,69
00C3C:  DATA 73,74
00C3E:  DATA 72,6F
00C40:  DATA 20,54
00C42:  DATA 65,73
00C44:  DATA 74,65
00C46:  DATA 20,00
00C48:  DATA 4F,63
00C4A:  DATA 6F,72
00C4C:  DATA 72,65
00C4E:  DATA 6E,63
00C50:  DATA 69,61
00C52:  DATA 3A,20
00C54:  DATA 20,20
00C56:  DATA 20,20
00C58:  DATA 00,20
00C5A:  DATA 44,61
00C5C:  DATA 74,61
00C5E:  DATA 20,65
00C60:  DATA 20,48
00C62:  DATA 6F,72
00C64:  DATA 61,72
00C66:  DATA 69,6F
00C68:  DATA 20,00
00C6A:  DATA 20,44
00C6C:  DATA 61,74
00C6E:  DATA 61,3A
00C70:  DATA 20,20
00C72:  DATA 20,2F
00C74:  DATA 20,20
00C76:  DATA 2F,20
00C78:  DATA 20,20
00C7A:  DATA 00,20
00C7C:  DATA 48,6F
00C7E:  DATA 72,61
00C80:  DATA 3A,20
00C82:  DATA 20,20
00C84:  DATA 20,20
00C86:  DATA 3A,20
00C88:  DATA 20,20
00C8A:  DATA 20,00
00C8C:  DATA 20,54
00C8E:  DATA 65,6E
00C90:  DATA 73,61
00C92:  DATA 6F,20
00C94:  DATA 43,72
00C96:  DATA 69,74
00C98:  DATA 69,63
00C9A:  DATA 61,20
00C9C:  DATA 00,43
00C9E:  DATA 6F,72
00CA0:  DATA 72,65
00CA2:  DATA 6E,74
00CA4:  DATA 65,20
00CA6:  DATA 43,72
00CA8:  DATA 69,74
00CAA:  DATA 69,63
00CAC:  DATA 61,00
00CAE:  DATA 20,20
00CB0:  DATA 20,20
00CB2:  DATA 20,54
00CB4:  DATA 61,62
00CB6:  DATA 65,6C
00CB8:  DATA 61,20
00CBA:  DATA 20,20
00CBC:  DATA 20,20
00CBE:  DATA 00,20
00CC0:  DATA 4D,65
00CC2:  DATA 6D,6F
00CC4:  DATA 72,69
00CC6:  DATA 61,3A
00CC8:  DATA 20,31
00CCA:  DATA 20,4E
00CCC:  DATA 4F,4B
00CCE:  DATA 21,00
00CD0:  DATA 44,65
00CD2:  DATA 73,6C
00CD4:  DATA 2E,20
00CD6:  DATA 70,6F
00CD8:  DATA 72,20
00CDA:  DATA 54,65
00CDC:  DATA 6E,73
00CDE:  DATA 61,6F
00CE0:  DATA 00,20
00CE2:  DATA 20,20
00CE4:  DATA 4C,69
00CE6:  DATA 6D,70
00CE8:  DATA 61,20
00CEA:  DATA 4F,63
00CEC:  DATA 6F,72
00CEE:  DATA 72,2E
00CF0:  DATA 20,00
00CF2:  DATA 20,20
00CF4:  DATA 20,2A
00CF6:  DATA 20,43
00CF8:  DATA 61,6E
00CFA:  DATA 63,65
00CFC:  DATA 6C,61
00CFE:  DATA 72,20
00D00:  DATA 20,20
00D02:  DATA 00,20
00D04:  DATA 20,5A
00D06:  DATA 65,72
00D08:  DATA 61,72
00D0A:  DATA 20,43
00D0C:  DATA 61,72
00D0E:  DATA 67,61
00D10:  DATA 20,20
00D12:  DATA 20,00
00D14:  DATA 43,6F
00D16:  DATA 72,72
00D18:  DATA 65,6E
00D1A:  DATA 74,65
00D1C:  DATA 20,43
00D1E:  DATA 72,69
00D20:  DATA 74,69
00D22:  DATA 63,61
00D24:  DATA 00,20
00D26:  DATA 20,20
00D28:  DATA 20,20
00D2A:  DATA 53,74
00D2C:  DATA 61,74
00D2E:  DATA 75,73
00D30:  DATA 20,20
00D32:  DATA 20,20
00D34:  DATA 20,00
00D36:  DATA 20,44
00D38:  DATA 2D,3F
00D3A:  DATA 3F,3A
00D3C:  DATA 3F,3F
00D3E:  DATA 20,4C
00D40:  DATA 2D,3F
00D42:  DATA 3F,3A
00D44:  DATA 3F,3F
00D46:  DATA 00,44
00D48:  DATA 65,73
00D4A:  DATA 61,63
00D4C:  DATA 69,6F
00D4E:  DATA 6E,61
00D50:  DATA 3A,20
00D52:  DATA 20,20
00D54:  DATA 20,20
00D56:  DATA 73,00
00D58:  DATA 40,40
00D5A:  DATA 40,40
00D5C:  DATA 40,40
00D5E:  DATA 40,40
00D60:  DATA 40,40
00D62:  DATA 20,28
00D64:  DATA 52,29
00D66:  DATA 20,20
00D68:  DATA 00,20
00D6A:  DATA 20,28
00D6C:  DATA 53,29
00D6E:  DATA 20,20
00D70:  DATA 20,20
00D72:  DATA 20,20
00D74:  DATA 28,54
00D76:  DATA 29,20
00D78:  DATA 20,00
00D7A:  DATA 6B,57
00D7C:  DATA 68,3A
00D7E:  DATA 20,20
00D80:  DATA 20,20
00D82:  DATA 20,20
00D84:  DATA 20,20
00D86:  DATA 20,20
00D88:  DATA 20,20
00D8A:  DATA 00,6B
00D8C:  DATA 56,41
00D8E:  DATA 72,68
00D90:  DATA 3A,20
00D92:  DATA 20,20
00D94:  DATA 20,20
00D96:  DATA 20,20
00D98:  DATA 20,20
00D9A:  DATA 20,00
00D9C:  DATA 20,20
00D9E:  DATA 6B,2E
00DA0:  DATA 20,6B
00DA2:  DATA 57,68
00DA4:  DATA 3A,20
00DA6:  DATA 20,20
00DA8:  DATA 20,20
00DAA:  DATA 20,20
00DAC:  DATA 00,20
00DAE:  DATA 20,6B
00DB0:  DATA 2E,6B
00DB2:  DATA 56,41
00DB4:  DATA 72,68
00DB6:  DATA 3A,20
00DB8:  DATA 20,20
00DBA:  DATA 20,20
00DBC:  DATA 20,00
00DBE:  DATA 54,61
00DC0:  DATA 72,3A
00DC2:  DATA 20,20
00DC4:  DATA 20,54
00DC6:  DATA 65,6D
00DC8:  DATA 70,6F
00DCA:  DATA 3A,20
00DCC:  DATA 20,20
00DCE:  DATA 00,50
00DD0:  DATA 3A,20
00DD2:  DATA 20,20
00DD4:  DATA 20,20
00DD6:  DATA 20,2F
00DD8:  DATA 20,20
00DDA:  DATA 20,20
00DDC:  DATA 20,20
00DDE:  DATA 20,00
00DE0:  DATA 46,50
00DE2:  DATA 3A,20
00DE4:  DATA 20,20
00DE6:  DATA 20,20
00DE8:  DATA 20,20
00DEA:  DATA 20,40
00DEC:  DATA 40,40
00DEE:  DATA 40,20
00DF0:  DATA 00,55
00DF2:  DATA 6C,74
00DF4:  DATA 2E,50
00DF6:  DATA 20,6B
00DF8:  DATA 57,3A
00DFA:  DATA 20,20
00DFC:  DATA 20,20
00DFE:  DATA 20,20
00E00:  DATA 20,00
00E02:  DATA 55,6C
00E04:  DATA 74,2E
00E06:  DATA 50,20
00E08:  DATA 6B,56
00E0A:  DATA 41,72
00E0C:  DATA 3A,20
00E0E:  DATA 20,20
00E10:  DATA 20,20
00E12:  DATA 00,20
00E14:  DATA 45,52
00E16:  DATA 52,4F
00E18:  DATA 20,43
00E1A:  DATA 52,43
00E1C:  DATA 20,2D
00E1E:  DATA 20,49
00E20:  DATA 55,21
00E22:  DATA 20,00
00E24:  DATA 43,61
00E26:  DATA 72,67
00E28:  DATA 61,20
00E2A:  DATA 65,6D
00E2C:  DATA 20,72
00E2E:  DATA 65,70
00E30:  DATA 6F,75
00E32:  DATA 73,6F
00E34:  DATA 00,55
00E36:  DATA 6C,74
00E38:  DATA 2E,6B
00E3A:  DATA 57,3A
00E3C:  DATA 20,20
00E3E:  DATA 20,20
00E40:  DATA 20,20
00E42:  DATA 20,20
00E44:  DATA 20,00
00E46:  DATA 55,6C
00E48:  DATA 74,2E
00E4A:  DATA 6B,56
00E4C:  DATA 41,72
00E4E:  DATA 3A,20
00E50:  DATA 20,20
00E52:  DATA 20,20
00E54:  DATA 20,20
00E56:  DATA 00,50
00E58:  DATA 65,72
00E5A:  DATA 69,6F
00E5C:  DATA 64,6F
00E5E:  DATA 20,50
00E60:  DATA 6F,6E
00E62:  DATA 74,61
00E64:  DATA 20,20
00E66:  DATA 20,00
00E68:  DATA 50,65
00E6A:  DATA 72,69
00E6C:  DATA 6F,64
00E6E:  DATA 6F,20
00E70:  DATA 46,2E
00E72:  DATA 50,6F
00E74:  DATA 6E,74
00E76:  DATA 61,20
00E78:  DATA 00,4D
00E7A:  DATA 53,47
00E7C:  DATA 5F,31
00E7E:  DATA 35,35
00E80:  DATA 2D,4C
00E82:  DATA 49,76
00E84:  DATA 72,65
00E86:  DATA 20,20
00E88:  DATA 20,00
00E8A:  DATA 20,20
00E8C:  DATA 50,72
00E8E:  DATA 6F,74
00E90:  DATA 6F,63
00E92:  DATA 6F,6C
00E94:  DATA 6F,20
00E96:  DATA 49,55
00E98:  DATA 20,20
00E9A:  DATA 00,20
00E9C:  DATA 20,20
00E9E:  DATA 20,52
00EA0:  DATA 45,50
00EA2:  DATA 3A,20
00EA4:  DATA 20,20
00EA6:  DATA 20,20
00EA8:  DATA 20,20
00EAA:  DATA 20,00
00EAC:  DATA 4D,6F
00EAE:  DATA 64,6F
00EB0:  DATA 20,43
00EB2:  DATA 61,72
00EB4:  DATA 67,61
00EB6:  DATA 3A,20
00EB8:  DATA 40,40
00EBA:  DATA 2D,40
00EBC:  DATA 00,54
00EBE:  DATA 69,70
00EC0:  DATA 6F,20
00EC2:  DATA 64,65
00EC4:  DATA 20,43
00EC6:  DATA 6F,6E
00EC8:  DATA 74,72
00ECA:  DATA 6F,6C
00ECC:  DATA 65,00
00ECE:  DATA 20,46
00ED0:  DATA 69,6C
00ED2:  DATA 61,20
00ED4:  DATA 53,65
00ED6:  DATA 71,75
00ED8:  DATA 65,6E
00EDA:  DATA 63,69
00EDC:  DATA 61,6C
00EDE:  DATA 00,20
00EE0:  DATA 20,46
00EE2:  DATA 69,6C
00EE4:  DATA 61,20
00EE6:  DATA 43,69
00EE8:  DATA 72,63
00EEA:  DATA 75,6C
00EEC:  DATA 61,72
00EEE:  DATA 20,00
00EF0:  DATA 20,50
00EF2:  DATA 65,72
00EF4:  DATA 69,6F
00EF6:  DATA 64,6F
00EF8:  DATA 20,50
00EFA:  DATA 6F,6E
00EFC:  DATA 74,61
00EFE:  DATA 20,20
00F00:  DATA 00,4D
00F02:  DATA 53,47
00F04:  DATA 5F,31
00F06:  DATA 36,33
00F08:  DATA 2D,4C
00F0A:  DATA 49,76
00F0C:  DATA 72,65
00F0E:  DATA 20,20
00F10:  DATA 20,00
00F12:  DATA 50,65
00F14:  DATA 72,69
00F16:  DATA 6F,64
00F18:  DATA 6F,20
00F1A:  DATA 46,2E
00F1C:  DATA 20,50
00F1E:  DATA 6F,6E
00F20:  DATA 74,61
00F22:  DATA 00,4D
00F24:  DATA 53,47
00F26:  DATA 5F,31
00F28:  DATA 36,35
00F2A:  DATA 2D,4C
00F2C:  DATA 49,76
00F2E:  DATA 72,65
00F30:  DATA 20,20
00F32:  DATA 20,00
00F34:  DATA 46,61
00F36:  DATA 6C,74
00F38:  DATA 61,20
00F3A:  DATA 50,75
00F3C:  DATA 6C,73
00F3E:  DATA 6F,20
00F40:  DATA 52,45
00F42:  DATA 50,20
00F44:  DATA 00,56
00F46:  DATA 6F,6C
00F48:  DATA 74,61
00F4A:  DATA 20,50
00F4C:  DATA 75,6C
00F4E:  DATA 73,6F
00F50:  DATA 20,52
00F52:  DATA 45,50
00F54:  DATA 20,00
00F56:  DATA 45,72
00F58:  DATA 72,6F
00F5A:  DATA 20,43
00F5C:  DATA 6F,6E
00F5E:  DATA 73,74
00F60:  DATA 2E,6B
00F62:  DATA 57,68
00F64:  DATA 20,20
00F66:  DATA 00,45
00F68:  DATA 72,72
00F6A:  DATA 6F,20
00F6C:  DATA 43,6F
00F6E:  DATA 6E,73
00F70:  DATA 74,2E
00F72:  DATA 6B,56
00F74:  DATA 41,72
00F76:  DATA 68,00
00F78:  DATA 56,61
00F7A:  DATA 6C,6F
00F7C:  DATA 72,20
00F7E:  DATA 54,43
00F80:  DATA 3A,20
00F82:  DATA 20,20
00F84:  DATA 20,20
00F86:  DATA 2F,35
00F88:  DATA 00,56
00F8A:  DATA 61,6C
00F8C:  DATA 6F,72
00F8E:  DATA 20,54
00F90:  DATA 50,3A
00F92:  DATA 20,20
00F94:  DATA 20,20
00F96:  DATA 20,20
00F98:  DATA 20,00
00F9A:  DATA 4D,6F
00F9C:  DATA 64,6F
00F9E:  DATA 20,41
00FA0:  DATA 63,69
00FA2:  DATA 6F,6E
00FA4:  DATA 61,6D
00FA6:  DATA 65,6E
00FA8:  DATA 74,6F
00FAA:  DATA 00,4D
00FAC:  DATA 6F,64
00FAE:  DATA 6F,20
00FB0:  DATA 53,61
00FB2:  DATA 69,64
00FB4:  DATA 61,73
00FB6:  DATA 20,49
00FB8:  DATA 4E,56
00FBA:  DATA 20,00
00FBC:  DATA 4D,6F
00FBE:  DATA 64,6F
00FC0:  DATA 20,53
00FC2:  DATA 61,69
00FC4:  DATA 64,61
00FC6:  DATA 73,20
00FC8:  DATA 4E,4F
00FCA:  DATA 52,4D
00FCC:  DATA 00,54
00FCE:  DATA 45,53
00FD0:  DATA 54,45
00FD2:  DATA 20,4D
00FD4:  DATA 45,4D
00FD6:  DATA 20,20
00FD8:  DATA 20,20
00FDA:  DATA 20,20
00FDC:  DATA 20,00
00FDE:  DATA 45,4E
00FE0:  DATA 44,3A
00FE2:  DATA 20,20
00FE4:  DATA 20,20
00FE6:  DATA 20,20
00FE8:  DATA 20,20
00FEA:  DATA 20,20
00FEC:  DATA 20,20
00FEE:  DATA 00,46
00FF0:  DATA 49,4D
00FF2:  DATA 3A,20
00FF4:  DATA 20,20
00FF6:  DATA 20,20
00FF8:  DATA 20,20
00FFA:  DATA 20,20
00FFC:  DATA 20,20
00FFE:  DATA 20,00
01000:  CLRF   FF7
01002:  ADDLW  14
01004:  MOVWF  FF6
01006:  MOVLW  10
01008:  ADDWFC FF7,F
0100A:  MOVLW  00
0100C:  MOVWF  FF8
0100E:  TBLRD*+
01010:  MOVF   FF5,W
01012:  RETURN 0
01014:  DATA 42,43
01016:  DATA 44,45
01018:  DATA 46,47
0101A:  DATA 48,49
0101C:  DATA 4A,4B
0101E:  DATA 4C,4D
01020:  DATA 4E,4F
01022:  DATA 50,51
01024:  DATA 52,53
01026:  DATA 54,55
01028:  DATA 56,57
0102A:  DATA 58,59
0102C:  DATA 5A,5B
0102E:  DATA 5C,5D
01030:  DATA 5E,5F
01032:  DATA 60,61
01034:  DATA 62,63
01036:  DATA 64,65
01038:  DATA 66,67
0103A:  DATA 68,69
0103C:  DATA 6A,6B
0103E:  DATA 6C,6D
01040:  DATA 6E,6F
01042:  DATA 70,71
01044:  DATA 72,73
01046:  DATA 74,75
01048:  DATA 76,77
0104A:  DATA 78,52
0104C:  DATA FF,FF
0104E:  DATA A2,A3
01050:  DATA A4,A5
01052:  DATA A6,A7
01054:  CLRF   FF7
01056:  ADDLW  68
01058:  MOVWF  FF6
0105A:  MOVLW  10
0105C:  ADDWFC FF7,F
0105E:  MOVLW  00
01060:  MOVWF  FF8
01062:  TBLRD*+
01064:  MOVF   FF5,W
01066:  RETURN 0
01068:  DATA 41,35
0106A:  CLRF   FF7
0106C:  ADDLW  7E
0106E:  MOVWF  FF6
01070:  MOVLW  10
01072:  ADDWFC FF7,F
01074:  MOVLW  00
01076:  MOVWF  FF8
01078:  TBLRD*+
0107A:  MOVF   FF5,W
0107C:  RETURN 0
0107E:  DATA 00,C1
01080:  DATA 81,40
01082:  DATA 01,C0
01084:  DATA 80,41
01086:  DATA 01,C0
01088:  DATA 80,41
0108A:  DATA 00,C1
0108C:  DATA 81,40
0108E:  DATA 01,C0
01090:  DATA 80,41
01092:  DATA 00,C1
01094:  DATA 81,40
01096:  DATA 00,C1
01098:  DATA 81,40
0109A:  DATA 01,C0
0109C:  DATA 80,41
0109E:  DATA 01,C0
010A0:  DATA 80,41
010A2:  DATA 00,C1
010A4:  DATA 81,40
010A6:  DATA 00,C1
010A8:  DATA 81,40
010AA:  DATA 01,C0
010AC:  DATA 80,41
010AE:  DATA 00,C1
010B0:  DATA 81,40
010B2:  DATA 01,C0
010B4:  DATA 80,41
010B6:  DATA 01,C0
010B8:  DATA 80,41
010BA:  DATA 00,C1
010BC:  DATA 81,40
010BE:  DATA 01,C0
010C0:  DATA 80,41
010C2:  DATA 00,C1
010C4:  DATA 81,40
010C6:  DATA 00,C1
010C8:  DATA 81,40
010CA:  DATA 01,C0
010CC:  DATA 80,41
010CE:  DATA 00,C1
010D0:  DATA 81,40
010D2:  DATA 01,C0
010D4:  DATA 80,41
010D6:  DATA 01,C0
010D8:  DATA 80,41
010DA:  DATA 00,C1
010DC:  DATA 81,40
010DE:  DATA 00,C1
010E0:  DATA 81,40
010E2:  DATA 01,C0
010E4:  DATA 80,41
010E6:  DATA 01,C0
010E8:  DATA 80,41
010EA:  DATA 00,C1
010EC:  DATA 81,40
010EE:  DATA 01,C0
010F0:  DATA 80,41
010F2:  DATA 00,C1
010F4:  DATA 81,40
010F6:  DATA 00,C1
010F8:  DATA 81,40
010FA:  DATA 01,C0
010FC:  DATA 80,41
010FE:  DATA 01,C0
01100:  DATA 80,41
01102:  DATA 00,C1
01104:  DATA 81,40
01106:  DATA 00,C1
01108:  DATA 81,40
0110A:  DATA 01,C0
0110C:  DATA 80,41
0110E:  DATA 00,C1
01110:  DATA 81,40
01112:  DATA 01,C0
01114:  DATA 80,41
01116:  DATA 01,C0
01118:  DATA 80,41
0111A:  DATA 00,C1
0111C:  DATA 81,40
0111E:  DATA 00,C1
01120:  DATA 81,40
01122:  DATA 01,C0
01124:  DATA 80,41
01126:  DATA 01,C0
01128:  DATA 80,41
0112A:  DATA 00,C1
0112C:  DATA 81,40
0112E:  DATA 01,C0
01130:  DATA 80,41
01132:  DATA 00,C1
01134:  DATA 81,40
01136:  DATA 00,C1
01138:  DATA 81,40
0113A:  DATA 01,C0
0113C:  DATA 80,41
0113E:  DATA 00,C1
01140:  DATA 81,40
01142:  DATA 01,C0
01144:  DATA 80,41
01146:  DATA 01,C0
01148:  DATA 80,41
0114A:  DATA 00,C1
0114C:  DATA 81,40
0114E:  DATA 01,C0
01150:  DATA 80,41
01152:  DATA 00,C1
01154:  DATA 81,40
01156:  DATA 00,C1
01158:  DATA 81,40
0115A:  DATA 01,C0
0115C:  DATA 80,41
0115E:  DATA 01,C0
01160:  DATA 80,41
01162:  DATA 00,C1
01164:  DATA 81,40
01166:  DATA 00,C1
01168:  DATA 81,40
0116A:  DATA 01,C0
0116C:  DATA 80,41
0116E:  DATA 00,C1
01170:  DATA 81,40
01172:  DATA 01,C0
01174:  DATA 80,41
01176:  DATA 01,C0
01178:  DATA 80,41
0117A:  DATA 00,C1
0117C:  DATA 81,40
0117E:  CLRF   FF7
01180:  ADDLW  92
01182:  MOVWF  FF6
01184:  MOVLW  11
01186:  ADDWFC FF7,F
01188:  MOVLW  00
0118A:  MOVWF  FF8
0118C:  TBLRD*+
0118E:  MOVF   FF5,W
01190:  RETURN 0
01192:  DATA 00,C0
01194:  DATA C1,01
01196:  DATA C3,03
01198:  DATA 02,C2
0119A:  DATA C6,06
0119C:  DATA 07,C7
0119E:  DATA 05,C5
011A0:  DATA C4,04
011A2:  DATA CC,0C
011A4:  DATA 0D,CD
011A6:  DATA 0F,CF
011A8:  DATA CE,0E
011AA:  DATA 0A,CA
011AC:  DATA CB,0B
011AE:  DATA C9,09
011B0:  DATA 08,C8
011B2:  DATA D8,18
011B4:  DATA 19,D9
011B6:  DATA 1B,DB
011B8:  DATA DA,1A
011BA:  DATA 1E,DE
011BC:  DATA DF,1F
011BE:  DATA DD,1D
011C0:  DATA 1C,DC
011C2:  DATA 14,D4
011C4:  DATA D5,15
011C6:  DATA D7,17
011C8:  DATA 16,D6
011CA:  DATA D2,12
011CC:  DATA 13,D3
011CE:  DATA 11,D1
011D0:  DATA D0,10
011D2:  DATA F0,30
011D4:  DATA 31,F1
011D6:  DATA 33,F3
011D8:  DATA F2,32
011DA:  DATA 36,F6
011DC:  DATA F7,37
011DE:  DATA F5,35
011E0:  DATA 34,F4
011E2:  DATA 3C,FC
011E4:  DATA FD,3D
011E6:  DATA FF,3F
011E8:  DATA 3E,FE
011EA:  DATA FA,3A
011EC:  DATA 3B,FB
011EE:  DATA 39,F9
011F0:  DATA F8,38
011F2:  DATA 28,E8
011F4:  DATA E9,29
011F6:  DATA EB,2B
011F8:  DATA 2A,EA
011FA:  DATA EE,2E
011FC:  DATA 2F,EF
011FE:  DATA 2D,ED
01200:  DATA EC,2C
01202:  DATA E4,24
01204:  DATA 25,E5
01206:  DATA 27,E7
01208:  DATA E6,26
0120A:  DATA 22,E2
0120C:  DATA E3,23
0120E:  DATA E1,21
01210:  DATA 20,E0
01212:  DATA A0,60
01214:  DATA 61,A1
01216:  DATA 63,A3
01218:  DATA A2,62
0121A:  DATA 66,A6
0121C:  DATA A7,67
0121E:  DATA A5,65
01220:  DATA 64,A4
01222:  DATA 6C,AC
01224:  DATA AD,6D
01226:  DATA AF,6F
01228:  DATA 6E,AE
0122A:  DATA AA,6A
0122C:  DATA 6B,AB
0122E:  DATA 69,A9
01230:  DATA A8,68
01232:  DATA 78,B8
01234:  DATA B9,79
01236:  DATA BB,7B
01238:  DATA 7A,BA
0123A:  DATA BE,7E
0123C:  DATA 7F,BF
0123E:  DATA 7D,BD
01240:  DATA BC,7C
01242:  DATA B4,74
01244:  DATA 75,B5
01246:  DATA 77,B7
01248:  DATA B6,76
0124A:  DATA 72,B2
0124C:  DATA B3,73
0124E:  DATA B1,71
01250:  DATA 70,B0
01252:  DATA 50,90
01254:  DATA 91,51
01256:  DATA 93,53
01258:  DATA 52,92
0125A:  DATA 96,56
0125C:  DATA 57,97
0125E:  DATA 55,95
01260:  DATA 94,54
01262:  DATA 9C,5C
01264:  DATA 5D,9D
01266:  DATA 5F,9F
01268:  DATA 9E,5E
0126A:  DATA 5A,9A
0126C:  DATA 9B,5B
0126E:  DATA 99,59
01270:  DATA 58,98
01272:  DATA 88,48
01274:  DATA 49,89
01276:  DATA 4B,8B
01278:  DATA 8A,4A
0127A:  DATA 4E,8E
0127C:  DATA 8F,4F
0127E:  DATA 8D,4D
01280:  DATA 4C,8C
01282:  DATA 44,84
01284:  DATA 85,45
01286:  DATA 87,47
01288:  DATA 46,86
0128A:  DATA 82,42
0128C:  DATA 43,83
0128E:  DATA 41,81
01290:  DATA 80,40
01292:  DATA 53,61
01294:  DATA 6D,70
01296:  DATA 6C,69
01298:  DATA 6E,67
0129A:  DATA 3A,0D
0129C:  DATA 0A,00
0129E:  DATA 0D,0A
012A0:  DATA 49,6E
012A2:  DATA 70,75
012A4:  DATA 74,20
012A6:  DATA 3D,20
012A8:  DATA 20,25
012AA:  DATA 66,20
012AC:  DATA 56,20
012AE:  DATA 20,20
012B0:  DATA 20,20
012B2:  DATA 25,66
012B4:  DATA 20,64
012B6:  DATA 42,0D
012B8:  DATA 0A,00
012BA:  DATA 41,00
012BC:  DATA 00,00
012BE:  DATA 00,6B
012C0:  DATA 57,20
012C2:  DATA 20,00
012C4:  DATA 6B,56
012C6:  DATA 41,20
012C8:  DATA 00,6B
012CA:  DATA 56,41
012CC:  DATA 72,00
012CE:  DATA 48,7A
012D0:  DATA 20,20
012D2:  DATA 00,56
012D4:  DATA 61,63
012D6:  DATA 20,00
012D8:  DATA 50,72
012DA:  DATA 69,6E
012DC:  DATA 74,61
012DE:  DATA 72,20
012E0:  DATA 52,45
012E2:  DATA 50,20
012E4:  DATA 54,52
012E6:  DATA 55,45
012E8:  DATA 21,21
012EA:  DATA 21,0D
012EC:  DATA 0A,00
*
01E46:  ADDWF  FE8,W
01E48:  CLRF   FF7
01E4A:  RLCF   FF7,F
01E4C:  ADDLW  67
01E4E:  MOVWF  FF6
01E50:  MOVLW  1E
01E52:  ADDWFC FF7,F
01E54:  MOVLW  00
01E56:  MOVWF  FF8
01E58:  MOVWF  FFB
01E5A:  TBLRD*-
01E5C:  MOVF   FF5,W
01E5E:  MOVWF  FFA
01E60:  TBLRD*
01E62:  MOVF   FF5,W
01E64:  MOVWF  FF9
01E66:  DATA CA,1C
01E68:  DATA DA,1C
01E6A:  DATA EA,1C
01E6C:  DATA FA,1C
01E6E:  DATA 0A,1D
01E70:  DATA 1A,1D
01E72:  DATA 2A,1D
01E74:  DATA 3A,1D
01E76:  DATA 4A,1D
01E78:  DATA 5A,1D
01E7A:  DATA 6A,1D
01E7C:  DATA 7A,1D
01E7E:  DATA 8A,1D
01E80:  DATA 9A,1D
01E82:  DATA AA,1D
01E84:  DATA BA,1D
*
02924:  MOVLW  8E
02926:  MOVWF  00
02928:  MOVFF  A7E,01
0292C:  MOVFF  A7D,02
02930:  CLRF   03
02932:  MOVF   01,F
02934:  BNZ   2948
02936:  MOVFF  02,01
0293A:  CLRF   02
0293C:  MOVLW  08
0293E:  SUBWF  00,F
02940:  MOVF   01,F
02942:  BNZ   2948
02944:  CLRF   00
02946:  BRA    2958
02948:  BCF    FD8.0
0294A:  BTFSC  01.7
0294C:  BRA    2956
0294E:  RLCF   02,F
02950:  RLCF   01,F
02952:  DECF   00,F
02954:  BRA    2948
02956:  BCF    01.7
02958:  RETURN 0
0295A:  MOVLB  A
0295C:  MOVF   x80,W
0295E:  BTFSC  FD8.2
02960:  BRA    2AAC
02962:  MOVWF  x8C
02964:  MOVF   x84,W
02966:  BTFSC  FD8.2
02968:  BRA    2AAC
0296A:  SUBWF  x8C,F
0296C:  BNC   2978
0296E:  MOVLW  7F
02970:  ADDWF  x8C,F
02972:  BTFSC  FD8.0
02974:  BRA    2AAC
02976:  BRA    2984
02978:  MOVLW  81
0297A:  SUBWF  x8C,F
0297C:  BTFSS  FD8.0
0297E:  BRA    2AAC
02980:  BTFSC  FD8.2
02982:  BRA    2AAC
02984:  MOVFF  A8C,00
02988:  CLRF   01
0298A:  CLRF   02
0298C:  CLRF   03
0298E:  CLRF   x8B
02990:  MOVFF  A81,A8A
02994:  BSF    x8A.7
02996:  MOVFF  A82,A89
0299A:  MOVFF  A83,A88
0299E:  MOVLW  19
029A0:  MOVWF  x8C
029A2:  MOVF   x87,W
029A4:  SUBWF  x88,F
029A6:  BC    29C2
029A8:  MOVLW  01
029AA:  SUBWF  x89,F
029AC:  BC    29C2
029AE:  SUBWF  x8A,F
029B0:  BC    29C2
029B2:  SUBWF  x8B,F
029B4:  BC    29C2
029B6:  INCF   x8B,F
029B8:  INCF   x8A,F
029BA:  INCF   x89,F
029BC:  MOVF   x87,W
029BE:  ADDWF  x88,F
029C0:  BRA    2A12
029C2:  MOVF   x86,W
029C4:  SUBWF  x89,F
029C6:  BC    29EC
029C8:  MOVLW  01
029CA:  SUBWF  x8A,F
029CC:  BC    29EC
029CE:  SUBWF  x8B,F
029D0:  BC    29EC
029D2:  INCF   x8B,F
029D4:  INCF   x8A,F
029D6:  MOVF   x86,W
029D8:  ADDWF  x89,F
029DA:  MOVF   x87,W
029DC:  ADDWF  x88,F
029DE:  BNC   2A12
029E0:  INCF   x89,F
029E2:  BNZ   2A12
029E4:  INCF   x8A,F
029E6:  BNZ   2A12
029E8:  INCF   x8B,F
029EA:  BRA    2A12
029EC:  MOVF   x85,W
029EE:  IORLW  80
029F0:  SUBWF  x8A,F
029F2:  BC    2A10
029F4:  MOVLW  01
029F6:  SUBWF  x8B,F
029F8:  BC    2A10
029FA:  INCF   x8B,F
029FC:  MOVF   x85,W
029FE:  IORLW  80
02A00:  ADDWF  x8A,F
02A02:  MOVF   x86,W
02A04:  ADDWF  x89,F
02A06:  BNC   29DA
02A08:  INCF   x8A,F
02A0A:  BNZ   29DA
02A0C:  INCF   x8B,F
02A0E:  BRA    29DA
02A10:  BSF    03.0
02A12:  DECFSZ x8C,F
02A14:  BRA    2A18
02A16:  BRA    2A2E
02A18:  BCF    FD8.0
02A1A:  RLCF   x88,F
02A1C:  RLCF   x89,F
02A1E:  RLCF   x8A,F
02A20:  RLCF   x8B,F
02A22:  BCF    FD8.0
02A24:  RLCF   03,F
02A26:  RLCF   02,F
02A28:  RLCF   01,F
02A2A:  RLCF   x8D,F
02A2C:  BRA    29A2
02A2E:  BTFSS  x8D.0
02A30:  BRA    2A3E
02A32:  BCF    FD8.0
02A34:  RRCF   01,F
02A36:  RRCF   02,F
02A38:  RRCF   03,F
02A3A:  RRCF   x8D,F
02A3C:  BRA    2A42
02A3E:  DECF   00,F
02A40:  BZ    2AAC
02A42:  BTFSC  x8D.7
02A44:  BRA    2A82
02A46:  BCF    FD8.0
02A48:  RLCF   x88,F
02A4A:  RLCF   x89,F
02A4C:  RLCF   x8A,F
02A4E:  RLCF   x8B,F
02A50:  MOVF   x87,W
02A52:  SUBWF  x88,F
02A54:  BC    2A64
02A56:  MOVLW  01
02A58:  SUBWF  x89,F
02A5A:  BC    2A64
02A5C:  SUBWF  x8A,F
02A5E:  BC    2A64
02A60:  SUBWF  x8B,F
02A62:  BNC   2A98
02A64:  MOVF   x86,W
02A66:  SUBWF  x89,F
02A68:  BC    2A74
02A6A:  MOVLW  01
02A6C:  SUBWF  x8A,F
02A6E:  BC    2A74
02A70:  SUBWF  x8B,F
02A72:  BNC   2A98
02A74:  MOVF   x85,W
02A76:  IORLW  80
02A78:  SUBWF  x8A,F
02A7A:  BC    2A82
02A7C:  MOVLW  01
02A7E:  SUBWF  x8B,F
02A80:  BNC   2A98
02A82:  INCF   03,F
02A84:  BNZ   2A98
02A86:  INCF   02,F
02A88:  BNZ   2A98
02A8A:  INCF   01,F
02A8C:  BNZ   2A98
02A8E:  INCF   00,F
02A90:  BZ    2AAC
02A92:  RRCF   01,F
02A94:  RRCF   02,F
02A96:  RRCF   03,F
02A98:  MOVFF  A81,A8C
02A9C:  MOVF   x85,W
02A9E:  XORWF  x8C,F
02AA0:  BTFSS  x8C.7
02AA2:  BRA    2AA8
02AA4:  BSF    01.7
02AA6:  BRA    2AB4
02AA8:  BCF    01.7
02AAA:  BRA    2AB4
02AAC:  CLRF   00
02AAE:  CLRF   01
02AB0:  CLRF   02
02AB2:  CLRF   03
02AB4:  MOVLB  0
02AB6:  RETURN 0
*
04714:  ADDWF  FE8,W
04716:  CLRF   FF7
04718:  RLCF   FF7,F
0471A:  ADDLW  35
0471C:  MOVWF  FF6
0471E:  MOVLW  47
04720:  ADDWFC FF7,F
04722:  MOVLW  00
04724:  MOVWF  FF8
04726:  MOVWF  FFB
04728:  TBLRD*-
0472A:  MOVF   FF5,W
0472C:  MOVWF  FFA
0472E:  TBLRD*
04730:  MOVF   FF5,W
04732:  MOVWF  FF9
04734:  DATA D6,46
04736:  DATA E0,46
04738:  DATA EA,46
0473A:  DATA F4,46
0473C:  MOVLB  A
0473E:  MOVF   x66,W
04740:  MULWF  x68
04742:  MOVFF  FF3,01
04746:  MOVFF  FF4,00
0474A:  MULWF  x69
0474C:  MOVF   FF3,W
0474E:  ADDWF  00,F
04750:  MOVF   x67,W
04752:  MULWF  x68
04754:  MOVF   FF3,W
04756:  ADDWFC 00,W
04758:  MOVWF  02
0475A:  MOVLB  0
0475C:  RETURN 0
*
04ECC:  CLRF   01
04ECE:  CLRF   02
04ED0:  CLRF   00
04ED2:  CLRF   03
04ED4:  MOVLB  A
04ED6:  MOVF   x6E,W
04ED8:  BNZ   4EDE
04EDA:  MOVF   x6D,W
04EDC:  BZ    4F0E
04EDE:  MOVLW  10
04EE0:  MOVWF  x6F
04EE2:  BCF    FD8.0
04EE4:  RLCF   x6B,F
04EE6:  RLCF   x6C,F
04EE8:  RLCF   00,F
04EEA:  RLCF   03,F
04EEC:  MOVF   x6E,W
04EEE:  SUBWF  03,W
04EF0:  BNZ   4EF6
04EF2:  MOVF   x6D,W
04EF4:  SUBWF  00,W
04EF6:  BNC   4F06
04EF8:  MOVF   x6D,W
04EFA:  SUBWF  00,F
04EFC:  BTFSS  FD8.0
04EFE:  DECF   03,F
04F00:  MOVF   x6E,W
04F02:  SUBWF  03,F
04F04:  BSF    FD8.0
04F06:  RLCF   01,F
04F08:  RLCF   02,F
04F0A:  DECFSZ x6F,F
04F0C:  BRA    4EE2
04F0E:  MOVLB  0
04F10:  RETURN 0
*
05306:  MOVLB  A
05308:  MOVF   x7D,W
0530A:  BTFSC  FD8.2
0530C:  BRA    53F0
0530E:  MOVWF  00
05310:  MOVF   x81,W
05312:  BTFSC  FD8.2
05314:  BRA    53F0
05316:  ADDWF  00,F
05318:  BNC   5322
0531A:  MOVLW  81
0531C:  ADDWF  00,F
0531E:  BC    53F0
05320:  BRA    532A
05322:  MOVLW  7F
05324:  SUBWF  00,F
05326:  BNC   53F0
05328:  BZ    53F0
0532A:  MOVFF  A7E,A85
0532E:  MOVF   x82,W
05330:  XORWF  x85,F
05332:  BSF    x7E.7
05334:  BSF    x82.7
05336:  MOVF   x80,W
05338:  MULWF  x84
0533A:  MOVFF  FF4,A87
0533E:  MOVF   x7F,W
05340:  MULWF  x83
05342:  MOVFF  FF4,03
05346:  MOVFF  FF3,A86
0534A:  MULWF  x84
0534C:  MOVF   FF3,W
0534E:  ADDWF  x87,F
05350:  MOVF   FF4,W
05352:  ADDWFC x86,F
05354:  MOVLW  00
05356:  ADDWFC 03,F
05358:  MOVF   x80,W
0535A:  MULWF  x83
0535C:  MOVF   FF3,W
0535E:  ADDWF  x87,F
05360:  MOVF   FF4,W
05362:  ADDWFC x86,F
05364:  MOVLW  00
05366:  CLRF   02
05368:  ADDWFC 03,F
0536A:  ADDWFC 02,F
0536C:  MOVF   x7E,W
0536E:  MULWF  x84
05370:  MOVF   FF3,W
05372:  ADDWF  x86,F
05374:  MOVF   FF4,W
05376:  ADDWFC 03,F
05378:  MOVLW  00
0537A:  ADDWFC 02,F
0537C:  MOVF   x7E,W
0537E:  MULWF  x83
05380:  MOVF   FF3,W
05382:  ADDWF  03,F
05384:  MOVF   FF4,W
05386:  ADDWFC 02,F
05388:  MOVLW  00
0538A:  CLRF   01
0538C:  ADDWFC 01,F
0538E:  MOVF   x80,W
05390:  MULWF  x82
05392:  MOVF   FF3,W
05394:  ADDWF  x86,F
05396:  MOVF   FF4,W
05398:  ADDWFC 03,F
0539A:  MOVLW  00
0539C:  ADDWFC 02,F
0539E:  ADDWFC 01,F
053A0:  MOVF   x7F,W
053A2:  MULWF  x82
053A4:  MOVF   FF3,W
053A6:  ADDWF  03,F
053A8:  MOVF   FF4,W
053AA:  ADDWFC 02,F
053AC:  MOVLW  00
053AE:  ADDWFC 01,F
053B0:  MOVF   x7E,W
053B2:  MULWF  x82
053B4:  MOVF   FF3,W
053B6:  ADDWF  02,F
053B8:  MOVF   FF4,W
053BA:  ADDWFC 01,F
053BC:  INCF   00,F
053BE:  BTFSC  01.7
053C0:  BRA    53CC
053C2:  RLCF   x86,F
053C4:  RLCF   03,F
053C6:  RLCF   02,F
053C8:  RLCF   01,F
053CA:  DECF   00,F
053CC:  MOVLW  00
053CE:  BTFSS  x86.7
053D0:  BRA    53E6
053D2:  INCF   03,F
053D4:  ADDWFC 02,F
053D6:  ADDWFC 01,F
053D8:  MOVF   01,W
053DA:  BNZ   53E6
053DC:  MOVF   02,W
053DE:  BNZ   53E6
053E0:  MOVF   03,W
053E2:  BNZ   53E6
053E4:  INCF   00,F
053E6:  BTFSC  x85.7
053E8:  BSF    01.7
053EA:  BTFSS  x85.7
053EC:  BCF    01.7
053EE:  BRA    53F8
053F0:  CLRF   00
053F2:  CLRF   01
053F4:  CLRF   02
053F6:  CLRF   03
053F8:  MOVLB  0
053FA:  RETURN 0
053FC:  MOVLW  8E
053FE:  MOVWF  00
05400:  MOVLB  A
05402:  MOVF   x79,W
05404:  SUBWF  00,F
05406:  MOVFF  A7A,02
0540A:  MOVFF  A7B,01
0540E:  BSF    02.7
05410:  MOVF   00,F
05412:  BZ    5426
05414:  BCF    FD8.0
05416:  MOVF   02,F
05418:  BNZ   541E
0541A:  MOVF   01,F
0541C:  BZ    5426
0541E:  RRCF   02,F
05420:  RRCF   01,F
05422:  DECFSZ 00,F
05424:  BRA    5414
05426:  BTFSS  x7A.7
05428:  BRA    5434
0542A:  COMF   01,F
0542C:  COMF   02,F
0542E:  INCF   01,F
05430:  BTFSC  FD8.2
05432:  INCF   02,F
05434:  MOVLB  0
05436:  RETURN 0
05438:  MOVLW  B6
0543A:  MOVWF  00
0543C:  CLRF   03
0543E:  CLRF   02
05440:  CLRF   01
05442:  MOVLB  A
05444:  MOVF   x79,W
05446:  IORWF  x7A,W
05448:  IORWF  x7B,W
0544A:  IORWF  x7C,W
0544C:  BNZ   5452
0544E:  CLRF   00
05450:  BRA    546C
05452:  BCF    FD8.0
05454:  BTFSC  01.7
05456:  BRA    546A
05458:  RLCF   x79,F
0545A:  RLCF   x7A,F
0545C:  RLCF   x7B,F
0545E:  RLCF   x7C,F
05460:  RLCF   03,F
05462:  RLCF   02,F
05464:  RLCF   01,F
05466:  DECFSZ 00,F
05468:  BRA    5452
0546A:  BCF    01.7
0546C:  MOVLB  0
0546E:  RETURN 0
05470:  MOVLB  A
05472:  MOVF   x79,W
05474:  SUBLW  B6
05476:  MOVWF  x79
05478:  CLRF   03
0547A:  MOVFF  A7A,A7D
0547E:  BSF    x7A.7
05480:  BCF    FD8.0
05482:  RRCF   x7A,F
05484:  RRCF   x7B,F
05486:  RRCF   x7C,F
05488:  RRCF   03,F
0548A:  RRCF   02,F
0548C:  RRCF   01,F
0548E:  RRCF   00,F
05490:  DECFSZ x79,F
05492:  BRA    5480
05494:  BTFSS  x7D.7
05496:  BRA    54AE
05498:  COMF   00,F
0549A:  COMF   01,F
0549C:  COMF   02,F
0549E:  COMF   03,F
054A0:  INCF   00,F
054A2:  BTFSC  FD8.2
054A4:  INCF   01,F
054A6:  BTFSC  FD8.2
054A8:  INCF   02,F
054AA:  BTFSC  FD8.2
054AC:  INCF   03,F
054AE:  MOVLB  0
054B0:  RETURN 0
*
067FC:  MOVLB  A
067FE:  CLRF   x7A
06800:  CLRF   x7B
06802:  MOVLW  01
06804:  MOVWF  x7C
06806:  CLRF   FDA
06808:  CLRF   FD9
0680A:  MOVLW  0A
0680C:  MOVWF  x7F
0680E:  MOVLW  72
06810:  MOVWF  x7E
06812:  MOVLW  0A
06814:  MOVWF  FEA
06816:  MOVLW  76
06818:  MOVWF  FE9
0681A:  MOVFF  A7F,FE2
0681E:  MOVFF  A7E,FE1
06822:  MOVFF  A7C,A7D
06826:  BCF    FD8.0
06828:  MOVF   FE5,W
0682A:  MULWF  FEE
0682C:  MOVF   FF3,W
0682E:  ADDWFC x7A,F
06830:  MOVF   FF4,W
06832:  ADDWFC x7B,F
06834:  DECFSZ x7D,F
06836:  BRA    6826
06838:  MOVFF  A7A,FDE
0683C:  MOVFF  A7B,A7A
06840:  CLRF   x7B
06842:  BTFSC  FD8.0
06844:  INCF   x7B,F
06846:  INCF   x7E,F
06848:  BTFSC  FD8.2
0684A:  INCF   x7F,F
0684C:  INCF   x7C,F
0684E:  MOVF   x7C,W
06850:  SUBLW  05
06852:  BNZ   6812
06854:  MOVLB  0
06856:  RETURN 0
06858:  BTFSC  FD8.1
0685A:  BRA    6864
0685C:  MOVLW  0A
0685E:  MOVWF  FEA
06860:  MOVLW  78
06862:  MOVWF  FE9
06864:  CLRF   00
06866:  CLRF   01
06868:  CLRF   02
0686A:  CLRF   03
0686C:  MOVLB  A
0686E:  CLRF   x78
06870:  CLRF   x79
06872:  CLRF   x7A
06874:  CLRF   x7B
06876:  MOVF   x77,W
06878:  IORWF  x76,W
0687A:  IORWF  x75,W
0687C:  IORWF  x74,W
0687E:  BZ    68D8
06880:  MOVLW  20
06882:  MOVWF  x7C
06884:  BCF    FD8.0
06886:  RLCF   x70,F
06888:  RLCF   x71,F
0688A:  RLCF   x72,F
0688C:  RLCF   x73,F
0688E:  RLCF   x78,F
06890:  RLCF   x79,F
06892:  RLCF   x7A,F
06894:  RLCF   x7B,F
06896:  MOVF   x77,W
06898:  SUBWF  x7B,W
0689A:  BNZ   68AC
0689C:  MOVF   x76,W
0689E:  SUBWF  x7A,W
068A0:  BNZ   68AC
068A2:  MOVF   x75,W
068A4:  SUBWF  x79,W
068A6:  BNZ   68AC
068A8:  MOVF   x74,W
068AA:  SUBWF  x78,W
068AC:  BNC   68CC
068AE:  MOVF   x74,W
068B0:  SUBWF  x78,F
068B2:  MOVF   x75,W
068B4:  BTFSS  FD8.0
068B6:  INCFSZ x75,W
068B8:  SUBWF  x79,F
068BA:  MOVF   x76,W
068BC:  BTFSS  FD8.0
068BE:  INCFSZ x76,W
068C0:  SUBWF  x7A,F
068C2:  MOVF   x77,W
068C4:  BTFSS  FD8.0
068C6:  INCFSZ x77,W
068C8:  SUBWF  x7B,F
068CA:  BSF    FD8.0
068CC:  RLCF   00,F
068CE:  RLCF   01,F
068D0:  RLCF   02,F
068D2:  RLCF   03,F
068D4:  DECFSZ x7C,F
068D6:  BRA    6884
068D8:  MOVFF  A78,FEF
068DC:  MOVFF  A79,FEC
068E0:  MOVFF  A7A,FEC
068E4:  MOVFF  A7B,FEC
068E8:  MOVLB  0
068EA:  RETURN 0
*
0A634:  TBLRD*+
0A636:  MOVF   FF5,F
0A638:  BZ    A65C
0A63A:  MOVFF  FF6,A4A
0A63E:  MOVFF  FF7,A4B
0A642:  MOVFF  FF8,A4C
0A646:  MOVF   FF5,W
0A648:  BTFSS  F9E.4
0A64A:  BRA    A648
0A64C:  MOVWF  FAD
0A64E:  MOVFF  A4A,FF6
0A652:  MOVFF  A4B,FF7
0A656:  MOVFF  A4C,FF8
0A65A:  BRA    A634
0A65C:  GOTO   B816 (RETURN)
*
0AA18:  ADDWF  FE8,W
0AA1A:  CLRF   FF7
0AA1C:  RLCF   FF7,F
0AA1E:  ADDLW  39
0AA20:  MOVWF  FF6
0AA22:  MOVLW  AA
0AA24:  ADDWFC FF7,F
0AA26:  MOVLW  00
0AA28:  MOVWF  FF8
0AA2A:  MOVWF  FFB
0AA2C:  TBLRD*-
0AA2E:  MOVF   FF5,W
0AA30:  MOVWF  FFA
0AA32:  TBLRD*
0AA34:  MOVF   FF5,W
0AA36:  MOVWF  FF9
0AA38:  DATA AC,A8
0AA3A:  DATA BC,A8
0AA3C:  DATA CC,A8
0AA3E:  DATA DC,A8
0AA40:  DATA EC,A8
0AA42:  DATA FC,A8
0AA44:  DATA 0C,A9
0AA46:  DATA 1C,A9
0AA48:  DATA 2C,A9
0AA4A:  DATA 3C,A9
0AA4C:  DATA 4C,A9
0AA4E:  DATA 5C,A9
0AA50:  DATA 6C,A9
0AA52:  DATA 7C,A9
0AA54:  DATA 8C,A9
0AA56:  DATA 9C,A9
*
0BED6:  MOVLB  A
0BED8:  MOVF   x4E,W
0BEDA:  CLRF   01
0BEDC:  SUBWF  x4D,W
0BEDE:  BC    BEE6
0BEE0:  MOVFF  A4D,00
0BEE4:  BRA    BEFE
0BEE6:  CLRF   00
0BEE8:  MOVLW  08
0BEEA:  MOVWF  x4F
0BEEC:  RLCF   x4D,F
0BEEE:  RLCF   00,F
0BEF0:  MOVF   x4E,W
0BEF2:  SUBWF  00,W
0BEF4:  BTFSC  FD8.0
0BEF6:  MOVWF  00
0BEF8:  RLCF   01,F
0BEFA:  DECFSZ x4F,F
0BEFC:  BRA    BEEC
0BEFE:  MOVLB  0
0BF00:  RETURN 0
*
0E81E:  MOVFF  A81,A88
0E822:  MOVLB  A
0E824:  MOVF   x85,W
0E826:  XORWF  x88,F
0E828:  BTFSS  x88.7
0E82A:  BRA    E836
0E82C:  BCF    FD8.2
0E82E:  BCF    FD8.0
0E830:  BTFSC  x81.7
0E832:  BSF    FD8.0
0E834:  BRA    E894
0E836:  MOVFF  A81,A88
0E83A:  MOVFF  A84,A89
0E83E:  MOVF   x80,W
0E840:  SUBWF  x89,F
0E842:  BZ    E850
0E844:  BTFSS  x88.7
0E846:  BRA    E894
0E848:  MOVF   FD8,W
0E84A:  XORLW  01
0E84C:  MOVWF  FD8
0E84E:  BRA    E894
0E850:  MOVFF  A85,A89
0E854:  MOVF   x81,W
0E856:  SUBWF  x89,F
0E858:  BZ    E866
0E85A:  BTFSS  x88.7
0E85C:  BRA    E894
0E85E:  MOVF   FD8,W
0E860:  XORLW  01
0E862:  MOVWF  FD8
0E864:  BRA    E894
0E866:  MOVFF  A86,A89
0E86A:  MOVF   x82,W
0E86C:  SUBWF  x89,F
0E86E:  BZ    E87C
0E870:  BTFSS  x88.7
0E872:  BRA    E894
0E874:  MOVF   FD8,W
0E876:  XORLW  01
0E878:  MOVWF  FD8
0E87A:  BRA    E894
0E87C:  MOVFF  A87,A89
0E880:  MOVF   x83,W
0E882:  SUBWF  x89,F
0E884:  BZ    E892
0E886:  BTFSS  x88.7
0E888:  BRA    E894
0E88A:  MOVF   FD8,W
0E88C:  XORLW  01
0E88E:  MOVWF  FD8
0E890:  BRA    E894
0E892:  BCF    FD8.0
0E894:  MOVLB  0
0E896:  RETURN 0
0E898:  MOVFF  88A,FEA
0E89C:  MOVFF  889,FE9
0E8A0:  MOVFF  A70,FEF
0E8A4:  INCF   FE9,F
0E8A6:  BTFSC  FD8.2
0E8A8:  INCF   FEA,F
0E8AA:  CLRF   FEF
0E8AC:  MOVLB  8
0E8AE:  INCF   x89,F
0E8B0:  BTFSC  FD8.2
0E8B2:  INCF   x8A,F
0E8B4:  MOVLB  0
0E8B6:  RETURN 0
0E8B8:  MOVF   FE9,W
0E8BA:  MOVLB  A
0E8BC:  MOVWF  x68
0E8BE:  MOVF   x67,W
0E8C0:  MOVWF  x6A
0E8C2:  BZ    E8FC
0E8C4:  MOVFF  A66,A80
0E8C8:  MOVFF  A65,A7F
0E8CC:  MOVFF  A64,A7E
0E8D0:  MOVFF  A63,A7D
0E8D4:  CLRF   x84
0E8D6:  CLRF   x83
0E8D8:  MOVLW  20
0E8DA:  MOVWF  x82
0E8DC:  MOVLW  82
0E8DE:  MOVWF  x81
0E8E0:  MOVLB  0
0E8E2:  CALL   5306
0E8E6:  MOVFF  03,A66
0E8EA:  MOVFF  02,A65
0E8EE:  MOVFF  01,A64
0E8F2:  MOVFF  00,A63
0E8F6:  MOVLB  A
0E8F8:  DECFSZ x6A,F
0E8FA:  BRA    E8C4
0E8FC:  MOVFF  A66,A7C
0E900:  MOVFF  A65,A7B
0E904:  MOVFF  A64,A7A
0E908:  MOVFF  A63,A79
0E90C:  MOVLB  0
0E90E:  CALL   5470
0E912:  MOVFF  03,A66
0E916:  MOVFF  02,A65
0E91A:  MOVFF  01,A64
0E91E:  MOVFF  00,A63
0E922:  MOVLB  A
0E924:  BTFSS  x66.7
0E926:  BRA    E942
0E928:  DECF   x68,F
0E92A:  BSF    x68.5
0E92C:  COMF   x63,F
0E92E:  COMF   x64,F
0E930:  COMF   x65,F
0E932:  COMF   x66,F
0E934:  INCF   x63,F
0E936:  BTFSC  FD8.2
0E938:  INCF   x64,F
0E93A:  BTFSC  FD8.2
0E93C:  INCF   x65,F
0E93E:  BTFSC  FD8.2
0E940:  INCF   x66,F
0E942:  MOVLW  3B
0E944:  MOVWF  x6F
0E946:  MOVLW  9A
0E948:  MOVWF  x6E
0E94A:  MOVLW  CA
0E94C:  MOVWF  x6D
0E94E:  CLRF   x6C
0E950:  MOVLW  0A
0E952:  MOVWF  x6A
0E954:  MOVF   x67,W
0E956:  BTFSC  FD8.2
0E958:  INCF   x68,F
0E95A:  BSF    FD8.1
0E95C:  MOVLW  0A
0E95E:  MOVWF  FEA
0E960:  MOVLW  63
0E962:  MOVWF  FE9
0E964:  MOVFF  A66,A73
0E968:  MOVFF  A65,A72
0E96C:  MOVFF  A64,A71
0E970:  MOVFF  A63,A70
0E974:  MOVFF  A6F,A77
0E978:  MOVFF  A6E,A76
0E97C:  MOVFF  A6D,A75
0E980:  MOVFF  A6C,A74
0E984:  MOVLB  0
0E986:  CALL   6858
0E98A:  MOVF   01,W
0E98C:  MOVF   00,F
0E98E:  BNZ   E9B6
0E990:  MOVLB  A
0E992:  INCF   x67,W
0E994:  SUBWF  x6A,W
0E996:  BTFSS  FD8.2
0E998:  BRA    E99E
0E99A:  MOVLB  0
0E99C:  BRA    E9B6
0E99E:  MOVF   x68,W
0E9A0:  BZ    E9BC
0E9A2:  ANDLW  0F
0E9A4:  SUBWF  x6A,W
0E9A6:  BZ    E9AA
0E9A8:  BC    EA2A
0E9AA:  BTFSC  x68.7
0E9AC:  BRA    EA2A
0E9AE:  BTFSC  x68.6
0E9B0:  BRA    E9BC
0E9B2:  MOVLW  20
0E9B4:  BRA    EA1E
0E9B6:  MOVLW  20
0E9B8:  MOVLB  A
0E9BA:  ANDWF  x68,F
0E9BC:  BTFSS  x68.5
0E9BE:  BRA    E9DC
0E9C0:  BCF    x68.5
0E9C2:  MOVF   x67,W
0E9C4:  BTFSS  FD8.2
0E9C6:  DECF   x68,F
0E9C8:  MOVF   00,W
0E9CA:  MOVWF  x68
0E9CC:  MOVLW  2D
0E9CE:  MOVWF  x70
0E9D0:  MOVLB  0
0E9D2:  RCALL  E898
0E9D4:  MOVLB  A
0E9D6:  MOVF   x68,W
0E9D8:  MOVWF  00
0E9DA:  CLRF   x68
0E9DC:  MOVF   x67,W
0E9DE:  SUBWF  x6A,W
0E9E0:  BNZ   E9FA
0E9E2:  MOVF   00,W
0E9E4:  MOVWF  x68
0E9E6:  MOVLW  2E
0E9E8:  MOVWF  x70
0E9EA:  MOVLB  0
0E9EC:  RCALL  E898
0E9EE:  MOVLB  A
0E9F0:  MOVF   x68,W
0E9F2:  MOVWF  00
0E9F4:  MOVLW  20
0E9F6:  ANDWF  x68,F
0E9F8:  MOVLW  00
0E9FA:  MOVLW  30
0E9FC:  BTFSS  x68.5
0E9FE:  BRA    EA1E
0EA00:  BCF    x68.5
0EA02:  MOVF   x67,W
0EA04:  BTFSS  FD8.2
0EA06:  DECF   x68,F
0EA08:  MOVF   00,W
0EA0A:  MOVWF  x68
0EA0C:  MOVLW  2D
0EA0E:  MOVWF  x70
0EA10:  MOVLB  0
0EA12:  RCALL  E898
0EA14:  MOVLB  A
0EA16:  MOVF   x68,W
0EA18:  MOVWF  00
0EA1A:  CLRF   x68
0EA1C:  MOVLW  30
0EA1E:  ADDWF  00,F
0EA20:  MOVFF  00,A70
0EA24:  MOVLB  0
0EA26:  RCALL  E898
0EA28:  MOVLB  A
0EA2A:  BCF    FD8.1
0EA2C:  MOVFF  A6F,A73
0EA30:  MOVFF  A6E,A72
0EA34:  MOVFF  A6D,A71
0EA38:  MOVFF  A6C,A70
0EA3C:  CLRF   x77
0EA3E:  CLRF   x76
0EA40:  CLRF   x75
0EA42:  MOVLW  0A
0EA44:  MOVWF  x74
0EA46:  MOVLB  0
0EA48:  CALL   6858
0EA4C:  MOVFF  03,A6F
0EA50:  MOVFF  02,A6E
0EA54:  MOVFF  01,A6D
0EA58:  MOVFF  00,A6C
0EA5C:  MOVLB  A
0EA5E:  DECFSZ x6A,F
0EA60:  BRA    E95A
0EA62:  MOVLB  0
0EA64:  RETURN 0
0EA66:  TBLRD*+
0EA68:  MOVF   FF5,F
0EA6A:  BZ    EA8C
0EA6C:  MOVFF  FF6,A63
0EA70:  MOVFF  FF7,A64
0EA74:  MOVFF  FF8,A65
0EA78:  MOVFF  FF5,A70
0EA7C:  RCALL  E898
0EA7E:  MOVFF  A63,FF6
0EA82:  MOVFF  A64,FF7
0EA86:  MOVFF  A65,FF8
0EA8A:  BRA    EA66
0EA8C:  RETURN 0
0EA8E:  MOVFF  FEA,A6B
0EA92:  MOVFF  FE9,A6A
0EA96:  MOVLB  A
0EA98:  SWAPF  x64,W
0EA9A:  IORLW  F0
0EA9C:  MOVWF  x66
0EA9E:  ADDWF  x66,F
0EAA0:  ADDLW  E2
0EAA2:  MOVWF  x67
0EAA4:  ADDLW  32
0EAA6:  MOVWF  x69
0EAA8:  MOVF   x64,W
0EAAA:  ANDLW  0F
0EAAC:  ADDWF  x67,F
0EAAE:  ADDWF  x67,F
0EAB0:  ADDWF  x69,F
0EAB2:  ADDLW  E9
0EAB4:  MOVWF  x68
0EAB6:  ADDWF  x68,F
0EAB8:  ADDWF  x68,F
0EABA:  SWAPF  x63,W
0EABC:  ANDLW  0F
0EABE:  ADDWF  x68,F
0EAC0:  ADDWF  x69,F
0EAC2:  RLCF   x68,F
0EAC4:  RLCF   x69,F
0EAC6:  COMF   x69,F
0EAC8:  RLCF   x69,F
0EACA:  MOVF   x63,W
0EACC:  ANDLW  0F
0EACE:  ADDWF  x69,F
0EAD0:  RLCF   x66,F
0EAD2:  MOVLW  07
0EAD4:  MOVWF  x65
0EAD6:  MOVLW  0A
0EAD8:  DECF   x68,F
0EADA:  ADDWF  x69,F
0EADC:  BNC   EAD8
0EADE:  DECF   x67,F
0EAE0:  ADDWF  x68,F
0EAE2:  BNC   EADE
0EAE4:  DECF   x66,F
0EAE6:  ADDWF  x67,F
0EAE8:  BNC   EAE4
0EAEA:  DECF   x65,F
0EAEC:  ADDWF  x66,F
0EAEE:  BNC   EAEA
0EAF0:  MOVLW  0A
0EAF2:  MOVWF  FEA
0EAF4:  MOVLW  65
0EAF6:  MOVWF  FE9
0EAF8:  MOVLW  07
0EAFA:  ANDWF  x6A,W
0EAFC:  BCF    x6A.6
0EAFE:  ADDWF  FE9,F
0EB00:  MOVLW  00
0EB02:  ADDWFC FEA,F
0EB04:  MOVF   FE9,W
0EB06:  SUBLW  69
0EB08:  BNZ   EB12
0EB0A:  MOVF   FEA,W
0EB0C:  SUBLW  0A
0EB0E:  BNZ   EB12
0EB10:  BSF    x6A.6
0EB12:  MOVF   FEF,W
0EB14:  MOVWF  00
0EB16:  BNZ   EB28
0EB18:  BTFSC  x6A.6
0EB1A:  BRA    EB28
0EB1C:  BTFSC  x6A.4
0EB1E:  BRA    EB4A
0EB20:  BTFSC  x6A.3
0EB22:  BRA    EB28
0EB24:  MOVLW  20
0EB26:  BRA    EB2E
0EB28:  BSF    x6A.3
0EB2A:  BCF    x6A.4
0EB2C:  MOVLW  30
0EB2E:  ADDWF  00,F
0EB30:  MOVFF  FEA,A64
0EB34:  MOVFF  FE9,A63
0EB38:  MOVFF  00,A70
0EB3C:  MOVLB  0
0EB3E:  RCALL  E898
0EB40:  MOVFF  A64,FEA
0EB44:  MOVFF  A63,FE9
0EB48:  MOVLB  A
0EB4A:  MOVF   FEE,W
0EB4C:  BTFSS  x6A.6
0EB4E:  BRA    EB04
0EB50:  MOVLB  0
0EB52:  RETURN 0
*
0FA44:  MOVLB  A
0FA46:  MOVF   x6F,W
0FA48:  XORWF  x71,W
0FA4A:  ANDLW  80
0FA4C:  MOVWF  x73
0FA4E:  BTFSS  x6F.7
0FA50:  BRA    FA5C
0FA52:  COMF   x6E,F
0FA54:  COMF   x6F,F
0FA56:  INCF   x6E,F
0FA58:  BTFSC  FD8.2
0FA5A:  INCF   x6F,F
0FA5C:  BTFSS  x71.7
0FA5E:  BRA    FA6A
0FA60:  COMF   x70,F
0FA62:  COMF   x71,F
0FA64:  INCF   x70,F
0FA66:  BTFSC  FD8.2
0FA68:  INCF   x71,F
0FA6A:  MOVF   x6E,W
0FA6C:  MULWF  x70
0FA6E:  MOVFF  FF3,01
0FA72:  MOVFF  FF4,00
0FA76:  MULWF  x71
0FA78:  MOVF   FF3,W
0FA7A:  ADDWF  00,F
0FA7C:  MOVF   x6F,W
0FA7E:  MULWF  x70
0FA80:  MOVF   FF3,W
0FA82:  ADDWFC 00,W
0FA84:  MOVWF  02
0FA86:  BTFSS  x73.7
0FA88:  BRA    FA94
0FA8A:  COMF   01,F
0FA8C:  COMF   02,F
0FA8E:  INCF   01,F
0FA90:  BTFSC  FD8.2
0FA92:  INCF   02,F
0FA94:  MOVLB  0
0FA96:  RETURN 0
*
0FE22:  ADDWF  FE8,W
0FE24:  CLRF   FF7
0FE26:  RLCF   FF7,F
0FE28:  ADDLW  43
0FE2A:  MOVWF  FF6
0FE2C:  MOVLW  FE
0FE2E:  ADDWFC FF7,F
0FE30:  MOVLW  00
0FE32:  MOVWF  FF8
0FE34:  MOVWF  FFB
0FE36:  TBLRD*-
0FE38:  MOVF   FF5,W
0FE3A:  MOVWF  FFA
0FE3C:  TBLRD*
0FE3E:  MOVF   FF5,W
0FE40:  MOVWF  FF9
0FE42:  DATA C0,FA
0FE44:  DATA 16,FB
0FE46:  DATA 6C,FB
0FE48:  DATA C2,FB
0FE4A:  DATA 18,FC
0FE4C:  DATA 6E,FC
0FE4E:  DATA C4,FC
0FE50:  DATA 1A,FD
0FE52:  DATA 70,FD
0FE54:  DATA C6,FD
*
10F1C:  ADDWF  FE8,W
10F1E:  CLRF   FF7
10F20:  RLCF   FF7,F
10F22:  ADDLW  3D
10F24:  MOVWF  FF6
10F26:  MOVLW  0F
10F28:  ADDWFC FF7,F
10F2A:  MOVLW  01
10F2C:  MOVWF  FF8
10F2E:  MOVWF  FFB
10F30:  TBLRD*-
10F32:  MOVF   FF5,W
10F34:  MOVWF  FFA
10F36:  TBLRD*
10F38:  MOVF   FF5,W
10F3A:  MOVWF  FF9
10F3C:  DATA 2A,0D
10F3E:  DATA 2A,0D
10F40:  DATA 2A,0D
10F42:  DATA 70,0D
10F44:  DATA 86,0D
10F46:  DATA CC,0D
10F48:  DATA E2,0D
10F4A:  DATA F8,0D
10F4C:  DATA 3E,0E
10F4E:  DATA 54,0E
10F50:  DATA 6A,0E
10F52:  DATA 80,0E
10F54:  DATA AC,0E
10F56:  DATA C6,0E
10F58:  DATA DC,0E
10F5A:  DATA 00,0F
10F5C:  DATA 18,0F
*
111A0:  ADDWF  FE8,W
111A2:  CLRF   FF7
111A4:  RLCF   FF7,F
111A6:  ADDLW  C1
111A8:  MOVWF  FF6
111AA:  MOVLW  11
111AC:  ADDWFC FF7,F
111AE:  MOVLW  01
111B0:  MOVWF  FF8
111B2:  MOVWF  FFB
111B4:  TBLRD*-
111B6:  MOVF   FF5,W
111B8:  MOVWF  FFA
111BA:  TBLRD*
111BC:  MOVF   FF5,W
111BE:  MOVWF  FF9
111C0:  DATA 6E,0F
111C2:  DATA 6E,0F
111C4:  DATA B0,0F
111C6:  DATA 2E,10
111C8:  DATA 46,10
111CA:  DATA 78,10
111CC:  DATA 90,10
111CE:  DATA A8,10
111D0:  DATA A8,10
111D2:  DATA A8,10
111D4:  DATA A8,10
111D6:  DATA EA,10
111D8:  DATA 0C,11
111DA:  DATA 24,11
111DC:  DATA 44,11
111DE:  DATA 68,11
111E0:  DATA 82,11
*
130CE:  ADDWF  FE8,W
130D0:  CLRF   FF7
130D2:  RLCF   FF7,F
130D4:  ADDLW  EF
130D6:  MOVWF  FF6
130D8:  MOVLW  30
130DA:  ADDWFC FF7,F
130DC:  MOVLW  01
130DE:  MOVWF  FF8
130E0:  MOVWF  FFB
130E2:  TBLRD*-
130E4:  MOVF   FF5,W
130E6:  MOVWF  FFA
130E8:  TBLRD*
130EA:  MOVF   FF5,W
130EC:  MOVWF  FF9
130EE:  DATA 1C,2B
130F0:  DATA 34,2B
130F2:  DATA 50,2B
130F4:  DATA 7C,2B
130F6:  DATA 94,2B
130F8:  DATA AC,2B
130FA:  DATA D6,2B
130FC:  DATA 00,2C
130FE:  ADDWF  FE8,W
13100:  CLRF   FF7
13102:  RLCF   FF7,F
13104:  ADDLW  1F
13106:  MOVWF  FF6
13108:  MOVLW  31
1310A:  ADDWFC FF7,F
1310C:  MOVLW  01
1310E:  MOVWF  FF8
13110:  MOVWF  FFB
13112:  TBLRD*-
13114:  MOVF   FF5,W
13116:  MOVWF  FFA
13118:  TBLRD*
1311A:  MOVF   FF5,W
1311C:  MOVWF  FF9
1311E:  DATA BE,2D
13120:  DATA D8,2D
13122:  DATA F4,2D
13124:  DATA 1C,2E
13126:  DATA 36,2E
13128:  DATA 50,2E
1312A:  DATA 78,2E
1312C:  DATA AC,2E
*
1375E:  ADDWF  FE8,W
13760:  CLRF   FF7
13762:  RLCF   FF7,F
13764:  ADDLW  7F
13766:  MOVWF  FF6
13768:  MOVLW  37
1376A:  ADDWFC FF7,F
1376C:  MOVLW  01
1376E:  MOVWF  FF8
13770:  MOVWF  FFB
13772:  TBLRD*-
13774:  MOVF   FF5,W
13776:  MOVWF  FFA
13778:  TBLRD*
1377A:  MOVF   FF5,W
1377C:  MOVWF  FF9
1377E:  DATA BC,35
13780:  DATA BC,35
13782:  DATA 00,36
13784:  DATA 18,36
13786:  DATA 30,36
*
14D0E:  MOVLW  80
14D10:  BTFSS  FD8.1
14D12:  BRA    14D18
14D14:  MOVLB  A
14D16:  XORWF  x85,F
14D18:  MOVLB  A
14D1A:  CLRF   x8A
14D1C:  CLRF   x8B
14D1E:  MOVFF  A81,A89
14D22:  MOVF   x85,W
14D24:  XORWF  x89,F
14D26:  MOVF   x80,W
14D28:  BTFSC  FD8.2
14D2A:  BRA    14EEA
14D2C:  MOVWF  x88
14D2E:  MOVWF  00
14D30:  MOVF   x84,W
14D32:  BTFSC  FD8.2
14D34:  BRA    14EFC
14D36:  SUBWF  x88,F
14D38:  BTFSC  FD8.2
14D3A:  BRA    14E42
14D3C:  BNC   14DBA
14D3E:  MOVFF  A85,A8E
14D42:  BSF    x8E.7
14D44:  MOVFF  A86,A8D
14D48:  MOVFF  A87,A8C
14D4C:  CLRF   x8B
14D4E:  BCF    FD8.0
14D50:  RRCF   x8E,F
14D52:  RRCF   x8D,F
14D54:  RRCF   x8C,F
14D56:  RRCF   x8B,F
14D58:  DECFSZ x88,F
14D5A:  BRA    14D4C
14D5C:  BTFSS  x89.7
14D5E:  BRA    14D66
14D60:  BSF    x8A.0
14D62:  BRA    14F24
14D64:  BCF    x8A.0
14D66:  BCF    x88.0
14D68:  BSF    x8A.4
14D6A:  MOVLW  0A
14D6C:  MOVWF  FEA
14D6E:  MOVLW  83
14D70:  MOVWF  FE9
14D72:  BRA    14F4A
14D74:  BCF    x8A.4
14D76:  BTFSC  x89.7
14D78:  BRA    14D8E
14D7A:  BTFSS  x88.0
14D7C:  BRA    14DA4
14D7E:  RRCF   x8E,F
14D80:  RRCF   x8D,F
14D82:  RRCF   x8C,F
14D84:  RRCF   x8B,F
14D86:  INCF   00,F
14D88:  BTFSC  FD8.2
14D8A:  BRA    14F1A
14D8C:  BRA    14DA4
14D8E:  BTFSC  x8E.7
14D90:  BRA    14DAA
14D92:  BCF    FD8.0
14D94:  RLCF   x8B,F
14D96:  RLCF   x8C,F
14D98:  RLCF   x8D,F
14D9A:  RLCF   x8E,F
14D9C:  DECF   00,F
14D9E:  BTFSC  FD8.2
14DA0:  BRA    14F1A
14DA2:  BRA    14D8E
14DA4:  BSF    x8A.6
14DA6:  BRA    14E82
14DA8:  BCF    x8A.6
14DAA:  MOVFF  A81,A89
14DAE:  BTFSS  x81.7
14DB0:  BRA    14DB6
14DB2:  BSF    x8E.7
14DB4:  BRA    14F0C
14DB6:  BCF    x8E.7
14DB8:  BRA    14F0C
14DBA:  MOVFF  A84,A88
14DBE:  MOVFF  A84,00
14DC2:  MOVF   x80,W
14DC4:  SUBWF  x88,F
14DC6:  MOVFF  A81,A8E
14DCA:  BSF    x8E.7
14DCC:  MOVFF  A82,A8D
14DD0:  MOVFF  A83,A8C
14DD4:  CLRF   x8B
14DD6:  BCF    FD8.0
14DD8:  RRCF   x8E,F
14DDA:  RRCF   x8D,F
14DDC:  RRCF   x8C,F
14DDE:  RRCF   x8B,F
14DE0:  DECFSZ x88,F
14DE2:  BRA    14DD4
14DE4:  BTFSS  x89.7
14DE6:  BRA    14DEE
14DE8:  BSF    x8A.1
14DEA:  BRA    14F24
14DEC:  BCF    x8A.1
14DEE:  BCF    x88.0
14DF0:  BSF    x8A.5
14DF2:  MOVLW  0A
14DF4:  MOVWF  FEA
14DF6:  MOVLW  87
14DF8:  MOVWF  FE9
14DFA:  BRA    14F4A
14DFC:  BCF    x8A.5
14DFE:  BTFSC  x89.7
14E00:  BRA    14E16
14E02:  BTFSS  x88.0
14E04:  BRA    14E2C
14E06:  RRCF   x8E,F
14E08:  RRCF   x8D,F
14E0A:  RRCF   x8C,F
14E0C:  RRCF   x8B,F
14E0E:  INCF   00,F
14E10:  BTFSC  FD8.2
14E12:  BRA    14F1A
14E14:  BRA    14E2C
14E16:  BTFSC  x8E.7
14E18:  BRA    14E32
14E1A:  BCF    FD8.0
14E1C:  RLCF   x8B,F
14E1E:  RLCF   x8C,F
14E20:  RLCF   x8D,F
14E22:  RLCF   x8E,F
14E24:  DECF   00,F
14E26:  BTFSC  FD8.2
14E28:  BRA    14F1A
14E2A:  BRA    14E16
14E2C:  BSF    x8A.7
14E2E:  BRA    14E82
14E30:  BCF    x8A.7
14E32:  MOVFF  A85,A89
14E36:  BTFSS  x85.7
14E38:  BRA    14E3E
14E3A:  BSF    x8E.7
14E3C:  BRA    14F0C
14E3E:  BCF    x8E.7
14E40:  BRA    14F0C
14E42:  MOVFF  A85,A8E
14E46:  BSF    x8E.7
14E48:  MOVFF  A86,A8D
14E4C:  MOVFF  A87,A8C
14E50:  BTFSS  x89.7
14E52:  BRA    14E5C
14E54:  BCF    x8E.7
14E56:  BSF    x8A.2
14E58:  BRA    14F24
14E5A:  BCF    x8A.2
14E5C:  CLRF   x8B
14E5E:  BCF    x88.0
14E60:  MOVLW  0A
14E62:  MOVWF  FEA
14E64:  MOVLW  83
14E66:  MOVWF  FE9
14E68:  BRA    14F4A
14E6A:  BTFSC  x89.7
14E6C:  BRA    14EA6
14E6E:  MOVFF  A81,A89
14E72:  BTFSS  x88.0
14E74:  BRA    14E82
14E76:  RRCF   x8E,F
14E78:  RRCF   x8D,F
14E7A:  RRCF   x8C,F
14E7C:  RRCF   x8B,F
14E7E:  INCF   00,F
14E80:  BZ    14F1A
14E82:  BTFSS  x8B.7
14E84:  BRA    14E9C
14E86:  INCF   x8C,F
14E88:  BNZ   14E9C
14E8A:  INCF   x8D,F
14E8C:  BNZ   14E9C
14E8E:  INCF   x8E,F
14E90:  BNZ   14E9C
14E92:  RRCF   x8E,F
14E94:  RRCF   x8D,F
14E96:  RRCF   x8C,F
14E98:  INCF   00,F
14E9A:  BZ    14F1A
14E9C:  BTFSC  x8A.6
14E9E:  BRA    14DA8
14EA0:  BTFSC  x8A.7
14EA2:  BRA    14E30
14EA4:  BRA    14EDE
14EA6:  MOVLW  80
14EA8:  XORWF  x8E,F
14EAA:  BTFSS  x8E.7
14EAC:  BRA    14EB6
14EAE:  BRA    14F24
14EB0:  MOVFF  A85,A89
14EB4:  BRA    14ECA
14EB6:  MOVFF  A81,A89
14EBA:  MOVF   x8E,F
14EBC:  BNZ   14ECA
14EBE:  MOVF   x8D,F
14EC0:  BNZ   14ECA
14EC2:  MOVF   x8C,F
14EC4:  BNZ   14ECA
14EC6:  CLRF   00
14EC8:  BRA    14F0C
14ECA:  BTFSC  x8E.7
14ECC:  BRA    14EDE
14ECE:  BCF    FD8.0
14ED0:  RLCF   x8B,F
14ED2:  RLCF   x8C,F
14ED4:  RLCF   x8D,F
14ED6:  RLCF   x8E,F
14ED8:  DECFSZ 00,F
14EDA:  BRA    14ECA
14EDC:  BRA    14F1A
14EDE:  BTFSS  x89.7
14EE0:  BRA    14EE6
14EE2:  BSF    x8E.7
14EE4:  BRA    14F0C
14EE6:  BCF    x8E.7
14EE8:  BRA    14F0C
14EEA:  MOVFF  A84,00
14EEE:  MOVFF  A85,A8E
14EF2:  MOVFF  A86,A8D
14EF6:  MOVFF  A87,A8C
14EFA:  BRA    14F0C
14EFC:  MOVFF  A80,00
14F00:  MOVFF  A81,A8E
14F04:  MOVFF  A82,A8D
14F08:  MOVFF  A83,A8C
14F0C:  MOVFF  A8E,01
14F10:  MOVFF  A8D,02
14F14:  MOVFF  A8C,03
14F18:  BRA    14F82
14F1A:  CLRF   00
14F1C:  CLRF   01
14F1E:  CLRF   02
14F20:  CLRF   03
14F22:  BRA    14F82
14F24:  CLRF   x8B
14F26:  COMF   x8C,F
14F28:  COMF   x8D,F
14F2A:  COMF   x8E,F
14F2C:  COMF   x8B,F
14F2E:  INCF   x8B,F
14F30:  BNZ   14F3C
14F32:  INCF   x8C,F
14F34:  BNZ   14F3C
14F36:  INCF   x8D,F
14F38:  BNZ   14F3C
14F3A:  INCF   x8E,F
14F3C:  BTFSC  x8A.0
14F3E:  BRA    14D64
14F40:  BTFSC  x8A.1
14F42:  BRA    14DEC
14F44:  BTFSC  x8A.2
14F46:  BRA    14E5A
14F48:  BRA    14EB0
14F4A:  MOVF   FEF,W
14F4C:  ADDWF  x8C,F
14F4E:  BNC   14F5A
14F50:  INCF   x8D,F
14F52:  BNZ   14F5A
14F54:  INCF   x8E,F
14F56:  BTFSC  FD8.2
14F58:  BSF    x88.0
14F5A:  MOVF   FED,F
14F5C:  MOVF   FEF,W
14F5E:  ADDWF  x8D,F
14F60:  BNC   14F68
14F62:  INCF   x8E,F
14F64:  BTFSC  FD8.2
14F66:  BSF    x88.0
14F68:  MOVF   FED,F
14F6A:  MOVF   FEF,W
14F6C:  BTFSC  FEF.7
14F6E:  BRA    14F72
14F70:  XORLW  80
14F72:  ADDWF  x8E,F
14F74:  BTFSC  FD8.0
14F76:  BSF    x88.0
14F78:  BTFSC  x8A.4
14F7A:  BRA    14D74
14F7C:  BTFSC  x8A.5
14F7E:  BRA    14DFC
14F80:  BRA    14E6A
14F82:  MOVLB  0
14F84:  RETURN 0
*
1796A:  BTFSC  FD8.1
1796C:  BRA    17976
1796E:  MOVLW  0A
17970:  MOVWF  FEA
17972:  MOVLW  76
17974:  MOVWF  FE9
17976:  MOVLB  A
17978:  MOVF   x71,W
1797A:  XORWF  x75,W
1797C:  ANDLW  80
1797E:  MOVWF  x7B
17980:  BTFSS  x71.7
17982:  BRA    1799A
17984:  COMF   x6E,F
17986:  COMF   x6F,F
17988:  COMF   x70,F
1798A:  COMF   x71,F
1798C:  INCF   x6E,F
1798E:  BTFSC  FD8.2
17990:  INCF   x6F,F
17992:  BTFSC  FD8.2
17994:  INCF   x70,F
17996:  BTFSC  FD8.2
17998:  INCF   x71,F
1799A:  BTFSS  x75.7
1799C:  BRA    179B4
1799E:  COMF   x72,F
179A0:  COMF   x73,F
179A2:  COMF   x74,F
179A4:  COMF   x75,F
179A6:  INCF   x72,F
179A8:  BTFSC  FD8.2
179AA:  INCF   x73,F
179AC:  BTFSC  FD8.2
179AE:  INCF   x74,F
179B0:  BTFSC  FD8.2
179B2:  INCF   x75,F
179B4:  CLRF   00
179B6:  CLRF   01
179B8:  CLRF   02
179BA:  CLRF   03
179BC:  CLRF   x76
179BE:  CLRF   x77
179C0:  CLRF   x78
179C2:  CLRF   x79
179C4:  MOVF   x75,W
179C6:  IORWF  x74,W
179C8:  IORWF  x73,W
179CA:  IORWF  x72,W
179CC:  BZ    17A26
179CE:  MOVLW  20
179D0:  MOVWF  x7A
179D2:  BCF    FD8.0
179D4:  RLCF   x6E,F
179D6:  RLCF   x6F,F
179D8:  RLCF   x70,F
179DA:  RLCF   x71,F
179DC:  RLCF   x76,F
179DE:  RLCF   x77,F
179E0:  RLCF   x78,F
179E2:  RLCF   x79,F
179E4:  MOVF   x75,W
179E6:  SUBWF  x79,W
179E8:  BNZ   179FA
179EA:  MOVF   x74,W
179EC:  SUBWF  x78,W
179EE:  BNZ   179FA
179F0:  MOVF   x73,W
179F2:  SUBWF  x77,W
179F4:  BNZ   179FA
179F6:  MOVF   x72,W
179F8:  SUBWF  x76,W
179FA:  BNC   17A1A
179FC:  MOVF   x72,W
179FE:  SUBWF  x76,F
17A00:  MOVF   x73,W
17A02:  BTFSS  FD8.0
17A04:  INCFSZ x73,W
17A06:  SUBWF  x77,F
17A08:  MOVF   x74,W
17A0A:  BTFSS  FD8.0
17A0C:  INCFSZ x74,W
17A0E:  SUBWF  x78,F
17A10:  MOVF   x75,W
17A12:  BTFSS  FD8.0
17A14:  INCFSZ x75,W
17A16:  SUBWF  x79,F
17A18:  BSF    FD8.0
17A1A:  RLCF   00,F
17A1C:  RLCF   01,F
17A1E:  RLCF   02,F
17A20:  RLCF   03,F
17A22:  DECFSZ x7A,F
17A24:  BRA    179D2
17A26:  BTFSS  x7B.7
17A28:  BRA    17A40
17A2A:  COMF   00,F
17A2C:  COMF   01,F
17A2E:  COMF   02,F
17A30:  COMF   03,F
17A32:  INCF   00,F
17A34:  BTFSC  FD8.2
17A36:  INCF   01,F
17A38:  BTFSC  FD8.2
17A3A:  INCF   02,F
17A3C:  BTFSC  FD8.2
17A3E:  INCF   03,F
17A40:  MOVFF  A76,FEF
17A44:  MOVFF  A77,FEC
17A48:  MOVFF  A78,FEC
17A4C:  MOVFF  A79,FEC
17A50:  MOVLB  0
17A52:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device *=16 ADC=12
.................... #use delay(clock=40000000, restart_wdt)
*
01834:  MOVLW  0A
01836:  MOVWF  FEA
01838:  MOVLW  67
0183A:  MOVWF  FE9
0183C:  MOVF   FEF,W
0183E:  BZ    1862
01840:  MOVLW  0C
01842:  MOVWF  01
01844:  MOVLW  BF
01846:  MOVWF  00
01848:  CLRWDT
0184A:  DECFSZ 00,F
0184C:  BRA    1848
0184E:  DECFSZ 01,F
01850:  BRA    1844
01852:  MOVLW  F7
01854:  MOVWF  00
01856:  DECFSZ 00,F
01858:  BRA    1856
0185A:  NOP   
0185C:  CLRWDT
0185E:  DECFSZ FEF,F
01860:  BRA    1840
01862:  RETURN 0
*
06EB0:  MOVLW  02
06EB2:  MOVLB  A
06EB4:  SUBWF  x51,F
06EB6:  BNC   6ED4
06EB8:  MOVLW  0A
06EBA:  MOVWF  FEA
06EBC:  MOVLW  51
06EBE:  MOVWF  FE9
06EC0:  MOVF   FEF,W
06EC2:  BZ    6ED4
06EC4:  MOVLW  01
06EC6:  MOVWF  00
06EC8:  DECFSZ 00,F
06ECA:  BRA    6EC8
06ECC:  BRA    6ECE
06ECE:  CLRWDT
06ED0:  DECFSZ FEF,F
06ED2:  BRA    6EC4
06ED4:  MOVLB  0
06ED6:  GOTO   6F12 (RETURN)
.................... #fuses HSH,WDT128,NOPROTECT,PUT,BROWNOUT,SOSC_DIG,RTCOSC_INT
.................... 
.................... // definicoes de tipo de equipamento a ser compilado
.................... // Vamos tentar manter os mesmos fontes para toda a linha nova, st50xxT, xt53xxT, st94xxR, st96xxR, st91xxr, st8x00C.
.................... #define st5000t						false
.................... #define st5030t						false
.................... #define st5300t						false
.................... #define st5330t						false
.................... #define st8x00c						false
.................... #define st9100r						false
.................... #define st9200r						false
.................... #define st9230r						false
.................... #define st9400r						false
.................... #define st9430r						false
.................... #define st9600r						false
.................... #define st_prog						false
.................... #define st8100c						false
.................... #define st8200c						false
.................... #define st8300c						false
.................... #define st8500c						true
.................... 
.................... #define st5x						false
.................... #define st94						false
.................... #define st92						false
.................... #define com_regs					true
.................... #define portatil 					false
.................... #define monofasico 					false
.................... #define CONTROLADOR 				true
.................... #define com_menu					true
.................... #define com_rep						false
.................... #define com_modbus 					true
.................... #define home_system 				false
.................... #define com_alarme					true
.................... #define com_tc						true
.................... #define instantaneo					false
.................... 
.................... #if (com_menu == true)
.................... 	#define com_display 			true
.................... 	#define disp_7seg				false
.................... 	#define disp_lcd				true
.................... #else
.................... 	#define com_display 			false
.................... 	#define disp_7seg				false
.................... 	#define disp_lcd				false
.................... #endif
.................... 
.................... #define com_relogio					true
.................... #define SST25LF080					false
.................... #define SST25VF080					true
.................... 
.................... #define com_consumo_aparente		false
.................... #define padrao_referencia 			false
.................... #define teste_edison				false
.................... 
.................... #define funcao_505 					false
.................... #define fixa_modb					false
.................... 
.................... #define	tc_fixo						true
.................... #define calcular_tc					false
.................... 
.................... //#define painel_6					true
.................... 
.................... // define tipo de sensor de energia
.................... #define ad_microchip				false
.................... #define chip_cs5460a				false
.................... #define ade7754						false
.................... #define sames_9904 					false
.................... 
.................... #define aju_time					false
.................... 
.................... #define com_485  					true
.................... 
.................... //#define teste_painel				false
.................... 
.................... #define teste_digita_texto			false
.................... #define tratar_localizacao			false
.................... #define com_cht						false
.................... #if (com_tc == true)
.................... 	#define com_consumo				true
.................... 	#define com_demanda 			true
.................... #else
.................... 	#define com_consumo				false
.................... 	#define com_demanda 			false
.................... #endif
.................... #define com_alarme_demanda			true
.................... #define com_time_funciona 			false
.................... #define AUTOSET 					false
.................... #define DESLIGA_F5					true
.................... #define rotacionar					false
.................... 
.................... #define rev_01						true
.................... 
.................... #define feira 						false
.................... #define printa						false
.................... 
.................... #define se_com_flex					false
.................... #define pci_mono					false
.................... 
.................... #define MAXIMA_CARGA_TOTAL			250*16		// 250kW * 16 Bancos = 4000kW
.................... #define MAXIMA_CARGA				250			// 250kW / Banco
.................... #define CARGA_INSTALADA_MAX			65000		// 4000kW / 0,05 = 80000kW -> O total de cargas controladas corresponde
.................... #define NRO_MAXIMO_CARGAS			16			// a pelo menos 5% da carga instalada. Porém temos o limite int16 (65535)
.................... 
.................... #define simula_forno				false
.................... 
.................... 
.................... #define controle_demanda			true
.................... #define protocolo_abb				false
.................... #define teste_cht_vag 				false
.................... #define teste_home_system 			false
.................... #define teste_regs					false
.................... 
.................... #define debugar						false
.................... #define teste_consumo				false
.................... #define fixar_parametro				false
.................... #define controle_por_fase 			false
.................... #define versao_hsnet_calibra 		false
.................... #define com_gestal 					true
.................... #define GEBRAS						false
.................... #define prog_defasagem 				true
.................... #define novo_cht					false
.................... #define MALA_FEIRA					false
.................... #define buffer_fixo					false
.................... #define VALORES_FIXOS_MAX			false
.................... #define Magmattec					true
.................... #define CCA							false
.................... 
.................... #include "st_main.c"
.................... //***********************************************************************
.................... // Empresa: Sultech Sistemas Eletrônicos								*
.................... // Módulo: Principal													*
.................... // Função: Definir o funcionamento do equipamento						*
.................... // Responsável: Edison Valério Nunes Junior								*
.................... // Modificado: Edison Valério Nunes Junior								*
.................... // Inicio: 22/11/2013													*
.................... // Revisão: Edison Valério Nunes Junior									*
.................... //***********************************************************************
.................... 
.................... 
.................... 	#use rs232(baud=19200, xmit=PIN_C6, rcv=PIN_C7,  parity=N, bits=8, errors, stream = modbus)  
*
01632:  BTFSS  F9E.5
01634:  BRA    1632
01636:  MOVFF  FAB,1B
0163A:  MOVFF  FAE,01
0163E:  BTFSS  1B.1
01640:  BRA    1646
01642:  BCF    FAB.4
01644:  BSF    FAB.4
01646:  GOTO   1674 (RETURN)
*
06EDA:  BTFSS  F9E.4
06EDC:  BRA    6EDA
06EDE:  MOVWF  FAD
06EE0:  GOTO   6F46 (RETURN)
.................... 	#if (com_rep == true)
.................... 		#use rs232(baud = 2400, xmit=PIN_G1, rcv=PIN_G2,  parity=N, bits=8, errors, stream = rep)  
.................... 	#endif
.................... 
.................... 
.................... #ignore_warnings 202, 203, 204
.................... #priority timer3
.................... 
.................... #define CR	13
.................... #define LF  10
.................... 
.................... #define cristal	40
.................... #define valor_timer1  65536 - 50000			// 10 milisegundos
.................... 											// (0,010/(8/40000000)) = 50000
.................... 											// calculo: 65536-50000
.................... #define INTS_PER_SECOND 100
.................... 
.................... #define valor_timer3_2 		64234			// para 64 amostras
.................... #define valor_timer3_2_60HZ 64234			// para 64 amostras
.................... #define valor_timer3_2_50HZ 63973			// para 64 amostras
.................... 							
.................... 											// 60HZ
.................... 											// calculo: 65536-(0,0002604/(8/40000000)),  = "64234" p/ 260us / 40mhz   
.................... 											// onde 0,000260us eh intervalo entre ints do timer 1 
.................... 											// para 260us 64234 p/ 64 amostras por senoide em 24MHZ
.................... 											// 50HZ
.................... 											// calculo: 65536-(0,0003125/(8/40000000)),  = "63973" p/ 312,5us / 40mhz   
.................... 											// onde 0,0003125 eh intervalo entre ints do timer 1 
.................... 											// para 312,5us 63973 p/ 64 amostras por senoide em 24MHZ
.................... 
.................... 
.................... 
.................... #define valor_timer3_CHT_60HZ 64842			// este timer faz as leituras analogicas de tensao e corrente em 8 bits pelo ad interno 
.................... 											// como vao ser 120 pontos o intervalo deve ser 1/freq / 120 = 0,000138889
.................... 											// em 24mhz 65536 - (0,000138889/(8/40000000)) = 64842						
.................... 
.................... #define valor_timer3_CHT_50HZ 64703			// este timer faz as leituras analogicas de tensao e corrente em 8 bits pelo ad interno 
.................... 											// como vao ser 120 pontos o intervalo deve ser 1/freq / 120 = 0,000138889
.................... 											// em 24mhz 65536 - (0,000166666/(8/40000000)) = 64703
.................... 
.................... #define INTS_PER_250MS (INTS_PER_SECOND/4)
.................... 
.................... #define valor_timer3_16p 62411	// para 16 amostras
.................... 								// 60HZ
.................... 								// calculo: 65536-(0,001041557/(8/24000000)),  = 62411
.................... 								// onde 0,001041557 eh intervalo entre ints do timer 1 
.................... 								// para 1,041667us 64885 p/ 16 amostras por senoide em 24MHZ
.................... 									
.................... #use fast_io (D)
.................... //#use standard_io (C)
.................... //#use fast_io (E)
.................... 
.................... /* DECLARACAO DE FUNCOES */
.................... void main(void);
.................... void pulsa_wdt(void);
.................... void trata_virada_250ms(void);
.................... void trata_virada_500ms(void);
.................... void trata_virada_750ms(void);
.................... void trata_virada_segundo(void);
.................... void trata_virada_minuto(void);
.................... void trata_virada_hora(void);
.................... void trata_virada_dia(void);
.................... void trata_virada_mes(void);
.................... #if ( debugar == true)
.................... 	void trace(char);
.................... #endif
.................... 
.................... 
.................... // Includes 
.................... 
.................... #include "C:\Program Files (x86)\PICC\Drivers\math.H"
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #include "C:\Program Files (x86)\PICC\Drivers\stdio.H"
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDIO
.................... #define _STDIO
.................... #include <string.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STRING
.................... #define _STRING
.................... #include <stddef.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDDEF
.................... 
.................... #define _STDDEF
.................... 
.................... #if sizeof(unsigned int8 *)==1
.................... #define ptrdiff_t unsigned int8
.................... #else
.................... #define ptrdiff_t unsigned int16
.................... #endif
.................... 
.................... #if defined(__PCB__) || defined(__PCM__)
.................... #define size_t unsigned int8
.................... #else
.................... #define size_t unsigned int16
.................... #endif
.................... #define wchar_t unsigned char
.................... #define NULL 0
.................... 
.................... #define offsetof(s,f) (offsetofbit(s,f)/8)
.................... 
.................... #endif
.................... 
.................... #include <ctype.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _CTYPE
.................... #define _CTYPE
.................... 
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
.................... #define isdigit(x)  isamong(x,"0123456789")
.................... #define isspace(x)  ((x)==' ')
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef")
.................... #define iscntrl(x)  ((x)<' ')
.................... #define isprint(x)  ((x)>=' ')
.................... #define isgraph(x)  ((x)>' ')
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x))
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //////////////////////////////////////////////
.................... //// Uncomment the following define to    ////
.................... //// allow some functions to use a        ////
.................... //// quicker algorithm, but use more ROM  ////
.................... ////                                      ////
.................... //// #define FASTER_BUT_MORE_ROM          ////
.................... //////////////////////////////////////////////
.................... 
.................... 
.................... 
.................... /*Copying functions*/
.................... /* standard template:
....................    void *memmove(void *s1, void *s2, size_t n).
....................    Copies max of n characters safely (not following ending '\0')
....................    from s2 in s1; if s2 has less than n characters, appends 0 */
.................... 
.................... unsigned char *memmove(void *s1,void *s2,size_t n)
.................... {
....................    unsigned char *sc1;
....................    unsigned char *sc2;
....................    sc1=s1;
....................    sc2=s2;
....................    if(sc2<sc1 && sc1 <sc2 +n)
....................       for(sc1+=n,sc2+=n;0<n;--n)
....................          *--sc1=*--sc2;
....................    else
....................       for(;0<n;--n)
....................          *sc1++=*sc2++;
....................   return s1;
....................   }
.................... 
.................... /* Standard template: char *strcpy(char *s1, const char *s2)
....................    copies the string s2 including the null character to s1.
....................    This is a compiler built in to handle the different address
....................    spaces */
.................... 
.................... #define strcopy strcpy
.................... 
.................... /* standard template:
....................    char *strncpy(char *s1, const char *s2, size_t n).
....................    Copies max of n characters (not following ending '\0')
....................    from s2 in s1; if s2 has less than n characters, appends 0 */
.................... 
.................... char *strncpy(char *s1, char *s2, size_t n)
.................... {
....................   char *s;
.................... 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--)
....................      *s++ = *s2++;
....................   for (; n > 0; n--)
....................      *s++ = '\0';
.................... 
....................   return(s1);
.................... }
.................... /***********************************************************/
.................... 
.................... /*concatenation functions*/
.................... /* standard template: char *strcat(char *s1, const char *s2)
.................... appends s2 to s1*/
.................... 
.................... char *strcat(char *s1, char *s2)
.................... {
....................    unsigned char *s;
.................... 
....................    for (s = s1; *s != '\0'; ++s);
....................    while(*s2 != '\0')
....................    {
....................       *s = *s2;
....................       ++s;
....................       ++s2;
....................    }
.................... 
....................    *s = '\0';
....................    return(s1);
.................... }
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n)
.................... appends not more than n characters from s2 to s1*/
.................... 
.................... char *strncat(char *s1, char *s2, size_t n)
.................... {
....................    char *s;
.................... 
....................    for (s = s1; *s != '\0'; ++s);
....................    while(*s2 != '\0' && 0<n)
....................    {
....................       *s = *s2;
....................       ++s;
....................       ++s2;
....................       --n;
....................    }
.................... 
....................    *s = '\0';
....................    return(s1);
.................... }
.................... 
.................... /***********************************************************/
.................... 
.................... 
.................... /*comparison functions*/
.................... /* standard template: signed int memcmp(void *s1, void *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int memcmp(void * s1,void *s2,size_t n)
.................... {
.................... unsigned char *su1, *su2;
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n)
.................... {
....................    if(*su1!=*su2)
....................       return ((*su1<*su2)?-1:1);
.................... }
.................... return 0;
.................... }
.................... 
.................... /* standard template: int strcmp(const char *s1, const char *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int strcmp(char *s1, char *s2)
.................... {
....................    for (; *s1 == *s2; s1++, s2++)
....................       if (*s1 == '\0')
....................          return(0);
....................    return((*s1 < *s2) ? -1: 1);
.................... }
.................... /* standard template: int strcoll(const char *s1, const char *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int strcoll(char *s1, char *s2)
.................... {
....................    for (; *s1 == *s2; s1++, s2++)
....................       if (*s1 == '\0')
....................          return(0);
....................    return((*s1 < *s2) ? -1: 1);
.................... }
.................... 
.................... /* standard template:
....................    int strncmp(const char *s1, const char *s2, size_t n).
....................    Compares max of n characters (not following 0) from s1 to s2;
....................    returns same as strcmp */
.................... 
.................... signed int strncmp(char *s1, char *s2, size_t n)
.................... {
....................    for (; n > 0; s1++, s2++, n--)
....................       if (*s1 != *s2)
....................          return((*s1 <*s2) ? -1: 1);
....................       else if (*s1 == '\0')
....................          return(0);
....................    return(0);
.................... }
.................... /* standard template:
....................    int strxfrm(const char *s1, const char *s2, size_t n).
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1.
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/
.................... size_t strxfrm(char *s1, char *s2, size_t n)
.................... {
....................    char c;
....................    size_t n1;
....................    
....................    if (!s1 && !n)
....................       n = -1; //find length
.................... 
....................    n1 = 0;
....................    
....................    for (; n1 < n; n1++)
....................    {
....................       c = *s2++;
....................       if (!c)
....................          break;
....................       if (s1)
....................          *s1++ = c;
....................    }
.................... 
....................   return(n1);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /***********************************************************/
.................... /*Search functions*/
.................... /* standard template: void *memchr(const char *s, int c).
....................    Finds first occurrence of c in n characters of s */
.................... 
.................... char *memchr(void *s,unsigned int8 c,size_t n)
.................... {
....................    char uc;
....................    char *su;
....................    uc=c;
....................    for(su=s;0<n;++su,--n)
....................       if(*su==uc)
....................       return su;
....................    return NULL;
.................... }
.................... 
.................... /* standard template: char *strchr(const char *s, int c).
....................    Finds first occurrence of c in s */
.................... 
.................... char *strchr(char *s, char c)
.................... {
....................    for (; *s != c; s++)
....................       if (*s == '\0')
....................          return(0);
....................    return(s);
.................... }
.................... /* standard template:
....................    size_t strcspn(const char *s1, const char *s2).
....................    Computes length of max initial segment of s1 that
....................    consists entirely of characters NOT from s2*/
.................... 
.................... size_t strcspn(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; *sc2 != 0; sc2++)
....................          if (*sc1 == *sc2)
....................             return(sc1 - s1);
....................    return(sc1 - s1);
.................... }
.................... /* standard template:
....................    char *strpbrk(const char *s1, const char *s2).
....................    Locates first occurence of any character from s2 in s1;
....................    returns s1 if s2 is empty string */
.................... 
.................... char *strpbrk(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; *sc2 != 0; sc2++)
....................          if (*sc1 == *sc2)
....................             return(sc1);
....................    return(0);
.................... }
.................... 
.................... 
.................... /* standard template: char *strrchr(const char *s, int c).
....................    Finds last occurrence of c in s */
.................... 
.................... char *strrchr(char *s, char c)
.................... {
....................    char *p;
.................... 
....................    for (p = 0; ; s++)
....................    {
....................       if (*s == c)
....................          p = s;
....................       if (*s == '\0')
....................          return(p);
....................    }
.................... }
.................... /* computes length of max initial segment of s1 consisting
....................    entirely of characters from s2 */
.................... 
.................... size_t strspn(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; ; sc2++)
....................     if (*sc2 == '\0')
....................        return(sc1 - s1);
....................          else if (*sc1 == *sc2)
....................             break;
....................    return(sc1 - s1);
.................... }
.................... /* standard template:
....................    char *strstr(const char *s1, const char *s2);
....................    Locates first occurence of character sequence s2 in s1;
....................    returns 0 if s2 is empty string
.................... 
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the
....................    file to use the faster algorithm */
.................... char *strstr(char *s1, char *s2)
.................... {
....................    char *s, *t;
.................... 
....................    #ifdef FASTER_BUT_MORE_ROM
....................    if (*s2 == '\0')
....................          return(s1);
....................    #endif
.................... 
....................    while (*s1)
....................    {
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t);
.................... 
....................       if (*t == '\0')
....................          return s1;
....................       ++s1;
....................       #ifdef FASTER_BUT_MORE_ROM
....................          while(*s1 != '\0' && *s1 != *s2)
....................             ++s1;
....................       #endif
....................    }
....................    return 0;
.................... }
.................... 
.................... /* standard template: size_t strlen(const char *s).
....................    Computes length of s1 (preceding terminating 0) */
.................... 
.................... size_t strlen(char *s)
.................... {
....................    char *sc;
.................... 
....................    for (sc = s; *sc != 0; sc++);
....................    return(sc - s);
.................... }
.................... 
.................... /* standard template: char *strtok(char *s1, const char *s2).
.................... 
....................    Finds next token in s1 delimited by a character from separator
....................    string s2 (which can be different from call to call).  First call
....................    starts at beginning of s1 searching for first character NOT
....................    contained in s2; returns 0 if none is found.
....................    If one is found, it is the start of first token (return value).
....................    Function then searches from there for a character contained in s2.
....................    If none is found, current token extends to end of s1, and subsequent
....................    searches for a token will return 0.  If one is found, it is
....................    overwritten by '\0', which terminates current token.  Function saves
....................    pointer to following character from which next search will start.
....................    Each subsequent call, with 0 as first argument, starts searching
....................    from saved pointer */
.................... 
.................... char *strtok(char *s1, char *s2)
.................... {
....................    char *beg, *end;
....................    static char *save;
.................... 
....................    beg = (s1)? s1: save;
....................    beg += strspn(beg, s2);
....................    if (*beg == '\0')
....................       return(0);
....................       
....................    end = strpbrk(beg, s2);
....................    if (end != '\0')
....................    {
....................       *end = '\0';
....................       end++;
....................       save = end;
....................    }
....................    else
....................       save = beg + strlen(beg);
....................    
....................    return(beg);
.................... }
.................... 
.................... /*****************************************************************/
.................... /*Miscellaneous functions*/
.................... /* standard template
.................... maps error number in errnum to an error message string
.................... Returns: Pointer to string
.................... */
.................... #ifdef _ERRNO
.................... char * strerror(unsigned int8 errnum)
.................... {
.................... static unsigned char s[13];
.................... switch( errnum)
.................... {
.................... case 0:
....................    strcpy(s,"no errors");
....................    return s;
.................... case EDOM :
....................    strcpy(s,"domain error");
....................    return s;
.................... case ERANGE:
....................    strcpy(s,"range error");
....................    return s;
.................... }
.................... }
.................... #ENDIF
.................... 
.................... /* standard template: size_t stricmp(const char *s1, const char *s2).
....................    Compares s1 to s2 ignoring case (upper vs. lower) */
.................... 
.................... signed int stricmp(char *s1, char *s2)
.................... {
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&((char)*s1==(char)*s2+(char)32||(char)*s2==(char)*s1+(char)32));
....................     s1++, s2++)
....................     if (*s1 == '\0')
....................        return(0);
....................  return((*s1 < *s2) ? -1: 1);
.................... }
.................... 
.................... 
.................... /* standard template: char *strlwr(char *s).
....................    Replaces uppercase letters by lowercase;
....................    returns pointer to new string s */
.................... 
.................... char *strlwr(char *s)
.................... {
....................    char *p;
.................... 
....................    for (p = s; *p != '\0'; p++)
....................       if (*p >= 'A' && *p <='Z')
....................          *p += 'a' - 'A';
....................    return(s);
.................... }
.................... 
.................... /* standard template: char *strupr(char *s).
....................    Replaces lowercase letters by upercase;
....................    returns pointer to new string s */
.................... 
.................... char *strupr(char *s)
.................... {
....................    char *p;
.................... 
....................    for (p = s; *p != '\0'; p++)
....................       if (*p >= 'a' && *p <='z')
....................          *p -= 'a' - 'A';
....................    return(s);
.................... }
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... 
.................... #endif
.................... 
.................... #ifndef getc
.................... #define getc getch
.................... #define getchar getch
.................... #define puts(s) {printf(s); putchar(13); putchar(10);}
.................... #define putc putchar
.................... #endif
.................... /* maps error number to an error message. Writes a sequence of characters to
.................... stderr stream thus: if s is not null then string pointed to by s follwed by
.................... a colon (:) and a space and the appropriate error message returned by strerror
.................... function with argument errno
.................... 
.................... Returns: no value
.................... */
.................... 
.................... #ifdef _ERRNO
.................... void perror(char *s)
.................... {
....................   if(s)
....................   fprintf(STDERR,"%s: ",s);
....................   fprintf(STDERR,"%s\r\n",strerror(errno));
.................... }
.................... #endif
.................... #endif
.................... 
.................... 
.................... #include "st_flag.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: CP_MAIN                                                        *
.................... ; Funcao: MODULO PRINCIPAL DE CONTROLE CP_4000   						 *
.................... ; 		Conversor de protocolo MP400 / Modbus/RTU                        *
.................... ;		By Sultech For AGST
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 06/06/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... short testando_memoria = 0;
.................... #if (com_regs == true)
.................... 	short gravar_cht;
.................... 	short memoria_full;
.................... #endif
.................... short med_ten_ok;
.................... short calc_ten_ok;
.................... short ler_calend;
.................... 	
.................... short virou_250ms;
.................... short virou_500ms;
.................... short virou_750ms;
.................... short virouseg;
.................... short viroumin;
.................... short virouhora;
.................... short viroudia;
.................... short viroumes;
.................... short morder_t1;
.................... short morder_t3;
.................... short morder_calc;
.................... short ler_senoide;
.................... short ler_ad;
.................... short ler_ad_t3;
.................... short calculando_vref;
.................... short gravou;
.................... 
.................... short lendo_cht;
.................... short ponto_segundo;
.................... short pisca_minuto;
.................... //short ativo;
.................... short calcular_frequencia;
.................... short calculando_freq;
.................... short freq_50hz;
.................... 
.................... short erro_mod;
.................... short existe;
.................... 
.................... short sel_sequencia;
.................... short sel_seq_tab;
.................... short limpa_ocor;
.................... short apaga_banco;
.................... 
.................... short erro;
.................... short tem_ocor;
.................... short tem_alarme;
.................... short fsentido_r;
.................... short sentido_r;
.................... short fp_ind;
.................... short fp_cap;
.................... short ten_a_r;
.................... short ten_b_r;
.................... short cor_a_r;
.................... short chtt_a;
.................... short chtc_a;
.................... short ffase_r;
.................... short cor_b_r;
.................... short dem_ati;
.................... short cor_baixa_r;
.................... short tem_comando_alarme;
.................... short tem_erro;
.................... short erro_freq;
.................... 
.................... short zero_r;
.................... short ajuste_relogio;
.................... 
.................... short em_status;
.................... 
.................... #if (CONTROLADOR == true) || (st_prog == true)
.................... //	short faltou_energia;
.................... 	short tudo_desligado;
.................... 	short tudo_ligado;
.................... 	short com_manual;
.................... 	short des_ten_a;
.................... 	short des_ten_b;
.................... 	short des_chtt;
.................... 	short des_chtc;
.................... 	short des_fp_ind;
.................... 	short cor_min_r;
.................... 
.................... 	short saturou_kw;
.................... 	short saturou_kvar;
.................... 
.................... 	#if (st8500c == true)
.................... 		short ligou_carga;
.................... 		short desligou_carga;
.................... 		short fprintar;
.................... 	#else
.................... 		short ligou_banco;
.................... 		short desligou_banco;
.................... 	#endif		
.................... 	
.................... 	short MENU_FIXO;
.................... 
.................... 	short cor_min;
.................... 	short sentido;
.................... 	short calcular_bancos;
.................... 	short falta_capacitor;
.................... 	
.................... #endif
.................... 
.................... #if (monofasico == false)
.................... 	short sentido_s;
.................... 	short sentido_t;
.................... 	short ten_a_s;
.................... 	short ten_a_t;
.................... 	short ten_b_s;
.................... 	short ten_b_t;
.................... 	short cor_a_s;
.................... 	short cor_a_t;
.................... 	short ffase_s;
.................... 	short ffase_t;
.................... 	short cor_b_s;
.................... 	short cor_b_t;
.................... 	short cor_baixa_s;
.................... 	short cor_baixa_t;
.................... 	#if (CONTROLADOR == true)
.................... 		short cor_min_s;
.................... 		short cor_min_t;
.................... 	#endif
.................... 	short fsentido_s;
.................... 	short fsentido_t;
.................... #endif
.................... 
.................... 
.................... 
.................... #if (st5x == true)
.................... 	short ler_dips;
.................... #endif
.................... 
.................... short programando;
.................... 
.................... 
.................... #if (com_menu == true)
.................... 	short exibiu;
.................... 	short piscar;
.................... 	short pisca;
.................... 	short tecla_up_down;  		/* tecla up e down pressionadas */
.................... 	short tecla_reset_up;		/* tecla up e reset pressionadas */
.................... 	short tecla_enter_down;  	/* tecla enter e down pressionadas */
.................... 	short tecla_enter_reset;	/* tecla enter e reset pressionadas */
.................... 	short tecla_up;				/* tecla up pressionada */
.................... 	short tecla_down;			/* tecla down pressionada */
.................... 	short enter_low;
.................... 	short tecla_enter;			/* tecla enter pressionada */
.................... 	short tecla_reset;			/* tecla reset pressionada */
.................... 	short ha_tecla;				// indica que tem tecla pressionada
.................... 	short exibiu_erro;			// indica que alguma mensagem de erro foi exibida
.................... 	short exibiu_erro_menu;		// indica que exibiu um erro qd qmenu != 0,  em outras telas.
.................... 	short teclou_enter;			// indica que tecla enter foi pressionada
.................... 	short exibir_menu;
.................... 	short tecla_up_down_reset;
.................... 
.................... 	short rolando;
.................... 	short ja_rolou;
.................... 
.................... #endif
.................... 
.................... #if portatil == true
.................... 	#if (versao_pci_st96 >= 5)
.................... 		short ajustar_ponteira;
.................... 	#endif
.................... 	short digitando_texto;  
.................... 	short digitou_texto;
.................... 	short existe_local;
.................... 	short escolha_ponteira;
.................... 	short recarrega_ponteira;
.................... #endif
.................... 
.................... 
.................... #if (chip_cs5460a == true)
.................... 	short ler_cs5460;
.................... #endif
.................... 
.................... #if (ade7754 == true)
.................... 	short lendo_kw;
.................... 	short aguarda_kw;
.................... 	short leu_senoide;
.................... 	short abre_leitura_cht;
.................... 	short lendo_tensao;
.................... 	short med_ten_ok_r;
.................... 	short med_ten_ok_s;
.................... 	short med_ten_ok_t;
.................... #endif
.................... 
.................... #if (st_prog == true)
.................... 	short equip_mono;
.................... 	short equip_bi;
.................... 	short equip_tri;
.................... 	short protocolo;  
.................... 	short calibrando;
.................... #endif
.................... 
.................... 
.................... #if (st5x == true)
.................... 	#if (cpu_rev1011 == true)
.................... 		short spi_ocupada;
.................... 	#endif
.................... #endif
.................... 
.................... short sincro;
.................... //#if (st5x == true)
.................... //	#if (TECNOFLUX == true)
.................... //		short fled_ok;
.................... //		short fled_tx;
.................... //		short fled_rx;
.................... //		short fled_alarme;
.................... //		short fled_tc_r;
.................... //		short fled_tc_s;
.................... //		short fled_tc_t;
.................... //		short fled_erro;
.................... //	#endif
.................... //#endif
.................... #if (com_rep == true)
.................... 	short rec_rep_ok;
.................... 	short atualizar;
.................... 	short start_rep;
.................... 	short status_bit;
.................... #endif
.................... 
.................... short ferro_rep;
.................... 
.................... short em_repouso;
.................... 
.................... short minuto_hora_ponta;
.................... 
.................... #include "st_vars.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS                                  *
.................... ; Modulo: ST_VARS                                                        *
.................... ; Funcao: MODULO DEFINICAO DE VARIAVEIS         						 *
.................... ;		By Sultech 														 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 06/06/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... #define word int16
.................... 
.................... #define PORTUGUES   0
.................... #define ESPANHOL	1
.................... #define INGLES		2
.................... 
.................... #define LIMITE_VAL_PWM 512
.................... 
.................... #define nro_ocorrencia  20
.................... #if (home_system == true)
.................... 	#define TAM_RX  10
.................... 	#define TAM_TX 	10
.................... #else
.................... 	#define TAM_RX  32
.................... 	#define TAM_TX 	254
.................... #endif
.................... 
.................... #if (st5000t == true)
.................... 	#if (home_system == true)
.................... 		#define NRO_CHT 		12	//23
.................... 		#define NRO_CHT_BY_2	6	//11
.................... 	#else
.................... 		#define NRO_CHT 		49	//23
.................... 		#define NRO_CHT_BY_2	23	//11
.................... 	#endif
.................... #elif (st5030t == true)
.................... 	#define NRO_CHT 		49	//23
.................... 	#define NRO_CHT_BY_2	23	//11
.................... #elif (st92 == true)
.................... 	#define NRO_CHT 		49	//23
.................... 	#define NRO_CHT_BY_2	23	//11
.................... #elif (st9400r == true)
.................... 	#define NRO_CHT 		49	//23
.................... 	#define NRO_CHT_BY_2	23	//11
.................... #elif (st9430r == true)
.................... 	#define NRO_CHT 		49	//23
.................... 	#define NRO_CHT_BY_2	23	//11
.................... #elif (ST8100C == true)
.................... 	#define NRO_CHT 		12	
.................... 	#define NRO_CHT_BY_2	5
.................... #elif (ST8200C == true)
.................... 	#define NRO_CHT 		12	
.................... 	#define NRO_CHT_BY_2	5
.................... #elif (ST8300C == true)
.................... 	#define NRO_CHT 		12	
.................... 	#define NRO_CHT_BY_2	5
.................... #elif (st9600r == true)
.................... 	#if (teste_vag == true)
.................... 		#define NRO_CHT 		49/2
.................... 		#define NRO_CHT_BY_2	23/2
.................... 	#else
.................... 		#define NRO_CHT 		49	
.................... 		#define NRO_CHT_BY_2	23
.................... 	#endif
.................... #else
.................... 	#define NRO_CHT 		49
.................... 	#define NRO_CHT_BY_2	23
.................... #endif
.................... 
.................... #define off_cor_delta	16
.................... 
.................... #if (st5000t == true)
.................... 	#if (ade7754 == true)
.................... 		#define NRO_AMOSTRAS 	54
.................... 	#else
.................... 		#define NRO_AMOSTRAS 	64
.................... 	#endif
.................... #elif (st5030t == true)
.................... 	#if (ade7754 == true)
.................... 		#define NRO_AMOSTRAS 	54
.................... 	#else
.................... 		#define NRO_AMOSTRAS 	64
.................... 	#endif
.................... #elif (st92 == true)
.................... 	#define NRO_AMOSTRAS 	64
.................... #elif (st9400r == true)
.................... 	#if (ade7754 == true)
.................... 		#define NRO_AMOSTRAS 	54
.................... 	#else
.................... 		#define NRO_AMOSTRAS 	64
.................... 	#endif
.................... #elif (st9430r == true)
.................... 	#if (ade7754 == true)
.................... 		#define NRO_AMOSTRAS 	54
.................... 	#else
.................... 		#define NRO_AMOSTRAS 	64
.................... 	#endif
.................... #elif (st9600r == true)
.................... 	#define NRO_CICLOS		16
.................... 	#define NRO_AMOSTRAS_MODO3 	16
.................... 	#define NRO_AMOSTRAS 	64
.................... #else
.................... 	#define NRO_AMOSTRAS 	64
.................... #endif
.................... 
.................... #if (ade7754 == true)
.................... 	#define NRO_AMOSTRAS_CHT 54
.................... #else
.................... 	#define NRO_AMOSTRAS_CHT 120
.................... //	#define NRO_AMOSTRAS_CHT 40
.................... #endif
.................... 
.................... 
.................... #define nro_media_amostras 2			// Sempre múltiplo de 2 (2,4,8,16,32,64,128,256).
.................... 
.................... #if (nro_media_amostras == 2)
.................... 	#define nro_desloca	1
.................... #endif
.................... #if (nro_media_amostras == 4)
.................... 	#define nro_desloca	2
.................... #endif
.................... #if (nro_media_amostras == 8)
.................... 	#define nro_desloca	3
.................... #endif
.................... #if (nro_media_amostras == 16)
.................... 	#define nro_desloca	4
.................... #endif
.................... #if (nro_media_amostras == 32)
.................... 	#define nro_desloca	5
.................... #endif
.................... #if (nro_media_amostras == 64)
.................... 	#define nro_desloca	6
.................... #endif
.................... #if (nro_media_amostras == 128)
.................... 	#define nro_desloca	7
.................... #endif
.................... #if (nro_media_amostras == 256)
.................... 	#define nro_desloca	8
.................... #endif
.................... #define nro_medias 2
.................... #define NRO_POSI_TEN	3
.................... #if (portatil == TRUE)
.................... 	#if (ponteira_kyoritsu == true)
.................... 		#define NRO_POSI_TC		6
.................... 	#elif (viercon == true)
.................... 		#define NRO_POSI_TC		3
.................... 	#else
.................... 		#define NRO_POSI_TC		9
.................... 	#endif
.................... 	#define NRO_POSI_TABELA_TIPO_PT	21
.................... #else
.................... 	#define NRO_POSI_TC		37
.................... #endif
.................... #define NRO_POSI_BAUD		6
.................... 
.................... #define valor_tc_fixo	500
.................... #define nro_alarmes 7
.................... 
.................... /***************************************** Definição dos Menus **************************************/
.................... 
.................... #if (com_rep == true)
.................... 	#define NRO_MODOS_MEDICAO 2
.................... #endif
.................... 
.................... #if (ST8100C == true)
.................... 	#define nro_menus 12
.................... 	#if (com_rep == true)
.................... 		#define nro_menus1 14+4
.................... 		#define nro_menus4_rep 11
.................... 	#else
.................... 		#define nro_menus1 10
.................... 	#endif
.................... 	#define nro_menus2 NRO_CHT
.................... 	#define nro_menus3 NRO_CHT
.................... 	#define nro_menus4 	7
.................... 	#define nro_menus5 	8
.................... 	#define nro_menus7	5
.................... 	#define nro_menu_bancos	9
.................... 	#define nro_menus11 5
.................... 	
.................... #elif (ST8200C == true)
.................... 	#define nro_menus 12
.................... 	#if (com_rep == true)
.................... 		#define nro_menus1 11
.................... 		#define nro_menus4_rep 12
.................... 	#else
.................... 		#define nro_menus1 9
.................... 	#endif
.................... 	#define nro_menus2 NRO_CHT
.................... 	#define nro_menus3 NRO_CHT
.................... 	#if (prog_defasagem ==	true)
.................... 		#define nro_menus4 	8
.................... 	#else
.................... 		#define nro_menus4 	7
.................... 	#endif
.................... 	#define nro_menus5 	8
.................... 	#define nro_menus7	5
.................... 	#define nro_menu_bancos	8
.................... 	#define nro_menus11 2
.................... 	
.................... #elif (ST8300C == true)
.................... 	#define nro_menus 12
.................... 	#if (com_rep == true)
.................... 		#if (com_consumo == true)
.................... 			#define nro_menus1 12
.................... 		#else
.................... 			#define nro_menus1 11
.................... 		#endif
.................... 		#define nro_menus4_rep 11
.................... 	#else
.................... 		#if (com_consumo == true)
.................... 			#define nro_menus1 11
.................... 		#else
.................... 			#define nro_menus1 10
.................... 		#endif
.................... 	#endif
.................... 	#define nro_menus2 NRO_CHT
.................... 	#define nro_menus3 NRO_CHT
.................... 	#if (prog_defasagem ==	true)
.................... 		#define nro_menus4 	8
.................... 	#else
.................... 		#define nro_menus4 	7
.................... 	#endif
.................... 	#define nro_menus5 	9
.................... 	#define nro_menus7	5
.................... 	#define nro_menu_bancos	8
.................... 	#define nro_menus11 2
.................... #elif (ST8500C == true)
.................... 	#define nro_menus 12
.................... 	#if (pci_mono == true)
.................... 		#define nro_menus1 23
.................... 	#else
.................... 		#if (com_rep == true)
.................... 			#define nro_menus1 16
.................... 		#endif
.................... 		#if (com_tc == true)
.................... 			#define nro_menus1 13
.................... 		#endif
.................... 	#endif
.................... 		#if (com_rep == true)
.................... 			#define nro_menus4 	17
.................... 		#else
.................... 			#define nro_menus4 	16
.................... 		#endif
.................... 	#define nro_menus2	NRO_CHT
.................... 	#define nro_menus5 	8
.................... 	#define nro_menus6 	5
.................... 	#define nro_menus7	4
.................... 	#define nro_menu_bancos	8
.................... 	#define nro_menus11 2
.................... 	
.................... #elif (st9400r == true)
.................... 	#define nro_menus	7
.................... 	#define nro_menus1	18 + com_time_funciona 
.................... 	#define nro_menus2	NRO_CHT
.................... 	#define nro_menus3	NRO_CHT
.................... 	#define nro_menus4	15
.................... 	#define nro_menus5 	9
.................... 	#define nro_menus6 	6
.................... 	#define nro_menus7	4
.................... 	
.................... #elif (st9430r == true)
.................... 	#define nro_menus	7
.................... 	#define nro_menus1	18 + com_time_funciona
.................... 	#define nro_menus2	NRO_CHT
.................... 	#define nro_menus3	NRO_CHT
.................... 	#define nro_menus4	15
.................... 	#define nro_menus5 	9
.................... 	#define nro_menus6 	6
.................... 
.................... #elif (st9200r == true)
.................... 	#define nro_menus	7
.................... 	#define nro_menus1	18 + com_time_funciona + (com_maximos * 2)
.................... 	#define nro_menus2	NRO_CHT
.................... 	#define nro_menus3	NRO_CHT
.................... 	#define nro_menus4	12
.................... 	#define nro_menus5	9
.................... 	#define nro_menus6	5
.................... 	#define nro_menus7	4
.................... 
.................... #elif (st9230r == true)
.................... 	#define nro_menus	7
.................... 	#define nro_menus1	19 + com_time_funciona  + (com_maximos * 2)
.................... 	#define nro_menus2	NRO_CHT
.................... 	#define nro_menus3	NRO_CHT
.................... 	#define nro_menus4	12
.................... 	#define nro_menus5	9
.................... 	#define nro_menus6 	5
.................... 	#define nro_menus7	4
.................... 
.................... #else
.................... 	#define nro_menus	6
.................... 	#define nro_menus1	19
.................... 	#define nro_menus2	NRO_CHT
.................... 	#define nro_menus3	NRO_CHT
.................... 	#if (funcao_505 == true)
.................... 		#define nro_menus4 17
.................... 	#else
.................... 		#define nro_menus4 16
.................... 	#endif
.................... 	#define nro_menus5	12
.................... 	#define nro_menus6	2
.................... 	#define nro_menus7	4
.................... #endif
.................... 
.................... #define PERIODO_PONTA		1
.................... #define PERIODO_FORA_PONTA	2
.................... 
.................... 
.................... /***************************************** Fim Definicao dos Menus **************************************/
.................... 
.................... #if (com_menu == true)
.................... 	// variaveis de controle dos menu
.................... 	char idioma;
.................... 	char time_out_exibe_status_teclando;				
.................... 	char time_out_inicializando;
.................... 	
.................... 	char passo_exibe_erro;
.................... 	char time_out_menus;
.................... 	#define VAL_TIME_OUT_MENUS		60;
.................... 	#define VAL_TIME_OUT_MENUS1		10;
.................... 	word teclas;
.................... //	word media_teclas;
.................... 	//char cont_teclas;
.................... 	//char ultima_tecla;
.................... 	char acelera_teclado;
.................... 	char menu1;
.................... 	char menu_aux;
.................... 	#if (com_cht== true)
.................... 		char qchtt;
.................... 		char qchtt_impar;
.................... 	#endif
.................... 	char time_tecla;
.................... 	char teclando_2;
.................... 	char teclando;
.................... 	char qmenu;
.................... 
.................... 	char aux_texto;
.................... 	char caracter_texto;
.................... 
.................... 	#if (disp_7seg == true)
.................... 		char ptr_buf;
.................... 		char ptr_rola;
.................... 		char ultima_mens;
.................... 		char ultimo_tipo;
.................... 	#endif
.................... 
.................... #endif
.................... 
.................... /* Definicao das memorias em uso na placa */
.................... #if (com_regs == true)
.................... // sobre ocorrencias
.................... 	#if (st8500c == true)
.................... 		#define limite_ocorrencias 250
.................... 	#else
.................... 		#define limite_ocorrencias 100
.................... 	#endif
.................... // sobre registros
.................... 	#if (funcao_505 == true)
.................... 		#define nro_modos	2
.................... 	#else
.................... 		#define nro_modos	1
.................... 	#endif
.................... // modo 0 ou 1
.................... 	#define TAM_REGS 	32
.................... 	#if ((st5030t == true) || (st9430r == true) || (st9230r == true))
.................... 		#if ((SST25VF080 == true) || (SST25LF080 == true))
.................... 			#define	nro_bancos 	4
.................... 		#else
.................... 			#define	nro_bancos  2
.................... 		#endif
.................... 	#elif (controlador == true)
.................... 		#if (st8500c == true)
.................... 			#define	nro_bancos  1
.................... 		#else
.................... 			#if ((SST25VF080 == true) || (SST25LF080 == true))
.................... 				#define	nro_bancos 	4
.................... 			#else
.................... 				#define	nro_bancos  2
.................... 			#endif
.................... 		#endif
.................... 	#else
.................... 		#if ((SST25VF080 == true) || (SST25LF080 == true))
.................... 			#define	nro_bancos 	16
.................... 		#else
.................... 			#define	nro_bancos  8
.................... 		#endif
.................... 	#endif
.................... 	
.................... 	#if (st8500c == true)
.................... 		#define nro_registros_por_banco		15000
.................... 		#define addr_inicio_coleta_regs		15000
.................... 		#define addr_inicio_coleta_ocor		100 + (addr_inicio_coleta_regs + nro_registros_por_banco)
.................... 		#define addr_inicio_coleta_cht		0
.................... 	#else
.................... 		#define nro_registros_por_banco		6176
.................... 		#define addr_inicio_coleta_regs		1000
.................... 		#define addr_inicio_coleta_ocor		7200
.................... 		#define addr_inicio_coleta_cht		8000 
.................... 	#endif
.................... 	#define	limite_registros (nro_registros_por_banco * nro_bancos)
.................... 	#define inicio_ocorrencias  (limite_registros * 32) + 4096
.................... 
.................... // modo 2
.................... 	#define TAM_REGS_MODO2 	32
.................... 	#if ((st5030t == true) || (st9430r == true) || (st9230r == true))
.................... 		#if ((SST25VF080 == true) || (SST25LF080 == true))
.................... 			#define	nro_bancos_modo2  	4
.................... 		#else
.................... 			#define	nro_bancos_modo2  	2
.................... 		#endif
.................... 	#elif (controlador == true)
.................... 		#if ((SST25VF080 == true) || (SST25LF080 == true))
.................... 			#define	nro_bancos_modo2 	4
.................... 		#else
.................... 			#define	nro_bancos_modo2  	2
.................... 		#endif
.................... 	#else
.................... 		#if ((SST25VF080 == true) || (SST25LF080 == true))
.................... 			#define	nro_bancos_modo2 	16
.................... 		#else
.................... 			#define	nro_bancos_modo2  	8
.................... 		#endif
.................... 	#endif
.................... 	#define nro_registros_por_banco2	6176
.................... 	#define	limite_registros_modo2 (nro_registros_por_banco2 * nro_bancos_modo2)
.................... 
.................... 	#define final_ocor_modo2	((limite_registros_modo2 * TAM_REGS_MODO2) + 4096 ) + (TAM_REGS * limite_ocorrencias)
.................... 
.................... // modo 3
.................... 	#define TAM_REGS_MODO3	16
.................... 	#if ((st5030t == true) || (st9430r == true) || (st9230r == true))
.................... 		#define nro_bancos_modo3	nro_bancos * 2
.................... 	#elif (controlador == true)
.................... 		#define nro_bancos_modo3	nro_bancos * 2
.................... 	#else
.................... 		#define nro_bancos_modo3	nro_bancos * 2
.................... 	#endif
.................... 
.................... 	#define	limite_registros_modo3 (nro_registros_por_banco * nro_bancos_modo3)
.................... 
.................... 	#if ((SST25VF080 == true) ||(SST25LF080 == true))
.................... 		#define BANCO_0 	0
.................... 		#define BANCO_1		1024 * 1024
.................... 		#define BANCO_2		2048 * 1024
.................... 		#define BANCO_3		3072 * 1024
.................... 	#else
.................... 		#define BANCO_0 	0
.................... 		#define BANCO_1		512 * 1024
.................... 		#define BANCO_2		1024 * 1024
.................... 		#define BANCO_3		1536 * 1024
.................... 	#endif
.................... 
.................... // sobre registros de chts
.................... 	#if (portatil == true)
.................... 		#define addr_inic_cht 	4096 + (limite_registros * TAM_REGS) + 4096 + (limite_ocorrencias * TAM_REGS) + 896	+4096		//2944
.................... 	#else
.................... 		#define addr_inic_cht 	(int32)(417792 + 4096) 
.................... 	#endif
.................... 	#define addr_inic_cht_modo3 	4096 + (limite_registros * TAM_REGS_MODO3) + 4096 + (limite_ocorrencias * TAM_REGS_MODO3) + 896 + 4096		//2944
.................... 	#if ((st94) || (st5x) || (st92))
.................... 		#define limite_chts		242
.................... 	#elif (controlador == true)
.................... 		#if (st8500c == true)
.................... 			#define limite_chts		0
.................... 		#else
.................... 			#define limite_chts		242
.................... 		#endif
.................... 	#else
.................... 		#define limite_chts		768
.................... 	#endif
.................... 
.................... 	char dia_old;
.................... 	char mes_old;
.................... 	char ano_old;
.................... 	char hora_old;
.................... 	char minuto_old;
.................... 	char segundo_old;
.................... 
.................... 
.................... // variaveis para definicao da autonomia de memoria.
.................... 	int16 nro_dias;
.................... 	char nro_horas;
.................... 	char nro_minutos;
.................... 	char nro_segundos;
.................... 
.................... 	int32 prox_grava;
.................... 	char codigo_old;
.................... 	char codigo_old_regs;
.................... 
.................... #else	
.................... 	#define	nro_bancos  0
.................... 	#define	limite_registros 0
.................... 	#define limite_ocorrencias 0
.................... 	#define nro_registros_por_banco		0
.................... 	#define limite_chts 0
.................... #endif
.................... 
.................... 
.................... #define TENSAO_FALTA 50 * 64
.................... 
.................... /* TABELA DE PARAMETROS DEFAULT */
.................... 
.................... #define sazi_old  false
.................... #if (portatil == 1)
.................... 	#if (se_com_flex == true)
.................... 		#define OFF_SET_FP_R	6
.................... 		#define OFF_SET_FP_S	6
.................... 		#define OFF_SET_FP_T	6
.................... 
.................... 		#define OFF_SET_TEN_R1	-19
.................... 		#define OFF_SET_TEN_S1	-1
.................... 		#define OFF_SET_TEN_T1	20
.................... 
.................... 		#define OFF_SET_TEN_R2	-19
.................... 		#define OFF_SET_TEN_S2	-1
.................... 		#define OFF_SET_TEN_T2	-20
.................... 
.................... 		#define OFF_SET_COR_R	0
.................... 		#define OFF_SET_COR_S	0
.................... 		#define OFF_SET_COR_T	0
.................... 		
.................... 		#define OFF_SET_COR_R_9001G1	0
.................... 		#define OFF_SET_COR_S_9001G1	0
.................... 		#define OFF_SET_COR_T_9001G1	0
.................... 		#define OFF_SET_COR_R_9001G2	0
.................... 		#define OFF_SET_COR_S_9001G2	0
.................... 		#define OFF_SET_COR_T_9001G2	0
.................... 		#define OFF_SET_COR_R_9002G1	0
.................... 		#define OFF_SET_COR_S_9002G1	0
.................... 		#define OFF_SET_COR_T_9002G1	0
.................... 		#define OFF_SET_COR_R_9003G1	0
.................... 		#define OFF_SET_COR_S_9003G1	0
.................... 		#define OFF_SET_COR_T_9003G1	0
.................... 		#define OFF_SET_COR_R_9004G1	0
.................... 		#define OFF_SET_COR_S_9004G1	0
.................... 		#define OFF_SET_COR_T_9004G1	0
.................... 		#define OFF_SET_COR_R_9005G1	0
.................... 		#define OFF_SET_COR_S_9005G1	0
.................... 		#define OFF_SET_COR_T_9005G1	0
.................... 		#define OFF_SET_COR_R_9005G2	0
.................... 		#define OFF_SET_COR_S_9005G2	0
.................... 		#define OFF_SET_COR_T_9005G2	0
.................... 		#define OFF_SET_COR_R_9005G3	0
.................... 		#define OFF_SET_COR_S_9005G3	0
.................... 		#define OFF_SET_COR_T_9005G3	0
.................... 		#define OFF_SET_COR_R_9005G4	0
.................... 		#define OFF_SET_COR_S_9005G4	0
.................... 		#define OFF_SET_COR_T_9005G4	0
.................... 		#define OFF_SET_COR_R_9005G5	0
.................... 		#define OFF_SET_COR_S_9005G5	0
.................... 		#define OFF_SET_COR_T_9005G5	0
.................... 		#define OFF_SET_COR_R_9006G1	0
.................... 		#define OFF_SET_COR_S_9006G1	0
.................... 		#define OFF_SET_COR_T_9006G1	0
.................... 		#define OFF_SET_COR_R_9006G2	0
.................... 		#define OFF_SET_COR_S_9006G2	0
.................... 		#define OFF_SET_COR_T_9006G2	0
.................... 		#define OFF_SET_COR_R_9006G3	0
.................... 		#define OFF_SET_COR_S_9006G3	0
.................... 		#define OFF_SET_COR_T_9006G3	0
.................... 		#define OFF_SET_COR_R_9006G4	0
.................... 		#define OFF_SET_COR_S_9006G4	0
.................... 		#define OFF_SET_COR_T_9006G4	0
.................... 		#define OFF_SET_COR_R_9006G5	0
.................... 		#define OFF_SET_COR_S_9006G5	0
.................... 		#define OFF_SET_COR_T_9006G5	0
.................... 		#define OFF_SET_COR_R_9007G1	0
.................... 		#define OFF_SET_COR_S_9007G1	0
.................... 		#define OFF_SET_COR_T_9007G1	0
.................... 		#define OFF_SET_COR_R_9007G2	0
.................... 		#define OFF_SET_COR_S_9007G2	0
.................... 		#define OFF_SET_COR_T_9007G2	0
.................... 		#define OFF_SET_COR_R_9008G1	0
.................... 		#define OFF_SET_COR_S_9008G1	0
.................... 		#define OFF_SET_COR_T_9008G1	0
.................... 		#define OFF_SET_COR_R_9009G1	0
.................... 		#define OFF_SET_COR_S_9009G1	0
.................... 		#define OFF_SET_COR_T_9009G1	0
.................... 		#define OFF_SET_COR_R_9009G2	0
.................... 		#define OFF_SET_COR_S_9009G2	0
.................... 		#define OFF_SET_COR_T_9009G2	0
.................... 
.................... 		#define LIMITE_TEN_INF	-100
.................... 		#define LIMITE_TEN_SUP	100
.................... 		#define LIMITE_COR_INF	-100
.................... 		#define LIMITE_COR_SUP	100
.................... 		#define LIMITE_POT_INF	-120
.................... 		#define LIMITE_POT_SUP  120
.................... 	#else
.................... 		#if (SAZI_old == true)
.................... 			#define OFF_SET_FP_R	6
.................... 			#define OFF_SET_FP_S	6
.................... 			#define OFF_SET_FP_T	6
.................... 		
.................... 			#define OFF_SET_COR_R_20	46
.................... 			#define OFF_SET_COR_S_20	0
.................... 			#define OFF_SET_COR_T_20	0
.................... 			#define OFF_SET_COR_R_200	93
.................... 			#define OFF_SET_COR_S_200	105
.................... 			#define OFF_SET_COR_T_200	77
.................... 			#define OFF_SET_COR_R_300	0
.................... 			#define OFF_SET_COR_S_300	0
.................... 			#define OFF_SET_COR_T_300	0
.................... 			#define OFF_SET_COR_R_600	0
.................... 			#define OFF_SET_COR_S_600	0
.................... 			#define OFF_SET_COR_T_600	0
.................... 			#define OFF_SET_COR_R_1000	100
.................... 			#define OFF_SET_COR_S_1000	122
.................... 			#define OFF_SET_COR_T_1000	128
.................... 			#define OFF_SET_COR_R_1500	0
.................... 			#define OFF_SET_COR_S_1500	0
.................... 			#define OFF_SET_COR_T_1500	0
.................... 			#define OFF_SET_COR_R_2000	0
.................... 			#define OFF_SET_COR_S_2000	0
.................... 			#define OFF_SET_COR_T_2000	0	
.................... 			#define OFF_SET_COR_R_3000	0
.................... 			#define OFF_SET_COR_S_3000	0
.................... 			#define OFF_SET_COR_T_3000	0
.................... 			#define OFF_SET_COR_R_6000	0
.................... 			#define OFF_SET_COR_S_6000	0
.................... 			#define OFF_SET_COR_T_6000	0
.................... 			
.................... 			#define OFF_SET_TEN_R1	-19
.................... 			#define OFF_SET_TEN_S1	-1
.................... 			#define OFF_SET_TEN_T1	20
.................... 			
.................... 			#define OFF_SET_TEN_R2	-19
.................... 			#define OFF_SET_TEN_S2	-1
.................... 			#define OFF_SET_TEN_T2	-20
.................... 			
.................... 			#define LIMITE_TEN_INF	-50
.................... 			#define LIMITE_TEN_SUP	50
.................... 			#define LIMITE_COR_INF	-100
.................... 			#define LIMITE_COR_SUP	100
.................... 			#define LIMITE_POT_INF	-102
.................... 			#define LIMITE_POT_SUP  102
.................... 		
.................... 		#else
.................... 	
.................... 			#define OFF_SET_FP_R	7
.................... 			#define OFF_SET_FP_S	7
.................... 			#define OFF_SET_FP_T	7
.................... 	
.................... 			#define OFF_SET_COR_R	0
.................... 			#define OFF_SET_COR_S	0
.................... 			#define OFF_SET_COR_T	0
.................... 		
.................... 			#define OFF_SET_COR_R_20	0
.................... 			#define OFF_SET_COR_S_20	0
.................... 			#define OFF_SET_COR_T_20	0
.................... 			#define OFF_SET_COR_R_200	0
.................... 			#define OFF_SET_COR_S_200	0
.................... 			#define OFF_SET_COR_T_200	0
.................... 			#define OFF_SET_COR_R_300	0
.................... 			#define OFF_SET_COR_S_300	0
.................... 			#define OFF_SET_COR_T_300	0
.................... 			#define OFF_SET_COR_R_600	0
.................... 			#define OFF_SET_COR_S_600	0
.................... 			#define OFF_SET_COR_T_600	0
.................... 			#define OFF_SET_COR_R_1000	0
.................... 			#define OFF_SET_COR_S_1000	0
.................... 			#define OFF_SET_COR_T_1000	0
.................... 			#define OFF_SET_COR_R_1500	0
.................... 			#define OFF_SET_COR_S_1500	0
.................... 			#define OFF_SET_COR_T_1500	0
.................... 			#define OFF_SET_COR_R_2000	0
.................... 			#define OFF_SET_COR_S_2000	0
.................... 			#define OFF_SET_COR_T_2000	0	
.................... 			#define OFF_SET_COR_R_3000	0
.................... 			#define OFF_SET_COR_S_3000	0
.................... 			#define OFF_SET_COR_T_3000	0
.................... 			#define OFF_SET_COR_R_6000	0
.................... 			#define OFF_SET_COR_S_6000	0
.................... 			#define OFF_SET_COR_T_6000	0
.................... 	
.................... 			#define OFF_SET_POT_R_20	0
.................... 			#define OFF_SET_POT_S_20	0
.................... 			#define OFF_SET_POT_T_20	0
.................... 			#define OFF_SET_POT_R_200	0
.................... 			#define OFF_SET_POT_S_200	0
.................... 			#define OFF_SET_POT_T_200	0
.................... 			#define OFF_SET_POT_R_300	0
.................... 			#define OFF_SET_POT_S_300	0
.................... 			#define OFF_SET_POT_T_300	0
.................... 			#define OFF_SET_POT_R_600	0
.................... 			#define OFF_SET_POT_S_600	0
.................... 			#define OFF_SET_POT_T_600	0
.................... 			#define OFF_SET_POT_R_1000	0
.................... 			#define OFF_SET_POT_S_1000	0
.................... 			#define OFF_SET_POT_T_1000	0
.................... 			#define OFF_SET_POT_R_1500	0
.................... 			#define OFF_SET_POT_S_1500	0
.................... 			#define OFF_SET_POT_T_1500	0
.................... 			#define OFF_SET_POT_R_2000	0
.................... 			#define OFF_SET_POT_S_2000	0
.................... 			#define OFF_SET_POT_T_2000	0	
.................... 			#define OFF_SET_POT_R_3000	0
.................... 			#define OFF_SET_POT_S_3000	0
.................... 			#define OFF_SET_POT_T_3000	0
.................... 			#define OFF_SET_POT_R_6000	0
.................... 			#define OFF_SET_POT_S_6000	0
.................... 			#define OFF_SET_POT_T_6000	0
.................... 	
.................... 			#define OFF_SET_TEN_R1	66
.................... 			#define OFF_SET_TEN_S1	59
.................... 			#define OFF_SET_TEN_T1	77
.................... 		
.................... 			#define OFF_SET_TEN_R2	66
.................... 			#define OFF_SET_TEN_S2	59
.................... 			#define OFF_SET_TEN_T2	77
.................... 		
.................... 			#define LIMITE_TEN_INF	-100	//-60
.................... 			#define LIMITE_TEN_SUP	100		//60
.................... 			#define LIMITE_COR_INF	-100	//-150
.................... 			#define LIMITE_COR_SUP	100	//150
.................... 			#define LIMITE_POT_INF	-100
.................... 			#define LIMITE_POT_SUP  100
.................... 		#endif
.................... 	#endif
.................... 
.................... 	#define OFF_SET_POT_R   0
.................... 	#define OFF_SET_POT_S   0
.................... 	#define OFF_SET_POT_T   0
.................... 
.................... #else
.................... 	#if (chip_cs5460a == true)
.................... 		#define OFF_SET_FP_R	0
.................... 		#define OFF_SET_FP_S	0
.................... 		#define OFF_SET_FP_T	0
.................... 	
.................... 		#define OFF_SET_COR_R	0
.................... 		#define OFF_SET_COR_S	0
.................... 		#define OFF_SET_COR_T	0
.................... 		
.................... 		#define OFF_SET_TEN_R1	0
.................... 		#define OFF_SET_TEN_S1	0
.................... 		#define OFF_SET_TEN_T1	0
.................... 		
.................... 		#define OFF_SET_TEN_R2	0
.................... 		#define OFF_SET_TEN_S2	0
.................... 		#define OFF_SET_TEN_T2	0
.................... 	
.................... 		#define LIMITE_TEN_INF	-100
.................... 		#define LIMITE_TEN_SUP	100
.................... 		#define LIMITE_COR_INF	-100
.................... 		#define LIMITE_COR_SUP	100
.................... 		#define LIMITE_POT_INF	-100
.................... 		#define LIMITE_POT_SUP  100
.................... 	
.................... 		#define OFF_SET_POT_R   (OFF_SET_COR_R + OFF_SET_TEN_R1)
.................... 		#define OFF_SET_POT_S   (OFF_SET_COR_S + OFF_SET_TEN_S1)
.................... 		#define OFF_SET_POT_T   (OFF_SET_COR_T + OFF_SET_TEN_T1)
.................... 
.................... 	#elif (ade7754 == true)
.................... 		#define OFF_SET_FP_R	2
.................... 		#define OFF_SET_FP_S	2
.................... 		#define OFF_SET_FP_T	2
.................... 	
.................... 		#define OFF_SET_COR_R	6
.................... 		#define OFF_SET_COR_S	8
.................... 		#define OFF_SET_COR_T	7
.................... 		
.................... 		#define OFF_SET_TEN_R1	-86
.................... 		#define OFF_SET_TEN_S1	-96
.................... 		#define OFF_SET_TEN_T1	-86
.................... 		
.................... 		#define OFF_SET_TEN_R2	-86
.................... 		#define OFF_SET_TEN_S2	-96
.................... 		#define OFF_SET_TEN_T2	-86
.................... 	
.................... 		#define LIMITE_TEN_INF	-100
.................... 		#define LIMITE_TEN_SUP	100
.................... 		#define LIMITE_COR_INF	-100
.................... 		#define LIMITE_COR_SUP	100
.................... 		#define LIMITE_POT_INF	-100
.................... 		#define LIMITE_POT_SUP  100
.................... 	
.................... 		#define OFF_SET_POT_R   (OFF_SET_COR_R + OFF_SET_TEN_R1)
.................... 		#define OFF_SET_POT_S   (OFF_SET_COR_S + OFF_SET_TEN_S1)
.................... 		#define OFF_SET_POT_T   (OFF_SET_COR_T + OFF_SET_TEN_T1)
.................... 
.................... 	#elif (controlador == true)
.................... 		#define NRO_MODOS_TRAFO_ALTA	1
.................... 		#if (monofasico == true)
.................... 			#define OFF_SET_FP_R	0
.................... 			#define OFF_SET_FP_S	16
.................... 			#define OFF_SET_FP_T	0
.................... 		
.................... 			#define OFF_SET_COR_R	0
.................... 			#define OFF_SET_COR_S	0
.................... 			#define OFF_SET_COR_T	0
.................... 			
.................... 			#define OFF_SET_TEN_R1	0
.................... 			#define OFF_SET_TEN_S1	0
.................... 			#define OFF_SET_TEN_T1	0
.................... 			
.................... 			#define OFF_SET_TEN_R2	0
.................... 			#define OFF_SET_TEN_S2	0
.................... 			#define OFF_SET_TEN_T2	0
.................... 		
.................... 			#define LIMITE_TEN_INF	-80
.................... 			#define LIMITE_TEN_SUP	80
.................... 			#define LIMITE_COR_INF	-80
.................... 			#define LIMITE_COR_SUP	80
.................... 			#define LIMITE_POT_INF	-80
.................... 			#define LIMITE_POT_SUP  80
.................... 		
.................... 			#define OFF_SET_POT_R   0
.................... 			#define OFF_SET_POT_S   0
.................... 			#define OFF_SET_POT_T   0
.................... 		#else
.................... 			#define OFF_SET_FP_R	0
.................... 			#define OFF_SET_FP_S	16
.................... 			#define OFF_SET_FP_T	0
.................... 		
.................... 			#define OFF_SET_COR_R	10
.................... 			#define OFF_SET_COR_S	10
.................... 			#define OFF_SET_COR_T	10
.................... 			
.................... 			#define OFF_SET_TEN_R1	10
.................... 			#define OFF_SET_TEN_S1	10
.................... 			#define OFF_SET_TEN_T1	10
.................... 			
.................... 			#define OFF_SET_TEN_R2	10
.................... 			#define OFF_SET_TEN_S2	10
.................... 			#define OFF_SET_TEN_T2	10
.................... 		
.................... 			#define LIMITE_TEN_INF	-120
.................... 			#define LIMITE_TEN_SUP	120
.................... 			#define LIMITE_COR_INF	-120
.................... 			#define LIMITE_COR_SUP	120
.................... 			#define LIMITE_POT_INF	-120
.................... 			#define LIMITE_POT_SUP  120
.................... 		
.................... 			#define OFF_SET_POT_R   0
.................... 			#define OFF_SET_POT_S   0
.................... 			#define OFF_SET_POT_T   0
.................... 		#endif
.................... 
.................... 	#elif (st5x == true)
.................... 		#define OFF_SET_FP_R	0
.................... 		#define OFF_SET_FP_S	0
.................... 		#define OFF_SET_FP_T	0
.................... 		
.................... 		#if (padrao_referencia == true)
.................... 			#define OFF_SET_COR_R	-32
.................... 			#define OFF_SET_COR_S	-29
.................... 			#define OFF_SET_COR_T	-31
.................... 						
.................... 			#define OFF_SET_TEN_R1	40
.................... 			#define OFF_SET_TEN_S1	30
.................... 			#define OFF_SET_TEN_T1	40
.................... 			
.................... 			#define OFF_SET_TEN_R2	40
.................... 			#define OFF_SET_TEN_S2	30
.................... 			#define OFF_SET_TEN_T2	40
.................... 
.................... 			#define OFF_SET_POT_R   4
.................... 			#define OFF_SET_POT_S   0
.................... 			#define OFF_SET_POT_T   0
.................... 		
.................... 			#define LIMITE_COR_INF	-33
.................... 			#define LIMITE_COR_SUP	-28
.................... 
.................... 			#define LIMITE_TEN_INF	29
.................... 			#define LIMITE_TEN_SUP	41
.................... 
.................... 			#define LIMITE_POT_INF	-1
.................... 			#define LIMITE_POT_SUP  5
.................... 		#else
.................... 			#define OFF_SET_COR_R	0
.................... 			#define OFF_SET_COR_S	0
.................... 			#define OFF_SET_COR_T	0
.................... 			
.................... 			#define OFF_SET_TEN_R1	0
.................... 			#define OFF_SET_TEN_S1	0
.................... 			#define OFF_SET_TEN_T1	0
.................... 			
.................... 			#define OFF_SET_TEN_R2	0
.................... 			#define OFF_SET_TEN_S2	0
.................... 			#define OFF_SET_TEN_T2	0
.................... 
.................... 			#define OFF_SET_POT_R   0
.................... 			#define OFF_SET_POT_S   0
.................... 			#define OFF_SET_POT_T   0
.................... 		
.................... 			#define LIMITE_TEN_INF	-100
.................... 			#define LIMITE_TEN_SUP	100
.................... 			#define LIMITE_COR_INF	-100
.................... 			#define LIMITE_COR_SUP	100
.................... 			#define LIMITE_POT_INF	-100
.................... 			#define LIMITE_POT_SUP  100
.................... 		#endif
.................... 	
.................... 
.................... 	#elif (st94 == true)
.................... 		#define OFF_SET_FP_R	0
.................... 		#define OFF_SET_FP_S	0
.................... 		#define OFF_SET_FP_T	0
.................... 	
.................... 		#define OFF_SET_COR_R	76
.................... 		#define OFF_SET_COR_S	75
.................... 		#define OFF_SET_COR_T	75
.................... 		
.................... 		#define OFF_SET_TEN_R1	29
.................... 		#define OFF_SET_TEN_S1	27
.................... 		#define OFF_SET_TEN_T1	28
.................... 		
.................... 		#define OFF_SET_TEN_R2	29
.................... 		#define OFF_SET_TEN_S2	27
.................... 		#define OFF_SET_TEN_T2	28
.................... 	
.................... 		#define LIMITE_TEN_INF	-125
.................... 		#define LIMITE_TEN_SUP	125
.................... 		#define LIMITE_COR_INF	-125
.................... 		#define LIMITE_COR_SUP	125
.................... 		#define LIMITE_POT_INF	-125
.................... 		#define LIMITE_POT_SUP  125
.................... 	
.................... 		#define OFF_SET_POT_R   0
.................... 		#define OFF_SET_POT_S   0
.................... 		#define OFF_SET_POT_T   0
.................... 
.................... 	#elif (st92 == true)
.................... 		#define OFF_SET_FP_R	0
.................... 		#define OFF_SET_FP_S	0
.................... 		#define OFF_SET_FP_T	0
.................... 	
.................... 		#define OFF_SET_COR_R	76
.................... 		#define OFF_SET_COR_S	75
.................... 		#define OFF_SET_COR_T	75
.................... 		
.................... 		#define OFF_SET_TEN_R1	29
.................... 		#define OFF_SET_TEN_S1	27
.................... 		#define OFF_SET_TEN_T1	28
.................... 		
.................... 		#define OFF_SET_TEN_R2	29
.................... 		#define OFF_SET_TEN_S2	27
.................... 		#define OFF_SET_TEN_T2	28
.................... 	
.................... 		#define LIMITE_TEN_INF	-125
.................... 		#define LIMITE_TEN_SUP	125
.................... 		#define LIMITE_COR_INF	-125
.................... 		#define LIMITE_COR_SUP	125
.................... 		#define LIMITE_POT_INF	-125
.................... 		#define LIMITE_POT_SUP  125
.................... 	
.................... 		#define OFF_SET_POT_R   0
.................... 		#define OFF_SET_POT_S   0
.................... 		#define OFF_SET_POT_T   0
.................... 
.................... 	#else
.................... 		#define OFF_SET_FP_R	0
.................... 		#define OFF_SET_FP_S	0
.................... 		#define OFF_SET_FP_T	0
.................... 	
.................... 		#define OFF_SET_COR_R	76
.................... 		#define OFF_SET_COR_S	75
.................... 		#define OFF_SET_COR_T	75
.................... 		
.................... 		#define OFF_SET_TEN_R1	29
.................... 		#define OFF_SET_TEN_S1	27
.................... 		#define OFF_SET_TEN_T1	28
.................... 		
.................... 		#define OFF_SET_TEN_R2	29
.................... 		#define OFF_SET_TEN_S2	27
.................... 		#define OFF_SET_TEN_T2	28
.................... 	
.................... 		#define LIMITE_TEN_INF	-100
.................... 		#define LIMITE_TEN_SUP	100
.................... 		#define LIMITE_COR_INF	-100
.................... 		#define LIMITE_COR_SUP	100
.................... 		#define LIMITE_POT_INF	-100
.................... 		#define LIMITE_POT_SUP  100
.................... 	
.................... 		#define OFF_SET_POT_R   0
.................... 		#define OFF_SET_POT_S   0
.................... 		#define OFF_SET_POT_T   0
.................... 	#endif
.................... 	
.................... #endif
.................... 
.................... 
.................... #if (disp_7seg == true)
.................... 	char ptr_disp;
.................... 	char disp_timer;
.................... #endif
.................... 
.................... char bloqueio_gravacao;
.................... // definicao de variaveis com endereÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿços fixos
.................... char PRODH;
.................... char PRODL;
.................... char RES0;
.................... char RES1;
.................... char RES2;
.................... char RES3;
.................... char WREG;
.................... int32 res_32b;
.................... 
.................... #LOCATE PRODH = 0XFF4
.................... #LOCATE PRODL = 0XFF3
.................... 
.................... #LOCATE WREG = 0XFE8
.................... 
.................... #locate RES3 = 0X940
.................... #locate RES2 = 0X941
.................... #locate RES1 = 0X942
.................... #locate RES0 = 0X943
.................... 
.................... #locate res_32b = 0x944
.................... 
.................... 
.................... 
.................... #if (com_cht== true)
.................... 	// definicao de variaveis de controle do calculo de cht
.................... 	float AP;
.................... 	float AP1;
.................... 	float zx;		// float
.................... 	float AN1;		// float
.................... 	float AN2;		// float
.................... 	float BN1;		// float
.................... 	float BN2;		// float
.................... 	float A1;		// float
.................... 	float A2;		// float
.................... 	float S_AN2;		// float
.................... 	float S_BN2;		// float
.................... 	float SAP;		// float
.................... 	int16 CHT;
.................... 	char qcht;
.................... 	char passo_cht;
.................... 	char passo_qcht;
.................... 	char passo_rd_cht;
.................... 	char passo_fase_cht;
.................... 	float  AMPLITUDE[NRO_AMOSTRAS_CHT+2];
.................... 	#if (chip_cs5460a == true)
.................... 		unsigned word buffer_t[NRO_AMOSTRAS_CHT+2];
.................... 		unsigned word buffer_c[NRO_AMOSTRAS_CHT+2];
.................... //	unsigned word buffer_p[NRO_AMOSTRAS_CHT+2];
.................... 		word buffer_cht_t[NRO_AMOSTRAS_CHT+2];
.................... 		word buffer_cht_c[NRO_AMOSTRAS_CHT+2];
.................... 	#else
.................... 		word buffer_cht[NRO_AMOSTRAS_CHT+1];
.................... 	#endif
.................... 	word CHT_tr[NRO_CHT+2];
.................... 	word CHT_cr[NRO_CHT+2];
.................... 	#if (monofasico == false)
.................... 		word CHT_ts[NRO_CHT+2];
.................... 		word CHT_cs[NRO_CHT+2];
.................... 		word CHT_tt[NRO_CHT+2];
.................... 		word CHT_ct[NRO_CHT+2];
.................... 	#endif
.................... 	#if (debug_cht == true)
.................... 		float AN11;
.................... 		float BN11;
.................... 		float AN22;
.................... 		float BN22;
.................... 		float APP;
.................... 	#endif
.................... #endif
.................... 
.................... 
.................... char buf_nro[4];
.................... 
.................... #if (CONTROLADOR == true) || (st_prog == true)
.................... 	char que_banco_repouso;
.................... 	char banco_inicial;
.................... 	char banco_final;
.................... 	char tempo_falta_energia;
.................... 	char status_banco_minimo;
.................... 	char comuni_busy;
.................... 
.................... 	char com_des_ten_a;
.................... 	char com_des_ten_b;
.................... 	char com_des_chtt;
.................... 	char com_des_chtc;
.................... 	char com_des_fp_ind_cap;
.................... 
.................... 	#if (controle_por_fase == true)
.................... 		char ifase;
.................... 		word total_acionado[3];
.................... 		float kvar_disponivel[3];
.................... 	#else
.................... 		word total_acionado;
.................... 		float kvar_disponivel;
.................... 	#endif
.................... 	#if (st8500c == true)
.................... 		char min_kw;
.................... 		word max_kw;
.................... 	#else
.................... 		char min_kvar;
.................... 		char max_kvar;
.................... 	#endif
.................... 	char sequencia;
.................... 
.................... 	char aux_tempo_aciona;
.................... 	char ultimo_tempo_aciona;
.................... 
.................... 	char tempo_aciona;
.................... 	char tempo_desaciona;
.................... 	#if (st8500c == true)
.................... 		char modo_saidas;
.................... 			#define MODO_INVERTIDO	false
.................... 			#define MODO_NORMAL		true
.................... 		char nro_cargas;
.................... 		word carga_instalada;
.................... 		word menor_carga;
.................... 	#else
.................... 		char nro_bancos_capacitor;
.................... 		char aux_nro_bancos_capacitor;
.................... 	#endif
.................... 	char output_01;
.................... 
.................... 	float kvar_req;
.................... 	float kvar_req_anterior;
.................... 	float kvar_exec;
.................... 
.................... 	char fase_cht;
.................... 	char aux_tab;
.................... 	char aux_tab2;
.................... 	char tab_manut;
.................... 	char ultima_tecla;
.................... 	#if (st8500c == true)
.................... //		char maior_carga;
.................... //		char menor_carga;
.................... //		char proximo_carga;
.................... 	#else
.................... 		char maior_banco;
.................... 		char menor_banco;
.................... 		char proximo_banco;
.................... 	#endif
.................... 
.................... 	
.................... 	#if (st8500C == true)
.................... 		#define CONTROLE_FILO			0
.................... 		#define CONTROLE_FILA_CIRCULAR	1
.................... 		
.................... 		char tipo_controle_demanda;
.................... 		char ptr_aciona;
.................... 		char ptr_desaciona;
.................... 		word horimetro[NRO_MAXIMO_CARGAS];
.................... 		char minuteiro[NRO_MAXIMO_CARGAS];
.................... 		char segundeiro[NRO_MAXIMO_CARGAS];
.................... 		word acionamentos[NRO_MAXIMO_CARGAS];
.................... 		char tempo_repouso[NRO_MAXIMO_CARGAS];
.................... 		char aux_tempo_repouso[NRO_MAXIMO_CARGAS];
.................... 		char carga[NRO_MAXIMO_CARGAS];
.................... 		char carga_acionada[NRO_MAXIMO_CARGAS];
.................... 		char carga_disponivel[NRO_MAXIMO_CARGAS];
.................... 		char tabela_valor_cargas[NRO_MAXIMO_CARGAS+1];
.................... 		char tabela_tempo_repouso[NRO_MAXIMO_CARGAS+1];
.................... 		char forma_controle[NRO_MAXIMO_CARGAS+1];				// tabela definição se carga controlável ou por horário
.................... 		char hora_liga_controle[NRO_MAXIMO_CARGAS+1];			// tabela de horarios de funcionamento
.................... 		char minuto_liga_controle[NRO_MAXIMO_CARGAS+1];			// tabela de horarios de funcionamento
.................... 		char hora_desliga_controle[NRO_MAXIMO_CARGAS+1];			// tabela de horarios de funcionamento
.................... 		char minuto_desliga_controle[NRO_MAXIMO_CARGAS+1];			// tabela de horarios de funcionamento
.................... 		int cont_tempo_rep_15;
.................... 		int cont_tempo_rep_30;
.................... 	#else
.................... 		word horimetro[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		char minuteiro[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		char segundeiro[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		word acionamentos[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		char tempo_repouso[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		char aux_tempo_repouso[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		char banco_capacitor[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		char banco_acionado[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		char banco_disponivel[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 		char tabela_valor_bancos[NRO_MAXIMO_BANCOS_CAPACITOR+1];
.................... 		char tabela_tempo_repouso[NRO_MAXIMO_BANCOS_CAPACITOR+1];
.................... 	#endif
.................... 
.................... 	char buf_display[13];
.................... 	char que_ocor[nro_ocorrencia];
.................... 	char tabela_pisca[6];
.................... 
.................... 	word tabela_programa[18];
.................... 
.................... 
.................... 	#define TUDO_IGUAL			0
.................... 	#define NRO_ACIONA_DIF		1
.................... 	#define NRO_HORAS_DIF		2
.................... 	#define NRO_MIN_DIF			3
.................... 	
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #if (st_prog == true)
.................... 	#define TAM_RX2	16
.................... 	#define TAM_TX2	250
.................... 
.................... 	float carga_at[16];
.................... 	float carga_reat[16];
.................... 	float var_fp[16];
.................... 	
.................... 	char tarifa[3];     
.................... 	word carga_total_at;
.................... 	word carga_total_reat;
.................... 	float somaf_at, somaf_reat;
.................... 	char low_nro_segundos;
.................... 	char high_nro_segundos;
.................... 	float degrau1;
.................... 	signed word fator_pot_rep;
.................... 	
.................... 	short indicador_fatura;			//Indicador de fatura. Complementado a cada reposição de demanda.
.................... 	short indicador_reativo;		//Indicador de Intervalo Reativo - Complementado a cada final de intervalo reativo
.................... 	short pulsos_cap_considerado;	//Se = 1, indica pulsos capacitivos computados para UFER e DMCR.
.................... 	short pulsos_ind_considerado;	//Se = 1, indica pulsos indutivos computados para UFER e DMCR.
.................... 	short tipo_REP;					//0 = Padrão; 1 = Estendido
.................... 	char segmento_horo_sazonal;		//0001 = Ponta; 0010 = Fora da Ponta; 1000 = Reservado
.................... 	char tipo_de_tarifa;			//00 = Azul; 01 = Verde; 10 = Irrigantes; 11 = Outras
.................... 	short tarifar_reativos;			//Se = 1, tarifa de reativos ativada.
.................... 	char reposicao_de_demanda;
.................... 	word quantidade_kW;				//Valor a ser transmitido de Potência Ativa
.................... 	word quantidade_kVAr;			//Valor a ser transmitido de Potência Reativa
.................... 	word pulso_ati;					//Quantidade de pulsos de energia ativa (kW).
.................... 	word pulso_reat;				//Quantidade de pulsos de energia reativa (kVAr).
.................... 	word time_integra;				//Intervalo de Integração. Contador regressivo de 899 a 0 (15 minutos).
.................... 	word intervalo;					//Período pré-definido: 300; 600; 900;
.................... 	
.................... 		
.................... //	char banco_acionado[NRO_MAXIMO_BANCOS_CAPACITOR];
.................... 	
.................... 	char ptrtx2;
.................... 	char ptrrx2;
.................... 	char retrx2;
.................... 	char numbrx2;
.................... 	char numbtx2;
.................... 	char time_out_modbus2;
.................... 	char time_out_sultech;
.................... 
.................... 
.................... 	word equipamento;
.................... 	char serie;
.................... 	char passo_comuni_sultech;
.................... 	
.................... 	word programas[64];
.................... 	word medicoes[20];
.................... 	word forma_onda_tensao[169];
.................... 	word forma_onda_corrente[169];
.................... 	char buf_rx2[TAM_RX2];
.................... 	char buf_tx2[TAM_TX2];
.................... 	char nro_serie[6];
.................... 
.................... #endif
.................... 
.................... 
.................... //word conta_kw_r;
.................... //word nro_kw_r;
.................... 
.................... #if (st5x == true)
.................... 	char status_led;
.................... 	char nro_pisca_led;
.................... 	char status_flags;
.................... 	char time_led;
.................... 	#if (st5000c_rev12 == true)
.................... 		char dip_addr;
.................... 	#else
.................... 		#if (painel_12 == true)
.................... 			char dip_addr;
.................... 		#else
.................... 			int16 dip_addr;
.................... 		#endif
.................... 	#endif
.................... 	int16 dip_vel;
.................... //	int16 val_addr;
.................... //	char media_addr;
.................... 	int16 soma_addr;
.................... #endif
.................... 
.................... #if (com_relogio == true)
.................... //	char tempo_ajuste_relogio;
.................... //	int32 conta_seg;
.................... //	char ajuste_relogio;
.................... #endif
.................... 
.................... char conta_sinal_r;
.................... signed int16 fase_tmp;
.................... int16 fase_tmp1;
.................... 
.................... 
.................... // VARIAVEIS DA FASE R
.................... #if (sames_9904 == true)
.................... 	int32 KW_R_SAMES;
.................... 	int32 KW_S_SAMES;
.................... 	int32 KW_T_SAMES;
.................... 	int32 KVAR_R_SAMES;
.................... 	int32 KVAR_S_SAMES;
.................... 	int32 KVAR_T_SAMES;
.................... 	int32 VR_SAMES;
.................... 	int32 VS_SAMES;
.................... 	int32 VT_SAMES;
.................... 	int32 HZ_SAMES;
.................... 	int32 KW_R_SAMES_OLD;
.................... 	int32 KW_S_SAMES_OLD;
.................... 	int32 KW_T_SAMES_OLD;
.................... 	int32 KVAR_R_SAMES_OLD;
.................... 	int32 KVAR_S_SAMES_OLD;
.................... 	int32 KVAR_T_SAMES_OLD;
.................... 	int32 KVA_R_SAMES;
.................... 	int32 KVA_S_SAMES;
.................... 	int32 KVA_T_SAMES;
.................... 	int32 KW_R;
.................... 	int32 KW_S;
.................... 	int32 KW_T;
.................... 	int32 KVAR_R;
.................... 	int32 KVAR_S;
.................... 	int32 KVAR_T;
.................... 
.................... 	int32 soma_kw_r;
.................... 	int32 soma_kw_s;
.................... 	int32 soma_kw_t;
.................... 	int32 soma_kvar_r;
.................... 	int32 soma_kvar_s;
.................... 	int32 soma_kvar_t;
.................... 	signed long int sinal_r;
.................... 	int32 soma_reg_tr;
.................... 	int32 soma_reg_cr;
.................... 	int32 soma_efi_tr;
.................... 	int32 soma_efi_cr;
.................... 	int32 soma_ten_r;
.................... 	int32 soma_cor_r;
.................... 	int32 soma_cr;
.................... 	int32 soma_tr;
.................... 	signed int32 soma_pr;
.................... 	signed int32 soma_efi_p_tmp;
.................... 	signed int32 soma_efi_pr;
.................... 	signed int32 soma_pot_efi_r;
.................... 	
.................... #else
.................... 	int32 soma_pot_r;
.................... 	signed long int sinal_r;
.................... 	int32 soma_reg_tr;
.................... 	int32 soma_reg_cr;
.................... 	int32 soma_efi_tr;
.................... 	int32 soma_efi_cr;
.................... 	int32 soma_ten_r;
.................... 	int32 soma_cor_r;
.................... 	#if (chip_cs5460a == true)
.................... 		int32 soma_efi_pr;
.................... 	#else
.................... 		int32 soma_cr;
.................... 		int32 soma_tr;
.................... 		signed int32 soma_pr;
.................... 		signed int32 soma_efi_pr;
.................... 		signed int32 soma_pot_efi_r;
.................... 		signed int32 soma_kvar_r;
.................... 		signed int32 soma_efi_kvar_r;
.................... 		signed int32 soma_pot_kvar_r;
.................... 	#endif
.................... 	signed int32 soma_efi_p_tmp;
.................... #endif
.................... // variaveis eletricas 
.................... 
.................... int32 pot_ativa_tot;
.................... int32 pot_reativa_tot;
.................... int32 pot_aparente_tot;
.................... 
.................... 
.................... char frequencia;
.................... int nro_media_freq;
.................... word tensao_r;
.................... word corrente_r;
.................... word cor_maxima_r;
.................... word pot_ativa_max_r;
.................... word pot_ativa_r;
.................... word pot_aparente_r;
.................... word pot_reativa_r;
.................... word pot_reativa_r_ant;
.................... int cont_decide_rep;
.................... int cont_falta_cap;
.................... signed word fator_pot_r;
.................... word dem_media_ativa;
.................... word dem_media_aparente;
.................... word dem_media_reativa;
.................... word dem_maxima_ativa;
.................... word dem_maxima_aparente;
.................... word dem_maxima_ativa_ant;
.................... word dem_maxima_aparente_ant;
.................... word tensao_rs;
.................... word tensao_rs_na_alta;
.................... word dem_ativa;
.................... word dem_reativa;
.................... word dem_contratada;
.................... word dem_acionada;
.................... word dem_ativa_proj;
.................... word dem_reativa_proj;
.................... word fator_carga;
.................... word fator_demanda;
.................... word pot_exec_r;
.................... word pot_req_r;
.................... char sinal_fp[4];
.................... 
.................... word tensao_tri;
.................... word corrente_tri;
.................... signed word fator_pot;
.................... char time_out_tc_r;
.................... 
.................... #if (ST8100C == true)
.................... 	char 	digito;
.................... #endif
.................... #if ((ST8300C == true) || (ST8500C == true))
.................... 	char passo_ad_8300;
.................... #endif	
.................... 
.................... 
.................... #if (monofasico == false)
.................... 
.................... // VARIAVEIS DA FASE S
.................... 	int32 soma_pot_s;
.................... 	signed long int sinal_s;
.................... 	int32 soma_reg_ts;
.................... 	int32 soma_reg_cs;
.................... 	int32 soma_efi_ts;
.................... 	int32 soma_efi_cs;
.................... 	int32 soma_ten_s;
.................... 	int32 soma_cor_s;
.................... 
.................... 	#if (chip_cs5460a == true)
.................... 		int32 soma_efi_ps;
.................... 	#else
.................... 		int32 soma_ts;
.................... 		int32 soma_cs;
.................... 		signed int32 soma_ps;
.................... 		signed int32 soma_efi_ps;
.................... 		signed int32 soma_pot_efi_s;
.................... 		signed int32 soma_kvar_s;
.................... 		signed int32 soma_efi_kvar_s;
.................... 		signed int32 soma_pot_kvar_s;
.................... 	#endif
.................... 
.................... 	word tensao_s;
.................... 	word corrente_s;
.................... 	word cor_maxima_s;
.................... 	word pot_ativa_max_s;
.................... 	word pot_ativa_s;
.................... 	word pot_aparente_s;
.................... 	word pot_reativa_s;
.................... 	signed word fator_pot_s;
.................... 	word tensao_st;
.................... 	word tensao_st_na_alta;
.................... 	word pot_exec_s;
.................... 	word pot_req_s;
.................... 	char time_out_tc_s;
.................... 
.................... // VARIAVEIS DA FASE T
.................... 	int32 soma_pot_t;
.................... 	signed long int sinal_t;
.................... 	int32 soma_reg_tt;
.................... 	int32 soma_reg_ct;
.................... 	int32 soma_efi_tt;
.................... 	int32 soma_efi_ct;
.................... 	int32 soma_cor_t;
.................... 	int32 soma_ten_t;
.................... 
.................... 	#if (chip_cs5460a == true)
.................... 		int32 soma_efi_pt;
.................... 		signed int32 soma_pt;
.................... 	#else
.................... 		int32 soma_tt;
.................... 		int32 soma_ct;
.................... 		signed int32 soma_pt;
.................... 		signed int32 soma_efi_pt;
.................... 		signed int32 soma_pot_efi_t;
.................... 
.................... 		signed int32 soma_kvar_t;
.................... 		signed int32 soma_efi_kvar_t;
.................... 		signed int32 soma_pot_kvar_t;
.................... 	#endif
.................... 
.................... 	word tensao_t;
.................... 	word corrente_t;
.................... 	word cor_maxima_t;
.................... 	word pot_ativa_max_t;
.................... 	word pot_ativa_t;
.................... 	word pot_aparente_t;
.................... 	word pot_reativa_t;
.................... 	signed word fator_pot_t;
.................... 	word tensao_rt;
.................... 	word tensao_rt_na_alta;
.................... 	word pot_exec_t;
.................... 	word pot_req_t;
.................... 	char time_out_tc_t;
.................... 	
.................... 	int32 soma_cn;
.................... 	int32 soma_efi_cn;
.................... 	word corrente_n;
.................... 	
.................... 	//word temperatura;
.................... 
.................... #endif
.................... 
.................... 
.................... float mul_tc;
.................... 
.................... int32 fundo_escala_corrente;
.................... 
.................... // variaveis somente para testes, devem ser apagadas
.................... char nro_conta_media;
.................... char conta_media;
.................... 
.................... char rotina;
.................... 
.................... word status;
.................... word status_equipamento_H;
.................... word status_equipamento_L;
.................... 
.................... char periodo_fatura;
.................... // definicao de variavesi de uso geral 
.................... #if (ade7754 == true)
.................... 	char conta_media_ten_r;
.................... 	char conta_media_ten_s;
.................... 	char conta_media_ten_t;
.................... #else
.................... 	char conta_media_ten;
.................... #endif
.................... //char conta_media_cor;
.................... char passo_main;
.................... word aux_w1;
.................... word aux_w2;
.................... word aux_w3;
.................... word aux_wexibe1;
.................... word aux_wexibe2;
.................... //word aux_w4;
.................... signed word aux_sw1;
.................... signed word aux_sw2;
.................... int32 aux_l1;
.................... int32 aux_l2;
.................... int32 aux_l3;
.................... int32 aux_l4;
.................... int32 aux_l5;
.................... int32 aux_l6;
.................... signed int32 aux_l7;
.................... signed int32 aux_l8;
.................... signed int32 aux_l9;
.................... float aux_f1;
.................... float aux_f2;
.................... float aux_f3;
.................... float aux_f4;
.................... float aux_f5;
.................... float aux_f6;
.................... float valorf;
.................... 
.................... char aux_disp;	
.................... 
.................... char aux_b1;
.................... char aux_b2;
.................... char aux_b3;
.................... char aux_b4;
.................... char aux_calc;
.................... 
.................... /* Definicao das variaveis	em ram */
.................... char var_mem;
.................... char time_out;	
.................... char time_out2;
.................... #define DEF_TIME_OUT2	40
.................... char time_out_exibe_erro;	
.................... char time_out_back;
.................... char time_out_t3;
.................... char time_out_aciona_alarme;
.................... 
.................... 
.................... char caracter;
.................... char data1;
.................... char dia;
.................... char mes;
.................... char ano;
.................... char hora;
.................... char minuto;
.................... char segundo;
.................... char distancia_fase;
.................... char cont_fase;
.................... 
.................... #if (com_time_funciona == true)
.................... 	char min_funciona;
.................... #endif	
.................... 
.................... 
.................... word val_pwm;
.................... 
.................... signed int32 aux_sl1;
.................... signed int32 aux_sl2;
.................... signed int32 aux_sl3;
.................... signed int32 aux_sl4;
.................... signed int32 aux_sl5;
.................... signed int32 aux_sl6;
.................... //word vref;
.................... //word vref_cr;
.................... //word vref_cs;
.................... //word vref_ct;
.................... word vrefcr;
.................... word vrefcs;
.................... word vrefct;
.................... word vreftr;
.................... word vrefts;
.................... word vreftt;
.................... word addr;
.................... word data1_int;
.................... char cont0;
.................... char cont1;
.................... //word aux_int;
.................... word aux_intervalo_integra;
.................... char retardo_alarmes;
.................... 
.................... 
.................... int32 soma_pot_ati;
.................... int32 soma_pot_reat;
.................... int32 pot_apa_tri;
.................... int32 soma_pot_apa;
.................... signed char sinal;
.................... char cruza_cor;
.................... char cruza_ten;
.................... 
.................... int16 nro_soma_reg;
.................... 
.................... char passo_tensao;
.................... char passo_corrente;
.................... char passo_corrente_r;
.................... char passo_corrente_t;
.................... 
.................... int32 soma_vref;
.................... int32 soma_vreft;
.................... int32 soma_vrefc;
.................... char nro_soma_vref;
.................... #define NRO_MEDIAS_VREF	32
.................... 
.................... 
.................... 
.................... // variaveis para o calculo de frequencia
.................... word freq_tmp;
.................... word freq_tmp1;
.................... char nro_ints;
.................... char nro_ints_old;
.................... char time_out_int0;
.................... word soma_freq;
.................... short fechar_frequencia;
.................... char conta_soma_freq;
.................... int conta_freq;
.................... int conta_ints;
.................... 
.................... 
.................... 
.................... 
.................... // variaveis do controle de consumo
.................... #if (com_consumo == true)
.................... 	int32 consumo_reati;
.................... 	int32 consumo_ati;
.................... 	int32 consumo_rea_p;
.................... 	int32 consumo_ati_p;
.................... 	word nro_soma_consumo;
.................... 	int32 soma_consumo_r;
.................... 	int32 soma_consumo_s;
.................... 	int32 soma_consumo_t;
.................... 	int32 soma_consumo_rea_r;
.................... 	int32 soma_consumo_rea_s;
.................... 	int32 soma_consumo_rea_t;
.................... 	int32 soma_dem_apa_r;
.................... 	int32 soma_dem_apa_s;
.................... 	int32 soma_dem_apa_t;
.................... 	float consumo_r_tmp;
.................... 	float consumo_reati_r_tmp; 
.................... 
.................... 	//int32 consumo_rea_r;
.................... 	
.................... 	word consumo_l;
.................... 	word consumo_h;
.................... 	int32 consumo;
.................... 	
.................... 	word dem_reat_r; 
.................... 	word dem_reat_s; 
.................... 	word dem_reat_t; 
.................... 	
.................... 	word dem_apa_r;
.................... 	word dem_apa_s;
.................... 	word dem_apa_t;
.................... 	word dem_aparente;
.................... 	
.................... 	word demanda_r;	
.................... 	word demanda_s;
.................... 	word demanda_t;	
.................... 	
.................... 	word consumo_tmp;
.................... 	word periodo_soma;
.................... 	
.................... 	word tendencia_demanda_ativa;
.................... 
.................... 	#if (com_consumo_aparente == true)	//Atendendo solicitação da Maxi Eletro
.................... 		word consumo_apa_l;
.................... 		word consumo_apa_h;
.................... 		word consumo_apa_tmp;
.................... 		int32 consumo_apa;
.................... 		int32 consumo_apa_p;
.................... 		int32 soma_consumo_apa;
.................... 		int32 soma_consumo_apa_r;
.................... 		int32 soma_consumo_apa_s;
.................... 		int32 soma_consumo_apa_t;
.................... 		float consumo_apa_r_tmp;
.................... 	#endif
.................... 	
.................... #endif
.................... 
.................... #if (ST8500c == true)
.................... 	#if (com_tc == false)
.................... //		int32 consumo_reati;
.................... //		int32 consumo_ati;
.................... 		int32 consumo_reati_ant;
.................... 		int32 consumo_ati_ant;
.................... 	#endif
.................... #endif
.................... 
.................... int32 nro_erro_mem = 0;
.................... word nro_erro_mem2 = 0;
.................... 
.................... #if (funcao_505 == true)
.................... 	char segundo_old_505;	
.................... #endif
.................... 
.................... word tensao_media_r;
.................... int32 soma_media_tensao_r;
.................... word conta_media_tensao_r;
.................... #if (monofasico == false)
.................... 	word tensao_media_s;
.................... 	word tensao_media_t;
.................... 	int32 soma_media_tensao_s;
.................... 	int32 soma_media_tensao_t;
.................... 	word conta_media_tensao_s;
.................... 	word conta_media_tensao_t;
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // variaveis de programacao
.................... #if (st5x == true)
.................... 	#if (com_saida_pulsos == true)
.................... 		word const_saida_kw;
.................... 		word const_saida_kvar ;
.................... 		byte qual_variavel_pulsa;
.................... 	#endif
.................... #endif
.................... 
.................... char tempo_senha;
.................... char modo_funca;
.................... signed byte os_ten_r;
.................... signed byte os_ten_s;
.................... signed byte os_ten_t;
.................... signed byte os_ten_r1;
.................... signed byte os_ten_s1;
.................... signed byte os_ten_t1;
.................... char os_ten_r2;
.................... char os_ten_s2;
.................... char os_ten_t2;
.................... signed byte os_cor_r;
.................... signed byte os_cor_s;
.................... signed byte os_cor_t;
.................... signed byte os_pot_r;
.................... signed byte os_pot_s;
.................... signed byte os_pot_t;
.................... 
.................... #if (ade7754 == true)
.................... 	char fase_r;
.................... 	char fase_s;
.................... 	char fase_t;
.................... 	char fase_delta;
.................... 	word CFNUM_R;
.................... 	word CFNUM_S;
.................... 	word CFNUM_T;
.................... #else
.................... 	char off_cor_r;
.................... 	char off_cor_s;
.................... 	char off_cor_t;
.................... 	char off_set_kvar;
.................... 	char defasagem;
.................... #endif
.................... 
.................... 
.................... /* definicoes de variaveis padroes para qualquer equipamento */
.................... char ultimo_tc;
.................... word ten_nomi;
.................... word valor_tc;
.................... word valor_tp;
.................... word baud_rate;
.................... #if (controlador == true)
.................... 	#if (st8500c == true)
.................... 		#define	INTERVALO_REG_DEFAULT 300		//60
.................... 	#else
.................... 		#define	INTERVALO_REG_DEFAULT 120		//300 - Passamos para 120 em 29/11/12. Autonomia de aproximadamente 34 dias.
.................... 	#endif
.................... #else
.................... 	#define	INTERVALO_REG_DEFAULT 600
.................... #endif
.................... word intervalo_reg;
.................... 
.................... char tipo_ligacao;
.................... char modo_rep;
.................... 
.................... char registro_old;
.................... char aux_set_point;
.................... char set_point;
.................... char registro;
.................... char forma_reg_cht;
.................... #if (st5x == true)
.................... 	#if (TECNOFLUX == TRUE)
.................... 		char endereco_nro_serie;
.................... 	#endif
.................... #endif	
.................... char endereco;
.................... char intervalo_integra;
.................... char ala_fp_ind;
.................... char ala_fp_cap;
.................... char ala_ten_a;
.................... char ala_ten_b;
.................... char ala_sc;
.................... char ala_chtt;
.................... char ala_chtc;
.................... char ala_subc;
.................... char ala_skw;
.................... 
.................... #if (controlador == true) || (st_prog == true)
.................... 	char cor_minima;
.................... #endif	
.................... #if (com_rep == true)
.................... 	word cor_minima_rep;
.................... #endif
.................... #if (st8500c == true)
.................... 	char ala_demanda_ativa;
.................... #else
.................... 	word ala_demanda_ativa;
.................... 	word ala_demanda_ativa_aux;
.................... #endif
.................... 
.................... #if (st8500c == true)
.................... 	word dem_cont_ponta[13];
.................... 	word dem_cont_fora_ponta[13];
.................... 	word carga_programada;
.................... 		
.................... 	char dia_inicio_pc;
.................... 	char mes_inicio_pc;
.................... 	char dia_final_pc;
.................... 	char mes_final_pc;
.................... 
.................... #else
.................... #endif
.................... 
.................... 	char hora_ponta;
.................... 	char minuto_ponta;
.................... 	char hora_final_ponta;
.................... 	char minuto_final_ponta;
.................... 
.................... #if (portatil == true)
.................... 	#if (versao_pci_st96 >= 6)
.................... 		char time_out_troca_ponteira;
.................... 	#endif
.................... 	char ultimo_tempo;
.................... 	char prog_time;
.................... 	char fila_circular;
.................... 	char dia_liga;
.................... 	char dia_desliga;
.................... 	char hora_liga;
.................... 	char minuto_liga;
.................... 	char hora_desliga;
.................... 	char minuto_desliga;
.................... #endif	
.................... 
.................... 
.................... #if (portatil == TRUE)
.................... 	#if (versao_pci_st96 > 3)		//Para versões 4, 5 e 6.
.................... 		word ganho_ponteira;
.................... 	#endif
.................... 	#if (se_com_flex ==	true)
.................... 		char tipo_ponteira;
.................... 		signed char os_cor_pt_r[NRO_POSI_TABELA_TIPO_PT+1];
.................... 		signed char os_cor_pt_s[NRO_POSI_TABELA_TIPO_PT+1];
.................... 		signed char os_cor_pt_t[NRO_POSI_TABELA_TIPO_PT+1];
.................... 		signed char os_pot_pt_r[NRO_POSI_TABELA_TIPO_PT+1];
.................... 		signed char os_pot_pt_s[NRO_POSI_TABELA_TIPO_PT+1];
.................... 		signed char os_pot_pt_t[NRO_POSI_TABELA_TIPO_PT+1];
.................... 		char off_set_fp[NRO_POSI_TABELA_TIPO_PT+1];
.................... 	#else
.................... 		signed char os_cor_pt_r[NRO_POSI_TC];
.................... 		signed char os_cor_pt_s[NRO_POSI_TC];
.................... 		signed char os_cor_pt_t[NRO_POSI_TC];
.................... 		signed char os_pot_pt_r[NRO_POSI_TC];
.................... 		signed char os_pot_pt_s[NRO_POSI_TC];
.................... 		signed char os_pot_pt_t[NRO_POSI_TC];
.................... 		char off_set_fp[NRO_POSI_TC];
.................... 	#endif
.................... 	char localizacao[17];
.................... #endif	
.................... char posi_tc;
.................... 	
.................... 
.................... /* variaveis do protocolo mod bus*/
.................... char addr_modbus;
.................... char funcao_modbus;
.................... char data_count_modbus;
.................... char time_out_modbus;
.................... char qerro_mod;
.................... word data_modbus;
.................... word nro_regs_modbus;
.................... word force_data_modbus;
.................... word crc_modbus;
.................... word nro_pontos_modbus;
.................... word addr_regs_modbus;
.................... //word nro_bits_modbus;
.................... 
.................... #if (chip_cs5460a == true)
.................... 	short int_cs5460_r;
.................... 	short int_cs5460_s;
.................... 	short int_cs5460_t;
.................... 	short lendo_cht_cs5460;
.................... 	char datah;
.................... 	char datam;
.................... 	char datal;
.................... 	char status_cs5460h;
.................... 	char status_cs5460m;
.................... 	char status_cs5460l;
.................... 	int32 aux_ten_l;
.................... 	int32 aux_cor_l;
.................... 	int32 aux_pot_l;
.................... 	int32 aux_ener_l;
.................... 	int32 aux_cs5460_l;
.................... 	int32 status_cs5460_l;	
.................... #endif
.................... 
.................... #if (com_rep == true)
.................... 	#define NRO_MODOS_REP	1
.................... 	#define NRO_PROTO_REP	4
.................... 	#define REP_NORMAL		0
.................... 	#define REP_ESTENDIDO	1
.................... 	#define REP_GRANDEZAS	2
.................... 	#define REP_MISTO		3
.................... 
.................... 	short igual;
.................... 	short flag_fatura_rep;
.................... 	short transferir_REP;
.................... 
.................... 	char definicao_REP;
.................... 	char cod_bloco_REP;
.................... 	char quadrante_aux;
.................... 	long long nro_serie_REP;
.................... 	long long ke_REP;
.................... 	long long rtc_REP;
.................... 	long long rtp_REP;
.................... 	long long data_REP;
.................... 	long long caracterizacao_REP;
.................... 	long tensao_R_REP;
.................... 	long tensao_S_REP;
.................... 	long tensao_T_REP;
.................... 	long corrente_R_REP;
.................... 	long corrente_S_REP;
.................... 	long corrente_T_REP;
.................... 	long corrente_N_REP;
.................... 	signed long pot_ativa_R_REP;
.................... 	signed long pot_ativa_S_REP;
.................... 	signed long pot_ativa_T_REP;
.................... 	signed long pot_ativa_total_REP;
.................... 	signed long pot_reativa_R_REP;
.................... 	signed long pot_reativa_S_REP;
.................... 	signed long pot_reativa_T_REP;
.................... 	signed long pot_reativa_total_REP;
.................... 	signed long pot_aparente_R_REP;
.................... 	signed long pot_aparente_S_REP;
.................... 	signed long pot_aparente_T_REP;
.................... 	signed long pot_aparente_total_REP;
.................... 	long frequencia_REP;
.................... 	long ctrl_demanda_REP;
.................... 	long ene_ati_pos;
.................... 	long ene_rea_pos_ati_pos;
.................... 	long ene_rea_neg_ati_pos;
.................... 	long ene_ati_neg;
.................... 	long ene_rea_pos_ati_neg;
.................... 	long ene_rea_neg_ati_neg;
.................... 	long cont_sem_REP;
.................... 
.................... 	// bytes
.................... 	char baud_rate_REP;
.................... 	char quadrante;
.................... 	char protocolo_REP;
.................... 	char qtd_byte_REP;
.................... 	char tarif_reativo_ativa;
.................... 	char posto_horario;
.................... 	char time_out_rec_rep;
.................... 	char time_out_troca_tarifa;
.................... 	char fatura_rep;
.................... 	char fatura_rep_old;
.................... 	char tarifa_rep;
.................... 	char tarifa_rep_old;
.................... 	char periodo;
.................... 	char fim_interv_reat_rep;
.................... 	char posto_reativo;
.................... 	char tarif_cap_rep;
.................... 	char tarif_ind_rep;
.................... 	char tarif_ind_rep_old;
.................... 	char posto_tarif_rep;
.................... 	char tipo_tarif_rep;
.................... 	char num_int2_ant;
.................... 	char num_int_ant;
.................... 	char num_int;
.................... 	char num_int2;
.................... 	char timer_integra;
.................... 	char erro_rep;
.................... 	char tipo_fp;
.................... 	char tipo_fp_men;
.................... 	char time_out_rep;
.................... 	char nbyte_rep;
.................... 	char byte_rep;
.................... 	char nbit_rep;
.................... 	char time_out_modo_rep;
.................... 	char posi_erro1;
.................... 	char posi_erro2;
.................... 	
.................... 	long CRC_calculado;
.................... 	long CRC_recebido;
.................... 
.................... 	// words
.................... 	word fat_conv_ativa;
.................... 	word fat_conv_reativa;
.................... 	float kkw;
.................... 	float kkvar;
.................... 	
.................... 	word puls_c1_rep2_ant;
.................... 	word puls_c1_rep_ant;
.................... 	word puls_c2_rep_ant;
.................... 	word seg_falt_rep;
.................... 	word seg_falt_rep_ant;
.................... 	word puls_c1_rep2;
.................... 	word puls_c1_rep;
.................... 	word puls_c2_rep;
.................... 	word e_ativa2;
.................... 	word e_ativa;
.................... 	word e_reativa;
.................... 	word e_ativa2_ant;
.................... 	word e_ativa_ant;
.................... 	word e_reativa_ant;
.................... 	
.................... 	word ultimo_pulso_at;
.................... 	word ultimo_pulso_reat;
.................... 	word ultimo_pulso_at_tmp;
.................... 	word ultimo_pulso_reat_tmp;
.................... 
.................... 	word ultima_pot_at;
.................... 	word ultima_pot_reat;
.................... 	
.................... 	// longs
.................... 	int32 val_ativa;
.................... 	int32 val_reativa;
.................... 	int32 val_rea_ind;
.................... 	int32 val_rea_cap;
.................... //	float aux_f1;
.................... 	float fp_ativa;
.................... 	float fp_reativa;
.................... 	float fp_ati_aux;
.................... 	float fp_rea_aux;
.................... 	
.................... 	// buffers
.................... 	char buf_rec_rep[10];
.................... 	char buf_rec_tmp[10];
.................... 	#if (ST8500C == true)
.................... 		#define NRO_INTERVALOS_INTEGRACAO	30
.................... 	#else
.................... 		#define NRO_INTERVALOS_INTEGRACAO	15
.................... 	#endif
.................... 	word int_ativa[NRO_INTERVALOS_INTEGRACAO + 1];
.................... 	word int_reativa[NRO_INTERVALOS_INTEGRACAO + 1];
.................... 	word int_ati_aux[NRO_INTERVALOS_INTEGRACAO + 1];
.................... 	word int_rea_aux[NRO_INTERVALOS_INTEGRACAO + 1];
.................... 	
.................... //	char char_reativa[NRO_INTERVALOS_INTEGRACAO + 1];
.................... //	word buf_pulso1[5];
.................... //	word buf_pulso2[5];
.................... 
.................... #else
.................... 	#if (st8500c == true)
.................... 		#if (com_tc == true)
.................... 			char time_out_modo_rep;
.................... 			char timer_integra;
.................... 			word seg_falt_rep;
.................... 		#endif
.................... 	#endif
.................... #endif
.................... 
.................... #if (controlador == true)
.................... 	#if (AUTOSET == true)
.................... 		short em_autoset;
.................... 
.................... 		char time_out_enter;
.................... 		char time_out_reset;
.................... 		char time_out_autoset;
.................... 		char passo_autoset;
.................... 		char time_out_teste_autoset;
.................... 		char aux_teste;
.................... 		char aux_banco;
.................... 		char tentativas_autoset;
.................... 		
.................... 		word pot_reativa_r_old;
.................... 		word pot_reativa_s_old;
.................... 		word pot_reativa_t_old;
.................... 		word valor_capacitor;
.................... 		word pot_reativa_cap_r;
.................... 		word pot_reativa_ind_r;
.................... 		
.................... 		int32 soma_media_reativa_r;
.................... 		
.................... 	#endif
.................... #endif
.................... 
.................... 
.................... /* Definicao das variaveis	de tratamento da comunicacao serial */
.................... char ptrtx;
.................... char ptrrx;
.................... char retrx;
.................... char numbrx;
.................... char numbtx;
.................... 
.................... 
.................... 
.................... // definicao dos buffers de uso geral.
.................... 
.................... 
.................... #if (st5x == true)
.................... 	#define teste_off_set	0
.................... #elif (st94 == true)
.................... 	#define teste_off_set	0
.................... #elif (st92 == true)
.................... 	#define teste_off_set	0
.................... #elif (ST8100C == true)
.................... 	#define teste_off_set	0
.................... #elif (ST8200C == true)
.................... 	#define teste_off_set	0
.................... #elif (ST8300C == true)
.................... 	#define teste_off_set	0
.................... #elif (st9600r == true)
.................... 	#if (teste_vag == true)
.................... 		#define teste_off_set	0
.................... 	#else
.................... 		#define teste_off_set	0
.................... 	#endif
.................... #else
.................... 	#define teste_off_set	0
.................... #endif
.................... 
.................... 
.................... #if (chip_cs5460a == true) 
.................... 
.................... #elif (ade7754 == true)
.................... 	signed word buf_tensao_r[NRO_AMOSTRAS_CHT + 1];
.................... 	signed word buf_corrente_r[NRO_AMOSTRAS_CHT + 1];
.................... 	#if (monofasico == false)
.................... 		signed word buf_tensao_s[NRO_AMOSTRAS_CHT + 1];
.................... 		signed word buf_corrente_s[NRO_AMOSTRAS_CHT + 1];
.................... 		signed word buf_tensao_t[NRO_AMOSTRAS_CHT + 1];
.................... 		signed word buf_corrente_t[NRO_AMOSTRAS_CHT + 1];
.................... 	#endif
.................... 	char passo_le_senoide;
.................... 
.................... #else
.................... 	signed word buf_tensao_r[NRO_AMOSTRAS+1];
.................... 	signed word buf_corrente_r[NRO_AMOSTRAS+1];
.................... 	#if (monofasico == false)
.................... 		signed word buf_tensao_s[NRO_AMOSTRAS+1];
.................... 		signed word buf_tensao_t[NRO_AMOSTRAS+1];
.................... 		signed word buf_corrente_s[NRO_AMOSTRAS+1];
.................... 		signed word buf_corrente_t[NRO_AMOSTRAS+1];
.................... 	#endif
.................... #endif
.................... 
.................... //signed word buf_tensao[(NRO_AMOSTRAS)];
.................... //signed word buf_corrente[(NRO_AMOSTRAS)];
.................... 
.................... #if (teste_off_set == 1)
.................... 	int32 soma_efi_cr_tmp;
.................... 	signed word buf_ten_tmp[NRO_AMOSTRAS];
.................... 	signed word buf_cor_tmp[NRO_AMOSTRAS];
.................... #endif	
.................... 
.................... 
.................... char buf_rx[TAM_RX+4];
.................... char buf_tx[TAM_TX+4];
.................... 
.................... char buf_tmp[32];
.................... 
.................... #if (ST8100C == true)
.................... 	#if (simula_forno == true)
.................... 		char tempo_on, tempo_off, conta_tempo, aux_btmp;
.................... 		char buf_lig_banco[255];
.................... 	#endif		
.................... #endif
.................... 
.................... 
.................... // Definição dos Códigos de Registros
.................... #define reg_sem_ocor									0
.................... #define registro_normal 								1
.................... #define reg_tensao_r_alta								2
.................... #define reg_tensao_s_alta								3
.................... #define reg_tensao_t_alta								4
.................... #define reg_tensao_r_baixa								5
.................... #define reg_tensao_s_baixa								6
.................... #define reg_tensao_t_baixa								7
.................... #define reg_chtc_alto_r									8
.................... #define reg_chtc_alto_s									9
.................... #define reg_chtc_alto_t									10
.................... #define reg_cor_r_alta									11
.................... #define reg_cor_s_alta									12
.................... #define reg_cor_t_alta									13
.................... #define reg_fp_ind										14
.................... #define reg_fp_cap										15
.................... #define reg_faltou_cap									16
.................... #define reg_tc_inv_r									17
.................... #define reg_tc_inv_s									18
.................... #define reg_tc_inv_t									19
.................... #define reg_seq_inv										20
.................... #define reg_temp_alta									21
.................... #define reg_transm_regs									22
.................... #define reg_transm_ocor									23			
.................... #define reg_volta_energia 								24
.................... #define reg_reset										25
.................... #define reg_inicio										26
.................... #define reg_final										27
.................... #define reg_aj_calend 									28
.................... #define reg_apagou										29
.................... #define reg_prog_tecla									30
.................... #define reg_prog_nauto									31
.................... #define reg_falta_energia 								32
.................... #define reg_apagou_cht									33
.................... #define reg_transmitir_cht								34
.................... #define reg_chtt_alto									35
.................... #define reg_chtc_alto									36
.................... #define reg_reset_alarme								37
.................... #define reg_tensao_alta									38
.................... #define reg_tensao_baixa								39
.................... #define reg_corrente_alta								40
.................... #define reg_falta_fase_r								41
.................... #define reg_falta_fase_s								42
.................... #define reg_falta_fase_t								43
.................... #define reg_falta_fases									44
.................... #define reg_cor_r_baixa									45
.................... #define reg_cor_s_baixa									46
.................... #define reg_cor_t_baixa									47
.................... #define reg_corrente_baixa								48
.................... #define reg_troca_tensao								49
.................... #define reg_potencia_alta								50
.................... #define reg_pot_r_alta									51
.................... #define reg_pot_s_alta									52
.................... #define reg_pot_t_alta									53
.................... #define reg_codigo_local								54
.................... #define reg_demanda_ativa_alta							55
.................... #define reg_auto_set									56
.................... #define reg_em_banco_minimo								57
.................... #define reg_trocou_periodo_fatura_periodo_ponta			58
.................... #define reg_trocou_periodo_fatura_periodo_fora_ponta	60
.................... #define reg_falta_pulso_rep								62
.................... #define reg_volta_pulso_rep								63
.................... #define reg_des_ten_alta								64
.................... #define reg_des_ten_baixa								65
.................... #define reg_troca_pt_0									66
.................... #define reg_troca_pt_1									67
.................... #define reg_troca_pt_2									68
.................... #define reg_fatura_rep									69
.................... #define reg_virou_dia									70
.................... #define reg_prog_defasagem								71
.................... #define reg_consumo										72
.................... #define reg_tarifa_rep									73
.................... 
.................... #define reg_teste										99
.................... 
.................... // tabela de erros
.................... /*
.................... char qerro
.................... #define erro_0		0b00000000			// erro de corrente critica; corrente < 3%
.................... #define erro_1		0b00000010			// alarme corrente baixa; corrente < alarme corrente baixa
.................... #define erro_2		0b00000100			// alarme corrente alta; corrente > alarme corrente alta
.................... #define erro_3		0b00001000			// alarme de sub-tensão; tensao < alarme de tensão baixa
.................... #define erro_4		0b00010000			// alarme de sobre-tensão; tensão > alarme de tensão alta.
.................... #define erro_5		0b00100000			// alarme de chtt alto. chtt > alarme de chtt
.................... #define erro_6		0b01000000			// alarme de chtc alto. chtc > alarme de chtt
.................... #define erro_7		0b10000000			// alarme de ponteira invertida; ponteira em fase errada ou invertida.
.................... */
.................... 
.................... // tabela de status de alarmes
.................... // Parte LOW
.................... 							//5432109876543210
.................... #define STATUS_FP_CAP_ON			0b0000000000000001
.................... #define STATUS_FP_IND_ON			0b0000000000000010
.................... #define STATUS_TEN_A_ON				0b0000000000000100
.................... #define STATUS_TEN_B_ON				0b0000000000001000
.................... #define STATUS_COR_A_ON				0b0000000000010000
.................... #define STATUS_COR_B_ON				0b0000000000100000
.................... #define STATUS_CHTA_A_ON			0b0000000001000000
.................... #define STATUS_CHTC_A_ON			0b0000000010000000
.................... #define STATUS_DEM_A_ON				0b0000000100000000
.................... #define STATUS_ERRO_REP_ON			0b0000001000000000
.................... #define STATUS_ERRO_CONST_REP_ON	0b0000010000000000
.................... 
.................... 							//5432109876543210
.................... #define STATUS_FP_CAP_OFF			0b1111111111111110
.................... #define STATUS_FP_IND_OFF			0b1111111111111101
.................... #define STATUS_TEN_A_OFF			0b1111111111111011
.................... #define STATUS_TEN_B_OFF			0b1111111111110111
.................... #define STATUS_COR_A_OFF			0b1111111111101111
.................... #define STATUS_COR_B_OFF			0b1111111111011111
.................... #define STATUS_CHTA_A_OFF			0b1111111110111111
.................... #define STATUS_CHTC_A_OFF			0b1111111101111111
.................... #define STATUS_DEM_A_OFF			0b1111111011111111
.................... #define STATUS_ERRO_REP_OFF			0b1111110111111111
.................... #define STATUS_ERRO_CONST_REP_OFF	0b1111101111111111
.................... 
.................... #if (home_system == true)
.................... 	int ContHSnet;
.................... 	#define TEMPO_HSNET		60
.................... 		#if (debug_hsnet == true)
.................... 			int debug_count = 0;
.................... 		#endif
.................... #endif
.................... 
.................... #include "st8500_port.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610PORT           				    						 *
.................... ; Funcao: DEFINIÇÃO DA INTERFACE COM HARDWARE			 				 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 06/06/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... // DEFINE I/O
.................... 	#define PGD			PIN_B7
.................... 	#define CA0			PIN_E3
.................... 	
.................... 	#define rcv_rep		PIN_G2
.................... 	
.................... 	#if (rev_01 == true)
.................... 		#define CS_DISP		PIN_E1
.................... 		#define CSIO1		PIN_E4
.................... 		#define direcao   	PIN_G3
.................... 	#else
.................... 		#define CS_DISP		PIN_E4
.................... 		#define CSIO1		PIN_E1
.................... 		
.................... 		#define direcao   	PIN_G3
.................... 	#endif
.................... 	
.................... 	#define CSIO2		PIN_E5
.................... 	#define CSIO3		PIN_E6
.................... 	#define CSIO4		PIN_E7
.................... 	
.................... 	
.................... 	#define FLASH_CLK  PIN_C3
.................... 	#define FLASH_SO   PIN_C4
.................... 	#define FLASH_SI   PIN_C5
.................... 	#define FLASH1_CE  PIN_E2
.................... 	
.................... 	
.................... 	#define alarme 		PIN_G0
.................... 	#define back		PIN_C2
.................... 	
.................... 	#define pino_teste	PIN_G0
.................... 
.................... 	struct DEF_LEDS
.................... 	{
.................... 		short LED1 : 1;
.................... 		short LED2 : 1;
.................... 		short LED3 : 1;
.................... 		short LED4 : 1;
.................... 		short LED5 : 1;
.................... 		short LED6 : 1;
.................... 		short LED7 : 1;
.................... 		short LED8 : 1;
.................... 	}LED;
.................... 	
.................... 	struct DEF_SAIDA2
.................... 	{
.................... 		short SD1 : 1;
.................... 		short SD2 : 1;
.................... 		short SD3 : 1;
.................... 		short SD4 : 1;
.................... 		short SD5 : 1;
.................... 		short SD6 : 1;
.................... 		short SD7 : 1;
.................... 		short SD8 : 1;
.................... 	}SAIDA2;
.................... 	
.................... 	struct DEF_SAIDA3
.................... 	{
.................... 		short SD9 : 1;
.................... 		short SD10 : 1;
.................... 		short SD11 : 1;
.................... 		short SD12 : 1;
.................... 		short SD13 : 1;
.................... 		short SD14 : 1;
.................... 		short SD15 : 1;
.................... 		short SD16 : 1;
.................... 	}SAIDA3;
.................... 
.................... 	struct DEF_SAIDA4
.................... 	{
.................... 		short SD17 : 1;
.................... 		short SD18 : 1;
.................... 		short SD19 : 1;
.................... 		short SD20 : 1;
.................... 		short SD21 : 1;
.................... 		short SD22 : 1;
.................... 		short SD23 : 1;
.................... 		short SD24 : 1;
.................... 	}SAIDA4;
.................... 	
.................... 	#define TRIAC_1 SAIDA2.SD1
.................... 	#define TRIAC_2 SAIDA2.SD2
.................... 	#define TRIAC_3 SAIDA2.SD3
.................... 	#define TRIAC_4 SAIDA2.SD4
.................... 	#define TRIAC_5 SAIDA2.SD5
.................... 	#define TRIAC_6 SAIDA2.SD6
.................... 	#define TRIAC_7 SAIDA2.SD7
.................... 	#define TRIAC_8 SAIDA2.SD8
.................... 	#define TRIAC_9 SAIDA3.SD9
.................... 	#define TRIAC_10 SAIDA3.SD10
.................... 	#define TRIAC_11 SAIDA3.SD11
.................... 	#define TRIAC_12 SAIDA3.SD12
.................... 	#define TRIAC_13 SAIDA3.SD13
.................... 	#define TRIAC_14 SAIDA3.SD14
.................... 	#define TRIAC_15 SAIDA3.SD15
.................... 	#define TRIAC_16 SAIDA3.SD16
.................... 	
.................... 	
.................... 	#define led_ok		LED.LED1
.................... 	#define led_alarme	LED.LED2
.................... 	#define led_rx		LED.LED3
.................... 	#define led_tx		LED.LED4
.................... 	#define led_v		LED.LED5
.................... 	#define led_a		LED.LED6
.................... 	#define led_r		LED.LED7
.................... 	#define led_w		LED.LED8
.................... 	
.................... 	
.................... 	//  PINOS NÃO USADOS
.................... 	
.................... 	#define rd  		PIN_E0
.................... 	
.................... 	#define RST_AD 		PIN_E0
.................... 	#define CS_AD2		PIN_E0
.................... 	#define CS_AD3		PIN_E0
.................... 
.................... //equates de pinos controle do relógio
.................... 	#define RTC_SCLK 	PIN_C0		//PIN_C3
.................... 	#define RTC_IO		PIN_C1		//PIN_C5
.................... 	#define RTC_RST		PIN_G4		//PIN_C0
.................... 	
.................... 	#define FLASH2_CE	PIN_E2
.................... 	#define FLASH3_CE	PIN_E2
.................... 	#define FLASH4_CE	PIN_E2
.................... 	#define FLASH_HOLD	PIN_E0
.................... 	#define FLASH_WP	PIN_E0
.................... 	
.................... 	
.................... 	#define CA1			PIN_G0
.................... 	
.................... 	
.................... 	
.................... 	
.................... 
.................... #include "st_e2p.h"
.................... /****************************************************************************
.................... * Empresa: SULTECH SISTEMAS ELETRÔNICOS										*
.................... * Modulo: ST_E2P															*
.................... * Funcao: MODULO DEFINIÇÃO VARIAVEIS EM E2P									*
.................... * Responsavel: VAGNER SANTOS												*
.................... * Modificado ; VAGNER SANTOS												*
.................... * Inicio: 06/06/2003														*
.................... * Revisao: RENGAV ARIERREF SOD SOTNAS										*
.................... *****************************************************************************/
.................... 
.................... 
.................... 
.................... /* definicao de variaveis não voláteis, gravadas na e2prom */
.................... /* definicacao de variaveis  na e2prom */
.................... #define ee_passo_main				0
.................... #define endereco_modbus_e2p			2
.................... #define baud_rate_e2p				4
.................... #define ee_off_cor_r		6
.................... #define ee_off_cor_s		7
.................... #define ee_off_cor_t		8
.................... #define ee_set_point		10
.................... #define ee_os_cor_r			11
.................... #define ee_os_cor_s			12
.................... #define ee_os_cor_t			13
.................... #define ee_os_ten_r1		14
.................... #define ee_os_ten_s1		15
.................... #define ee_os_ten_t1		16
.................... #define ee_ten_nomi			17
.................... 
.................... #if (portatil == true)
.................... 	#if (se_com_flex == true)
.................... 		#define ee_tipo_ponteira	19
.................... 	#else
.................... 		#define ee_valor_tc			19
.................... 	#endif
.................... #else
.................... 	#define ee_valor_tc			19
.................... #endif
.................... 
.................... #define ee_os_ten_r2		21
.................... #define ee_os_ten_s2		22
.................... #define ee_os_ten_t2		23
.................... 
.................... #define ee_defasagem		24
.................... #define ee_qual_variavel_pulsa	25
.................... 
.................... 
.................... #define ee_ala_fp_ind		28
.................... #define ee_ala_fp_cap		29
.................... #define ee_ala_ten_a		30
.................... #define ee_ala_ten_b		31
.................... #define ee_ala_sc			32
.................... #define ee_ala_chtt			33
.................... #define ee_ala_chtc			34
.................... #define ee_des_fp_ind		35
.................... #define ee_des_ten_a		36
.................... #define ee_des_cht			37
.................... #define ee_endereco			38
.................... #define ee_intervalo_reg    39
.................... #define ee_intervalo_integra 	41
.................... #define ee_forma_reg_cht	42
.................... #define ee_valor_tp 		43
.................... #define ee_baud_rate		45
.................... #define ee_registro			47
.................... #define ee_prog_time		48
.................... #define ee_dia_liga			49
.................... #define ee_dia_desliga		50
.................... #define ee_hora_liga		51
.................... #define ee_minuto_liga		52
.................... #define ee_hora_desliga		53
.................... #define ee_minuto_desliga	54
.................... #define ee_fila_circular	55
.................... #define ee_banco_escrita    56
.................... #define ee_banco_leitura	57
.................... #define ee_hora_ponta		58
.................... #define ee_minuto_ponta		59
.................... #define ee_hora_final_ponta	60
.................... #define ee_minuto_final_ponta	61
.................... #define ee_tipo_ligacao		62
.................... #define ee_ala_subc			63
.................... #define ee_modo_funca		64
.................... #define ee_idioma			65
.................... #define ee_ala_skw			66
.................... #define ee_fase_r			67
.................... #define ee_fase_s			68
.................... #define ee_fase_t			69
.................... 
.................... #define ee_os_pot_r			70
.................... #define ee_os_pot_s			71
.................... #define ee_os_pot_t			72
.................... 
.................... #if (st8500c == true)
.................... 	#define ee_ala_demanda_ativa	73
.................... 	#define ee_saida2				74
.................... 	#define ee_saida3				75
.................... 	#define ee_modo_saidas			76
.................... #else
.................... 	#define ee_ala_demanda_ativa	73
.................... #endif
.................... #if (st5x== true)
.................... 	#if (com_saida_pulsos == true)
.................... 	 	#define ee_const_saida_kw	75
.................... 		#define ee_const_saida_kvar 77
.................... 	#endif
.................... #endif
.................... 
.................... #define ee_tipo_controle_demanda	79												// 1byte define se demanda por FILO  ou Fila circular
.................... #define ee_forma_controle			80												// 16 bytes - tabela definição se carga controlável ou por horário
.................... #define ee_hora_liga_controle		(ee_forma_controle + NRO_MAXIMO_CARGAS)			// 16 bytes - tabela de horarios de funcionamento
.................... #define ee_minuto_liga_controle		(ee_hora_liga_controle + NRO_MAXIMO_CARGAS)		// 17 bytes - tabela de horarios de funcionamento
.................... #define ee_hora_desliga_controle	(ee_minuto_liga_controle + NRO_MAXIMO_CARGAS)	// 16 bytes - tabela de horarios de funcionamento
.................... #define ee_minuto_desliga_controle	(ee_hora_desliga_controle + NRO_MAXIMO_CARGAS)	// 17 bytes - tabela de horarios de funcionamento
.................... 
.................... 
.................... #define ee_dia				236
.................... #define ee_mes				237
.................... #define ee_ano				238
.................... #define ee_hora				239
.................... #define ee_minuto			240
.................... 
.................... #define ee_ptr_regs			242			
.................... #define ee_ptr_rocor		244			
.................... #define ee_ptr_cht			246			
.................... 
.................... #define final_variaveis		250
.................... 
.................... #define ee_dem_maxima_aparente_ant 	252
.................... #define ee_dem_maxima_ativa_ant		254
.................... #define ee_dem_maxima_aparente		256
.................... #define ee_dem_maxima_ativa			258
.................... 
.................... 
.................... #define ee_consumo_ati			260		//4 bytes
.................... #define ee_consumo_reati		264		//4 bytes
.................... #define ee_consumo_ati_ant		268	//4bytes
.................... #define ee_consumo_reati_ant	272	//4bytes
.................... #define ee_consumo_l			276
.................... #define ee_consumo_h			278
.................... #define ee_consumo_rea_l		280
.................... #define ee_consumo_rea_h		282
.................... #define ee_consumo_ati_tmp_ant	284
.................... #define	ee_consumo_reati_tmp_ant	286
.................... #define ee_consumo_l_p			288
.................... #define ee_consumo_h_p			290
.................... #define ee_consumo_rea_l_p		292
.................... #define ee_consumo_rea_h_p		294
.................... 
.................... #define ee_fatura_rep		299		//1 byte paraverificaçaõ do fechamento de fatura
.................... #if (com_rep == true)
.................... 	#define ee_int_ativa	300 												// (NRO_INTERVALOS_INTEGRACAO * 4) bytes int 
.................... 	#define ee_int_reativa  ee_int_ativa + (NRO_INTERVALOS_INTEGRACAO * 4)		// NRO_INTERVALOS_INTEGRACAO * 2) bytes int 
.................... #endif
.................... #if (com_tc == true)
.................... 	#define ee_buf_dem_ativa		400		// 60 word de 16 bits
.................... 	#define ee_buf_dem_aparente		520	// 60 word de 16 bits
.................... #endif
.................... 
.................... // endereços exclusivod dos controladores
.................... #if (st8500c == true)
.................... 	#define ee_max_kw				641
.................... 	#define ee_min_kw				642
.................... #else
.................... 	#define ee_max_kvar				641
.................... 	#define ee_min_kvar				642
.................... #endif
.................... #define ee_tempo_aciona			643
.................... #define ee_tempo_desaciona		644
.................... #define ee_sequencia			645
.................... #define ee_modo_rep				646
.................... 
.................... 
.................... #define ee_minuteiro			650		// 16 bytes
.................... #define ee_horimetro			666		// 16 words(32 bytes)
.................... #define ee_acionamentos			698		// 16 words(32 bytes)
.................... #define ee_tempo_repouso_1		730		// 16 bytes
.................... 
.................... 
.................... 
.................... #define ee_com_des_ten_a		746
.................... #define ee_com_des_chtt			747	
.................... #define ee_com_des_chtc			748
.................... #define ee_com_des_fp_ind_cap	749
.................... #define ee_cor_minima			750
.................... #define ee_com_des_ten_b		751
.................... 
.................... #if (st8500c == true)
.................... 	#define ee_carga_1	755
.................... 	#define ee_carga_2	756
.................... 	#define ee_carga_3	757
.................... 	#define ee_carga_4	758
.................... 	#define ee_carga_5	759
.................... 	#define ee_carga_6	760
.................... 	#define ee_carga_7	761
.................... 	#define ee_carga_8	762
.................... 	#define ee_carga_9	763
.................... 	#define ee_carga_10	764
.................... 	#define ee_carga_11	765
.................... 	#define ee_carga_12	766
.................... 	#define ee_carga_13	767
.................... 	#define ee_carga_14	768
.................... 	#define ee_carga_15	769
.................... 	#define ee_carga_16	770
.................... #else
.................... 	#define ee_banco_capacitor_1	755
.................... 	#define ee_banco_capacitor_2	756
.................... 	#define ee_banco_capacitor_3	757
.................... 	#define ee_banco_capacitor_4	758
.................... 	#define ee_banco_capacitor_5	759
.................... 	#define ee_banco_capacitor_6	760
.................... 	#define ee_banco_capacitor_7	761
.................... 	#define ee_banco_capacitor_8	762
.................... 	#define ee_banco_capacitor_9	763
.................... 	#define ee_banco_capacitor_10	764
.................... 	#define ee_banco_capacitor_11	765
.................... 	#define ee_banco_capacitor_12	766
.................... 	#define ee_banco_capacitor_13	767
.................... 	#define ee_banco_capacitor_14	768
.................... 	#define ee_banco_capacitor_15	769
.................... 	#define ee_banco_capacitor_16	770
.................... #endif
.................... 
.................... #if (st8500c == true)
.................... 	#define ee_nro_cargas	787
.................... #else
.................... 	#define ee_nro_bancos_capacitor	787
.................... #endif
.................... 
.................... #if (controlador == true)
.................... 	#define ee_ptr_ocor				788	
.................... 	#if (st8500c == false)
.................... 		#define ee_ocorrencias		790		//100 posições
.................... 	#else
.................... 		#define ee_dem_cont_ponta		790
.................... 		#define ee_dem_cont_fora_ponta		ee_dem_cont_ponta + 24
.................... 	#endif
.................... #endif
.................... 
.................... 
.................... #define ee_nro_1			892
.................... #define ee_nro_2			893
.................... #define ee_nro_3			894
.................... #define ee_nro_4			895
.................... 
.................... #define ee_bits_menu		896
.................... 	#define EE_M1_C1		0
.................... 	#define EE_M1_C2		1
.................... 	#define EE_M1_C3		2
.................... 	#define EE_M1_C4		3
.................... 	#define EE_M1_C5		4
.................... 	#define EE_M1_C6		5
.................... 	#define EE_M1_C7		6
.................... 	#define EE_M1_C8		7
.................... 
.................... #define ee_bits_menu2		897	
.................... 	#define EE_MENU_FIXO		0
.................... 	#define EE_EXISTE_LOCAL		1
.................... 	#define EE_DIGITOU_TEXTO	2
.................... 
.................... #define ee_menu_aux			898
.................... #define ee_qmenu			899
.................... #define ee_menu1			900
.................... 
.................... 
.................... 
.................... #if (com_rep == true)
.................... 	#define ee_cor_minima_rep 		902
.................... 
.................... 	#define ee_ultima_pot_at		904		// 2 bytes
.................... 	#define ee_ultima_pot_reat		906		// 2 bytes
.................... 	
.................... 	#define ee_fat_conv_ativa		908
.................... 	#define ee_fat_conv_reativa		910
.................... 	#define ee_ultimo_pulso_at		912
.................... 	#define ee_ultimo_pulso_reat	914
.................... #endif
.................... #if (com_time_funciona == true)
.................... 	#define ee_horas_funcionamento		916		// 4 bytes (int32)
.................... 	#define ee_horas_funcionamento_ant	920		// 4 bytes (int32)
.................... 	#define ee_min_funciona				924		// 1 byte
.................... #endif
.................... #if (com_relogio == false)
.................... 	#define ee_tabela_minuto	930			// 60 posicoes para salvar minutos  /final em 990
.................... #endif
.................... 
.................... 
.................... #if (portatil == true)
.................... 	#define ee_localizacao_0	980
.................... 	#define ee_localizacao_1	981
.................... 	#define ee_localizacao_2	982
.................... 	#define ee_localizacao_3	983
.................... 	#define ee_localizacao_4	984
.................... 	#define ee_localizacao_5	985
.................... 	#define ee_localizacao_6	986
.................... 	#define ee_localizacao_7	987
.................... 	#define ee_localizacao_8	988
.................... 	#define ee_localizacao_9	989
.................... 	#define ee_localizacao_10	990
.................... 	#define ee_localizacao_11	991
.................... 	#define ee_localizacao_12	992
.................... 	#define ee_localizacao_13	993
.................... 	#define ee_localizacao_14	994
.................... 	#define ee_localizacao_15	995
.................... 	#define ee_localizacao_16	996
.................... #else
.................... 	#if (com_consumo_aparente == true)
.................... 		#define ee_consumo_apa_l_p	980
.................... 		#define ee_consumo_apa_h_p	982
.................... 		#define ee_consumo_apa_l	984
.................... 		#define ee_consumo_apa_h	986
.................... 	#endif
.................... #endif
.................... #if (st8500c == true)
.................... 	#define ee_carga_programada	988
.................... 	#define ee_dia_inicio_pc	990
.................... 	#define ee_mes_inicio_pc	991
.................... 	#define ee_dia_final_pc		992
.................... 	#define ee_mes_final_pc		993
.................... #endif
.................... 
.................... #if (com_rep)
.................... 	#define ee_protocolo_REP	994
.................... 	#define ee_baud_rate_REP	995
.................... #endif
.................... 
.................... #define ee_bloqueio_gravacao	1000
.................... 
.................... #include "st_e2p.c"
.................... /*;**********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS									*
.................... ; Modulo: ST_E2P														*
.................... ; Funcao:	MODULO DE E2PROM											*
.................... ; 			REGISTRADOR ST9600R											*
.................... ; Responsavel: VAGNER SANTOS											*
.................... ; Modificado ; VAGNER SANTOS											*
.................... ; Inicio: 06/06/2003													*
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS									*
.................... ;************************************************************************/
.................... 
.................... /* rotinas de tratamento da e2prom */
.................... 
.................... char read_byte(int16 adress)
.................... {
.................... 	return (read_eeprom(adress));
*
01C24:  MOVFF  FF2,A67
01C28:  BCF    FF2.7
01C2A:  MOVFF  A66,F63
01C2E:  MOVFF  A65,F62
01C32:  BCF    F7F.6
01C34:  BCF    F7F.7
01C36:  BSF    F7F.0
01C38:  MOVF   F61,W
01C3A:  MOVLB  A
01C3C:  BTFSC  x67.7
01C3E:  BSF    FF2.7
01C40:  MOVWF  01
01C42:  MOVLB  0
01C44:  RETURN 0
.................... }
.................... 
.................... void write_byte(int16 adress,char dado)
.................... {
.................... 	write_eeprom(adress,dado);
01C46:  MOVF   FF2,W
01C48:  MOVWF  00
01C4A:  BCF    FF2.7
01C4C:  MOVFF  A68,F63
01C50:  MOVFF  A67,F62
01C54:  MOVFF  A69,F61
01C58:  BCF    F7F.6
01C5A:  BCF    F7F.7
01C5C:  BSF    F7F.2
01C5E:  MOVLB  F
01C60:  MOVLW  55
01C62:  MOVWF  F7E
01C64:  MOVLW  AA
01C66:  MOVWF  F7E
01C68:  BSF    F7F.1
01C6A:  BTFSC  F7F.1
01C6C:  BRA    1C6A
01C6E:  BCF    F7F.2
01C70:  MOVF   00,W
01C72:  IORWF  FF2,F
01C74:  MOVLB  0
01C76:  RETURN 0
.................... }
.................... 
.................... 
.................... int16 read_word(int16 adress)
.................... {
.................... 	char datah, datal;
.................... 	datah = read_eeprom(adress++);
*
0170A:  MOVLB  A
0170C:  MOVF   x5D,W
0170E:  MOVWF  03
01710:  MOVF   x5C,W
01712:  INCF   x5C,F
01714:  BTFSC  FD8.2
01716:  INCF   x5D,F
01718:  MOVWF  x60
0171A:  MOVFF  03,A61
0171E:  MOVFF  FF2,A62
01722:  BCF    FF2.7
01724:  MOVFF  A61,F63
01728:  MOVFF  A60,F62
0172C:  BCF    F7F.6
0172E:  BCF    F7F.7
01730:  BSF    F7F.0
01732:  MOVF   F61,W
01734:  BTFSC  x62.7
01736:  BSF    FF2.7
01738:  MOVWF  x5E
.................... 	datal = read_eeprom(adress);
0173A:  MOVFF  FF2,A60
0173E:  BCF    FF2.7
01740:  MOVFF  A5D,F63
01744:  MOVFF  A5C,F62
01748:  BCF    F7F.6
0174A:  BCF    F7F.7
0174C:  BSF    F7F.0
0174E:  MOVF   F61,W
01750:  BTFSC  x60.7
01752:  BSF    FF2.7
01754:  MOVWF  x5F
.................... 	return (make16(datah, datal));
01756:  MOVFF  A5E,03
0175A:  MOVFF  A5F,01
0175E:  MOVFF  03,02
01762:  MOVLB  0
01764:  RETURN 0
.................... }
.................... 
.................... void write_word(int16 adress,int16 dado)
.................... {
.................... 	char xw;
.................... 	xw = dado >> 8;	
*
023AE:  MOVFF  A5F,A60
.................... 	write_eeprom(adress++, xw);
023B2:  MOVLB  A
023B4:  MOVF   x5D,W
023B6:  MOVWF  03
023B8:  MOVF   x5C,W
023BA:  INCF   x5C,F
023BC:  BTFSC  FD8.2
023BE:  INCF   x5D,F
023C0:  MOVWF  x61
023C2:  MOVFF  03,A62
023C6:  MOVF   FF2,W
023C8:  MOVWF  00
023CA:  BCF    FF2.7
023CC:  MOVFF  A62,F63
023D0:  MOVFF  A61,F62
023D4:  MOVFF  A60,F61
023D8:  BCF    F7F.6
023DA:  BCF    F7F.7
023DC:  BSF    F7F.2
023DE:  MOVLB  F
023E0:  MOVLW  55
023E2:  MOVWF  F7E
023E4:  MOVLW  AA
023E6:  MOVWF  F7E
023E8:  BSF    F7F.1
023EA:  BTFSC  F7F.1
023EC:  BRA    23EA
023EE:  BCF    F7F.2
023F0:  MOVF   00,W
023F2:  IORWF  FF2,F
.................... 	xw = dado;
023F4:  MOVFF  A5E,A60
.................... 	write_eeprom(adress, xw);
023F8:  MOVFF  FF2,00
023FC:  BCF    FF2.7
023FE:  MOVFF  A5D,F63
02402:  MOVFF  A5C,F62
02406:  MOVFF  A60,F61
0240A:  BCF    F7F.6
0240C:  BCF    F7F.7
0240E:  BSF    F7F.2
02410:  MOVLW  55
02412:  MOVWF  F7E
02414:  MOVLW  AA
02416:  MOVWF  F7E
02418:  BSF    F7F.1
0241A:  BTFSC  F7F.1
0241C:  BRA    241A
0241E:  BCF    F7F.2
02420:  MOVF   00,W
02422:  IORWF  FF2,F
02424:  MOVLB  0
02426:  RETURN 0
.................... }
.................... 
.................... void write_long(int16 adress,int32 dado)
.................... {
.................... 	write_eeprom(adress++,(dado >> 24));
*
01B0A:  MOVLB  A
01B0C:  MOVF   x7A,W
01B0E:  MOVWF  03
01B10:  MOVF   x79,W
01B12:  INCF   x79,F
01B14:  BTFSC  FD8.2
01B16:  INCF   x7A,F
01B18:  MOVWF  x7F
01B1A:  MOVFF  03,A80
01B1E:  MOVFF  A7E,A82
01B22:  CLRF   x83
01B24:  CLRF   x84
01B26:  CLRF   x85
01B28:  MOVF   FF2,W
01B2A:  MOVWF  00
01B2C:  BCF    FF2.7
01B2E:  MOVFF  A80,F63
01B32:  MOVFF  A7F,F62
01B36:  MOVFF  A82,F61
01B3A:  BCF    F7F.6
01B3C:  BCF    F7F.7
01B3E:  BSF    F7F.2
01B40:  MOVLB  F
01B42:  MOVLW  55
01B44:  MOVWF  F7E
01B46:  MOVLW  AA
01B48:  MOVWF  F7E
01B4A:  BSF    F7F.1
01B4C:  BTFSC  F7F.1
01B4E:  BRA    1B4C
01B50:  BCF    F7F.2
01B52:  MOVF   00,W
01B54:  IORWF  FF2,F
.................... 	write_eeprom(adress++,(dado >> 16));
01B56:  MOVLB  A
01B58:  MOVF   x7A,W
01B5A:  MOVWF  03
01B5C:  MOVF   x79,W
01B5E:  INCF   x79,F
01B60:  BTFSC  FD8.2
01B62:  INCF   x7A,F
01B64:  MOVWF  x7F
01B66:  MOVFF  03,A80
01B6A:  MOVFF  A7D,A82
01B6E:  MOVFF  A7E,A83
01B72:  CLRF   x84
01B74:  CLRF   x85
01B76:  MOVF   FF2,W
01B78:  MOVWF  00
01B7A:  BCF    FF2.7
01B7C:  MOVFF  A80,F63
01B80:  MOVFF  A7F,F62
01B84:  MOVFF  A82,F61
01B88:  BCF    F7F.6
01B8A:  BCF    F7F.7
01B8C:  BSF    F7F.2
01B8E:  MOVLB  F
01B90:  MOVLW  55
01B92:  MOVWF  F7E
01B94:  MOVLW  AA
01B96:  MOVWF  F7E
01B98:  BSF    F7F.1
01B9A:  BTFSC  F7F.1
01B9C:  BRA    1B9A
01B9E:  BCF    F7F.2
01BA0:  MOVF   00,W
01BA2:  IORWF  FF2,F
.................... 	write_eeprom(adress++,(dado >> 8));
01BA4:  MOVLB  A
01BA6:  MOVF   x7A,W
01BA8:  MOVWF  03
01BAA:  MOVF   x79,W
01BAC:  INCF   x79,F
01BAE:  BTFSC  FD8.2
01BB0:  INCF   x7A,F
01BB2:  MOVWF  x7F
01BB4:  MOVFF  03,A80
01BB8:  MOVFF  A7C,A82
01BBC:  MOVFF  A7D,A83
01BC0:  MOVFF  A7E,A84
01BC4:  CLRF   x85
01BC6:  MOVF   FF2,W
01BC8:  MOVWF  00
01BCA:  BCF    FF2.7
01BCC:  MOVFF  A80,F63
01BD0:  MOVFF  A7F,F62
01BD4:  MOVFF  A82,F61
01BD8:  BCF    F7F.6
01BDA:  BCF    F7F.7
01BDC:  BSF    F7F.2
01BDE:  MOVLB  F
01BE0:  MOVLW  55
01BE2:  MOVWF  F7E
01BE4:  MOVLW  AA
01BE6:  MOVWF  F7E
01BE8:  BSF    F7F.1
01BEA:  BTFSC  F7F.1
01BEC:  BRA    1BEA
01BEE:  BCF    F7F.2
01BF0:  MOVF   00,W
01BF2:  IORWF  FF2,F
.................... 	write_eeprom(adress,dado);
01BF4:  MOVFF  FF2,00
01BF8:  BCF    FF2.7
01BFA:  MOVFF  A7A,F63
01BFE:  MOVFF  A79,F62
01C02:  MOVFF  A7B,F61
01C06:  BCF    F7F.6
01C08:  BCF    F7F.7
01C0A:  BSF    F7F.2
01C0C:  MOVLW  55
01C0E:  MOVWF  F7E
01C10:  MOVLW  AA
01C12:  MOVWF  F7E
01C14:  BSF    F7F.1
01C16:  BTFSC  F7F.1
01C18:  BRA    1C16
01C1A:  BCF    F7F.2
01C1C:  MOVF   00,W
01C1E:  IORWF  FF2,F
01C20:  MOVLB  0
01C22:  RETURN 0
.................... }
.................... 
.................... int32 read_long(int16 adress)
.................... {
.................... 	char data1, data2, data3, data4;
.................... 	data1 = read_eeprom(adress++);
*
01A4E:  MOVLB  A
01A50:  MOVF   x7A,W
01A52:  MOVWF  03
01A54:  MOVF   x79,W
01A56:  INCF   x79,F
01A58:  BTFSC  FD8.2
01A5A:  INCF   x7A,F
01A5C:  MOVWF  x7F
01A5E:  MOVFF  03,A80
01A62:  MOVFF  FF2,A81
01A66:  BCF    FF2.7
01A68:  MOVFF  A80,F63
01A6C:  MOVFF  A7F,F62
01A70:  BCF    F7F.6
01A72:  BCF    F7F.7
01A74:  BSF    F7F.0
01A76:  MOVF   F61,W
01A78:  BTFSC  x81.7
01A7A:  BSF    FF2.7
01A7C:  MOVWF  x7B
.................... 	data2 = read_eeprom(adress++);
01A7E:  MOVF   x7A,W
01A80:  MOVWF  03
01A82:  MOVF   x79,W
01A84:  INCF   x79,F
01A86:  BTFSC  FD8.2
01A88:  INCF   x7A,F
01A8A:  MOVWF  x7F
01A8C:  MOVFF  03,A80
01A90:  MOVFF  FF2,A81
01A94:  BCF    FF2.7
01A96:  MOVFF  A80,F63
01A9A:  MOVFF  A7F,F62
01A9E:  BCF    F7F.6
01AA0:  BCF    F7F.7
01AA2:  BSF    F7F.0
01AA4:  MOVF   F61,W
01AA6:  BTFSC  x81.7
01AA8:  BSF    FF2.7
01AAA:  MOVWF  x7C
.................... 	data3 = read_eeprom(adress++);
01AAC:  MOVF   x7A,W
01AAE:  MOVWF  03
01AB0:  MOVF   x79,W
01AB2:  INCF   x79,F
01AB4:  BTFSC  FD8.2
01AB6:  INCF   x7A,F
01AB8:  MOVWF  x7F
01ABA:  MOVFF  03,A80
01ABE:  MOVFF  FF2,A81
01AC2:  BCF    FF2.7
01AC4:  MOVFF  A80,F63
01AC8:  MOVFF  A7F,F62
01ACC:  BCF    F7F.6
01ACE:  BCF    F7F.7
01AD0:  BSF    F7F.0
01AD2:  MOVF   F61,W
01AD4:  BTFSC  x81.7
01AD6:  BSF    FF2.7
01AD8:  MOVWF  x7D
.................... 	data4 = read_eeprom(adress);
01ADA:  MOVFF  FF2,A7F
01ADE:  BCF    FF2.7
01AE0:  MOVFF  A7A,F63
01AE4:  MOVFF  A79,F62
01AE8:  BCF    F7F.6
01AEA:  BCF    F7F.7
01AEC:  BSF    F7F.0
01AEE:  MOVF   F61,W
01AF0:  BTFSC  x7F.7
01AF2:  BSF    FF2.7
01AF4:  MOVWF  x7E
.................... 	return (make32(data1, data2, data3, data4));
01AF6:  MOVFF  A7B,03
01AFA:  MOVFF  A7C,02
01AFE:  MOVFF  A7D,01
01B02:  MOVFF  A7E,00
01B06:  MOVLB  0
01B08:  RETURN 0
.................... }
.................... 
.................... 
.................... // Purpose:    Write one bit to internal eeprom
.................... // Inputs:     1) An eeprom address
.................... //             2) The bit position (LSB == 0)
.................... //             3) The bit to write
.................... // Outputs:    None
.................... void write_bit(word address, char bitPosition, short data)
.................... {
....................    char stored_data;
.................... 
....................    stored_data = read_eeprom(address);
*
0E638:  MOVFF  FF2,A50
0E63C:  BCF    FF2.7
0E63E:  MOVFF  A4C,F63
0E642:  MOVFF  A4B,F62
0E646:  BCF    F7F.6
0E648:  BCF    F7F.7
0E64A:  BSF    F7F.0
0E64C:  MOVF   F61,W
0E64E:  MOVLB  A
0E650:  BTFSC  x50.7
0E652:  BSF    FF2.7
0E654:  MOVWF  x4F
.................... 
....................    if(data)
0E656:  MOVF   x4E,F
0E658:  BZ    E672
.................... 	   	{
....................     	bit_set(stored_data, bitPosition);
0E65A:  MOVLW  01
0E65C:  MOVWF  00
0E65E:  MOVF   x4D,W
0E660:  MOVWF  01
0E662:  BZ    E66C
0E664:  BCF    FD8.0
0E666:  RLCF   00,F
0E668:  DECFSZ 01,F
0E66A:  BRA    E664
0E66C:  MOVF   00,W
0E66E:  IORWF  x4F,F
....................    		}
0E670:  BRA    E68A
....................    else
....................    		{
....................       	bit_clear(stored_data, bitPosition);
0E672:  MOVLW  01
0E674:  MOVWF  00
0E676:  MOVF   x4D,W
0E678:  MOVWF  01
0E67A:  BZ    E684
0E67C:  BCF    FD8.0
0E67E:  RLCF   00,F
0E680:  DECFSZ 01,F
0E682:  BRA    E67C
0E684:  MOVF   00,W
0E686:  XORLW  FF
0E688:  ANDWF  x4F,F
.................... 		}
.................... 
....................    write_eeprom(address, stored_data);
0E68A:  MOVF   FF2,W
0E68C:  MOVWF  00
0E68E:  BCF    FF2.7
0E690:  MOVFF  A4C,F63
0E694:  MOVFF  A4B,F62
0E698:  MOVFF  A4F,F61
0E69C:  BCF    F7F.6
0E69E:  BCF    F7F.7
0E6A0:  BSF    F7F.2
0E6A2:  MOVLB  F
0E6A4:  MOVLW  55
0E6A6:  MOVWF  F7E
0E6A8:  MOVLW  AA
0E6AA:  MOVWF  F7E
0E6AC:  BSF    F7F.1
0E6AE:  BTFSC  F7F.1
0E6B0:  BRA    E6AE
0E6B2:  BCF    F7F.2
0E6B4:  MOVF   00,W
0E6B6:  IORWF  FF2,F
0E6B8:  MOVLB  0
0E6BA:  GOTO   E6DA (RETURN)
.................... }
.................... 
.................... // Purpose:    Read one bit from internal eeprom
.................... // Inputs:     1) An eeprom address
.................... //             2) The bit position (LSB == 0)
.................... // Outputs:    The bit read from internal eeprom
.................... short read_bit(word address, char bitPosition)
.................... {
....................    return bit_test(read_eeprom(address), bitPosition);
*
0257C:  MOVFF  FF2,A4D
02580:  BCF    FF2.7
02582:  MOVFF  A4B,F63
02586:  MOVFF  A4A,F62
0258A:  BCF    F7F.6
0258C:  BCF    F7F.7
0258E:  BSF    F7F.0
02590:  MOVF   F61,W
02592:  MOVLB  A
02594:  BTFSC  x4D.7
02596:  BSF    FF2.7
02598:  MOVWF  x4E
0259A:  MOVFF  A4E,00
0259E:  MOVF   x4C,W
025A0:  MOVWF  01
025A2:  BZ    25AC
025A4:  BCF    FD8.0
025A6:  RRCF   00,F
025A8:  DECFSZ 01,F
025AA:  BRA    25A4
025AC:  MOVLW  00
025AE:  BTFSC  00.0
025B0:  MOVLW  01
025B2:  MOVWF  01
025B4:  MOVLB  0
025B6:  GOTO   25CA (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 	
.................... 
.................... #include "st_prot.c"	//prototipos de funcoes
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: CP_MAIN                                                        *
.................... ; Funcao: MODULO PRINCIPAL DE CONTROLE CP_4000   						 *
.................... ; 		Conversor de protocolo MP400 / Modbus/RTU                        *
.................... ;		By Sultech For AGST
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 06/06/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... 
.................... // funcoes do relogio
.................... void rtc_init();
.................... 
.................... // funcoes do ad
.................... long int read_mcp(void) ;
.................... long int le_canal_0(void);
.................... long int le_canal_1(void);
.................... long int le_canal_2(void);
.................... long int le_canal_3(void);
.................... long int le_canal_4(void);
.................... long int le_canal_5(void);
.................... long int le_canal_6(void);
.................... long int le_canal_7(void);
.................... long int read_analog_mcp( byte canal );
.................... 
.................... // funcoes da e2prom interna
.................... //char read_byte(int16 adress);
.................... //void write_byte(int16 adress,char dado);
.................... //int16 read_word(int16 adress);
.................... //void write_word(int16 adress,int16 dado);
.................... 
.................... // funcoes diversas
.................... void calcula_checksum_vars (void);
.................... void verifica_checksum_vars (void);
.................... void calcula_tensao_corrente(void);
.................... 
.................... 
.................... 
.................... // funcoes do controle de consumo
.................... void zera_consumo(void);
.................... void zera_demandas(void);
.................... void inic_consumo(void);
.................... void grava_consumo_old(void);
.................... 
.................... 
.................... void kvar_requerido(char);
.................... void calc_fator_total(void);
.................... 
.................... 
.................... #if (com_regs == true)
.................... 		// funcoes de tratamento da flahs
.................... 		char Read_Status_Register(int32);
.................... 		char read_byte_flash(int32);
.................... 		char Read_ID(int32, char);
.................... 		void desprotege_flash(int32);
.................... 		// funcoes do controle de registros
.................... 		void tx_ocor_mdb(void);
.................... 		void grava_ocorrencias(char);
.................... 		void grava_registros(char);
.................... 		void grava_cht(char);
.................... 		void apaga_ocorrencias(void);
.................... 		void apaga_registros(void);
.................... 		void apaga_cht(void);
.................... 		void zera_chts(void);
.................... 		void zera_soma_reg(void);
.................... 		void tx_reg_mdb(void);
.................... #endif
.................... 
.................... #if (portatil == true)
.................... 	void calcula_autonomia(void);
.................... #endif
.................... #if (st9600r == true)
.................... 	#if (versao_pci_st96 >= 4)
.................... 		void atualiza_ganho(char);
.................... 		void pga_gain_set(int16, char); 
.................... 		void pga_chan_set(int16, char);
.................... 	#endif
.................... #endif
.................... 
.................... #if (com_display == true)
.................... 	// funcoes de tratamento do display 
.................... 	void limpa_display(void);
.................... 	void mensagem(char, char);
.................... 	void xprint_display(char, int16,char, char,char, char);
.................... 	void print_display(char, int16,char, char,char, char, char);
.................... 	void displayp(char, int16,char, char,char);
.................... #endif	
.................... 
.................... #if (com_menu == true)
.................... 	// funcoes do tratamendo dos menus	
.................... 	void encerra_menus(void);
.................... 	void fim_menu1(void);
.................... #endif
.................... 
.................... 
.................... #include "st_tabs.c"
.................... /*;**********************************************************************
.................... ; Empresa: Sultech Sistemas Eletrônicos									*
.................... ; Módulo: ST_TABS														*
.................... ; Função: Módulo de Definição de tabelas								*
.................... ; Responsável: Vagner Santos											*
.................... ; Inicio: 30/08/2000													*
.................... ;************************************************************************/
.................... 
.................... 
.................... const word tabela_ten[NRO_POSI_TEN]={	127,
.................... 										220,
.................... 										254};
.................... 
.................... const word tabela_baud[NRO_POSI_BAUD]={		2400,
.................... 											4800,
.................... 											9600,
.................... 											19200,
.................... 											38400,
.................... 											57600
.................... 											};
.................... 
.................... #if (portatil == TRUE)
.................... 	#if (se_com_flex ==	true)
.................... 		#if (versao_pci_st96 == 6)
.................... 			const signed word tab_ganho_fixo[NRO_POSI_TABELA_TIPO_PT]={
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0
.................... 																	};
.................... 		#else
.................... 			const signed word tab_ganho_fixo[NRO_POSI_TABELA_TIPO_PT]={
.................... 																	400,
.................... 																	200,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	0,
.................... 																	170,
.................... 																	170
.................... 																	};
.................... 		#endif
.................... 		const word tabela_pt[NRO_POSI_TABELA_TIPO_PT] = {20,
.................... 														200,
.................... 														50,
.................... 														200,
.................... 														1000,
.................... 														30,
.................... 														300,
.................... 														3000,
.................... 														1500,
.................... 														3000,
.................... 														60,
.................... 														300,
.................... 														600,
.................... 														3000,
.................... 														6000,
.................... 														400,
.................... 														1000,
.................... 														200,
.................... 														200,
.................... 														1000
.................... 														};
.................... 
.................... 		#define valor_ponteira_default	1000
.................... 		#define posi_ponteira_default	4
.................... 		#define INICIO_LEM	3+2
.................... 		#define FIM_LEM		5+2
.................... 		#define NRO_DE_PONTEIRAS 7
.................... 
.................... 		const word tabela_defasagem[NRO_POSI_TABELA_TIPO_PT] = {0,	//ST9001G / 20A
.................... 																0,	//ST9001G / 200A
.................... 																0,	//ST9002G / 50A
.................... 																0,	//ST9002G / 200A
.................... 																0,	//ST9002G / 1000A
.................... 																0,	//ST9009G / 30A
.................... 																0,	//ST9009G / 300A
.................... 																0,	//ST9009G / 3000A
.................... 																0,
.................... 																0,
.................... 																0,	
.................... 																0,	
.................... 																0,	
.................... 																0,	
.................... 																0,	
.................... 																0,
.................... 																0,
.................... 																0,
.................... 																0,
.................... 																0
.................... 																};
.................... 	
.................... 		const float tabela_mul_tc[NRO_POSI_TABELA_TIPO_PT] = {0.04,		//	20/500
.................... 															0.4,		//	200/500,
.................... 															0.2,		//	100/500
.................... 															0.4,		//	200/500
.................... 															2.0,		//	1000/500	
.................... 															0.06,		//	30/500
.................... 															0.6 		//	300/500
.................... 															6.0,		//  3000/500
.................... 															3.0,		//	1500/500,
.................... 															6.0,		//	3000/500,
.................... 															0.120,		//	60/500,
.................... 															0.6,		//	300/500,
.................... 															1.2,		//	600/500,
.................... 															6.0,		//	3000/500,
.................... 															12.0,		//	6000/500,
.................... 															0.8,		//	400/500,
.................... 															2.0,		//	1000/500,
.................... 															0.4,		//	200/500
.................... 															2.0,		//	1000/200,
.................... 															2.0			//	1000/500,
.................... 															};
.................... 
.................... 		const word tabela_div_cor[NRO_POSI_TABELA_TIPO_PT] = {128,		//  20/500
.................... 															128,		//	200/500,
.................... 															155,		//	50/500
.................... 															155,		//	200/500
.................... 															155,		//	1000/500	
.................... 															128,		//	30/500
.................... 															128,		//	300/500
.................... 															128,		//  3000/500
.................... 															128,		//	1500/500,
.................... 															128,		//	3000/500,
.................... 															128,		//	60/500,
.................... 															128,		//	300/500,
.................... 															128,		//	600/500,
.................... 															128,		//	3000/500,
.................... 															128,		//	6000/500,
.................... 															128,		//	400/500,
.................... 															128,		//	1000/500,
.................... 															128,		//	200/500
.................... 															128,		//	1000/200,
.................... 															128			//	1000/500,
.................... 															};
.................... 		const int32 tabela_div_pot[NRO_POSI_TABELA_TIPO_PT] = {728268 ,		//  20/500	//   valor padrão 520192
.................... 															728268,		//	200/500,
.................... 															881205,		//	50/500
.................... 															881205,		//	200/500
.................... 															881205,		//	1000/500	
.................... 															728268,		//	30/500
.................... 															728268,		//	300/500
.................... 															728268,		//  3000/500
.................... 															728268,		//	1500/500,
.................... 															728268,		//	3000/500,
.................... 															728268,		//	60/500,
.................... 															728268,		//	300/500,
.................... 															728268,		//	600/500,
.................... 															728268,		//	3000/500,
.................... 															728268,		//	6000/500,
.................... 															728268,		//	400/500,
.................... 															728268,		//	1000/500,
.................... 															728268,		//	200/500
.................... 															728268,		//	1000/200,
.................... 															728268			//	1000/500,
.................... 															};
.................... 
.................... 			
.................... 
.................... 		const word offset_lem_R[3] = {0,
.................... 									0,
.................... 									0
.................... 									};	
.................... 		const word offset_lem_S[3] = {0,
.................... 									0,
.................... 									0
.................... 									};	
.................... 		const word offset_lem_T[3] = {0,
.................... 									0,
.................... 									0
.................... 									};	
.................... 		#if(versao_pci_st96 == 4)
.................... 			const word ganhos_ponteiras[NRO_POSI_TABELA_TIPO_PT] = {
.................... 																	0b0100000000000011,	//ST9005G - 20A
.................... 																	0b0100000000000011,	//ST9005G - 200A
.................... 																	0b0100000000000111,	//ST9002G - 100  <> 50A minipa
.................... 																	0b0100000000000111,	//ST9002G - 200A Minipa
.................... 																	0b0100000000000000,	//ST9002G - 1000A Minipa
.................... 																	0b0100000000000000,	//ST9009G - 30A Lem
.................... 																	0b0100000000000000,	//ST9009G - 300A Lem
.................... 																	0b0100000000000000,	//ST9009G - 3000A lem
.................... 																	0b0100000000000001,	//ST9005G - 1500A
.................... 																	0b0100000000000001,	//ST9005G - 3000A
.................... 																	0b0100000000000111,	//ST9006G - 60A Flex
.................... 																	0b0100000000000111,	//ST9006G - 300A Flex
.................... 																	0b0100000000000111,	//ST9006G - 600A Flex
.................... 																	0b0100000000000110,	//ST9006G - 3000A Flex
.................... 																	0b0100000000000110,	//ST9006G - 6000A Flex
.................... 																	0b0100000000000001,	//ST9007G - 400A Instrutherm
.................... 																	0b0100000000000001,	//ST9007G - 1000A Instrutherm
.................... 																	0b0100000000000001,	//ST9008G - 200A Primata
.................... 																	0b0100000000000111	//ST9009G - 1000A Engro
.................... 																	0b0100000000000111	//ST9009G - 200A Engro
.................... 																	};
.................... 		#else
.................... 			const word ganhos_ponteiras[NRO_POSI_TABELA_TIPO_PT] = {
.................... 																	0b0100000000000011,	//ST9005G - 20A
.................... 																	0b0100000000000011,	//ST9005G - 200A
.................... 																	0b0100000000000101,	//ST9002G - 100  <> 50A minipa
.................... 																	0b0100000000000011,	//ST9002G - 200A Minipa
.................... 																	0b0100000000000000,	//ST9002G - 1000A Minipa
.................... 																	0b0100000000000000,	//ST9009G - 30A Lem
.................... 																	0b0100000000000000,	//ST9009G - 300A Lem
.................... 																	0b0100000000000000,	//ST9009G - 3000A lem
.................... 																	0b0100000000000001,	//ST9005G - 1500A
.................... 																	0b0100000000000001,	//ST9005G - 3000A
.................... 																	0b0100000000000111,	//ST9006G - 60A Flex
.................... 																	0b0100000000000111,	//ST9006G - 300A Flex
.................... 																	0b0100000000000111,	//ST9006G - 600A Flex
.................... 																	0b0100000000000110,	//ST9006G - 3000A Flex
.................... 																	0b0100000000000110,	//ST9006G - 6000A Flex
.................... 																	0b0100000000000001,	//ST9007G - 400A Instrutherm
.................... 																	0b0100000000000001,	//ST9007G - 1000A Instrutherm
.................... 																	0b0100000000000001,	//ST9008G - 200A Primata
.................... 																	0b0100000000000111	//ST9009G - 1000A Engro
.................... 																	0b0100000000000111	//ST9009G - 200A Engro
.................... 																	};
.................... 		#endif
.................... 																
.................... 	//MCP6S21
.................... 	//000 - 1
.................... 	//001 - 2
.................... 	//010 - 4
.................... 	//011 - 5
.................... 	//100 - 8
.................... 	//101 - 10
.................... 	//110 - 16
.................... 	//111 - 32
.................... 
.................... 		const char tab_modelo_pt[NRO_POSI_TABELA_TIPO_PT] = {
.................... 															117,
.................... 															118,
.................... 															111,
.................... 															112,
.................... 															113,
.................... 															114,
.................... 															115,
.................... 															116,
.................... 															119,
.................... 															120,
.................... 															121,
.................... 															122,
.................... 															123,
.................... 															124,
.................... 															125,
.................... 															126,
.................... 															127,
.................... 															128,
.................... 															129,
.................... 															130
.................... 															};
.................... 
.................... 	#else
.................... 		#if (ponteira_kyoritsu == true)
.................... 			const word tabela_tc[NRO_POSI_TC] = {	
.................... 												30,
.................... 												150,
.................... 												300,
.................... 												1000,
.................... 												1500,
.................... 												3000
.................... 												};
.................... 			#define valor_ponteira_default	1000
.................... 			#define posi_ponteira_default	3
.................... 
.................... 			const word ganhos_ponteiras[NRO_POSI_TC] = {0b0100000000000001,   	//ST9005G - Kyoritsu 30A
.................... 														0b0100000000000001,   	//ST9005G - Kyoritsu 150A
.................... 														0b0100000000000001,  	//ST9005G - Kyoritsu 300A
.................... 														0b0100000000000001,   	//ST9002G - Minipa 1000A
.................... 														0b0100000000000001,   	//ST9005G - Kyoritsu 1500A
.................... 														0b0100000000000001   	//ST9005G - Kyoritsu 3000A
.................... 														};
.................... 		#elif (viercon == true)
.................... 			const word tabela_tc[NRO_POSI_TC] = {	
.................... 												30,
.................... 												300,
.................... 												3000
.................... 												};
.................... 			const word tabela_vref_cr[NRO_POSI_TC] = {	
.................... 												2600,			//30
.................... 												2192,			//300
.................... 												2048			//3000 = vref
.................... 												};
.................... 			const word tabela_vref_cs[NRO_POSI_TC] = {	
.................... 												1436,			//30
.................... 												1866,			//300
.................... 												2048			//3000 = vref
.................... 												};
.................... 			const word tabela_vref_ct[NRO_POSI_TC] = {	
.................... 												2096,			//30
.................... 												2024,			//300
.................... 												2048			//3000 = vref
.................... 												};
.................... 
.................... 			#define defasagem_flex	6
.................... 
.................... 			#define valor_ponteira_default	3000
.................... 			#define posi_ponteira_default	2
.................... 			
.................... 												
.................... 		
.................... 		#else
.................... /*			const word tabela_tc[NRO_POSI_TC] = {	
.................... 												20,
.................... 												200,
.................... 												400,
.................... 												600,
.................... 												1000,
.................... 												1500,
.................... 												2000,
.................... 												3000,
.................... 												6000
.................... 												};*/
.................... 
.................... 			#define valor_ponteira_default	1000
.................... 			#define posi_ponteira_default	4
.................... 
.................... 			const word tabela_tc[NRO_POSI_TC] = {	
.................... 												50,
.................... 												200,
.................... 												400,
.................... 												600,
.................... 												1000,
.................... 												1500,
.................... 												30,
.................... 												300,
.................... 												3000
.................... 												};
.................... 
.................... 			const word tabela_defasagem[NRO_POSI_TC] = {	
.................... 														0,
.................... 														0,
.................... 														0,
.................... 														0,
.................... 														0,
.................... 														0,
.................... 														0,
.................... 														0,
.................... 														0
.................... 														};
.................... 
.................... 			const word ganho_ponteiras[NRO_POSI_TC] = {
.................... 														0b0100000000000011,   	// Ganho ponteira de 20A
.................... 														0b0100000000000011,   	// Ganho ponteira de 200A
.................... 														0b0100000000000001,   	// Ganho ponteira de 300A
.................... 														0b0100000000000001,   	// Ganho ponteira de 600A
.................... 														0b0100000000000000,   	// Ganho ponteira de 1000A
.................... 														0b0100000000000001,  	// Ganho ponteira de 1500A
.................... 														0b0100000000000001,   	// Ganho ponteira de 2000A
.................... 														0b0100000000000001,   	// Ganho ponteira de 3000A
.................... 														0b0100000000000001   	// Ganho ponteira de 6000A
.................... 														};
.................... 														
.................... 			const word offset_fixo_corrente[NRO_POSI_TC] = {
.................... 															0,   	// Ganho ponteira de 20A
.................... 															0,   	// Ganho ponteira de 200A
.................... 															0,   	// Ganho ponteira de 400A
.................... 															0,   	// Ganho ponteira de 600A
.................... 															0,   	// Ganho ponteira de 1000A
.................... 															0,  	// Ganho ponteira de 1500A
.................... 															120,   	// Ganho ponteira de 30A
.................... 															0,   	// Ganho ponteira de 300A
.................... 															0   	// Ganho ponteira de 3000A
.................... 															};
.................... 		#endif
.................... 	#endif
.................... #else
.................... 		const word tabela_tc[NRO_POSI_TC]={      
....................                                5,      //0
....................                               10,      //1
....................                               15,      //2
....................                               20,      //3
....................                               25,      //4
....................                               30,      //5
....................                               40,      //6
....................                               50,      //7
....................                               60,      //8
....................                               75,      //9
....................                               80,      //10
....................                               100,   //11
....................                               120,   //12
....................                               125,   //13
....................                               150,   //14
....................                               200,   //15
....................                               250,   //16
....................                               300,   //17
....................                               350,   //18
....................                               400,   //19
....................                               500,   //20
....................                               600,   //21
....................                               700,   //22
.................... 							  750,	 //23
....................                               800,   //24
....................                               1000,   //25
....................                               1200,   //26
....................                               1250,   //27
....................                               1500,   //28
....................                               1600,   //29
....................                               2000,   //30
....................                               2500,   //31
....................                               3000,   //32
....................                               3200,   //33
....................                               4000,   //34
....................                               5000,   //35
.................... 							  6000	  //36
....................                         };
.................... 									
.................... 
.................... #endif
.................... 
.................... #define NRO_POSI_INTERVALO 22
.................... 
.................... const word tabela_intervalo_reg[NRO_POSI_INTERVALO]={1,			/*1 1 segundo */
.................... 													2, 			/*2 2 segundo */
.................... 													3,			/*3 3 segundo */
.................... 													4,			/*4 4 segundo */
.................... 													5,			/*5 5 segundo */
.................... 													10,			/*6 10 segundo */
.................... 													15,			/*7 15 segundo */
.................... 													20,			/*8 20 segundo */
.................... 													30,			/*9 30 segundo */
.................... 													45,			/*10 45 segundo */
.................... 													60,			/*11 1 minuto */
.................... 													120,		/*12 2 minutos */
.................... 													180,		/*13 3 minutos */
.................... 													240,		/*14 4 minutos */
.................... 													300,		/*15 5 minutos */	
.................... 													600,		/*16 10 minutos */
.................... 													900,		//17 15 minutos em 08/03/2005, por solicitação do Carlos
.................... 													1200,		/*18 20 minutos */
.................... 													1800,		/*19 30 minutos */
.................... 													2400,		/*20 40 minutos */
.................... 													3000,		/*21 50 minutos */
.................... 													3600		/*22 60 minutos */
.................... 													};			
.................... 											
.................... 
.................... 							
.................... #if (prog_defasagem == true)
.................... 	#define nro_posi_tab_defasagem_trafo  7
.................... 	#define posi_tab_defasagem_trafo_default  3
.................... 	Const unsigned char tabela_defasagem_trafo[nro_posi_tab_defasagem_trafo]={16, 	//90
.................... 																			10,		//60
.................... 																			6,		//30
.................... 																			0,		//0
.................... 																			58,		//-30
.................... 																			54,		//-60
.................... 																			48		//-90
.................... 																			};
.................... 	#if (monofasico == true)
.................... 		Const unsigned char tabela_defasagem_trafo_ff[nro_posi_tab_defasagem_trafo]={32, 	//90
.................... 																				26,		//60
.................... 																				22,		//30
.................... 																				16,		//0
.................... 																				10,		//-30
.................... 																				6,		//-60
.................... 																				0		//-90
.................... 																				};
.................... 	#endif
.................... 	Const unsigned char tabela_angulos_defasagem[nro_posi_tab_defasagem_trafo]={90,
.................... 																				60,
.................... 																				30,
.................... 																				0,
.................... 																				30,
.................... 																				60,
.................... 																				90
.................... 																				};															
.................... #endif
.................... 
.................... 
.................... 	#if (novo_cht == true)
.................... const float TAB_SIN[NRO_AMOSTRAS_CHT+1]={
.................... 										0.000000000000000000,		//0
.................... 										0.052335956242943828,
.................... 										0.104528463267653460,
.................... 										0.156434465040230870,
.................... 										0.207911690817759310,
.................... 										0.258819045102520740,
.................... 										0.309016994374947400,
.................... 										0.358367949545300270,
.................... 										0.406736643075800150,
.................... 										0.453990499739546750,
.................... 										0.499999999999999940,		//10
.................... 										0.544639035015026970,
.................... 										0.587785252292473140,
.................... 										0.629320391049837500,
.................... 										0.669130606358858240,
.................... 										0.707106781186547460,
.................... 										0.743144825477394130,
.................... 										0.777145961456970900,
.................... 										0.809016994374947450,
.................... 										0.838670567945423940,
.................... 										0.866025403784438600,		//20
.................... 										0.891006524188367790,
.................... 										0.913545457642600870,
.................... 										0.933580426497201740,
.................... 										0.951056516295153530,
.................... 										0.965925826289068310,
.................... 										0.978147600733805690,
.................... 										0.987688340595137770,
.................... 										0.994521895368273290,
.................... 										0.998629534754573830,
.................... 										1.000000000000000000,		//30
.................... 										0.998629534754573830,
.................... 										0.994521895368273400,
.................... 										0.987688340595137770,
.................... 										0.978147600733805690,
.................... 										0.965925826289068310,
.................... 										0.951056516295153640,
.................... 										0.933580426497201740,
.................... 										0.913545457642600980,
.................... 										0.891006524188367900,
.................... 										0.866025403784438710,
.................... 										0.838670567945424270,
.................... 										0.809016994374947450,
.................... 										0.777145961456971010,
.................... 										0.743144825477394470,
.................... 										0.707106781186547570,
.................... 										0.669130606358858350,
.................... 										0.629320391049837390,
.................... 										0.587785252292473250,
.................... 										0.544639035015027310,
.................... 										0.499999999999999940,
.................... 										0.453990499739546860,
.................... 										0.406736643075800040,
.................... 										0.358367949545300210,
.................... 										0.309016994374947510,
.................... 										0.258819045102520570,
.................... 										0.207911690817759310,
.................... 										0.156434465040230980,
.................... 										0.104528463267653290,
.................... 										0.052335956242943807,
.................... 										0.000000000000000000,		//60
.................... 										-0.052335956242943564,
.................... 										-0.104528463267653050,
.................... 										-0.156434465040230730,
.................... 										-0.207911690817759070,
.................... 										-0.258819045102520350,
.................... 										-0.309016994374947280,
.................... 										-0.358367949545299990,
.................... 										-0.406736643075800210,
.................... 										-0.453990499739546690,
.................... 										-0.499999999999999720,		//70
.................... 										-0.544639035015027080,
.................... 										-0.587785252292473030,
.................... 										-0.629320391049837170,
.................... 										-0.669130606358858240,
.................... 										-0.707106781186547460,
.................... 										-0.743144825477394020,
.................... 										-0.777145961456970570,
.................... 										-0.809016994374947340,
.................... 										-0.838670567945424050,
.................... 										-0.866025403784438370,		//80
.................... 										-0.891006524188367790,
.................... 										-0.913545457642600530,
.................... 										-0.933580426497201850,
.................... 										-0.951056516295153530,
.................... 										-0.965925826289068310,		//85
.................... 										-0.978147600733805580,		//86
.................... 										-0.987688340595137660,
.................... 										-0.994521895368273290,
.................... 										-0.998629534754573940,
.................... 										-1.000000000000000000,
.................... 										-0.998629534754573830,
.................... 										-0.994521895368273400,
.................... 										-0.987688340595137770,
.................... 										-0.978147600733805580,
.................... 										-0.965925826289068200,
.................... 										-0.951056516295153640,
.................... 										-0.933580426497202080,
.................... 										-0.913545457642601090,
.................... 										-0.891006524188367900,
.................... 										-0.866025403784438600,
.................... 										-0.838670567945424270,
.................... 										-0.809016994374947560,
.................... 										-0.777145961456971350,
.................... 										-0.743144825477394020,
.................... 										-0.707106781186547680,
.................... 										-0.669130606358858130,
.................... 										-0.629320391049837840,
.................... 										-0.587785252292473360,
.................... 										-0.544639035015027750,
.................... 										-0.499999999999999670,
.................... 										-0.453990499739546970,
.................... 										-0.406736643075800150,
.................... 										-0.358367949545300770,
.................... 										-0.309016994374947620,
.................... 										-0.258819045102520680,
.................... 										-0.207911690817758980,
.................... 										-0.156434465040231090,
.................... 										-0.104528463267653420,
.................... 										-0.052335956242944369};
.................... 
.................... const float TAB_COS[NRO_AMOSTRAS_CHT+1]={
.................... 										1.000000000000000000,
.................... 										0.998629534754573830,
.................... 										0.994521895368273290,
.................... 										0.987688340595137770,
.................... 										0.978147600733805690,
.................... 										0.965925826289068310,
.................... 										0.951056516295153530,
.................... 										0.933580426497201740,
.................... 										0.913545457642600870,
.................... 										0.891006524188367900,
.................... 										0.866025403784438710,
.................... 										0.838670567945424050,
.................... 										0.809016994374947450,
.................... 										0.777145961456970900,
.................... 										0.743144825477394240,
.................... 										0.707106781186547570,
.................... 										0.669130606358858240,
.................... 										0.629320391049837500,
.................... 										0.587785252292473140,
.................... 										0.544639035015027200,
.................... 										0.500000000000000110,
.................... 										0.453990499739546800,
.................... 										0.406736643075800370,
.................... 										0.358367949545300380,
.................... 										0.309016994374947450,
.................... 										0.258819045102520740,
.................... 										0.207911690817759230,
.................... 										0.156434465040230920,
.................... 										0.104528463267653460,
.................... 										0.052335956242943744,
.................... 										0.000000000000000000,
.................... 										-0.052335956242943620,
.................... 										-0.104528463267653330,
.................... 										-0.156434465040230810,
.................... 										-0.207911690817759340,
.................... 										-0.258819045102520630,
.................... 										-0.309016994374947340,
.................... 										-0.358367949545300270,
.................... 										-0.406736643075800040,
.................... 										-0.453990499739546690,
.................... 										-0.499999999999999780,
.................... 										-0.544639035015026750,
.................... 										-0.587785252292473030,
.................... 										-0.629320391049837280,
.................... 										-0.669130606358857900,
.................... 										-0.707106781186547460,
.................... 										-0.743144825477394020,
.................... 										-0.777145961456970900,
.................... 										-0.809016994374947340,
.................... 										-0.838670567945423940,
.................... 										-0.866025403784438710,
.................... 										-0.891006524188367790,
.................... 										-0.913545457642600980,
.................... 										-0.933580426497201740,
.................... 										-0.951056516295153530,
.................... 										-0.965925826289068310,
.................... 										-0.978147600733805690,
.................... 										-0.987688340595137660,
.................... 										-0.994521895368273400,
.................... 										-0.998629534754573830,
.................... 										-1.000000000000000000,
.................... 										-0.998629534754573830,
.................... 										-0.994521895368273400,
.................... 										-0.987688340595137770,
.................... 										-0.978147600733805690,
.................... 										-0.965925826289068420,
.................... 										-0.951056516295153640,
.................... 										-0.933580426497201850,
.................... 										-0.913545457642600870,
.................... 										-0.891006524188367900,
.................... 										-0.866025403784438820,
.................... 										-0.838670567945424050,
.................... 										-0.809016994374947560,
.................... 										-0.777145961456971010,
.................... 										-0.743144825477394240,
.................... 										-0.707106781186547680,
.................... 										-0.669130606358858460,
.................... 										-0.629320391049837840,
.................... 										-0.587785252292473250,
.................... 										-0.544639035015026970,
.................... 										-0.500000000000000440,
.................... 										-0.453990499739546920,
.................... 										-0.406736643075800870,
.................... 										-0.358367949545299880,
.................... 										-0.309016994374947560,
.................... 										-0.258819045102520630,
.................... 										-0.207911690817759790,
.................... 										-0.156434465040231040,
.................... 										-0.104528463267654230,
.................... 										-0.052335956242943425,
.................... 										0.000000000000000000,
.................... 										0.052335956242943946,
.................... 										0.104528463267652990,
.................... 										0.156434465040230670,
.................... 										0.207911690817759430,
.................... 										0.258819045102521130,
.................... 										0.309016994374947230,
.................... 										0.358367949545299550,
.................... 										0.406736643075799760,
.................... 										0.453990499739546640,
.................... 										0.500000000000000110,
.................... 										0.544639035015026640,
.................... 										0.587785252292472920,
.................... 										0.629320391049836840,
.................... 										0.669130606358858460,
.................... 										0.707106781186547350,
.................... 										0.743144825477394240,
.................... 										0.777145961456970570,
.................... 										0.809016994374947340,
.................... 										0.838670567945423610,
.................... 										0.866025403784438820,
.................... 										0.891006524188367790,
.................... 										0.913545457642600980,
.................... 										0.933580426497201520,
.................... 										0.951056516295153530,
.................... 										0.965925826289068310,
.................... 										0.978147600733805690,
.................... 										0.987688340595137660,
.................... 										0.994521895368273290,
.................... 										0.998629534754573830};
.................... 
.................... 
.................... 
.................... 	#endif
.................... 
.................... #if(!VALORES_FIXOS_MAX)
.................... 	#if(st9600r)
.................... 		const signed word tab_valor_senoide_ten[64]={	2097,
.................... 														2146,
.................... 														2193,
.................... 														2239,
.................... 														2284,
.................... 														2326,
.................... 														2365,
.................... 														2402,
.................... 														2435,
.................... 														2464,
.................... 														2489,
.................... 														2510,
.................... 														2526,
.................... 														2538,
.................... 														2546,
.................... 														2548,
.................... 														2546,
.................... 														2538,
.................... 														2526,
.................... 														2510,
.................... 														2489,
.................... 														2464,
.................... 														2435,
.................... 														2402,
.................... 														2365,
.................... 														2326,
.................... 														2284,
.................... 														2239,
.................... 														2193,
.................... 														2146,
.................... 														2097,
.................... 														2048,
.................... 														1999,
.................... 														1950,
.................... 														1903,
.................... 														1857,
.................... 														1812,
.................... 														1770,
.................... 														1731,
.................... 														1694,
.................... 														1661,
.................... 														1632,
.................... 														1607,
.................... 														1586,
.................... 														1570,
.................... 														1558,
.................... 														1550,
.................... 														1548,
.................... 														1550,
.................... 														1558,
.................... 														1570,
.................... 														1586,
.................... 														1607,
.................... 														1632,
.................... 														1661,
.................... 														1694,
.................... 														1731,
.................... 														1770,
.................... 														1812,
.................... 														1857,
.................... 														1903,
.................... 														1950,
.................... 														1999,
.................... 														2048
.................... 														};
.................... 		
.................... 		const signed word tab_valor_senoide_cor[64]={	2097,
.................... 														2146,
.................... 														2193,
.................... 														2239,
.................... 														2284,
.................... 														2326,
.................... 														2365,
.................... 														2402,
.................... 														2435,
.................... 														2464,
.................... 														2489,
.................... 														2510,
.................... 														2526,
.................... 														2538,
.................... 														2546,
.................... 														2548,
.................... 														2546,
.................... 														2538,
.................... 														2526,
.................... 														2510,
.................... 														2489,
.................... 														2464,
.................... 														2435,
.................... 														2402,
.................... 														2365,
.................... 														2326,
.................... 														2284,
.................... 														2239,
.................... 														2193,
.................... 														2146,
.................... 														2097,
.................... 														2048,
.................... 														1999,
.................... 														1950,
.................... 														1903,
.................... 														1857,
.................... 														1812,
.................... 														1770,
.................... 														1731,
.................... 														1694,
.................... 														1661,
.................... 														1632,
.................... 														1607,
.................... 														1586,
.................... 														1570,
.................... 														1558,
.................... 														1550,
.................... 														1548,
.................... 														1550,
.................... 														1558,
.................... 														1570,
.................... 														1586,
.................... 														1607,
.................... 														1632,
.................... 														1661,
.................... 														1694,
.................... 														1731,
.................... 														1770,
.................... 														1812,
.................... 														1857,
.................... 														1903,
.................... 														1950,
.................... 														1999,
.................... 														2048
.................... 														};
.................... 	#elif(st8300c)
.................... 		const signed word tab_valor_senoide_cor[64]={	561,
.................... 														610,
.................... 														657,
.................... 														703,
.................... 														748,
.................... 														790,
.................... 														829,
.................... 														866,
.................... 														899,
.................... 														928,
.................... 														953,
.................... 														974,
.................... 														990,
.................... 														1002,
.................... 														1010,
.................... 														1012,
.................... 														1010,
.................... 														1002,
.................... 														990,
.................... 														974,
.................... 														953,
.................... 														928,
.................... 														899,
.................... 														866,
.................... 														829,
.................... 														790,
.................... 														748,
.................... 														703,
.................... 														657,
.................... 														610,
.................... 														561,
.................... 														512,
.................... 														463,
.................... 														414,
.................... 														367,
.................... 														321,
.................... 														276,
.................... 														234,
.................... 														195,
.................... 														158,
.................... 														125,
.................... 														96,
.................... 														71,
.................... 														50,
.................... 														34,
.................... 														22,
.................... 														14,
.................... 														12,
.................... 														14,
.................... 														22,
.................... 														34,
.................... 														50,
.................... 														71,
.................... 														96,
.................... 														125,
.................... 														158,
.................... 														195,
.................... 														234,
.................... 														276,
.................... 														321,
.................... 														367,
.................... 														414,
.................... 														463,
.................... 														512
.................... 														};
.................... 		const signed word tab_valor_senoide_ten[64]={	561,
.................... 														610,
.................... 														657,
.................... 														703,
.................... 														748,
.................... 														790,
.................... 														829,
.................... 														866,
.................... 														899,
.................... 														928,
.................... 														953,
.................... 														974,
.................... 														990,
.................... 														1002,
.................... 														1010,
.................... 														1012,
.................... 														1010,
.................... 														1002,
.................... 														990,
.................... 														974,
.................... 														953,
.................... 														928,
.................... 														899,
.................... 														866,
.................... 														829,
.................... 														790,
.................... 														748,
.................... 														703,
.................... 														657,
.................... 														610,
.................... 														561,
.................... 														512,
.................... 														463,
.................... 														414,
.................... 														367,
.................... 														321,
.................... 														276,
.................... 														234,
.................... 														195,
.................... 														158,
.................... 														125,
.................... 														96,
.................... 														71,
.................... 														50,
.................... 														34,
.................... 														22,
.................... 														14,
.................... 														12,
.................... 														14,
.................... 														22,
.................... 														34,
.................... 														50,
.................... 														71,
.................... 														96,
.................... 														125,
.................... 														158,
.................... 														195,
.................... 														234,
.................... 														276,
.................... 														321,
.................... 														367,
.................... 														414,
.................... 														463,
.................... 														512
.................... 														};
.................... 	#else
.................... 		const signed word tab_valor_senoide_cor[64]={	561,
.................... 														610,
.................... 														657,
.................... 														703,
.................... 														748,
.................... 														790,
.................... 														829,
.................... 														866,
.................... 														899,
.................... 														928,
.................... 														953,
.................... 														974,
.................... 														990,
.................... 														1002,
.................... 														1010,
.................... 														1012,
.................... 														1010,
.................... 														1002,
.................... 														990,
.................... 														974,
.................... 														953,
.................... 														928,
.................... 														899,
.................... 														866,
.................... 														829,
.................... 														790,
.................... 														748,
.................... 														703,
.................... 														657,
.................... 														610,
.................... 														561,
.................... 														512,
.................... 														463,
.................... 														414,
.................... 														367,
.................... 														321,
.................... 														276,
.................... 														234,
.................... 														195,
.................... 														158,
.................... 														125,
.................... 														96,
.................... 														71,
.................... 														50,
.................... 														34,
.................... 														22,
.................... 														14,
.................... 														12,
.................... 														14,
.................... 														22,
.................... 														34,
.................... 														50,
.................... 														71,
.................... 														96,
.................... 														125,
.................... 														158,
.................... 														195,
.................... 														234,
.................... 														276,
.................... 														321,
.................... 														367,
.................... 														414,
.................... 														463,
.................... 														512
.................... 														};
.................... 		const signed word tab_valor_senoide_ten[64]={	561,
.................... 														610,
.................... 														657,
.................... 														703,
.................... 														748,
.................... 														790,
.................... 														829,
.................... 														866,
.................... 														899,
.................... 														928,
.................... 														953,
.................... 														974,
.................... 														990,
.................... 														1002,
.................... 														1010,
.................... 														1012,
.................... 														1010,
.................... 														1002,
.................... 														990,
.................... 														974,
.................... 														953,
.................... 														928,
.................... 														899,
.................... 														866,
.................... 														829,
.................... 														790,
.................... 														748,
.................... 														703,
.................... 														657,
.................... 														610,
.................... 														561,
.................... 														512,
.................... 														463,
.................... 														414,
.................... 														367,
.................... 														321,
.................... 														276,
.................... 														234,
.................... 														195,
.................... 														158,
.................... 														125,
.................... 														96,
.................... 														71,
.................... 														50,
.................... 														34,
.................... 														22,
.................... 														14,
.................... 														12,
.................... 														14,
.................... 														22,
.................... 														34,
.................... 														50,
.................... 														71,
.................... 														96,
.................... 														125,
.................... 														158,
.................... 														195,
.................... 														234,
.................... 														276,
.................... 														321,
.................... 														367,
.................... 														414,
.................... 														463,
.................... 														512
.................... 														};
.................... 	#endif
.................... #else
.................... 	//Valores máximos de tensão e corrente: 254,3V e 127,1A
.................... 	const signed word tab_valor_senoide_ten[64]={	3,
.................... 													6,
.................... 													9,
.................... 													11,
.................... 													14,
.................... 													17,
.................... 													19,
.................... 													21,
.................... 													23,
.................... 													25,
.................... 													26,
.................... 													28,
.................... 													29,
.................... 													29,
.................... 													30,
.................... 													30,
.................... 													30,
.................... 													29,
.................... 													29,
.................... 													28,
.................... 													26,
.................... 													25,
.................... 													23,
.................... 													21,
.................... 													19,
.................... 													17,
.................... 													14,
.................... 													11,
.................... 													9,
.................... 													6,
.................... 													3,
.................... 													65536,
.................... 													65533,
.................... 													65530,
.................... 													65527,
.................... 													65525,
.................... 													65522,
.................... 													65519,
.................... 													65517,
.................... 													65515,
.................... 													65513,
.................... 													65511,
.................... 													65510,
.................... 													65508,
.................... 													65507,
.................... 													65507,
.................... 													65506,
.................... 													65506,
.................... 													65506,
.................... 													65507,
.................... 													65507,
.................... 													65508,
.................... 													65510,
.................... 													65511,
.................... 													65513,
.................... 													65515,
.................... 													65517,
.................... 													65519,
.................... 													65522,
.................... 													65525,
.................... 													65527,
.................... 													65530,
.................... 													65533,
.................... 													65536
.................... 													};
.................... 	
.................... 	const signed word tab_valor_senoide_cor[64]={	65101,
.................... 													65243,
.................... 													65389,
.................... 													0,
.................... 													147,
.................... 													293,
.................... 													435,
.................... 													574,
.................... 													707,
.................... 													833,
.................... 													952,
.................... 													1061,
.................... 													1160,
.................... 													1247,
.................... 													1323,
.................... 													1386,
.................... 													1435,
.................... 													1471,
.................... 													1493,
.................... 													1500,
.................... 													1493,
.................... 													1471,
.................... 													1435,
.................... 													1386,
.................... 													1323,
.................... 													1247,
.................... 													1160,
.................... 													1061,
.................... 													952,
.................... 													833,
.................... 													707,
.................... 													574,
.................... 													435,
.................... 													293,
.................... 													147,
.................... 													0,
.................... 													65389,
.................... 													65243,
.................... 													65101,
.................... 													64962,
.................... 													64829,
.................... 													64703,
.................... 													64584,
.................... 													64475,
.................... 													64376,
.................... 													64289,
.................... 													64213,
.................... 													64150,
.................... 													64101,
.................... 													64065,
.................... 													64043,
.................... 													64036,
.................... 													64043,
.................... 													64065,
.................... 													64101,
.................... 													64150,
.................... 													64213,
.................... 													64289,
.................... 													64376,
.................... 													64475,
.................... 													64584,
.................... 													64703,
.................... 													64829,
.................... 													64962
.................... 													};
.................... #endif
.................... 
.................... 
.................... #include "st_mens.c"
.................... /* mensagem.c
.................... 	area para definicao de mensagens
.................... */
.................... 
.................... /*                    1234567890123456789012345678901 */
.................... //							   
.................... //code char mdata[] ="ST5030T-V1.04@0001.A-2711030922";
.................... 
.................... const char csultech[30] = "Sultech";
.................... 
.................... const char cdata[]=__DATE__;			//10
.................... const char ctime[]=__TIME__;			//9
.................... 
.................... #if (com_rep == true)
.................... 		const char cequipo[22] = "ST8500C-V2.XX@0001.A";
.................... #endif
.................... #if (com_tc == true)
.................... 		const char cequipo[22] = "ST8500C-V2.XX@0001.B";
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #if (com_relogio == true)
.................... 	#include "ds1302.c"
.................... //////////////////////////////////////////////////////////////////////////
.................... ////                               DS1302.C                           ////
.................... ////                     Driver for Real Time Clock                   ////
.................... ////                                                                  ////
.................... ////  rtc_init()                                   Call after power up////
.................... ////                                                                  ////
.................... ////  rtc_set_datetime(day,mth,year,dow,hour,min)  Set the date/time  ////
.................... ////                                                                  ////
.................... ////  rtc_get_date(day,mth,year,dow)               Get the date       ////
.................... ////                                                                  ////
.................... ////  rtc_get_time(hr,min,sec)                     Get the time       ////
.................... ////                                                                  ////
.................... ////  rtc_write_nvr(address,data1)                  Write to NVR       ////
.................... ////                                                                  ////
.................... ////  data1 = rtc_read_nvr(address)                 Read from NVR      ////
.................... ////                                                                  ////
.................... //////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... 
.................... //equates de controle do relógio
.................... #define ds_controle_w 	0x8e		//10001110b
.................... #define ds_bateria_ini	0xa5		//10100101b
.................... #define ds_libera		0x00		//00000000b
.................... #define ds_proteje		0x80		//10000000b
.................... 
.................... //;VARIAVEIS DE LEITURA E ESCRITA NO RELOGIO/dallas
.................... //; VARIAVEIS NO CHIP dallas/RELO
.................... 
.................... #define ds_seg			0x00
.................... #define ds_min			0x01
.................... #define ds_hor			0x02
.................... #define ds_dia			0x03
.................... #define ds_mes			0x04
.................... #define ds_dia_semana	0x05
.................... #define ds_ano			0x06
.................... #define ds_controle		0x07
.................... #define ds_bateria		0x08
.................... 
.................... // Variáveis na RAM do Relógio
.................... 
.................... #define ds_ptr_regs			0x0A	//Expandindo tamanho para aumentar  o número de registros possíveis. 4 bytes
.................... #define ds_ptr_regs_high	0x0C	
.................... #define ds_ptr_ocor			0x0E
.................... #define ds_ptr_cht			0x10
.................... //							0x12
.................... #define ds_banco_leitura	0x13
.................... #define ds_banco_escrita	0x14
.................... #define ds_min_funciona		0x15
.................... #define ds_dia_old      	0x16
.................... #define ds_mes_old    		0x17
.................... #define ds_ano_old			0x18
.................... #define ds_hora_old			0x19
.................... #define	ds_minuto_old		0x1a
.................... #define ds_segundo_old		0x1b
.................... 
.................... //	#define ds_ptr_regs			0x0a
.................... //	#define ds_ptr_ocor			0x0c		
.................... //	#define ds_ptr_cht			0x0e
.................... //	#define ds_banco_leitura	0x10
.................... //	#define ds_banco_escrita	0x11
.................... //	#define ds_min_funciona		0x12
.................... //
.................... //	#define ds_dia_old      0x16	//equ	22
.................... //	#define ds_mes_old    	0x17	//equ	23
.................... //	#define ds_ano_old		0x18	//equ	24
.................... //	#define ds_hora_old		0x19	//equ	25
.................... //	#define	ds_minuto_old	0x1a	//equ	26
.................... //	#define ds_segundo_old	0x1b	//equ	27
.................... 
.................... 
.................... char dec_bcd(char dado)
.................... {
.................... 	char x;
.................... 	x = dado;
*
0BF02:  MOVFF  A4B,A4C
.................... 	dado = dado / 10;
0BF06:  MOVFF  A4B,A4D
0BF0A:  MOVLW  0A
0BF0C:  MOVLB  A
0BF0E:  MOVWF  x4E
0BF10:  MOVLB  0
0BF12:  RCALL  BED6
0BF14:  MOVFF  01,A4B
.................... 	swap(dado);
0BF18:  MOVLB  A
0BF1A:  SWAPF  x4B,F
.................... 	x = x % 10;
0BF1C:  MOVFF  A4C,A4D
0BF20:  MOVLW  0A
0BF22:  MOVWF  x4E
0BF24:  MOVLB  0
0BF26:  RCALL  BED6
0BF28:  MOVFF  00,A4C
.................... 	dado = x + dado;
0BF2C:  MOVLB  A
0BF2E:  MOVF   x4C,W
0BF30:  ADDWF  x4B,F
.................... 	return(dado);
0BF32:  MOVFF  A4B,01
0BF36:  MOVLB  0
0BF38:  RETURN 0
.................... }
.................... 
.................... char bcd_dec(char dado)
.................... {
.................... 	char x;
.................... 	x = dado;
*
04C74:  MOVFF  A4C,A4D
.................... 	dado = dado & 0b11110000;
04C78:  MOVLW  F0
04C7A:  MOVLB  A
04C7C:  ANDWF  x4C,F
.................... 	swap(dado);
04C7E:  SWAPF  x4C,F
.................... 	dado = dado * 10;
04C80:  MOVF   x4C,W
04C82:  MULLW  0A
04C84:  MOVFF  FF3,A4C
.................... 	x = x & 0b00001111;
04C88:  MOVLW  0F
04C8A:  ANDWF  x4D,F
.................... 	dado = x + dado;
04C8C:  MOVF   x4D,W
04C8E:  ADDWF  x4C,F
.................... 	return(dado);
04C90:  MOVFF  A4C,01
04C94:  MOVLB  0
04C96:  RETURN 0
.................... }
.................... 
.................... void write_ds1302_byte(byte cmd)
.................... {
.................... 	char aux_b1;
....................    output_low(RTC_IO);
*
04B86:  BCF    F94.1
04B88:  BCF    F8B.1
....................    output_low(RTC_SCLK);
04B8A:  BCF    F94.0
04B8C:  BCF    F8B.0
....................    for(aux_b1=0; aux_b1<=7; ++aux_b1)
04B8E:  MOVLB  A
04B90:  CLRF   x84
04B92:  MOVF   x84,W
04B94:  SUBLW  07
04B96:  BNC   4BB4
....................    		{
....................       	output_bit(RTC_IO, shift_right(&cmd,1,0) );
04B98:  BCF    FD8.0
04B9A:  RRCF   x83,F
04B9C:  BC    4BA2
04B9E:  BCF    F8B.1
04BA0:  BRA    4BA4
04BA2:  BSF    F8B.1
04BA4:  BCF    F94.1
....................       	output_high(RTC_SCLK);
04BA6:  BCF    F94.0
04BA8:  BSF    F8B.0
....................       	delay_cycles(2);
04BAA:  BRA    4BAC
....................       	output_low(RTC_SCLK);
04BAC:  BCF    F94.0
04BAE:  BCF    F8B.0
04BB0:  INCF   x84,F
04BB2:  BRA    4B92
....................    		}
04BB4:  MOVLB  0
04BB6:  RETURN 0
.................... }
.................... 
.................... void write_ds1302(byte cmd, byte data1)
.................... {
.................... 	#if (st5x == true)
.................... 		#if (cpu_rev1011 == true)
.................... 			spi_ocupada = true;
.................... 		#endif
.................... 	#endif
.................... 
....................    output_high(RTC_RST);
04BB8:  BCF    F98.4
04BBA:  BSF    F8F.4
....................    write_ds1302_byte(cmd);
04BBC:  MOVFF  A81,A83
04BC0:  RCALL  4B86
....................    write_ds1302_byte(data1);
04BC2:  MOVFF  A82,A83
04BC6:  RCALL  4B86
....................    output_low(RTC_RST);
04BC8:  BCF    F98.4
04BCA:  BCF    F8F.4
.................... 	#if (st5x == true)
04BCC:  RETURN 0
.................... 		#if (cpu_rev1011 == true)
.................... 			spi_ocupada = false;
.................... 		#endif
.................... 	#endif
....................    
.................... }
.................... 
.................... byte read_ds1302(byte cmd)
.................... {
....................    char data1, aux_b2;
....................    data1 = 0;
04BCE:  MOVLB  A
04BD0:  CLRF   x7E
.................... 	#if (st5x == true)
.................... 		#if (cpu_rev1011 == true)
.................... 			spi_ocupada = true;
.................... 		#endif
.................... 	#endif
....................    
....................    output_high(RTC_RST);
04BD2:  BCF    F98.4
04BD4:  BSF    F8F.4
....................    write_ds1302_byte(cmd);
04BD6:  MOVFF  A7D,A83
04BDA:  MOVLB  0
04BDC:  RCALL  4B86
.................... 
....................    output_float(RTC_IO);
04BDE:  BSF    F94.1
....................    for(aux_b2=0; aux_b2<=7; ++aux_b2)
04BE0:  MOVLB  A
04BE2:  CLRF   x7F
04BE4:  MOVF   x7F,W
04BE6:  SUBLW  07
04BE8:  BNC   4C06
....................    		{
....................       	shift_right(&data1,1,input(RTC_IO));
04BEA:  BSF    F94.1
04BEC:  BTFSC  F82.1
04BEE:  BRA    4BF4
04BF0:  BCF    FD8.0
04BF2:  BRA    4BF6
04BF4:  BSF    FD8.0
04BF6:  RRCF   x7E,F
....................       	output_high(RTC_SCLK);
04BF8:  BCF    F94.0
04BFA:  BSF    F8B.0
....................       	delay_cycles(2);
04BFC:  BRA    4BFE
....................       	output_low(RTC_SCLK);
04BFE:  BCF    F94.0
04C00:  BCF    F8B.0
04C02:  INCF   x7F,F
04C04:  BRA    4BE4
....................    		}
....................    output_low(RTC_RST);
04C06:  BCF    F98.4
04C08:  BCF    F8F.4
.................... 	#if (st5x == true)
.................... 		#if (cpu_rev1011 == true)
.................... 			spi_ocupada = false;
.................... 		#endif
.................... 	#endif
.................... 
....................    return(data1);
04C0A:  MOVFF  A7E,01
04C0E:  MOVLB  0
04C10:  RETURN 0
.................... }
.................... 
.................... void rtc_init()
.................... {
.................... 	#if (st5x == true)
.................... 		#if (cpu_rev1011 == true)
.................... 			spi_ocupada = true;
.................... 		#endif
.................... 	#endif
....................    output_low(RTC_RST);
04C12:  BCF    F98.4
04C14:  BCF    F8F.4
....................    output_low(RTC_SCLK);
04C16:  BCF    F94.0
04C18:  BCF    F8B.0
....................    write_ds1302(ds_controle_w,0);
04C1A:  MOVLW  8E
04C1C:  MOVLB  A
04C1E:  MOVWF  x81
04C20:  CLRF   x82
04C22:  MOVLB  0
04C24:  RCALL  4BB8
....................    delay_ms(1);
04C26:  MOVLW  01
04C28:  MOVLB  A
04C2A:  MOVWF  x67
04C2C:  MOVLB  0
04C2E:  CALL   1834
....................    write_ds1302(0x90,0xa6);
04C32:  MOVLW  90
04C34:  MOVLB  A
04C36:  MOVWF  x81
04C38:  MOVLW  A6
04C3A:  MOVWF  x82
04C3C:  MOVLB  0
04C3E:  RCALL  4BB8
....................    delay_ms(1);
04C40:  MOVLW  01
04C42:  MOVLB  A
04C44:  MOVWF  x67
04C46:  MOVLB  0
04C48:  CALL   1834
....................    data1 = read_ds1302(0x81);
04C4C:  MOVLW  81
04C4E:  MOVLB  A
04C50:  MOVWF  x7D
04C52:  MOVLB  0
04C54:  RCALL  4BCE
04C56:  MOVFF  01,3BE
....................    if((data1 & 0x80)!=0)
04C5A:  MOVLB  3
04C5C:  MOVF   xBE,W
04C5E:  ANDLW  80
04C60:  BZ    4C70
....................    		{
....................      	write_ds1302(0x80,0);
04C62:  MOVLW  80
04C64:  MOVLB  A
04C66:  MOVWF  x81
04C68:  CLRF   x82
04C6A:  MOVLB  0
04C6C:  RCALL  4BB8
04C6E:  MOVLB  3
....................      	}
04C70:  MOVLB  0
04C72:  RETURN 0
.................... }
.................... 
.................... void rtc_set_datetime()
.................... {
....................    write_ds1302(0x86,dec_bcd(dia));
*
0BF3A:  MOVFF  3BF,A4B
0BF3E:  RCALL  BF02
0BF40:  MOVFF  01,A4B
0BF44:  MOVLW  86
0BF46:  MOVLB  A
0BF48:  MOVWF  x81
0BF4A:  MOVFF  01,A82
0BF4E:  MOVLB  0
0BF50:  CALL   4BB8
....................    write_ds1302(0x88,dec_bcd(mes));
0BF54:  MOVFF  3C0,A4B
0BF58:  RCALL  BF02
0BF5A:  MOVFF  01,A4B
0BF5E:  MOVLW  88
0BF60:  MOVLB  A
0BF62:  MOVWF  x81
0BF64:  MOVFF  01,A82
0BF68:  MOVLB  0
0BF6A:  CALL   4BB8
....................    write_ds1302(0x8c,dec_bcd(ano));
0BF6E:  MOVFF  3C1,A4B
0BF72:  RCALL  BF02
0BF74:  MOVFF  01,A4B
0BF78:  MOVLW  8C
0BF7A:  MOVLB  A
0BF7C:  MOVWF  x81
0BF7E:  MOVFF  01,A82
0BF82:  MOVLB  0
0BF84:  CALL   4BB8
....................    write_ds1302(0x84,dec_bcd(hora));
0BF88:  MOVFF  3C2,A4B
0BF8C:  RCALL  BF02
0BF8E:  MOVFF  01,A4B
0BF92:  MOVLW  84
0BF94:  MOVLB  A
0BF96:  MOVWF  x81
0BF98:  MOVFF  01,A82
0BF9C:  MOVLB  0
0BF9E:  CALL   4BB8
....................    write_ds1302(0x82,dec_bcd(minuto));
0BFA2:  MOVFF  3C3,A4B
0BFA6:  RCALL  BF02
0BFA8:  MOVFF  01,A4B
0BFAC:  MOVLW  82
0BFAE:  MOVLB  A
0BFB0:  MOVWF  x81
0BFB2:  MOVFF  01,A82
0BFB6:  MOVLB  0
0BFB8:  CALL   4BB8
....................    write_ds1302(0x80,dec_bcd(segundo));
0BFBC:  MOVFF  3C4,A4B
0BFC0:  RCALL  BF02
0BFC2:  MOVFF  01,A4B
0BFC6:  MOVLW  80
0BFC8:  MOVLB  A
0BFCA:  MOVWF  x81
0BFCC:  MOVFF  01,A82
0BFD0:  MOVLB  0
0BFD2:  CALL   4BB8
0BFD6:  RETURN 0
.................... }
.................... 
.................... void rtc_get_date()
.................... {
....................    dia = bcd_dec(read_ds1302(0x87));
*
04C98:  MOVLW  87
04C9A:  MOVLB  A
04C9C:  MOVWF  x7D
04C9E:  MOVLB  0
04CA0:  RCALL  4BCE
04CA2:  MOVFF  01,A4A
04CA6:  MOVFF  01,A4C
04CAA:  RCALL  4C74
04CAC:  MOVFF  01,3BF
....................    mes = bcd_dec(read_ds1302(0x89));
04CB0:  MOVLW  89
04CB2:  MOVLB  A
04CB4:  MOVWF  x7D
04CB6:  MOVLB  0
04CB8:  RCALL  4BCE
04CBA:  MOVFF  01,A4A
04CBE:  MOVFF  01,A4C
04CC2:  RCALL  4C74
04CC4:  MOVFF  01,3C0
....................    ano = bcd_dec(read_ds1302(0x8d));
04CC8:  MOVLW  8D
04CCA:  MOVLB  A
04CCC:  MOVWF  x7D
04CCE:  MOVLB  0
04CD0:  RCALL  4BCE
04CD2:  MOVFF  01,A4A
04CD6:  MOVFF  01,A4C
04CDA:  RCALL  4C74
04CDC:  MOVFF  01,3C1
04CE0:  RETURN 0
.................... }
.................... 
.................... 
.................... void rtc_get_time()
.................... {
....................    	segundo = bcd_dec(read_ds1302(0x81));
04CE2:  MOVLW  81
04CE4:  MOVLB  A
04CE6:  MOVWF  x7D
04CE8:  MOVLB  0
04CEA:  RCALL  4BCE
04CEC:  MOVFF  01,A4A
04CF0:  MOVFF  01,A4C
04CF4:  RCALL  4C74
04CF6:  MOVFF  01,3C4
....................    	minuto = bcd_dec(read_ds1302(0x83));
04CFA:  MOVLW  83
04CFC:  MOVLB  A
04CFE:  MOVWF  x7D
04D00:  MOVLB  0
04D02:  RCALL  4BCE
04D04:  MOVFF  01,A4A
04D08:  MOVFF  01,A4C
04D0C:  RCALL  4C74
04D0E:  MOVFF  01,3C3
.................... 	hora = bcd_dec(read_ds1302(0x85));
04D12:  MOVLW  85
04D14:  MOVLB  A
04D16:  MOVWF  x7D
04D18:  MOVLB  0
04D1A:  RCALL  4BCE
04D1C:  MOVFF  01,A4A
04D20:  MOVFF  01,A4C
04D24:  RCALL  4C74
04D26:  MOVFF  01,3C2
04D2A:  RETURN 0
.................... }
.................... 
.................... void le_calend(void)
.................... {
....................    char dado;
....................    segundo = bcd_dec(read_ds1302(0x81));
*
149FE:  MOVLW  81
14A00:  MOVLB  A
14A02:  MOVWF  x7D
14A04:  MOVLB  0
14A06:  CALL   4BCE
14A0A:  MOVFF  01,A4B
14A0E:  MOVFF  01,A4C
14A12:  CALL   4C74
14A16:  MOVFF  01,3C4
....................    dado = bcd_dec(read_ds1302(0x83));
14A1A:  MOVLW  83
14A1C:  MOVLB  A
14A1E:  MOVWF  x7D
14A20:  MOVLB  0
14A22:  CALL   4BCE
14A26:  MOVFF  01,A4B
14A2A:  MOVFF  01,A4C
14A2E:  CALL   4C74
14A32:  MOVFF  01,A4A
....................    if (dado != minuto)
14A36:  MOVLB  3
14A38:  MOVF   xC3,W
14A3A:  MOVLB  A
14A3C:  SUBWF  x4A,W
14A3E:  BZ    14AE0
.................... 		{
....................    		minuto = dado;
14A40:  MOVFF  A4A,3C3
....................    		viroumin = 1;
14A44:  BSF    1F.2
.................... 		dado = bcd_dec(read_ds1302(0x85));
14A46:  MOVLW  85
14A48:  MOVWF  x7D
14A4A:  MOVLB  0
14A4C:  CALL   4BCE
14A50:  MOVFF  01,A4B
14A54:  MOVFF  01,A4C
14A58:  CALL   4C74
14A5C:  MOVFF  01,A4A
.................... 		if (dado != hora)
14A60:  MOVLB  3
14A62:  MOVF   xC2,W
14A64:  MOVLB  A
14A66:  SUBWF  x4A,W
14A68:  BZ    14AE0
.................... 			{
.................... 			hora = dado;
14A6A:  MOVFF  A4A,3C2
.................... 			virouhora = true;
14A6E:  BSF    1F.3
....................    			dado = bcd_dec(read_ds1302(0x87));
14A70:  MOVLW  87
14A72:  MOVWF  x7D
14A74:  MOVLB  0
14A76:  CALL   4BCE
14A7A:  MOVFF  01,A4B
14A7E:  MOVFF  01,A4C
14A82:  CALL   4C74
14A86:  MOVFF  01,A4A
....................    			if (dado != dia)
14A8A:  MOVLB  3
14A8C:  MOVF   xBF,W
14A8E:  MOVLB  A
14A90:  SUBWF  x4A,W
14A92:  BZ    14AE0
....................    				{
.................... 	   			dia = dado;
14A94:  MOVFF  A4A,3BF
.................... 	   			viroudia = 1;
14A98:  BSF    1F.4
.................... 				dado = bcd_dec(read_ds1302(0x89));
14A9A:  MOVLW  89
14A9C:  MOVWF  x7D
14A9E:  MOVLB  0
14AA0:  CALL   4BCE
14AA4:  MOVFF  01,A4B
14AA8:  MOVFF  01,A4C
14AAC:  CALL   4C74
14AB0:  MOVFF  01,A4A
.................... 				if (dado != mes)
14AB4:  MOVLB  3
14AB6:  MOVF   xC0,W
14AB8:  MOVLB  A
14ABA:  SUBWF  x4A,W
14ABC:  BZ    14AE0
.................... 					{
.................... 					viroumes = 1;
14ABE:  BSF    1F.5
.................... 					mes = dado;
14AC0:  MOVFF  A4A,3C0
.................... 					ano = bcd_dec(read_ds1302(0x8d));
14AC4:  MOVLW  8D
14AC6:  MOVWF  x7D
14AC8:  MOVLB  0
14ACA:  CALL   4BCE
14ACE:  MOVFF  01,A4B
14AD2:  MOVFF  01,A4C
14AD6:  CALL   4C74
14ADA:  MOVFF  01,3C1
14ADE:  MOVLB  A
.................... 					}
.................... 				}
.................... 			}
.................... 		}
14AE0:  MOVLB  0
14AE2:  RETURN 0
.................... }
.................... 
.................... void rtc_write_nvr(byte address,byte data1)
.................... {
....................    address = address << 1;
*
057E8:  BCF    FD8.0
057EA:  MOVLB  A
057EC:  RLCF   x7E,F
....................    write_ds1302((address | 0xc0),data1);
057EE:  MOVF   x7E,W
057F0:  IORLW  C0
057F2:  MOVWF  x80
057F4:  MOVWF  x81
057F6:  MOVFF  A7F,A82
057FA:  MOVLB  0
057FC:  CALL   4BB8
05800:  RETURN 0
.................... }
.................... 
.................... byte rtc_read_nvr(byte address) 
.................... {
....................   	address = address << 1;
*
054B2:  BCF    FD8.0
054B4:  MOVLB  A
054B6:  RLCF   x7B,F
....................     return(read_ds1302( (address | 0xc1) ));
054B8:  MOVF   x7B,W
054BA:  IORLW  C1
054BC:  MOVWF  x7C
054BE:  MOVWF  x7D
054C0:  MOVLB  0
054C2:  CALL   4BCE
054C6:  MOVF   01,W
054C8:  RETURN 0
.................... }
.................... 
.................... 
.................... int16 read_word_nvr(char adress)
.................... {
.................... 	data1_int = rtc_read_nvr(adress++); 
054CA:  MOVLB  A
054CC:  MOVF   x79,W
054CE:  INCF   x79,F
054D0:  MOVWF  x7A
054D2:  MOVWF  x7B
054D4:  MOVLB  0
054D6:  RCALL  54B2
054D8:  MOVLB  3
054DA:  CLRF   xF0
054DC:  MOVFF  01,3EF
.................... 	data1 = rtc_read_nvr(adress);
054E0:  MOVFF  A79,A7B
054E4:  MOVLB  0
054E6:  RCALL  54B2
054E8:  MOVFF  01,3BE
.................... 	data1_int = (data1_int << 8 ) | data1;
054EC:  MOVFF  3EF,3F0
054F0:  MOVLB  A
054F2:  CLRF   x7A
054F4:  MOVF   x7A,W
054F6:  MOVLB  3
054F8:  IORWF  xBE,W
054FA:  MOVWF  xEF
054FC:  MOVLB  3
.................... 	return (data1_int);
054FE:  MOVFF  3EF,01
05502:  MOVFF  3F0,02
05506:  MOVLB  0
05508:  RETURN 0
.................... }
.................... 
.................... void write_word_nvr(char adress,int16 dado)
.................... {
.................... 	char xdado;
.................... 	xdado = dado >> 8;	
*
05802:  MOVFF  A7B,A7C
.................... 	rtc_write_nvr(adress++, xdado);
05806:  MOVLB  A
05808:  MOVF   x79,W
0580A:  INCF   x79,F
0580C:  MOVWF  x7D
0580E:  MOVWF  x7E
05810:  MOVFF  A7C,A7F
05814:  MOVLB  0
05816:  RCALL  57E8
.................... 	xdado = dado;
05818:  MOVFF  A7A,A7C
.................... 	rtc_write_nvr(adress, xdado);
0581C:  MOVFF  A79,A7E
05820:  MOVFF  A7C,A7F
05824:  RCALL  57E8
05826:  RETURN 0
.................... }
.................... 
.................... int16 read_byte_nvr(char adress)
.................... {
.................... 	return (rtc_read_nvr(adress));
*
0731A:  MOVFF  A4F,A7B
0731E:  CALL   54B2
07322:  CLRF   02
07324:  RETURN 0
.................... }
.................... 
.................... void write_byte_nvr(char adress,char dado)
.................... {
.................... 	rtc_write_nvr(adress, dado);
*
05F64:  MOVFF  A6B,A7E
05F68:  MOVFF  A6C,A7F
05F6C:  RCALL  57E8
05F6E:  RETURN 0
.................... }
.................... 
.................... 
.................... void wr_segundo_old(void)
.................... {
.................... 	rtc_write_nvr(ds_segundo_old,segundo);
*
16FF6:  MOVLW  1B
16FF8:  MOVLB  A
16FFA:  MOVWF  x7E
16FFC:  MOVFF  3C4,A7F
17000:  MOVLB  0
17002:  CALL   57E8
17006:  GOTO   17324 (RETURN)
.................... }
.................... 
.................... void wr_tempo_old(void)
.................... {
.................... 	rtc_write_nvr(ds_dia_old,dia);
*
173A0:  MOVLW  16
173A2:  MOVLB  A
173A4:  MOVWF  x7E
173A6:  MOVFF  3BF,A7F
173AA:  MOVLB  0
173AC:  CALL   57E8
.................... 	rtc_write_nvr(ds_mes_old,mes);
173B0:  MOVLW  17
173B2:  MOVLB  A
173B4:  MOVWF  x7E
173B6:  MOVFF  3C0,A7F
173BA:  MOVLB  0
173BC:  CALL   57E8
.................... 	rtc_write_nvr(ds_ano_old,ano);
173C0:  MOVLW  18
173C2:  MOVLB  A
173C4:  MOVWF  x7E
173C6:  MOVFF  3C1,A7F
173CA:  MOVLB  0
173CC:  CALL   57E8
.................... 	rtc_write_nvr(ds_hora_old,hora);
173D0:  MOVLW  19
173D2:  MOVLB  A
173D4:  MOVWF  x7E
173D6:  MOVFF  3C2,A7F
173DA:  MOVLB  0
173DC:  CALL   57E8
.................... 	rtc_write_nvr(ds_minuto_old,minuto);
173E0:  MOVLW  1A
173E2:  MOVLB  A
173E4:  MOVWF  x7E
173E6:  MOVFF  3C3,A7F
173EA:  MOVLB  0
173EC:  CALL   57E8
173F0:  GOTO   1741A (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... #endif
.................... #include "st_conf.c"
.................... /************************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÿÔNICOS                                 *
.................... ; Modulo: ST_CONF                                                       *
.................... ; Funcao: MODULO de configuracoes				   						*
.................... ; 		REGISTRADOR ST9600R                       						*
.................... ; Responsavel: VAGNER SANTOS											*
.................... ; Modificado ; VAGNER SANTOS                                            *
.................... ; Inicio: 06/06/2003                                                    *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                   *
.................... ;************************************************************************/
.................... /* config.c
.................... 	Configuracao e tratamento de e2prom
.................... */
.................... 
.................... /* definicacao de variaveis auxiliares */
.................... char checksum_vars;
.................... 
.................... #if (funcao_505 == true)
.................... 	void inic_tensoes_505(void);
.................... #endif
.................... 
.................... void calcula_fundo_escala_corrente(void);
.................... #if (com_cht == true)
.................... 	void zera_chts(void);
.................... #endif
.................... 
.................... #if (com_menu == true)
.................... 	void reinicializa_menus(void);
.................... #endif
.................... 
.................... #if (tc_fixo == true)
.................... 	void busca_mul_tc(void);
.................... 	void calcula_mul_tc(void);
.................... #endif
.................... 
.................... void zera_soma_pot(void);
.................... 
.................... 
.................... #if (controlador == true) || (st_prog == true)
.................... 	#if (st8500c == true)
.................... 		void vali_nro_cargas(void);	    	
.................... 		void recupera_tempos_acionamentos(void);
.................... 		void desligar_carga(char);
.................... 		void busca_demanda_contratada(void);
.................... 	#else
.................... 		void vali_nro_bancos_capacitor(void);	    	
.................... 		void recupera_tempos_acionamentos(void);
.................... 		void desligar_banco(char);
.................... 	#endif
.................... 	#if (com_rep == true)
.................... 		void fecha_periodo(void);   
.................... 		void recupera_rep(void);
.................... 	#endif
.................... #endif
.................... 
.................... #if (portatil == true)
.................... 	void decide_que_ponteira(void);
.................... #endif	
.................... 
.................... void assume_defaults(void);
.................... 
.................... 
.................... void inicializa_flags_alarmes(void)
.................... {
.................... 	gravou = false;
*
025FA:  BCF    20.5
.................... 	programando = 0;
025FC:  BCF    29.5
.................... 	retardo_alarmes = 60;
025FE:  MOVLW  3C
02600:  MOVLB  3
02602:  MOVWF  xF5
.................... 	ferro_rep = false;
02604:  BCF    2C.3
.................... 	fp_ind = 0;
02606:  BCF    22.7
.................... 	fp_cap = 0;
02608:  BCF    23.0
.................... 	ten_a_r = 0;
0260A:  BCF    23.1
.................... 	ten_b_r = 0;
0260C:  BCF    23.2
.................... 	cor_a_r = 0;
0260E:  BCF    23.3
.................... 	ffase_r = 0;
02610:  BCF    23.6
....................    	tem_alarme = 0;
02612:  BCF    22.4
.................... 	sentido_r = 0;
02614:  BCF    22.6
.................... 	#if (monofasico == false)
.................... 		ten_a_s = 0;
02616:  BCF    27.5
.................... 		ten_a_t = 0;
02618:  BCF    27.6
.................... 		ten_b_s = 0;
0261A:  BCF    27.7
.................... 		ten_b_t = 0;
0261C:  BCF    28.0
.................... 		cor_a_s = 0;
0261E:  BCF    28.1
.................... 		cor_a_t = 0;
02620:  BCF    28.2
.................... 		chtt_a = 0;
02622:  BCF    23.4
.................... 		chtc_a = 0;
02624:  BCF    23.5
.................... 		ffase_s = 0;
02626:  BCF    28.3
.................... 		ffase_t = 0;
02628:  BCF    28.4
.................... 		sentido_s = 0;
0262A:  BCF    27.3
.................... 		sentido_t = 0;
0262C:  BCF    27.4
.................... 	#endif
.................... 	
.................... #if (CONTROLADOR == true) || (st_prog == true)
.................... 	saturou_kw = 0;
0262E:  BCF    26.1
.................... 	saturou_kvar = 0;
02630:  BCF    26.2
.................... #endif
.................... 
.................... 	#if (controlador == true)
.................... 		falta_capacitor = false;
02632:  BCF    27.2
.................... 	#endif
.................... 	#if (st8500c == true)
.................... 		fprintar = false;
02634:  BCF    26.5
.................... 	#endif
.................... 	
.................... 	tem_comando_alarme = 0;
02636:  BCF    24.2
.................... 	calcular_frequencia = 0;
02638:  BCF    21.1
.................... 	calculando_freq = 0;
0263A:  BCF    21.2
.................... 	freq_50hz = 0;
0263C:  BCF    21.3
.................... 
.................... #if (tratar_localizacao == true)
.................... 	existe_local = read_bit(ee_bits_menu2, EE_EXISTE_LOCAL);
.................... 	digitou_texto = read_bit(ee_bits_menu2, EE_DIGITOU_TEXTO);
.................... #endif
.................... 	#if (com_menu == true)
.................... 		reinicializa_menus();
0263E:  MOVLB  0
02640:  RCALL  25BA
.................... 	#endif
02642:  RETURN 0
.................... 	
.................... 
.................... }
.................... 
.................... 
.................... #if (portatil == true)
.................... 	#if (se_com_flex ==	true)
.................... 		void config_ponteiras(void)
.................... 		{
.................... 			recarrega_ponteira = false;
.................... 			aux_w2 = ee_os_cor_r_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				os_cor_pt_r[aux_b1] = read_byte(aux_w2++);
.................... 				os_cor_pt_s[aux_b1] = read_byte(aux_w2++);
.................... 				os_cor_pt_t[aux_b1] = read_byte(aux_w2++);
.................... 				}
.................... 			aux_w2 = ee_off_fp_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				off_set_fp[aux_b1] = read_byte(aux_w2++);
.................... 				}
.................... 			aux_w2 = ee_os_pot_r_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				os_pot_pt_r[aux_b1] = read_byte(aux_w2++);
.................... 				os_pot_pt_s[aux_b1] = read_byte(aux_w2++);
.................... 				os_pot_pt_t[aux_b1] = read_byte(aux_w2++);
.................... 				}
.................... 
.................... 			os_cor_r = os_cor_pt_r[tipo_ponteira];
.................... 			os_cor_s = os_cor_pt_s[tipo_ponteira];
.................... 			os_cor_t = os_cor_pt_t[tipo_ponteira];
.................... 			os_pot_r = os_pot_pt_r[tipo_ponteira];
.................... 			os_pot_s = os_pot_pt_s[tipo_ponteira];
.................... 			os_pot_t = os_pot_pt_t[tipo_ponteira];
.................... 			
.................... 			off_cor_r = off_set_fp[tipo_ponteira];
.................... 
.................... 		}
.................... 	#endif
.................... #endif	
.................... 
.................... #if (st8500c == true)
.................... 	void inicializa_8500c(void)
.................... 	{
.................... 		consumo_ati = read_long(ee_consumo_ati);	
*
01E86:  MOVLW  01
01E88:  MOVLB  A
01E8A:  MOVWF  x7A
01E8C:  MOVLW  04
01E8E:  MOVWF  x79
01E90:  MOVLB  0
01E92:  RCALL  1A4E
01E94:  MOVFF  03,42F
01E98:  MOVFF  02,42E
01E9C:  MOVFF  01,42D
01EA0:  MOVFF  00,42C
.................... 		consumo_reati = read_long(ee_consumo_reati);
01EA4:  MOVLW  01
01EA6:  MOVLB  A
01EA8:  MOVWF  x7A
01EAA:  MOVLW  08
01EAC:  MOVWF  x79
01EAE:  MOVLB  0
01EB0:  RCALL  1A4E
01EB2:  MOVFF  03,42B
01EB6:  MOVFF  02,42A
01EBA:  MOVFF  01,429
01EBE:  MOVFF  00,428
.................... 		if (consumo_ati == 0xffffffff){
01EC2:  MOVLB  4
01EC4:  INCFSZ x2C,W
01EC6:  BRA    1EF4
01EC8:  INCFSZ x2D,W
01ECA:  BRA    1EF4
01ECC:  INCFSZ x2E,W
01ECE:  BRA    1EF4
01ED0:  INCFSZ x2F,W
01ED2:  BRA    1EF4
.................... 			consumo_ati = 0;
01ED4:  CLRF   x2F
01ED6:  CLRF   x2E
01ED8:  CLRF   x2D
01EDA:  CLRF   x2C
.................... 			write_long(ee_consumo_ati, 0);
01EDC:  MOVLW  01
01EDE:  MOVLB  A
01EE0:  MOVWF  x7A
01EE2:  MOVLW  04
01EE4:  MOVWF  x79
01EE6:  CLRF   x7E
01EE8:  CLRF   x7D
01EEA:  CLRF   x7C
01EEC:  CLRF   x7B
01EEE:  MOVLB  0
01EF0:  RCALL  1B0A
01EF2:  MOVLB  4
.................... 		}
.................... 		if (consumo_reati == 0xffffffff){
01EF4:  INCFSZ x28,W
01EF6:  BRA    1F24
01EF8:  INCFSZ x29,W
01EFA:  BRA    1F24
01EFC:  INCFSZ x2A,W
01EFE:  BRA    1F24
01F00:  INCFSZ x2B,W
01F02:  BRA    1F24
.................... 			consumo_reati = 0;
01F04:  CLRF   x2B
01F06:  CLRF   x2A
01F08:  CLRF   x29
01F0A:  CLRF   x28
.................... 			write_long(ee_consumo_reati, 0);
01F0C:  MOVLW  01
01F0E:  MOVLB  A
01F10:  MOVWF  x7A
01F12:  MOVLW  08
01F14:  MOVWF  x79
01F16:  CLRF   x7E
01F18:  CLRF   x7D
01F1A:  CLRF   x7C
01F1C:  CLRF   x7B
01F1E:  MOVLB  0
01F20:  RCALL  1B0A
01F22:  MOVLB  4
.................... 		}	
.................... 		if (read_long(ee_consumo_ati_ant) == 0xffffffff){
01F24:  MOVLW  01
01F26:  MOVLB  A
01F28:  MOVWF  x7A
01F2A:  MOVLW  0C
01F2C:  MOVWF  x79
01F2E:  MOVLB  0
01F30:  RCALL  1A4E
01F32:  MOVFF  03,A4D
01F36:  MOVFF  02,A4C
01F3A:  MOVFF  01,A4B
01F3E:  MOVFF  00,A4A
01F42:  MOVLB  A
01F44:  INCFSZ 00,W
01F46:  BRA    1F6A
01F48:  INCFSZ x4B,W
01F4A:  BRA    1F6A
01F4C:  INCFSZ x4C,W
01F4E:  BRA    1F6A
01F50:  INCFSZ x4D,W
01F52:  BRA    1F6A
.................... 			write_long(ee_consumo_ati_ant, 0);
01F54:  MOVLW  01
01F56:  MOVWF  x7A
01F58:  MOVLW  0C
01F5A:  MOVWF  x79
01F5C:  CLRF   x7E
01F5E:  CLRF   x7D
01F60:  CLRF   x7C
01F62:  CLRF   x7B
01F64:  MOVLB  0
01F66:  RCALL  1B0A
01F68:  MOVLB  A
.................... 		}
.................... 		if (read_long(ee_consumo_reati_ant) == 0xffffffff){
01F6A:  MOVLW  01
01F6C:  MOVWF  x7A
01F6E:  MOVLW  10
01F70:  MOVWF  x79
01F72:  MOVLB  0
01F74:  RCALL  1A4E
01F76:  MOVFF  03,A4D
01F7A:  MOVFF  02,A4C
01F7E:  MOVFF  01,A4B
01F82:  MOVFF  00,A4A
01F86:  MOVLB  A
01F88:  INCFSZ 00,W
01F8A:  BRA    1FAE
01F8C:  INCFSZ x4B,W
01F8E:  BRA    1FAE
01F90:  INCFSZ x4C,W
01F92:  BRA    1FAE
01F94:  INCFSZ x4D,W
01F96:  BRA    1FAE
.................... 			write_long(ee_consumo_reati_ant, 0);
01F98:  MOVLW  01
01F9A:  MOVWF  x7A
01F9C:  MOVLW  10
01F9E:  MOVWF  x79
01FA0:  CLRF   x7E
01FA2:  CLRF   x7D
01FA4:  CLRF   x7C
01FA6:  CLRF   x7B
01FA8:  MOVLB  0
01FAA:  RCALL  1B0A
01FAC:  MOVLB  A
.................... 		}
.................... 		
.................... 		nro_cargas = read_byte(ee_nro_cargas);
01FAE:  MOVLW  03
01FB0:  MOVWF  x66
01FB2:  MOVLW  13
01FB4:  MOVWF  x65
01FB6:  MOVLB  0
01FB8:  RCALL  1C24
01FBA:  MOVFF  01,6D
.................... 		vali_nro_cargas();	    	
01FBE:  RCALL  1C78
.................... 	
.................... 		max_kw = read_word(ee_max_kw);
01FC0:  MOVLW  02
01FC2:  MOVLB  A
01FC4:  MOVWF  x5D
01FC6:  MOVLW  81
01FC8:  MOVWF  x5C
01FCA:  MOVLB  0
01FCC:  CALL   170A
01FD0:  MOVFF  02,66
01FD4:  MOVFF  01,65
.................... 
.................... 		tipo_controle_demanda = read_byte(ee_tipo_controle_demanda);
01FD8:  MOVLB  A
01FDA:  CLRF   x66
01FDC:  MOVLW  4F
01FDE:  MOVWF  x65
01FE0:  MOVLB  0
01FE2:  RCALL  1C24
01FE4:  MOVFF  01,84
.................... 
.................... 		aux_w1 = ee_carga_1;
01FE8:  MOVLW  02
01FEA:  MOVLB  3
01FEC:  MOVWF  x63
01FEE:  MOVLW  F3
01FF0:  MOVWF  x62
.................... 		aux_w2 = ee_tempo_repouso_1;
01FF2:  MOVLW  02
01FF4:  MOVWF  x65
01FF6:  MOVLW  DA
01FF8:  MOVWF  x64
.................... 		for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++)
01FFA:  CLRF   xB1
01FFC:  MOVLB  0
01FFE:  MOVF   x6D,W
02000:  MOVLB  3
02002:  SUBWF  xB1,W
02004:  BTFSC  FD8.0
02006:  BRA    21BE
.................... 			{
.................... 			carga[aux_b1] = read_byte(aux_w1++);
02008:  CLRF   03
0200A:  MOVF   xB1,W
0200C:  ADDLW  07
0200E:  MOVWF  01
02010:  MOVLW  01
02012:  ADDWFC 03,F
02014:  MOVFF  01,A4A
02018:  MOVFF  03,A4B
0201C:  MOVLB  3
0201E:  MOVFF  363,03
02022:  MOVF   x62,W
02024:  INCF   x62,F
02026:  BTFSC  FD8.2
02028:  INCF   x63,F
0202A:  MOVLB  A
0202C:  MOVWF  x4C
0202E:  MOVFF  03,A4D
02032:  MOVFF  03,A66
02036:  MOVWF  x65
02038:  MOVLB  0
0203A:  RCALL  1C24
0203C:  MOVFF  A4B,FEA
02040:  MOVFF  A4A,FE9
02044:  MOVFF  01,FEF
.................... 			tempo_repouso[aux_b1] = read_byte(aux_w2++);
02048:  CLRF   03
0204A:  MOVLB  3
0204C:  MOVF   xB1,W
0204E:  ADDLW  E7
02050:  MOVWF  01
02052:  MOVLW  00
02054:  ADDWFC 03,F
02056:  MOVFF  01,A4A
0205A:  MOVFF  03,A4B
0205E:  MOVLB  3
02060:  MOVFF  365,03
02064:  MOVF   x64,W
02066:  INCF   x64,F
02068:  BTFSC  FD8.2
0206A:  INCF   x65,F
0206C:  MOVLB  A
0206E:  MOVWF  x4C
02070:  MOVFF  03,A4D
02074:  MOVFF  03,A66
02078:  MOVWF  x65
0207A:  MOVLB  0
0207C:  RCALL  1C24
0207E:  MOVFF  A4B,FEA
02082:  MOVFF  A4A,FE9
02086:  MOVFF  01,FEF
.................... 			carga_acionada[aux_b1] = false;
0208A:  CLRF   03
0208C:  MOVLB  3
0208E:  MOVF   xB1,W
02090:  ADDLW  17
02092:  MOVWF  FE9
02094:  MOVLW  01
02096:  ADDWFC 03,W
02098:  MOVWF  FEA
0209A:  CLRF   FEF
.................... 			carga_disponivel[aux_b1] =false;
0209C:  CLRF   03
0209E:  MOVF   xB1,W
020A0:  ADDLW  27
020A2:  MOVWF  FE9
020A4:  MOVLW  01
020A6:  ADDWFC 03,W
020A8:  MOVWF  FEA
020AA:  CLRF   FEF
.................... 			desligar_carga(aux_b1);
020AC:  MOVFF  3B1,A65
020B0:  MOVLB  0
020B2:  RCALL  1CB6
.................... 					
.................... 			forma_controle[aux_b1] = read_byte((ee_forma_controle + aux_b1));
020B4:  CLRF   03
020B6:  MOVLB  3
020B8:  MOVF   xB1,W
020BA:  ADDLW  59
020BC:  MOVWF  01
020BE:  MOVLW  01
020C0:  ADDWFC 03,F
020C2:  MOVFF  01,A4A
020C6:  MOVFF  03,A4B
020CA:  MOVLW  50
020CC:  MOVLB  3
020CE:  ADDWF  xB1,W
020D0:  MOVLB  A
020D2:  MOVWF  x4C
020D4:  CLRF   x66
020D6:  MOVWF  x65
020D8:  MOVLB  0
020DA:  RCALL  1C24
020DC:  MOVFF  A4B,FEA
020E0:  MOVFF  A4A,FE9
020E4:  MOVFF  01,FEF
.................... 			hora_liga_controle[aux_b1] = read_byte((ee_hora_liga_controle + aux_b1));
020E8:  CLRF   03
020EA:  MOVLB  3
020EC:  MOVF   xB1,W
020EE:  ADDLW  6A
020F0:  MOVWF  01
020F2:  MOVLW  01
020F4:  ADDWFC 03,F
020F6:  MOVFF  01,A4A
020FA:  MOVFF  03,A4B
020FE:  MOVLW  60
02100:  MOVLB  3
02102:  ADDWF  xB1,W
02104:  MOVLB  A
02106:  MOVWF  x4C
02108:  CLRF   x66
0210A:  MOVWF  x65
0210C:  MOVLB  0
0210E:  RCALL  1C24
02110:  MOVFF  A4B,FEA
02114:  MOVFF  A4A,FE9
02118:  MOVFF  01,FEF
.................... 			minuto_liga_controle[aux_b1] = read_byte((ee_minuto_liga_controle + aux_b1));
0211C:  CLRF   03
0211E:  MOVLB  3
02120:  MOVF   xB1,W
02122:  ADDLW  7B
02124:  MOVWF  01
02126:  MOVLW  01
02128:  ADDWFC 03,F
0212A:  MOVFF  01,A4A
0212E:  MOVFF  03,A4B
02132:  MOVLW  70
02134:  MOVLB  3
02136:  ADDWF  xB1,W
02138:  MOVLB  A
0213A:  MOVWF  x4C
0213C:  CLRF   x66
0213E:  MOVWF  x65
02140:  MOVLB  0
02142:  RCALL  1C24
02144:  MOVFF  A4B,FEA
02148:  MOVFF  A4A,FE9
0214C:  MOVFF  01,FEF
.................... 			hora_desliga_controle[aux_b1] = read_byte((ee_hora_desliga_controle + aux_b1));
02150:  CLRF   03
02152:  MOVLB  3
02154:  MOVF   xB1,W
02156:  ADDLW  8C
02158:  MOVWF  01
0215A:  MOVLW  01
0215C:  ADDWFC 03,F
0215E:  MOVFF  01,A4A
02162:  MOVFF  03,A4B
02166:  MOVLW  80
02168:  MOVLB  3
0216A:  ADDWF  xB1,W
0216C:  MOVLB  A
0216E:  MOVWF  x4C
02170:  CLRF   x66
02172:  MOVWF  x65
02174:  MOVLB  0
02176:  RCALL  1C24
02178:  MOVFF  A4B,FEA
0217C:  MOVFF  A4A,FE9
02180:  MOVFF  01,FEF
.................... 			minuto_desliga_controle[aux_b1] = read_byte((ee_minuto_desliga_controle + aux_b1));
02184:  CLRF   03
02186:  MOVLB  3
02188:  MOVF   xB1,W
0218A:  ADDLW  9D
0218C:  MOVWF  01
0218E:  MOVLW  01
02190:  ADDWFC 03,F
02192:  MOVFF  01,A4A
02196:  MOVFF  03,A4B
0219A:  MOVLW  90
0219C:  MOVLB  3
0219E:  ADDWF  xB1,W
021A0:  MOVLB  A
021A2:  MOVWF  x4C
021A4:  CLRF   x66
021A6:  MOVWF  x65
021A8:  MOVLB  0
021AA:  RCALL  1C24
021AC:  MOVFF  A4B,FEA
021B0:  MOVFF  A4A,FE9
021B4:  MOVFF  01,FEF
021B8:  MOVLB  3
021BA:  INCF   xB1,F
021BC:  BRA    1FFC
.................... 					
.................... 			}
.................... 		
.................... 		aux_w1 = 0;
021BE:  CLRF   x63
021C0:  CLRF   x62
.................... 		for (aux_b1 = 0; aux_b1< 12; aux_b1++)
021C2:  CLRF   xB1
021C4:  MOVF   xB1,W
021C6:  SUBLW  0B
021C8:  BNC   226A
.................... 			{
.................... 			dem_cont_ponta[aux_b1] = read_word(ee_dem_cont_ponta + aux_w1);
021CA:  BCF    FD8.0
021CC:  RLCF   xB1,W
021CE:  CLRF   03
021D0:  ADDLW  DB
021D2:  MOVWF  01
021D4:  MOVLW  04
021D6:  ADDWFC 03,F
021D8:  MOVFF  01,A4A
021DC:  MOVFF  03,A4B
021E0:  MOVLW  16
021E2:  MOVLB  3
021E4:  ADDWF  x62,W
021E6:  MOVLB  A
021E8:  MOVWF  x4C
021EA:  MOVLW  03
021EC:  MOVLB  3
021EE:  ADDWFC x63,W
021F0:  MOVLB  A
021F2:  MOVWF  x4D
021F4:  MOVWF  x5D
021F6:  MOVFF  A4C,A5C
021FA:  MOVLB  0
021FC:  CALL   170A
02200:  MOVFF  A4B,FEA
02204:  MOVFF  A4A,FE9
02208:  MOVFF  02,FEC
0220C:  MOVF   FED,F
0220E:  MOVFF  01,FEF
.................... 			dem_cont_fora_ponta[aux_b1] = read_word(ee_dem_cont_fora_ponta + aux_w1);
02212:  BCF    FD8.0
02214:  MOVLB  3
02216:  RLCF   xB1,W
02218:  CLRF   03
0221A:  ADDLW  F5
0221C:  MOVWF  01
0221E:  MOVLW  04
02220:  ADDWFC 03,F
02222:  MOVFF  01,A4A
02226:  MOVFF  03,A4B
0222A:  MOVLW  2E
0222C:  MOVLB  3
0222E:  ADDWF  x62,W
02230:  MOVLB  A
02232:  MOVWF  x4C
02234:  MOVLW  03
02236:  MOVLB  3
02238:  ADDWFC x63,W
0223A:  MOVLB  A
0223C:  MOVWF  x4D
0223E:  MOVWF  x5D
02240:  MOVFF  A4C,A5C
02244:  MOVLB  0
02246:  CALL   170A
0224A:  MOVFF  A4B,FEA
0224E:  MOVFF  A4A,FE9
02252:  MOVFF  02,FEC
02256:  MOVF   FED,F
02258:  MOVFF  01,FEF
.................... 			aux_w1 += 2;
0225C:  MOVLW  02
0225E:  MOVLB  3
02260:  ADDWF  x62,F
02262:  MOVLW  00
02264:  ADDWFC x63,F
02266:  INCF   xB1,F
02268:  BRA    21C4
.................... 			}
.................... 		carga_programada = read_word(ee_carga_programada);
0226A:  MOVLW  03
0226C:  MOVLB  A
0226E:  MOVWF  x5D
02270:  MOVLW  DC
02272:  MOVWF  x5C
02274:  MOVLB  0
02276:  CALL   170A
0227A:  MOVFF  02,510
0227E:  MOVFF  01,50F
.................... 			
.................... 		mes_inicio_pc = read_byte(ee_mes_inicio_pc);
02282:  MOVLW  03
02284:  MOVLB  A
02286:  MOVWF  x66
02288:  MOVLW  DF
0228A:  MOVWF  x65
0228C:  MOVLB  0
0228E:  RCALL  1C24
02290:  MOVFF  01,512
.................... 		dia_inicio_pc = read_byte(ee_dia_inicio_pc);
02294:  MOVLW  03
02296:  MOVLB  A
02298:  MOVWF  x66
0229A:  MOVLW  DE
0229C:  MOVWF  x65
0229E:  MOVLB  0
022A0:  RCALL  1C24
022A2:  MOVFF  01,511
.................... 		dia_final_pc = read_byte(ee_dia_final_pc);
022A6:  MOVLW  03
022A8:  MOVLB  A
022AA:  MOVWF  x66
022AC:  MOVLW  E0
022AE:  MOVWF  x65
022B0:  MOVLB  0
022B2:  RCALL  1C24
022B4:  MOVFF  01,513
.................... 		mes_final_pc = read_byte(ee_mes_final_pc);
022B8:  MOVLW  03
022BA:  MOVLB  A
022BC:  MOVWF  x66
022BE:  MOVLW  E1
022C0:  MOVWF  x65
022C2:  MOVLB  0
022C4:  RCALL  1C24
022C6:  MOVFF  01,514
.................... 	
.................... 		#if (com_rep == true)
.................... 			fat_conv_ativa = read_word(ee_fat_conv_ativa);
.................... 			fat_conv_reativa = read_word(ee_fat_conv_reativa);
.................... 			modo_rep = read_byte(ee_modo_rep);
.................... 			fat_conv_ativa = read_word(ee_fat_conv_ativa);
.................... 			fat_conv_reativa = read_word(ee_fat_conv_reativa);
.................... 			time_out_modo_rep = 1;
.................... 			ultimo_pulso_at = read_word(ee_ultimo_pulso_at);
.................... 			ultimo_pulso_reat = read_word(ee_ultimo_pulso_reat);
.................... 			ultima_pot_at = read_word(ee_ultima_pot_at);
.................... 			ultima_pot_reat = read_word(ee_ultima_pot_reat);
.................... 			fatura_rep = read_byte(ee_fatura_rep);
.................... 			fatura_rep_old = fatura_rep;
.................... 			if (modo_rep == 1){
.................... 				fecha_periodo();    
.................... 				recupera_rep();
.................... 			}
.................... 			protocolo_REP = read_byte(ee_protocolo_REP);
.................... 		#endif
.................... 	
.................... 		hora_ponta = read_byte(ee_hora_ponta);
022CA:  MOVLB  A
022CC:  CLRF   x66
022CE:  MOVLW  3A
022D0:  MOVWF  x65
022D2:  MOVLB  0
022D4:  RCALL  1C24
022D6:  MOVFF  01,515
.................... 		hora_final_ponta = read_byte(ee_hora_final_ponta);
022DA:  MOVLB  A
022DC:  CLRF   x66
022DE:  MOVLW  3C
022E0:  MOVWF  x65
022E2:  MOVLB  0
022E4:  RCALL  1C24
022E6:  MOVFF  01,517
.................... 		minuto_ponta = read_byte(ee_minuto_ponta);
022EA:  MOVLB  A
022EC:  CLRF   x66
022EE:  MOVLW  3B
022F0:  MOVWF  x65
022F2:  MOVLB  0
022F4:  RCALL  1C24
022F6:  MOVFF  01,516
.................... 		minuto_final_ponta = read_byte(ee_minuto_final_ponta);
022FA:  MOVLB  A
022FC:  CLRF   x66
022FE:  MOVLW  3D
02300:  MOVWF  x65
02302:  MOVLB  0
02304:  RCALL  1C24
02306:  MOVFF  01,518
.................... 		
.................... 		modo_saidas = read_byte(ee_modo_saidas);
0230A:  MOVLB  A
0230C:  CLRF   x66
0230E:  MOVLW  4C
02310:  MOVWF  x65
02312:  MOVLB  0
02314:  RCALL  1C24
02316:  MOVFF  01,6C
0231A:  GOTO   2652 (RETURN)
.................... 		
.................... //		busca_demanda_contratada();
.................... 	}
.................... #endif
.................... 
.................... void inicializa_variaveis(void)
.................... {
.................... 	#if (funcao_505 == true)
.................... 		inic_tensoes_505();
.................... 	#endif
.................... 
.................... 	#if (home_system == true)
.................... 		ContHSnet = TEMPO_HSNET;
.................... 	#endif
.................... 
.................... 	status_equipamento_H = 0;
*
02644:  MOVLB  3
02646:  CLRF   x5C
02648:  CLRF   x5B
.................... 	status_equipamento_L = 0;
0264A:  CLRF   x5E
0264C:  CLRF   x5D
.................... 
.................... 	#if (st8500c == true)
.................... 		inicializa_8500c();
0264E:  MOVLB  0
02650:  BRA    1E86
.................... 		ptr_aciona = 0;
02652:  CLRF   x85
.................... 		ptr_desaciona = 0;;
02654:  CLRF   x86
.................... 	#endif
.................... 
.................... 	ler_ad_t3 = 1;
02656:  BSF    20.3
.................... 	time_out_t3 = 0;
02658:  MOVLB  3
0265A:  CLRF   xBB
.................... 	med_ten_ok = 0;
0265C:  BCF    1E.3
.................... 	calc_ten_ok = 0;
0265E:  BCF    1E.4
.................... 	passo_main = 0;
02660:  CLRF   x61
.................... 	lendo_cht = 0;
02662:  BCF    20.6
.................... 	passo_tensao = 0;
02664:  MOVLB  4
02666:  CLRF   x0B
.................... 	passo_corrente = 0;
02668:  CLRF   x0C
.................... 	calculando_vref = false;
0266A:  BCF    20.4
.................... 	fechar_frequencia = 0;
0266C:  BCF    2C.6
.................... 	#if (controlador == true)
.................... 		#if (monofasico == false)
.................... 			passo_ad_8300 = 0;
0266E:  MOVLB  2
02670:  CLRF   x95
.................... 		#endif
.................... 	#endif
.................... 
.................... 	#if (ade7754 == true)
.................... 		conta_media_ten_r = 0;
.................... 		conta_media_ten_s = 0;
.................... 		conta_media_ten_t = 0;
.................... 		acao_ade7754 = 0;
.................... 	#else
.................... 		conta_media_ten = 0;
02672:  MOVLB  3
02674:  CLRF   x60
.................... 	#endif
.................... 	soma_efi_tr = 0;
02676:  MOVLB  2
02678:  CLRF   x11
0267A:  CLRF   x10
0267C:  CLRF   x0F
0267E:  CLRF   x0E
.................... 	soma_efi_cr = 0;
02680:  CLRF   x15
02682:  CLRF   x14
02684:  CLRF   x13
02686:  CLRF   x12
.................... 	soma_efi_pr = 0;
02688:  CLRF   x2D
0268A:  CLRF   x2C
0268C:  CLRF   x2B
0268E:  CLRF   x2A
.................... 	tensao_r = 0;
02690:  CLRF   x51
02692:  CLRF   x50
.................... 	corrente_r = 0;
02694:  CLRF   x53
02696:  CLRF   x52
.................... 	pot_ativa_r = 0;
02698:  CLRF   x59
0269A:  CLRF   x58
.................... 	pot_reativa_r = 0;
0269C:  CLRF   x5D
0269E:  CLRF   x5C
.................... 	pot_aparente_r = 0;
026A0:  CLRF   x5B
026A2:  CLRF   x5A
.................... 	fator_pot_r = 1024;
026A4:  MOVLW  04
026A6:  MOVWF  x63
026A8:  CLRF   x62
.................... 	frequencia = 240;
026AA:  MOVLW  F0
026AC:  MOVWF  x4E
.................... 	soma_freq = 0;
026AE:  MOVLB  4
026B0:  CLRF   x24
026B2:  CLRF   x23
.................... 	conta_soma_freq = 0;
026B4:  CLRF   x25
.................... 
.................... #if (monofasico == false)
.................... 	soma_efi_ts = 0;
026B6:  MOVLB  2
026B8:  CLRF   xA7
026BA:  CLRF   xA6
026BC:  CLRF   xA5
026BE:  CLRF   xA4
.................... 	soma_efi_cs = 0;
026C0:  CLRF   xAB
026C2:  CLRF   xAA
026C4:  CLRF   xA9
026C6:  CLRF   xA8
.................... 	soma_efi_ps = 0;
026C8:  CLRF   xC3
026CA:  CLRF   xC2
026CC:  CLRF   xC1
026CE:  CLRF   xC0
.................... 	soma_efi_tt = 0;
026D0:  CLRF   xFE
026D2:  CLRF   xFD
026D4:  CLRF   xFC
026D6:  CLRF   xFB
.................... 	soma_efi_ct = 0;
026D8:  MOVLB  3
026DA:  CLRF   x02
026DC:  CLRF   x01
026DE:  CLRF   x00
026E0:  MOVLB  2
026E2:  CLRF   xFF
.................... 	soma_efi_pt = 0;
026E4:  MOVLB  3
026E6:  CLRF   x1A
026E8:  CLRF   x19
026EA:  CLRF   x18
026EC:  CLRF   x17
.................... 	tensao_s = 0;
026EE:  MOVLB  2
026F0:  CLRF   xD5
026F2:  CLRF   xD4
.................... 	tensao_t = 0;
026F4:  MOVLB  3
026F6:  CLRF   x2C
026F8:  CLRF   x2B
.................... 	corrente_s = 0;
026FA:  MOVLB  2
026FC:  CLRF   xD7
026FE:  CLRF   xD6
.................... 	corrente_t = 0;
02700:  MOVLB  3
02702:  CLRF   x2E
02704:  CLRF   x2D
.................... 	pot_ativa_s = 0;
02706:  MOVLB  2
02708:  CLRF   xDD
0270A:  CLRF   xDC
.................... 	pot_ativa_t = 0;
0270C:  MOVLB  3
0270E:  CLRF   x34
02710:  CLRF   x33
.................... 	pot_reativa_s = 0;
02712:  MOVLB  2
02714:  CLRF   xE1
02716:  CLRF   xE0
.................... 	pot_reativa_t = 0;
02718:  MOVLB  3
0271A:  CLRF   x38
0271C:  CLRF   x37
.................... 	pot_aparente_s = 0;
0271E:  MOVLB  2
02720:  CLRF   xDF
02722:  CLRF   xDE
.................... 	pot_aparente_t = 0;
02724:  MOVLB  3
02726:  CLRF   x36
02728:  CLRF   x35
.................... 	fator_pot_s = 1024;
0272A:  MOVLW  04
0272C:  MOVLB  2
0272E:  MOVWF  xE3
02730:  CLRF   xE2
.................... 	fator_pot_t = 1024;
02732:  MOVLB  3
02734:  MOVWF  x3A
02736:  CLRF   x39
.................... #endif
.................... 
.................... zera_soma_pot();
02738:  MOVLB  0
0273A:  BRA    231E
.................... 
.................... #if (tratar_localizacao == true)
.................... 	localizacao[0] = read_byte(EE_LOCALIZACAO_0);
.................... 	localizacao[1] = read_byte(EE_LOCALIZACAO_1);
.................... 	localizacao[2] = read_byte(EE_LOCALIZACAO_2);
.................... 	localizacao[3] = read_byte(EE_LOCALIZACAO_3);
.................... 	localizacao[4] = read_byte(EE_LOCALIZACAO_4);
.................... 	localizacao[5] = read_byte(EE_LOCALIZACAO_5);
.................... 	localizacao[6] = read_byte(EE_LOCALIZACAO_6);
.................... 	localizacao[7] = read_byte(EE_LOCALIZACAO_7);
.................... 	localizacao[8] = read_byte(EE_LOCALIZACAO_8);
.................... 	localizacao[9] = read_byte(EE_LOCALIZACAO_9);
.................... 	localizacao[10] = read_byte(EE_LOCALIZACAO_10);
.................... 	localizacao[11] = read_byte(EE_LOCALIZACAO_11);
.................... 	localizacao[12] = read_byte(EE_LOCALIZACAO_12);
.................... 	localizacao[13] = read_byte(EE_LOCALIZACAO_13);
.................... 	localizacao[14] = read_byte(EE_LOCALIZACAO_14);
.................... 	localizacao[15] = read_byte(EE_LOCALIZACAO_15);
.................... #endif
.................... 
.................... #if (chip_cs5460a == false)
.................... 	soma_pot_efi_r = 0;
0273C:  MOVLB  2
0273E:  CLRF   x31
02740:  CLRF   x30
02742:  CLRF   x2F
02744:  CLRF   x2E
.................... 	soma_tr = 0;
02746:  CLRF   x25
02748:  CLRF   x24
0274A:  CLRF   x23
0274C:  CLRF   x22
.................... 	soma_cr = 0;
0274E:  CLRF   x21
02750:  CLRF   x20
02752:  CLRF   x1F
02754:  CLRF   x1E
.................... 	soma_pr = 0;
02756:  CLRF   x29
02758:  CLRF   x28
0275A:  CLRF   x27
0275C:  CLRF   x26
.................... 	soma_ten_r = 0;
0275E:  CLRF   x19
02760:  CLRF   x18
02762:  CLRF   x17
02764:  CLRF   x16
.................... 	soma_cor_r = 0;
02766:  CLRF   x1D
02768:  CLRF   x1C
0276A:  CLRF   x1B
0276C:  CLRF   x1A
.................... 	soma_pot_r = 0;
0276E:  CLRF   x03
02770:  CLRF   x02
02772:  CLRF   x01
02774:  CLRF   x00
.................... 
.................... 
.................... 	#if (monofasico == false)
.................... 		soma_pot_efi_s = 0;
02776:  CLRF   xC7
02778:  CLRF   xC6
0277A:  CLRF   xC5
0277C:  CLRF   xC4
.................... 		soma_pot_efi_t = 0;
0277E:  MOVLB  3
02780:  CLRF   x1E
02782:  CLRF   x1D
02784:  CLRF   x1C
02786:  CLRF   x1B
.................... 		soma_ts = 0;
02788:  MOVLB  2
0278A:  CLRF   xB7
0278C:  CLRF   xB6
0278E:  CLRF   xB5
02790:  CLRF   xB4
.................... 		soma_cs = 0;
02792:  CLRF   xBB
02794:  CLRF   xBA
02796:  CLRF   xB9
02798:  CLRF   xB8
.................... 		soma_ps = 0;
0279A:  CLRF   xBF
0279C:  CLRF   xBE
0279E:  CLRF   xBD
027A0:  CLRF   xBC
.................... 		soma_tt = 0;
027A2:  MOVLB  3
027A4:  CLRF   x0E
027A6:  CLRF   x0D
027A8:  CLRF   x0C
027AA:  CLRF   x0B
.................... 		soma_ct = 0;
027AC:  CLRF   x12
027AE:  CLRF   x11
027B0:  CLRF   x10
027B2:  CLRF   x0F
.................... 		soma_pt = 0;
027B4:  CLRF   x16
027B6:  CLRF   x15
027B8:  CLRF   x14
027BA:  CLRF   x13
.................... 		soma_ten_s = 0;
027BC:  MOVLB  2
027BE:  CLRF   xAF
027C0:  CLRF   xAE
027C2:  CLRF   xAD
027C4:  CLRF   xAC
.................... 		soma_ten_t = 0;
027C6:  MOVLB  3
027C8:  CLRF   x0A
027CA:  CLRF   x09
027CC:  CLRF   x08
027CE:  CLRF   x07
.................... 		soma_cor_s = 0;
027D0:  MOVLB  2
027D2:  CLRF   xB3
027D4:  CLRF   xB2
027D6:  CLRF   xB1
027D8:  CLRF   xB0
.................... 		soma_cor_t = 0;
027DA:  MOVLB  3
027DC:  CLRF   x06
027DE:  CLRF   x05
027E0:  CLRF   x04
027E2:  CLRF   x03
.................... 		soma_pot_s = 0;
027E4:  MOVLB  2
027E6:  CLRF   x99
027E8:  CLRF   x98
027EA:  CLRF   x97
027EC:  CLRF   x96
.................... 		soma_pot_t = 0;
027EE:  CLRF   xF0
027F0:  CLRF   xEF
027F2:  CLRF   xEE
027F4:  CLRF   xED
.................... 	#endif
.................... #endif
.................... 	
.................... 
.................... #if (com_cht == true)
.................... 	passo_rd_cht = 0;
.................... 	passo_fase_cht = 0;
.................... 	passo_cht = 1;
.................... #endif
.................... 
.................... // inicializa flags	
.................... #if (com_menu == true)
.................... 	exibiu = 0;
027F6:  BCF    29.6
.................... 	tecla_up = 0;
027F8:  BCF    2A.5
.................... 	tecla_down = 0;
027FA:  BCF    2A.6
.................... 	tecla_enter = 0;
027FC:  BCF    2B.0
.................... 	tecla_reset = 0;
027FE:  BCF    2B.1
.................... 
.................... 	tecla_reset_up = 0;
02800:  BCF    2A.2
.................... 	tecla_enter_down = 0;
02802:  BCF    2A.3
.................... 	tecla_enter_reset = 0;
02804:  BCF    2A.4
.................... //	enter_low = 0;
.................... 	tecla_enter = 0;
02806:  BCF    2B.0
.................... 	tecla_reset = 0;
02808:  BCF    2B.1
.................... 	ha_tecla = 0;
0280A:  BCF    2B.2
.................... 	exibiu_erro = 0;
0280C:  BCF    2B.3
.................... 	exibiu_erro_menu = 0;
0280E:  BCF    2B.4
.................... 	teclou_enter = 0;
02810:  BCF    2B.5
.................... 	exibir_menu = 0;
02812:  BCF    2B.6
.................... 	
.................... 	tecla_reset_up = 0;
02814:  BCF    2A.2
.................... 	tecla_up_down_reset = 0;
02816:  BCF    2B.7
.................... 	
.................... 	programando = 0;
02818:  BCF    29.5
.................... 	time_out_menus = 60;		//120;
0281A:  MOVLW  3C
0281C:  MOVWF  31
.................... 	time_tecla = 20;
0281E:  MOVLW  14
02820:  MOVWF  37
.................... 	menu1 = 0;
02822:  CLRF   35
.................... 	menu_aux = 0;
02824:  CLRF   36
.................... 	qmenu = 0;
02826:  CLRF   3A
.................... 	rolando = false;
02828:  BCF    2C.0
.................... 	ja_rolou = true;
0282A:  BSF    2C.1
.................... #endif
.................... 	
.................... // inicializa variaveis	
.................... 	#if (com_display == true)
.................... 		val_pwm = LIMITE_VAL_PWM;
0282C:  MOVLW  02
0282E:  MOVLB  3
02830:  MOVWF  xC8
02832:  CLRF   xC7
.................... 	#endif
.................... // inicializa buffers	
.................... 	#if (com_cht == true)
.................... 		zera_chts();
.................... 	#endif
.................... 	#if (com_regs == true)
.................... 		prox_grava = 0;
02834:  CLRF   4B
02836:  CLRF   4A
02838:  CLRF   49
0283A:  CLRF   48
.................... 		zera_soma_reg();
0283C:  MOVLB  0
0283E:  RCALL  2372
.................... 	#endif	
.................... 	#if (com_consumo == true)
.................... 		#if (com_demanda == true)
.................... 			zera_demandas();
02840:  RCALL  243E
.................... 		#endif
.................... 		inic_consumo();
02842:  RCALL  250A
.................... 	#endif
.................... 	
.................... 	#if (chip_cs5460a == false)
.................... 		#if (ade7754 == false)
.................... 			for (aux_b1 = 0; aux_b1 < NRO_AMOSTRAS; aux_b1++)
02844:  MOVLB  3
02846:  CLRF   xB1
02848:  MOVF   xB1,W
0284A:  SUBLW  3F
0284C:  BNC   28E8
.................... 				{
.................... 				pulsa_wdt();
0284E:  MOVLB  0
02850:  RCALL  2428
.................... 				buf_tensao_r[aux_b1] = 2048;
02852:  BCF    FD8.0
02854:  MOVLB  3
02856:  RLCF   xB1,W
02858:  CLRF   03
0285A:  ADDLW  34
0285C:  MOVWF  FE9
0285E:  MOVLW  05
02860:  ADDWFC 03,W
02862:  MOVWF  FEA
02864:  MOVLW  08
02866:  MOVWF  FEC
02868:  MOVF   FED,F
0286A:  CLRF   FEF
.................... 				buf_corrente_r[aux_b1] = 2048;
0286C:  BCF    FD8.0
0286E:  RLCF   xB1,W
02870:  CLRF   03
02872:  ADDLW  B6
02874:  MOVWF  FE9
02876:  MOVLW  05
02878:  ADDWFC 03,W
0287A:  MOVWF  FEA
0287C:  MOVLW  08
0287E:  MOVWF  FEC
02880:  MOVF   FED,F
02882:  CLRF   FEF
.................... 			#if (monofasico == false)
.................... 					buf_tensao_s[aux_b1] = 2048;
02884:  BCF    FD8.0
02886:  RLCF   xB1,W
02888:  CLRF   03
0288A:  ADDLW  38
0288C:  MOVWF  FE9
0288E:  MOVLW  06
02890:  ADDWFC 03,W
02892:  MOVWF  FEA
02894:  MOVLW  08
02896:  MOVWF  FEC
02898:  MOVF   FED,F
0289A:  CLRF   FEF
.................... 					buf_corrente_s[aux_b1] = 2048;
0289C:  BCF    FD8.0
0289E:  RLCF   xB1,W
028A0:  CLRF   03
028A2:  ADDLW  3C
028A4:  MOVWF  FE9
028A6:  MOVLW  07
028A8:  ADDWFC 03,W
028AA:  MOVWF  FEA
028AC:  MOVLW  08
028AE:  MOVWF  FEC
028B0:  MOVF   FED,F
028B2:  CLRF   FEF
.................... 					buf_tensao_t[aux_b1] = 2048;
028B4:  BCF    FD8.0
028B6:  RLCF   xB1,W
028B8:  CLRF   03
028BA:  ADDLW  BA
028BC:  MOVWF  FE9
028BE:  MOVLW  06
028C0:  ADDWFC 03,W
028C2:  MOVWF  FEA
028C4:  MOVLW  08
028C6:  MOVWF  FEC
028C8:  MOVF   FED,F
028CA:  CLRF   FEF
.................... 					buf_corrente_t[aux_b1] = 2048;
028CC:  BCF    FD8.0
028CE:  RLCF   xB1,W
028D0:  CLRF   03
028D2:  ADDLW  BE
028D4:  MOVWF  FE9
028D6:  MOVLW  07
028D8:  ADDWFC 03,W
028DA:  MOVWF  FEA
028DC:  MOVLW  08
028DE:  MOVWF  FEC
028E0:  MOVF   FED,F
028E2:  CLRF   FEF
.................... 			#endif
028E4:  INCF   xB1,F
028E6:  BRA    2848
.................... 				}
.................... 		#endif
.................... 	#endif
.................... //	vref = 2048;
.................... //	vref_cr = 2048;
.................... //	vref_cs = 2048;
.................... //	vref_ct = 2048;
.................... //	soma_vref = 0;
.................... //	nro_soma_vref = 0;
.................... 	vrefcr = 2048;
028E8:  MOVLW  08
028EA:  MOVWF  xE2
028EC:  CLRF   xE1
.................... 	vrefcs = 2048;
028EE:  MOVWF  xE4
028F0:  CLRF   xE3
.................... 	vrefct = 2048;
028F2:  MOVWF  xE6
028F4:  CLRF   xE5
.................... 	vreftr = 2048;
028F6:  MOVWF  xE8
028F8:  CLRF   xE7
.................... 	vrefts = 2048;
028FA:  MOVWF  xEA
028FC:  CLRF   xE9
.................... 	vreftt = 2048;
028FE:  MOVWF  xEC
02900:  CLRF   xEB
.................... 	soma_vreft = 0;
02902:  MOVLB  4
02904:  CLRF   x16
02906:  CLRF   x15
02908:  CLRF   x14
0290A:  CLRF   x13
.................... 	soma_vrefc = 0;
0290C:  CLRF   x1A
0290E:  CLRF   x19
02910:  CLRF   x18
02912:  CLRF   x17
.................... 	#if (controlador == true)
.................... 		#if (AUTOSET == true)
.................... 			time_out_enter = 0;
.................... 			time_out_autoset = 0;
.................... 			em_autoset = false;
.................... 			passo_autoset = 0;
.................... 		#endif
.................... 	#endif
.................... 	#if (com_time_funciona == true)
.................... 		aux_l1 = read_long(ee_horas_funcionamento);
.................... 		if (aux_l1 == 0xffffffff)
.................... 			{
.................... 			write_long(ee_horas_funcionamento,0);
.................... 			}
.................... 			
.................... 		aux_l1 = read_long(ee_horas_funcionamento_ant);
.................... 		if (aux_l1 == 0xffffffff)
.................... 			{
.................... 			write_long(ee_horas_funcionamento_ant,0);
.................... 			}
.................... 		#if (com_relogio == true)
.................... 			min_funciona = read_byte(ee_min_funciona);
.................... 		#endif
.................... 	#endif
.................... 	inicializa_flags_alarmes();
02914:  MOVLB  0
02916:  RCALL  25FA
.................... 
.................... 	#if (com_menu == true)
.................... 		time_out_inicializando = 2;
02918:  MOVLW  02
0291A:  MOVWF  2F
.................... 		time_out_exibe_status_teclando = 10;
0291C:  MOVLW  0A
0291E:  MOVWF  2E
.................... 	#endif
.................... 	
.................... 	#if ((st9200r == true) || (st9230r == true))
02920:  GOTO   1BDB8 (RETURN)
.................... 		#if (com_maximos == true)
.................... 			cor_maxima_r = 0;
.................... 			cor_maxima_s = 0;
.................... 			cor_maxima_t = 0;
.................... 			pot_ativa_max_r = 0;
.................... 			pot_ativa_max_s = 0;
.................... 			pot_ativa_max_t = 0;
.................... 		#endif
.................... 	#endif
.................... 
.................... }
.................... 
.................... void inicializa_programa(void)
.................... {
.................... 	ten_nomi = read_word(ee_ten_nomi);
*
030BC:  MOVLB  A
030BE:  CLRF   x5D
030C0:  MOVLW  11
030C2:  MOVWF  x5C
030C4:  MOVLB  0
030C6:  CALL   170A
030CA:  MOVFF  02,4BE
030CE:  MOVFF  01,4BD
.................... 	#if (portatil == true)
.................... 		#if (se_com_flex == true)
.................... 			tipo_ponteira = read_byte(ee_tipo_ponteira);
.................... 			valor_tc = tabela_pt[tipo_ponteira];
.................... 			atualiza_ganho(tipo_ponteira);
.................... 		#else
.................... 			valor_tc = read_word(ee_valor_tc);
.................... 		#endif
.................... 	#else
.................... 		valor_tc = read_word(ee_valor_tc);
030D2:  MOVLB  A
030D4:  CLRF   x5D
030D6:  MOVLW  13
030D8:  MOVWF  x5C
030DA:  MOVLB  0
030DC:  CALL   170A
030E0:  MOVFF  02,4C0
030E4:  MOVFF  01,4BF
.................... 	#endif
.................... 	if ((ten_nomi == 255) && (valor_tc == 255))
030E8:  MOVLB  4
030EA:  INCFSZ xBD,W
030EC:  BRA    3100
030EE:  MOVF   xBE,F
030F0:  BNZ   3100
030F2:  INCFSZ xBF,W
030F4:  BRA    3100
030F6:  MOVF   xC0,F
030F8:  BNZ   3100
.................... 		{
.................... 		assume_defaults();
030FA:  MOVLB  0
030FC:  RCALL  2B4A
030FE:  MOVLB  4
.................... 		}
.................... 
.................... 	#if (portatil == true)
.................... 		decide_que_ponteira();
.................... 	#endif	
.................... 
.................... 	#if (tc_fixo == true)
.................... 		#if (portatil == true)
.................... 			busca_mul_tc();
.................... 		#else
.................... 			calcula_mul_tc();
03100:  MOVLB  0
03102:  RCALL  2AB8
.................... 		#endif
.................... 	#endif
.................... 
.................... 	valor_tp = read_word(ee_valor_tp); 
03104:  MOVLB  A
03106:  CLRF   x5D
03108:  MOVLW  2B
0310A:  MOVWF  x5C
0310C:  MOVLB  0
0310E:  CALL   170A
03112:  MOVFF  02,4C2
03116:  MOVFF  01,4C1
.................... 	#if (com_regs == true)
.................... 		#if (controlador == true)
.................... 			intervalo_reg = INTERVALO_REG_DEFAULT;
0311A:  MOVLW  01
0311C:  MOVLB  4
0311E:  MOVWF  xC6
03120:  MOVLW  2C
03122:  MOVWF  xC5
.................... 		#else
.................... 			intervalo_reg = read_word(ee_intervalo_reg); 
.................... 		#endif
.................... 	#endif
....................  	baud_rate = read_word(ee_baud_rate);
03124:  MOVLB  A
03126:  CLRF   x5D
03128:  MOVLW  2D
0312A:  MOVWF  x5C
0312C:  MOVLB  0
0312E:  CALL   170A
03132:  MOVFF  02,4C4
03136:  MOVFF  01,4C3
.................... 
.................... 	#if (ade7754 == true)
.................... 	
.................... 		fase_r = read_byte(ee_fase_r);
.................... 		fase_s = read_byte(ee_fase_s);
.................... 		fase_t = read_byte(ee_fase_t);
.................... 	
.................... 		os_ten_r1 = read_word(ee_os_ten_r1);
.................... 		os_ten_s1 = read_word(ee_os_ten_s1);
.................... 		os_ten_t1 = read_word(ee_os_ten_t1);
.................... 	
.................... 		reg_cfnum = read_word(ee_reg_cfnum);
.................... 		reg_cfdem = read_word(ee_reg_cfdem);
.................... 	
.................... 		os_pot_r = read_word(ee_os_pot_r);
.................... 		os_pot_s = read_word(ee_os_pot_s);
.................... 		os_pot_t = read_word(ee_os_pot_t);
.................... 	
.................... 	#else
.................... 		os_ten_r1 = read_byte(ee_os_ten_r1);
0313A:  MOVLB  A
0313C:  CLRF   x66
0313E:  MOVLW  0E
03140:  MOVWF  x65
03142:  MOVLB  0
03144:  CALL   1C24
03148:  MOVFF  01,4AB
.................... 		os_ten_r2 = read_byte(ee_os_ten_r2);
0314C:  MOVLB  A
0314E:  CLRF   x66
03150:  MOVLW  15
03152:  MOVWF  x65
03154:  MOVLB  0
03156:  CALL   1C24
0315A:  MOVFF  01,4AE
.................... 		#if (portatil == false)
.................... 			off_cor_r = read_byte(ee_off_cor_r);
0315E:  MOVLB  A
03160:  CLRF   x66
03162:  MOVLW  06
03164:  MOVWF  x65
03166:  MOVLB  0
03168:  CALL   1C24
0316C:  MOVFF  01,4B7
.................... 			off_cor_s = read_byte(ee_off_cor_s);
03170:  MOVLB  A
03172:  CLRF   x66
03174:  MOVLW  07
03176:  MOVWF  x65
03178:  MOVLB  0
0317A:  CALL   1C24
0317E:  MOVFF  01,4B8
.................... 			#if (prog_defasagem ==	true)
.................... 				defasagem = read_byte(ee_defasagem);
03182:  MOVLB  A
03184:  CLRF   x66
03186:  MOVLW  18
03188:  MOVWF  x65
0318A:  MOVLB  0
0318C:  CALL   1C24
03190:  MOVFF  01,4BB
.................... 			#endif
.................... 		#endif
.................... 		os_pot_r = read_byte(ee_os_pot_r);
03194:  MOVLB  A
03196:  CLRF   x66
03198:  MOVLW  46
0319A:  MOVWF  x65
0319C:  MOVLB  0
0319E:  CALL   1C24
031A2:  MOVFF  01,4B4
.................... 		#if (monofasico == false)
.................... 			os_ten_s1 = read_byte(ee_os_ten_s1);
031A6:  MOVLB  A
031A8:  CLRF   x66
031AA:  MOVLW  0F
031AC:  MOVWF  x65
031AE:  MOVLB  0
031B0:  CALL   1C24
031B4:  MOVFF  01,4AC
.................... 			os_ten_t1 = read_byte(ee_os_ten_t1);
031B8:  MOVLB  A
031BA:  CLRF   x66
031BC:  MOVLW  10
031BE:  MOVWF  x65
031C0:  MOVLB  0
031C2:  CALL   1C24
031C6:  MOVFF  01,4AD
.................... 			os_ten_s2 = read_byte(ee_os_ten_s2);
031CA:  MOVLB  A
031CC:  CLRF   x66
031CE:  MOVLW  16
031D0:  MOVWF  x65
031D2:  MOVLB  0
031D4:  CALL   1C24
031D8:  MOVFF  01,4AF
.................... 			os_ten_t2 = read_byte(ee_os_ten_t2);
031DC:  MOVLB  A
031DE:  CLRF   x66
031E0:  MOVLW  17
031E2:  MOVWF  x65
031E4:  MOVLB  0
031E6:  CALL   1C24
031EA:  MOVFF  01,4B0
.................... 
.................... 	
.................... 			off_cor_s = read_byte(ee_off_cor_s);
031EE:  MOVLB  A
031F0:  CLRF   x66
031F2:  MOVLW  07
031F4:  MOVWF  x65
031F6:  MOVLB  0
031F8:  CALL   1C24
031FC:  MOVFF  01,4B8
.................... 			off_cor_t = read_byte(ee_off_cor_t);
03200:  MOVLB  A
03202:  CLRF   x66
03204:  MOVLW  08
03206:  MOVWF  x65
03208:  MOVLB  0
0320A:  CALL   1C24
0320E:  MOVFF  01,4B9
.................... 	
.................... 			os_pot_s = read_byte(ee_os_pot_s);
03212:  MOVLB  A
03214:  CLRF   x66
03216:  MOVLW  47
03218:  MOVWF  x65
0321A:  MOVLB  0
0321C:  CALL   1C24
03220:  MOVFF  01,4B5
.................... 			os_pot_t = read_byte(ee_os_pot_t);
03224:  MOVLB  A
03226:  CLRF   x66
03228:  MOVLW  48
0322A:  MOVWF  x65
0322C:  MOVLB  0
0322E:  CALL   1C24
03232:  MOVFF  01,4B6
.................... 		#endif
.................... 	#endif
....................  	
.................... 	endereco = read_byte(ee_endereco);
03236:  MOVLB  A
03238:  CLRF   x66
0323A:  MOVLW  26
0323C:  MOVWF  x65
0323E:  MOVLB  0
03240:  CALL   1C24
03244:  MOVFF  01,4CE
....................  	set_point = read_byte(ee_set_point);
03248:  MOVLB  A
0324A:  CLRF   x66
0324C:  MOVLW  0A
0324E:  MOVWF  x65
03250:  MOVLB  0
03252:  CALL   1C24
03256:  MOVFF  01,4CB
.................... 	#if (st8500c == true)
.................... 		#if (com_tc == true)
.................... 		 	intervalo_integra = read_byte(ee_intervalo_integra);
0325A:  MOVLB  A
0325C:  CLRF   x66
0325E:  MOVLW  29
03260:  MOVWF  x65
03262:  MOVLB  0
03264:  CALL   1C24
03268:  MOVFF  01,4CF
.................... 		 	if (intervalo_integra != 15)
0326C:  MOVLB  4
0326E:  MOVF   xCF,W
03270:  SUBLW  0F
03272:  BZ    328C
.................... 		 		{
.................... 			 	intervalo_integra = 15;
03274:  MOVLW  0F
03276:  MOVWF  xCF
.................... 			 	write_byte(ee_intervalo_integra, 15);
03278:  MOVLB  A
0327A:  CLRF   x68
0327C:  MOVLW  29
0327E:  MOVWF  x67
03280:  MOVLW  0F
03282:  MOVWF  x69
03284:  MOVLB  0
03286:  CALL   1C46
0328A:  MOVLB  4
.................... 			 	}
.................... 		#endif
.................... 	#endif
.................... 	#if (CONTROLADOR == false)
.................... 	 	intervalo_integra = read_byte(ee_intervalo_integra);
.................... 	#else
.................... 		status_banco_minimo = 0;
0328C:  CLRF   57
.................... 		recupera_tempos_acionamentos();
0328E:  MOVLB  0
03290:  BRA    2F56
.................... 	#endif
.................... 	#if (com_regs == true)
.................... 	 	forma_reg_cht = read_byte(ee_forma_reg_cht);
03292:  MOVLB  A
03294:  CLRF   x66
03296:  MOVLW  2A
03298:  MOVWF  x65
0329A:  MOVLB  0
0329C:  CALL   1C24
032A0:  MOVFF  01,4CD
.................... 	 	#if (portatil == true)
.................... 			registro = read_byte(ee_registro);
.................... 			prog_time = read_byte(ee_prog_time);
.................... 			dia_liga = read_byte(ee_dia_liga);
.................... 			dia_desliga = read_byte(ee_dia_desliga);
.................... 			hora_liga = read_byte(ee_hora_liga);
.................... 			minuto_liga = read_byte(ee_minuto_liga);
.................... 			hora_desliga = read_byte(ee_hora_desliga);
.................... 			minuto_desliga = read_byte(ee_minuto_desliga);
.................... 			fila_circular = read_byte(ee_fila_circular);
.................... 		#else
.................... 			registro = 1;
032A4:  MOVLW  01
032A6:  MOVLB  4
032A8:  MOVWF  xCC
.................... 		#endif
.................... 	#endif
.................... 	tipo_ligacao = read_byte(ee_tipo_ligacao);
032AA:  MOVLB  A
032AC:  CLRF   x66
032AE:  MOVLW  3E
032B0:  MOVWF  x65
032B2:  MOVLB  0
032B4:  CALL   1C24
032B8:  MOVFF  01,4C7
.................... 
.................... 	hora_ponta = read_byte(ee_hora_ponta);
032BC:  MOVLB  A
032BE:  CLRF   x66
032C0:  MOVLW  3A
032C2:  MOVWF  x65
032C4:  MOVLB  0
032C6:  CALL   1C24
032CA:  MOVFF  01,515
.................... 	hora_final_ponta = read_byte(ee_hora_final_ponta);
032CE:  MOVLB  A
032D0:  CLRF   x66
032D2:  MOVLW  3C
032D4:  MOVWF  x65
032D6:  MOVLB  0
032D8:  CALL   1C24
032DC:  MOVFF  01,517
.................... 	minuto_ponta = read_byte(ee_minuto_ponta);
032E0:  MOVLB  A
032E2:  CLRF   x66
032E4:  MOVLW  3B
032E6:  MOVWF  x65
032E8:  MOVLB  0
032EA:  CALL   1C24
032EE:  MOVFF  01,516
.................... 	minuto_final_ponta = read_byte(ee_minuto_final_ponta);
032F2:  MOVLB  A
032F4:  CLRF   x66
032F6:  MOVLW  3D
032F8:  MOVWF  x65
032FA:  MOVLB  0
032FC:  CALL   1C24
03300:  MOVFF  01,518
.................... 
.................... 	modo_funca = read_byte(ee_modo_funca);
03304:  MOVLB  A
03306:  CLRF   x66
03308:  MOVLW  40
0330A:  MOVWF  x65
0330C:  MOVLB  0
0330E:  CALL   1C24
03312:  MOVFF  01,4A7
.................... 
.................... 	ala_fp_ind = read_byte(ee_ala_fp_ind);
03316:  MOVLB  A
03318:  CLRF   x66
0331A:  MOVLW  1C
0331C:  MOVWF  x65
0331E:  MOVLB  0
03320:  CALL   1C24
03324:  MOVFF  01,4D0
.................... 	ala_fp_cap = read_byte(ee_ala_fp_cap);
03328:  MOVLB  A
0332A:  CLRF   x66
0332C:  MOVLW  1D
0332E:  MOVWF  x65
03330:  MOVLB  0
03332:  CALL   1C24
03336:  MOVFF  01,4D1
.................... 	ala_ten_a = read_byte(ee_ala_ten_a);
0333A:  MOVLB  A
0333C:  CLRF   x66
0333E:  MOVLW  1E
03340:  MOVWF  x65
03342:  MOVLB  0
03344:  CALL   1C24
03348:  MOVFF  01,4D2
.................... 	ala_ten_b = read_byte(ee_ala_ten_b);
0334C:  MOVLB  A
0334E:  CLRF   x66
03350:  MOVLW  1F
03352:  MOVWF  x65
03354:  MOVLB  0
03356:  CALL   1C24
0335A:  MOVFF  01,4D3
.................... 	ala_sc = read_byte(ee_ala_sc);
0335E:  MOVLB  A
03360:  CLRF   x66
03362:  MOVLW  20
03364:  MOVWF  x65
03366:  MOVLB  0
03368:  CALL   1C24
0336C:  MOVFF  01,4D4
.................... 	ala_subc = read_byte(ee_ala_subc);
03370:  MOVLB  A
03372:  CLRF   x66
03374:  MOVLW  3F
03376:  MOVWF  x65
03378:  MOVLB  0
0337A:  CALL   1C24
0337E:  MOVFF  01,4D7
.................... 	ala_chtt = read_byte(ee_ala_chtt);
03382:  MOVLB  A
03384:  CLRF   x66
03386:  MOVLW  21
03388:  MOVWF  x65
0338A:  MOVLB  0
0338C:  CALL   1C24
03390:  MOVFF  01,4D5
.................... 	ala_chtc = read_byte(ee_ala_chtc);
03394:  MOVLB  A
03396:  CLRF   x66
03398:  MOVLW  22
0339A:  MOVWF  x65
0339C:  MOVLB  0
0339E:  CALL   1C24
033A2:  MOVFF  01,4D6
.................... 	ala_skw = read_byte(ee_ala_skw);
033A6:  MOVLB  A
033A8:  CLRF   x66
033AA:  MOVLW  42
033AC:  MOVWF  x65
033AE:  MOVLB  0
033B0:  CALL   1C24
033B4:  MOVFF  01,4D8
.................... 
.................... 	#if (CONTROLADOR == true) || (st_prog == true)
.................... 		cor_minima = read_byte(ee_cor_minima);
033B8:  MOVLW  02
033BA:  MOVLB  A
033BC:  MOVWF  x66
033BE:  MOVLW  EE
033C0:  MOVWF  x65
033C2:  MOVLB  0
033C4:  CALL   1C24
033C8:  MOVFF  01,4D9
.................... 		#if (com_rep == true)
.................... 			cor_minima_rep = read_word(ee_cor_minima_rep);
.................... 			protocolo_REP = read_byte(ee_protocolo_REP);
.................... 			if(protocolo_REP > 1){
.................... 				baud_rate_REP = 1;
.................... 			}
.................... 			else{
.................... 				baud_rate_REP = 0;
.................... 			}
.................... 		#endif
.................... 		com_des_ten_a = read_byte(ee_com_des_ten_a);
033CC:  MOVLW  02
033CE:  MOVLB  A
033D0:  MOVWF  x66
033D2:  MOVLW  EA
033D4:  MOVWF  x65
033D6:  MOVLB  0
033D8:  CALL   1C24
033DC:  MOVFF  01,59
.................... 		com_des_ten_b = read_byte(ee_com_des_ten_b);
033E0:  MOVLW  02
033E2:  MOVLB  A
033E4:  MOVWF  x66
033E6:  MOVLW  EF
033E8:  MOVWF  x65
033EA:  MOVLB  0
033EC:  CALL   1C24
033F0:  MOVFF  01,5A
.................... 		com_des_chtt = read_byte(ee_com_des_chtt);
033F4:  MOVLW  02
033F6:  MOVLB  A
033F8:  MOVWF  x66
033FA:  MOVLW  EB
033FC:  MOVWF  x65
033FE:  MOVLB  0
03400:  CALL   1C24
03404:  MOVFF  01,5B
.................... 		com_des_chtc = read_byte(ee_com_des_chtc);
03408:  MOVLW  02
0340A:  MOVLB  A
0340C:  MOVWF  x66
0340E:  MOVLW  EC
03410:  MOVWF  x65
03412:  MOVLB  0
03414:  CALL   1C24
03418:  MOVFF  01,5C
.................... 		com_des_fp_ind_cap = read_byte(ee_com_des_fp_ind_cap);
0341C:  MOVLW  02
0341E:  MOVLB  A
03420:  MOVWF  x66
03422:  MOVLW  ED
03424:  MOVWF  x65
03426:  MOVLB  0
03428:  CALL   1C24
0342C:  MOVFF  01,5D
.................... 		tempo_aciona = read_byte(ee_tempo_aciona);
03430:  MOVLW  02
03432:  MOVLB  A
03434:  MOVWF  x66
03436:  MOVLW  83
03438:  MOVWF  x65
0343A:  MOVLB  0
0343C:  CALL   1C24
03440:  MOVFF  01,6A
.................... 		tempo_desaciona = read_byte(ee_tempo_desaciona);
03444:  MOVLW  02
03446:  MOVLB  A
03448:  MOVWF  x66
0344A:  MOVLW  84
0344C:  MOVWF  x65
0344E:  MOVLB  0
03450:  CALL   1C24
03454:  MOVFF  01,6B
.................... 		ultimo_tempo_aciona = tempo_aciona;
03458:  MOVFF  6A,69
.................... 		
.................... 		#if (st8500c == false)
.................... 			nro_bancos_capacitor = read_byte(ee_nro_bancos_capacitor);
.................... 			vali_nro_bancos_capacitor();	    	
.................... 			max_kvar = read_byte(ee_max_kvar);
.................... 			min_kvar = read_byte(ee_min_kvar);
.................... 			sequencia =	read_byte(ee_sequencia);
.................... 			aux_w1 = ee_banco_capacitor_1;
.................... 			aux_w2 = ee_tempo_repouso_1;
.................... 			for (aux_b1 = 0; aux_b1 < nro_bancos_capacitor; aux_b1++)
.................... 				{
.................... 				banco_capacitor[aux_b1] = read_byte(aux_w1++);
.................... 				tempo_repouso[aux_b1] = read_byte(aux_w2++);
.................... 				banco_acionado[aux_b1] = false;
.................... 				banco_disponivel[aux_b1] =false;
.................... 				#if(st_prog == false)
.................... 					desligar_banco(aux_b1);
.................... 				#endif
.................... 				}
.................... 		#endif
.................... 		
.................... 	#endif
.................... 
.................... 	#if (portatil == true)
.................... 		#if (se_com_flex ==	true)
.................... 			config_ponteiras();
.................... 		#else
.................... 			aux_w2 = ee_os_cor_r_20;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				os_cor_pt_r[aux_b1] = read_byte(aux_w2++);
.................... 				os_cor_pt_s[aux_b1] = read_byte(aux_w2++);
.................... 				os_cor_pt_t[aux_b1] = read_byte(aux_w2++);
.................... 				}
.................... 			aux_w2 = ee_off_fp_20;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				off_set_fp[aux_b1] = read_byte(aux_w2++);
.................... 				}
.................... 			aux_w2 = ee_os_pot_r_20;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				os_pot_pt_r[aux_b1] = read_byte(aux_w2++);
.................... 				os_pot_pt_s[aux_b1] = read_byte(aux_w2++);
.................... 				os_pot_pt_t[aux_b1] = read_byte(aux_w2++);
.................... 				}
.................... 		#endif
.................... 	
.................... 	#else
.................... 		os_cor_r = read_byte(ee_os_cor_r);		
0345C:  MOVLB  A
0345E:  CLRF   x66
03460:  MOVLW  0B
03462:  MOVWF  x65
03464:  MOVLB  0
03466:  CALL   1C24
0346A:  MOVFF  01,4B1
.................... 		#if (monofasico == false)
.................... 			os_cor_s = read_byte(ee_os_cor_s);		
0346E:  MOVLB  A
03470:  CLRF   x66
03472:  MOVLW  0C
03474:  MOVWF  x65
03476:  MOVLB  0
03478:  CALL   1C24
0347C:  MOVFF  01,4B2
.................... 			os_cor_t = read_byte(ee_os_cor_t);		
03480:  MOVLB  A
03482:  CLRF   x66
03484:  MOVLW  0D
03486:  MOVWF  x65
03488:  MOVLB  0
0348A:  CALL   1C24
0348E:  MOVFF  01,4B3
.................... 		#endif
.................... 	#endif
.................... 
.................... 	#if (st5x == true)
.................... 		nro_pisca_led = 0;
.................... 		time_led = 0;
.................... 	    status_led = 0;
.................... 	    status_flags = 0;
.................... 	#endif
.................... 	 calcula_fundo_escala_corrente();
03492:  CALL   0004
.................... 
.................... 	#if (com_rep == true)
.................... 		modo_rep = read_byte(ee_modo_rep);
.................... 		fat_conv_ativa = read_word(ee_fat_conv_ativa);
.................... 		fat_conv_reativa = read_word(ee_fat_conv_reativa);
.................... 		time_out_modo_rep = 1;
.................... 		ultimo_pulso_at = read_word(ee_ultimo_pulso_at);
.................... 		ultimo_pulso_reat = read_word(ee_ultimo_pulso_reat);
.................... 		ultima_pot_at = read_word(ee_ultima_pot_at);
.................... 		ultima_pot_reat = read_word(ee_ultima_pot_reat);
.................... 		if (modo_rep == 1)
.................... 			{
.................... 			fecha_periodo();   
.................... 			recupera_rep();
.................... 			}
.................... 	#endif
.................... 
.................... 	#if (st8500c == true)
.................... 		ala_demanda_ativa = read_byte(ee_ala_demanda_ativa);
03496:  MOVLB  A
03498:  CLRF   x66
0349A:  MOVLW  49
0349C:  MOVWF  x65
0349E:  MOVLB  0
034A0:  CALL   1C24
034A4:  MOVFF  01,4DA
.................... 	#else
.................... 		#if (com_alarme_demanda == true)
.................... 			ala_demanda_ativa = read_word(ee_ala_demanda_ativa);
.................... 		#endif
.................... 	#endif
.................... 
.................... 	#if (st5x== true)
034A8:  GOTO   1BDBC (RETURN)
.................... 		#if (com_saida_pulsos == true)
.................... 			const_saida_kw = read_word(ee_const_saida_kw);
.................... 			const_saida_kvar = read_word(ee_const_saida_kvar);
.................... 			qual_variavel_pulsa = read_byte(ee_qual_variavel_pulsa);
.................... 		#endif
.................... 	#endif
.................... 	
.................... 
.................... }
.................... 
.................... #if (com_regs == true)
.................... 	void inicializa_regs(void)
.................... 	{	
.................... 		aux_l2 = 0;
*
068EC:  MOVLB  3
068EE:  CLRF   x77
068F0:  CLRF   x76
068F2:  CLRF   x75
068F4:  CLRF   x74
.................... 		aux_l2 = (int32)(hora);
068F6:  CLRF   x77
068F8:  CLRF   x76
068FA:  CLRF   x75
068FC:  MOVFF  3C2,374
.................... 		aux_w1 = (int16)(minuto);
06900:  CLRF   x63
06902:  MOVFF  3C3,362
.................... 		aux_l2 = (int32)(aux_l2 * 3600);
06906:  MOVFF  377,A75
0690A:  MOVFF  376,A74
0690E:  MOVFF  375,A73
06912:  MOVFF  374,A72
06916:  MOVLB  A
06918:  CLRF   x79
0691A:  CLRF   x78
0691C:  MOVLW  0E
0691E:  MOVWF  x77
06920:  MOVLW  10
06922:  MOVWF  x76
06924:  MOVLB  0
06926:  RCALL  67FC
06928:  MOVFF  03,377
0692C:  MOVFF  02,376
06930:  MOVFF  01,375
06934:  MOVFF  00,374
.................... 		aux_w1 = (int16)(aux_w1 * 60);
06938:  MOVFF  363,A67
0693C:  MOVFF  362,A66
06940:  MOVLB  A
06942:  CLRF   x69
06944:  MOVLW  3C
06946:  MOVWF  x68
06948:  MOVLB  0
0694A:  CALL   473C
0694E:  MOVFF  02,363
06952:  MOVFF  01,362
.................... 		aux_l2 = (int32)(aux_l2 + aux_w1);
06956:  MOVLB  3
06958:  MOVF   x62,W
0695A:  ADDWF  x74,W
0695C:  MOVWF  00
0695E:  MOVF   x63,W
06960:  ADDWFC x75,W
06962:  MOVWF  01
06964:  MOVLW  00
06966:  ADDWFC x76,W
06968:  MOVWF  02
0696A:  MOVLW  00
0696C:  ADDWFC x77,W
0696E:  MOVWF  x77
06970:  MOVFF  02,376
06974:  MOVFF  01,375
06978:  MOVFF  00,374
.................... 		aux_l2 = (int32)(aux_l2 + segundo);
0697C:  MOVF   xC4,W
0697E:  ADDWF  x74,W
06980:  MOVWF  00
06982:  MOVLW  00
06984:  ADDWFC x75,W
06986:  MOVWF  01
06988:  MOVLW  00
0698A:  ADDWFC x76,W
0698C:  MOVWF  02
0698E:  MOVLW  00
06990:  ADDWFC x77,W
06992:  MOVWF  x77
06994:  MOVFF  02,376
06998:  MOVFF  01,375
0699C:  MOVFF  00,374
.................... 		aux_l2 = (int32)(aux_l2 / intervalo_reg);
069A0:  BCF    FD8.1
069A2:  MOVFF  377,A73
069A6:  MOVFF  376,A72
069AA:  MOVFF  375,A71
069AE:  MOVFF  374,A70
069B2:  MOVLB  A
069B4:  CLRF   x77
069B6:  CLRF   x76
069B8:  MOVFF  4C6,A75
069BC:  MOVFF  4C5,A74
069C0:  MOVLB  0
069C2:  RCALL  6858
069C4:  MOVFF  03,377
069C8:  MOVFF  02,376
069CC:  MOVFF  01,375
069D0:  MOVFF  00,374
.................... 		aux_l2 = (int32)(aux_l2 * intervalo_reg);
069D4:  MOVFF  377,A75
069D8:  MOVFF  376,A74
069DC:  MOVFF  375,A73
069E0:  MOVFF  374,A72
069E4:  MOVLB  A
069E6:  CLRF   x79
069E8:  CLRF   x78
069EA:  MOVFF  4C6,A77
069EE:  MOVFF  4C5,A76
069F2:  MOVLB  0
069F4:  RCALL  67FC
069F6:  MOVFF  03,377
069FA:  MOVFF  02,376
069FE:  MOVFF  01,375
06A02:  MOVFF  00,374
06A06:  RETURN 0
.................... 		}
.................... #endif	
.................... 
.................... /* rotinas de configuraÿçÿão */
.................... 
.................... void le_config(void)
.................... {
.................... /* carrega variaveis nÿão volÿáteis da e2prom */
.................... 
.................... /* 	inicializa variÿáveis volÿáteis */
.................... 	
.................... 	
.................... /* calcula checksum das variÿáveis */
.................... 
.................... 	calcula_checksum_vars() ;
*
01A4A:  RCALL  1A42
01A4C:  RETURN 0
.................... }
.................... 
.................... void calcula_checksum_vars (void)
.................... {
.................... 	checksum_vars = 0;
*
01A42:  MOVLB  8
01A44:  CLRF   x88
01A46:  MOVLB  0
01A48:  RETURN 0
.................... }
.................... 
.................... void verifica_checksum_vars(void)
.................... {
.................... 	aux_b1 = checksum_vars;
*
173F4:  MOVFF  888,3B1
.................... 	calcula_checksum_vars();
173F8:  CALL   1A42
.................... 	if (aux_b1 != checksum_vars)
173FC:  MOVLB  8
173FE:  MOVF   x88,W
17400:  MOVLB  3
17402:  SUBWF  xB1,W
17404:  BZ    1740E
.................... 		{
.................... 		le_config();
17406:  MOVLB  0
17408:  CALL   1A4A
1740C:  MOVLB  3
.................... 		}
1740E:  MOVLB  0
17410:  GOTO   17424 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #if (com_cht == true)
.................... 	void zera_chts(void)
.................... 	{
.................... 		for ( aux_b1 = 0; aux_b1 < (NRO_CHT + 1); aux_b1++)
.................... 			{
.................... 			pulsa_wdt();
.................... 			CHT_tr[aux_b1] = 0;
.................... 			CHT_cr[aux_b1] = 0;
.................... 			#if (monofasico == false)
.................... 				CHT_ts[aux_b1] = 0;
.................... 				CHT_cs[aux_b1] = 0;
.................... 				CHT_tt[aux_b1] = 0;
.................... 			 	CHT_ct[aux_b1] = 0;
.................... 			#endif
.................... 			}
.................... 		 passo_cht = 1;
.................... 		 qcht = 0;
.................... 	
.................... 	}
.................... #endif
.................... 
.................... 	
.................... 
.................... #include "st_roti.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS                                  *
.................... ; Modulo: ROTINAS                               	                     *
.................... ; Funcao: MODULO DE ROTINAS DE COMUNICACAO								 *
.................... ; 																		 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 01/08/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... #if (st5x == true)
.................... 	word soma_dip_vel;
.................... 	char media_dip_vel;
.................... 	word res_dip_vel;
.................... #endif	
.................... 
.................... #if ((controlador == true) || (st92 == true))
.................... 	#if (disp_lcd == true)
.................... 		void trata_saidas(void);
.................... 	#endif
.................... #endif
.................... 
.................... #if (st5x == true)
.................... 	#if (TECNOFLUX == TRUE)
.................... 		#define versao_1200	true
.................... 	#else
.................... 		#define versao_1200	false
.................... 	#endif
.................... #else
.................... 	#define versao_1200	false
.................... #endif
.................... 
.................... #if (versao_1200 == true)
.................... 	#define vel_4800	1200	//4800
.................... 	#define vel_9600	2400	//9600
.................... 	#define vel_19200	4800	//19200
.................... 	#define vel_38400	9600	//38400
.................... 
.................... 	#define vel_2400	2400	//Estes dois valores existem apenas para completar a rotina 
.................... 	#define vel_57600	57600
.................... #else
.................... 	#define vel_2400	2400
.................... 	#define vel_4800	4800
.................... 	#define vel_9600	9600
.................... 	#define vel_19200	19200
.................... 	#define vel_38400	38400
.................... 	#define vel_57600	57600
.................... #endif
.................... 
.................... 
.................... 
.................... void calcula_mul_tc(void)
.................... {
.................... 	#if (portatil == true)
.................... 		#if (se_com_flex ==	true)
.................... //			mul_tc = (float)(tabela_pt[tipo_ponteira]);
.................... //			mul_tc = (float)(mul_tc/500);
.................... 			mul_tc = (float)(tabela_mul_tc[tipo_ponteira]);
.................... 		#else
.................... 			char aux_bx;
.................... 			word aux_wx;
.................... 			for (aux_bx = 0; aux_bx < NRO_POSI_TC; aux_bx++)
.................... 				{
.................... 				aux_wx = tabela_tc[aux_bx];
.................... 				if (aux_wx == valor_tc)
.................... 					{
.................... 					mul_tc = (float)(valor_tc);
.................... 					mul_tc = (float)(mul_tc/500);
.................... 					break;
.................... 					}
.................... 				}
.................... 		#endif
.................... 	#else
.................... 		char aux_bx;
.................... 		word aux_wx;
.................... 		for (aux_bx = 0; aux_bx < NRO_POSI_TC; aux_bx++)
*
02AB8:  MOVLB  A
02ABA:  CLRF   x4C
02ABC:  MOVF   x4C,W
02ABE:  SUBLW  24
02AC0:  BNC   2B46
.................... 			{
.................... 			aux_wx = tabela_tc[aux_bx];
02AC2:  BCF    FD8.0
02AC4:  RLCF   x4C,W
02AC6:  CLRF   03
02AC8:  MOVLB  0
02ACA:  CALL   0128
02ACE:  TBLRD*+
02AD0:  MOVFF  FF5,03
02AD4:  MOVLB  A
02AD6:  MOVWF  x4D
02AD8:  MOVFF  03,A4E
.................... 			if (aux_wx == valor_tc)
02ADC:  MOVLB  4
02ADE:  MOVF   xBF,W
02AE0:  MOVLB  A
02AE2:  SUBWF  x4D,W
02AE4:  BNZ   2B42
02AE6:  MOVLB  4
02AE8:  MOVF   xC0,W
02AEA:  MOVLB  A
02AEC:  SUBWF  x4E,W
02AEE:  BNZ   2B42
.................... 				{
.................... 				mul_tc = (float)(valor_tc);
02AF0:  MOVFF  4C0,A7E
02AF4:  MOVFF  4BF,A7D
02AF8:  MOVLB  0
02AFA:  RCALL  2924
02AFC:  MOVFF  03,351
02B00:  MOVFF  02,350
02B04:  MOVFF  01,34F
02B08:  MOVFF  00,34E
.................... 				mul_tc = (float)(mul_tc/500);
02B0C:  MOVFF  351,A83
02B10:  MOVFF  350,A82
02B14:  MOVFF  34F,A81
02B18:  MOVFF  34E,A80
02B1C:  MOVLB  A
02B1E:  CLRF   x87
02B20:  CLRF   x86
02B22:  MOVLW  7A
02B24:  MOVWF  x85
02B26:  MOVLW  87
02B28:  MOVWF  x84
02B2A:  MOVLB  0
02B2C:  RCALL  295A
02B2E:  MOVFF  03,351
02B32:  MOVFF  02,350
02B36:  MOVFF  01,34F
02B3A:  MOVFF  00,34E
.................... 				break;
02B3E:  MOVLB  A
02B40:  BRA    2B46
.................... 				}
02B42:  INCF   x4C,F
02B44:  BRA    2ABC
.................... 			}
.................... 	#endif
02B46:  MOVLB  0
02B48:  RETURN 0
.................... }
.................... 
.................... 
.................... word ajusta_leitura(word valor)
.................... {
.................... 	return((word)(mul_tc * valor));
.................... }
.................... 
.................... word ajusta_leitura_baixa(word valor)
.................... {
.................... 	valor = valor * 10;
.................... 	return((word)(mul_tc * valor));
.................... }
.................... 
.................... word ajusta_leitura_long(int32 valor)
.................... {
.................... 	return((int32)(mul_tc * valor));
.................... }
.................... 
.................... 
.................... #if (st_prog == true)
.................... 	void inic_rx2()
.................... 	{
.................... 		ptrrx2 = 0;
.................... 		retrx2 = 0;
.................... 		numbrx2 = 0;
.................... 		numbtx2 = 0;
.................... 		ptrtx2 = 0;
.................... 		delay_ms(5);
.................... 		output_low(direcao2);
.................... 	}
.................... 	
.................... 	
.................... 	void dispara_tx2(void)
.................... 	{
.................... 		output_high(direcao2);
.................... 		delay_us(500);
.................... 		if (ptrtx2 > TAM_TX2)
.................... 			{
.................... 			ptrtx2 = 0;
.................... 			goto encerra_dispara_tx2;
.................... 			}
.................... 		numbtx2 = ptrtx2;
.................... 		ptrtx2 = 0;
.................... 		while(numbtx2 != 0)
.................... 			{
.................... 			putc(buf_tx2[ptrtx2++], sultech);
.................... 			numbtx2--;
.................... 			}
.................... 	encerra_dispara_tx2:		
.................... 		time_out_modbus2 = 6;
.................... 		inic_rx2();
.................... 		time_out_sultech = INTS_PER_SECOND;
.................... 	}
.................... 	
.................... 	
.................... 	char ret_ser2(void)
.................... 	{ 
.................... 		caracter = 0;
.................... 		if (retrx2 != ptrrx2)
.................... 			{
.................... 			caracter = buf_rx2[retrx2++];
.................... 			}
.................... 		if (ptrrx2 > TAM_RX2)
.................... 			{
.................... 			retrx2 = 0;
.................... 			}
.................... 	  return(caracter);
.................... 	}
.................... 
.................... 	void tx2_lfcr (void)
.................... 	{
.................... 		buf_tx2[ptrtx2++] = CR;
.................... 		buf_tx2[ptrtx2++] = LF;
.................... 	}
.................... 	
.................... 
.................... 
.................... 	void avanca_retrx(char quant)
.................... 	{
.................... 		retrx2 = retrx2 + quant;
.................... 	}
.................... 
.................... 	word retira_xxx(void)
.................... 	{
.................... 		word aux_w;
.................... 		aux_w = ret_ser2() - '0' ;
.................... 		aux_w = aux_w * 100;
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ) * 10);
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ));
.................... 		ret_ser2();
.................... 		return(aux_w);
.................... 	}
.................... 
.................... 	char retira_xx(void)
.................... 	{
.................... 		char aux_b;
.................... 		aux_b = ret_ser2() - '0' ;
.................... 		aux_b = aux_b * 10;
.................... 		aux_b = aux_b + ((ret_ser2() - '0' ));
.................... 		ret_ser2();
.................... 		return(aux_b);
.................... 	}
.................... 
.................... 	word retira_xxxx(void)
.................... 	{
.................... 		word aux_w;
.................... 		aux_w = ret_ser2() - '0' ;
.................... 		aux_w = aux_w * 1000;
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ) * 100);
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ) * 10);
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ));
.................... 		ret_ser2();
.................... 		return(aux_w);
.................... 	}
.................... 
.................... 	word retira_xxxxx(void)
.................... 	{
.................... 		word aux_w;
.................... 		aux_w = ret_ser2() - '0' ;
.................... 		aux_w = aux_w * 10000;
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ) * 1000);
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ) * 100);
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ) * 10);
.................... 		aux_w = aux_w + ((ret_ser2() - '0' ));
.................... 		ret_ser2();
.................... 		return(aux_w);
.................... 	}
.................... 
.................... 	word retira_xxx_x_Q5(void)
.................... 	{
.................... 		word aux_l;
.................... 		aux_l = ret_ser2() - '0' ;
.................... 		aux_l = aux_l * 1000;
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 100);
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 10);
.................... 		ret_ser2();		// retira o ponto
.................... 		aux_l = aux_l + (ret_ser2() - '0' );
.................... 		aux_l = aux_l * 32;
.................... 		ret_ser2();
.................... 		return(word)(aux_l / 10);
.................... 	}
.................... 	word retira_xxx_x_Q6(void)
.................... 	{
.................... 		word aux_l;
.................... 		aux_l = ret_ser2() - '0' ;
.................... 		aux_l = aux_l * 1000;
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 100);
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 10);
.................... 		ret_ser2();		// retira o ponto
.................... 		aux_l = aux_l + (ret_ser2() - '0' );
.................... 		aux_l = aux_l * 64;
.................... 		ret_ser2();
.................... 		return(word)(aux_l / 10);
.................... 	}
.................... 	
.................... 	word retira_xxxx_x_q3(void)
.................... 	{
.................... 		word aux_l;
.................... 		aux_l = ret_ser2() - '0' ;
.................... 		aux_l = aux_l * 10000;
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 1000);
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 100);
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 10);
.................... 		ret_ser2();		// retira o ponto
.................... 		aux_l = aux_l + (ret_ser2() - '0' );
.................... 		aux_l = aux_l * 8;
.................... 		ret_ser2();
.................... 		return(word)(aux_l / 10);
.................... 	}
.................... 
.................... 	word retira_xxxx_x_q5(void)
.................... 	{
.................... 		word aux_l;
.................... 		aux_l = ret_ser2() - '0' ;
.................... 		aux_l = aux_l * 10000;
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 1000);
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 100);
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 10);
.................... 		ret_ser2();		// retira o ponto
.................... 		aux_l = aux_l + (ret_ser2() - '0' );
.................... 		aux_l = aux_l * 32;
.................... 		ret_ser2();
.................... 		return(word)(aux_l / 10);
.................... 	}
.................... 	word retira_x_xx_q10(void)
.................... 	{
.................... 		word aux_l;
.................... 		aux_l = ret_ser2() - '0' ;
.................... 		aux_l = aux_l * 1000;
.................... 		ret_ser2();		// retira o ponto
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 100);
.................... 		aux_l = aux_l + ((ret_ser2() - '0' ) * 10);
.................... 		aux_l = aux_l * 1024;
.................... 		ret_ser2();
.................... 		return(word)(aux_l / 1000);
.................... 	}
.................... 
.................... #endif
.................... 
.................... void inic_rx()
.................... {
.................... 	enable_interrupts(INT_RDA);
*
06A08:  BSF    F9D.5
.................... 	ptrrx = 0;
06A0A:  MOVLB  5
06A0C:  CLRF   x30
.................... 	retrx = 0;
06A0E:  CLRF   x31
.................... 	numbrx = 0;
06A10:  CLRF   x32
.................... 	numbtx = 0;
06A12:  CLRF   x33
.................... 	ptrtx = 0;
06A14:  CLRF   x2F
.................... 	#if (vel_4800 == 1200)
.................... 		delay_ms(20);
.................... 	#else
.................... 		delay_ms(5);
06A16:  MOVLW  05
06A18:  MOVLB  A
06A1A:  MOVWF  x67
06A1C:  MOVLB  0
06A1E:  CALL   1834
.................... 	#endif
.................... 	#if (com_485 == true)
.................... 		output_low(direcao);
06A22:  BCF    F98.3
06A24:  BCF    F8F.3
.................... 	#endif	
.................... 	#if (st5x==1)
.................... 		fled_tx = 1;
.................... 		fled_rx = 1;
.................... 	#endif
.................... 	#if ((controlador == true) || (st92 == true))
.................... 		led_rx = 0;
06A26:  MOVLB  8
06A28:  BCF    x84.2
.................... 		led_tx = 0;
06A2A:  BCF    x84.3
.................... 	#endif
06A2C:  MOVLB  0
06A2E:  RETURN 0
.................... 	
.................... }
.................... 
.................... #if (home_system == false)
.................... 	void dispara_tx(void)
.................... 	{
.................... 		disable_interrupts(INT_RDA);
*
06EE4:  BCF    F9D.5
.................... 		if (ptrtx > TAM_TX)
06EE6:  MOVLB  5
06EE8:  MOVF   x2F,W
06EEA:  SUBLW  FE
06EEC:  BC    6EF2
.................... 			{
.................... 			ptrtx = 0;
06EEE:  CLRF   x2F
.................... 			goto encerra_dispara_tx;
06EF0:  BRA    6F4C
.................... 			}
.................... 		#if (st5x==1)
.................... 			fled_tx = 0;
.................... 			fled_rx = 1;
.................... 		#endif
.................... 		#if ((controlador == true) || (st92 == true))
.................... 			led_tx = 1;
06EF2:  MOVLB  8
06EF4:  BSF    x84.3
.................... 			led_rx = 0;
06EF6:  BCF    x84.2
.................... 			#if (ST8100C == true)
.................... 				buf_display[4] = LED;
.................... 			#endif
.................... 			#if (disp_lcd == true)
.................... 				trata_saidas();
06EF8:  MOVLB  0
06EFA:  CALL   16A2
.................... 			#endif
.................... 		#endif
.................... 		#if (com_485 == true)
.................... 			output_high(direcao);
06EFE:  BCF    F98.3
06F00:  BSF    F8F.3
.................... 			#if (vel_4800 == 1200)
.................... 				delay_ms(10);
.................... 			#else
.................... 				delay_us(500);
06F02:  CLRWDT
06F04:  MOVLW  02
06F06:  MOVLB  A
06F08:  MOVWF  x50
06F0A:  MOVLW  F9
06F0C:  MOVWF  x51
06F0E:  MOVLB  0
06F10:  BRA    6EB0
06F12:  MOVLB  A
06F14:  DECFSZ x50,F
06F16:  BRA    6F0A
.................... 			#endif
.................... 		  	while (time_out_modbus != 0)
06F18:  MOVLB  5
06F1A:  MOVF   x1D,F
06F1C:  BZ    6F20
.................... 		  		{
06F1E:  BRA    6F1A
.................... 		  		}
.................... 		#endif	
.................... 		numbtx = ptrtx;
06F20:  MOVFF  52F,533
.................... 		ptrtx = 0;
06F24:  CLRF   x2F
.................... 		while(numbtx != 0)
06F26:  MOVF   x33,F
06F28:  BZ    6F4C
.................... 			{
.................... 			putc(buf_tx[ptrtx++], modbus);
06F2A:  MOVF   x2F,W
06F2C:  INCF   x2F,F
06F2E:  ADDLW  48
06F30:  MOVWF  FE9
06F32:  MOVLW  09
06F34:  MOVWF  FEA
06F36:  BTFSC  FD8.0
06F38:  INCF   FEA,F
06F3A:  MOVFF  FEF,A50
06F3E:  MOVLB  A
06F40:  MOVF   x50,W
06F42:  MOVLB  0
06F44:  BRA    6EDA
.................... 			numbtx--;
06F46:  MOVLB  5
06F48:  DECF   x33,F
06F4A:  BRA    6F26
.................... 			}
.................... encerra_dispara_tx:
.................... 		time_out_modbus = 6;
06F4C:  MOVLW  06
06F4E:  MOVLB  5
06F50:  MOVWF  x1D
.................... 		inic_rx();
06F52:  MOVLB  0
06F54:  RCALL  6A08
06F56:  RETURN 0
.................... 	}
.................... #endif
.................... 
.................... 
.................... void tx_lfcr (void){
.................... 	buf_tx[ptrtx++] = CR;
.................... 	buf_tx[ptrtx++] = LF;
.................... }
.................... 
.................... 
.................... 
.................... char ret_ser(void){
.................... 	caracter = 0;
*
06D22:  MOVLB  3
06D24:  CLRF   xBD
.................... 	if (retrx != ptrrx){
06D26:  MOVLB  5
06D28:  MOVF   x30,W
06D2A:  SUBWF  x31,W
06D2C:  BZ    6D42
.................... 		caracter = buf_rx[retrx++];
06D2E:  MOVF   x31,W
06D30:  INCF   x31,F
06D32:  CLRF   03
06D34:  ADDLW  40
06D36:  MOVWF  FE9
06D38:  MOVLW  08
06D3A:  ADDWFC 03,W
06D3C:  MOVWF  FEA
06D3E:  MOVFF  FEF,3BD
.................... 	}
.................... 	if (ptrrx > TAM_RX){
06D42:  MOVF   x30,W
06D44:  SUBLW  20
06D46:  BC    6D4A
.................... 		retrx = 0;
06D48:  CLRF   x31
.................... 	}
.................... 	return(caracter);
06D4A:  MOVLB  3
06D4C:  MOVFF  3BD,01
06D50:  MOVLB  0
06D52:  RETURN 0
.................... }
.................... 
.................... #if (home_system == false)
.................... 	void tx_erro(void){
.................... 		ptrtx=0;
.................... 		if (erro==1){
.................... 			buf_tx[ptrtx++] = 'N';
.................... 		}
.................... 		buf_tx[ptrtx++] = 'O';
.................... 		buf_tx[ptrtx++] = 'K';
.................... 		buf_tx[ptrtx++] = CR;
.................... 		dispara_tx();
.................... 	}
.................... #endif
.................... 
.................... #if (home_system == false)
.................... 	void seta_baud_rate(void)
.................... 	{
.................... 		#if (controlador == true)
.................... 			#if (com_rep == true)
.................... 		  		set_uart_speed (2400, rep);
.................... 			#endif
.................... 		#endif
.................... 		#if (st5x == true)
.................... 			#if (TECNOFLUX == TRUE)
.................... 		  		set_uart_speed (9600, modbus);
.................... 			  	return;
.................... 			#endif
.................... 		#endif
.................... 	
.................... 		#if (st9600r == true)
.................... 			#if (teste_baud_115	== true)
.................... 		  		set_uart_speed (57600, modbus);
.................... 			  	return;
.................... 			#endif	
.................... 		#endif	
.................... 	
.................... 		#if (printa == true)
.................... 		  	set_uart_speed (vel_19200, modbus);
.................... 			#if (st_prog == true)
.................... 				#if (simula_rep == true)
.................... 				 	set_uart_speed (vel_2400, sultech);
.................... 				#else
.................... 				 	set_uart_speed (vel_19200, sultech);
.................... 				#endif
.................... 			#endif
.................... 			return;
.................... 		#else
.................... 			#if (ad_microchip == true)
.................... 				#if (fixa_modb == true)
.................... 				  	set_uart_speed (vel_19200, modbus);
.................... 					#if (st_prog == true)
.................... 						#if (simula_rep == true)
.................... 						 	set_uart_speed (vel_2400, sultech);
.................... 						#else
.................... 						 	set_uart_speed (vel_19200, sultech);
.................... 						#endif
.................... 					#endif
.................... 					return;
.................... 				#endif
.................... 			#endif
.................... 		#endif
.................... 	
.................... 		if (baud_rate == vel_2400)
*
01766:  MOVLB  4
01768:  MOVF   xC3,W
0176A:  SUBLW  60
0176C:  BNZ   1788
0176E:  MOVF   xC4,W
01770:  SUBLW  09
01772:  BNZ   1788
.................... 			{
.................... 			#if (st_prog == true)
.................... 				#if (simula_rep == true)
.................... 				 	set_uart_speed (vel_2400, sultech);
.................... 				#else
.................... 				 	set_uart_speed (vel_19200, sultech);
.................... 				#endif
.................... 			#endif
.................... 		  	set_uart_speed(vel_2400, modbus);
01774:  BSF    F65.3
01776:  MOVLW  46
01778:  MOVWF  FAF
0177A:  MOVLW  10
0177C:  MOVWF  FD4
0177E:  MOVLW  A6
01780:  MOVWF  FAC
01782:  MOVLW  90
01784:  MOVWF  FAB
.................... 			}
01786:  BRA    1830
.................... 		else if (baud_rate == vel_4800)
01788:  MOVF   xC3,W
0178A:  SUBLW  C0
0178C:  BNZ   17A8
0178E:  MOVF   xC4,W
01790:  SUBLW  12
01792:  BNZ   17A8
.................... 			{
.................... 			#if (st_prog == true)
.................... 				#if (simula_rep == true)
.................... 				 	set_uart_speed (vel_2400, sultech);
.................... 				#else
.................... 				 	set_uart_speed (vel_19200, sultech);
.................... 				#endif
.................... 			#endif
.................... 		  	set_uart_speed(vel_4800, modbus);
01794:  BSF    F65.3
01796:  MOVLW  22
01798:  MOVWF  FAF
0179A:  MOVLW  08
0179C:  MOVWF  FD4
0179E:  MOVLW  A6
017A0:  MOVWF  FAC
017A2:  MOVLW  90
017A4:  MOVWF  FAB
.................... 			}
017A6:  BRA    1830
.................... 		else if (baud_rate ==  vel_9600)
017A8:  MOVF   xC3,W
017AA:  SUBLW  80
017AC:  BNZ   17C8
017AE:  MOVF   xC4,W
017B0:  SUBLW  25
017B2:  BNZ   17C8
.................... 			{
.................... 			#if (st_prog == true)
.................... 				#if (simula_rep == true)
.................... 				 	set_uart_speed (vel_2400, sultech);
.................... 				#else
.................... 				 	set_uart_speed (vel_19200, sultech);
.................... 				#endif
.................... 			#endif
.................... 		  	set_uart_speed(vel_9600, modbus);
017B4:  BSF    F65.3
017B6:  MOVLW  11
017B8:  MOVWF  FAF
017BA:  MOVLW  04
017BC:  MOVWF  FD4
017BE:  MOVLW  A6
017C0:  MOVWF  FAC
017C2:  MOVLW  90
017C4:  MOVWF  FAB
.................... 			}
017C6:  BRA    1830
.................... 		else if (baud_rate ==  vel_19200)
017C8:  MOVF   xC3,F
017CA:  BNZ   17E6
017CC:  MOVF   xC4,W
017CE:  SUBLW  4B
017D0:  BNZ   17E6
.................... 			{
.................... 			#if (st_prog == true)
.................... 				#if (simula_rep == true)
.................... 				 	set_uart_speed (vel_2400, sultech);
.................... 				#else
.................... 				 	set_uart_speed (vel_19200, sultech);
.................... 				#endif
.................... 			#endif
.................... 		  	set_uart_speed(vel_19200, modbus);
017D2:  BSF    F65.3
017D4:  MOVLW  08
017D6:  MOVWF  FAF
017D8:  MOVLW  02
017DA:  MOVWF  FD4
017DC:  MOVLW  A6
017DE:  MOVWF  FAC
017E0:  MOVLW  90
017E2:  MOVWF  FAB
.................... 			}
017E4:  BRA    1830
.................... 		else if (baud_rate ==  vel_38400)
017E6:  MOVF   xC3,F
017E8:  BNZ   1800
017EA:  MOVF   xC4,W
017EC:  SUBLW  96
017EE:  BNZ   1800
.................... 			{
.................... 			#if (st_prog == true)
.................... 				#if (simula_rep == true)
.................... 				 	set_uart_speed (vel_2400, sultech);
.................... 				#else
.................... 				 	set_uart_speed (vel_19200, sultech);
.................... 				#endif
.................... 			#endif
.................... 		  	set_uart_speed(vel_38400, modbus);
017F0:  BCF    F65.3
017F2:  MOVLW  40
017F4:  MOVWF  FAF
017F6:  MOVLW  A6
017F8:  MOVWF  FAC
017FA:  MOVLW  90
017FC:  MOVWF  FAB
.................... 			}
017FE:  BRA    1830
.................... 		else if (baud_rate ==  vel_57600)
01800:  MOVF   xC3,F
01802:  BNZ   181E
01804:  MOVF   xC4,W
01806:  SUBLW  E1
01808:  BNZ   181E
.................... 			{
.................... 			#if (st_prog == true)
.................... 				#if (simula_rep == true)
.................... 				 	set_uart_speed (vel_2400, sultech);
.................... 				#else
.................... 				 	set_uart_speed (vel_19200, sultech);
.................... 				#endif
.................... 			#endif
.................... 		  	set_uart_speed(vel_57600, modbus);
0180A:  BSF    F65.3
0180C:  MOVLW  AD
0180E:  MOVWF  FAF
01810:  MOVLW  00
01812:  MOVWF  FD4
01814:  MOVLW  A6
01816:  MOVWF  FAC
01818:  MOVLW  90
0181A:  MOVWF  FAB
.................... 			}
0181C:  BRA    1830
.................... 		else
.................... 			{
.................... 		  	set_uart_speed(vel_19200, modbus);
0181E:  BSF    F65.3
01820:  MOVLW  08
01822:  MOVWF  FAF
01824:  MOVLW  02
01826:  MOVWF  FD4
01828:  MOVLW  A6
0182A:  MOVWF  FAC
0182C:  MOVLW  90
0182E:  MOVWF  FAB
.................... 			#if (st_prog == true)
.................... 				#if (simula_rep == true)
.................... 				 	set_uart_speed (vel_2400, sultech);
.................... 				#else
.................... 				 	set_uart_speed (vel_19200, sultech);
.................... 				#endif
.................... 			#endif
.................... 			}
01830:  MOVLB  0
01832:  RETURN 0
.................... 	}
.................... #endif	
.................... 
.................... #if (home_system == true)
.................... 	void le_dip_ligacao(void)
.................... 	{
.................... 		if (media_dip_vel == 4)
.................... 			{
.................... 			res_dip_vel = soma_dip_vel / 4;
.................... 			soma_dip_vel = 0;
.................... 			media_dip_vel = 0;
.................... 			}
.................... 		else if (media_dip_vel > 4)
.................... 			{
.................... 			soma_dip_vel = 0;
.................... 			media_dip_vel = 0;
.................... 			return;
.................... 			}
.................... 		else
.................... 			{
.................... 			soma_dip_vel += dip_vel;
.................... 			media_dip_vel++;
.................... 			return;
.................... 			}
.................... 		if (res_dip_vel < 50)			// 0000
.................... 			{
.................... //			baud_rate = vel_4800;
.................... 			tipo_ligacao = 0;		// estrela
.................... 			}
.................... 		else if (res_dip_vel < 85)		// 1000
.................... 			{
.................... //			baud_rate = vel_4800;
.................... 			tipo_ligacao = 0;		// estrela
.................... 			}
.................... 		else if (res_dip_vel < 155)		// 0100
.................... 			{
.................... //			baud_rate = vel_4800;
.................... 			tipo_ligacao = 0;		// delta aberto, por enquanto fica em estrela depois vai para 3
.................... 			}
.................... 		else if (res_dip_vel < 215)		// 1100
.................... 			{
.................... //			baud_rate = vel_4800;
.................... 			tipo_ligacao = 0;		// delta 
.................... 			}
.................... 	//
.................... 		else if (res_dip_vel < 285)		// 0010
.................... 			{
.................... //			baud_rate = vel_19200;
.................... 			tipo_ligacao = 0;		// estrela
.................... 			}
.................... 		else if (res_dip_vel < 350)		// 1010
.................... 			{
.................... //			baud_rate = vel_19200;
.................... 			tipo_ligacao = 0;		// estrela
.................... 			}
.................... 		else if (res_dip_vel < 420)		// 0110
.................... 			{
.................... //			baud_rate = vel_19200;
.................... 			tipo_ligacao = 0;		// delta aberto, por enquanto fica em estrela depois vai para 3
.................... 			}
.................... 		else if (res_dip_vel < 480)		// 1110
.................... 			{
.................... //			baud_rate = vel_19200;
.................... 			tipo_ligacao = 0;		// delta 
.................... 			}
.................... 	//
.................... 		else if (res_dip_vel < 530)		// 0001
.................... 			{
.................... //			baud_rate = vel_9600;
.................... 			tipo_ligacao = 2;		// // delta aberto, por enquanto fica em estrela depois vai para 3
.................... 			}
.................... 		else if (res_dip_vel < 600)		// 1001
.................... 			{
.................... //			baud_rate = vel_9600;
.................... 			tipo_ligacao = 2;		// estrela
.................... 			}
.................... 		else if (res_dip_vel < 670)		// 0101
.................... 			{
.................... //			baud_rate = vel_9600;
.................... 			tipo_ligacao = 2;		// delta aberto, por enquanto fica em estrela depois vai para 3
.................... 			}
.................... 		else if (res_dip_vel < 730)		// 1101
.................... 			{
.................... //			baud_rate = vel_9600;
.................... 			tipo_ligacao = 2;		// delta 
.................... 			}
.................... 	//
.................... 		else if (res_dip_vel < 780)		// 0011
.................... 			{
.................... 			baud_rate = vel_38400;
.................... 			tipo_ligacao = 0;		// estrela
.................... 			}
.................... 		else if (res_dip_vel < 850)		// 1011
.................... 			{
.................... //			baud_rate = vel_38400;
.................... 			tipo_ligacao = 1;		// estrela
.................... 			}
.................... 		else if (res_dip_vel < 910)		// 0111
.................... 			{
.................... //			baud_rate = vel_38400;
.................... 			tipo_ligacao = 1;		// delta aberto, por enquanto fica em estrela depois vai para 3
.................... 			}
.................... 		else if (res_dip_vel < 980)		// 1111
.................... 			{
.................... //			baud_rate = vel_38400;
.................... 			tipo_ligacao = 1;		// delta 
.................... 			}
.................... 		else
.................... 			{
.................... //			baud_rate = vel_19200;
.................... 			tipo_ligacao = 0;		// estrela
.................... 			}
.................... 	
.................... 		#if (controlador == true)
.................... 			#if (monofasico == true)
.................... 				if (tipo_ligacao == 1)
.................... 					{
.................... 					off_cor_delta = off_cor_s;
.................... 					}
.................... 			#else
.................... 				if (tipo_ligacao == 2)
.................... 					{
.................... 					#if (ade7754 == true)
.................... 						off_cor_delta = fase_delta;
.................... 					#else
.................... 						off_cor_delta = off_cor_s;
.................... 					#endif
.................... 					}
.................... 				else
.................... 					{
.................... 					off_cor_delta = 0;
.................... 					}
.................... 			#endif
.................... 		#else
.................... 			if (tipo_ligacao == 2)
.................... 				{
.................... 				#if (ade7754 == true)
.................... 					off_cor_delta = fase_delta;
.................... 				#else
.................... //					off_cor_delta = off_cor_s;
.................... 				#endif
.................... 				}
.................... 			else
.................... 				{
.................... //				off_cor_delta = 0;
.................... 				}
.................... 		#endif
.................... 	
.................... 	 	aux_b1 = read_byte(ee_tipo_ligacao);
.................... 		if (aux_b1 != tipo_ligacao)
.................... 			{
.................... 			write_byte(ee_tipo_ligacao, 0);
.................... 			}
.................... 	/*		
.................... 		#if (com_485 == true)
.................... 			output_high(direcao);
.................... 			delay_ms(5);
.................... 			
.................... 			fprintf(modbus,"%lu, %lu, %u",res_dip_vel,baud_rate, tipo_ligacao);
.................... 			fprintf(modbus,"\r\n");
.................... 			
.................... 			delay_ms(5);
.................... 			output_low(direcao);
.................... 		#endif
.................... 	*/		
.................... 	}
.................... 
.................... #endif
.................... #if (st5x == TRUE)
.................... 	void le_dip_endereco(void)
.................... 	{
.................... 		#if (TECNOFLUX == TRUE)
.................... 			endereco_nro_serie = ((read_byte(ee_nro_3) -'0') * 10) + (read_byte(ee_nro_4) - '0');
.................... 		#endif
.................... 	}
.................... 
.................... 	void le_dip_baud_ligacao(void)
.................... 	{
.................... 		#if (st5000c_rev12 == true)
.................... 			if ((input(BAUD0) == FALSE) && (input(BAUD1) == FALSE))
.................... 				{
.................... 				baud_rate = 38400;
.................... 				}
.................... 			else if ((input(BAUD0) == TRUE) && (input(BAUD1) == FALSE))
.................... 				{
.................... 				baud_rate = 19200;
.................... 				}
.................... 			else if ((input(BAUD0) == FALSE) && (input(BAUD1) == TRUE))
.................... 				{
.................... 				baud_rate = 9600;
.................... 				}
.................... 			else 
.................... 				{
.................... 				baud_rate = 4800;
.................... 				
.................... 				}
.................... 				
.................... 			if ((input(LIGA0) == FALSE) && (input(LIGA1) == FALSE))
.................... 				{
.................... 				tipo_ligacao = 1;		// delta 
.................... 				}
.................... 			else if ((input(LIGA0) == TRUE) && (input(LIGA1) == FALSE))
.................... 				{
.................... 				tipo_ligacao = 0;	// estrela
.................... 				}
.................... 			else if ((input(LIGA0) == FALSE) && (input(LIGA1) == TRUE))
.................... 				{
.................... 				tipo_ligacao = 2;		// delta aberto
.................... 				}
.................... 			else 
.................... 				{
.................... 				tipo_ligacao = 0;	// estrela
.................... 				}
.................... 			
.................... 		#else
.................... 			if (media_dip_vel == 4)
.................... 				{
.................... 				res_dip_vel = soma_dip_vel / 4;
.................... 				soma_dip_vel = 0;
.................... 				media_dip_vel = 0;
.................... 				}
.................... 			else if (media_dip_vel > 4)
.................... 				{
.................... 				soma_dip_vel = 0;
.................... 				media_dip_vel = 0;
.................... 				return;
.................... 				}
.................... 			else
.................... 				{
.................... 				soma_dip_vel += dip_vel;
.................... 				media_dip_vel++;
.................... 				return;
.................... 				}
.................... 			if (res_dip_vel < 50)			// 0000
.................... 				{
.................... 				baud_rate = vel_4800;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 			else if (res_dip_vel < 85)		// 1000
.................... 				{
.................... 				baud_rate = vel_4800;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 			else if (res_dip_vel < 155)		// 0100
.................... 				{
.................... 				baud_rate = vel_4800;
.................... 				tipo_ligacao = 2;		// delta aberto, por enquanto fica em estrela depois vai para 3
.................... 				}
.................... 			else if (res_dip_vel < 215)		// 1100
.................... 				{
.................... 				baud_rate = vel_4800;
.................... 				tipo_ligacao = 1;		// delta 
.................... 				}
.................... 		//
.................... 			else if (res_dip_vel < 285)		// 0010
.................... 				{
.................... 				baud_rate = vel_19200;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 			else if (res_dip_vel < 350)		// 1010
.................... 				{
.................... 				baud_rate = vel_19200;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 			else if (res_dip_vel < 420)		// 0110
.................... 				{
.................... 				baud_rate = vel_19200;
.................... 				tipo_ligacao = 2;		// delta aberto, por enquanto fica em estrela depois vai para 3
.................... 				}
.................... 			else if (res_dip_vel < 480)		// 1110
.................... 				{
.................... 				baud_rate = vel_19200;
.................... 				tipo_ligacao = 1;		// delta 
.................... 				}
.................... 		//
.................... 			else if (res_dip_vel < 530)		// 0001
.................... 				{
.................... 				baud_rate = vel_9600;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 			else if (res_dip_vel < 600)		// 1001
.................... 				{
.................... 				baud_rate = vel_9600;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 			else if (res_dip_vel < 670)		// 0101
.................... 				{
.................... 				baud_rate = vel_9600;
.................... 				tipo_ligacao = 2;		// delta aberto, por enquanto fica em estrela depois vai para 3
.................... 				}
.................... 			else if (res_dip_vel < 730)		// 1101
.................... 				{
.................... 				baud_rate = vel_9600;
.................... 				tipo_ligacao = 1;		// delta 
.................... 				}
.................... 		//
.................... 			else if (res_dip_vel < 780)		// 0011
.................... 				{
.................... 				baud_rate = vel_38400;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 			else if (res_dip_vel < 850)		// 1011
.................... 				{
.................... 				baud_rate = vel_38400;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 			else if (res_dip_vel < 910)		// 0111
.................... 				{
.................... 				baud_rate = vel_38400;
.................... 				tipo_ligacao = 2;		// delta aberto, por enquanto fica em estrela depois vai para 3
.................... 				}
.................... 			else if (res_dip_vel < 980)		// 1111
.................... 				{
.................... 				baud_rate = vel_38400;
.................... 				tipo_ligacao = 1;		// delta 
.................... 				}
.................... 			else
.................... 				{
.................... 				baud_rate = vel_19200;
.................... 				tipo_ligacao = 0;		// estrela
.................... 				}
.................... 
.................... 		#endif		
.................... 		#if (controlador == true)
.................... 			#if (monofasico == true)
.................... 				if (tipo_ligacao == 1)
.................... 					{
.................... 					off_cor_delta = off_cor_s;
.................... 					}
.................... 			#else
.................... 				if (tipo_ligacao == 2)
.................... 					{
.................... 					#if (ade7754 == true)
.................... 						off_cor_delta = fase_delta;
.................... 					#else
.................... 						off_cor_delta = off_cor_s;
.................... 					#endif
.................... 					}
.................... 				else
.................... 					{
.................... 					off_cor_delta = 0;
.................... 					}
.................... 			#endif
.................... 		#else
.................... 			if (tipo_ligacao == 2)
.................... 				{
.................... 				#if (ade7754 == true)
.................... 					off_cor_delta = fase_delta;
.................... 				#else
.................... 	//				off_cor_delta = off_cor_s;
.................... 				#endif
.................... 				}
.................... 			else
.................... 				{
.................... 	//			off_cor_delta = 0;
.................... 				}
.................... 		#endif
.................... 		aux_b1 = read_byte(ee_tipo_ligacao);
.................... 		if (aux_b1 != tipo_ligacao)
.................... 			{
.................... 			write_byte(ee_tipo_ligacao, 0);
.................... 			}
.................... 		/*		
.................... 		#if (com_485 == true)
.................... 			output_high(direcao);
.................... 			delay_ms(5);
.................... 			
.................... 			fprintf(modbus,"%lu, %lu, %u",res_dip_vel,baud_rate, tipo_ligacao);
.................... 			fprintf(modbus,"\r\n");
.................... 			
.................... 			delay_ms(5);
.................... 			output_low(direcao);
.................... 		#endif
.................... 		*/		
.................... 	#if (home_system == false)
.................... 		#if (st5x == true)
.................... 			seta_baud_rate();
.................... 		#else
.................... 			aux_w1 =  read_word(ee_baud_rate);
.................... 			if (aux_w1 != baud_rate)
.................... 				{
.................... 				write_byte(ee_baud_rate, baud_rate);
.................... 				seta_baud_rate();
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 	}
.................... #endif				
.................... 
.................... #if (st5x == true)
.................... 	void trata_leds_tc(void)
.................... 	{
.................... 		if (sentido_r == 1)
.................... 			{
.................... 			fled_tc_r = 0;
.................... 			}
.................... 		else
.................... 			{
.................... 			fled_tc_r = 1;
.................... 			}
.................... 		if (sentido_s == 1)
.................... 			{
.................... 			fled_tc_s = 0;
.................... 			}
.................... 		else
.................... 			{
.................... 			fled_tc_s = 1;
.................... 			}
.................... 		if (sentido_t == 1)
.................... 			{
.................... 			fled_tc_t = 0;
.................... 			}
.................... 		else
.................... 			{
.................... 			fled_tc_t = 1;
.................... 			}
.................... 	}
.................... #endif
.................... 
.................... 
.................... void zera_soma_reg(void)
.................... {
.................... 	soma_reg_tr = 0;
*
02372:  MOVLB  2
02374:  CLRF   x09
02376:  CLRF   x08
02378:  CLRF   x07
0237A:  CLRF   x06
.................... 	soma_reg_cr = 0;
0237C:  CLRF   x0D
0237E:  CLRF   x0C
02380:  CLRF   x0B
02382:  CLRF   x0A
.................... 	#if (monofasico == false)
.................... 		soma_reg_ts = 0;
02384:  CLRF   x9F
02386:  CLRF   x9E
02388:  CLRF   x9D
0238A:  CLRF   x9C
.................... 		soma_reg_tt = 0;
0238C:  CLRF   xF6
0238E:  CLRF   xF5
02390:  CLRF   xF4
02392:  CLRF   xF3
.................... 		soma_reg_cs = 0;
02394:  CLRF   xA3
02396:  CLRF   xA2
02398:  CLRF   xA1
0239A:  CLRF   xA0
.................... 		soma_reg_ct = 0;
0239C:  CLRF   xFA
0239E:  CLRF   xF9
023A0:  CLRF   xF8
023A2:  CLRF   xF7
.................... 	#endif
.................... 	nro_soma_reg = 0;
023A4:  MOVLB  4
023A6:  CLRF   x0A
023A8:  CLRF   x09
023AA:  MOVLB  0
023AC:  RETURN 0
.................... }
.................... 
.................... 
.................... void soma_reg(void)
.................... {
.................... re_soma_reg:
.................... 	#if (monofasico == true)
.................... 		soma_reg_tr = (int32)(soma_reg_tr + tensao_r);
.................... 	#else
.................... 		#if ((com_rep == true) && (GEBRAS == true))
.................... 			if (modo_rep == true)
.................... 				{
.................... 				soma_reg_tr = (int32)(soma_reg_tr + tensao_tri);
.................... 				soma_reg_ts = 0;
.................... 				soma_reg_tt = 0;
.................... 				soma_reg_cr = (int32)(soma_reg_cr + corrente_tri);
.................... 				soma_reg_cs = 0;
.................... 				soma_reg_ct = 0;
.................... 				goto fim_soma_reg;
.................... 				}
.................... 			else
.................... 				{
.................... 				if (tipo_ligacao == 0)
.................... 					{
.................... 					soma_reg_tr = (int32)(soma_reg_tr + tensao_r);
.................... 					soma_reg_ts = (int32)(soma_reg_ts + tensao_s);
.................... 					soma_reg_tt = (int32)(soma_reg_tt + tensao_t);
.................... 					}	
.................... 				else
.................... 					{
.................... 					soma_reg_tr = (int32)(soma_reg_tr + tensao_rs);
.................... 					soma_reg_ts = (int32)(soma_reg_ts + tensao_st);
.................... 					soma_reg_tt = (int32)(soma_reg_tt + tensao_rt);
.................... 					}
.................... 				}
.................... 		#else
.................... 		
.................... 			if (tipo_ligacao == 0)
*
1A4FE:  MOVLB  4
1A500:  MOVF   xC7,F
1A502:  BNZ   1A57E
.................... 				{
.................... 				soma_reg_tr = (int32)(soma_reg_tr + tensao_r);
1A504:  MOVLB  2
1A506:  MOVF   x50,W
1A508:  ADDWF  x06,W
1A50A:  MOVWF  00
1A50C:  MOVF   x51,W
1A50E:  ADDWFC x07,W
1A510:  MOVWF  01
1A512:  MOVLW  00
1A514:  ADDWFC x08,W
1A516:  MOVWF  02
1A518:  MOVLW  00
1A51A:  ADDWFC x09,W
1A51C:  MOVWF  x09
1A51E:  MOVFF  02,208
1A522:  MOVFF  01,207
1A526:  MOVFF  00,206
.................... 				soma_reg_ts = (int32)(soma_reg_ts + tensao_s);
1A52A:  MOVF   xD4,W
1A52C:  ADDWF  x9C,W
1A52E:  MOVWF  00
1A530:  MOVF   xD5,W
1A532:  ADDWFC x9D,W
1A534:  MOVWF  01
1A536:  MOVLW  00
1A538:  ADDWFC x9E,W
1A53A:  MOVWF  02
1A53C:  MOVLW  00
1A53E:  ADDWFC x9F,W
1A540:  MOVWF  x9F
1A542:  MOVFF  02,29E
1A546:  MOVFF  01,29D
1A54A:  MOVFF  00,29C
.................... 				soma_reg_tt = (int32)(soma_reg_tt + tensao_t);
1A54E:  MOVLB  3
1A550:  MOVF   x2B,W
1A552:  MOVLB  2
1A554:  ADDWF  xF3,W
1A556:  MOVWF  00
1A558:  MOVLB  3
1A55A:  MOVF   x2C,W
1A55C:  MOVLB  2
1A55E:  ADDWFC xF4,W
1A560:  MOVWF  01
1A562:  MOVLW  00
1A564:  ADDWFC xF5,W
1A566:  MOVWF  02
1A568:  MOVLW  00
1A56A:  ADDWFC xF6,W
1A56C:  MOVWF  xF6
1A56E:  MOVFF  02,2F5
1A572:  MOVFF  01,2F4
1A576:  MOVFF  00,2F3
.................... 				}	
1A57A:  BRA    1A5F4
1A57C:  MOVLB  4
.................... 			else
.................... 				{
.................... 				soma_reg_tr = (int32)(soma_reg_tr + tensao_rs);
1A57E:  MOVLB  2
1A580:  MOVF   x72,W
1A582:  ADDWF  x06,W
1A584:  MOVWF  00
1A586:  MOVF   x73,W
1A588:  ADDWFC x07,W
1A58A:  MOVWF  01
1A58C:  MOVLW  00
1A58E:  ADDWFC x08,W
1A590:  MOVWF  02
1A592:  MOVLW  00
1A594:  ADDWFC x09,W
1A596:  MOVWF  x09
1A598:  MOVFF  02,208
1A59C:  MOVFF  01,207
1A5A0:  MOVFF  00,206
.................... 				soma_reg_ts = (int32)(soma_reg_ts + tensao_st);
1A5A4:  MOVF   xE4,W
1A5A6:  ADDWF  x9C,W
1A5A8:  MOVWF  00
1A5AA:  MOVF   xE5,W
1A5AC:  ADDWFC x9D,W
1A5AE:  MOVWF  01
1A5B0:  MOVLW  00
1A5B2:  ADDWFC x9E,W
1A5B4:  MOVWF  02
1A5B6:  MOVLW  00
1A5B8:  ADDWFC x9F,W
1A5BA:  MOVWF  x9F
1A5BC:  MOVFF  02,29E
1A5C0:  MOVFF  01,29D
1A5C4:  MOVFF  00,29C
.................... 				soma_reg_tt = (int32)(soma_reg_tt + tensao_rt);
1A5C8:  MOVLB  3
1A5CA:  MOVF   x3B,W
1A5CC:  MOVLB  2
1A5CE:  ADDWF  xF3,W
1A5D0:  MOVWF  00
1A5D2:  MOVLB  3
1A5D4:  MOVF   x3C,W
1A5D6:  MOVLB  2
1A5D8:  ADDWFC xF4,W
1A5DA:  MOVWF  01
1A5DC:  MOVLW  00
1A5DE:  ADDWFC xF5,W
1A5E0:  MOVWF  02
1A5E2:  MOVLW  00
1A5E4:  ADDWFC xF6,W
1A5E6:  MOVWF  xF6
1A5E8:  MOVFF  02,2F5
1A5EC:  MOVFF  01,2F4
1A5F0:  MOVFF  00,2F3
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 
.................... 	if (modo_funca == 3)
1A5F4:  MOVLB  4
1A5F6:  MOVF   xA7,W
1A5F8:  SUBLW  03
1A5FA:  BNZ   1A61A
.................... 		{
.................... 		soma_reg_cr = 0;
1A5FC:  MOVLB  2
1A5FE:  CLRF   x0D
1A600:  CLRF   x0C
1A602:  CLRF   x0B
1A604:  CLRF   x0A
.................... 		#if (monofasico == false)
.................... 			soma_reg_cs = 0;
1A606:  CLRF   xA3
1A608:  CLRF   xA2
1A60A:  CLRF   xA1
1A60C:  CLRF   xA0
.................... 			soma_reg_ct = 0;
1A60E:  CLRF   xFA
1A610:  CLRF   xF9
1A612:  CLRF   xF8
1A614:  CLRF   xF7
.................... 		#endif
.................... 		}
1A616:  BRA    1A690
1A618:  MOVLB  4
.................... 	else
.................... 		{
.................... 		soma_reg_cr = (int32)(soma_reg_cr + corrente_r);
1A61A:  MOVLB  2
1A61C:  MOVF   x52,W
1A61E:  ADDWF  x0A,W
1A620:  MOVWF  00
1A622:  MOVF   x53,W
1A624:  ADDWFC x0B,W
1A626:  MOVWF  01
1A628:  MOVLW  00
1A62A:  ADDWFC x0C,W
1A62C:  MOVWF  02
1A62E:  MOVLW  00
1A630:  ADDWFC x0D,W
1A632:  MOVWF  x0D
1A634:  MOVFF  02,20C
1A638:  MOVFF  01,20B
1A63C:  MOVFF  00,20A
.................... 		#if (monofasico == false)
.................... 			soma_reg_cs = (int32)(soma_reg_cs + corrente_s);
1A640:  MOVF   xD6,W
1A642:  ADDWF  xA0,W
1A644:  MOVWF  00
1A646:  MOVF   xD7,W
1A648:  ADDWFC xA1,W
1A64A:  MOVWF  01
1A64C:  MOVLW  00
1A64E:  ADDWFC xA2,W
1A650:  MOVWF  02
1A652:  MOVLW  00
1A654:  ADDWFC xA3,W
1A656:  MOVWF  xA3
1A658:  MOVFF  02,2A2
1A65C:  MOVFF  01,2A1
1A660:  MOVFF  00,2A0
.................... 			soma_reg_ct = (int32)(soma_reg_ct + corrente_t);
1A664:  MOVLB  3
1A666:  MOVF   x2D,W
1A668:  MOVLB  2
1A66A:  ADDWF  xF7,W
1A66C:  MOVWF  00
1A66E:  MOVLB  3
1A670:  MOVF   x2E,W
1A672:  MOVLB  2
1A674:  ADDWFC xF8,W
1A676:  MOVWF  01
1A678:  MOVLW  00
1A67A:  ADDWFC xF9,W
1A67C:  MOVWF  02
1A67E:  MOVLW  00
1A680:  ADDWFC xFA,W
1A682:  MOVWF  xFA
1A684:  MOVFF  02,2F9
1A688:  MOVFF  01,2F8
1A68C:  MOVFF  00,2F7
.................... 		#endif
.................... 		}
.................... fim_soma_reg:
.................... 	nro_soma_reg++;
1A690:  MOVLB  4
1A692:  INCF   x09,F
1A694:  BTFSC  FD8.2
1A696:  INCF   x0A,F
.................... 	if (nro_soma_reg == 0)
1A698:  MOVF   x09,F
1A69A:  BNZ   1A6A8
1A69C:  MOVF   x0A,F
1A69E:  BNZ   1A6A8
.................... 		{
.................... 		zera_soma_reg();
1A6A0:  MOVLB  0
1A6A2:  CALL   2372
1A6A6:  MOVLB  4
.................... 		}
.................... 
.................... #if (com_regs == false)
1A6A8:  MOVLB  0
1A6AA:  GOTO   1A6B0 (RETURN)
.................... 	if (nro_soma_reg == 60)
.................... 		{
.................... 		zera_soma_reg();
.................... 		goto re_soma_reg;
.................... 		}
.................... #endif
.................... }
.................... 
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //	float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float sqrty(float x)
.................... {
....................    float y, res;
....................    BYTE *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
.................... 	{
....................       return(0.0);
.................... 	}
....................    if( x == 0)
.................... 	{
....................       return(0.0);
.................... 	}
.................... 
....................    y=x;
....................    p=&y;
....................    (*p)=(BYTE)((((int16)(*p)) + 127) >> 1);
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
....................       (*p)--;
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... 
.................... float sqrtx(float x)
.................... {
....................    float y, res;
....................    BYTE *p;
.................... 
....................    if(x < 0)
*
158EC:  MOVFF  A75,A83
158F0:  MOVFF  A74,A82
158F4:  MOVFF  A73,A81
158F8:  MOVFF  A72,A80
158FC:  MOVLB  A
158FE:  CLRF   x87
15900:  CLRF   x86
15902:  CLRF   x85
15904:  CLRF   x84
15906:  MOVLB  0
15908:  CALL   E81E
1590C:  BNC   15918
.................... 	   	{
.................... 		return(0.0);
1590E:  CLRF   00
15910:  CLRF   01
15912:  CLRF   02
15914:  CLRF   03
15916:  BRA    15A3C
....................    		}
....................    if( x<=0.0)
15918:  MOVFF  A75,A83
1591C:  MOVFF  A74,A82
15920:  MOVFF  A73,A81
15924:  MOVFF  A72,A80
15928:  MOVLB  A
1592A:  CLRF   x87
1592C:  CLRF   x86
1592E:  CLRF   x85
15930:  CLRF   x84
15932:  MOVLB  0
15934:  CALL   E81E
15938:  BC    1593C
1593A:  BNZ   15946
.................... 		{
.................... 	    return(0.0);
1593C:  CLRF   00
1593E:  CLRF   01
15940:  CLRF   02
15942:  CLRF   03
15944:  BRA    15A3C
.................... 		}
.................... //   if( x<=1.0)
.................... //		{
.................... //	    return(1.0);
.................... //		}
.................... 
....................    y=x;
15946:  MOVFF  A75,A79
1594A:  MOVFF  A74,A78
1594E:  MOVFF  A73,A77
15952:  MOVFF  A72,A76
....................    p=&y;
15956:  MOVLW  0A
15958:  MOVLB  A
1595A:  MOVWF  x7F
1595C:  MOVLW  76
1595E:  MOVWF  x7E
....................    (*p)=(BYTE)((((int16)(*p)) + 127) >> 1);
15960:  MOVFF  A7F,FEA
15964:  MOVFF  A7E,FE9
15968:  MOVF   FEF,W
1596A:  CLRF   x83
1596C:  MOVWF  x82
1596E:  MOVLW  7F
15970:  ADDWF  x82,F
15972:  MOVLW  00
15974:  ADDWFC x83,F
15976:  BCF    FD8.0
15978:  RRCF   x83,W
1597A:  RRCF   x82,W
1597C:  MOVFF  A7F,FEA
15980:  MOVFF  A7E,FE9
15984:  MOVWF  FEF
.................... 
.................... 
....................    do {
....................       	res=y;
15986:  MOVFF  A79,A7D
1598A:  MOVFF  A78,A7C
1598E:  MOVFF  A77,A7B
15992:  MOVFF  A76,A7A
....................       	y+=(x/y);
15996:  MOVFF  A75,A83
1599A:  MOVFF  A74,A82
1599E:  MOVFF  A73,A81
159A2:  MOVFF  A72,A80
159A6:  MOVFF  A79,A87
159AA:  MOVFF  A78,A86
159AE:  MOVFF  A77,A85
159B2:  MOVFF  A76,A84
159B6:  MOVLB  0
159B8:  CALL   295A
159BC:  BCF    FD8.1
159BE:  MOVFF  A79,A83
159C2:  MOVFF  A78,A82
159C6:  MOVFF  A77,A81
159CA:  MOVFF  A76,A80
159CE:  MOVFF  03,A87
159D2:  MOVFF  02,A86
159D6:  MOVFF  01,A85
159DA:  MOVFF  00,A84
159DE:  CALL   14D0E
159E2:  MOVFF  03,A79
159E6:  MOVFF  02,A78
159EA:  MOVFF  01,A77
159EE:  MOVFF  00,A76
....................       	(*p)--;
159F2:  MOVFF  A7F,FEA
159F6:  MOVLB  A
159F8:  MOVFF  A7E,FE9
159FC:  DECF   FEF,F
.................... //		pulsa_wdt();
.................... 	   } 
.................... 	while(res != y);
159FE:  MOVFF  A7D,A83
15A02:  MOVFF  A7C,A82
15A06:  MOVFF  A7B,A81
15A0A:  MOVFF  A7A,A80
15A0E:  MOVFF  A79,A87
15A12:  MOVFF  A78,A86
15A16:  MOVFF  A77,A85
15A1A:  MOVFF  A76,A84
15A1E:  MOVLB  0
15A20:  CALL   E81E
15A24:  BTFSC  FD8.2
15A26:  BRA    15A2C
15A28:  MOVLB  A
15A2A:  BRA    15986
.................... 
.................... 
....................    return(res);
15A2C:  MOVFF  A7A,00
15A30:  MOVFF  A7B,01
15A34:  MOVFF  A7C,02
15A38:  MOVFF  A7D,03
15A3C:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... long uisqrt32(int32 r) 
.................... { 
....................    int32 t,b,c=0; 
.................... 
....................    for (b=0x10000000;b!=0;b>>=2) { 
....................       t = c + b; 
....................       c >>= 1; 
....................       if (t <= r) { 
....................          r -= t; 
....................          c += b; 
....................       } 
....................    } 
....................    return(c); 
.................... } 
.................... 
.................... 
.................... void vrms()
.................... {
....................    const long NUM_DATA_POINTS = 3000;
....................    long i;
....................    int value;
....................    float voltage;
.................... 
....................    printf("Sampling:\r\n");
.................... 
....................    setup_port_a( ALL_ANALOG );
....................    setup_adc( ADC_CLOCK_INTERNAL );
....................    set_adc_channel( 1 );
.................... 
....................    while(TRUE)
....................    {
....................       voltage = 0;
....................       for(i=0; i<NUM_DATA_POINTS; ++i)
....................       {
....................          value = Read_ADC();
....................          voltage += (float)value*(float)value;
....................       }
....................       voltage /=2601.0;
....................       voltage = sqrt(voltage/(NUM_DATA_POINTS));
....................       printf("\r\nInput =  %f V     %f dB\r\n", voltage, 20*log10(voltage));
....................    }
.................... }
.................... 
.................... 
.................... #if (com_relogio == false)
.................... 	void rtc_get_e2p(void)
.................... 	{
.................... 		dia = read_byte(ee_dia);
.................... 		mes = read_byte(ee_mes);
.................... 		ano = read_byte(ee_ano);
.................... 		hora = read_byte(ee_hora);
.................... 		addr = ee_tabela_minuto;
.................... 		for (aux_b1 = 0; aux_b1 < 60; aux_b1++)
.................... 			{
.................... 			minuto = read_byte(addr++);
.................... 			if (minuto == 0xff)
.................... 				{
.................... 				if (addr == 0)
.................... 					{
.................... 					minuto = 0;
.................... 					break;
.................... 					}
.................... 				else
.................... 					{
.................... 					addr--;
.................... 					minuto = read_byte(addr);
.................... 					break;
.................... 					}	
.................... 				}
.................... 			}
.................... 			
.................... 		if ((dia == 0) || (dia > 31))
.................... 			{
.................... 			dia = ((cdata[0] -'0') * 10) + (cdata[1]-'0'); 
.................... 			}
.................... 		if ((mes < 1) || (mes > 12))
.................... 			{
.................... 			if (cdata[3] == 'a')
.................... 				{
.................... 				if (cdata[4] == 'b')
.................... 					{
.................... 					mes = 4;
.................... 					}
.................... 				else
.................... 					{
.................... 					mes = 8;
.................... 					}
.................... 				}
.................... 			else if (cdata[3] == 'd')
.................... 				{
.................... 				mes = 12;
.................... 				}
.................... 			else if (cdata[3] == 'f')
.................... 				{
.................... 				mes = 2;
.................... 				}
.................... 			else if (cdata[3] == 'j')
.................... 				{
.................... 				if (cdata[4] == 'a')
.................... 					{
.................... 					mes = 1;
.................... 					}
.................... 				else if (cdata[5] == 'n')
.................... 					{
.................... 					mes = 6;
.................... 					}
.................... 				else
.................... 					{
.................... 					mes = 7;
.................... 					}
.................... 				}
.................... 			else if (cdata[3] == 'm')
.................... 				{
.................... 				if (cdata[5] == 'r')
.................... 					{
.................... 					mes = 3;
.................... 					}
.................... 				else
.................... 					{
.................... 					mes = 5;
.................... 					}
.................... 				}
.................... 			else if (cdata[3] == 's')
.................... 				{
.................... 				mes = 9;
.................... 				}
.................... 			else if (cdata[3] == 'o')
.................... 				{
.................... 				mes = 10;
.................... 				}
.................... 			else
.................... 				{
.................... 				mes = 11;
.................... 				}
.................... 			}
.................... 		if ((ano < 5) || (ano > 99))
.................... 			{
.................... 			ano = ((cdata[7] -'0') * 10) + (cdata[8]-'0'); 
.................... 			}
.................... 		if (hora > 23)
.................... 			{
.................... 			hora = ((ctime[0] -'0') * 10) + (ctime[1]-'0'); 
.................... 			}
.................... 		if (minuto > 59)
.................... 			{
.................... 			minuto = ((ctime[3] -'0') * 10) + (ctime[4]-'0'); 
.................... 			}
.................... 		if (segundo > 59)
.................... 			{
.................... 			segundo = ((ctime[6] -'0') * 10) + (ctime[7]-'0'); 
.................... 			}
.................... 	}
.................... 	
.................... 	void rtc_wr_e2p(void)
.................... 	{
.................... 		write_byte(ee_dia, dia);
.................... 		write_byte(ee_mes, mes);
.................... 		write_byte(ee_ano, ano);
.................... 		write_byte(ee_hora, hora);
.................... 		write_byte(ee_minuto, minuto);
.................... 	}
.................... 
.................... 	void le_calend_int(void)
.................... 	{
.................... 		if (viroumin == 1)
.................... 			{
.................... 	   		minuto++;
.................... 	   		write_byte(ee_tabela_minuto + minuto, minuto);
.................... 	   		write_byte(1 + ee_tabela_minuto + minuto, 0xff);
.................... 		   	if (minuto >= 60)
.................... 				{
.................... 				minuto = 0;
.................... 		   		write_byte(ee_tabela_minuto + minuto, minuto);
.................... 	 	  		write_byte(1 + ee_tabela_minuto + minuto, 0xff);
.................... 				hora++;
.................... 				virouhora = 1;
.................... 				if (hora >= 24)
.................... 					{
.................... 					hora = 0;
.................... 		   			viroudia = 1;
.................... 					dia++;
.................... 					if ((mes == 1) || (mes == 3)  || (mes == 5) || (mes == 7) || (mes == 8) || (mes == 10) || (mes == 12))
.................... 						{
.................... 						if (dia >= 32)
.................... 							{
.................... 							dia = 1;
.................... 							mes++;
.................... 							viroumes = 1;
.................... 							}
.................... 						}
.................... 					else if ((mes == 4) || (mes == 6)  || (mes == 9) || (mes == 11))
.................... 						{
.................... 						if (dia >= 31)
.................... 							{
.................... 							dia = 1;
.................... 							mes++;
.................... 							viroumes = 1;
.................... 							}
.................... 						}
.................... 					else 
.................... 						{
.................... 						if (dia >= 29)
.................... 							{
.................... 							dia = 1;
.................... 							mes++;
.................... 							viroumes = 1;
.................... 							}
.................... 						}
.................... 					if (mes > 12)
.................... 						{
.................... 						ano++;
.................... 						mes = 1;
.................... 						}
.................... 					write_byte(ee_dia, dia);
.................... 					write_byte(ee_mes, mes);
.................... 					write_byte(ee_ano, ano);
.................... 					}
.................... 				write_byte(ee_hora, hora);
.................... 				}
.................... 
.................... 			
.................... 			}
.................... 	}
.................... #endif
.................... 
.................... 
.................... #if (com_relogio == true)
.................... 	//  converte valor do relogio para um long em segundos,
.................... 	int32 conv_relogio_long(void)
.................... 		{	
.................... 		aux_l2 = (int32)(hora);
.................... 		aux_w1 = (int16)(minuto);
.................... 		aux_l2 = (int32)(aux_l2 * 3600);
.................... 		aux_w1 = (int16)(aux_w1 * 60);
.................... 		return(int32)(aux_l2 + aux_w1 + segundo);
.................... 		}
.................... 	
.................... #endif
.................... 
.................... 
.................... void salva_programa(void)
.................... {
.................... 	programando = 0;
*
111E2:  BCF    29.5
.................... 	
.................... 	#if (st8500c == true)
.................... 		aux_w1 = 0;
111E4:  MOVLB  3
111E6:  CLRF   x63
111E8:  CLRF   x62
.................... 		for (aux_b1 = 0; aux_b1 < 12; aux_b1++)
111EA:  CLRF   xB1
111EC:  MOVF   xB1,W
111EE:  SUBLW  0B
111F0:  BNC   1128A
.................... 			{
.................... 			write_word((ee_dem_cont_ponta + aux_w1),dem_cont_ponta[aux_b1]);
111F2:  MOVLW  16
111F4:  ADDWF  x62,W
111F6:  MOVLB  A
111F8:  MOVWF  x4C
111FA:  MOVLW  03
111FC:  MOVLB  3
111FE:  ADDWFC x63,W
11200:  MOVLB  A
11202:  MOVWF  x4D
11204:  BCF    FD8.0
11206:  MOVLB  3
11208:  RLCF   xB1,W
1120A:  CLRF   03
1120C:  ADDLW  DB
1120E:  MOVWF  FE9
11210:  MOVLW  04
11212:  ADDWFC 03,W
11214:  MOVWF  FEA
11216:  MOVFF  FEC,A4F
1121A:  MOVF   FED,F
1121C:  MOVFF  FEF,A4E
11220:  MOVFF  A4D,A5D
11224:  MOVFF  A4C,A5C
11228:  MOVFF  A4F,A5F
1122C:  MOVFF  A4E,A5E
11230:  MOVLB  0
11232:  CALL   23AE
.................... 			write_word((ee_dem_cont_fora_ponta + aux_w1),dem_cont_fora_ponta[aux_b1]);
11236:  MOVLW  2E
11238:  MOVLB  3
1123A:  ADDWF  x62,W
1123C:  MOVLB  A
1123E:  MOVWF  x4C
11240:  MOVLW  03
11242:  MOVLB  3
11244:  ADDWFC x63,W
11246:  MOVLB  A
11248:  MOVWF  x4D
1124A:  BCF    FD8.0
1124C:  MOVLB  3
1124E:  RLCF   xB1,W
11250:  CLRF   03
11252:  ADDLW  F5
11254:  MOVWF  FE9
11256:  MOVLW  04
11258:  ADDWFC 03,W
1125A:  MOVWF  FEA
1125C:  MOVFF  FEC,A4F
11260:  MOVF   FED,F
11262:  MOVFF  FEF,A4E
11266:  MOVFF  A4D,A5D
1126A:  MOVFF  A4C,A5C
1126E:  MOVFF  A4F,A5F
11272:  MOVFF  A4E,A5E
11276:  MOVLB  0
11278:  CALL   23AE
.................... 			aux_w1 += 2;
1127C:  MOVLW  02
1127E:  MOVLB  3
11280:  ADDWF  x62,F
11282:  MOVLW  00
11284:  ADDWFC x63,F
11286:  INCF   xB1,F
11288:  BRA    111EC
.................... 			}
.................... 		write_word(ee_carga_programada,carga_programada);
1128A:  MOVLW  03
1128C:  MOVLB  A
1128E:  MOVWF  x5D
11290:  MOVLW  DC
11292:  MOVWF  x5C
11294:  MOVFF  510,A5F
11298:  MOVFF  50F,A5E
1129C:  MOVLB  0
1129E:  CALL   23AE
.................... 
.................... 		write_byte(ee_mes_inicio_pc,mes_inicio_pc);
112A2:  MOVLW  03
112A4:  MOVLB  A
112A6:  MOVWF  x68
112A8:  MOVLW  DF
112AA:  MOVWF  x67
112AC:  MOVFF  512,A69
112B0:  MOVLB  0
112B2:  CALL   1C46
.................... 		write_byte(ee_dia_inicio_pc, dia_inicio_pc);
112B6:  MOVLW  03
112B8:  MOVLB  A
112BA:  MOVWF  x68
112BC:  MOVLW  DE
112BE:  MOVWF  x67
112C0:  MOVFF  511,A69
112C4:  MOVLB  0
112C6:  CALL   1C46
.................... 		write_byte(ee_dia_final_pc,dia_final_pc);
112CA:  MOVLW  03
112CC:  MOVLB  A
112CE:  MOVWF  x68
112D0:  MOVLW  E0
112D2:  MOVWF  x67
112D4:  MOVFF  513,A69
112D8:  MOVLB  0
112DA:  CALL   1C46
.................... 		write_byte(ee_mes_final_pc,mes_final_pc);
112DE:  MOVLW  03
112E0:  MOVLB  A
112E2:  MOVWF  x68
112E4:  MOVLW  E1
112E6:  MOVWF  x67
112E8:  MOVFF  514,A69
112EC:  MOVLB  0
112EE:  CALL   1C46
.................... 
.................... 		#if (com_rep == true)
.................... 			write_word(ee_fat_conv_ativa, fat_conv_ativa);
.................... 			write_word(ee_fat_conv_reativa, fat_conv_reativa);
.................... 			write_byte(ee_protocolo_REP, protocolo_REP);
.................... 		#endif
.................... 
.................... 		write_byte(ee_hora_ponta, hora_ponta);
112F2:  MOVLB  A
112F4:  CLRF   x68
112F6:  MOVLW  3A
112F8:  MOVWF  x67
112FA:  MOVFF  515,A69
112FE:  MOVLB  0
11300:  CALL   1C46
.................... 		write_byte(ee_hora_final_ponta, hora_final_ponta);
11304:  MOVLB  A
11306:  CLRF   x68
11308:  MOVLW  3C
1130A:  MOVWF  x67
1130C:  MOVFF  517,A69
11310:  MOVLB  0
11312:  CALL   1C46
.................... 		write_byte(ee_minuto_ponta, minuto_ponta);
11316:  MOVLB  A
11318:  CLRF   x68
1131A:  MOVLW  3B
1131C:  MOVWF  x67
1131E:  MOVFF  516,A69
11322:  MOVLB  0
11324:  CALL   1C46
.................... 		write_byte(ee_minuto_final_ponta, minuto_final_ponta);
11328:  MOVLB  A
1132A:  CLRF   x68
1132C:  MOVLW  3D
1132E:  MOVWF  x67
11330:  MOVFF  518,A69
11334:  MOVLB  0
11336:  CALL   1C46
.................... 
.................... 		#if (com_tc == true)		
.................... 			write_word(ee_valor_tc, valor_tc);
1133A:  MOVLB  A
1133C:  CLRF   x5D
1133E:  MOVLW  13
11340:  MOVWF  x5C
11342:  MOVFF  4C0,A5F
11346:  MOVFF  4BF,A5E
1134A:  MOVLB  0
1134C:  CALL   23AE
.................... 			write_word(ee_valor_tp, valor_tp);
11350:  MOVLB  A
11352:  CLRF   x5D
11354:  MOVLW  2B
11356:  MOVWF  x5C
11358:  MOVFF  4C2,A5F
1135C:  MOVFF  4C1,A5E
11360:  MOVLB  0
11362:  CALL   23AE
.................... 			tipo_ligacao = 0;
11366:  MOVLB  4
11368:  CLRF   xC7
.................... 			write_byte(ee_tipo_ligacao, tipo_ligacao);
1136A:  MOVLB  A
1136C:  CLRF   x68
1136E:  MOVLW  3E
11370:  MOVWF  x67
11372:  MOVFF  4C7,A69
11376:  MOVLB  0
11378:  CALL   1C46
.................... 		#endif
.................... 		write_byte(ee_modo_saidas, modo_saidas);
1137C:  MOVLB  A
1137E:  CLRF   x68
11380:  MOVLW  4C
11382:  MOVWF  x67
11384:  MOVFF  6C,A69
11388:  MOVLB  0
1138A:  CALL   1C46
.................... 		
.................... 	#else
.................... 		write_word(ee_ten_nomi, ten_nomi);
.................... 		write_word(ee_valor_tp, valor_tp);
.................... 		
.................... 		write_byte(ee_hora_ponta, hora_ponta);
.................... 		write_byte(ee_hora_final_ponta, hora_final_ponta);
.................... 		write_byte(ee_minuto_ponta, minuto_ponta);
.................... 		write_byte(ee_minuto_final_ponta, minuto_final_ponta);
.................... 
.................... 
.................... 		#if (com_consumo == true)
.................... 			aux_intervalo_integra = intervalo_integra;
.................... 		#endif
.................... 
.................... 		aux_b1 = read_byte(ee_modo_funca);
.................... 		if (aux_b1 != modo_funca)
.................... 			{
.................... 			#if (funcao_505 == true)
.................... 				inic_tensoes_505();
.................... 			#endif
.................... 			}
.................... 		if (registro == 0)
.................... 			{
.................... 			write_byte(ee_modo_funca, modo_funca);
.................... 			}
.................... 	
.................... 		write_byte(ee_set_point, set_point);
.................... 
.................... 		#if (com_rep == true)
.................... 			write_byte(ee_modo_rep, modo_rep);
.................... 			write_byte(ee_protocolo_REP, protocolo_REP);
.................... 			write_word(ee_fat_conv_ativa, fat_conv_ativa);
.................... 			write_word(ee_fat_conv_reativa, fat_conv_reativa);
.................... 		#endif
.................... 	
.................... 	#endif
.................... 
.................... 	#if (portatil == TRUE)
.................... 		{
.................... 		endereco = 1;
.................... 		baud_rate = vel_19200;
.................... 		}
.................... 	#endif
.................... 	#if (home_system == false)
.................... 		write_word(ee_baud_rate, baud_rate);
1138E:  MOVLB  A
11390:  CLRF   x5D
11392:  MOVLW  2D
11394:  MOVWF  x5C
11396:  MOVFF  4C4,A5F
1139A:  MOVFF  4C3,A5E
1139E:  MOVLB  0
113A0:  CALL   23AE
.................... 		seta_baud_rate();
113A4:  CALL   1766
.................... 		write_byte(ee_endereco, endereco);
113A8:  MOVLB  A
113AA:  CLRF   x68
113AC:  MOVLW  26
113AE:  MOVWF  x67
113B0:  MOVFF  4CE,A69
113B4:  MOVLB  0
113B6:  CALL   1C46
.................... 	#endif
.................... 	
.................... 
.................... 	#if (controlador == true)
.................... 		write_byte(ee_cor_minima, cor_minima);
113BA:  MOVLW  02
113BC:  MOVLB  A
113BE:  MOVWF  x68
113C0:  MOVLW  EE
113C2:  MOVWF  x67
113C4:  MOVFF  4D9,A69
113C8:  MOVLB  0
113CA:  CALL   1C46
.................... 		#if (com_rep == true)
.................... 			write_word(ee_cor_minima_rep, cor_minima_rep);
.................... 		#endif
.................... 		write_byte(ee_com_des_ten_a, com_des_ten_a);
113CE:  MOVLW  02
113D0:  MOVLB  A
113D2:  MOVWF  x68
113D4:  MOVLW  EA
113D6:  MOVWF  x67
113D8:  MOVFF  59,A69
113DC:  MOVLB  0
113DE:  CALL   1C46
.................... 		write_byte(ee_com_des_ten_b, com_des_ten_b);
113E2:  MOVLW  02
113E4:  MOVLB  A
113E6:  MOVWF  x68
113E8:  MOVLW  EF
113EA:  MOVWF  x67
113EC:  MOVFF  5A,A69
113F0:  MOVLB  0
113F2:  CALL   1C46
.................... 		write_byte(ee_com_des_chtt, com_des_chtt);
113F6:  MOVLW  02
113F8:  MOVLB  A
113FA:  MOVWF  x68
113FC:  MOVLW  EB
113FE:  MOVWF  x67
11400:  MOVFF  5B,A69
11404:  MOVLB  0
11406:  CALL   1C46
.................... 		write_byte(ee_com_des_chtc, com_des_chtc);
1140A:  MOVLW  02
1140C:  MOVLB  A
1140E:  MOVWF  x68
11410:  MOVLW  EC
11412:  MOVWF  x67
11414:  MOVFF  5C,A69
11418:  MOVLB  0
1141A:  CALL   1C46
.................... 		write_byte(ee_com_des_fp_ind_cap, com_des_fp_ind_cap);
1141E:  MOVLW  02
11420:  MOVLB  A
11422:  MOVWF  x68
11424:  MOVLW  ED
11426:  MOVWF  x67
11428:  MOVFF  5D,A69
1142C:  MOVLB  0
1142E:  CALL   1C46
.................... 		#if (st8500c == true)
.................... 			write_byte(ee_nro_cargas, nro_cargas);
11432:  MOVLW  03
11434:  MOVLB  A
11436:  MOVWF  x68
11438:  MOVLW  13
1143A:  MOVWF  x67
1143C:  MOVFF  6D,A69
11440:  MOVLB  0
11442:  CALL   1C46
.................... 			write_word(ee_max_kw, max_kw);
11446:  MOVLW  02
11448:  MOVLB  A
1144A:  MOVWF  x5D
1144C:  MOVLW  81
1144E:  MOVWF  x5C
11450:  MOVFF  66,A5F
11454:  MOVFF  65,A5E
11458:  MOVLB  0
1145A:  CALL   23AE
.................... 		#else
.................... 			write_byte(ee_nro_bancos_capacitor, nro_bancos_capacitor);
.................... 			write_byte(ee_max_kvar, max_kvar);
.................... 			write_byte(ee_min_kvar, min_kvar);
.................... 		#endif
.................... 	
.................... 		write_byte(ee_tempo_aciona, tempo_aciona);
1145E:  MOVLW  02
11460:  MOVLB  A
11462:  MOVWF  x68
11464:  MOVLW  83
11466:  MOVWF  x67
11468:  MOVFF  6A,A69
1146C:  MOVLB  0
1146E:  CALL   1C46
.................... 		write_byte(ee_tempo_desaciona, tempo_desaciona);
11472:  MOVLW  02
11474:  MOVLB  A
11476:  MOVWF  x68
11478:  MOVLW  84
1147A:  MOVWF  x67
1147C:  MOVFF  6B,A69
11480:  MOVLB  0
11482:  CALL   1C46
.................... 		write_byte(ee_sequencia, sequencia);
11486:  MOVLW  02
11488:  MOVLB  A
1148A:  MOVWF  x68
1148C:  MOVLW  85
1148E:  MOVWF  x67
11490:  MOVFF  67,A69
11494:  MOVLB  0
11496:  CALL   1C46
.................... 
.................... 		#if (prog_defasagem ==	true)
.................... 			write_byte(ee_defasagem, defasagem);
1149A:  MOVLB  A
1149C:  CLRF   x68
1149E:  MOVLW  18
114A0:  MOVWF  x67
114A2:  MOVFF  4BB,A69
114A6:  MOVLB  0
114A8:  CALL   1C46
.................... 		#endif
.................... 
.................... 		#if (st8500c == true)
.................... 			write_byte(ee_tipo_controle_demanda, tipo_controle_demanda);
114AC:  MOVLB  A
114AE:  CLRF   x68
114B0:  MOVLW  4F
114B2:  MOVWF  x67
114B4:  MOVFF  84,A69
114B8:  MOVLB  0
114BA:  CALL   1C46
.................... 
.................... 			aux_w1 = ee_carga_1;
114BE:  MOVLW  02
114C0:  MOVLB  3
114C2:  MOVWF  x63
114C4:  MOVLW  F3
114C6:  MOVWF  x62
.................... 			aux_w2 = ee_tempo_repouso_1;
114C8:  MOVLW  02
114CA:  MOVWF  x65
114CC:  MOVLW  DA
114CE:  MOVWF  x64
.................... 			for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++)
114D0:  CLRF   xB1
114D2:  MOVLB  0
114D4:  MOVF   x6D,W
114D6:  MOVLB  3
114D8:  SUBWF  xB1,W
114DA:  BTFSC  FD8.0
114DC:  BRA    1164A
.................... 				{
.................... 				 write_byte(aux_w1++, carga[aux_b1]);
114DE:  MOVFF  363,03
114E2:  MOVF   x62,W
114E4:  INCF   x62,F
114E6:  BTFSC  FD8.2
114E8:  INCF   x63,F
114EA:  MOVLB  A
114EC:  MOVWF  x4C
114EE:  MOVFF  03,A4D
114F2:  CLRF   03
114F4:  MOVLB  3
114F6:  MOVF   xB1,W
114F8:  ADDLW  07
114FA:  MOVWF  FE9
114FC:  MOVLW  01
114FE:  ADDWFC 03,W
11500:  MOVWF  FEA
11502:  MOVFF  FEF,A4E
11506:  MOVFF  A4D,A68
1150A:  MOVFF  A4C,A67
1150E:  MOVFF  A4E,A69
11512:  MOVLB  0
11514:  CALL   1C46
.................... 				 write_byte(aux_w2++, tempo_repouso[aux_b1]);
11518:  MOVLB  3
1151A:  MOVFF  365,03
1151E:  MOVF   x64,W
11520:  INCF   x64,F
11522:  BTFSC  FD8.2
11524:  INCF   x65,F
11526:  MOVLB  A
11528:  MOVWF  x4C
1152A:  MOVFF  03,A4D
1152E:  CLRF   03
11530:  MOVLB  3
11532:  MOVF   xB1,W
11534:  ADDLW  E7
11536:  MOVWF  FE9
11538:  MOVLW  00
1153A:  ADDWFC 03,W
1153C:  MOVWF  FEA
1153E:  MOVFF  FEF,A4E
11542:  MOVFF  A4D,A68
11546:  MOVFF  A4C,A67
1154A:  MOVFF  A4E,A69
1154E:  MOVLB  0
11550:  CALL   1C46
.................... 				 write_byte(ee_forma_controle + aux_b1, forma_controle[aux_b1]);
11554:  MOVLW  50
11556:  MOVLB  3
11558:  ADDWF  xB1,W
1155A:  MOVLB  A
1155C:  MOVWF  x4C
1155E:  CLRF   03
11560:  MOVLB  3
11562:  MOVF   xB1,W
11564:  ADDLW  59
11566:  MOVWF  FE9
11568:  MOVLW  01
1156A:  ADDWFC 03,W
1156C:  MOVWF  FEA
1156E:  MOVFF  FEF,A4D
11572:  MOVLB  A
11574:  CLRF   x68
11576:  MOVFF  A4C,A67
1157A:  MOVFF  A4D,A69
1157E:  MOVLB  0
11580:  CALL   1C46
.................... 				 write_byte(ee_hora_liga_controle + aux_b1, hora_liga_controle[aux_b1]);
11584:  MOVLW  60
11586:  MOVLB  3
11588:  ADDWF  xB1,W
1158A:  MOVLB  A
1158C:  MOVWF  x4C
1158E:  CLRF   03
11590:  MOVLB  3
11592:  MOVF   xB1,W
11594:  ADDLW  6A
11596:  MOVWF  FE9
11598:  MOVLW  01
1159A:  ADDWFC 03,W
1159C:  MOVWF  FEA
1159E:  MOVFF  FEF,A4D
115A2:  MOVLB  A
115A4:  CLRF   x68
115A6:  MOVFF  A4C,A67
115AA:  MOVFF  A4D,A69
115AE:  MOVLB  0
115B0:  CALL   1C46
.................... 				 write_byte(ee_minuto_liga_controle + aux_b1, minuto_liga_controle[aux_b1]);
115B4:  MOVLW  70
115B6:  MOVLB  3
115B8:  ADDWF  xB1,W
115BA:  MOVLB  A
115BC:  MOVWF  x4C
115BE:  CLRF   03
115C0:  MOVLB  3
115C2:  MOVF   xB1,W
115C4:  ADDLW  7B
115C6:  MOVWF  FE9
115C8:  MOVLW  01
115CA:  ADDWFC 03,W
115CC:  MOVWF  FEA
115CE:  MOVFF  FEF,A4D
115D2:  MOVLB  A
115D4:  CLRF   x68
115D6:  MOVFF  A4C,A67
115DA:  MOVFF  A4D,A69
115DE:  MOVLB  0
115E0:  CALL   1C46
.................... 				 write_byte(ee_hora_desliga_controle + aux_b1, hora_desliga_controle[aux_b1]);
115E4:  MOVLW  80
115E6:  MOVLB  3
115E8:  ADDWF  xB1,W
115EA:  MOVLB  A
115EC:  MOVWF  x4C
115EE:  CLRF   03
115F0:  MOVLB  3
115F2:  MOVF   xB1,W
115F4:  ADDLW  8C
115F6:  MOVWF  FE9
115F8:  MOVLW  01
115FA:  ADDWFC 03,W
115FC:  MOVWF  FEA
115FE:  MOVFF  FEF,A4D
11602:  MOVLB  A
11604:  CLRF   x68
11606:  MOVFF  A4C,A67
1160A:  MOVFF  A4D,A69
1160E:  MOVLB  0
11610:  CALL   1C46
.................... 				 write_byte(ee_minuto_liga_controle + aux_b1, minuto_desliga_controle[aux_b1]);
11614:  MOVLW  70
11616:  MOVLB  3
11618:  ADDWF  xB1,W
1161A:  MOVLB  A
1161C:  MOVWF  x4C
1161E:  CLRF   03
11620:  MOVLB  3
11622:  MOVF   xB1,W
11624:  ADDLW  9D
11626:  MOVWF  FE9
11628:  MOVLW  01
1162A:  ADDWFC 03,W
1162C:  MOVWF  FEA
1162E:  MOVFF  FEF,A4D
11632:  MOVLB  A
11634:  CLRF   x68
11636:  MOVFF  A4C,A67
1163A:  MOVFF  A4D,A69
1163E:  MOVLB  0
11640:  CALL   1C46
.................... 				}
.................... 		#else			
.................... 			aux_w1 = ee_banco_capacitor_1;
.................... 			aux_w2 = ee_tempo_repouso_1;
.................... 			for (aux_b1 = 0; aux_b1 < nro_bancos_capacitor; aux_b1++)
.................... 				{
.................... 				 write_byte(aux_w1++, banco_capacitor[aux_b1]);
.................... 				 write_byte(aux_w2++, tempo_repouso[aux_b1]);
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 	#if (com_regs == true)
11644:  MOVLB  3
11646:  INCF   xB1,F
11648:  BRA    114D2
.................... 		inicializa_regs();
1164A:  MOVLB  0
1164C:  CALL   68EC
.................... 		prox_grava = aux_l2 + intervalo_reg;
11650:  MOVLB  4
11652:  MOVF   xC5,W
11654:  MOVLB  3
11656:  ADDWF  x74,W
11658:  MOVWF  48
1165A:  MOVLB  4
1165C:  MOVF   xC6,W
1165E:  MOVLB  3
11660:  ADDWFC x75,W
11662:  MOVWF  49
11664:  MOVLW  00
11666:  ADDWFC x76,W
11668:  MOVWF  4A
1166A:  MOVLW  00
1166C:  ADDWFC x77,W
1166E:  MOVWF  4B
.................... 	#endif	
.................... 
.................... 	#if (portatil == true)
.................... 		#if (se_com_flex == true)
.................... 			write_byte(ee_tipo_ponteira, tipo_ponteira);
.................... 			atualiza_ganho(tipo_ponteira);
.................... 		#else
.................... 			write_word(ee_valor_tc, valor_tc);
.................... 		#endif
.................... 		
.................... 	#else
.................... 		write_word(ee_valor_tc, valor_tc);
11670:  MOVLB  A
11672:  CLRF   x5D
11674:  MOVLW  13
11676:  MOVWF  x5C
11678:  MOVFF  4C0,A5F
1167C:  MOVFF  4BF,A5E
11680:  MOVLB  0
11682:  CALL   23AE
.................... 	#endif
.................... 	write_word(ee_intervalo_reg, intervalo_reg);
11686:  MOVLB  A
11688:  CLRF   x5D
1168A:  MOVLW  27
1168C:  MOVWF  x5C
1168E:  MOVFF  4C6,A5F
11692:  MOVFF  4C5,A5E
11696:  MOVLB  0
11698:  CALL   23AE
.................... 	
.................... 	#if (com_menu == true)
.................... 		write_byte(ee_idioma, idioma);
1169C:  MOVLB  A
1169E:  CLRF   x68
116A0:  MOVLW  41
116A2:  MOVWF  x67
116A4:  MOVFF  2D,A69
116A8:  MOVLB  0
116AA:  CALL   1C46
.................... 	#endif
.................... 
.................... 	write_byte(ee_intervalo_integra, intervalo_integra);
116AE:  MOVLB  A
116B0:  CLRF   x68
116B2:  MOVLW  29
116B4:  MOVWF  x67
116B6:  MOVFF  4CF,A69
116BA:  MOVLB  0
116BC:  CALL   1C46
.................... 	write_byte(ee_forma_reg_cht, forma_reg_cht);
116C0:  MOVLB  A
116C2:  CLRF   x68
116C4:  MOVLW  2A
116C6:  MOVWF  x67
116C8:  MOVFF  4CD,A69
116CC:  MOVLB  0
116CE:  CALL   1C46
.................... 	write_byte(ee_registro, registro);
116D2:  MOVLB  A
116D4:  CLRF   x68
116D6:  MOVLW  2F
116D8:  MOVWF  x67
116DA:  MOVFF  4CC,A69
116DE:  MOVLB  0
116E0:  CALL   1C46
.................... 	write_byte(ee_ala_fp_ind, ala_fp_ind);
116E4:  MOVLB  A
116E6:  CLRF   x68
116E8:  MOVLW  1C
116EA:  MOVWF  x67
116EC:  MOVFF  4D0,A69
116F0:  MOVLB  0
116F2:  CALL   1C46
.................... 	write_byte(ee_ala_fp_cap, ala_fp_cap);
116F6:  MOVLB  A
116F8:  CLRF   x68
116FA:  MOVLW  1D
116FC:  MOVWF  x67
116FE:  MOVFF  4D1,A69
11702:  MOVLB  0
11704:  CALL   1C46
.................... 	write_byte(ee_ala_ten_a, ala_ten_a);
11708:  MOVLB  A
1170A:  CLRF   x68
1170C:  MOVLW  1E
1170E:  MOVWF  x67
11710:  MOVFF  4D2,A69
11714:  MOVLB  0
11716:  CALL   1C46
.................... 	write_byte(ee_ala_ten_b, ala_ten_b);
1171A:  MOVLB  A
1171C:  CLRF   x68
1171E:  MOVLW  1F
11720:  MOVWF  x67
11722:  MOVFF  4D3,A69
11726:  MOVLB  0
11728:  CALL   1C46
.................... 	write_byte(ee_ala_sc, ala_sc);
1172C:  MOVLB  A
1172E:  CLRF   x68
11730:  MOVLW  20
11732:  MOVWF  x67
11734:  MOVFF  4D4,A69
11738:  MOVLB  0
1173A:  CALL   1C46
.................... 	write_byte(ee_ala_subc, ala_subc);
1173E:  MOVLB  A
11740:  CLRF   x68
11742:  MOVLW  3F
11744:  MOVWF  x67
11746:  MOVFF  4D7,A69
1174A:  MOVLB  0
1174C:  CALL   1C46
.................... 	#if (com_cht == true)
.................... 		write_byte(ee_ala_chtt, ala_chtt);
.................... 		write_byte(ee_ala_chtc, ala_chtc);
.................... 	#endif
.................... 	#if (st8500c == true)
.................... 		write_byte(ee_ala_demanda_ativa, ala_demanda_ativa);
11750:  MOVLB  A
11752:  CLRF   x68
11754:  MOVLW  49
11756:  MOVWF  x67
11758:  MOVFF  4DA,A69
1175C:  MOVLB  0
1175E:  CALL   1C46
.................... 	#else
.................... 		#if (com_alarme_demanda== true)
.................... 			write_word(ee_ala_demanda_ativa, ala_demanda_ativa);
.................... 		#endif
.................... 	#endif
.................... 	
.................... 	write_byte(ee_tipo_ligacao, tipo_ligacao);
11762:  MOVLB  A
11764:  CLRF   x68
11766:  MOVLW  3E
11768:  MOVWF  x67
1176A:  MOVFF  4C7,A69
1176E:  MOVLB  0
11770:  CALL   1C46
11774:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... #if (portatil == true)
.................... 	void ajusta_off_set_fp(void)
.................... 	{						
.................... 		#if (se_com_flex ==	true)
.................... 			aux_w1 = ee_off_fp_9001g1;
.................... 			aux_w1 += tipo_ponteira;
.................... 			off_set_fp[tipo_ponteira] = distancia_fase;
.................... 			off_cor_r = distancia_fase;
.................... 			write_byte(aux_w1, off_cor_r);
.................... 		#else
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					break;
.................... 					}
.................... 				}
.................... 			aux_w1 = ee_off_fp_20;
.................... 			aux_w1 = aux_w1 + aux_b1;
.................... 			off_set_fp[aux_b1] = distancia_fase;
.................... 			off_cor_r = distancia_fase;
.................... 			write_byte(aux_w1, off_cor_r);
.................... 		#endif
.................... 	}
.................... 
.................... 	void ajusta_off_set_cor_r(signed char unidade)
.................... 	{
.................... 		#if (se_com_flex ==	true)
.................... 			aux_w1 = (ee_os_cor_r_9001g1 + tipo_ponteira) * 3;
.................... 			os_cor_pt_r[tipo_ponteira] += unidade;
.................... 			write_byte(aux_w1, os_cor_pt_r[tipo_ponteira]);
.................... 		#else
.................... 			aux_w1 = ee_os_cor_r_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					os_cor_pt_r[aux_b1] += unidade;
.................... 					write_byte(aux_w1, os_cor_pt_r[aux_b1]);
.................... 					break;
.................... 					}
.................... 				aux_w1 += 3;
.................... 				}
.................... 		#endif
.................... 	}
.................... 
.................... 	void ajusta_off_set_cor_s(signed char unidade)
.................... 	{
.................... 		#if (se_com_flex ==	true)
.................... 			aux_w1 = (ee_os_cor_s_9001g1 + tipo_ponteira) * 3;
.................... 			os_cor_pt_s[tipo_ponteira] += unidade;
.................... 			write_byte(aux_w1, os_cor_pt_s[tipo_ponteira]);
.................... 		#else
.................... 			aux_w1 = ee_os_cor_s_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					os_cor_pt_s[aux_b1] += unidade;
.................... 					write_byte(aux_w1, os_cor_pt_s[aux_b1]);
.................... 					break;
.................... 					}
.................... 				aux_w1 += 3;
.................... 				}
.................... 		#endif
.................... 	}
.................... 
.................... 	void ajusta_off_set_cor_t(signed char unidade)
.................... 	{
.................... 		#if (se_com_flex ==	true)
.................... 			aux_w1 = (ee_os_cor_t_9001g1 + tipo_ponteira) * 3;
.................... 			os_cor_pt_t[tipo_ponteira] += unidade;
.................... 			write_byte(aux_w1, os_cor_pt_t[tipo_ponteira]);
.................... 		#else
.................... 			aux_w1 = ee_os_cor_t_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					os_cor_pt_t[aux_b1] += unidade;
.................... 					write_byte(aux_w1, os_cor_pt_t[aux_b1]);
.................... 					break;
.................... 					}
.................... 				aux_w1 += 3;
.................... 				}
.................... 		#endif
.................... 	}
.................... 
.................... 	void ajusta_off_set_pot_r(signed char unidade)
.................... 	{
.................... 		#if (se_com_flex ==	true)
.................... 			aux_w1 = (ee_os_pot_r_9001g1 + tipo_ponteira) * 3;
.................... 			os_pot_pt_r[tipo_ponteira]--;
.................... 			write_byte(aux_w1, os_pot_pt_r[tipo_ponteira]);
.................... 		#else
.................... 			aux_w1 = ee_os_pot_r_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					os_pot_pt_r[aux_b1]--;
.................... 					write_byte(aux_w1, os_pot_pt_r[aux_b1]);
.................... 					break;
.................... 					}
.................... 				aux_w1 += 3;
.................... 				}
.................... 		#endif
.................... 	}
.................... 
.................... 	void ajusta_off_set_pot_s(signed char unidade)
.................... 	{
.................... 		#if (se_com_flex ==	true)
.................... 			aux_w1 = (ee_os_pot_s_9001g1 + tipo_ponteira) * 3;
.................... 			os_pot_pt_s[tipo_ponteira]--;
.................... 			write_byte(aux_w1, os_pot_pt_s[tipo_ponteira]);
.................... 		#else
.................... 			aux_w1 = ee_os_pot_s_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					os_pot_pt_s[aux_b1]--;
.................... 					write_byte(aux_w1, os_pot_pt_s[aux_b1]);
.................... 					break;
.................... 					}
.................... 				aux_w1 += 3;
.................... 				}
.................... 		#endif
.................... 	}
.................... 
.................... 	void ajusta_off_set_pot_t(signed char unidade)
.................... 	{
.................... 		#if (se_com_flex ==	true)
.................... 			aux_w1 = (ee_os_pot_t_9001g1 + tipo_ponteira) * 3;
.................... 			os_pot_pt_t[tipo_ponteira]--;
.................... 			write_byte(aux_w1, os_pot_pt_t[tipo_ponteira]);
.................... 		#else
.................... 			aux_w1 = ee_os_pot_t_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					os_pot_pt_t[aux_b1]--;
.................... 					write_byte(aux_w1, os_pot_pt_t[aux_b1]);
.................... 					break;
.................... 					}
.................... 				aux_w1 += 3;
.................... 				}
.................... 		#endif
.................... 	}
.................... 
.................... #endif
.................... 
.................... 
.................... #if (st92 == true)
.................... 	void trata_saidas(void)
.................... 	{
.................... 	aux_b1 = LED;
.................... 	output_low(CS_IO2);
.................... 	output_d(aux_b1);
.................... 	output_high (CS_IO2);
.................... 
.................... 	output_low(CS_IO4);
.................... 	output_d(0b00010000);
.................... 	output_high (CS_IO4);
.................... 
.................... 	}
.................... #endif
.................... 
.................... #if (protocolo_abb == true)
.................... 	word converte_abb(int32 grandeza, char tipo)
.................... 	{
.................... 	if (tipo == 'C')			// Corrente
.................... 		{										//abb 		1000A = 16384
.................... 		aux_l1 = grandeza;
.................... 		aux_l1 = (aux_l1 * 2048) / 500;			// 2048 =  16384 / 8
.................... //		aux_l1 = (aux_l1 * 2048) / (valor_tc/ 100);			// 2048 =  16384 / 8
.................... 		return((word)(aux_l1));		
.................... 		}
.................... 	else if (tipo == 'T')		// Tensao		VABB = ((VQ6 * 16384) / 64) / 254
.................... 		{																	
.................... 		aux_l1 = grandeza;
.................... 		aux_l1 = (aux_l1 * 256) / 254;			// 256 = 16384/ 64
.................... 		return((word)(aux_l1));		
.................... 		}
.................... 	else if (tipo == 'P')		// Potencia
.................... 		{
.................... 		aux_f1 = grandeza;
.................... 		aux_f1 = ((((aux_f1 * 10) / 32) * 16384) / (254 * 5));			// 512 = 16384 / 32
.................... 		return((word)(aux_f1));		
.................... 		}
.................... 	else if (tipo == 'F')		// Fator de Potencia
.................... 		{
.................... 		if (grandeza > 32768)
.................... 			{
.................... 			aux_f1 = (65536 - grandeza);
.................... 			}
.................... 		else
.................... 			{
.................... 			aux_f1 = grandeza;
.................... 			}
.................... 		aux_f1 = (aux_f1 / 1024);
.................... 		aux_l1 = aux_f1 * 16384;
.................... 		return((word)(aux_l1));
.................... 		}
.................... 	else if (tipo == 'A')		// Angulo
.................... 		{
.................... 		short sinal;
.................... 		if (grandeza > 32768)
.................... 			{
.................... 			sinal = 1;
.................... 			aux_f1 = (65536 - grandeza);
.................... 			}
.................... 		else
.................... 			{
.................... 			sinal = 0;
.................... 			aux_f1 = grandeza;
.................... 			}
.................... 
.................... 		if (addr_regs_modbus == 139)
.................... 			{
.................... 			if (sentido_r == 1)
.................... 				{
.................... 				aux_f1 = aux_f1 * -1;
.................... 				}
.................... 			}
.................... 		if (addr_regs_modbus == 140)
.................... 			{
.................... 			if (sentido_s == 1)
.................... 				{
.................... 				aux_f1 = aux_f1 * -1;
.................... 				}
.................... 			}
.................... 		if (addr_regs_modbus == 141)
.................... 			{
.................... 			if (sentido_t == 1)
.................... 				{
.................... 				aux_f1 = aux_f1 * -1;
.................... 				}
.................... 			}
.................... 		if (addr_regs_modbus == 142)
.................... 			{
.................... 			//Para FP Total nao consideramos TC Invertido
.................... 			}
.................... 
.................... 		aux_f1 = (aux_f1 / 1024);
.................... 		aux_f1 = (acos(aux_f1) * 180) / 3.1416;
.................... 		aux_f1 = (aux_f1 * 16384) / 360;
.................... 		
.................... 		if (sinal == 1)
.................... 			{
.................... 			aux_w1 = aux_f1 + 0x8000;
.................... 			}
.................... 		else
.................... 			{
.................... 			aux_w1 = aux_f1;
.................... 			}
.................... 		return((word)(aux_w1));
.................... 		}
.................... 	else if (tipo == 'B')
.................... 		{
.................... 		aux_l1 = (((grandeza / 4) * 8192) / 50);
.................... 		return((word)(aux_l1));
.................... 		}
.................... 	else if (tipo == 'D')		// Demanda
.................... 		{
.................... 		aux_f1 = grandeza;
.................... 		aux_f1 = (((aux_f1 * 10) * 16384) / (254 * 5));
.................... 		return((word)(aux_f1));		
.................... 		}
.................... 	else
.................... 		{
.................... 		return (0);
.................... 		}
.................... 	}
.................... #endif
.................... 
.................... 
.................... #include "st_rota.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: st92ROTA                                                        *
.................... ; Funcao: MODULO ROTINAS             									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... //#include <18F6620.H>
.................... //#include "st_vars.c"
.................... 
.................... /*;                BINASC2
.................... ;                ------
.................... ;       Funcao:  converte nro binario de 2 bytes em nro ASCII de ate' 4 digitos
.................... ;       Entrada: valor- valor binario 16bits
.................... ;       Saida:	buf_tmp[0 a 4] -  buffer ASCII (com 4 posicoes)
.................... */        
.................... void binasc2(int16 valor)
.................... {
....................     int16 ivalor;
.................... 
....................     ivalor = valor/10000;
*
04F12:  MOVFF  A63,A6C
04F16:  MOVFF  A62,A6B
04F1A:  MOVLW  27
04F1C:  MOVLB  A
04F1E:  MOVWF  x6E
04F20:  MOVLW  10
04F22:  MOVWF  x6D
04F24:  MOVLB  0
04F26:  RCALL  4ECC
04F28:  MOVFF  02,A65
04F2C:  MOVFF  01,A64
....................     buf_tmp[0] = ivalor+'0';
04F30:  MOVLW  30
04F32:  MOVLB  A
04F34:  ADDWF  x64,W
04F36:  MOVLB  8
04F38:  MOVWF  x64
....................     valor = valor-(ivalor*10000);
04F3A:  MOVFF  A65,A67
04F3E:  MOVFF  A64,A66
04F42:  MOVLW  27
04F44:  MOVLB  A
04F46:  MOVWF  x69
04F48:  MOVLW  10
04F4A:  MOVWF  x68
04F4C:  MOVLB  0
04F4E:  CALL   473C
04F52:  MOVF   01,W
04F54:  MOVLB  A
04F56:  SUBWF  x62,F
04F58:  MOVF   02,W
04F5A:  SUBWFB x63,F
.................... 
....................     ivalor = valor/1000;
04F5C:  MOVFF  A63,A6C
04F60:  MOVFF  A62,A6B
04F64:  MOVLW  03
04F66:  MOVWF  x6E
04F68:  MOVLW  E8
04F6A:  MOVWF  x6D
04F6C:  MOVLB  0
04F6E:  RCALL  4ECC
04F70:  MOVFF  02,A65
04F74:  MOVFF  01,A64
....................     buf_tmp[1] = ivalor+'0';
04F78:  MOVLW  30
04F7A:  MOVLB  A
04F7C:  ADDWF  x64,W
04F7E:  MOVLB  8
04F80:  MOVWF  x65
....................     valor = valor-(ivalor*1000);
04F82:  MOVFF  A65,A67
04F86:  MOVFF  A64,A66
04F8A:  MOVLW  03
04F8C:  MOVLB  A
04F8E:  MOVWF  x69
04F90:  MOVLW  E8
04F92:  MOVWF  x68
04F94:  MOVLB  0
04F96:  CALL   473C
04F9A:  MOVF   01,W
04F9C:  MOVLB  A
04F9E:  SUBWF  x62,F
04FA0:  MOVF   02,W
04FA2:  SUBWFB x63,F
.................... 
....................     ivalor = valor/100;
04FA4:  MOVFF  A63,A6C
04FA8:  MOVFF  A62,A6B
04FAC:  CLRF   x6E
04FAE:  MOVLW  64
04FB0:  MOVWF  x6D
04FB2:  MOVLB  0
04FB4:  RCALL  4ECC
04FB6:  MOVFF  02,A65
04FBA:  MOVFF  01,A64
....................     buf_tmp[2] = ivalor+'0';
04FBE:  MOVLW  30
04FC0:  MOVLB  A
04FC2:  ADDWF  x64,W
04FC4:  MOVLB  8
04FC6:  MOVWF  x66
....................     valor = valor-(ivalor*100);
04FC8:  MOVFF  A65,A67
04FCC:  MOVFF  A64,A66
04FD0:  MOVLB  A
04FD2:  CLRF   x69
04FD4:  MOVLW  64
04FD6:  MOVWF  x68
04FD8:  MOVLB  0
04FDA:  CALL   473C
04FDE:  MOVF   01,W
04FE0:  MOVLB  A
04FE2:  SUBWF  x62,F
04FE4:  MOVF   02,W
04FE6:  SUBWFB x63,F
....................         
....................     ivalor = valor/10;
04FE8:  MOVFF  A63,A6C
04FEC:  MOVFF  A62,A6B
04FF0:  CLRF   x6E
04FF2:  MOVLW  0A
04FF4:  MOVWF  x6D
04FF6:  MOVLB  0
04FF8:  RCALL  4ECC
04FFA:  MOVFF  02,A65
04FFE:  MOVFF  01,A64
....................     buf_tmp[3] = ivalor+'0';
05002:  MOVLW  30
05004:  MOVLB  A
05006:  ADDWF  x64,W
05008:  MOVLB  8
0500A:  MOVWF  x67
....................     valor = valor-(ivalor*10);
0500C:  MOVFF  A65,A67
05010:  MOVFF  A64,A66
05014:  MOVLB  A
05016:  CLRF   x69
05018:  MOVLW  0A
0501A:  MOVWF  x68
0501C:  MOVLB  0
0501E:  CALL   473C
05022:  MOVF   01,W
05024:  MOVLB  A
05026:  SUBWF  x62,F
05028:  MOVF   02,W
0502A:  SUBWFB x63,F
.................... 
.................... 	buf_tmp[4] = valor+'0';
0502C:  MOVLW  30
0502E:  ADDWF  x62,W
05030:  MOVLB  8
05032:  MOVWF  x68
05034:  MOVLB  0
05036:  RETURN 0
.................... 
.................... }
.................... 
.................... /*;                BINASC
.................... ;                ------
.................... ;       Funcao:  converte nro binario de 1 byte em nro ASCII de ate' 3 digitos
.................... ;       Entrada: valor- valor binario 8 bits
.................... ;       Saida:	buf_tmp[0 a 2] -  buffer ASCII (com 3 posicoes)
.................... */        
.................... void binasc(char valor)
.................... {
....................     char ivalor;
....................     ivalor = valor/100;
....................     buf_tmp[0] = ivalor+'0';
....................     valor = valor-(ivalor*100);
....................         
....................     ivalor = valor/10;
....................     buf_tmp[1] = ivalor+'0';
....................     valor = valor-(ivalor*10);
.................... 
.................... 	buf_tmp[2] = valor+'0';
.................... 
.................... }
.................... 
.................... 
.................... /*;                BINASC2
.................... ;                ------
.................... ;       Funcao:  converte nro binario de 2 bytes em nro ASCII de ate' 4 digitos
.................... ;       Entrada: valor- valor binario 32 bits
.................... ;       Saida:	buf_tmp[0 a 9] -  buffer ASCII (com q0 posicoes)
.................... */        
.................... void long_asc(int32 valor)
.................... {
....................     int32 ivalor;
.................... 
....................     ivalor = valor/1000000000;
*
0AB8A:  BCF    FD8.1
0AB8C:  MOVFF  A54,A73
0AB90:  MOVFF  A53,A72
0AB94:  MOVFF  A52,A71
0AB98:  MOVFF  A51,A70
0AB9C:  MOVLW  3B
0AB9E:  MOVLB  A
0ABA0:  MOVWF  x77
0ABA2:  MOVLW  9A
0ABA4:  MOVWF  x76
0ABA6:  MOVLW  CA
0ABA8:  MOVWF  x75
0ABAA:  CLRF   x74
0ABAC:  MOVLB  0
0ABAE:  CALL   6858
0ABB2:  MOVFF  03,A58
0ABB6:  MOVFF  02,A57
0ABBA:  MOVFF  01,A56
0ABBE:  MOVFF  00,A55
....................     buf_tmp[0] = ivalor+'0';
0ABC2:  MOVLW  30
0ABC4:  MOVLB  A
0ABC6:  ADDWF  x55,W
0ABC8:  MOVLB  8
0ABCA:  MOVWF  x64
....................     valor = valor-(ivalor*1000000000);
0ABCC:  MOVFF  A58,A75
0ABD0:  MOVFF  A57,A74
0ABD4:  MOVFF  A56,A73
0ABD8:  MOVFF  A55,A72
0ABDC:  MOVLW  3B
0ABDE:  MOVLB  A
0ABE0:  MOVWF  x79
0ABE2:  MOVLW  9A
0ABE4:  MOVWF  x78
0ABE6:  MOVLW  CA
0ABE8:  MOVWF  x77
0ABEA:  CLRF   x76
0ABEC:  MOVLB  0
0ABEE:  CALL   67FC
0ABF2:  MOVF   00,W
0ABF4:  MOVLB  A
0ABF6:  SUBWF  x51,F
0ABF8:  MOVF   01,W
0ABFA:  SUBWFB x52,F
0ABFC:  MOVF   02,W
0ABFE:  SUBWFB x53,F
0AC00:  MOVF   03,W
0AC02:  SUBWFB x54,F
....................     
....................     ivalor = valor/100000000;
0AC04:  BCF    FD8.1
0AC06:  MOVFF  A54,A73
0AC0A:  MOVFF  A53,A72
0AC0E:  MOVFF  A52,A71
0AC12:  MOVFF  A51,A70
0AC16:  MOVLW  05
0AC18:  MOVWF  x77
0AC1A:  MOVLW  F5
0AC1C:  MOVWF  x76
0AC1E:  MOVLW  E1
0AC20:  MOVWF  x75
0AC22:  CLRF   x74
0AC24:  MOVLB  0
0AC26:  CALL   6858
0AC2A:  MOVFF  03,A58
0AC2E:  MOVFF  02,A57
0AC32:  MOVFF  01,A56
0AC36:  MOVFF  00,A55
....................     buf_tmp[1] = ivalor+'0';
0AC3A:  MOVLW  30
0AC3C:  MOVLB  A
0AC3E:  ADDWF  x55,W
0AC40:  MOVLB  8
0AC42:  MOVWF  x65
....................     valor = valor-(ivalor*100000000);
0AC44:  MOVFF  A58,A75
0AC48:  MOVFF  A57,A74
0AC4C:  MOVFF  A56,A73
0AC50:  MOVFF  A55,A72
0AC54:  MOVLW  05
0AC56:  MOVLB  A
0AC58:  MOVWF  x79
0AC5A:  MOVLW  F5
0AC5C:  MOVWF  x78
0AC5E:  MOVLW  E1
0AC60:  MOVWF  x77
0AC62:  CLRF   x76
0AC64:  MOVLB  0
0AC66:  CALL   67FC
0AC6A:  MOVF   00,W
0AC6C:  MOVLB  A
0AC6E:  SUBWF  x51,F
0AC70:  MOVF   01,W
0AC72:  SUBWFB x52,F
0AC74:  MOVF   02,W
0AC76:  SUBWFB x53,F
0AC78:  MOVF   03,W
0AC7A:  SUBWFB x54,F
....................     
....................     ivalor = valor/10000000;
0AC7C:  BCF    FD8.1
0AC7E:  MOVFF  A54,A73
0AC82:  MOVFF  A53,A72
0AC86:  MOVFF  A52,A71
0AC8A:  MOVFF  A51,A70
0AC8E:  CLRF   x77
0AC90:  MOVLW  98
0AC92:  MOVWF  x76
0AC94:  MOVLW  96
0AC96:  MOVWF  x75
0AC98:  MOVLW  80
0AC9A:  MOVWF  x74
0AC9C:  MOVLB  0
0AC9E:  CALL   6858
0ACA2:  MOVFF  03,A58
0ACA6:  MOVFF  02,A57
0ACAA:  MOVFF  01,A56
0ACAE:  MOVFF  00,A55
....................     buf_tmp[2] = ivalor+'0';
0ACB2:  MOVLW  30
0ACB4:  MOVLB  A
0ACB6:  ADDWF  x55,W
0ACB8:  MOVLB  8
0ACBA:  MOVWF  x66
....................     valor = valor-(ivalor*10000000);
0ACBC:  MOVFF  A58,A75
0ACC0:  MOVFF  A57,A74
0ACC4:  MOVFF  A56,A73
0ACC8:  MOVFF  A55,A72
0ACCC:  MOVLB  A
0ACCE:  CLRF   x79
0ACD0:  MOVLW  98
0ACD2:  MOVWF  x78
0ACD4:  MOVLW  96
0ACD6:  MOVWF  x77
0ACD8:  MOVLW  80
0ACDA:  MOVWF  x76
0ACDC:  MOVLB  0
0ACDE:  CALL   67FC
0ACE2:  MOVF   00,W
0ACE4:  MOVLB  A
0ACE6:  SUBWF  x51,F
0ACE8:  MOVF   01,W
0ACEA:  SUBWFB x52,F
0ACEC:  MOVF   02,W
0ACEE:  SUBWFB x53,F
0ACF0:  MOVF   03,W
0ACF2:  SUBWFB x54,F
.................... 
....................     ivalor = valor/1000000;
0ACF4:  BCF    FD8.1
0ACF6:  MOVFF  A54,A73
0ACFA:  MOVFF  A53,A72
0ACFE:  MOVFF  A52,A71
0AD02:  MOVFF  A51,A70
0AD06:  CLRF   x77
0AD08:  MOVLW  0F
0AD0A:  MOVWF  x76
0AD0C:  MOVLW  42
0AD0E:  MOVWF  x75
0AD10:  MOVLW  40
0AD12:  MOVWF  x74
0AD14:  MOVLB  0
0AD16:  CALL   6858
0AD1A:  MOVFF  03,A58
0AD1E:  MOVFF  02,A57
0AD22:  MOVFF  01,A56
0AD26:  MOVFF  00,A55
....................     buf_tmp[3] = ivalor+'0';
0AD2A:  MOVLW  30
0AD2C:  MOVLB  A
0AD2E:  ADDWF  x55,W
0AD30:  MOVLB  8
0AD32:  MOVWF  x67
....................     valor = valor-(ivalor*1000000);
0AD34:  MOVFF  A58,A75
0AD38:  MOVFF  A57,A74
0AD3C:  MOVFF  A56,A73
0AD40:  MOVFF  A55,A72
0AD44:  MOVLB  A
0AD46:  CLRF   x79
0AD48:  MOVLW  0F
0AD4A:  MOVWF  x78
0AD4C:  MOVLW  42
0AD4E:  MOVWF  x77
0AD50:  MOVLW  40
0AD52:  MOVWF  x76
0AD54:  MOVLB  0
0AD56:  CALL   67FC
0AD5A:  MOVF   00,W
0AD5C:  MOVLB  A
0AD5E:  SUBWF  x51,F
0AD60:  MOVF   01,W
0AD62:  SUBWFB x52,F
0AD64:  MOVF   02,W
0AD66:  SUBWFB x53,F
0AD68:  MOVF   03,W
0AD6A:  SUBWFB x54,F
.................... 
....................     ivalor = valor/100000;
0AD6C:  BCF    FD8.1
0AD6E:  MOVFF  A54,A73
0AD72:  MOVFF  A53,A72
0AD76:  MOVFF  A52,A71
0AD7A:  MOVFF  A51,A70
0AD7E:  CLRF   x77
0AD80:  MOVLW  01
0AD82:  MOVWF  x76
0AD84:  MOVLW  86
0AD86:  MOVWF  x75
0AD88:  MOVLW  A0
0AD8A:  MOVWF  x74
0AD8C:  MOVLB  0
0AD8E:  CALL   6858
0AD92:  MOVFF  03,A58
0AD96:  MOVFF  02,A57
0AD9A:  MOVFF  01,A56
0AD9E:  MOVFF  00,A55
....................     buf_tmp[4] = ivalor+'0';
0ADA2:  MOVLW  30
0ADA4:  MOVLB  A
0ADA6:  ADDWF  x55,W
0ADA8:  MOVLB  8
0ADAA:  MOVWF  x68
....................     valor = valor-(ivalor*100000);
0ADAC:  MOVFF  A58,A75
0ADB0:  MOVFF  A57,A74
0ADB4:  MOVFF  A56,A73
0ADB8:  MOVFF  A55,A72
0ADBC:  MOVLB  A
0ADBE:  CLRF   x79
0ADC0:  MOVLW  01
0ADC2:  MOVWF  x78
0ADC4:  MOVLW  86
0ADC6:  MOVWF  x77
0ADC8:  MOVLW  A0
0ADCA:  MOVWF  x76
0ADCC:  MOVLB  0
0ADCE:  CALL   67FC
0ADD2:  MOVF   00,W
0ADD4:  MOVLB  A
0ADD6:  SUBWF  x51,F
0ADD8:  MOVF   01,W
0ADDA:  SUBWFB x52,F
0ADDC:  MOVF   02,W
0ADDE:  SUBWFB x53,F
0ADE0:  MOVF   03,W
0ADE2:  SUBWFB x54,F
.................... 
....................     ivalor = valor/10000;
0ADE4:  BCF    FD8.1
0ADE6:  MOVFF  A54,A73
0ADEA:  MOVFF  A53,A72
0ADEE:  MOVFF  A52,A71
0ADF2:  MOVFF  A51,A70
0ADF6:  CLRF   x77
0ADF8:  CLRF   x76
0ADFA:  MOVLW  27
0ADFC:  MOVWF  x75
0ADFE:  MOVLW  10
0AE00:  MOVWF  x74
0AE02:  MOVLB  0
0AE04:  CALL   6858
0AE08:  MOVFF  03,A58
0AE0C:  MOVFF  02,A57
0AE10:  MOVFF  01,A56
0AE14:  MOVFF  00,A55
....................     buf_tmp[5] = ivalor+'0';
0AE18:  MOVLW  30
0AE1A:  MOVLB  A
0AE1C:  ADDWF  x55,W
0AE1E:  MOVLB  8
0AE20:  MOVWF  x69
....................     valor = valor-(ivalor*10000);
0AE22:  MOVFF  A58,A75
0AE26:  MOVFF  A57,A74
0AE2A:  MOVFF  A56,A73
0AE2E:  MOVFF  A55,A72
0AE32:  MOVLB  A
0AE34:  CLRF   x79
0AE36:  CLRF   x78
0AE38:  MOVLW  27
0AE3A:  MOVWF  x77
0AE3C:  MOVLW  10
0AE3E:  MOVWF  x76
0AE40:  MOVLB  0
0AE42:  CALL   67FC
0AE46:  MOVF   00,W
0AE48:  MOVLB  A
0AE4A:  SUBWF  x51,F
0AE4C:  MOVF   01,W
0AE4E:  SUBWFB x52,F
0AE50:  MOVF   02,W
0AE52:  SUBWFB x53,F
0AE54:  MOVF   03,W
0AE56:  SUBWFB x54,F
.................... 
....................     ivalor = valor/1000;
0AE58:  BCF    FD8.1
0AE5A:  MOVFF  A54,A73
0AE5E:  MOVFF  A53,A72
0AE62:  MOVFF  A52,A71
0AE66:  MOVFF  A51,A70
0AE6A:  CLRF   x77
0AE6C:  CLRF   x76
0AE6E:  MOVLW  03
0AE70:  MOVWF  x75
0AE72:  MOVLW  E8
0AE74:  MOVWF  x74
0AE76:  MOVLB  0
0AE78:  CALL   6858
0AE7C:  MOVFF  03,A58
0AE80:  MOVFF  02,A57
0AE84:  MOVFF  01,A56
0AE88:  MOVFF  00,A55
....................     buf_tmp[6] = ivalor+'0';
0AE8C:  MOVLW  30
0AE8E:  MOVLB  A
0AE90:  ADDWF  x55,W
0AE92:  MOVLB  8
0AE94:  MOVWF  x6A
....................     valor = valor-(ivalor*1000);
0AE96:  MOVFF  A58,A75
0AE9A:  MOVFF  A57,A74
0AE9E:  MOVFF  A56,A73
0AEA2:  MOVFF  A55,A72
0AEA6:  MOVLB  A
0AEA8:  CLRF   x79
0AEAA:  CLRF   x78
0AEAC:  MOVLW  03
0AEAE:  MOVWF  x77
0AEB0:  MOVLW  E8
0AEB2:  MOVWF  x76
0AEB4:  MOVLB  0
0AEB6:  CALL   67FC
0AEBA:  MOVF   00,W
0AEBC:  MOVLB  A
0AEBE:  SUBWF  x51,F
0AEC0:  MOVF   01,W
0AEC2:  SUBWFB x52,F
0AEC4:  MOVF   02,W
0AEC6:  SUBWFB x53,F
0AEC8:  MOVF   03,W
0AECA:  SUBWFB x54,F
.................... 
....................     ivalor = valor/100;
0AECC:  BCF    FD8.1
0AECE:  MOVFF  A54,A73
0AED2:  MOVFF  A53,A72
0AED6:  MOVFF  A52,A71
0AEDA:  MOVFF  A51,A70
0AEDE:  CLRF   x77
0AEE0:  CLRF   x76
0AEE2:  CLRF   x75
0AEE4:  MOVLW  64
0AEE6:  MOVWF  x74
0AEE8:  MOVLB  0
0AEEA:  CALL   6858
0AEEE:  MOVFF  03,A58
0AEF2:  MOVFF  02,A57
0AEF6:  MOVFF  01,A56
0AEFA:  MOVFF  00,A55
....................     buf_tmp[7] = ivalor+'0';
0AEFE:  MOVLW  30
0AF00:  MOVLB  A
0AF02:  ADDWF  x55,W
0AF04:  MOVLB  8
0AF06:  MOVWF  x6B
....................     valor = valor-(ivalor*100);
0AF08:  MOVFF  A58,A75
0AF0C:  MOVFF  A57,A74
0AF10:  MOVFF  A56,A73
0AF14:  MOVFF  A55,A72
0AF18:  MOVLB  A
0AF1A:  CLRF   x79
0AF1C:  CLRF   x78
0AF1E:  CLRF   x77
0AF20:  MOVLW  64
0AF22:  MOVWF  x76
0AF24:  MOVLB  0
0AF26:  CALL   67FC
0AF2A:  MOVF   00,W
0AF2C:  MOVLB  A
0AF2E:  SUBWF  x51,F
0AF30:  MOVF   01,W
0AF32:  SUBWFB x52,F
0AF34:  MOVF   02,W
0AF36:  SUBWFB x53,F
0AF38:  MOVF   03,W
0AF3A:  SUBWFB x54,F
....................         
....................     ivalor = valor/10;
0AF3C:  BCF    FD8.1
0AF3E:  MOVFF  A54,A73
0AF42:  MOVFF  A53,A72
0AF46:  MOVFF  A52,A71
0AF4A:  MOVFF  A51,A70
0AF4E:  CLRF   x77
0AF50:  CLRF   x76
0AF52:  CLRF   x75
0AF54:  MOVLW  0A
0AF56:  MOVWF  x74
0AF58:  MOVLB  0
0AF5A:  CALL   6858
0AF5E:  MOVFF  03,A58
0AF62:  MOVFF  02,A57
0AF66:  MOVFF  01,A56
0AF6A:  MOVFF  00,A55
....................     buf_tmp[8] = ivalor+'0';
0AF6E:  MOVLW  30
0AF70:  MOVLB  A
0AF72:  ADDWF  x55,W
0AF74:  MOVLB  8
0AF76:  MOVWF  x6C
....................     valor = valor-(ivalor*10);
0AF78:  MOVFF  A58,A75
0AF7C:  MOVFF  A57,A74
0AF80:  MOVFF  A56,A73
0AF84:  MOVFF  A55,A72
0AF88:  MOVLB  A
0AF8A:  CLRF   x79
0AF8C:  CLRF   x78
0AF8E:  CLRF   x77
0AF90:  MOVLW  0A
0AF92:  MOVWF  x76
0AF94:  MOVLB  0
0AF96:  CALL   67FC
0AF9A:  MOVF   00,W
0AF9C:  MOVLB  A
0AF9E:  SUBWF  x51,F
0AFA0:  MOVF   01,W
0AFA2:  SUBWFB x52,F
0AFA4:  MOVF   02,W
0AFA6:  SUBWFB x53,F
0AFA8:  MOVF   03,W
0AFAA:  SUBWFB x54,F
.................... 
.................... 	buf_tmp[9] = valor+'0';
0AFAC:  MOVLW  30
0AFAE:  ADDWF  x51,W
0AFB0:  MOVLB  8
0AFB2:  MOVWF  x6D
0AFB4:  MOVLB  0
0AFB6:  GOTO   AFD2 (RETURN)
.................... 
.................... }
.................... 
.................... /*;***************************************************
.................... ;Funcao: converter 4 bytes ascii em 2 bytes binario
.................... ;Entrada:buf_tmp[0,1,2,3] com bytes ascii
.................... ;Saida:	data1_int com valor binario */
.................... void ascbin1(void)
.................... {
.................... 	int16 val_tmp;
.................... 	val_tmp = (buf_tmp[0]-'0')*1000;
*
07326:  MOVLW  30
07328:  MOVLB  8
0732A:  SUBWF  x64,W
0732C:  MOVLB  A
0732E:  MOVWF  x4D
07330:  CLRF   x67
07332:  MOVWF  x66
07334:  MOVLW  03
07336:  MOVWF  x69
07338:  MOVLW  E8
0733A:  MOVWF  x68
0733C:  MOVLB  0
0733E:  CALL   473C
07342:  MOVFF  02,A4B
07346:  MOVFF  01,A4A
.................... 	data1_int = val_tmp;
0734A:  MOVFF  A4B,3F0
0734E:  MOVFF  A4A,3EF
.................... 	val_tmp = (buf_tmp[1]-'0')*100;
07352:  MOVLW  30
07354:  MOVLB  8
07356:  SUBWF  x65,W
07358:  MULLW  64
0735A:  MOVF   FF3,W
0735C:  MOVLB  A
0735E:  CLRF   x4B
07360:  MOVWF  x4A
.................... 	data1_int = data1_int + val_tmp;
07362:  MOVF   x4A,W
07364:  MOVLB  3
07366:  ADDWF  xEF,F
07368:  MOVLB  A
0736A:  MOVF   x4B,W
0736C:  MOVLB  3
0736E:  ADDWFC xF0,F
.................... 	val_tmp = (buf_tmp[2]-'0')*10;
07370:  MOVLW  30
07372:  MOVLB  8
07374:  SUBWF  x66,W
07376:  MULLW  0A
07378:  MOVF   FF3,W
0737A:  MOVLB  A
0737C:  CLRF   x4B
0737E:  MOVWF  x4A
.................... 	data1_int = data1_int + val_tmp;
07380:  MOVF   x4A,W
07382:  MOVLB  3
07384:  ADDWF  xEF,F
07386:  MOVLB  A
07388:  MOVF   x4B,W
0738A:  MOVLB  3
0738C:  ADDWFC xF0,F
.................... 	val_tmp = buf_tmp[3]-'0';
0738E:  MOVLW  30
07390:  MOVLB  8
07392:  SUBWF  x67,W
07394:  MOVLB  A
07396:  MOVWF  x4A
07398:  CLRF   x4B
.................... 	data1_int = data1_int + val_tmp;
0739A:  MOVF   x4A,W
0739C:  MOVLB  3
0739E:  ADDWF  xEF,F
073A0:  MOVLB  A
073A2:  MOVF   x4B,W
073A4:  MOVLB  3
073A6:  ADDWFC xF0,F
073A8:  MOVLB  0
073AA:  GOTO   8F48 (RETURN)
.................... }
.................... 
.................... /*;***************************************************
.................... ;Funcao: converter 3 bytes ascii em 1 byte binario
.................... ;Entrada:buf_tmp[1,2,3] com bytes ascii
.................... ;Saida:	data1 com valor binario */
.................... void ascbin2(void)
.................... {
.................... 	char val_tmp;
.................... 	val_tmp = (buf_tmp[1]-'0')*100;
.................... 	data1 =  val_tmp;
.................... 	val_tmp = (buf_tmp[2]-'0')*10;
.................... 	data1 = data1 + val_tmp;
.................... 	val_tmp = buf_tmp[3]-'0';
.................... 	data1 = data1 + val_tmp;
.................... }
.................... 
.................... word pob(char quantizacao)
.................... {
.................... 	if (quantizacao==0)
*
04DFC:  MOVLB  A
04DFE:  MOVF   x62,F
04E00:  BNZ   4E0E
.................... 		{
.................... 		 return(1);
04E02:  MOVLW  01
04E04:  MOVWF  01
04E06:  MOVLW  00
04E08:  MOVWF  02
04E0A:  BRA    4EC8
.................... 		}
04E0C:  BRA    4EC8
.................... 	else if (quantizacao==1)
04E0E:  DECFSZ x62,W
04E10:  BRA    4E1E
.................... 		{
.................... 		 return(2);
04E12:  MOVLW  02
04E14:  MOVWF  01
04E16:  MOVLW  00
04E18:  MOVWF  02
04E1A:  BRA    4EC8
.................... 		}
04E1C:  BRA    4EC8
.................... 	else if (quantizacao==2)
04E1E:  MOVF   x62,W
04E20:  SUBLW  02
04E22:  BNZ   4E30
.................... 		{
.................... 		 return(4);
04E24:  MOVLW  04
04E26:  MOVWF  01
04E28:  MOVLW  00
04E2A:  MOVWF  02
04E2C:  BRA    4EC8
.................... 		}
04E2E:  BRA    4EC8
.................... 	else if (quantizacao==3)
04E30:  MOVF   x62,W
04E32:  SUBLW  03
04E34:  BNZ   4E42
.................... 		{
.................... 		 return(8);
04E36:  MOVLW  08
04E38:  MOVWF  01
04E3A:  MOVLW  00
04E3C:  MOVWF  02
04E3E:  BRA    4EC8
.................... 		}
04E40:  BRA    4EC8
.................... 	else if (quantizacao==4)
04E42:  MOVF   x62,W
04E44:  SUBLW  04
04E46:  BNZ   4E54
.................... 		{
.................... 		 return(16);
04E48:  MOVLW  10
04E4A:  MOVWF  01
04E4C:  MOVLW  00
04E4E:  MOVWF  02
04E50:  BRA    4EC8
.................... 		}
04E52:  BRA    4EC8
.................... 	else if (quantizacao==5)
04E54:  MOVF   x62,W
04E56:  SUBLW  05
04E58:  BNZ   4E66
.................... 		{
.................... 		 return(32);
04E5A:  MOVLW  20
04E5C:  MOVWF  01
04E5E:  MOVLW  00
04E60:  MOVWF  02
04E62:  BRA    4EC8
.................... 		}
04E64:  BRA    4EC8
.................... 	else if (quantizacao==6)
04E66:  MOVF   x62,W
04E68:  SUBLW  06
04E6A:  BNZ   4E78
.................... 		{
.................... 		 return(64);
04E6C:  MOVLW  40
04E6E:  MOVWF  01
04E70:  MOVLW  00
04E72:  MOVWF  02
04E74:  BRA    4EC8
.................... 		}
04E76:  BRA    4EC8
.................... 	else if (quantizacao==7)
04E78:  MOVF   x62,W
04E7A:  SUBLW  07
04E7C:  BNZ   4E8A
.................... 		{
.................... 		 return(128);
04E7E:  MOVLW  80
04E80:  MOVWF  01
04E82:  MOVLW  00
04E84:  MOVWF  02
04E86:  BRA    4EC8
.................... 		}
04E88:  BRA    4EC8
.................... 	else if (quantizacao==8)
04E8A:  MOVF   x62,W
04E8C:  SUBLW  08
04E8E:  BNZ   4E9C
.................... 		{
.................... 		 return(256);
04E90:  MOVLW  00
04E92:  MOVWF  01
04E94:  MOVLW  01
04E96:  MOVWF  02
04E98:  BRA    4EC8
.................... 		}
04E9A:  BRA    4EC8
.................... 	else if (quantizacao==9)
04E9C:  MOVF   x62,W
04E9E:  SUBLW  09
04EA0:  BNZ   4EAE
.................... 		{
.................... 		 return(512);
04EA2:  MOVLW  00
04EA4:  MOVWF  01
04EA6:  MOVLW  02
04EA8:  MOVWF  02
04EAA:  BRA    4EC8
.................... 		}
04EAC:  BRA    4EC8
.................... 	else if (quantizacao==10)
04EAE:  MOVF   x62,W
04EB0:  SUBLW  0A
04EB2:  BNZ   4EC0
.................... 		{
.................... 		 return(1024);
04EB4:  MOVLW  00
04EB6:  MOVWF  01
04EB8:  MOVLW  04
04EBA:  MOVWF  02
04EBC:  BRA    4EC8
.................... 		}
04EBE:  BRA    4EC8
.................... 	else 
.................... 		{
.................... 		 return(1);
04EC0:  MOVLW  01
04EC2:  MOVWF  01
04EC4:  MOVLW  00
04EC6:  MOVWF  02
.................... 		}
04EC8:  MOVLB  0
04ECA:  RETURN 0
....................  
.................... }
.................... 
.................... 
.................... 
.................... void mulu_ww_int(int16 mul1, int16 mul2)
.................... {
.................... 	char ARG1L;
.................... 	char ARG1H; 
.................... 	char ARG2L;
.................... 	char ARG2H;
.................... 	char salva_prodh;
.................... 	char salva_prodl;
.................... 	
.................... 	salva_prodh = PRODH;
.................... 	salva_prodl = PRODL;
.................... 		
.................... 	ARG1L = mul1;
.................... 	ARG1H = mul1 >> 8;
.................... 	ARG2L = mul2;
.................... 	ARG2H = mul2 >> 8;
.................... 
.................... 	#asm
.................... 	
.................... 	MOVF	ARG1L, W
.................... 	MULWF	ARG2L
.................... 	
.................... 	MOVFF	PRODH, RES1
.................... 	MOVFF	PRODL, RES0
.................... 	
.................... 	MOVF	ARG1H, W
.................... 	MULWF	ARG2H
.................... 	
.................... 	MOVFF	PRODH, RES3
.................... 	MOVFF	PRODL, RES2
.................... 	
.................... 	MOVF	ARG2L, W
.................... 	MULWF	ARG1H
.................... 
.................... 	MOVF	PRODL, W
.................... 	ADDWF	RES1, F
.................... 	MOVF	PRODH, W
.................... 	ADDWFC	RES2, F
.................... 	CLRF	WREG
.................... 	ADDWFC	RES3, F
.................... 	
.................... 	MOVF	ARG2H, W
.................... 	MULWF	ARG1L
.................... 	
.................... 	MOVF	PRODL, W
.................... 	ADDWF	RES1, F
.................... 	MOVF	PRODH, W
.................... 	ADDWFC	RES2, F
.................... 	CLRF	WREG
.................... 	ADDWFC	RES3, F
.................... 
.................... 	MOVFF  RES3, 0x947
.................... 	MOVFF  RES2, 0x946
.................... 	MOVFF  RES1, 0x945
.................... 	MOVFF  RES0, 0x944
.................... 
.................... 	#endasm
.................... 
.................... 	PRODH = salva_prodh;
.................... 	PRODL = salva_prodl;
.................... 		
.................... 	return;
.................... }
.................... 
.................... void mul_ww_int(int16 mul1, int16 mul2)
.................... {
.................... 	char ARG1L;
.................... 	char ARG1H; 
.................... 	char ARG2L;
.................... 	char ARG2H;
.................... 
.................... 	char salva_prodh;
.................... 	char salva_prodl;
.................... 	
.................... 	salva_prodh = PRODH;
.................... 	salva_prodl = PRODL;
.................... 		
.................... 	ARG1L = mul1;
.................... 	ARG1H = mul1 >> 8;
.................... 	ARG2L = mul2;
.................... 	ARG2H = mul2 >> 8;
.................... 
.................... 	#asm
.................... 	
.................... 	MOVF	ARG1L, W
.................... 	MULWF	ARG2L
.................... 	
.................... 	MOVFF	PRODH, RES1
.................... 	MOVFF	PRODL, RES0
.................... 	
.................... 	MOVF	ARG1H, W
.................... 	MULWF	ARG2H
.................... 	
.................... 	MOVFF	PRODH, RES3
.................... 	MOVFF	PRODL, RES2
.................... 	
.................... 	MOVF	ARG2L, W
.................... 	MULWF	ARG1H
.................... 
.................... 	MOVF	PRODL, W
.................... 	ADDWF	RES1, F
.................... 	MOVF	PRODH, W
.................... 	ADDWFC	RES2, F
.................... 	CLRF	WREG
.................... 	ADDWFC	RES3, F
.................... 	
.................... 	MOVF	ARG2H, W
.................... 	MULWF	ARG1L
.................... 	
.................... 	MOVF	PRODL, W
.................... 	ADDWF	RES1, F
.................... 	MOVF	PRODH, W
.................... 	ADDWFC	RES2, F
.................... 	CLRF	WREG
.................... 	ADDWFC	RES3, F
.................... 
.................... 
.................... 	BTFSS  ARG2H, 7			; TESTA SE ARG2 É NEGATIVO
.................... 	BRA	   SIGN_ARG1
.................... 	MOVF   ARG1L, W
.................... 	SUBWF  RES2
.................... 	MOVF   ARG1H, W
.................... 	SUBWFB RES3
.................... 
.................... SIGN_ARG1:
.................... 	BTFSS  ARG1H, 7			; TESTA SE ARG1 É NEGATIVO
.................... 	BRA    CONT_CODE
.................... 	MOVF   ARG2L, W
.................... 	SUBWF  RES2
.................... 	MOVF   ARG2H, W
.................... 	SUBWFB RES2
.................... 	
.................... CONT_CODE:
.................... 
.................... 	MOVFF  RES3, 0x947
.................... 	MOVFF  RES2, 0x946
.................... 	MOVFF  RES1, 0x945
.................... 	MOVFF  RES0, 0x944
.................... 	
.................... 	
.................... 	#endasm
.................... 
.................... 	PRODH = salva_prodh;
.................... 	PRODL = salva_prodl;
.................... 		
.................... 	return;
.................... }
.................... 
.................... #include "st_deci.c"
.................... 
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS                                  *
.................... ; Modulo: st92ROTA                                                        *
.................... ; Funcao: MODULO ROTINAS             									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... void decide_regs(void);
.................... void decide(void);
.................... void trata_ala_ten_a(void);
.................... void trata_ala_ten_b(void);
.................... void trata_ala_sc(void);
.................... void trata_ala_cht(void);
.................... void trata_ala_fp_ind(void);
.................... void trata_ala_fp_cap(void);
.................... void trata_virada_mes(void);
.................... void trata_falta_fase(void);
.................... void trata_ala_subc(void);
.................... #if (com_alarme_demanda == true)
.................... 	void trata_ala_demanda(void);
.................... #endif
.................... void decide_tensao_nominal(void);
.................... void trata_sentido_sensor_corrente(void);
.................... #if (CONTROLADOR == true)
.................... 	#if (st8500c == true)
.................... 		void trata_desliga_ten_a(void);
.................... 	#else
.................... 		void trata_corrente_minima(void);
.................... 		void trata_desliga_ten_a(void);
.................... 		void trata_desliga_ten_b(void);
.................... 		void trata_desliga_chtt_a(void);
.................... 		void trata_desliga_chtc_a(void);
.................... 		void trata_falta_capacitor(void);
.................... 	#endif
.................... #endif
.................... void calcula_vref_cr(void);
.................... #if (monofasico == false)
.................... 	void calcula_vref_cs(void);
.................... 	void calcula_vref_ct(void);
.................... #endif
.................... #if ((st9200r == true) || (st9230r == true))
.................... 	#if (com_maximos == true)
.................... 		void trata_cor_pot_maxima(void);
.................... 	#endif
.................... #endif
.................... 
.................... 
.................... void decide_regs(void)
.................... {   
.................... 	#if (com_regs == true)
.................... 		#if (portatil == false)
.................... 			if (registro == 0){	
*
14AE4:  MOVLB  4
14AE6:  MOVF   xCC,F
14AE8:  BNZ   14B02
.................... 				registro = 1;
14AEA:  MOVLW  01
14AEC:  MOVWF  xCC
.................... 				write_byte(ee_registro, registro);
14AEE:  MOVLB  A
14AF0:  CLRF   x68
14AF2:  MOVLW  2F
14AF4:  MOVWF  x67
14AF6:  MOVFF  4CC,A69
14AFA:  MOVLB  0
14AFC:  CALL   1C46
14B00:  MOVLB  4
.................... 			}
.................... 		#else
.................... 			if (memoria_full == 1){
.................... 				if (registro == 1){
.................... 					grava_registros(reg_final);
.................... 					registro = 0;
.................... 					prog_time = 0;
.................... 					write_byte(ee_registro, registro);
.................... 					write_byte(ee_prog_time, prog_time);
.................... 				}
.................... 				return;
.................... 			}
.................... 		#endif
.................... 	#endif		
.................... 	#if (com_menu == true)
.................... 		if (qmenu == 5)
14B02:  MOVF   3A,W
14B04:  SUBLW  05
14B06:  BNZ   14B0A
.................... 			{
.................... 			return;
14B08:  BRA    14BE8
.................... 			}
.................... 	#endif
.................... 	#if (com_regs == true)
.................... 		#if (portatil == true)
.................... 			if (registro == 0)
.................... 				{	
.................... 				if (prog_time == 1)
.................... 					{
.................... 					if (dia == dia_liga)
.................... 						{
.................... 						if (hora == hora_liga)	
.................... 							{
.................... 							if (minuto >= minuto_liga)
.................... 								{
.................... 								registro = 1;
.................... 								write_byte(ee_registro, registro);
.................... 								grava_registros(reg_inicio);
.................... 								grava_registros(registro_normal);
.................... 								}
.................... 							}
.................... 						}
.................... 					}
.................... 				#if (funcao_505 == true)
.................... 					else
.................... 						{
.................... 						if (modo_funca == 2)
.................... 							{
.................... 							if (intervalo_reg < 60)
.................... 								{
.................... 								intervalo_reg = 600;
.................... 								write_word(ee_intervalo_reg, 600);
.................... 								}
.................... 							inicializa_regs();
.................... 							if ((prox_grava <= aux_l2) || (viroudia == 1))
.................... 								{
.................... 								prox_grava = (int32)(aux_l2 + intervalo_reg);
.................... 								inic_tensoes_505();
.................... 								}
.................... 							}
.................... 						}
.................... 				#endif
.................... 				}
.................... 			else
.................... 				{
.................... 				if (prog_time == 1)
.................... 					{
.................... 					if (dia >= dia_desliga)
.................... 						{
.................... 						if (hora >= hora_desliga)
.................... 							{
.................... 							if (minuto >= minuto_desliga)
.................... 								{
.................... 								grava_registros(reg_final);
.................... 								registro = 0;
.................... 								write_byte(ee_registro, 0);
.................... 								prog_time = 0;
.................... 								write_byte(ee_prog_time, 0);
.................... 								return;
.................... 								}
.................... 							}
.................... 						}
.................... 					}
.................... 		
.................... 				if (intervalo_reg < 60)
.................... 					{
.................... 					if (ultimo_tempo == segundo)
.................... 						{
.................... 						return;
.................... 						}
.................... 					}
.................... 		
.................... 				ultimo_tempo = segundo;
.................... 				
.................... 				inicializa_regs();
.................... 				if ((prox_grava <= aux_l2) || (viroudia == 1))
.................... 					{
.................... 					prox_grava = (int32)(aux_l2 + intervalo_reg);
.................... 					grava_registros(registro_normal);
.................... 					#if (com_cht == 1)
.................... 						grava_cht(registro_normal);
.................... 					#endif
.................... 					}
.................... 				else
.................... 					{
.................... 					aux_l1 = aux_l2 + intervalo_reg;
.................... 					if (prox_grava > aux_l1)
.................... 						{
.................... 						inicializa_regs();
.................... 						prox_grava = (int32)(aux_l2 + intervalo_reg);
.................... 						}
.................... 					}
.................... 				}
.................... 			if (fila_circular == 0)
.................... 				{
.................... 				if (registro == 1 )
.................... 					{
.................... 					if (memoria_full == 1)
.................... 						{			
.................... 						grava_registros(reg_final);
.................... 						registro = 0;
.................... 						prog_time = 0;
.................... 						write_byte(ee_registro, registro);
.................... 						write_byte(ee_prog_time, prog_time);
.................... 						}
.................... 					}
.................... 				}
.................... 		#else
.................... 			registro = 1;
14B0A:  MOVLW  01
14B0C:  MOVWF  xCC
.................... 			#if (funcao_505 == true)
.................... 				if (modo_funca == 2)
.................... 					{
.................... 					if (intervalo_reg < 60)
.................... 						{
.................... 						intervalo_reg = 600;
.................... 						write_word(ee_intervalo_reg, 600);
.................... 						}
.................... 					inicializa_regs();
.................... 					if ((prox_grava <= aux_l2) || (viroudia == 1))
.................... 						{
.................... 						prox_grava = (int32)(aux_l2 + intervalo_reg);
.................... 						inic_tensoes_505();
.................... 						}
.................... 					}
.................... 			#endif
.................... 			inicializa_regs();
14B0E:  MOVLB  0
14B10:  CALL   68EC
.................... 			if ((prox_grava <= aux_l2) || (viroudia == 1))
14B14:  MOVF   4B,W
14B16:  MOVLB  3
14B18:  SUBWF  x77,W
14B1A:  BNC   14B34
14B1C:  BNZ   14B38
14B1E:  MOVF   4A,W
14B20:  SUBWF  x76,W
14B22:  BNC   14B34
14B24:  BNZ   14B38
14B26:  MOVF   49,W
14B28:  SUBWF  x75,W
14B2A:  BNC   14B34
14B2C:  BNZ   14B38
14B2E:  MOVF   48,W
14B30:  SUBWF  x74,W
14B32:  BC    14B38
14B34:  BTFSS  1F.4
14B36:  BRA    14B74
.................... 				{
.................... 				prox_grava = (int32)(aux_l2 + intervalo_reg);
14B38:  MOVLB  4
14B3A:  MOVF   xC5,W
14B3C:  MOVLB  3
14B3E:  ADDWF  x74,W
14B40:  MOVWF  00
14B42:  MOVLB  4
14B44:  MOVF   xC6,W
14B46:  MOVLB  3
14B48:  ADDWFC x75,W
14B4A:  MOVWF  01
14B4C:  MOVLW  00
14B4E:  ADDWFC x76,W
14B50:  MOVWF  02
14B52:  MOVLW  00
14B54:  ADDWFC x77,W
14B56:  MOVWF  4B
14B58:  MOVFF  02,4A
14B5C:  MOVFF  01,49
14B60:  MOVFF  00,48
.................... 				grava_registros(registro_normal);
14B64:  MOVLW  01
14B66:  MOVLB  A
14B68:  MOVWF  x4A
14B6A:  MOVLB  0
14B6C:  CALL   5F70
.................... 				#if (com_cht == 1)
.................... 					grava_cht(registro_normal);
.................... 				#endif
.................... 				}
14B70:  BRA    14BE6
14B72:  MOVLB  3
.................... 			else
.................... 				{
.................... 				aux_l1 = aux_l2 + intervalo_reg;
14B74:  MOVLB  4
14B76:  MOVF   xC5,W
14B78:  MOVLB  3
14B7A:  ADDWF  x74,W
14B7C:  MOVWF  x70
14B7E:  MOVLB  4
14B80:  MOVF   xC6,W
14B82:  MOVLB  3
14B84:  ADDWFC x75,W
14B86:  MOVWF  x71
14B88:  MOVLW  00
14B8A:  ADDWFC x76,W
14B8C:  MOVWF  x72
14B8E:  MOVLW  00
14B90:  ADDWFC x77,W
14B92:  MOVWF  x73
.................... 				if (prox_grava > aux_l1)
14B94:  MOVF   x73,W
14B96:  SUBWF  4B,W
14B98:  BNC   14BE4
14B9A:  BNZ   14BB2
14B9C:  MOVF   x72,W
14B9E:  SUBWF  4A,W
14BA0:  BNC   14BE4
14BA2:  BNZ   14BB2
14BA4:  MOVF   x71,W
14BA6:  SUBWF  49,W
14BA8:  BNC   14BE4
14BAA:  BNZ   14BB2
14BAC:  MOVF   48,W
14BAE:  SUBWF  x70,W
14BB0:  BC    14BE4
.................... 					{
.................... 					inicializa_regs();
14BB2:  MOVLB  0
14BB4:  CALL   68EC
.................... 					prox_grava = (int32)(aux_l2 + intervalo_reg);
14BB8:  MOVLB  4
14BBA:  MOVF   xC5,W
14BBC:  MOVLB  3
14BBE:  ADDWF  x74,W
14BC0:  MOVWF  00
14BC2:  MOVLB  4
14BC4:  MOVF   xC6,W
14BC6:  MOVLB  3
14BC8:  ADDWFC x75,W
14BCA:  MOVWF  01
14BCC:  MOVLW  00
14BCE:  ADDWFC x76,W
14BD0:  MOVWF  02
14BD2:  MOVLW  00
14BD4:  ADDWFC x77,W
14BD6:  MOVWF  4B
14BD8:  MOVFF  02,4A
14BDC:  MOVFF  01,49
14BE0:  MOVFF  00,48
14BE4:  MOVLB  0
14BE6:  MOVLB  4
.................... 					}
.................... 				}
.................... 		
.................... 		#endif
.................... 	#endif		
14BE8:  MOVLB  0
14BEA:  RETURN 0
.................... }
.................... 
.................... #if (com_alarme == 1)
.................... 	void trata_alarme(void)
.................... 	{
.................... 
.................... 		#if (st5x == false)
.................... 			tem_comando_alarme = 0;
*
1AD6A:  BCF    24.2
.................... 		#endif
.................... 
.................... 		#if (st8500c == true)
.................... 			#if (com_rep == true)
.................... 				cor_a_r = false; 
.................... 				cor_a_s = false;	
.................... 				cor_a_t = false;
.................... 			#endif
.................... 			chtt_a = false; 
1AD6C:  BCF    23.4
.................... 			chtc_a = false;
1AD6E:  BCF    23.5
.................... 		#endif
.................... 
.................... 
.................... 		#if (com_rep == false)
.................... 			ferro_rep = false;
1AD70:  BCF    2C.3
.................... 		#endif
.................... 		#if (monofasico == true)
.................... 			if (fp_cap == true)
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_FP_CAP_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_FP_CAP_OFF;
.................... 				}
.................... 			if (fp_ind == true) 
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_FP_IND_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_FP_IND_OFF;
.................... 				}
.................... 			if (ten_a_r == true)
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_TEN_A_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_TEN_A_OFF;
.................... 				}
.................... 			if (ten_b_r == true)
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_TEN_B_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_TEN_B_OFF;
.................... 				}
.................... 			if (cor_a_r == true)
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_COR_A_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_COR_A_OFF;
.................... 				}
.................... 			if (cor_b_r == true) 
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_COR_B_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_COR_B_OFF;
.................... 				}
.................... 			if (chtt_a == true)
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_CHTA_A_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_CHTA_A_OFF;
.................... 				}
.................... 			if (chtc_a == true)
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_CHTC_A_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_CHTC_A_OFF;
.................... 				}
.................... 			if (dem_ati == true)
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_DEM_A_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_DEM_A_OFF;
.................... 				}
.................... 			if (ferro_rep == true)
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_ERRO_REP_ON;
.................... 				}
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_ERRO_REP_OFF;
.................... 				}
.................... 			#if (com_rep == true)
.................... 				if ((saturou_kw == true) || (saturou_kvar == true))
.................... 					{
.................... 					status_equipamento_L = status_equipamento_L | STATUS_ERRO_CONST_REP_ON;
.................... 					}
.................... 				else
.................... 					{
.................... 					status_equipamento_L = status_equipamento_L & STATUS_ERRO_CONST_REP_OFF;
.................... 					}
.................... 			#else
.................... 				status_equipamento_L = status_equipamento_L & STATUS_ERRO_CONST_REP_OFF;
.................... 			#endif
.................... 				
.................... 		#else
.................... 		
.................... 			if (fp_cap == true)
1AD72:  BTFSS  23.0
1AD74:  BRA    1AD7E
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_FP_CAP_ON;
1AD76:  MOVLB  3
1AD78:  BSF    x5D.0
.................... 				}
1AD7A:  BRA    1AD82
1AD7C:  MOVLB  0
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_FP_CAP_OFF;
1AD7E:  MOVLB  3
1AD80:  BCF    x5D.0
.................... 				}
.................... 			if (fp_ind == true) 
1AD82:  BTFSS  22.7
1AD84:  BRA    1AD8A
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_FP_IND_ON;
1AD86:  BSF    x5D.1
.................... 				}
1AD88:  BRA    1AD8C
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_FP_IND_OFF;
1AD8A:  BCF    x5D.1
.................... 				}
.................... 			if ((ten_a_r == true) || (ten_a_s == true) || (ten_a_t == true))
1AD8C:  BTFSC  23.1
1AD8E:  BRA    1AD98
1AD90:  BTFSC  27.5
1AD92:  BRA    1AD98
1AD94:  BTFSS  27.6
1AD96:  BRA    1AD9C
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_TEN_A_ON;
1AD98:  BSF    x5D.2
.................... 				}
1AD9A:  BRA    1AD9E
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_TEN_A_OFF;
1AD9C:  BCF    x5D.2
.................... 				}
.................... 			if ((ten_b_r == true) || (ten_b_s == true) || (ten_b_t == true))
1AD9E:  BTFSC  23.2
1ADA0:  BRA    1ADAA
1ADA2:  BTFSC  27.7
1ADA4:  BRA    1ADAA
1ADA6:  BTFSS  28.0
1ADA8:  BRA    1ADAE
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_TEN_B_ON;
1ADAA:  BSF    x5D.3
.................... 				}
1ADAC:  BRA    1ADB0
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_TEN_B_OFF;
1ADAE:  BCF    x5D.3
.................... 				}
.................... 			if ((cor_a_r == true) || (cor_a_s == true) || (cor_a_t == true))
1ADB0:  BTFSC  23.3
1ADB2:  BRA    1ADBC
1ADB4:  BTFSC  28.1
1ADB6:  BRA    1ADBC
1ADB8:  BTFSS  28.2
1ADBA:  BRA    1ADC0
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_COR_A_ON;
1ADBC:  BSF    x5D.4
.................... 				}
1ADBE:  BRA    1ADC2
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_COR_A_OFF;
1ADC0:  BCF    x5D.4
.................... 				}
.................... 			if ((cor_b_r == true) || (cor_b_s == true) || (cor_b_t == true))
1ADC2:  BTFSC  23.7
1ADC4:  BRA    1ADCE
1ADC6:  BTFSC  28.5
1ADC8:  BRA    1ADCE
1ADCA:  BTFSS  28.6
1ADCC:  BRA    1ADD2
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_COR_B_ON;
1ADCE:  BSF    x5D.5
.................... 				}
1ADD0:  BRA    1ADD4
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_COR_B_OFF;
1ADD2:  BCF    x5D.5
.................... 				}
.................... 			if (chtt_a == true)
1ADD4:  BTFSS  23.4
1ADD6:  BRA    1ADDC
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_CHTA_A_ON;
1ADD8:  BSF    x5D.6
.................... 				}
1ADDA:  BRA    1ADDE
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_CHTA_A_OFF;
1ADDC:  BCF    x5D.6
.................... 				}
.................... 			if (chtc_a == true)
1ADDE:  BTFSS  23.5
1ADE0:  BRA    1ADE6
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_CHTC_A_ON;
1ADE2:  BSF    x5D.7
.................... 				}
1ADE4:  BRA    1ADE8
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_CHTC_A_OFF;
1ADE6:  BCF    x5D.7
.................... 				}
.................... 			if (dem_ati == true)
1ADE8:  BTFSS  24.0
1ADEA:  BRA    1ADF0
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_DEM_A_ON;
1ADEC:  BSF    x5E.0
.................... 				}
1ADEE:  BRA    1ADF2
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_DEM_A_OFF;
1ADF0:  BCF    x5E.0
.................... 				}
.................... 			if (ferro_rep == true)
1ADF2:  BTFSS  2C.3
1ADF4:  BRA    1ADFA
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L | STATUS_ERRO_REP_ON;
1ADF6:  BSF    x5E.1
.................... 				}
1ADF8:  BRA    1ADFC
.................... 			else
.................... 				{
.................... 				status_equipamento_L = status_equipamento_L & STATUS_ERRO_REP_OFF;
1ADFA:  BCF    x5E.1
.................... 				}
.................... 			#if (com_rep == true)
.................... 				if ((saturou_kw == true) || (saturou_kvar == true))
.................... 					{
.................... 					status_equipamento_L = status_equipamento_L | STATUS_ERRO_CONST_REP_ON;
.................... 					}
.................... 				else
.................... 					{
.................... 					status_equipamento_L = status_equipamento_L & STATUS_ERRO_CONST_REP_OFF;
.................... 					}
.................... 			#else
.................... 				status_equipamento_L = status_equipamento_L & STATUS_ERRO_CONST_REP_OFF;
1ADFC:  BCF    x5E.2
.................... 			#endif
.................... 				
.................... 				
.................... 
.................... 		
.................... 		#endif
.................... 
.................... 		#if (home_system == false)
.................... 			if (tem_comando_alarme == 0)
1ADFE:  BTFSC  24.2
1AE00:  BRA    1AE5A
.................... 				{
.................... 				#if (monofasico == true)
.................... 					if ((fp_cap == true) || (fp_ind == true) || (ten_a_r == true) || (ten_b_r == true) || (cor_a_r == true) || (cor_b_r == true) || (chtt_a == true) || (chtc_a == true) ||  (sentido_r == true) || (dem_ati == true) || (ferro_rep == true))
.................... 						{
.................... 						if (tem_alarme == 0)
.................... 							{
.................... 							if (time_out_aciona_alarme == 0)
.................... 								{
.................... 								output_high(alarme);
.................... 								tem_alarme = 1;
.................... 								#if (st5x == true)
.................... 									fled_alarme = 0;
.................... 								#elif (controlador == true)
.................... 									led_alarme = 1;
.................... 								#endif		
.................... 								return;
.................... 								}
.................... 							}
.................... 						else
.................... 							{
.................... 							time_out_aciona_alarme = 15;
.................... 							}
.................... 						}
.................... 				#else
.................... 					if ((fp_cap == true) || (fp_ind == true) || (ten_a_r == true) || (ten_a_s == true) || (ten_a_t == true) || (ten_b_r == true) || (ten_b_s == true) || (ten_b_t == true) || (cor_a_r == true) || (cor_a_s == true) || (cor_a_t == true) || (chtt_a == true) || (chtc_a == true) || (dem_ati == true) || (ferro_rep == true))
1AE02:  BTFSC  23.0
1AE04:  BRA    1AE3E
1AE06:  BTFSC  22.7
1AE08:  BRA    1AE3E
1AE0A:  BTFSC  23.1
1AE0C:  BRA    1AE3E
1AE0E:  BTFSC  27.5
1AE10:  BRA    1AE3E
1AE12:  BTFSC  27.6
1AE14:  BRA    1AE3E
1AE16:  BTFSC  23.2
1AE18:  BRA    1AE3E
1AE1A:  BTFSC  27.7
1AE1C:  BRA    1AE3E
1AE1E:  BTFSC  28.0
1AE20:  BRA    1AE3E
1AE22:  BTFSC  23.3
1AE24:  BRA    1AE3E
1AE26:  BTFSC  28.1
1AE28:  BRA    1AE3E
1AE2A:  BTFSC  28.2
1AE2C:  BRA    1AE3E
1AE2E:  BTFSC  23.4
1AE30:  BRA    1AE3E
1AE32:  BTFSC  23.5
1AE34:  BRA    1AE3E
1AE36:  BTFSC  24.0
1AE38:  BRA    1AE3E
1AE3A:  BTFSS  2C.3
1AE3C:  BRA    1AE5A
.................... 							{
.................... 						if (tem_alarme == 0)
1AE3E:  BTFSC  22.4
1AE40:  BRA    1AE56
.................... 							{
.................... 							if (time_out_aciona_alarme == 0)
1AE42:  MOVF   xBC,F
1AE44:  BNZ   1AE54
.................... 								{
.................... 								output_high(alarme);
1AE46:  BCF    F98.0
1AE48:  BSF    F8F.0
.................... 								tem_alarme = 1;
1AE4A:  BSF    22.4
.................... 								#if (st5x == true)
.................... 									fled_alarme = 0;
.................... 								#elif ((controlador == true) || (st92 == true))
.................... 									led_alarme = 1;
1AE4C:  MOVLB  8
1AE4E:  BSF    x84.1
.................... 								#endif
.................... 								return;
1AE50:  BRA    1AEBC
1AE52:  MOVLB  3
.................... 								}
.................... 							}
1AE54:  BRA    1AE5A
.................... 						else
.................... 							{
.................... 							time_out_aciona_alarme = 15;
1AE56:  MOVLW  0F
1AE58:  MOVWF  xBC
.................... 							}
.................... 						}
.................... 				#endif
.................... 				}
.................... 	
.................... 			
.................... 				if (tem_comando_alarme == 0)
1AE5A:  BTFSC  24.2
1AE5C:  BRA    1AEBA
.................... 					{
.................... 					#if (monofasico == true)
.................... 						if (fp_cap == false)
.................... 							{
.................... 						 	if (fp_ind == false)
.................... 						 		{
.................... 						 		if (ten_a_r == false)
.................... 						 			{
.................... 						 			if (ten_b_r == false)
.................... 						 				{
.................... 						 				if (cor_a_r == false)
.................... 						 					{
.................... 							 				if (cor_b_r == false)
.................... 							 					{
.................... 											 	if (chtt_a == false)
.................... 											 		{
.................... 												 	if (chtc_a == false)
.................... 												 		{
.................... 													 	if (sentido_r == false)
.................... 															{
.................... 															if (dem_ati == false)
.................... 																{
.................... 																if (ferro_rep == false)
.................... 																	{
.................... 																	if (tem_alarme == 1)
.................... 																		{
.................... 																		tem_alarme = 0;
.................... 																		#if (st5x == true)
.................... 																			fled_alarme = 1;
.................... 																		#elif (controlador == true)
.................... 																			led_alarme = 0;
.................... 																		#endif		
.................... 																		output_low(alarme);		// apartir da versÿão x.48
.................... 																		}
.................... 																	time_out_aciona_alarme = 15;
.................... 																	}
.................... 																}
.................... 															}
.................... 														}
.................... 													}
.................... 												}
.................... 											}
.................... 										}
.................... 									}
.................... 								}
.................... 							}
.................... 					#else
.................... 						if (fp_cap == false)
1AE5E:  BTFSC  23.0
1AE60:  BRA    1AEBA
.................... 							{
.................... 						 	if (fp_ind == false)
1AE62:  BTFSC  22.7
1AE64:  BRA    1AEBA
.................... 						 		{
.................... 						 	 	if (ten_a_r == false)
1AE66:  BTFSC  23.1
1AE68:  BRA    1AEBA
.................... 						 	 		{
.................... 						 	 		if (ten_a_s == false)
1AE6A:  BTFSC  27.5
1AE6C:  BRA    1AEBA
.................... 						 	 			{
.................... 						 	 	 		if (ten_a_t == false)
1AE6E:  BTFSC  27.6
1AE70:  BRA    1AEBA
.................... 						 	 	 			{
.................... 						 	 	 			if (ten_b_r == false)
1AE72:  BTFSC  23.2
1AE74:  BRA    1AEBA
.................... 						 	 	 				{
.................... 						 	 	 	 			if (ten_b_s == false)
1AE76:  BTFSC  27.7
1AE78:  BRA    1AEBA
.................... 						 	 	 	 				{
.................... 									 	 	 	 	if (ten_b_t == false) 
1AE7A:  BTFSC  28.0
1AE7C:  BRA    1AEBA
.................... 									 	 	 	 		{
.................... 										 	 	 	 	if (cor_a_r == false) 
1AE7E:  BTFSC  23.3
1AE80:  BRA    1AEBA
.................... 										 	 	 	 		{
.................... 											 	 	 	 	if (cor_a_s == false)	
1AE82:  BTFSC  28.1
1AE84:  BRA    1AEBA
.................... 											 	 	 	 		{
.................... 												 	 			if (cor_a_t == false)
1AE86:  BTFSC  28.2
1AE88:  BRA    1AEBA
.................... 												 	 				{
.................... 													 	 	 	 	if (cor_b_r == false) 
1AE8A:  BTFSC  23.7
1AE8C:  BRA    1AEBA
.................... 													 	 	 	 		{
.................... 														 	 	 	 	if (cor_b_s == false)	
1AE8E:  BTFSC  28.5
1AE90:  BRA    1AEBA
.................... 														 	 	 	 		{
.................... 															 	 			if (cor_b_t == false)
1AE92:  BTFSC  28.6
1AE94:  BRA    1AEBA
.................... 															 	 				{
.................... 															 	 	 	  		if (chtt_a == false) 
1AE96:  BTFSC  23.4
1AE98:  BRA    1AEBA
.................... 															 	 	 	  			{
.................... 														 	 	 	   				if (chtc_a == false)
1AE9A:  BTFSC  23.5
1AE9C:  BRA    1AEBA
.................... 														 	 	 	   					{
.................... 																						if (dem_ati == false)
1AE9E:  BTFSC  24.0
1AEA0:  BRA    1AEBA
.................... 																							{
.................... 																							if (ferro_rep == false)
1AEA2:  BTFSC  2C.3
1AEA4:  BRA    1AEBA
.................... 																								{
.................... 																								if (tem_alarme == 1)
1AEA6:  BTFSS  22.4
1AEA8:  BRA    1AEB6
.................... 																									{
.................... 																									tem_alarme = 0;
1AEAA:  BCF    22.4
.................... 																									#if (st5x == true)
.................... 																										fled_alarme = 1;
.................... 																									#elif ((controlador == true) || (st92 == true))
.................... 																										led_alarme = 0;
1AEAC:  MOVLB  8
1AEAE:  BCF    x84.1
.................... 																									#endif		
.................... 																									output_low(alarme);		// apartir da versÿão x.48
1AEB0:  BCF    F98.0
1AEB2:  BCF    F8F.0
1AEB4:  MOVLB  3
.................... 																									}
.................... 																								time_out_aciona_alarme = 15;
1AEB6:  MOVLW  0F
1AEB8:  MOVWF  xBC
1AEBA:  MOVLB  8
.................... 																								}
.................... 																							}
.................... 																						}
.................... 																					}
.................... 																				}
.................... 																			}
.................... 																		}
.................... 																	}
.................... 																}
.................... 															}
.................... 														}
.................... 													}
.................... 												}
.................... 											}
.................... 										}
.................... 									}
.................... 								}
.................... 							}
.................... 					#endif
.................... 				}
.................... 		#endif
1AEBC:  MOVLB  0
1AEBE:  GOTO   1C0A6 (RETURN)
.................... 			
.................... 	}
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void decide(void)
.................... {
.................... 	#if (st5x == true)
.................... 		trata_status_led();
.................... 	#endif
.................... 	
.................... 	decide_tensao_nominal();
*
16F4A:  GOTO   160EC
.................... 	#if (portatil == true)
.................... 		#if (se_com_flex ==	true)
.................... 			if (recarrega_ponteira == true)
.................... 				{
.................... 				config_ponteiras();
.................... 				}
.................... 		#endif
.................... 		decide_que_ponteira();
.................... 	#endif
.................... 	#if (tc_fixo == true) 
.................... 		#if (se_com_flex ==	true)
.................... 			busca_mul_tc();  
.................... 		#else
.................... 			if (ultimo_tc != valor_tc)
16F4E:  MOVLB  4
16F50:  MOVF   xBF,W
16F52:  SUBWF  xBC,W
16F54:  BNZ   16F5A
16F56:  MOVF   xC0,F
16F58:  BZ    16F66
.................... 				{
.................... 				busca_mul_tc();  
16F5A:  MOVLB  0
16F5C:  CALL   7284
.................... 				ultimo_tc = valor_tc;
16F60:  MOVFF  4BF,4BC
16F64:  MOVLB  4
.................... 				}
.................... 		#endif
.................... 	#endif  
.................... 
.................... /* trata intervalo entre registros */
.................... 	if (virouseg == 1)
16F66:  BTFSS  1F.1
16F68:  BRA    16FF0
.................... 		{
.................... 		#if (com_regs == true)
.................... 			#if (com_menu == true)
.................... 				if (qmenu != 5)
16F6A:  MOVF   3A,W
16F6C:  SUBLW  05
16F6E:  BZ    16F82
.................... 					{
.................... 					if (registro_old != registro)
16F70:  MOVF   xCC,W
16F72:  SUBWF  xC9,W
16F74:  BZ    16F82
.................... 						{
.................... 						inicializa_flags_alarmes();
16F76:  MOVLB  0
16F78:  CALL   25FA
.................... 						registro_old = registro;
16F7C:  MOVFF  4CC,4C9
16F80:  MOVLB  4
.................... 						#if (portatil == true)
.................... 							calcula_autonomia();
.................... 						#endif
.................... 						}
.................... 					}
.................... 			#endif
.................... 		#endif			
.................... 
.................... 
.................... 		if (retardo_alarmes == 0)
16F82:  MOVLB  3
16F84:  MOVF   xF5,F
16F86:  BNZ   16FAA
.................... 			{
.................... 			#if (CONTROLADOR == true)
.................... 				#if (st8500c == true)
.................... 					trata_desliga_ten_a();
16F88:  MOVLB  0
16F8A:  GOTO   161D6
.................... 				#else
.................... 					// teste se corrente menor que minimo
.................... 					#if (com_rep == true)
.................... 						#if (monofasico == true)
.................... 							if (tensao_r > TENSAO_FALTA)
.................... 						#else
.................... 							if ((tensao_r > TENSAO_FALTA) && (tensao_s > TENSAO_FALTA) && (tensao_t > TENSAO_FALTA))
.................... 						#endif
.................... 							{
.................... 							trata_corrente_minima();
.................... 							}
.................... 					#else
.................... 						trata_corrente_minima();
.................... 					#endif
.................... 					trata_desliga_ten_a();
.................... 					trata_desliga_ten_b();
.................... 					#if ((com_cht == true) && (com_rep == false))
.................... 						trata_desliga_chtt_a();
.................... 						trata_desliga_chtc_a();
.................... 					#else
.................... 						des_chtc = false;
.................... 						des_chtt = false;
.................... 					#endif
.................... 					trata_falta_capacitor();
.................... 				#endif
.................... 			#endif
.................... 				
.................... 			#if (home_system == false)
.................... 				/* teste de fator de potencia indutivo */
.................... 				trata_ala_fp_ind();
16F8E:  GOTO   1638A
.................... 	
.................... 				/* teste de fator de potencia capacitivo */
.................... 				trata_ala_fp_cap();
16F92:  GOTO   1645E
.................... 				
.................... 				/* teste de tensao alta */
.................... 				trata_ala_ten_a();
16F96:  GOTO   16536
.................... 	
.................... 				/* teste de tensao baixa */
.................... 				trata_ala_ten_b(); 
16F9A:  BRA    1680C
.................... 	
.................... 				/* teste de sobre corrente */
.................... 				trata_ala_sc(); 
16F9C:  BRA    16ACA
.................... 	
.................... 				/* teste de sub corrente */
.................... 				trata_ala_subc(); 
16F9E:  BRA    16AD4
.................... 	
.................... 				#if (com_alarme_demanda == true)
.................... 					// Teste de Demanda Ativa
.................... 					trata_ala_demanda();
16FA0:  BRA    16ADE
.................... 				#else
.................... 					dem_ati = false;
.................... 				#endif
.................... 				// teste de falta de fase
.................... 				trata_falta_fase();
16FA2:  BRA    16D9C
.................... 	
.................... 				#if (com_cht == true)
.................... 					/* teste de conteudo harmonico alto */
.................... 					trata_ala_cht();
.................... 				#endif
.................... 				#if ((st9200r == true) || (st9230r == true))
.................... 					#if (com_maximos == true)
.................... 						trata_cor_pot_maxima();
.................... 					#endif
.................... 				#endif
.................... 				
.................... 			#endif
.................... 			trata_sentido_sensor_corrente();
16FA4:  BRA    16EBC
....................          	}
16FA6:  BRA    16FEE
16FA8:  MOVLB  3
.................... 		else
.................... 			{
.................... 			status_equipamento_H = 0;
16FAA:  CLRF   x5C
16FAC:  CLRF   x5B
.................... 			status_equipamento_L = 0;
16FAE:  CLRF   x5E
16FB0:  CLRF   x5D
.................... 			ferro_rep = false;
16FB2:  BCF    2C.3
.................... 			fp_ind = 0;
16FB4:  BCF    22.7
.................... 			fp_cap = 0;
16FB6:  BCF    23.0
.................... 			ten_a_r = 0;
16FB8:  BCF    23.1
.................... 			ten_b_r = 0;
16FBA:  BCF    23.2
.................... 			cor_a_r = 0;
16FBC:  BCF    23.3
.................... 			ffase_r = 0;
16FBE:  BCF    23.6
....................    			tem_alarme = 0;
16FC0:  BCF    22.4
.................... 			sentido_r = 0;
16FC2:  BCF    22.6
.................... 			#if (monofasico == false)
.................... 				ten_a_s = 0;
16FC4:  BCF    27.5
.................... 				ten_a_t = 0;
16FC6:  BCF    27.6
.................... 				ten_b_s = 0;
16FC8:  BCF    27.7
.................... 				ten_b_t = 0;
16FCA:  BCF    28.0
.................... 				cor_a_s = 0;
16FCC:  BCF    28.1
.................... 				cor_a_t = 0;
16FCE:  BCF    28.2
.................... 				chtt_a = 0;
16FD0:  BCF    23.4
.................... 				chtc_a = 0;
16FD2:  BCF    23.5
.................... 				ffase_s = 0;
16FD4:  BCF    28.3
.................... 				ffase_t = 0;
16FD6:  BCF    28.4
.................... 				sentido_s = 0;
16FD8:  BCF    27.3
.................... 				sentido_t = 0;
16FDA:  BCF    27.4
.................... 			#endif
.................... 			#if (controlador == true)
.................... 				falta_capacitor = false;
16FDC:  BCF    27.2
.................... 				des_ten_a = false;
16FDE:  BCF    25.3
.................... 				des_chtt = false;
16FE0:  BCF    25.5
.................... 				des_chtc = false;
16FE2:  BCF    25.6
.................... 				des_fp_ind = false;
16FE4:  BCF    25.7
.................... 			#endif
.................... 			#if (st8500c == true)
.................... 				fprintar = false;
16FE6:  BCF    26.5
.................... 				saturou_kw = false; 
16FE8:  BCF    26.1
.................... 				saturou_kvar = false;
16FEA:  BCF    26.2
16FEC:  MOVLB  0
16FEE:  MOVLB  4
.................... 			#endif
.................... 			}
.................... 
.................... 		}
16FF0:  MOVLB  0
16FF2:  GOTO   1730C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void trata_ala_ten_a(void)
.................... {
.................... 	word tensao_r_old;
.................... 	#if (monofasico == false)
.................... 		word tensao_s_old;
.................... 		word tensao_t_old;
.................... 	#endif
.................... 	if (ala_ten_a != 0)		/* SE PROGRAMACAO DIFERENTE DE ZERO COM CRITICA */
*
16536:  MOVLB  4
16538:  MOVF   xD2,F
1653A:  BTFSC  FD8.2
1653C:  BRA    16800
.................... 		{
.................... 		if (modo_funca == 2)
1653E:  MOVF   xA7,W
16540:  SUBLW  02
16542:  BNZ   165E8
.................... 			{
.................... 			tensao_r_old = tensao_r;
16544:  MOVFF  251,A4B
16548:  MOVFF  250,A4A
.................... 			tensao_r = (word)(soma_media_tensao_r / conta_media_tensao_r);
1654C:  BCF    FD8.1
1654E:  MOVFF  493,A73
16552:  MOVFF  492,A72
16556:  MOVFF  491,A71
1655A:  MOVFF  490,A70
1655E:  MOVLB  A
16560:  CLRF   x77
16562:  CLRF   x76
16564:  MOVFF  495,A75
16568:  MOVFF  494,A74
1656C:  MOVLB  0
1656E:  CALL   6858
16572:  MOVFF  01,251
16576:  MOVFF  00,250
.................... 			#if (monofasico == false)
.................... 				tensao_s_old = tensao_s;
1657A:  MOVFF  2D5,A4D
1657E:  MOVFF  2D4,A4C
.................... 				tensao_s = (word)(soma_media_tensao_s / conta_media_tensao_s);
16582:  BCF    FD8.1
16584:  MOVFF  49D,A73
16588:  MOVFF  49C,A72
1658C:  MOVFF  49B,A71
16590:  MOVFF  49A,A70
16594:  MOVLB  A
16596:  CLRF   x77
16598:  CLRF   x76
1659A:  MOVFF  4A3,A75
1659E:  MOVFF  4A2,A74
165A2:  MOVLB  0
165A4:  CALL   6858
165A8:  MOVFF  01,2D5
165AC:  MOVFF  00,2D4
.................... 				tensao_t_old = tensao_t;
165B0:  MOVFF  32C,A4F
165B4:  MOVFF  32B,A4E
.................... 				tensao_t = (word)(soma_media_tensao_t / conta_media_tensao_t);
165B8:  BCF    FD8.1
165BA:  MOVFF  4A1,A73
165BE:  MOVFF  4A0,A72
165C2:  MOVFF  49F,A71
165C6:  MOVFF  49E,A70
165CA:  MOVLB  A
165CC:  CLRF   x77
165CE:  CLRF   x76
165D0:  MOVFF  4A5,A75
165D4:  MOVFF  4A4,A74
165D8:  MOVLB  0
165DA:  CALL   6858
165DE:  MOVFF  01,32C
165E2:  MOVFF  00,32B
165E6:  MOVLB  4
.................... 			#endif
.................... 			}
.................... 
.................... 		if ((tipo_ligacao == 0) || (tipo_ligacao == 2))
165E8:  MOVF   xC7,F
165EA:  BZ    165F2
165EC:  MOVF   xC7,W
165EE:  SUBLW  02
165F0:  BNZ   165FC
.................... 			{
.................... 			aux_w1 = ten_nomi;
165F2:  MOVFF  4BE,363
165F6:  MOVFF  4BD,362
.................... 			}
165FA:  BRA    16650
.................... 		else
.................... 			{
.................... 			aux_w1 = (int16)(ten_nomi * 1.7320508);
165FC:  MOVFF  4BE,A7E
16600:  MOVFF  4BD,A7D
16604:  MOVLB  0
16606:  CALL   2924
1660A:  MOVFF  03,A80
1660E:  MOVFF  02,A7F
16612:  MOVFF  01,A7E
16616:  MOVFF  00,A7D
1661A:  MOVLW  D7
1661C:  MOVLB  A
1661E:  MOVWF  x84
16620:  MOVLW  B3
16622:  MOVWF  x83
16624:  MOVLW  5D
16626:  MOVWF  x82
16628:  MOVLW  7F
1662A:  MOVWF  x81
1662C:  MOVLB  0
1662E:  CALL   5306
16632:  MOVFF  03,A7C
16636:  MOVFF  02,A7B
1663A:  MOVFF  01,A7A
1663E:  MOVFF  00,A79
16642:  CALL   53FC
16646:  MOVFF  02,363
1664A:  MOVFF  01,362
1664E:  MOVLB  4
.................... 			}
.................... // valor para tensao acima da minima			
.................... 		aux_w2 = aux_w1;
16650:  MOVFF  363,365
16654:  MOVFF  362,364
.................... 		aux_w2 = aux_w2 * 64;
16658:  MOVLB  3
1665A:  RLCF   x64,F
1665C:  RLCF   x65,F
1665E:  RLCF   x64,F
16660:  RLCF   x65,F
16662:  RLCF   x64,F
16664:  RLCF   x65,F
16666:  RLCF   x64,F
16668:  RLCF   x65,F
1666A:  RLCF   x64,F
1666C:  RLCF   x65,F
1666E:  RLCF   x64,F
16670:  RLCF   x65,F
16672:  MOVLW  C0
16674:  ANDWF  x64,F
.................... // valor para tensao abaixo da minima		
.................... 		data1_int = (word)(aux_w1 * ala_ten_a);
16676:  MOVFF  363,A67
1667A:  MOVFF  362,A66
1667E:  MOVLB  A
16680:  CLRF   x69
16682:  MOVFF  4D2,A68
16686:  MOVLB  0
16688:  CALL   473C
1668C:  MOVFF  02,3F0
16690:  MOVFF  01,3EF
.................... 		data1_int = (word)(data1_int/100);
16694:  MOVFF  3F0,A6C
16698:  MOVFF  3EF,A6B
1669C:  MOVLB  A
1669E:  CLRF   x6E
166A0:  MOVLW  64
166A2:  MOVWF  x6D
166A4:  MOVLB  0
166A6:  CALL   4ECC
166AA:  MOVFF  02,3F0
166AE:  MOVFF  01,3EF
.................... 		data1_int++;
166B2:  MOVLB  3
166B4:  INCF   xEF,F
166B6:  BTFSC  FD8.2
166B8:  INCF   xF0,F
.................... 		aux_w1 = (word)(aux_w1 + data1_int);
166BA:  MOVF   xEF,W
166BC:  ADDWF  x62,F
166BE:  MOVF   xF0,W
166C0:  ADDWFC x63,F
.................... 		aux_w1 = (word)(aux_w1 * 64);
166C2:  RLCF   x62,F
166C4:  RLCF   x63,F
166C6:  RLCF   x62,F
166C8:  RLCF   x63,F
166CA:  RLCF   x62,F
166CC:  RLCF   x63,F
166CE:  RLCF   x62,F
166D0:  RLCF   x63,F
166D2:  RLCF   x62,F
166D4:  RLCF   x63,F
166D6:  RLCF   x62,F
166D8:  RLCF   x63,F
166DA:  MOVLW  C0
166DC:  ANDWF  x62,F
.................... 		#if (monofasico == true)
.................... 			if (tensao_r > aux_w1)
.................... 				{
.................... 				if (ten_a_r == 0)
.................... 					{
.................... 					 ten_a_r = 1;
.................... 					 tem_ocor = 1;
.................... 					tem_alarme = 0;
.................... 					}
.................... 				}
.................... 			if (tensao_r < aux_w2)
.................... 				{
.................... 				 ten_a_r = 0;
.................... 				}
.................... 		#else
.................... 			if (tensao_r > aux_w1)
166DE:  MOVF   x63,W
166E0:  MOVLB  2
166E2:  SUBWF  x51,W
166E4:  BNC   16702
166E6:  BNZ   166F8
166E8:  MOVF   x50,W
166EA:  MOVLB  3
166EC:  SUBWF  x62,W
166EE:  BTFSS  FD8.0
166F0:  BRA    166F6
166F2:  MOVLB  2
166F4:  BRA    16702
166F6:  MOVLB  2
.................... 				{
.................... 				if (ten_a_r == 0)
166F8:  BTFSC  23.1
166FA:  BRA    16702
.................... 					{
.................... 					 ten_a_r = 1;
166FC:  BSF    23.1
.................... 					 tem_ocor = 1;
166FE:  BSF    22.3
.................... 					tem_alarme = 0;
16700:  BCF    22.4
.................... 					
.................... 					}
.................... 				}
.................... 			if (tensao_r < aux_w2)
16702:  MOVF   x51,W
16704:  MOVLB  3
16706:  SUBWF  x65,W
16708:  BNC   1671E
1670A:  BNZ   1671C
1670C:  MOVF   x64,W
1670E:  MOVLB  2
16710:  SUBWF  x50,W
16712:  BTFSS  FD8.0
16714:  BRA    1671A
16716:  MOVLB  3
16718:  BRA    1671E
1671A:  MOVLB  3
.................... 				{
.................... 				 ten_a_r = 0;
1671C:  BCF    23.1
.................... 				}
.................... 			if (tensao_s > aux_w1)
1671E:  MOVF   x63,W
16720:  MOVLB  2
16722:  SUBWF  xD5,W
16724:  BNC   16742
16726:  BNZ   16738
16728:  MOVF   xD4,W
1672A:  MOVLB  3
1672C:  SUBWF  x62,W
1672E:  BTFSS  FD8.0
16730:  BRA    16736
16732:  MOVLB  2
16734:  BRA    16742
16736:  MOVLB  2
.................... 				{
.................... 				if (ten_a_s == 0)
16738:  BTFSC  27.5
1673A:  BRA    16742
.................... 					{
.................... 					 ten_a_s = 1;
1673C:  BSF    27.5
.................... 					 tem_ocor = 1;
1673E:  BSF    22.3
.................... 					tem_alarme = 0;
16740:  BCF    22.4
.................... 					}
.................... 				}
.................... 			if (tensao_s < aux_w2)
16742:  MOVF   xD5,W
16744:  MOVLB  3
16746:  SUBWF  x65,W
16748:  BNC   1675E
1674A:  BNZ   1675C
1674C:  MOVF   x64,W
1674E:  MOVLB  2
16750:  SUBWF  xD4,W
16752:  BTFSS  FD8.0
16754:  BRA    1675A
16756:  MOVLB  3
16758:  BRA    1675E
1675A:  MOVLB  3
.................... 				{
.................... 				 ten_a_s = 0;
1675C:  BCF    27.5
.................... 				}
.................... 			if (tensao_t > aux_w1)
1675E:  MOVF   x63,W
16760:  SUBWF  x2C,W
16762:  BNC   16776
16764:  BNZ   1676C
16766:  MOVF   x2B,W
16768:  SUBWF  x62,W
1676A:  BC    16776
.................... 				{
.................... 				if (ten_a_t == 0)
1676C:  BTFSC  27.6
1676E:  BRA    16776
.................... 					{
.................... 					 ten_a_t = 1;
16770:  BSF    27.6
.................... 					 tem_ocor = 1;
16772:  BSF    22.3
.................... 					tem_alarme = 0;
16774:  BCF    22.4
.................... 					}
.................... 				}
.................... 			if (tensao_t < aux_w2)
16776:  MOVF   x2C,W
16778:  SUBWF  x65,W
1677A:  BNC   16786
1677C:  BNZ   16784
1677E:  MOVF   x64,W
16780:  SUBWF  x2B,W
16782:  BC    16786
.................... 				{
.................... 				 ten_a_t = 0;
16784:  BCF    27.6
.................... 				}
.................... 		#endif
.................... 
.................... 		#if (com_regs == 1)
.................... 			if (tem_ocor == 1)
16786:  BTFSS  22.3
16788:  BRA    167DE
.................... 				{
.................... 				tem_ocor = 0;
1678A:  BCF    22.3
.................... 				#if (monofasico == true)
.................... 			 		if (ten_a_r == 1)
.................... 				 		{
.................... 						 grava_ocorrencias(reg_tensao_r_alta);
.................... 						 }
.................... 				#else
.................... 					if ((ten_a_r == 1) && (ten_a_s == 1) && (ten_a_t == 1))
1678C:  BTFSS  23.1
1678E:  BRA    167A8
16790:  BTFSS  27.5
16792:  BRA    167A8
16794:  BTFSS  27.6
16796:  BRA    167A8
.................... 						{
.................... 				 		grava_ocorrencias(reg_tensao_alta);
16798:  MOVLW  26
1679A:  MOVLB  A
1679C:  MOVWF  x58
1679E:  MOVLB  0
167A0:  CALL   5828
.................... 						}
167A4:  BRA    167DC
167A6:  MOVLB  3
.................... 					else
.................... 						{
.................... 				 		if (ten_a_r == 1)
167A8:  BTFSS  23.1
167AA:  BRA    167BA
.................... 					 		{
.................... 							 grava_ocorrencias(reg_tensao_r_alta);
167AC:  MOVLW  02
167AE:  MOVLB  A
167B0:  MOVWF  x58
167B2:  MOVLB  0
167B4:  CALL   5828
167B8:  MOVLB  3
.................... 							 }
.................... 					 	if (ten_a_s == 1)
167BA:  BTFSS  27.5
167BC:  BRA    167CC
.................... 					 		{
.................... 							 grava_ocorrencias(reg_tensao_s_alta);
167BE:  MOVLW  03
167C0:  MOVLB  A
167C2:  MOVWF  x58
167C4:  MOVLB  0
167C6:  CALL   5828
167CA:  MOVLB  3
.................... 							 }
.................... 					 	if (ten_a_t == 1)
167CC:  BTFSS  27.6
167CE:  BRA    167DE
.................... 							 {
.................... 							 grava_ocorrencias(reg_tensao_t_alta);
167D0:  MOVLW  04
167D2:  MOVLB  A
167D4:  MOVWF  x58
167D6:  MOVLB  0
167D8:  CALL   5828
167DC:  MOVLB  3
.................... 							 }
.................... 						}
.................... 				#endif
.................... 				}
.................... 		#endif
.................... 		if (modo_funca == 2)
167DE:  MOVLB  4
167E0:  MOVF   xA7,W
167E2:  SUBLW  02
167E4:  BNZ   167FE
.................... 			{
.................... 			tensao_r = tensao_r_old;
167E6:  MOVFF  A4B,251
167EA:  MOVFF  A4A,250
.................... 			#if (monofasico == false)
.................... 				tensao_s = tensao_s_old;
167EE:  MOVFF  A4D,2D5
167F2:  MOVFF  A4C,2D4
.................... 				tensao_t = tensao_t_old;
167F6:  MOVFF  A4F,32C
167FA:  MOVFF  A4E,32B
.................... 			#endif
.................... 			}
.................... 
.................... 		}
167FE:  BRA    16806
.................... 	else
.................... 		{
.................... 		 ten_a_r = 0;
16800:  BCF    23.1
.................... 		#if (monofasico == false)
.................... 			 ten_a_s = 0;
16802:  BCF    27.5
.................... 			 ten_a_t = 0;
16804:  BCF    27.6
.................... 		#endif
.................... 		}
16806:  MOVLB  0
16808:  GOTO   16F9A (RETURN)
.................... 	
.................... }
.................... 
.................... void trata_ala_ten_b(void)
.................... {
.................... 	word tensao_r_old;
.................... 	#if (monofasico == false)
.................... 		word tensao_s_old;
.................... 		word tensao_t_old;
.................... 	#endif
.................... 	if (ala_ten_b != 0)
1680C:  MOVLB  4
1680E:  MOVF   xD3,F
16810:  BTFSC  FD8.2
16812:  BRA    16ABC
.................... 		{
.................... 		if (modo_funca == 2)
16814:  MOVF   xA7,W
16816:  SUBLW  02
16818:  BNZ   168BE
.................... 			{
.................... 			tensao_r_old = tensao_r;
1681A:  MOVFF  251,A4B
1681E:  MOVFF  250,A4A
.................... 			tensao_r = (word)(soma_media_tensao_r / conta_media_tensao_r);
16822:  BCF    FD8.1
16824:  MOVFF  493,A73
16828:  MOVFF  492,A72
1682C:  MOVFF  491,A71
16830:  MOVFF  490,A70
16834:  MOVLB  A
16836:  CLRF   x77
16838:  CLRF   x76
1683A:  MOVFF  495,A75
1683E:  MOVFF  494,A74
16842:  MOVLB  0
16844:  CALL   6858
16848:  MOVFF  01,251
1684C:  MOVFF  00,250
.................... 			#if (monofasico == false)
.................... 				tensao_s_old = tensao_s;
16850:  MOVFF  2D5,A4D
16854:  MOVFF  2D4,A4C
.................... 				tensao_s = (word)(soma_media_tensao_s / conta_media_tensao_s);
16858:  BCF    FD8.1
1685A:  MOVFF  49D,A73
1685E:  MOVFF  49C,A72
16862:  MOVFF  49B,A71
16866:  MOVFF  49A,A70
1686A:  MOVLB  A
1686C:  CLRF   x77
1686E:  CLRF   x76
16870:  MOVFF  4A3,A75
16874:  MOVFF  4A2,A74
16878:  MOVLB  0
1687A:  CALL   6858
1687E:  MOVFF  01,2D5
16882:  MOVFF  00,2D4
.................... 				tensao_t_old = tensao_t;
16886:  MOVFF  32C,A4F
1688A:  MOVFF  32B,A4E
.................... 				tensao_t = (word)(soma_media_tensao_t / conta_media_tensao_t);
1688E:  BCF    FD8.1
16890:  MOVFF  4A1,A73
16894:  MOVFF  4A0,A72
16898:  MOVFF  49F,A71
1689C:  MOVFF  49E,A70
168A0:  MOVLB  A
168A2:  CLRF   x77
168A4:  CLRF   x76
168A6:  MOVFF  4A5,A75
168AA:  MOVFF  4A4,A74
168AE:  MOVLB  0
168B0:  CALL   6858
168B4:  MOVFF  01,32C
168B8:  MOVFF  00,32B
168BC:  MOVLB  4
.................... 			#endif
.................... 			}
.................... 
.................... 		if ((tipo_ligacao == 0) || (tipo_ligacao == 2))
168BE:  MOVF   xC7,F
168C0:  BZ    168C8
168C2:  MOVF   xC7,W
168C4:  SUBLW  02
168C6:  BNZ   168D2
.................... 			{
.................... 			aux_w1 = ten_nomi;
168C8:  MOVFF  4BE,363
168CC:  MOVFF  4BD,362
.................... 			}
168D0:  BRA    16926
.................... 		else
.................... 			{
.................... 			aux_w1 = (int16)(ten_nomi * 1.7320508);
168D2:  MOVFF  4BE,A7E
168D6:  MOVFF  4BD,A7D
168DA:  MOVLB  0
168DC:  CALL   2924
168E0:  MOVFF  03,A80
168E4:  MOVFF  02,A7F
168E8:  MOVFF  01,A7E
168EC:  MOVFF  00,A7D
168F0:  MOVLW  D7
168F2:  MOVLB  A
168F4:  MOVWF  x84
168F6:  MOVLW  B3
168F8:  MOVWF  x83
168FA:  MOVLW  5D
168FC:  MOVWF  x82
168FE:  MOVLW  7F
16900:  MOVWF  x81
16902:  MOVLB  0
16904:  CALL   5306
16908:  MOVFF  03,A7C
1690C:  MOVFF  02,A7B
16910:  MOVFF  01,A7A
16914:  MOVFF  00,A79
16918:  CALL   53FC
1691C:  MOVFF  02,363
16920:  MOVFF  01,362
16924:  MOVLB  4
.................... 			}
.................... // valor para tensao acima da minima			
.................... 		aux_w2 = aux_w1;
16926:  MOVFF  363,365
1692A:  MOVFF  362,364
.................... 		aux_w2 = aux_w2 * 64;
1692E:  MOVLB  3
16930:  RLCF   x64,F
16932:  RLCF   x65,F
16934:  RLCF   x64,F
16936:  RLCF   x65,F
16938:  RLCF   x64,F
1693A:  RLCF   x65,F
1693C:  RLCF   x64,F
1693E:  RLCF   x65,F
16940:  RLCF   x64,F
16942:  RLCF   x65,F
16944:  RLCF   x64,F
16946:  RLCF   x65,F
16948:  MOVLW  C0
1694A:  ANDWF  x64,F
.................... 
.................... // valor para tensao abaixo da minima		
.................... 		data1_int = (word)(aux_w1 * ala_ten_b);
1694C:  MOVFF  363,A67
16950:  MOVFF  362,A66
16954:  MOVLB  A
16956:  CLRF   x69
16958:  MOVFF  4D3,A68
1695C:  MOVLB  0
1695E:  CALL   473C
16962:  MOVFF  02,3F0
16966:  MOVFF  01,3EF
.................... 		data1_int = (word)(data1_int/100);
1696A:  MOVFF  3F0,A6C
1696E:  MOVFF  3EF,A6B
16972:  MOVLB  A
16974:  CLRF   x6E
16976:  MOVLW  64
16978:  MOVWF  x6D
1697A:  MOVLB  0
1697C:  CALL   4ECC
16980:  MOVFF  02,3F0
16984:  MOVFF  01,3EF
.................... 		data1_int++;
16988:  MOVLB  3
1698A:  INCF   xEF,F
1698C:  BTFSC  FD8.2
1698E:  INCF   xF0,F
.................... 		aux_w1 = (int16)(aux_w1 - data1_int);
16990:  MOVF   xEF,W
16992:  SUBWF  x62,F
16994:  MOVF   xF0,W
16996:  SUBWFB x63,F
.................... 		aux_w1 = (int16)(aux_w1 * 64);
16998:  RLCF   x62,F
1699A:  RLCF   x63,F
1699C:  RLCF   x62,F
1699E:  RLCF   x63,F
169A0:  RLCF   x62,F
169A2:  RLCF   x63,F
169A4:  RLCF   x62,F
169A6:  RLCF   x63,F
169A8:  RLCF   x62,F
169AA:  RLCF   x63,F
169AC:  RLCF   x62,F
169AE:  RLCF   x63,F
169B0:  MOVLW  C0
169B2:  ANDWF  x62,F
.................... 		#if (monofasico == true)
.................... 			if (tensao_r < aux_w1)
.................... 				{
.................... 				if (ten_b_r == 0)
.................... 					{
.................... 					 ten_b_r = 1;
.................... 					 tem_ocor = 1;
.................... 					tem_alarme = 0;
.................... 					}
.................... 				}
.................... 			if (tensao_r > aux_w2)
.................... 				{
.................... 				 ten_b_r = 0;
.................... 				}
.................... 		#else
.................... 			if (tensao_r < aux_w1)
169B4:  MOVLB  2
169B6:  MOVF   x51,W
169B8:  MOVLB  3
169BA:  SUBWF  x63,W
169BC:  BNC   169DA
169BE:  BNZ   169D0
169C0:  MOVF   x62,W
169C2:  MOVLB  2
169C4:  SUBWF  x50,W
169C6:  BTFSS  FD8.0
169C8:  BRA    169CE
169CA:  MOVLB  3
169CC:  BRA    169DA
169CE:  MOVLB  3
.................... 				{
.................... 				if (ten_b_r == 0)
169D0:  BTFSC  23.2
169D2:  BRA    169DA
.................... 					{
.................... 					 ten_b_r = 1;
169D4:  BSF    23.2
.................... 					 tem_ocor = 1;
169D6:  BSF    22.3
.................... 					tem_alarme = 0;
169D8:  BCF    22.4
.................... 					}
.................... 				}
.................... 			if (tensao_r > aux_w2)
169DA:  MOVF   x65,W
169DC:  MOVLB  2
169DE:  SUBWF  x51,W
169E0:  BNC   169F6
169E2:  BNZ   169F4
169E4:  MOVF   x50,W
169E6:  MOVLB  3
169E8:  SUBWF  x64,W
169EA:  BTFSS  FD8.0
169EC:  BRA    169F2
169EE:  MOVLB  2
169F0:  BRA    169F6
169F2:  MOVLB  2
.................... 				{
.................... 				 ten_b_r = 0;
169F4:  BCF    23.2
.................... 				}
.................... 	//
.................... 			if (tensao_s < aux_w1)
169F6:  MOVF   xD5,W
169F8:  MOVLB  3
169FA:  SUBWF  x63,W
169FC:  BNC   16A1A
169FE:  BNZ   16A10
16A00:  MOVF   x62,W
16A02:  MOVLB  2
16A04:  SUBWF  xD4,W
16A06:  BTFSS  FD8.0
16A08:  BRA    16A0E
16A0A:  MOVLB  3
16A0C:  BRA    16A1A
16A0E:  MOVLB  3
.................... 				{
.................... 				if (ten_b_s == 0)
16A10:  BTFSC  27.7
16A12:  BRA    16A1A
.................... 					{
.................... 					 ten_b_s = 1;
16A14:  BSF    27.7
.................... 					 tem_ocor = 1;
16A16:  BSF    22.3
.................... 					tem_alarme = 0;
16A18:  BCF    22.4
.................... 					}
.................... 				}
.................... 			if (tensao_s > aux_w2)
16A1A:  MOVF   x65,W
16A1C:  MOVLB  2
16A1E:  SUBWF  xD5,W
16A20:  BNC   16A36
16A22:  BNZ   16A34
16A24:  MOVF   xD4,W
16A26:  MOVLB  3
16A28:  SUBWF  x64,W
16A2A:  BTFSS  FD8.0
16A2C:  BRA    16A32
16A2E:  MOVLB  2
16A30:  BRA    16A36
16A32:  MOVLB  2
.................... 				{
.................... 				 ten_b_s = 0;
16A34:  BCF    27.7
.................... 				}
.................... 	//
.................... 			if (tensao_t < aux_w1)
16A36:  MOVLB  3
16A38:  MOVF   x2C,W
16A3A:  SUBWF  x63,W
16A3C:  BNC   16A50
16A3E:  BNZ   16A46
16A40:  MOVF   x62,W
16A42:  SUBWF  x2B,W
16A44:  BC    16A50
.................... 				{
.................... 				if (ten_b_t == 0)
16A46:  BTFSC  28.0
16A48:  BRA    16A50
.................... 					{
.................... 					 ten_b_t = 1;
16A4A:  BSF    28.0
.................... 					 tem_ocor = 1;
16A4C:  BSF    22.3
.................... 					tem_alarme = 0;
16A4E:  BCF    22.4
.................... 					}
.................... 				}
.................... 			if (tensao_t > aux_w2)
16A50:  MOVF   x65,W
16A52:  SUBWF  x2C,W
16A54:  BNC   16A60
16A56:  BNZ   16A5E
16A58:  MOVF   x2B,W
16A5A:  SUBWF  x64,W
16A5C:  BC    16A60
.................... 				{
.................... 				 ten_b_t = 0;
16A5E:  BCF    28.0
.................... 				}
.................... 		#endif
.................... //
.................... 		#if (com_regs == 1)
.................... 			if (tem_ocor == 1)
16A60:  BTFSS  22.3
16A62:  BRA    16AB8
.................... 				{
.................... 				tem_ocor = 0;
16A64:  BCF    22.3
.................... 				#if (monofasico == true)
.................... 				 	if (ten_b_r == 1)
.................... 				 		{
.................... 						 grava_ocorrencias(reg_tensao_r_baixa);
.................... 						 }
.................... 				#else
.................... 					if ((ten_b_r == 1) && (ten_b_s == 1) && (ten_b_t == 1))
16A66:  BTFSS  23.2
16A68:  BRA    16A82
16A6A:  BTFSS  27.7
16A6C:  BRA    16A82
16A6E:  BTFSS  28.0
16A70:  BRA    16A82
.................... 					 	{
.................... 					 	grava_ocorrencias(reg_tensao_baixa);
16A72:  MOVLW  27
16A74:  MOVLB  A
16A76:  MOVWF  x58
16A78:  MOVLB  0
16A7A:  CALL   5828
.................... 		   				}
16A7E:  BRA    16AB6
16A80:  MOVLB  3
.................... 			   		else
.................... 						{
.................... 					 	if (ten_b_r == 1)
16A82:  BTFSS  23.2
16A84:  BRA    16A94
.................... 					 		{
.................... 							 grava_ocorrencias(reg_tensao_r_baixa);
16A86:  MOVLW  05
16A88:  MOVLB  A
16A8A:  MOVWF  x58
16A8C:  MOVLB  0
16A8E:  CALL   5828
16A92:  MOVLB  3
.................... 							 }
.................... 					 	if (ten_b_s == 1)
16A94:  BTFSS  27.7
16A96:  BRA    16AA6
.................... 					 		{
.................... 							 grava_ocorrencias(reg_tensao_s_baixa);
16A98:  MOVLW  06
16A9A:  MOVLB  A
16A9C:  MOVWF  x58
16A9E:  MOVLB  0
16AA0:  CALL   5828
16AA4:  MOVLB  3
.................... 							 }
.................... 					 	if (ten_b_t == 1)
16AA6:  BTFSS  28.0
16AA8:  BRA    16AB8
.................... 					 		{
.................... 							 grava_ocorrencias(reg_tensao_t_baixa);
16AAA:  MOVLW  07
16AAC:  MOVLB  A
16AAE:  MOVWF  x58
16AB0:  MOVLB  0
16AB2:  CALL   5828
16AB6:  MOVLB  3
.................... 							 }
.................... 						}
.................... 				#endif
.................... 				}		
.................... 		#endif
.................... 		}
16AB8:  BRA    16AC4
16ABA:  MOVLB  4
.................... 	else
.................... 		{
.................... 		 ten_b_r = 0;
16ABC:  BCF    23.2
.................... 		#if (monofasico == false)
.................... 			 ten_b_s = 0;
16ABE:  BCF    27.7
.................... 			 ten_b_t = 0;
16AC0:  BCF    28.0
16AC2:  MOVLB  3
.................... 		#endif
.................... 		}
16AC4:  MOVLB  0
16AC6:  GOTO   16F9C (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... 
.................... void trata_ala_sc(void)
.................... {			
.................... 	#if (st8500c == true)
.................... 		cor_a_r = 0;
16ACA:  BCF    23.3
.................... 		#if (monofasico == false)
.................... 			cor_a_s = 0;
16ACC:  BCF    28.1
.................... 			cor_a_t = 0;
16ACE:  BCF    28.2
.................... 		#endif
.................... 	#else
16AD0:  GOTO   16F9E (RETURN)
.................... 		if(ala_sc == 0)
.................... 			{
.................... 			cor_a_r = 0;
.................... 			#if (monofasico == false)
.................... 				cor_a_s = 0;
.................... 				cor_a_t = 0;
.................... 			#endif
.................... 			}
.................... 		else 		/* SE PROGRAMACAO DIFERENTE DE ZERO COM CRITICA */
.................... 			{
.................... 			if (corrente_r < 8)
.................... 				{
.................... 				cor_a_r = 0;
.................... 				cor_b_r = 0;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				if (corrente_s < 8)
.................... 					{
.................... 					cor_a_s = 0;
.................... 					cor_b_s = 0;
.................... 					}
.................... 				if (corrente_t < 8)
.................... 					{
.................... 					cor_a_t = 0;
.................... 				 	cor_b_t = 0;
.................... 					}
.................... 			#endif
.................... 			#if (monofasico == true)
.................... 				if (corrente_r < 8)
.................... 					{
.................... 					return;
.................... 					}
.................... 			#else
.................... 				if ((corrente_r < 8) && (corrente_s < 8) && (corrente_t < 8))
.................... 					{
.................... 					return;
.................... 					}
.................... 			#endif
.................... 			#if (tc_fixo == true)
.................... 				aux_l1 = valor_tc_fixo;
.................... 			#else
.................... 				aux_l1 = valor_tc;
.................... 			#endif
.................... 			aux_w1 = (int16)(((aux_l1 * ala_sc) / 100));
.................... 			aux_w1 = aux_w1 * 8; 
.................... 			aux_w2 = aux_w1 - (aux_w1 / 20);
.................... 			if (corrente_r > aux_w1)
.................... 				{
.................... 				if (cor_a_r == 0)
.................... 					{
.................... 					 cor_a_r = 1;
.................... 					 cor_b_r = 0;
.................... 		             tem_ocor = 1;
.................... 					 tem_alarme = 0;
.................... 					}
.................... 				}
.................... 			else if (corrente_r < aux_w2)
.................... 				{
.................... 				 cor_a_r = 0;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				if (corrente_s > aux_w1)
.................... 					{
.................... 					if (cor_a_s == 0)
.................... 						{
.................... 						 cor_a_s = 1;
.................... 						 cor_b_s = 0;
.................... 						tem_ocor = 1;
.................... 						tem_alarme = 0;
.................... 						}
.................... 					}
.................... 				else if (corrente_s < aux_w2)
.................... 					{
.................... 					 cor_a_s = 0;
.................... 					}
.................... 				if (corrente_t > aux_w1)
.................... 					{
.................... 					if (cor_a_t == 0)
.................... 						{
.................... 						 cor_a_t = 1;
.................... 						 cor_b_t = 0;
.................... 						tem_ocor = 1;
.................... 						tem_alarme = 0;
.................... 						}
.................... 					}
.................... 				else if (corrente_t < aux_w2)
.................... 					{
.................... 					 cor_a_t = 0;
.................... 					}
.................... 			#endif
.................... 			#if (com_regs == 1)
.................... 				if (tem_ocor == 1)
.................... 					{
.................... 					tem_ocor = 0;
.................... 					#if (monofasico == true)
.................... 					 	if (cor_a_r == 1)
.................... 					 		{
.................... 							 grava_ocorrencias(reg_cor_r_alta);
.................... 							 }
.................... 					#else
.................... 						if ((cor_a_r == 1) && (cor_a_s == 1) && (cor_a_t == 1))
.................... 							{
.................... 						 	grava_ocorrencias(reg_corrente_alta);
.................... 						 	}
.................... 						else
.................... 							{
.................... 						 	if (cor_a_r == 1)
.................... 						 		{
.................... 								 grava_ocorrencias(reg_cor_r_alta);
.................... 								 }
.................... 						 	if (cor_a_s == 1)
.................... 						 		{
.................... 								 grava_ocorrencias(reg_cor_s_alta);
.................... 								 }
.................... 						 	if (cor_a_t == 1)
.................... 						 		{
.................... 								 grava_ocorrencias(reg_cor_t_alta);
.................... 								 }
.................... 							}
.................... 					#endif
.................... 					}
.................... 			#endif
.................... 			}
.................... 	#endif
.................... }
.................... 
.................... #if (com_cht == 1)
.................... 	void trata_ala_cht(void)
.................... 	{
.................... 	if (modo_funca == 2)
.................... 		{
.................... 		chtt_a = 0;
.................... 		chtc_a = 0;
.................... 		return;
.................... 		}
.................... 		if (ala_chtt == 0)
.................... 			{
.................... 			chtt_a = 0;
.................... 			}
.................... 		else
.................... 			{
.................... 		/* Testa conteudo harmonico de tensao */				
.................... 			#if (monofasico == true)
.................... 				data1_int = (int16)(CHT_tr[0]);
.................... 			#else
.................... 				data1_int = (int16)((CHT_tr[0] + CHT_ts[0]  + CHT_tt[0]) / 3);
.................... 			#endif
.................... 			aux_w1 = ala_chtt;
.................... 			aux_w1 = aux_w1 << 6;
.................... 			if ( data1_int > aux_w1)
.................... 				{
.................... 				if (chtt_a == 0)
.................... 					{
.................... 					#if (com_regs == 1)
.................... 						grava_ocorrencias(reg_chtt_alto);
.................... 					#endif
.................... 					tem_alarme = 0;
.................... 					chtt_a = 1;
.................... 					}
.................... 				}
.................... 			else
.................... 				{
.................... 				chtt_a = 0;
.................... 				}
.................... 			}
.................... 		if (ala_chtc == 0)
.................... 			{
.................... 			chtc_a = 0;
.................... 			}
.................... 		else
.................... 			{
.................... 		/* Testa conteudo harmonico de corrente */				
.................... 			#if (monofasico == true)
.................... 				data1_int = (int16)(CHT_cr[0]);
.................... 			#else
.................... 				data1_int = (int16)((CHT_cr[0] + CHT_cs[0]  + CHT_ct[0]) / 3);
.................... 			#endif
.................... 			aux_w1 = ala_chtc;
.................... 			aux_w1 = aux_w1 << 6;
.................... 			if ( data1_int > aux_w1)
.................... 				{
.................... 				if (chtc_a == 0)
.................... 					{
.................... 					#if (com_regs == 1)
.................... 						grava_ocorrencias(reg_chtc_alto);
.................... 					#endif				
.................... 					tem_alarme = 0;
.................... 					chtc_a = 1;
.................... 					}
.................... 				}
.................... 			else
.................... 				{
.................... 				chtc_a = 0;
.................... 				}
.................... 			}
.................... 	}
.................... #endif
.................... 
.................... void trata_ala_fp_ind(void)
.................... {			
.................... 	#if (controlador == true)
.................... 		#if ((ST8100C == true) || (ST8200C == true) || (ST8300C == true))
.................... 			for (aux_b1 = 0; aux_b1 < (nro_bancos_capacitor -1); aux_b1++)
.................... 				{
.................... 				if (banco_acionado[aux_b1] == false)
.................... 					{
.................... 					fp_ind = 0;
.................... 					falta_capacitor = false;
.................... 					return;
.................... 					}
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 	#if (monofasico == true)
.................... 		if (fator_pot_r < 0 )
.................... 			{
.................... 			fp_cap = 0;
.................... 			if (ala_fp_ind < 100)
.................... 				{
.................... 				aux_l1 = fator_pot_r * (-1);
.................... 				data1_int = (aux_l1 * 100)/ 1024;
.................... 				if (data1_int < ala_fp_ind)
.................... 					{
.................... 					if (fp_ind == 0)
.................... 						{
.................... 						fp_ind = 1;
.................... 						#if (com_regs == 1)
.................... 							grava_ocorrencias(reg_fp_ind);
.................... 						#endif
.................... 						tem_alarme = 0;
.................... 						}
.................... 					}
.................... 				else
.................... 					{
.................... 					fp_ind = 0;
.................... 					}
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			fp_ind = 0;
.................... 			}
.................... 	#else
.................... 		if (fator_pot < 0 )
*
1638A:  MOVLB  2
1638C:  BTFSS  x93.7
1638E:  BRA    16454
.................... 			{
.................... 			fp_cap = 0;
16390:  BCF    23.0
.................... 			if (ala_fp_ind < 100)
16392:  MOVLB  4
16394:  MOVF   xD0,W
16396:  SUBLW  63
16398:  BNC   16450
.................... 				{
.................... 				aux_l1 = fator_pot * (-1);
1639A:  MOVFF  293,A6F
1639E:  MOVFF  292,A6E
163A2:  MOVLB  A
163A4:  SETF   x71
163A6:  SETF   x70
163A8:  MOVLB  0
163AA:  CALL   FA44
163AE:  MOVFF  02,03
163B2:  MOVFF  01,00
163B6:  MOVFF  02,01
163BA:  CLRF   02
163BC:  CLRF   03
163BE:  BTFSS  01.7
163C0:  BRA    163C6
163C2:  DECF   02,F
163C4:  DECF   03,F
163C6:  MOVFF  03,373
163CA:  MOVFF  02,372
163CE:  MOVFF  01,371
163D2:  MOVFF  00,370
.................... 				data1_int = (aux_l1 * 100)/ 1024;
163D6:  MOVFF  373,A75
163DA:  MOVFF  372,A74
163DE:  MOVFF  371,A73
163E2:  MOVFF  370,A72
163E6:  MOVLB  A
163E8:  CLRF   x79
163EA:  CLRF   x78
163EC:  CLRF   x77
163EE:  MOVLW  64
163F0:  MOVWF  x76
163F2:  MOVLB  0
163F4:  CALL   67FC
163F8:  MOVFF  03,A4D
163FC:  MOVFF  02,A4C
16400:  MOVFF  01,A4B
16404:  MOVFF  00,A4A
16408:  MOVLB  A
1640A:  RRCF   x4D,W
1640C:  MOVWF  02
1640E:  RRCF   x4C,W
16410:  MOVWF  01
16412:  RRCF   x4B,W
16414:  MOVWF  00
16416:  RRCF   02,F
16418:  RRCF   01,F
1641A:  RRCF   00,F
1641C:  MOVFF  00,3EF
16420:  MOVLB  3
16422:  MOVFF  01,3F0
.................... 				if (data1_int < ala_fp_ind)
16426:  MOVF   xF0,F
16428:  BNZ   1644C
1642A:  MOVLB  4
1642C:  MOVF   xD0,W
1642E:  MOVLB  3
16430:  SUBWF  xEF,W
16432:  BC    1644C
.................... 					{
.................... 					if (fp_ind == 0)
16434:  BTFSC  22.7
16436:  BRA    1644A
.................... 						{
.................... 						fp_ind = 1;
16438:  BSF    22.7
.................... 						#if (com_regs == 1)
.................... 							grava_ocorrencias(reg_fp_ind);
1643A:  MOVLW  0E
1643C:  MOVLB  A
1643E:  MOVWF  x58
16440:  MOVLB  0
16442:  CALL   5828
.................... 						#endif
.................... 						tem_alarme = 0;
16446:  BCF    22.4
16448:  MOVLB  3
.................... 						}
.................... 					}
1644A:  BRA    1644E
.................... 				else
.................... 					{
.................... 					fp_ind = 0;
1644C:  BCF    22.7
1644E:  MOVLB  4
.................... 					}
.................... 				}
.................... 			}
16450:  BRA    16458
16452:  MOVLB  2
.................... 		else
.................... 			{
.................... 			fp_ind = 0;
16454:  BCF    22.7
16456:  MOVLB  4
.................... 			}
.................... 	#endif
16458:  MOVLB  0
1645A:  GOTO   16F92 (RETURN)
.................... }
.................... 
.................... #if (controlador == true)
.................... 	#if ((ST8100C == true) || (ST8200C == true) || (ST8300C == true))
.................... 		void trata_falta_capacitor(void)
.................... 		{			
.................... 			for (aux_b1 = 0; aux_b1 < (nro_bancos_capacitor -1); aux_b1++)
.................... 				{
.................... 				if (banco_acionado[aux_b1] == false)
.................... 					{
.................... 					falta_capacitor = false;
.................... 					return;
.................... 					}
.................... 				}
.................... 			#if (monofasico == true)
.................... 				if (fator_pot_r < 0 )
.................... 					{
.................... 					aux_l1 = fator_pot_r * (-1);
.................... 					data1_int = (aux_l1 * 100)/ 1024;
.................... 					if (data1_int < set_point)
.................... 						{
.................... 						if (falta_capacitor == false)
.................... 							{
.................... 							falta_capacitor = true;
.................... 							#if (com_regs == 1)
.................... 								grava_ocorrencias(reg_faltou_cap);
.................... 							#endif
.................... 							tem_alarme = 0;
.................... 							}
.................... 						}
.................... 					else
.................... 						{
.................... 						falta_capacitor = false;
.................... 						}
.................... 					}
.................... 			#else
.................... 				if (fator_pot < 0 )
.................... 					{
.................... 					aux_l1 = fator_pot * (-1);
.................... 					data1_int = (aux_l1 * 100)/ 1024;
.................... 					if (data1_int < set_point)
.................... 						{
.................... 						if (falta_capacitor == false)
.................... 							{
.................... 							falta_capacitor = true;
.................... 							#if (com_regs == 1)
.................... 								grava_ocorrencias(reg_faltou_cap);
.................... 							#endif
.................... 							tem_alarme = 0;
.................... 							}
.................... 						}
.................... 					else
.................... 						{
.................... 						falta_capacitor = false;
.................... 						}
.................... 					}
.................... 			#endif
.................... 		}
.................... 	#endif
.................... #endif
.................... 
.................... 
.................... void trata_ala_fp_cap(void)
.................... {			
.................... 	#if (controlador == true)
.................... 		#if ((ST8100C == true) || (ST8200C == true) || (ST8300C == true))
.................... 			for (aux_b1 = 0; aux_b1 < (nro_bancos_capacitor -1); aux_b1++)
.................... 				{
.................... 				if (banco_acionado[aux_b1] == 1)
.................... 					{
.................... 					fp_cap = 0;
.................... 					return;
.................... 					}
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 		
.................... 	#if (monofasico == true)
.................... 		if ((fator_pot_r > 0 ) && (fator_pot_r < 1025))
.................... 			{
.................... 			fp_ind = 0;
.................... 			if (ala_fp_cap < 100)
.................... 				{
.................... 				aux_l1 = fator_pot_r;
.................... 				data1_int = (aux_l1 * 100)/ 1024;
.................... 				if (data1_int < ala_fp_cap)
.................... 					{
.................... 					if (fp_cap == 0)
.................... 						{
.................... 						fp_cap = 1;
.................... 						#if (com_regs == 1)
.................... 	   						grava_ocorrencias(reg_fp_cap);
.................... 						#endif
.................... 						tem_alarme = 0;
.................... 						}
.................... 					}
.................... 				else
.................... 					{
.................... 					fp_cap = 0;
.................... 					}
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			fp_cap = 0;
.................... 			}
.................... 	#else
.................... 		if ((fator_pot > 0 ) && (fator_pot < 1025))
1645E:  MOVLB  2
16460:  BTFSC  x93.7
16462:  BRA    1652C
16464:  MOVF   x93,F
16466:  BNZ   1646E
16468:  MOVF   x92,W
1646A:  SUBLW  00
1646C:  BC    1652C
1646E:  BTFSC  x93.7
16470:  BRA    16480
16472:  MOVF   x93,W
16474:  SUBLW  04
16476:  BNC   1652C
16478:  BNZ   16480
1647A:  MOVF   x92,W
1647C:  SUBLW  00
1647E:  BNC   1652C
.................... 			{
.................... 			fp_ind = 0;
16480:  BCF    22.7
.................... 			if (ala_fp_cap < 100)
16482:  MOVLB  4
16484:  MOVF   xD1,W
16486:  SUBLW  63
16488:  BNC   16528
.................... 				{
.................... 				aux_l1 = fator_pot;
1648A:  MOVFF  292,00
1648E:  MOVFF  293,01
16492:  CLRF   02
16494:  CLRF   03
16496:  BTFSS  01.7
16498:  BRA    1649E
1649A:  DECF   02,F
1649C:  DECF   03,F
1649E:  MOVFF  03,373
164A2:  MOVFF  02,372
164A6:  MOVFF  01,371
164AA:  MOVFF  00,370
.................... 				data1_int = (aux_l1 * 100)/ 1024;
164AE:  MOVFF  373,A75
164B2:  MOVFF  372,A74
164B6:  MOVFF  371,A73
164BA:  MOVFF  370,A72
164BE:  MOVLB  A
164C0:  CLRF   x79
164C2:  CLRF   x78
164C4:  CLRF   x77
164C6:  MOVLW  64
164C8:  MOVWF  x76
164CA:  MOVLB  0
164CC:  CALL   67FC
164D0:  MOVFF  03,A4D
164D4:  MOVFF  02,A4C
164D8:  MOVFF  01,A4B
164DC:  MOVFF  00,A4A
164E0:  MOVLB  A
164E2:  RRCF   x4D,W
164E4:  MOVWF  02
164E6:  RRCF   x4C,W
164E8:  MOVWF  01
164EA:  RRCF   x4B,W
164EC:  MOVWF  00
164EE:  RRCF   02,F
164F0:  RRCF   01,F
164F2:  RRCF   00,F
164F4:  MOVFF  00,3EF
164F8:  MOVLB  3
164FA:  MOVFF  01,3F0
.................... 				if (data1_int < ala_fp_cap)
164FE:  MOVF   xF0,F
16500:  BNZ   16524
16502:  MOVLB  4
16504:  MOVF   xD1,W
16506:  MOVLB  3
16508:  SUBWF  xEF,W
1650A:  BC    16524
.................... 					{
.................... 					if (fp_cap == 0)
1650C:  BTFSC  23.0
1650E:  BRA    16522
.................... 						{
.................... 						fp_cap = 1;
16510:  BSF    23.0
.................... 						#if (com_regs == 1)
.................... 	   						grava_ocorrencias(reg_fp_cap);
16512:  MOVLW  0F
16514:  MOVLB  A
16516:  MOVWF  x58
16518:  MOVLB  0
1651A:  CALL   5828
.................... 						#endif
.................... 						tem_alarme = 0;
1651E:  BCF    22.4
16520:  MOVLB  3
.................... 						}
.................... 					}
16522:  BRA    16526
.................... 				else
.................... 					{
.................... 					fp_cap = 0;
16524:  BCF    23.0
16526:  MOVLB  4
.................... 					}
.................... 				}
.................... 			}
16528:  BRA    16530
1652A:  MOVLB  2
.................... 		else
.................... 			{
.................... 			fp_cap = 0;
1652C:  BCF    23.0
1652E:  MOVLB  4
.................... 			}
.................... 	#endif
16530:  MOVLB  0
16532:  GOTO   16F96 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void trata_falta_fase(void)
.................... {
.................... //	
.................... 	if (ala_ten_b == 0)
*
16D9C:  MOVLB  4
16D9E:  MOVF   xD3,F
16DA0:  BNZ   16DAA
.................... 		{
.................... 		ffase_r = 0;
16DA2:  BCF    23.6
.................... 		#if (monofasico == false)
.................... 			ffase_s = 0;
16DA4:  BCF    28.3
.................... 			ffase_t = 0;
16DA6:  BCF    28.4
.................... 		#endif
.................... 		return;
16DA8:  BRA    16EB6
.................... 		}
.................... 
.................... 	#if (monofasico == true)
.................... 		if (tensao_r < TENSAO_FALTA)
.................... 			{
.................... 			if (ffase_r == 0)
.................... 				{
.................... 				#if (com_regs == 1)
.................... 				 grava_ocorrencias(reg_falta_fases);
.................... 				#endif
.................... 				tem_alarme = 0;
.................... 				ffase_r = 1;
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			if (tensao_r < TENSAO_FALTA)
.................... 				{
.................... 				if (ffase_r == 0)
.................... 					{
.................... 					#if (com_regs == 1)
.................... 					 grava_ocorrencias(reg_falta_fase_r);
.................... 					#endif
.................... 					tem_alarme = 0;
.................... 					ffase_r = 1;
.................... 					}
.................... 				}
.................... 			else if (tensao_r > (TENSAO_FALTA + 256))
.................... 				{
.................... 				ffase_r = 0;
.................... 				}
.................... 			}
.................... 	#else
.................... 		if ((tensao_r < TENSAO_FALTA) && (tensao_s < TENSAO_FALTA) && (tensao_t < TENSAO_FALTA))
16DAA:  MOVLB  2
16DAC:  MOVF   x51,W
16DAE:  SUBLW  0C
16DB0:  BNC   16E0A
16DB2:  BNZ   16DBA
16DB4:  MOVF   x50,W
16DB6:  SUBLW  7F
16DB8:  BNC   16E0A
16DBA:  MOVF   xD5,W
16DBC:  SUBLW  0C
16DBE:  BNC   16E0A
16DC0:  BNZ   16DC8
16DC2:  MOVF   xD4,W
16DC4:  SUBLW  7F
16DC6:  BNC   16E0A
16DC8:  MOVLB  3
16DCA:  MOVF   x2C,W
16DCC:  SUBLW  0C
16DCE:  BTFSC  FD8.0
16DD0:  BRA    16DD6
16DD2:  MOVLB  2
16DD4:  BRA    16E0A
16DD6:  BNZ   16DE4
16DD8:  MOVF   x2B,W
16DDA:  SUBLW  7F
16DDC:  BTFSC  FD8.0
16DDE:  BRA    16DE4
16DE0:  MOVLB  2
16DE2:  BRA    16E0A
.................... 			{
.................... 			if ((ffase_r == 0) || (ffase_s == 0) || (ffase_t == 0))
16DE4:  BTFSS  23.6
16DE6:  BRA    16DF0
16DE8:  BTFSS  28.3
16DEA:  BRA    16DF0
16DEC:  BTFSC  28.4
16DEE:  BRA    16E06
.................... 				{
.................... 				#if (com_regs == 1)
.................... 				 grava_ocorrencias(reg_falta_fases);
16DF0:  MOVLW  2C
16DF2:  MOVLB  A
16DF4:  MOVWF  x58
16DF6:  MOVLB  0
16DF8:  CALL   5828
.................... 				#endif
.................... 				tem_alarme = 0;
16DFC:  BCF    22.4
.................... 				ffase_r = 1;
16DFE:  BSF    23.6
.................... 				ffase_s = 1;
16E00:  BSF    28.3
.................... 				ffase_t = 1;
16E02:  BSF    28.4
16E04:  MOVLB  3
.................... 				}
.................... 			}
16E06:  BRA    16EB4
16E08:  MOVLB  2
.................... 		else
.................... 			{
.................... 			if (tensao_r < TENSAO_FALTA)
16E0A:  MOVF   x51,W
16E0C:  SUBLW  0C
16E0E:  BNC   16E30
16E10:  BNZ   16E18
16E12:  MOVF   x50,W
16E14:  SUBLW  7F
16E16:  BNC   16E30
.................... 				{
.................... 				if (ffase_r == 0)
16E18:  BTFSC  23.6
16E1A:  BRA    16E2E
.................... 					{
.................... 					#if (com_regs == 1)
.................... 					 grava_ocorrencias(reg_falta_fase_r);
16E1C:  MOVLW  29
16E1E:  MOVLB  A
16E20:  MOVWF  x58
16E22:  MOVLB  0
16E24:  CALL   5828
.................... 					#endif
.................... 					tem_alarme = 0;
16E28:  BCF    22.4
.................... 					ffase_r = 1;
16E2A:  BSF    23.6
16E2C:  MOVLB  2
.................... 					}
.................... 				}
16E2E:  BRA    16E42
.................... 			else if (tensao_r > (TENSAO_FALTA + 256))
16E30:  MOVF   x51,W
16E32:  SUBLW  0C
16E34:  BC    16E42
16E36:  XORLW  FF
16E38:  BNZ   16E40
16E3A:  MOVF   x50,W
16E3C:  SUBLW  80
16E3E:  BC    16E42
.................... 				{
.................... 				ffase_r = 0;
16E40:  BCF    23.6
.................... 				}
.................... 		//
.................... 			if (tensao_s < TENSAO_FALTA)
16E42:  MOVF   xD5,W
16E44:  SUBLW  0C
16E46:  BNC   16E68
16E48:  BNZ   16E50
16E4A:  MOVF   xD4,W
16E4C:  SUBLW  7F
16E4E:  BNC   16E68
.................... 				{
.................... 				if (ffase_s == 0)
16E50:  BTFSC  28.3
16E52:  BRA    16E66
.................... 					{
.................... 					#if (com_regs == 1)
.................... 					 grava_ocorrencias(reg_falta_fase_s);
16E54:  MOVLW  2A
16E56:  MOVLB  A
16E58:  MOVWF  x58
16E5A:  MOVLB  0
16E5C:  CALL   5828
.................... 					#endif
.................... 					tem_alarme = 0;
16E60:  BCF    22.4
.................... 					ffase_s = 1;
16E62:  BSF    28.3
16E64:  MOVLB  2
.................... 					}
.................... 				}
16E66:  BRA    16E7A
.................... 			else if (tensao_s > (TENSAO_FALTA + 256))
16E68:  MOVF   xD5,W
16E6A:  SUBLW  0C
16E6C:  BC    16E7A
16E6E:  XORLW  FF
16E70:  BNZ   16E78
16E72:  MOVF   xD4,W
16E74:  SUBLW  80
16E76:  BC    16E7A
.................... 				{
.................... 				ffase_s = 0;
16E78:  BCF    28.3
.................... 				}
.................... 		//
.................... 			if (tensao_t < TENSAO_FALTA)
16E7A:  MOVLB  3
16E7C:  MOVF   x2C,W
16E7E:  SUBLW  0C
16E80:  BNC   16EA2
16E82:  BNZ   16E8A
16E84:  MOVF   x2B,W
16E86:  SUBLW  7F
16E88:  BNC   16EA2
.................... 				{
.................... 				if (ffase_t == 0)
16E8A:  BTFSC  28.4
16E8C:  BRA    16EA0
.................... 					{
.................... 					#if (com_regs == 1)
.................... 					 grava_ocorrencias(reg_falta_fase_t);
16E8E:  MOVLW  2B
16E90:  MOVLB  A
16E92:  MOVWF  x58
16E94:  MOVLB  0
16E96:  CALL   5828
.................... 					#endif
.................... 					tem_alarme = 0;
16E9A:  BCF    22.4
.................... 					ffase_t = 1;
16E9C:  BSF    28.4
16E9E:  MOVLB  3
.................... 					}
.................... 				}
16EA0:  BRA    16EB4
.................... 			else if (tensao_t > (TENSAO_FALTA + 256))
16EA2:  MOVF   x2C,W
16EA4:  SUBLW  0C
16EA6:  BC    16EB4
16EA8:  XORLW  FF
16EAA:  BNZ   16EB2
16EAC:  MOVF   x2B,W
16EAE:  SUBLW  80
16EB0:  BC    16EB4
.................... 				{
.................... 				ffase_t = 0;
16EB2:  BCF    28.4
16EB4:  MOVLB  4
.................... 				}
.................... 			}
.................... 	#endif
16EB6:  MOVLB  0
16EB8:  GOTO   16FA4 (RETURN)
.................... 	
.................... }
.................... 
.................... void trata_ala_subc(void)
.................... {
.................... 	#if (st8500c == true)
.................... 		cor_b_r = 0;
*
16AD4:  BCF    23.7
.................... 		#if (monofasico == false)
.................... 			cor_b_s = 0;
16AD6:  BCF    28.5
.................... 			cor_b_t = 0;
16AD8:  BCF    28.6
.................... 		#endif
.................... 	#else
16ADA:  GOTO   16FA0 (RETURN)
.................... 		if (ala_subc == 0)
.................... 			{
.................... 			cor_b_r = 0;
.................... 			#if (monofasico == false)
.................... 				cor_b_s = 0;
.................... 				cor_b_t = 0;
.................... 			#endif
.................... 			}
.................... 		else		/* SE PROGRAMACAO DIFERENTE DE ZERO COM CRITICA */
.................... 			{
.................... 			if (corrente_r < 8)
.................... 				{
.................... 				 cor_a_r = 0;
.................... 				 cor_b_r = 0;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				if (corrente_s < 8)
.................... 					{
.................... 					 cor_a_s = 0;
.................... 					 cor_b_s = 0;
.................... 					}
.................... 				if (corrente_t < 8)
.................... 					{
.................... 					 cor_a_t = 0;
.................... 					 cor_b_t = 0;
.................... 					}
.................... 			#endif
.................... 			#if (monofasico == true)
.................... 				if (corrente_r < 8)
.................... 					{
.................... 					return;
.................... 					}
.................... 			#else
.................... 				if ((corrente_r < 8) && (corrente_s < 8) && (corrente_t < 8))
.................... 					{
.................... 					return;
.................... 					}
.................... 			#endif
.................... 	
.................... 			#if (tc_fixo == true)
.................... 				aux_l1 = valor_tc_fixo;
.................... 			#else
.................... 				aux_l1 = valor_tc;
.................... 			#endif
.................... 			aux_w1 = (int16)(((aux_l1 * ala_subc) / 100));
.................... 			aux_w1 = aux_w1 * 8; 
.................... 			aux_w2 = aux_w1 - (aux_w1 / 20);
.................... 	
.................... 			if (corrente_r < aux_w1)
.................... 				{
.................... 				if (cor_b_r == 0)
.................... 					{
.................... 					cor_b_r = 1;
.................... 					cor_a_r = 0;
.................... 					tem_ocor = 1;
.................... 					tem_alarme = 0;
.................... 					}
.................... 				}
.................... 			else if (corrente_r > aux_w2)
.................... 				{
.................... 				 cor_b_r = 0;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				if (corrente_s < aux_w1)
.................... 					{
.................... 					if (cor_b_s == 0)
.................... 						{
.................... 						 cor_b_s=1;
.................... 						 cor_a_s = 0;
.................... 						tem_ocor = 1;
.................... 						tem_alarme = 0;
.................... 						}
.................... 					}
.................... 				else if (corrente_s > aux_w2)
.................... 					{
.................... 					 cor_b_s = 0;
.................... 					}
.................... 				if (corrente_t < aux_w1)
.................... 					{
.................... 					if (cor_b_t == 0)
.................... 						{
.................... 						 cor_b_t = 1;
.................... 						 cor_a_t = 0;
.................... 						tem_ocor = 1;
.................... 						tem_alarme = 0;
.................... 						}
.................... 					}
.................... 				else if (corrente_t > aux_w2)
.................... 					{
.................... 					 cor_b_t = 0;
.................... 					}
.................... 			#endif
.................... 			#if (com_regs == 1)
.................... 				if (tem_ocor == 1)
.................... 					{
.................... 					tem_ocor = 0;
.................... 					#if (monofasico == true)
.................... 					 	if (cor_b_r == 1)
.................... 					 		{
.................... 						 	grava_ocorrencias(reg_corrente_baixa);
.................... 							}
.................... 					#else
.................... 						if ((cor_b_r == 1) && (cor_b_s == 1) && (cor_b_t == 1))
.................... 							{
.................... 						 	grava_ocorrencias(reg_corrente_baixa);
.................... 						 	}
.................... 						else
.................... 							{
.................... 						 	if (cor_b_r == 1)
.................... 						 		{
.................... 								 grava_ocorrencias(reg_cor_r_baixa);
.................... 								 }
.................... 						 	if (cor_b_s == 1)
.................... 						 		{
.................... 								 grava_ocorrencias(reg_cor_s_baixa);
.................... 								 }
.................... 						 	if (cor_b_t == 1)
.................... 						 		{
.................... 								 grava_ocorrencias(reg_cor_t_baixa);
.................... 								 }
.................... 							}
.................... 					#endif
.................... 					}
.................... 			#endif
.................... 			}
.................... 	#endif
.................... }
.................... 
.................... #if (com_alarme_demanda == true)
.................... 	void trata_ala_demanda(void)
.................... 	{
.................... 		#if (st8500c == true)
.................... 			if(ala_demanda_ativa == 0)
16ADE:  MOVLB  4
16AE0:  MOVF   xDA,F
16AE2:  BNZ   16AE8
.................... 				{
.................... 				dem_ati = false;
16AE4:  BCF    24.0
.................... 				}
16AE6:  BRA    16D96
.................... 			else
.................... 				{
.................... 				if (dem_ativa_proj > dem_contratada)
16AE8:  MOVLB  2
16AEA:  MOVF   x7B,W
16AEC:  SUBWF  x7F,W
16AEE:  BTFSS  FD8.0
16AF0:  BRA    16D92
16AF2:  BNZ   16AFC
16AF4:  MOVF   x7E,W
16AF6:  SUBWF  x7A,W
16AF8:  BTFSC  FD8.0
16AFA:  BRA    16D92
.................... 					{
.................... 					aux_f2 = (float)(ala_demanda_ativa);
16AFC:  MOVLB  A
16AFE:  CLRF   x7E
16B00:  MOVFF  4DA,A7D
16B04:  MOVLB  0
16B06:  CALL   2924
16B0A:  MOVFF  03,39B
16B0E:  MOVFF  02,39A
16B12:  MOVFF  01,399
16B16:  MOVFF  00,398
.................... 					aux_f2 = ((float)(aux_f2 + 100) / 100);
16B1A:  BCF    FD8.1
16B1C:  MOVFF  39B,A83
16B20:  MOVFF  39A,A82
16B24:  MOVFF  399,A81
16B28:  MOVFF  398,A80
16B2C:  MOVLB  A
16B2E:  CLRF   x87
16B30:  CLRF   x86
16B32:  MOVLW  48
16B34:  MOVWF  x85
16B36:  MOVLW  85
16B38:  MOVWF  x84
16B3A:  MOVLB  0
16B3C:  CALL   14D0E
16B40:  MOVFF  03,A4D
16B44:  MOVFF  02,A4C
16B48:  MOVFF  01,A4B
16B4C:  MOVFF  00,A4A
16B50:  MOVFF  03,A83
16B54:  MOVFF  02,A82
16B58:  MOVFF  01,A81
16B5C:  MOVFF  00,A80
16B60:  MOVLB  A
16B62:  CLRF   x87
16B64:  CLRF   x86
16B66:  MOVLW  48
16B68:  MOVWF  x85
16B6A:  MOVLW  85
16B6C:  MOVWF  x84
16B6E:  MOVLB  0
16B70:  CALL   295A
16B74:  MOVFF  03,39B
16B78:  MOVFF  02,39A
16B7C:  MOVFF  01,399
16B80:  MOVFF  00,398
.................... 					aux_f1 = (float)(dem_contratada);
16B84:  MOVFF  27B,A7E
16B88:  MOVFF  27A,A7D
16B8C:  CALL   2924
16B90:  MOVFF  03,397
16B94:  MOVFF  02,396
16B98:  MOVFF  01,395
16B9C:  MOVFF  00,394
.................... 					aux_f1 = (float)(aux_f1 * aux_f2);
16BA0:  MOVFF  397,A80
16BA4:  MOVFF  396,A7F
16BA8:  MOVFF  395,A7E
16BAC:  MOVFF  394,A7D
16BB0:  MOVFF  39B,A84
16BB4:  MOVFF  39A,A83
16BB8:  MOVFF  399,A82
16BBC:  MOVFF  398,A81
16BC0:  CALL   5306
16BC4:  MOVFF  03,397
16BC8:  MOVFF  02,396
16BCC:  MOVFF  01,395
16BD0:  MOVFF  00,394
.................... 					aux_l1 = (int32)(aux_f1);
16BD4:  MOVFF  397,A7C
16BD8:  MOVFF  396,A7B
16BDC:  MOVFF  395,A7A
16BE0:  MOVFF  394,A79
16BE4:  CALL   5470
16BE8:  MOVFF  03,373
16BEC:  MOVFF  02,372
16BF0:  MOVFF  01,371
16BF4:  MOVFF  00,370
.................... 					if (dem_ativa_proj > aux_l1)
16BF8:  MOVLB  3
16BFA:  MOVF   x73,F
16BFC:  BNZ   16C34
16BFE:  MOVF   x72,F
16C00:  BNZ   16C34
16C02:  MOVF   x71,W
16C04:  MOVLB  2
16C06:  SUBWF  x7F,W
16C08:  BTFSC  FD8.0
16C0A:  BRA    16C10
16C0C:  MOVLB  3
16C0E:  BRA    16C34
16C10:  BNZ   16C1C
16C12:  MOVF   x7E,W
16C14:  MOVLB  3
16C16:  SUBWF  x70,W
16C18:  BC    16C34
16C1A:  MOVLB  2
.................... 						{
.................... 						if (dem_ati == false)
16C1C:  BTFSC  24.0
16C1E:  BRA    16C30
.................... 							{
.................... 							dem_ati = true;
16C20:  BSF    24.0
.................... 							#if (com_regs == true)
.................... 							 	grava_ocorrencias(reg_demanda_ativa_alta);
16C22:  MOVLW  37
16C24:  MOVLB  A
16C26:  MOVWF  x58
16C28:  MOVLB  0
16C2A:  CALL   5828
16C2E:  MOVLB  2
.................... 							#endif
.................... 						 	}
.................... 						}
16C30:  BRA    16D90
16C32:  MOVLB  3
.................... 					else
.................... 						{
.................... 						if (ala_demanda_ativa > 1)
16C34:  MOVLB  4
16C36:  MOVF   xDA,W
16C38:  SUBLW  01
16C3A:  BTFSC  FD8.0
16C3C:  BRA    16D66
.................... 							{
.................... 							aux_f2 = (float)(ala_demanda_ativa - 1);
16C3E:  MOVLW  01
16C40:  SUBWF  xDA,W
16C42:  MOVLB  A
16C44:  CLRF   x7E
16C46:  MOVWF  x7D
16C48:  MOVLB  0
16C4A:  CALL   2924
16C4E:  MOVFF  03,39B
16C52:  MOVFF  02,39A
16C56:  MOVFF  01,399
16C5A:  MOVFF  00,398
.................... 							aux_f2 = ((float)(aux_f2 + 100) / 100);
16C5E:  BCF    FD8.1
16C60:  MOVFF  39B,A83
16C64:  MOVFF  39A,A82
16C68:  MOVFF  399,A81
16C6C:  MOVFF  398,A80
16C70:  MOVLB  A
16C72:  CLRF   x87
16C74:  CLRF   x86
16C76:  MOVLW  48
16C78:  MOVWF  x85
16C7A:  MOVLW  85
16C7C:  MOVWF  x84
16C7E:  MOVLB  0
16C80:  CALL   14D0E
16C84:  MOVFF  03,A4D
16C88:  MOVFF  02,A4C
16C8C:  MOVFF  01,A4B
16C90:  MOVFF  00,A4A
16C94:  MOVFF  03,A83
16C98:  MOVFF  02,A82
16C9C:  MOVFF  01,A81
16CA0:  MOVFF  00,A80
16CA4:  MOVLB  A
16CA6:  CLRF   x87
16CA8:  CLRF   x86
16CAA:  MOVLW  48
16CAC:  MOVWF  x85
16CAE:  MOVLW  85
16CB0:  MOVWF  x84
16CB2:  MOVLB  0
16CB4:  CALL   295A
16CB8:  MOVFF  03,39B
16CBC:  MOVFF  02,39A
16CC0:  MOVFF  01,399
16CC4:  MOVFF  00,398
.................... 							aux_f1 = (float)(dem_contratada);
16CC8:  MOVFF  27B,A7E
16CCC:  MOVFF  27A,A7D
16CD0:  CALL   2924
16CD4:  MOVFF  03,397
16CD8:  MOVFF  02,396
16CDC:  MOVFF  01,395
16CE0:  MOVFF  00,394
.................... 							aux_f1 = (float)(aux_f1 * aux_f2);
16CE4:  MOVFF  397,A80
16CE8:  MOVFF  396,A7F
16CEC:  MOVFF  395,A7E
16CF0:  MOVFF  394,A7D
16CF4:  MOVFF  39B,A84
16CF8:  MOVFF  39A,A83
16CFC:  MOVFF  399,A82
16D00:  MOVFF  398,A81
16D04:  CALL   5306
16D08:  MOVFF  03,397
16D0C:  MOVFF  02,396
16D10:  MOVFF  01,395
16D14:  MOVFF  00,394
.................... 							aux_l1 = (int32)(aux_f1);
16D18:  MOVFF  397,A7C
16D1C:  MOVFF  396,A7B
16D20:  MOVFF  395,A7A
16D24:  MOVFF  394,A79
16D28:  CALL   5470
16D2C:  MOVFF  03,373
16D30:  MOVFF  02,372
16D34:  MOVFF  01,371
16D38:  MOVFF  00,370
.................... 							if (dem_ativa_proj < aux_l1)
16D3C:  MOVLB  3
16D3E:  MOVF   x73,F
16D40:  BNZ   16D62
16D42:  MOVF   x72,F
16D44:  BNZ   16D62
16D46:  MOVLB  2
16D48:  MOVF   x7F,W
16D4A:  MOVLB  3
16D4C:  SUBWF  x71,W
16D4E:  BNC   16D64
16D50:  BNZ   16D62
16D52:  MOVF   x70,W
16D54:  MOVLB  2
16D56:  SUBWF  x7E,W
16D58:  BTFSS  FD8.0
16D5A:  BRA    16D60
16D5C:  MOVLB  3
16D5E:  BRA    16D64
16D60:  MOVLB  3
.................... 								{
.................... 								dem_ati = false;
16D62:  BCF    24.0
.................... 								}
.................... 							}
16D64:  BRA    16D8E
.................... 						else if (dem_ativa_proj < aux_l1)
16D66:  MOVLB  3
16D68:  MOVF   x73,F
16D6A:  BNZ   16D8C
16D6C:  MOVF   x72,F
16D6E:  BNZ   16D8C
16D70:  MOVLB  2
16D72:  MOVF   x7F,W
16D74:  MOVLB  3
16D76:  SUBWF  x71,W
16D78:  BNC   16D8E
16D7A:  BNZ   16D8C
16D7C:  MOVF   x70,W
16D7E:  MOVLB  2
16D80:  SUBWF  x7E,W
16D82:  BTFSS  FD8.0
16D84:  BRA    16D8A
16D86:  MOVLB  3
16D88:  BRA    16D8E
16D8A:  MOVLB  3
.................... 							{
.................... 							dem_ati = false;
16D8C:  BCF    24.0
16D8E:  MOVLB  2
.................... 							}
.................... 						}
.................... 					}
16D90:  BRA    16D94
.................... 				else
.................... 					{
.................... 					dem_ati = false;
16D92:  BCF    24.0
16D94:  MOVLB  4
.................... 					}
.................... 				}
.................... 		
.................... 		#else
16D96:  MOVLB  0
16D98:  GOTO   16FA2 (RETURN)
.................... 			if(ala_demanda_ativa == 0)
.................... 				{
.................... 				dem_ati = false;
.................... 				}
.................... 			else
.................... 				{
.................... 				aux_f1 = (float)(dem_ativa);
.................... 				aux_f1 = (float)(aux_f1 * mul_tc);
.................... 				aux_w1 = (word)(aux_f1 * valor_tp);
.................... 				aux_w2 = ala_demanda_ativa;
.................... 				if (ala_demanda_ativa > 1)
.................... 					{
.................... 					aux_w2 = (aux_w2 / 100) + 1;
.................... 					aux_w2 = ala_demanda_ativa - aux_w2;
.................... 					}
.................... 				if (aux_w1 > ala_demanda_ativa)
.................... 					{
.................... 					if (dem_ati == false)
.................... 						{
.................... 						dem_ati = true;
.................... 						#if (com_regs == true)
.................... 						 	grava_ocorrencias(reg_demanda_ativa_alta);
.................... 						#endif
.................... 					 	}
.................... 					}
.................... 				else if (aux_w1 < aux_w2)
.................... 					{
.................... 					dem_ati = false;
.................... 					}
.................... 				}
.................... 		#endif
.................... 	}
.................... #endif
.................... 
.................... /* decide que tensÿão nonimal estÿá */
.................... void decide_tensao_nominal(void)	
.................... {
.................... 	#if (monofasico == true)
.................... 		if (tipo_ligacao == 0)
.................... 			{
.................... 			if (tensao_r > (160 * 64))	
.................... 				{
.................... 				if (tensao_r > (242 * 64)) 		// trocado para 242(220+ 10%) em 30/11 causa problema obispa	(250 * 64)) 
.................... 					{
.................... 					if (ten_nomi != 254)
.................... 				  		{
.................... 						write_word(ee_ten_nomi, 254);
.................... 						#if (com_regs == 1)
.................... 							grava_ocorrencias(reg_troca_tensao);
.................... 						#endif
.................... 						retardo_alarmes = 10;
.................... 					 	ten_nomi = 254;
.................... 				  		}
.................... 					}
.................... 				else
.................... 					{
.................... 					if (ten_nomi != 220)
.................... 				  		{
.................... 						write_word(ee_ten_nomi, 220);
.................... 						#if (com_regs == 1)
.................... 							grava_ocorrencias(reg_troca_tensao);
.................... 						#endif
.................... 						retardo_alarmes = 10;
.................... 					 	ten_nomi = 220;
.................... 				  		}
.................... 				 	}
.................... 				}
.................... 			else
.................... 				{
.................... 				  if (ten_nomi != 127)
.................... 				  	{
.................... 					write_word(ee_ten_nomi, 127);
.................... 					#if (com_regs == 1)
.................... 						grava_ocorrencias(reg_troca_tensao);
.................... 					#endif
.................... 					retardo_alarmes = 10;
.................... 					 ten_nomi = 127;
.................... 				  	}
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			if (tensao_r > (300 * 64))			// alterado em 07/07/2006, estava dando ero quandoem FF e tansao < 400V, sempre assumia 127V
.................... 				{
.................... 				if (tensao_r > (400 * 64)) 		
.................... 					{
.................... 					if (ten_nomi != 254)
.................... 				  		{
.................... 						write_word(ee_ten_nomi, 254);
.................... 						#if (com_regs == 1)
.................... 							grava_ocorrencias(reg_troca_tensao);
.................... 						#endif
.................... 						retardo_alarmes = 10;
.................... 					 	ten_nomi = 254;
.................... 				  		}
.................... 					}
.................... 				else
.................... 					{
.................... 					if (ten_nomi != 220)
.................... 				  		{
.................... 						write_word(ee_ten_nomi, 220);
.................... 						#if (com_regs == 1)
.................... 							grava_ocorrencias(reg_troca_tensao);
.................... 						#endif
.................... 						retardo_alarmes = 10;
.................... 					 	ten_nomi = 220;
.................... 				  		}
.................... 				 	}
.................... 				}
.................... 			else
.................... 				{
.................... 				if (ten_nomi != 127)
.................... 				  	{
.................... 					write_word(ee_ten_nomi, 127);
.................... 					#if (com_regs == 1)
.................... 						grava_ocorrencias(reg_troca_tensao);
.................... 					#endif
.................... 					retardo_alarmes = 10;
.................... 					ten_nomi = 127;
.................... 				  	}
.................... 				}
.................... 			}
.................... 	#else
.................... 		if (tensao_r > (160 * 64))	
*
160EC:  MOVLB  2
160EE:  MOVF   x51,W
160F0:  SUBLW  27
160F2:  BC    1618A
160F4:  XORLW  FF
160F6:  BNZ   160FE
160F8:  MOVF   x50,W
160FA:  SUBLW  00
160FC:  BC    1618A
.................... 			{
.................... 			if (tensao_r > (242 * 64)) 		// trocado para 242(220+ 10%) em 30/11 causa problema obispa	(250 * 64)) 
160FE:  MOVF   x51,W
16100:  SUBLW  3B
16102:  BC    1614C
16104:  XORLW  FF
16106:  BNZ   1610E
16108:  MOVF   x50,W
1610A:  SUBLW  80
1610C:  BC    1614C
.................... 				{
.................... 				if (ten_nomi != 254)
1610E:  MOVLB  4
16110:  MOVF   xBD,W
16112:  SUBLW  FE
16114:  BNZ   1611A
16116:  MOVF   xBE,F
16118:  BZ    16148
.................... 			  		{
.................... 					write_word(ee_ten_nomi, 254);
1611A:  MOVLB  A
1611C:  CLRF   x5D
1611E:  MOVLW  11
16120:  MOVWF  x5C
16122:  CLRF   x5F
16124:  MOVLW  FE
16126:  MOVWF  x5E
16128:  MOVLB  0
1612A:  CALL   23AE
.................... 					#if (com_regs == 1)
.................... 						grava_ocorrencias(reg_troca_tensao);
1612E:  MOVLW  31
16130:  MOVLB  A
16132:  MOVWF  x58
16134:  MOVLB  0
16136:  CALL   5828
.................... 					#endif
.................... 					retardo_alarmes = 10;
1613A:  MOVLW  0A
1613C:  MOVLB  3
1613E:  MOVWF  xF5
.................... 				 	ten_nomi = 254;
16140:  MOVLB  4
16142:  CLRF   xBE
16144:  MOVLW  FE
16146:  MOVWF  xBD
.................... 			  		}
.................... 				}
16148:  BRA    16186
1614A:  MOVLB  2
.................... 			else
.................... 				{
.................... 				if (ten_nomi != 220)
1614C:  MOVLB  4
1614E:  MOVF   xBD,W
16150:  SUBLW  DC
16152:  BNZ   16158
16154:  MOVF   xBE,F
16156:  BZ    16186
.................... 			  		{
.................... 					write_word(ee_ten_nomi, 220);
16158:  MOVLB  A
1615A:  CLRF   x5D
1615C:  MOVLW  11
1615E:  MOVWF  x5C
16160:  CLRF   x5F
16162:  MOVLW  DC
16164:  MOVWF  x5E
16166:  MOVLB  0
16168:  CALL   23AE
.................... 					#if (com_regs == 1)
.................... 						grava_ocorrencias(reg_troca_tensao);
1616C:  MOVLW  31
1616E:  MOVLB  A
16170:  MOVWF  x58
16172:  MOVLB  0
16174:  CALL   5828
.................... 					#endif
.................... 					retardo_alarmes = 10;
16178:  MOVLW  0A
1617A:  MOVLB  3
1617C:  MOVWF  xF5
.................... 				 	ten_nomi = 220;
1617E:  MOVLB  4
16180:  CLRF   xBE
16182:  MOVLW  DC
16184:  MOVWF  xBD
.................... 			  		}
.................... 			 	}
.................... 			}
16186:  BRA    161C4
16188:  MOVLB  2
.................... 		else
.................... 			{
.................... 			  if (ten_nomi != 127)
1618A:  MOVLB  4
1618C:  MOVF   xBD,W
1618E:  SUBLW  7F
16190:  BNZ   16196
16192:  MOVF   xBE,F
16194:  BZ    161C4
.................... 			  	{
.................... 				write_word(ee_ten_nomi, 127);
16196:  MOVLB  A
16198:  CLRF   x5D
1619A:  MOVLW  11
1619C:  MOVWF  x5C
1619E:  CLRF   x5F
161A0:  MOVLW  7F
161A2:  MOVWF  x5E
161A4:  MOVLB  0
161A6:  CALL   23AE
.................... 				#if (com_regs == 1)
.................... 					grava_ocorrencias(reg_troca_tensao);
161AA:  MOVLW  31
161AC:  MOVLB  A
161AE:  MOVWF  x58
161B0:  MOVLB  0
161B2:  CALL   5828
.................... 				#endif
.................... 				retardo_alarmes = 10;
161B6:  MOVLW  0A
161B8:  MOVLB  3
161BA:  MOVWF  xF5
.................... 				 ten_nomi = 127;
161BC:  MOVLB  4
161BE:  CLRF   xBE
161C0:  MOVLW  7F
161C2:  MOVWF  xBD
.................... 			  	}
.................... 			}
.................... 	#endif
.................... 
.................... 	os_ten_r = os_ten_r1;
161C4:  MOVFF  4AB,4A8
.................... 	os_ten_s = os_ten_s1;
161C8:  MOVFF  4AC,4A9
.................... 	os_ten_t = os_ten_t1;
161CC:  MOVFF  4AD,4AA
161D0:  MOVLB  0
161D2:  GOTO   16F4E (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... //	signed word os_cor_pt_r[NRO_POSI_TC];
.................... //	signed word os_cor_pt_s[NRO_POSI_TC];
.................... //	signed word os_cor_pt_t[NRO_POSI_TC];
.................... 
.................... //void calcula_vref_cr(void)
.................... //{
.................... // 	aux_l1 = 0;
.................... //	for (aux_calc = 0; aux_calc < NRO_AMOSTRAS; aux_calc++)
.................... //		{
.................... //		aux_l1 += buf_corrente_r[aux_calc];
.................... //		}
.................... //	aux_l1 = aux_l1 / NRO_AMOSTRAS;
.................... // 	data1_int = (word)(aux_l1);
.................... // 	vref_cr = data1_int;
.................... //}
.................... //
.................... //#if (monofasico == false)
.................... //	void calcula_vref_cs(void)
.................... //	{
.................... //	 	aux_l1 = 0;
.................... //		for (aux_calc = 0; aux_calc < NRO_AMOSTRAS; aux_calc++)
.................... //			{
.................... //			aux_l1 += buf_corrente_s[aux_calc];
.................... //			}
.................... //		aux_l1 = aux_l1 / NRO_AMOSTRAS;
.................... //	 	data1_int = (word)(aux_l1);
.................... //	 	vref_cs = data1_int;
.................... //	}
.................... //	void calcula_vref_ct(void)
.................... //	{
.................... //	 	aux_l1 = 0;
.................... //		for (aux_calc = 0; aux_calc < NRO_AMOSTRAS; aux_calc++)
.................... //			{
.................... //			aux_l1 += buf_corrente_t[aux_calc];
.................... //			}
.................... //		aux_l1 = aux_l1 / NRO_AMOSTRAS;
.................... //	 	data1_int = (word)(aux_l1);
.................... //	 	vref_ct = data1_int;
.................... //	}
.................... //#endif
.................... 
.................... #if (portatil == true)
.................... 
.................... 	void atualiza_ganho(char ponteira)
.................... 	{
.................... 		#if (versao_pci_st96 > 3)		//Para versÿões 4,5 e 6.
.................... 			ganho_ponteira = ganhos_ponteiras[ponteira];
.................... 			#if (versao_pci_st96 > 4)		//Para versÿões 5 e 6.
.................... 				ajustar_ponteira = true;
.................... 			#else
.................... 				pga_gain_set(ganho_ponteira, 1); 
.................... 				pga_gain_set(ganho_ponteira, 2); 
.................... 				pga_gain_set(ganho_ponteira, 3); 
.................... 				pga_gain_set(0, 4); 
.................... 			#endif
.................... 		#endif
.................... 	}
.................... 
.................... 	#if (se_com_flex ==	true)
.................... 		void ve_ref_ponteiras(void)
.................... 		{
.................... 			if ((tipo_ponteira >= INICIO_LEM) && (tipo_ponteira <= FIM_LEM))
.................... 				{
.................... 				calcula_vref_cr();
.................... 				calcula_vref_cs();
.................... 				calcula_vref_ct();
.................... 				}
.................... 			else
.................... 				{
.................... 				vref_cr = vref;
.................... 				vref_cs = vref;
.................... 				vref_ct = vref;
.................... 				}
.................... 		}
.................... 		void decide_que_ponteira(void)
.................... 		{
.................... 
.................... 			ve_ref_ponteiras();
.................... 			
.................... 			os_cor_r = os_cor_pt_r[tipo_ponteira];
.................... 			os_cor_s = os_cor_pt_s[tipo_ponteira];
.................... 			os_cor_t = os_cor_pt_t[tipo_ponteira];
.................... 			os_pot_r = os_pot_pt_r[tipo_ponteira];
.................... 			os_pot_s = os_pot_pt_s[tipo_ponteira];
.................... 			os_pot_t = os_pot_pt_t[tipo_ponteira];
.................... 
.................... 			off_cor_r = off_set_fp[tipo_ponteira];
.................... 
.................... 			erro = 1;
.................... 			if ((tipo_ponteira >= 0) && (tipo_ponteira < (NRO_POSI_TABELA_TIPO_PT+1)))
.................... 				{
.................... 				erro = 0;
.................... 				atualiza_ganho(tipo_ponteira);
.................... 				}
.................... 
.................... 			if (erro == 1)
.................... 				{
.................... 				tipo_ponteira =  read_word(ee_tipo_ponteira);
.................... 				if ((tipo_ponteira >= 0) && (tipo_ponteira < (NRO_POSI_TABELA_TIPO_PT+1)))
.................... 					{
.................... 					erro = 0;
.................... 					atualiza_ganho(tipo_ponteira);
.................... 					break;
.................... 					}
.................... 				if (erro == 1)
.................... 					{
.................... 					erro = 0;
.................... 					tipo_ponteira =  2;		//Alicate de 1000A
.................... 					valor_tc = tabela_pt[tipo_ponteira];
.................... 					write_byte(ee_tipo_ponteira, tipo_ponteira);
.................... 					atualiza_ganho(tipo_ponteira);
.................... 					}
.................... 				}
.................... 		}
.................... 		#if (versao_pci_st96 >= 6)
.................... 			#if (selecao_pt_auto == true)
.................... 				void selecao_ponteira_auto(void)
.................... 				{
.................... 					float mul_pt;
.................... 					aux_w1 = corrente_r;
.................... 					if (corrente_s > aux_w1)
.................... 						{
.................... 						aux_w1 = corrente_s;
.................... 						}
.................... 					if (corrente_t > aux_w1)
.................... 						{
.................... 						aux_w1 = corrente_t;
.................... 						}
.................... 					// aux_w1 com maior corrente	
.................... 					if ((tipo_ponteira > 1) && (tipo_ponteira < (5)))
.................... 						{
.................... 						mul_pt = tabela_mul_tc[tipo_ponteira];
.................... 						aux_f1 = (float)(aux_w1);
.................... 						aux_f1 = (float)(aux_f1 * mul_pt);
.................... 						aux_w1 = (word)(aux_f1);
.................... 						if (tipo_ponteira == (2))
.................... 							{
.................... 							aux_w2 =  tabela_pt[2];
.................... 							aux_w3 = aux_w2 / 4;
.................... 							aux_w2 = (aux_w2 + aux_w3) * 8;
.................... 							if (aux_w1 > aux_w2)
.................... 								{
.................... 								time_out_troca_ponteira = 15;
.................... 							 	grava_ocorrencias(reg_troca_pt_1);
.................... 							 	tipo_ponteira = 3;
.................... 								valor_tc = tabela_pt[tipo_ponteira];
.................... 								write_byte(ee_tipo_ponteira, tipo_ponteira);
.................... 								recarrega_ponteira = true;
.................... 								atualiza_ganho(tipo_ponteira);
.................... 								}
.................... 							}
.................... 						else if (tipo_ponteira == (3))
.................... 							{
.................... 							aux_w2 =  tabela_pt[3];
.................... 							aux_w3 = aux_w2 / 4;
.................... 							aux_w2 = (aux_w2 + aux_w3) * 8;
.................... 							if (aux_w1 > aux_w2)
.................... 								{
.................... 								time_out_troca_ponteira = 15;
.................... 							 	grava_ocorrencias(reg_troca_pt_2);
.................... 							 	tipo_ponteira = 4;
.................... 								valor_tc = tabela_pt[tipo_ponteira];
.................... 								write_byte(ee_tipo_ponteira, tipo_ponteira);
.................... 								recarrega_ponteira = true;
.................... 								atualiza_ganho(tipo_ponteira);
.................... 								}
.................... 							else if (aux_w1 < (tabela_pt[2] * 8))
.................... 								{
.................... 								time_out_troca_ponteira = 15;
.................... 							 	grava_ocorrencias(reg_troca_pt_0);
.................... 							 	tipo_ponteira = 2;
.................... 								valor_tc = tabela_pt[tipo_ponteira];
.................... 								write_byte(ee_tipo_ponteira, tipo_ponteira);
.................... 								recarrega_ponteira = true;
.................... 								atualiza_ganho(tipo_ponteira);
.................... 								}
.................... 							}
.................... 						else if (tipo_ponteira == (4))
.................... 							{
.................... 							if (aux_w1 < (tabela_pt[(3)] * 8))
.................... 								{
.................... 								time_out_troca_ponteira = 15;
.................... 							 	grava_ocorrencias(reg_troca_pt_1);
.................... 							 	tipo_ponteira = 3;
.................... 								valor_tc = tabela_pt[tipo_ponteira];
.................... 								write_byte(ee_tipo_ponteira, tipo_ponteira);
.................... 								recarrega_ponteira = true;
.................... 								atualiza_ganho(tipo_ponteira);
.................... 								}
.................... 							}
.................... 						}
.................... 				}
.................... 			#endif
.................... 		#endif
.................... 	#else
.................... 		void decide_que_ponteira(void)
.................... 		{
.................... 			erro=1;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					erro=0;
.................... 					posi_tc = aux_b1;
.................... 					os_cor_r = os_cor_pt_r[aux_b1];
.................... 					os_cor_s = os_cor_pt_s[aux_b1];
.................... 					os_cor_t = os_cor_pt_t[aux_b1];
.................... 					os_pot_r = os_pot_pt_r[aux_b1];
.................... 					os_pot_s = os_pot_pt_s[aux_b1];
.................... 					os_pot_t = os_pot_pt_t[aux_b1];
.................... 					atualiza_ganho(aux_b1);
.................... 					break;
.................... 					}
.................... 				}
.................... 			if (erro == 1)
.................... 				{
.................... 				valor_tc =  read_word(ee_valor_tc);
.................... 				for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 					{
.................... 					if (valor_tc == tabela_tc[aux_b1])
.................... 						{
.................... 						posi_tc = aux_b1;
.................... 						erro=0;
.................... 						os_cor_r = os_cor_pt_r[aux_b1];
.................... 						os_cor_s = os_cor_pt_s[aux_b1];
.................... 						os_cor_t = os_cor_pt_t[aux_b1];
.................... 						os_pot_r = os_pot_pt_r[aux_b1];
.................... 						os_pot_s = os_pot_pt_s[aux_b1];
.................... 						os_pot_t = os_pot_pt_t[aux_b1];
.................... 						atualiza_ganho(aux_b1);
.................... 						break;
.................... 						}
.................... 					}
.................... 				if (erro == 1)
.................... 					{
.................... 					valor_tc = valor_ponteira_default;		
.................... 					posi_tc = posi_ponteira_default;
.................... 					os_cor_r = os_cor_pt_r[posi_ponteira_default];
.................... 					os_cor_s = os_cor_pt_s[posi_ponteira_default];
.................... 					os_cor_t = os_cor_pt_t[posi_ponteira_default];
.................... 					os_pot_r = os_pot_pt_r[posi_ponteira_default];
.................... 					os_pot_s = os_pot_pt_s[posi_ponteira_default];
.................... 					os_pot_t = os_pot_pt_t[posi_ponteira_default];
.................... 					write_word(ee_valor_tc, valor_tc);
.................... 					atualiza_ganho(2);
.................... 					}
.................... 				}
.................... 		#if (tc_fixo == true) 
.................... 			if (ultima_tc != valor_tc)
.................... 				{
.................... 				busca_mul_tc();  
.................... 				ultima_tc = valor_tc;
.................... 				}
.................... 		#endif  
.................... 		}
.................... 	#endif
.................... #endif	
.................... 
.................... 
.................... void trata_sentido_sensor_corrente(void)
.................... {
.................... 	
.................... 	#if ((st8500c == true) && (com_rep == true))
.................... 		sentido_r = false;
.................... 		sentido_s = false;
.................... 		sentido_t = false;
.................... 	#else
.................... 		#if (monofasico == true)
.................... 			if (corrente_r > 80)
.................... 				{
.................... 				if (sentido_r == true)
.................... 					{
.................... 					if (fsentido_r == 0)
.................... 						{
.................... 						#if (com_regs == 1)
.................... 						 	grava_ocorrencias(reg_tc_inv_r);
.................... 						#endif
.................... 						fsentido_r = 1;
.................... 						tem_alarme = 0;
.................... 						}
.................... 					}
.................... 				else
.................... 					{
.................... 					fsentido_r = 0;
.................... 					}
.................... 				}
.................... 			else
.................... 				{
.................... 				fsentido_r = 0;
.................... 				}
.................... 		#else
.................... 			if (corrente_r > 80)
*
16EBC:  MOVLB  2
16EBE:  MOVF   x53,F
16EC0:  BNZ   16EC8
16EC2:  MOVF   x52,W
16EC4:  SUBLW  50
16EC6:  BC    16EE8
.................... 				{
.................... 				if (sentido_r == true)
16EC8:  BTFSS  22.6
16ECA:  BRA    16EE4
.................... 					{
.................... 					if (fsentido_r == 0)
16ECC:  BTFSC  22.5
16ECE:  BRA    16EE2
.................... 						{
.................... 						#if (com_regs == 1)
.................... 						 	grava_ocorrencias(reg_tc_inv_r);
16ED0:  MOVLW  11
16ED2:  MOVLB  A
16ED4:  MOVWF  x58
16ED6:  MOVLB  0
16ED8:  CALL   5828
.................... 						#endif
.................... 						fsentido_r = 1;
16EDC:  BSF    22.5
.................... 						tem_alarme = 0;
16EDE:  BCF    22.4
16EE0:  MOVLB  2
.................... 						}
.................... 					}
16EE2:  BRA    16EE6
.................... 				else
.................... 					{
.................... 					fsentido_r = 0;
16EE4:  BCF    22.5
.................... 					}
.................... 				}
16EE6:  BRA    16EEA
.................... 			else
.................... 				{
.................... 				fsentido_r = 0;
16EE8:  BCF    22.5
.................... 				}
.................... 			if (corrente_s > 80)
16EEA:  MOVF   xD7,F
16EEC:  BNZ   16EF4
16EEE:  MOVF   xD6,W
16EF0:  SUBLW  50
16EF2:  BC    16F14
.................... 				{
.................... 				if (sentido_s == true)
16EF4:  BTFSS  27.3
16EF6:  BRA    16F10
.................... 					{
.................... 					if (fsentido_s == 0)
16EF8:  BTFSC  29.3
16EFA:  BRA    16F0E
.................... 						{
.................... 						#if (com_regs == 1)
.................... 						 	grava_ocorrencias(reg_tc_inv_s);
16EFC:  MOVLW  12
16EFE:  MOVLB  A
16F00:  MOVWF  x58
16F02:  MOVLB  0
16F04:  CALL   5828
.................... 						#endif
.................... 						fsentido_s = 1;
16F08:  BSF    29.3
.................... 						tem_alarme = 0;
16F0A:  BCF    22.4
16F0C:  MOVLB  2
.................... 						}
.................... 					}
16F0E:  BRA    16F12
.................... 				else
.................... 					{
.................... 					fsentido_s = 0;
16F10:  BCF    29.3
.................... 					}
.................... 				}
16F12:  BRA    16F16
.................... 			else
.................... 				{
.................... 				fsentido_s = 0;
16F14:  BCF    29.3
.................... 				}
.................... 			if (corrente_t > 80)
16F16:  MOVLB  3
16F18:  MOVF   x2E,F
16F1A:  BNZ   16F22
16F1C:  MOVF   x2D,W
16F1E:  SUBLW  50
16F20:  BC    16F42
.................... 				{
.................... 				if (sentido_t == true)
16F22:  BTFSS  27.4
16F24:  BRA    16F3E
.................... 					{
.................... 					if (fsentido_t == 0)
16F26:  BTFSC  29.4
16F28:  BRA    16F3C
.................... 						{
.................... 						#if (com_regs == 1)
.................... 						 	grava_ocorrencias(reg_tc_inv_t);
16F2A:  MOVLW  13
16F2C:  MOVLB  A
16F2E:  MOVWF  x58
16F30:  MOVLB  0
16F32:  CALL   5828
.................... 						#endif
.................... 						fsentido_t = 1;
16F36:  BSF    29.4
.................... 						tem_alarme = 0;
16F38:  BCF    22.4
16F3A:  MOVLB  3
.................... 						}
.................... 					}
16F3C:  BRA    16F40
.................... 				else
.................... 					{
.................... 					fsentido_t = 0;
16F3E:  BCF    29.4
.................... 					}
.................... 				}
16F40:  BRA    16F44
.................... 			else
.................... 				{
.................... 				fsentido_t = 0;
16F42:  BCF    29.4
.................... 				}
.................... 		#endif
.................... 	#endif
16F44:  MOVLB  0
16F46:  GOTO   16FA6 (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... #if ((st9200r == true) || (st9230r == true))
.................... 	#if (com_maximos == true)
.................... 		void trata_cor_pot_maxima()
.................... 		{
.................... 			if (corrente_r > cor_maxima_r)
.................... 				{
.................... 				cor_maxima_r = corrente_r;
.................... 				}
.................... 			if (corrente_s > cor_maxima_s)
.................... 				{
.................... 				cor_maxima_s = corrente_s;
.................... 				}
.................... 			if (corrente_t > cor_maxima_t)
.................... 				{
.................... 				cor_maxima_t = corrente_t;
.................... 				}
.................... 			if (pot_ativa_r > pot_ativa_max_r)
.................... 				{
.................... 				pot_ativa_max_r = pot_ativa_r;
.................... 				}
.................... 			if (pot_ativa_s > pot_ativa_max_s)
.................... 				{
.................... 				pot_ativa_max_s = pot_ativa_s;
.................... 				}
.................... 			if (pot_ativa_t > pot_ativa_max_t)
.................... 				{
.................... 				pot_ativa_max_t = pot_ativa_t;
.................... 				}
.................... 
.................... 		}
.................... 	#endif
.................... #endif
.................... 
.................... #include "st_vali.c"
.................... /*;**********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS									*
.................... ; Modulo: ST_VALI														*
.................... ; Funcao: MODULO VALIDACAO DE PROGRAMACAO								*
.................... ; Responsavel: VAGNER SANTOS											*
.................... ; Modificado ; VAGNER SANTOS											*
.................... ; Inicio: 30/08/2000													*
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS									*
.................... ;************************************************************************/
....................   
.................... 
.................... void valida_programa(void);
.................... void calcula_fundo_escala_corrente(void);
.................... 
.................... 
.................... word valida_word(word variavel, word ee_variavel, word minimo, word maximo, word padrao)
.................... {
.................... 	if ((variavel < minimo) || (variavel > maximo))
*
0357A:  MOVLB  A
0357C:  MOVF   x53,W
0357E:  SUBWF  x57,W
03580:  BNC   358A
03582:  BNZ   3598
03584:  MOVF   x56,W
03586:  SUBWF  x52,W
03588:  BNC   3598
0358A:  MOVF   x59,W
0358C:  SUBWF  x53,W
0358E:  BNC   35EC
03590:  BNZ   3598
03592:  MOVF   x52,W
03594:  SUBWF  x58,W
03596:  BC    35EC
.................... 		{
.................... 		variavel = read_word(ee_variavel);
03598:  MOVFF  A55,A5D
0359C:  MOVFF  A54,A5C
035A0:  MOVLB  0
035A2:  CALL   170A
035A6:  MOVFF  02,A53
035AA:  MOVFF  01,A52
.................... 		if ((variavel < minimo) || (variavel > maximo))
035AE:  MOVLB  A
035B0:  MOVF   x53,W
035B2:  SUBWF  x57,W
035B4:  BNC   35BE
035B6:  BNZ   35CC
035B8:  MOVF   x56,W
035BA:  SUBWF  x52,W
035BC:  BNC   35CC
035BE:  MOVF   x59,W
035C0:  SUBWF  x53,W
035C2:  BNC   35EC
035C4:  BNZ   35CC
035C6:  MOVF   x52,W
035C8:  SUBWF  x58,W
035CA:  BC    35EC
.................... 			{
.................... 			write_word(ee_variavel, padrao);
035CC:  MOVFF  A55,A5D
035D0:  MOVFF  A54,A5C
035D4:  MOVFF  A5B,A5F
035D8:  MOVFF  A5A,A5E
035DC:  MOVLB  0
035DE:  CALL   23AE
.................... 			variavel = padrao;
035E2:  MOVFF  A5B,A53
035E6:  MOVFF  A5A,A52
035EA:  MOVLB  A
.................... 			}
.................... 		}
.................... 	return(variavel);
035EC:  MOVFF  A52,01
035F0:  MOVFF  A53,02
035F4:  MOVLB  0
035F6:  RETURN 0
.................... }			
.................... 
.................... char valida_byte(byte variavel, word ee_variavel, byte minimo, byte maximo, byte padrao)
.................... {
.................... 	if (minimo == 0)
*
034B0:  MOVLB  A
034B2:  MOVF   x54,F
034B4:  BNZ   34F0
.................... 		{
.................... 		if (variavel > maximo)
034B6:  MOVF   x51,W
034B8:  SUBWF  x55,W
034BA:  BC    34EE
.................... 			{
.................... 			variavel = read_byte(ee_variavel);
034BC:  MOVFF  A53,A66
034C0:  MOVFF  A52,A65
034C4:  MOVLB  0
034C6:  CALL   1C24
034CA:  MOVFF  01,A51
.................... 			if (variavel > maximo)
034CE:  MOVLB  A
034D0:  MOVF   x51,W
034D2:  SUBWF  x55,W
034D4:  BC    34EE
.................... 				{
.................... 				write_byte(ee_variavel, padrao);
034D6:  MOVFF  A53,A68
034DA:  MOVFF  A52,A67
034DE:  MOVFF  A56,A69
034E2:  MOVLB  0
034E4:  CALL   1C46
.................... 				variavel = padrao;
034E8:  MOVFF  A56,A51
034EC:  MOVLB  A
.................... 				}
.................... 			}
.................... 		}
034EE:  BRA    3572
.................... 	else if (maximo == 255)
034F0:  INCFSZ x55,W
034F2:  BRA    352E
.................... 		{
.................... 		if (variavel < minimo)
034F4:  MOVF   x54,W
034F6:  SUBWF  x51,W
034F8:  BC    352C
.................... 			{
.................... 			variavel = read_byte(ee_variavel);
034FA:  MOVFF  A53,A66
034FE:  MOVFF  A52,A65
03502:  MOVLB  0
03504:  CALL   1C24
03508:  MOVFF  01,A51
.................... 			if (variavel < minimo)
0350C:  MOVLB  A
0350E:  MOVF   x54,W
03510:  SUBWF  x51,W
03512:  BC    352C
.................... 				{
.................... 				write_byte(ee_variavel, padrao);
03514:  MOVFF  A53,A68
03518:  MOVFF  A52,A67
0351C:  MOVFF  A56,A69
03520:  MOVLB  0
03522:  CALL   1C46
.................... 				variavel = padrao;
03526:  MOVFF  A56,A51
0352A:  MOVLB  A
.................... 				}
.................... 			}
.................... 		}
0352C:  BRA    3572
.................... 	else
.................... 		{
.................... 		if ((variavel < minimo) || (variavel > maximo))
0352E:  MOVF   x54,W
03530:  SUBWF  x51,W
03532:  BNC   353A
03534:  MOVF   x51,W
03536:  SUBWF  x55,W
03538:  BC    3572
.................... 			{
.................... 			variavel = read_byte(ee_variavel);
0353A:  MOVFF  A53,A66
0353E:  MOVFF  A52,A65
03542:  MOVLB  0
03544:  CALL   1C24
03548:  MOVFF  01,A51
.................... 			if ((variavel < minimo) || (variavel > maximo))
0354C:  MOVLB  A
0354E:  MOVF   x54,W
03550:  SUBWF  x51,W
03552:  BNC   355A
03554:  MOVF   x51,W
03556:  SUBWF  x55,W
03558:  BC    3572
.................... 				{
.................... 				write_byte(ee_variavel, padrao);
0355A:  MOVFF  A53,A68
0355E:  MOVFF  A52,A67
03562:  MOVFF  A56,A69
03566:  MOVLB  0
03568:  CALL   1C46
.................... 				variavel = padrao;
0356C:  MOVFF  A56,A51
03570:  MOVLB  A
.................... 				}
.................... 			}
.................... 		}
.................... 	return(variavel);
03572:  MOVFF  A51,01
03576:  MOVLB  0
03578:  RETURN 0
.................... }			
.................... 
.................... #if (controlador == true) || (st_prog == true)
.................... 	#if (st8500c == true)
.................... 		void valida_max_kw(void);
.................... 
.................... 	#else
.................... 		void gera_sequencia_valor_bancos(void);
.................... 	#endif
.................... #endif
.................... 
.................... /* INICIO DA ROTINA PRINCIPAL */
.................... 
.................... 
.................... #if (controlador == true) || (st_prog == true)
.................... 	#if (st8500c == true)
.................... 	#else
.................... 		void valida_min_max_kvar(void)
.................... 		{		
.................... 			char x;
.................... 			#if (AUTOSET == true)
.................... 				if (em_autoset == true)
.................... 					{
.................... 					return;
.................... 					}
.................... 			#endif
.................... 			
.................... 			max_kvar = read_byte(ee_max_kvar);
.................... 			min_kvar = read_byte(ee_min_kvar);
.................... 			if (max_kvar > MAIOR_BANCO_POSSIVEL) 
.................... 				{
.................... 				max_kvar = 0;
.................... 				write_byte(ee_max_kvar, 0);
.................... 				}
.................... 			if (min_kvar > MAIOR_BANCO_POSSIVEL)
.................... 				{
.................... 				min_kvar = 5;
.................... 				write_byte(ee_min_kvar, 5);
.................... 				}
.................... 			
.................... 			if (max_kvar != 0)
.................... 				{
.................... 				for (x = 0; x < nro_bancos_capacitor; x++)
.................... 					{
.................... 					if (max_kvar < banco_capacitor[x])
.................... 						{
.................... 						max_kvar = banco_capacitor[x];
.................... 						write_byte(ee_max_kvar, max_kvar);
.................... 						}
.................... 					}
.................... 				if (min_kvar > max_kvar)
.................... 					{
.................... 					min_kvar =  max_kvar;
.................... 					write_byte(ee_min_kvar, min_kvar);
.................... 					}
.................... 				}
.................... 			maior_banco = 0;
.................... 			for (x = 0; x < nro_bancos_capacitor; x++)
.................... 				{
.................... 				if (maior_banco < banco_capacitor[x])
.................... 					{
.................... 					maior_banco = banco_capacitor[x];
.................... 					}
.................... 				}
.................... 			menor_banco = 255;
.................... 			for (x = 0; x < nro_bancos_capacitor; x++)
.................... 				{
.................... 				if (menor_banco > banco_capacitor[x])
.................... 					{
.................... 					menor_banco = banco_capacitor[x];
.................... 					}
.................... 				}
.................... 			if (min_kvar != 0)
.................... 				{
.................... 				if (min_kvar < menor_banco)
.................... 					{
.................... 					min_kvar = menor_banco;
.................... 					write_byte(ee_min_kvar, min_kvar);
.................... 					}
.................... 				}
.................... 		}
.................... 		
.................... 		void vali_nro_bancos_capacitor(void)	    	
.................... 		{
.................... 			#if (AUTOSET == true)
.................... 				if (em_autoset == true)
.................... 					{
.................... 					return;
.................... 					}
.................... 			#endif
.................... 			
.................... 		    if ((nro_bancos_capacitor == 0) || (nro_bancos_capacitor > NRO_MAXIMO_BANCOS_CAPACITOR))
.................... 	 	   		{
.................... 	     	   	nro_bancos_capacitor = read_byte(ee_nro_bancos_capacitor);
.................... 		    	if ((nro_bancos_capacitor == 0) || (nro_bancos_capacitor > NRO_MAXIMO_BANCOS_CAPACITOR))
.................... 	 	   			{
.................... 		 	   		#if (monofasico == true)
.................... 		 	   			#if (bancos_12 == true)
.................... 					 	   	nro_bancos_capacitor = NRO_MAXIMO_BANCOS_CAPACITOR;
.................... 		 	 	    	  	write_byte(ee_nro_bancos_capacitor, NRO_MAXIMO_BANCOS_CAPACITOR);
.................... 						#else
.................... 					 	   	nro_bancos_capacitor = NRO_MAXIMO_BANCOS_CAPACITOR / 2;
.................... 		 	 	    	  	write_byte(ee_nro_bancos_capacitor, NRO_MAXIMO_BANCOS_CAPACITOR / 2);
.................... 		 	 	    	 #endif
.................... 		 	   		#else
.................... 				 	   	nro_bancos_capacitor = NRO_MAXIMO_BANCOS_CAPACITOR;
.................... 	 	 	    	  	write_byte(ee_nro_bancos_capacitor, NRO_MAXIMO_BANCOS_CAPACITOR);
.................... 		 	   		#endif
.................... 		 		   	}
.................... 				}
.................... 		}
.................... 	#endif
.................... #endif
.................... 
.................... 
.................... #if (com_menu == true)
.................... 	void inic_idioma(void)
.................... 	{
.................... 		#if (portatil == true)
.................... 			idioma = read_byte(ee_idioma);
.................... 			if ((idioma != PORTUGUES) && (idioma != ESPANHOL))
.................... 				{
.................... 				idioma = PORTUGUES;
.................... 				write_byte(ee_idioma, idioma);
.................... 				}
.................... 		#else
.................... 			idioma = PORTUGUES;
*
034AC:  CLRF   2D
.................... 		#endif
034AE:  RETURN 0
.................... 	}
.................... #endif
.................... 
.................... void valida_programa(void)
.................... {	
.................... 
.................... 	#if (controlador == true)
.................... 		#if (AUTOSET == true)
.................... 			if (em_autoset == true)
.................... 				{
.................... 				return;
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 
.................... 	#if (st5x == true)
.................... 		 bloqueio_gravacao = read_byte(ee_bloqueio_gravacao);
.................... 	#else
.................... 		 bloqueio_gravacao = 0;
*
036FE:  CLRF   4E
.................... 	#endif
.................... 
.................... 	#if (com_menu == true)
.................... 		inic_idioma();
03700:  RCALL  34AC
.................... 	#endif
.................... 
.................... 	set_point = valida_byte(set_point, ee_set_point, 90, 99, 95);
03702:  MOVFF  4CB,A51
03706:  MOVLB  A
03708:  CLRF   x53
0370A:  MOVLW  0A
0370C:  MOVWF  x52
0370E:  MOVLW  5A
03710:  MOVWF  x54
03712:  MOVLW  63
03714:  MOVWF  x55
03716:  MOVLW  5F
03718:  MOVWF  x56
0371A:  MOVLB  0
0371C:  RCALL  34B0
0371E:  MOVFF  01,4CB
.................... 	
.................... 	
.................... 	erro=1;
03722:  BSF    22.2
.................... 	for (aux_b1=0; aux_b1 < (NRO_POSI_TEN-1); aux_b1++)
03724:  MOVLB  3
03726:  CLRF   xB1
03728:  MOVF   xB1,W
0372A:  SUBLW  01
0372C:  BNC   375A
.................... 		{
.................... 		if (ten_nomi == tabela_ten[aux_b1])
0372E:  BCF    FD8.0
03730:  RLCF   xB1,W
03732:  CLRF   03
03734:  MOVLB  0
03736:  CALL   00EE
0373A:  TBLRD*+
0373C:  MOVFF  FF5,03
03740:  MOVLB  4
03742:  SUBWF  xBD,W
03744:  BNZ   3754
03746:  MOVF   03,W
03748:  SUBWF  xBE,W
0374A:  BNZ   3754
.................... 			{
.................... 			erro=0;
0374C:  BCF    22.2
.................... 			break;
0374E:  MOVLB  3
03750:  BRA    375A
03752:  MOVLB  4
.................... 			}
03754:  MOVLB  3
03756:  INCF   xB1,F
03758:  BRA    3728
.................... 		}
.................... 	if (erro==1)
0375A:  BTFSS  22.2
0375C:  BRA    37CE
.................... 		{
.................... 		ten_nomi = read_word(ee_ten_nomi);
0375E:  MOVLB  A
03760:  CLRF   x5D
03762:  MOVLW  11
03764:  MOVWF  x5C
03766:  MOVLB  0
03768:  CALL   170A
0376C:  MOVFF  02,4BE
03770:  MOVFF  01,4BD
.................... 		for (aux_b1=0; aux_b1 < (NRO_POSI_TEN-1); aux_b1++)
03774:  MOVLB  3
03776:  CLRF   xB1
03778:  MOVF   xB1,W
0377A:  SUBLW  01
0377C:  BNC   37AA
.................... 			{
.................... 			if (ten_nomi == tabela_ten[aux_b1])
0377E:  BCF    FD8.0
03780:  RLCF   xB1,W
03782:  CLRF   03
03784:  MOVLB  0
03786:  CALL   00EE
0378A:  TBLRD*+
0378C:  MOVFF  FF5,03
03790:  MOVLB  4
03792:  SUBWF  xBD,W
03794:  BNZ   37A4
03796:  MOVF   03,W
03798:  SUBWF  xBE,W
0379A:  BNZ   37A4
.................... 				{
.................... 				erro=0;
0379C:  BCF    22.2
.................... 				break;
0379E:  MOVLB  3
037A0:  BRA    37AA
037A2:  MOVLB  4
.................... 				}
037A4:  MOVLB  3
037A6:  INCF   xB1,F
037A8:  BRA    3778
.................... 			}
.................... 		if (erro==1)
037AA:  BTFSS  22.2
037AC:  BRA    37CE
.................... 			{
.................... 			ten_nomi = 220;
037AE:  MOVLB  4
037B0:  CLRF   xBE
037B2:  MOVLW  DC
037B4:  MOVWF  xBD
.................... 			write_word(ee_ten_nomi, ten_nomi);
037B6:  MOVLB  A
037B8:  CLRF   x5D
037BA:  MOVLW  11
037BC:  MOVWF  x5C
037BE:  MOVFF  4BE,A5F
037C2:  MOVFF  4BD,A5E
037C6:  MOVLB  0
037C8:  CALL   23AE
037CC:  MOVLB  3
.................... 			}
.................... 		}
.................... 
.................... 	#if (portatil == true)
.................... 		#if (se_com_flex == true)
.................... 			if (tipo_ponteira > (NRO_POSI_TABELA_TIPO_PT+1))
.................... 				{
.................... 				tipo_ponteira = read_byte(ee_tipo_ponteira);
.................... 				if (tipo_ponteira > (NRO_POSI_TABELA_TIPO_PT+1))
.................... 					{
.................... 					tipo_ponteira = 2;		//Alicate 1000A Minipa
.................... 					write_byte(ee_tipo_ponteira, 2);
.................... 					}
.................... 				}
.................... 			ve_ref_ponteiras();
.................... 			valor_tc = tabela_pt[tipo_ponteira];
.................... 			busca_mul_tc();
.................... 		#else
.................... 			erro = 1;
.................... 			for (aux_b1=0; aux_b1 < (NRO_POSI_TC+1); aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					erro=0;
.................... 					#if (viercon == true)
.................... 						if (aux_b1 == 2)
.................... 							{
.................... 							vref_cr = vref;
.................... 							vref_cs = vref;
.................... 							vref_ct = vref;
.................... 							}
.................... 						else
.................... 							{
.................... 							vref_cr = tabela_vref_cr[aux_b1];
.................... 							vref_cs = tabela_vref_cs[aux_b1];
.................... 							vref_ct = tabela_vref_ct[aux_b1];
.................... 							}
.................... 					#endif
.................... 					break;
.................... 					}
.................... 				}
.................... 			if (erro == 1)
.................... 				{
.................... 				valor_tc =  read_word(ee_valor_tc);
.................... 				for (aux_b1=0; aux_b1 < (NRO_POSI_TC+1); aux_b1++)
.................... 					{
.................... 					if (valor_tc == tabela_tc[aux_b1])
.................... 						{
.................... 						erro=0;
.................... 						#if (viercon == true)
.................... 							if (aux_b1 == 2)
.................... 								{
.................... 								vref_cr = vref;
.................... 								vref_cs = vref;
.................... 								vref_ct = vref;
.................... 								}
.................... 							else
.................... 								{
.................... 								vref_cr = tabela_vref_cr[aux_b1];
.................... 								vref_cs = tabela_vref_cs[aux_b1];
.................... 								vref_ct = tabela_vref_ct[aux_b1];
.................... 								}
.................... 						#endif
.................... 						break;
.................... 						}
.................... 					}
.................... 				#if (viercon == true)
.................... 					vref_cr = tabela_vref_cr[2];
.................... 					vref_cs = tabela_vref_cs[2];
.................... 					vref_ct = tabela_vref_cr[2];
.................... 					if (erro == 1)
.................... 						{
.................... 						valor_tc = 3000;		
.................... 						write_word(ee_valor_tc, valor_tc);
.................... 						}
.................... 				#else
.................... 					if (erro == 1)
.................... 						{
.................... 						valor_tc = 1000;		
.................... 						write_word(ee_valor_tc, valor_tc);
.................... 						}
.................... 				#endif
.................... 				}
.................... 			 #if (sazi == true)
.................... 				if (valor_tc != 200)
.................... 					{
.................... 					valor_tc = 200;		
.................... 					write_word(ee_valor_tc, valor_tc);
.................... 					}			 
.................... 			 #endif
.................... 
.................... 		#endif
.................... 	#else
.................... 		erro = 1;
037CE:  BSF    22.2
.................... 		for (aux_b1=0; aux_b1 < (NRO_POSI_TC+1); aux_b1++)
037D0:  CLRF   xB1
037D2:  MOVF   xB1,W
037D4:  SUBLW  25
037D6:  BNC   3808
.................... 			{
.................... 			if (valor_tc == tabela_tc[aux_b1])
037D8:  BCF    FD8.0
037DA:  RLCF   xB1,W
037DC:  CLRF   03
037DE:  MOVLB  0
037E0:  CALL   0128
037E4:  TBLRD*+
037E6:  MOVFF  FF5,03
037EA:  MOVLB  4
037EC:  SUBWF  xBF,W
037EE:  BNZ   3802
037F0:  MOVF   03,W
037F2:  SUBWF  xC0,W
037F4:  BNZ   3802
.................... 				{
.................... 				posi_tc = aux_b1;
037F6:  MOVFF  3B1,519
.................... 				erro=0;
037FA:  BCF    22.2
.................... 				break;
037FC:  MOVLB  3
037FE:  BRA    3808
03800:  MOVLB  4
.................... 				}
03802:  MOVLB  3
03804:  INCF   xB1,F
03806:  BRA    37D2
.................... 			}
.................... 		if (erro == 1)
03808:  BTFSS  22.2
0380A:  BRA    3886
.................... 			{
.................... 			valor_tc =  read_word(ee_valor_tc);
0380C:  MOVLB  A
0380E:  CLRF   x5D
03810:  MOVLW  13
03812:  MOVWF  x5C
03814:  MOVLB  0
03816:  CALL   170A
0381A:  MOVFF  02,4C0
0381E:  MOVFF  01,4BF
.................... 			for (aux_b1=0; aux_b1 < (NRO_POSI_TC+1); aux_b1++)
03822:  MOVLB  3
03824:  CLRF   xB1
03826:  MOVF   xB1,W
03828:  SUBLW  25
0382A:  BNC   385C
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
0382C:  BCF    FD8.0
0382E:  RLCF   xB1,W
03830:  CLRF   03
03832:  MOVLB  0
03834:  CALL   0128
03838:  TBLRD*+
0383A:  MOVFF  FF5,03
0383E:  MOVLB  4
03840:  SUBWF  xBF,W
03842:  BNZ   3856
03844:  MOVF   03,W
03846:  SUBWF  xC0,W
03848:  BNZ   3856
.................... 					{
.................... 					posi_tc = aux_b1;
0384A:  MOVFF  3B1,519
.................... 					erro=0;
0384E:  BCF    22.2
.................... 					break;
03850:  MOVLB  3
03852:  BRA    385C
03854:  MOVLB  4
.................... 					}
03856:  MOVLB  3
03858:  INCF   xB1,F
0385A:  BRA    3826
.................... 				}
.................... 			if (erro == 1)
0385C:  BTFSS  22.2
0385E:  BRA    3886
.................... 				{
.................... 				valor_tc = 500;		
03860:  MOVLW  01
03862:  MOVLB  4
03864:  MOVWF  xC0
03866:  MOVLW  F4
03868:  MOVWF  xBF
.................... 				posi_tc = 19;
0386A:  MOVLW  13
0386C:  MOVLB  5
0386E:  MOVWF  x19
.................... 				write_word(ee_valor_tc, valor_tc);
03870:  MOVLB  A
03872:  CLRF   x5D
03874:  MOVWF  x5C
03876:  MOVFF  4C0,A5F
0387A:  MOVFF  4BF,A5E
0387E:  MOVLB  0
03880:  CALL   23AE
03884:  MOVLB  3
.................... 				}
.................... 			}
.................... 	#endif
.................... 
.................... 	#if (tc_fixo == true)
.................... 		#if (portatil == true)
.................... 			busca_mul_tc();
.................... 		#else
.................... 			calcula_mul_tc();
03886:  MOVLB  0
03888:  CALL   2AB8
.................... 		#endif
.................... 	#endif
.................... 
.................... 	valor_tp = valida_word(valor_tp, ee_valor_tp, 1, 500, 1);
0388C:  MOVFF  4C2,A53
03890:  MOVFF  4C1,A52
03894:  MOVLB  A
03896:  CLRF   x55
03898:  MOVLW  2B
0389A:  MOVWF  x54
0389C:  CLRF   x57
0389E:  MOVLW  01
038A0:  MOVWF  x56
038A2:  MOVWF  x59
038A4:  MOVLW  F4
038A6:  MOVWF  x58
038A8:  CLRF   x5B
038AA:  MOVLW  01
038AC:  MOVWF  x5A
038AE:  MOVLB  0
038B0:  RCALL  357A
038B2:  MOVFF  02,4C2
038B6:  MOVFF  01,4C1
.................... 	
.................... 	#if (portatil == true)
.................... 		#if (se_com_flex == true)
.................... 			// Correntes:
.................... 			// Fase R:
.................... 			aux_w1 = ee_os_cor_r_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				if ((os_cor_pt_r[aux_b1] > LIMITE_COR_SUP) || (os_cor_pt_r[aux_b1] < LIMITE_COR_INF))
.................... 					{
.................... 					os_cor_pt_r[aux_b1] = read_byte(aux_w1);
.................... 					if ((os_cor_pt_r[aux_b1] > LIMITE_COR_SUP) || (os_cor_pt_r[aux_b1] < LIMITE_COR_INF))
.................... 						{
.................... 						os_cor_pt_r[aux_b1] = OFF_SET_COR_R;
.................... 						write_byte(aux_w1, OFF_SET_COR_R);
.................... 						}
.................... 			        }
.................... 				aux_w1 += 3; 
.................... 				}
.................... 		
.................... 			// Fase S:
.................... 			aux_w1 = ee_os_cor_s_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				if ((os_cor_pt_s[aux_b1] > LIMITE_COR_SUP) || (os_cor_pt_s[aux_b1] < LIMITE_COR_INF))
.................... 					{
.................... 					os_cor_pt_s[aux_b1] = read_byte(aux_w1);
.................... 					if ((os_cor_pt_s[aux_b1] > LIMITE_COR_SUP) || (os_cor_pt_s[aux_b1] < LIMITE_COR_INF))
.................... 						{
.................... 						os_cor_pt_s[aux_b1] = OFF_SET_COR_S;
.................... 						write_byte(aux_w1, OFF_SET_COR_S);
.................... 						}
.................... 					}
.................... 				aux_w1 += 3; 
.................... 		        }
.................... 			// Fase T:
.................... 			aux_w1 = ee_os_cor_t_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				if ((os_cor_pt_t[aux_b1] > LIMITE_COR_SUP) || (os_cor_pt_t[aux_b1] < LIMITE_COR_INF))
.................... 					{
.................... 					os_cor_pt_t[aux_b1] = read_byte(aux_w1);
.................... 					if ((os_cor_pt_t[aux_b1] > LIMITE_COR_SUP) || (os_cor_pt_t[aux_b1] < LIMITE_COR_INF))
.................... 						{
.................... 						os_cor_pt_t[aux_b1] = OFF_SET_COR_T;
.................... 						write_byte(aux_w1, OFF_SET_COR_T);
.................... 						}
.................... 					}
.................... 				aux_w1 += 3; 
.................... 		        }
.................... 		
.................... 			// Potÿÿÿÿÿÿÿências:
.................... 			// Fase R:
.................... 			aux_w1 = ee_os_pot_r_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				if ((os_pot_pt_r[aux_b1] > LIMITE_POT_SUP) || (os_pot_pt_r[aux_b1] < LIMITE_POT_INF))
.................... 					{
.................... 					os_pot_pt_r[aux_b1] = read_byte(aux_w1);
.................... 					if ((os_pot_pt_r[aux_b1] > LIMITE_POT_SUP) || (os_pot_pt_r[aux_b1] < LIMITE_POT_INF))
.................... 						{
.................... 						os_pot_pt_r[aux_b1] = OFF_SET_POT_R;
.................... 						write_byte(aux_w1, OFF_SET_POT_R);
.................... 						}
.................... 			        }
.................... 				aux_w1 += 3; 
.................... 				}
.................... 		
.................... 			// Fase S:
.................... 			aux_w1 = ee_os_pot_s_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				if ((os_pot_pt_s[aux_b1] > LIMITE_POT_SUP) || (os_pot_pt_s[aux_b1] < LIMITE_POT_INF))
.................... 					{
.................... 						os_pot_pt_s[aux_b1] = read_byte(aux_w1);
.................... 					if ((os_pot_pt_s[aux_b1] > LIMITE_POT_SUP) || (os_pot_pt_s[aux_b1] < LIMITE_POT_INF))
.................... 						{
.................... 						os_pot_pt_s[aux_b1] = OFF_SET_POT_S;
.................... 						write_byte(aux_w1, OFF_SET_POT_S);
.................... 						}
.................... 					}
.................... 				aux_w1 += 3; 
.................... 		        }
.................... 			// Fase T:
.................... 			aux_w1 = ee_os_pot_t_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				if ((os_pot_pt_t[aux_b1] > LIMITE_POT_SUP) || (os_pot_pt_t[aux_b1] < LIMITE_POT_INF))
.................... 					{
.................... 						os_pot_pt_t[aux_b1] = read_byte(aux_w1);
.................... 					if ((os_pot_pt_t[aux_b1] > LIMITE_POT_SUP) || (os_pot_pt_t[aux_b1] < LIMITE_POT_INF))
.................... 						{
.................... 						os_pot_pt_t[aux_b1] = OFF_SET_POT_T;
.................... 						write_byte(aux_w1, OFF_SET_POT_T);
.................... 						}
.................... 					}
.................... 				aux_w1 += 3; 
.................... 		        }
.................... 		#else
.................... 		// correntes
.................... 		// fase R
.................... 			aux_w1 = ee_os_cor_r_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if ((os_cor_pt_r[aux_b1] > LIMITE_COR_SUP) || (os_cor_pt_r[aux_b1] < LIMITE_COR_INF))
.................... 					{
.................... 					os_cor_pt_r[aux_b1] = read_byte(aux_w1);
.................... 					if ((os_cor_pt_r[aux_b1] > LIMITE_COR_SUP) || (os_cor_pt_r[aux_b1] < LIMITE_COR_INF))
.................... 						{
.................... 						os_cor_pt_r[aux_b1] = OFF_SET_COR_R;
.................... 						write_byte(aux_w1, OFF_SET_COR_R);
.................... 						}
.................... 			        }
.................... 				aux_w1 += 3; 
.................... 				}
.................... 		
.................... 		// fase S
.................... 			aux_w1 = ee_os_cor_s_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (os_cor_pt_s[aux_b1] > LIMITE_COR_SUP || os_cor_pt_s[aux_b1] < LIMITE_COR_INF)
.................... 					{
.................... 					os_cor_pt_s[aux_b1] = read_byte(aux_w1);
.................... 					if (os_cor_pt_s[aux_b1] > LIMITE_COR_SUP || os_cor_pt_s[aux_b1] < LIMITE_COR_INF)
.................... 						{
.................... 						os_cor_pt_s[aux_b1] = OFF_SET_COR_S;
.................... 						write_byte(aux_w1, OFF_SET_COR_S);
.................... 						}
.................... 					}
.................... 				aux_w1 += 3; 
.................... 		        }
.................... 		// fase T
.................... 			aux_w1 = ee_os_cor_t_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (os_cor_pt_t[aux_b1] > LIMITE_COR_SUP || os_cor_pt_t[aux_b1] < LIMITE_COR_INF)
.................... 					{
.................... 					os_cor_pt_t[aux_b1] = read_byte(aux_w1);
.................... 					if (os_cor_pt_t[aux_b1] > LIMITE_COR_SUP || os_cor_pt_t[aux_b1] < LIMITE_COR_INF)
.................... 						{
.................... 						os_cor_pt_t[aux_b1] = OFF_SET_COR_T;
.................... 						write_byte(aux_w1, OFF_SET_COR_T);
.................... 						}
.................... 					}
.................... 				aux_w1 += 3; 
.................... 		        }
.................... 		
.................... 		// potencias
.................... 		// fase R
.................... 			aux_w1 = ee_os_pot_r_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (os_pot_pt_r[aux_b1] > LIMITE_POT_SUP || os_pot_pt_r[aux_b1] < LIMITE_POT_INF)
.................... 					{
.................... 					os_pot_pt_r[aux_b1] = read_byte(aux_w1);
.................... 					if (os_pot_pt_r[aux_b1] > LIMITE_POT_SUP || os_pot_pt_r[aux_b1] < LIMITE_POT_INF)
.................... 						{
.................... 						os_pot_pt_r[aux_b1] = OFF_SET_POT_R;
.................... 						write_byte(aux_w1, OFF_SET_POT_R);
.................... 						}
.................... 			        }
.................... 				aux_w1 += 3; 
.................... 				}
.................... 		
.................... 		// fase S
.................... 			aux_w1 = ee_os_pot_s_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (os_pot_pt_s[aux_b1] > LIMITE_POT_SUP || os_pot_pt_s[aux_b1] < LIMITE_POT_INF)
.................... 					{
.................... 					os_pot_pt_s[aux_b1] = read_byte(aux_w1);
.................... 					if (os_pot_pt_s[aux_b1] > LIMITE_POT_SUP || os_pot_pt_s[aux_b1] < LIMITE_POT_INF)
.................... 						{
.................... 						os_pot_pt_s[aux_b1] = OFF_SET_POT_S;
.................... 						write_byte(aux_w1, OFF_SET_POT_S);
.................... 						}
.................... 					}
.................... 				aux_w1 += 3; 
.................... 		        }
.................... 		// fase T
.................... 			aux_w1 = ee_os_pot_t_20;
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (os_pot_pt_t[aux_b1] > LIMITE_POT_SUP || os_pot_pt_t[aux_b1] < LIMITE_POT_INF)
.................... 					{
.................... 					os_pot_pt_t[aux_b1] = read_byte(aux_w1);
.................... 					if (os_pot_pt_t[aux_b1] > LIMITE_POT_SUP || os_pot_pt_t[aux_b1] < LIMITE_POT_INF)
.................... 						{
.................... 						os_pot_pt_t[aux_b1] = OFF_SET_POT_T;
.................... 						write_byte(aux_w1, OFF_SET_POT_T);
.................... 						}
.................... 					}
.................... 				aux_w1 += 3; 
.................... 		        }
.................... 		#endif
.................... #else
.................... 
.................... 		if (os_cor_r > LIMITE_COR_SUP || os_cor_r < LIMITE_COR_INF)
038BA:  MOVLB  4
038BC:  BTFSC  xB1.7
038BE:  BRA    38C6
038C0:  MOVF   xB1,W
038C2:  SUBLW  78
038C4:  BNC   38CE
038C6:  MOVF   xB1,W
038C8:  XORLW  80
038CA:  SUBLW  07
038CC:  BNC   390C
.................... 			{
.................... 			os_cor_r = read_byte(ee_os_cor_r);
038CE:  MOVLB  A
038D0:  CLRF   x66
038D2:  MOVLW  0B
038D4:  MOVWF  x65
038D6:  MOVLB  0
038D8:  CALL   1C24
038DC:  MOVFF  01,4B1
.................... 			if (os_cor_r > LIMITE_COR_SUP || os_cor_r < LIMITE_COR_INF)
038E0:  MOVLB  4
038E2:  BTFSC  xB1.7
038E4:  BRA    38EC
038E6:  MOVF   xB1,W
038E8:  SUBLW  78
038EA:  BNC   38F4
038EC:  MOVF   xB1,W
038EE:  XORLW  80
038F0:  SUBLW  07
038F2:  BNC   390C
.................... 				{
.................... 				os_cor_r = OFF_SET_COR_R;
038F4:  MOVLW  0A
038F6:  MOVWF  xB1
.................... 				write_byte(ee_os_cor_r, os_cor_r);
038F8:  MOVLB  A
038FA:  CLRF   x68
038FC:  MOVLW  0B
038FE:  MOVWF  x67
03900:  MOVFF  4B1,A69
03904:  MOVLB  0
03906:  CALL   1C46
0390A:  MOVLB  4
.................... 				}
.................... 	        }
.................... 		#if (monofasico == false)
.................... 			if (os_cor_s > LIMITE_COR_SUP || os_cor_s < LIMITE_COR_INF)
0390C:  BTFSC  xB2.7
0390E:  BRA    3916
03910:  MOVF   xB2,W
03912:  SUBLW  78
03914:  BNC   391E
03916:  MOVF   xB2,W
03918:  XORLW  80
0391A:  SUBLW  07
0391C:  BNC   395C
.................... 				{
.................... 				os_cor_s = read_byte(ee_os_cor_s);
0391E:  MOVLB  A
03920:  CLRF   x66
03922:  MOVLW  0C
03924:  MOVWF  x65
03926:  MOVLB  0
03928:  CALL   1C24
0392C:  MOVFF  01,4B2
.................... 				if (os_cor_s > LIMITE_COR_SUP || os_cor_s < LIMITE_COR_INF)
03930:  MOVLB  4
03932:  BTFSC  xB2.7
03934:  BRA    393C
03936:  MOVF   xB2,W
03938:  SUBLW  78
0393A:  BNC   3944
0393C:  MOVF   xB2,W
0393E:  XORLW  80
03940:  SUBLW  07
03942:  BNC   395C
.................... 					{
.................... 					os_cor_s = OFF_SET_COR_S;
03944:  MOVLW  0A
03946:  MOVWF  xB2
.................... 					write_byte(ee_os_cor_s, os_cor_s);
03948:  MOVLB  A
0394A:  CLRF   x68
0394C:  MOVLW  0C
0394E:  MOVWF  x67
03950:  MOVFF  4B2,A69
03954:  MOVLB  0
03956:  CALL   1C46
0395A:  MOVLB  4
.................... 					}
.................... 		        }
.................... 			if (os_cor_t > LIMITE_COR_SUP || os_cor_t < LIMITE_COR_INF)
0395C:  BTFSC  xB3.7
0395E:  BRA    3966
03960:  MOVF   xB3,W
03962:  SUBLW  78
03964:  BNC   396E
03966:  MOVF   xB3,W
03968:  XORLW  80
0396A:  SUBLW  07
0396C:  BNC   39AC
.................... 				{
.................... 				os_cor_t = read_byte(ee_os_cor_t);
0396E:  MOVLB  A
03970:  CLRF   x66
03972:  MOVLW  0D
03974:  MOVWF  x65
03976:  MOVLB  0
03978:  CALL   1C24
0397C:  MOVFF  01,4B3
.................... 				if (os_cor_t > LIMITE_COR_SUP || os_cor_t < LIMITE_COR_INF)
03980:  MOVLB  4
03982:  BTFSC  xB3.7
03984:  BRA    398C
03986:  MOVF   xB3,W
03988:  SUBLW  78
0398A:  BNC   3994
0398C:  MOVF   xB3,W
0398E:  XORLW  80
03990:  SUBLW  07
03992:  BNC   39AC
.................... 					{
.................... 					os_cor_t = OFF_SET_COR_T;
03994:  MOVLW  0A
03996:  MOVWF  xB3
.................... 					write_byte(ee_os_cor_t, os_cor_t);
03998:  MOVLB  A
0399A:  CLRF   x68
0399C:  MOVLW  0D
0399E:  MOVWF  x67
039A0:  MOVFF  4B3,A69
039A4:  MOVLB  0
039A6:  CALL   1C46
039AA:  MOVLB  4
.................... 					}
.................... 		        }
.................... 		#endif
.................... #endif
.................... 
.................... 	if ((os_ten_r1 > LIMITE_TEN_SUP) || (os_ten_r1 < LIMITE_TEN_INF))
039AC:  BTFSC  xAB.7
039AE:  BRA    39B6
039B0:  MOVF   xAB,W
039B2:  SUBLW  78
039B4:  BNC   39BE
039B6:  MOVF   xAB,W
039B8:  XORLW  80
039BA:  SUBLW  07
039BC:  BNC   39FC
.................... 		{
.................... 		os_ten_r1 = read_byte(ee_os_ten_r1);
039BE:  MOVLB  A
039C0:  CLRF   x66
039C2:  MOVLW  0E
039C4:  MOVWF  x65
039C6:  MOVLB  0
039C8:  CALL   1C24
039CC:  MOVFF  01,4AB
.................... 		if ((os_ten_r1 > LIMITE_TEN_SUP) || (os_ten_r1 < LIMITE_TEN_INF))
039D0:  MOVLB  4
039D2:  BTFSC  xAB.7
039D4:  BRA    39DC
039D6:  MOVF   xAB,W
039D8:  SUBLW  78
039DA:  BNC   39E4
039DC:  MOVF   xAB,W
039DE:  XORLW  80
039E0:  SUBLW  07
039E2:  BNC   39FC
.................... 			{
.................... 			os_ten_r1 = OFF_SET_TEN_R1;
039E4:  MOVLW  0A
039E6:  MOVWF  xAB
.................... 			write_byte(ee_os_ten_r1, os_ten_r1);
039E8:  MOVLB  A
039EA:  CLRF   x68
039EC:  MOVLW  0E
039EE:  MOVWF  x67
039F0:  MOVFF  4AB,A69
039F4:  MOVLB  0
039F6:  CALL   1C46
039FA:  MOVLB  4
.................... 			}
....................         }
.................... 	if ((os_ten_r2 == 0) || (os_ten_r2 == 255))
039FC:  MOVF   xAE,F
039FE:  BZ    3A04
03A00:  INCFSZ xAE,W
03A02:  BRA    3A38
.................... 		{
.................... 		os_ten_r2 = read_byte(ee_os_ten_r2);
03A04:  MOVLB  A
03A06:  CLRF   x66
03A08:  MOVLW  15
03A0A:  MOVWF  x65
03A0C:  MOVLB  0
03A0E:  CALL   1C24
03A12:  MOVFF  01,4AE
.................... 		if ((os_ten_r2 == 0) || (os_ten_r2 == 255))
03A16:  MOVLB  4
03A18:  MOVF   xAE,F
03A1A:  BZ    3A20
03A1C:  INCFSZ xAE,W
03A1E:  BRA    3A38
.................... 			{
.................... 			os_ten_r2 = 91;
03A20:  MOVLW  5B
03A22:  MOVWF  xAE
.................... 			write_byte(ee_os_ten_r2, os_ten_r2);
03A24:  MOVLB  A
03A26:  CLRF   x68
03A28:  MOVLW  15
03A2A:  MOVWF  x67
03A2C:  MOVFF  4AE,A69
03A30:  MOVLB  0
03A32:  CALL   1C46
03A36:  MOVLB  4
.................... 			}
....................         }
....................         
.................... 	#if (monofasico == false)
.................... 		if ((os_ten_s1 > LIMITE_TEN_SUP) || (os_ten_s1 < LIMITE_TEN_INF))
03A38:  BTFSC  xAC.7
03A3A:  BRA    3A42
03A3C:  MOVF   xAC,W
03A3E:  SUBLW  78
03A40:  BNC   3A4A
03A42:  MOVF   xAC,W
03A44:  XORLW  80
03A46:  SUBLW  07
03A48:  BNC   3A88
.................... 			{
.................... 			os_ten_s1 = read_byte(ee_os_ten_s1);
03A4A:  MOVLB  A
03A4C:  CLRF   x66
03A4E:  MOVLW  0F
03A50:  MOVWF  x65
03A52:  MOVLB  0
03A54:  CALL   1C24
03A58:  MOVFF  01,4AC
.................... 			if ((os_ten_s1 > LIMITE_TEN_SUP) || (os_ten_s1 < LIMITE_TEN_INF))
03A5C:  MOVLB  4
03A5E:  BTFSC  xAC.7
03A60:  BRA    3A68
03A62:  MOVF   xAC,W
03A64:  SUBLW  78
03A66:  BNC   3A70
03A68:  MOVF   xAC,W
03A6A:  XORLW  80
03A6C:  SUBLW  07
03A6E:  BNC   3A88
.................... 				{
.................... 				os_ten_s1 = OFF_SET_TEN_S1;
03A70:  MOVLW  0A
03A72:  MOVWF  xAC
.................... 				write_byte(ee_os_ten_s1, os_ten_s1);
03A74:  MOVLB  A
03A76:  CLRF   x68
03A78:  MOVLW  0F
03A7A:  MOVWF  x67
03A7C:  MOVFF  4AC,A69
03A80:  MOVLB  0
03A82:  CALL   1C46
03A86:  MOVLB  4
.................... 				}
.................... 	        }
.................... 		if ((os_ten_t1 > LIMITE_TEN_SUP) || (os_ten_t1 < LIMITE_TEN_INF))
03A88:  BTFSC  xAD.7
03A8A:  BRA    3A92
03A8C:  MOVF   xAD,W
03A8E:  SUBLW  78
03A90:  BNC   3A9A
03A92:  MOVF   xAD,W
03A94:  XORLW  80
03A96:  SUBLW  07
03A98:  BNC   3AD8
.................... 			{
.................... 			os_ten_t1 = read_byte(ee_os_ten_t1);
03A9A:  MOVLB  A
03A9C:  CLRF   x66
03A9E:  MOVLW  10
03AA0:  MOVWF  x65
03AA2:  MOVLB  0
03AA4:  CALL   1C24
03AA8:  MOVFF  01,4AD
.................... 			if ((os_ten_t1 > LIMITE_TEN_SUP) || (os_ten_t1 < LIMITE_TEN_INF))
03AAC:  MOVLB  4
03AAE:  BTFSC  xAD.7
03AB0:  BRA    3AB8
03AB2:  MOVF   xAD,W
03AB4:  SUBLW  78
03AB6:  BNC   3AC0
03AB8:  MOVF   xAD,W
03ABA:  XORLW  80
03ABC:  SUBLW  07
03ABE:  BNC   3AD8
.................... 				{
.................... 				os_ten_t1 = OFF_SET_TEN_T1;
03AC0:  MOVLW  0A
03AC2:  MOVWF  xAD
.................... 				write_byte(ee_os_ten_t1, os_ten_t1);
03AC4:  MOVLB  A
03AC6:  CLRF   x68
03AC8:  MOVLW  10
03ACA:  MOVWF  x67
03ACC:  MOVFF  4AD,A69
03AD0:  MOVLB  0
03AD2:  CALL   1C46
03AD6:  MOVLB  4
.................... 				}
.................... 	        }
.................... 		if ((os_ten_s2 == 0) || (os_ten_s2 == 255))
03AD8:  MOVF   xAF,F
03ADA:  BZ    3AE0
03ADC:  INCFSZ xAF,W
03ADE:  BRA    3B14
.................... 			{
.................... 			os_ten_s2 = read_byte(ee_os_ten_s2);
03AE0:  MOVLB  A
03AE2:  CLRF   x66
03AE4:  MOVLW  16
03AE6:  MOVWF  x65
03AE8:  MOVLB  0
03AEA:  CALL   1C24
03AEE:  MOVFF  01,4AF
.................... 			if ((os_ten_s2 == 0) || (os_ten_s2 == 255))
03AF2:  MOVLB  4
03AF4:  MOVF   xAF,F
03AF6:  BZ    3AFC
03AF8:  INCFSZ xAF,W
03AFA:  BRA    3B14
.................... 				{
.................... 				os_ten_s2 = 108;
03AFC:  MOVLW  6C
03AFE:  MOVWF  xAF
.................... 				write_byte(ee_os_ten_s2, os_ten_s2);
03B00:  MOVLB  A
03B02:  CLRF   x68
03B04:  MOVLW  16
03B06:  MOVWF  x67
03B08:  MOVFF  4AF,A69
03B0C:  MOVLB  0
03B0E:  CALL   1C46
03B12:  MOVLB  4
.................... 				}
.................... 	        }
.................... 		if ((os_ten_t2 == 0) || (os_ten_t2 == 255))
03B14:  MOVF   xB0,F
03B16:  BZ    3B1C
03B18:  INCFSZ xB0,W
03B1A:  BRA    3B50
.................... 			{
.................... 			os_ten_t2 = read_byte(ee_os_ten_t2);
03B1C:  MOVLB  A
03B1E:  CLRF   x66
03B20:  MOVLW  17
03B22:  MOVWF  x65
03B24:  MOVLB  0
03B26:  CALL   1C24
03B2A:  MOVFF  01,4B0
.................... 			if ((os_ten_t2 == 0) || (os_ten_t2 == 255))
03B2E:  MOVLB  4
03B30:  MOVF   xB0,F
03B32:  BZ    3B38
03B34:  INCFSZ xB0,W
03B36:  BRA    3B50
.................... 				{
.................... 				os_ten_t2 = 101;
03B38:  MOVLW  65
03B3A:  MOVWF  xB0
.................... 				write_byte(ee_os_ten_t2, os_ten_t2);
03B3C:  MOVLB  A
03B3E:  CLRF   x68
03B40:  MOVLW  17
03B42:  MOVWF  x67
03B44:  MOVFF  4B0,A69
03B48:  MOVLB  0
03B4A:  CALL   1C46
03B4E:  MOVLB  4
.................... 				}
.................... 	        }
.................... 
.................... 	        
.................... 	#endif
.................... 
.................... 	// offset fator de potencia
.................... 	#if (portatil == true)
.................... 		#if (se_com_flex ==	true)
.................... 			aux_w1 = ee_off_fp_9001g1;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TABELA_TIPO_PT; aux_b1++)
.................... 				{
.................... 				if (off_set_fp[aux_b1] > (OFF_SET_FP_R * 2))
.................... 					{
.................... 					off_set_fp[aux_b1] = read_byte(aux_w1);
.................... 					if (off_set_fp[aux_b1] > (OFF_SET_FP_R * 2))
.................... 						{
.................... 						off_set_fp[aux_b1] = OFF_SET_FP_R;
.................... 						write_byte(aux_w1, OFF_SET_FP_R);
.................... 						}
.................... 					}
.................... 				aux_w1++;
.................... 		        }
.................... 
.................... 			off_cor_r = off_set_fp[tipo_ponteira];
.................... 			if (off_cor_r > (NRO_AMOSTRAS/2))
.................... 				{
.................... 				aux_w1 = ee_off_fp_9001g1;
.................... 				aux_w1 += tipo_ponteira;
.................... 				off_cor_r = read_byte(aux_w1);
.................... 				off_set_fp[tipo_ponteira] = off_cor_r;
.................... 				if (off_cor_r > (NRO_AMOSTRAS/2))
.................... 					{
.................... 					off_cor_r = OFF_SET_FP_R;
.................... 					write_byte(aux_w1, off_cor_r);
.................... 					off_set_fp[tipo_ponteira] = off_cor_r;
.................... 					}
.................... 		    	}
.................... 			
.................... 		#else
.................... 			aux_w1 = ee_off_fp_20;
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (off_set_fp[aux_b1] > (OFF_SET_FP_R * 2))
.................... 					{
.................... 					off_set_fp[aux_b1] = read_byte(aux_w1);
.................... 					if (off_set_fp[aux_b1] > (OFF_SET_FP_R * 2))
.................... 						{
.................... 						off_set_fp[aux_b1] = OFF_SET_FP_R;
.................... 						write_byte(aux_w1, OFF_SET_FP_R);
.................... 						}
.................... 					}
.................... 				aux_w1++;
.................... 		        }
.................... 
.................... 			for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 				{
.................... 				if (valor_tc == tabela_tc[aux_b1])
.................... 					{
.................... 					off_cor_r = off_set_fp[aux_b1];
.................... 					break;
.................... 					}
.................... 				}
.................... 
.................... 			if (off_cor_r > NRO_AMOSTRAS/4)
.................... 				{
.................... 				aux_w1 = ee_off_fp_20;
.................... 				aux_w1 = aux_w1 + aux_b1;
.................... 				off_cor_r = read_byte(aux_w1);
.................... 				off_set_fp[aux_b1] = off_cor_r;
.................... 				if (off_cor_r > NRO_AMOSTRAS/4)
.................... 					{
.................... 					off_cor_r = OFF_SET_FP_R;
.................... 					write_byte(aux_w1, off_cor_r);
.................... 					off_set_fp[aux_b1] = off_cor_r;
.................... 					}
.................... 		    	}
.................... 
.................... 		#endif
.................... 	#else
.................... 		#if (ade7754 == true)
.................... 	
.................... 		#else
.................... 			if (((off_cor_r > (NRO_AMOSTRAS / 8)) &&  (off_cor_r < (NRO_AMOSTRAS-(NRO_AMOSTRAS / 8)))) || (off_cor_r >= NRO_AMOSTRAS))
03B50:  MOVF   xB7,W
03B52:  SUBLW  08
03B54:  BC    3B5C
03B56:  MOVF   xB7,W
03B58:  SUBLW  37
03B5A:  BC    3B62
03B5C:  MOVF   xB7,W
03B5E:  SUBLW  3F
03B60:  BC    3B9E
.................... 				{
.................... 				off_cor_r = read_byte(ee_off_cor_r);
03B62:  MOVLB  A
03B64:  CLRF   x66
03B66:  MOVLW  06
03B68:  MOVWF  x65
03B6A:  MOVLB  0
03B6C:  CALL   1C24
03B70:  MOVFF  01,4B7
.................... 				if (((off_cor_r > (NRO_AMOSTRAS / 8)) &&  (off_cor_r < (NRO_AMOSTRAS-(NRO_AMOSTRAS / 8)))) || (off_cor_r >= NRO_AMOSTRAS))
03B74:  MOVLB  4
03B76:  MOVF   xB7,W
03B78:  SUBLW  08
03B7A:  BC    3B82
03B7C:  MOVF   xB7,W
03B7E:  SUBLW  37
03B80:  BC    3B88
03B82:  MOVF   xB7,W
03B84:  SUBLW  3F
03B86:  BC    3B9E
.................... 					{
.................... 					off_cor_r = OFF_SET_FP_R;
03B88:  CLRF   xB7
.................... 					write_byte(ee_off_cor_r, off_cor_r);
03B8A:  MOVLB  A
03B8C:  CLRF   x68
03B8E:  MOVLW  06
03B90:  MOVWF  x67
03B92:  MOVFF  4B7,A69
03B96:  MOVLB  0
03B98:  CALL   1C46
03B9C:  MOVLB  4
.................... 					}
.................... 		    	}
.................... 		#endif
.................... 	
.................... 		#if (controlador == true)
.................... 			#if (monofasico == true)
.................... 				if ( (off_cor_s > ((NRO_AMOSTRAS / 2) - (NRO_AMOSTRAS/8)) ) && (off_cor_s < ((NRO_AMOSTRAS / 4) - (NRO_AMOSTRAS / 8))) )
.................... 					{
.................... 					off_cor_s = read_byte(ee_off_cor_s);
.................... 					if ((off_cor_s > ((NRO_AMOSTRAS / 2) - (NRO_AMOSTRAS/8))) && (off_cor_s < ((NRO_AMOSTRAS / 4) - (NRO_AMOSTRAS / 8))))
.................... 						{
.................... 						off_cor_s = (NRO_AMOSTRAS / 4);
.................... 						write_byte(ee_off_cor_s, off_cor_s);
.................... 						}
.................... 			    	}
.................... 			#else
.................... 				if (off_cor_s > NRO_AMOSTRAS)
03B9E:  MOVF   xB8,W
03BA0:  SUBLW  40
03BA2:  BC    3BD6
.................... 					{
.................... 					off_cor_s = read_byte(ee_off_cor_s);
03BA4:  MOVLB  A
03BA6:  CLRF   x66
03BA8:  MOVLW  07
03BAA:  MOVWF  x65
03BAC:  MOVLB  0
03BAE:  CALL   1C24
03BB2:  MOVFF  01,4B8
.................... 					if (off_cor_s > NRO_AMOSTRAS)
03BB6:  MOVLB  4
03BB8:  MOVF   xB8,W
03BBA:  SUBLW  40
03BBC:  BC    3BD6
.................... 						{
.................... 						off_cor_s = (NRO_AMOSTRAS / 4);
03BBE:  MOVLW  10
03BC0:  MOVWF  xB8
.................... 						write_byte(ee_off_cor_s, off_cor_s);
03BC2:  MOVLB  A
03BC4:  CLRF   x68
03BC6:  MOVLW  07
03BC8:  MOVWF  x67
03BCA:  MOVFF  4B8,A69
03BCE:  MOVLB  0
03BD0:  CALL   1C46
03BD4:  MOVLB  4
.................... 						}
.................... 			    	}
.................... 			 #endif
.................... 			#if (prog_defasagem ==	true)
.................... 			    if (defasagem > (nro_posi_tab_defasagem_trafo - 1))
03BD6:  MOVF   xBB,W
03BD8:  SUBLW  06
03BDA:  BC    3C0E
.................... 			    	{
.................... 	   				defasagem = read_byte(ee_defasagem);
03BDC:  MOVLB  A
03BDE:  CLRF   x66
03BE0:  MOVLW  18
03BE2:  MOVWF  x65
03BE4:  MOVLB  0
03BE6:  CALL   1C24
03BEA:  MOVFF  01,4BB
.................... 				    if (defasagem > (nro_posi_tab_defasagem_trafo - 1))
03BEE:  MOVLB  4
03BF0:  MOVF   xBB,W
03BF2:  SUBLW  06
03BF4:  BC    3C0E
.................... 				    	{
.................... 					    defasagem = posi_tab_defasagem_trafo_default;
03BF6:  MOVLW  03
03BF8:  MOVWF  xBB
.................... 					    write_byte(ee_defasagem, posi_tab_defasagem_trafo_default);
03BFA:  MOVLB  A
03BFC:  CLRF   x68
03BFE:  MOVLW  18
03C00:  MOVWF  x67
03C02:  MOVLW  03
03C04:  MOVWF  x69
03C06:  MOVLB  0
03C08:  CALL   1C46
03C0C:  MOVLB  4
.................... 					    }
.................... 				    }
.................... 			#endif
.................... 			 
.................... 		#else
.................... 			if (off_cor_s > NRO_AMOSTRAS)
.................... 				{
.................... 				off_cor_s = read_byte(ee_off_cor_s);
.................... 				if (off_cor_s > NRO_AMOSTRAS)
.................... 					{
.................... 					off_cor_s = 59;
.................... 					write_byte(ee_off_cor_s, off_cor_s);
.................... 					}
.................... 		    	}
.................... 		#endif
.................... 	#endif
.................... 
.................... 	#if (portatil == false)
.................... 		if ((os_pot_r > LIMITE_POT_SUP) || (os_pot_r < LIMITE_POT_INF))
03C0E:  BTFSC  xB4.7
03C10:  BRA    3C18
03C12:  MOVF   xB4,W
03C14:  SUBLW  78
03C16:  BNC   3C20
03C18:  MOVF   xB4,W
03C1A:  XORLW  80
03C1C:  SUBLW  07
03C1E:  BNC   3C5C
.................... 			{
.................... 			os_pot_r = read_byte(ee_os_pot_r);
03C20:  MOVLB  A
03C22:  CLRF   x66
03C24:  MOVLW  46
03C26:  MOVWF  x65
03C28:  MOVLB  0
03C2A:  CALL   1C24
03C2E:  MOVFF  01,4B4
.................... 			if ((os_pot_r > LIMITE_POT_SUP) || (os_pot_r < LIMITE_POT_INF))
03C32:  MOVLB  4
03C34:  BTFSC  xB4.7
03C36:  BRA    3C3E
03C38:  MOVF   xB4,W
03C3A:  SUBLW  78
03C3C:  BNC   3C46
03C3E:  MOVF   xB4,W
03C40:  XORLW  80
03C42:  SUBLW  07
03C44:  BNC   3C5C
.................... 				{
.................... 				os_pot_r = OFF_SET_POT_R;
03C46:  CLRF   xB4
.................... 				write_byte(ee_os_pot_r, os_pot_r);
03C48:  MOVLB  A
03C4A:  CLRF   x68
03C4C:  MOVLW  46
03C4E:  MOVWF  x67
03C50:  MOVFF  4B4,A69
03C54:  MOVLB  0
03C56:  CALL   1C46
03C5A:  MOVLB  4
.................... 				}
.................... 	        }
.................... 	
.................... 		#if (monofasico == false)
.................... 			if ((os_pot_s > LIMITE_POT_SUP) || (os_pot_s < LIMITE_POT_INF))
03C5C:  BTFSC  xB5.7
03C5E:  BRA    3C66
03C60:  MOVF   xB5,W
03C62:  SUBLW  78
03C64:  BNC   3C6E
03C66:  MOVF   xB5,W
03C68:  XORLW  80
03C6A:  SUBLW  07
03C6C:  BNC   3CAA
.................... 				{
.................... 				os_pot_s = read_byte(ee_os_pot_s);
03C6E:  MOVLB  A
03C70:  CLRF   x66
03C72:  MOVLW  47
03C74:  MOVWF  x65
03C76:  MOVLB  0
03C78:  CALL   1C24
03C7C:  MOVFF  01,4B5
.................... 				if (os_pot_s > LIMITE_POT_SUP || (os_pot_s < LIMITE_POT_INF))
03C80:  MOVLB  4
03C82:  BTFSC  xB5.7
03C84:  BRA    3C8C
03C86:  MOVF   xB5,W
03C88:  SUBLW  78
03C8A:  BNC   3C94
03C8C:  MOVF   xB5,W
03C8E:  XORLW  80
03C90:  SUBLW  07
03C92:  BNC   3CAA
.................... 					{
.................... 					os_pot_s = OFF_SET_POT_S;
03C94:  CLRF   xB5
.................... 					write_byte(ee_os_pot_s, os_pot_s);
03C96:  MOVLB  A
03C98:  CLRF   x68
03C9A:  MOVLW  47
03C9C:  MOVWF  x67
03C9E:  MOVFF  4B5,A69
03CA2:  MOVLB  0
03CA4:  CALL   1C46
03CA8:  MOVLB  4
.................... 					}
.................... 		        }
.................... 		
.................... 			if ((os_pot_t > LIMITE_POT_SUP) || (os_pot_t < LIMITE_POT_INF))
03CAA:  BTFSC  xB6.7
03CAC:  BRA    3CB4
03CAE:  MOVF   xB6,W
03CB0:  SUBLW  78
03CB2:  BNC   3CBC
03CB4:  MOVF   xB6,W
03CB6:  XORLW  80
03CB8:  SUBLW  07
03CBA:  BNC   3CF8
.................... 				{
.................... 				os_pot_t = read_byte(ee_os_pot_t);
03CBC:  MOVLB  A
03CBE:  CLRF   x66
03CC0:  MOVLW  48
03CC2:  MOVWF  x65
03CC4:  MOVLB  0
03CC6:  CALL   1C24
03CCA:  MOVFF  01,4B6
.................... 				if (os_pot_t > LIMITE_POT_SUP || (os_pot_t < LIMITE_POT_INF))
03CCE:  MOVLB  4
03CD0:  BTFSC  xB6.7
03CD2:  BRA    3CDA
03CD4:  MOVF   xB6,W
03CD6:  SUBLW  78
03CD8:  BNC   3CE2
03CDA:  MOVF   xB6,W
03CDC:  XORLW  80
03CDE:  SUBLW  07
03CE0:  BNC   3CF8
.................... 					{
.................... 					os_pot_t = OFF_SET_POT_T;
03CE2:  CLRF   xB6
.................... 					write_byte(ee_os_pot_t, os_pot_t);
03CE4:  MOVLB  A
03CE6:  CLRF   x68
03CE8:  MOVLW  48
03CEA:  MOVWF  x67
03CEC:  MOVFF  4B6,A69
03CF0:  MOVLB  0
03CF2:  CALL   1C46
03CF6:  MOVLB  4
.................... 					}
.................... 		        }
.................... 	
.................... 		#endif
.................... 	#endif
.................... 	
.................... 	#if (com_regs == true)
.................... 		if (forma_reg_cht > 3)
03CF8:  MOVF   xCD,W
03CFA:  SUBLW  03
03CFC:  BC    3D2C
.................... 			{
.................... 			forma_reg_cht = read_byte(ee_forma_reg_cht);
03CFE:  MOVLB  A
03D00:  CLRF   x66
03D02:  MOVLW  2A
03D04:  MOVWF  x65
03D06:  MOVLB  0
03D08:  CALL   1C24
03D0C:  MOVFF  01,4CD
.................... 			if (forma_reg_cht > 3)
03D10:  MOVLB  4
03D12:  MOVF   xCD,W
03D14:  SUBLW  03
03D16:  BC    3D2C
.................... 				{
.................... 				forma_reg_cht = 0;
03D18:  CLRF   xCD
.................... 				write_byte(ee_forma_reg_cht, 0);
03D1A:  MOVLB  A
03D1C:  CLRF   x68
03D1E:  MOVLW  2A
03D20:  MOVWF  x67
03D22:  CLRF   x69
03D24:  MOVLB  0
03D26:  CALL   1C46
03D2A:  MOVLB  4
.................... 				}
.................... 			}  
.................... 
.................... 		erro=1;
03D2C:  BSF    22.2
.................... 		#if (controlador == false)
.................... 			{
.................... 			for (aux_b1=0; aux_b1 < 21; aux_b1++)
.................... 				{
.................... 				if (intervalo_reg == tabela_intervalo_reg[aux_b1])
.................... 					{
.................... 					erro=0;
.................... 					break;
.................... 					}
.................... 				}
.................... 			if (erro==1)
.................... 				{
.................... 				intervalo_reg =  read_word(ee_intervalo_reg);
.................... 				for (aux_b1=0; aux_b1 < NRO_POSI_INTERVALO; aux_b1++)
.................... 					{
.................... 					if (intervalo_reg == tabela_intervalo_reg[aux_b1])
.................... 						{
.................... 						erro=0;
.................... 						break;
.................... 						}
.................... 					}
.................... 				if (erro==1)
.................... 					{
.................... 					intervalo_reg = INTERVALO_REG_DEFAULT;		
.................... 					write_word(ee_intervalo_reg, INTERVALO_REG_DEFAULT);
.................... 					}
.................... 				}
.................... 			}
.................... 		#else
.................... 			{
.................... 			intervalo_reg = INTERVALO_REG_DEFAULT;		
03D2E:  MOVLW  01
03D30:  MOVWF  xC6
03D32:  MOVLW  2C
03D34:  MOVWF  xC5
.................... 			}
.................... 		#endif
.................... 		
.................... 
.................... 	#endif
.................... 
.................... 	#if (st5x == false)
.................... 		erro = 1;
03D36:  BSF    22.2
.................... 		#if (portatil == true)	
.................... 			{
.................... 			#if (st9600r == true)
.................... 				#if (teste_baud_115	== true)
.................... 			  		set_uart_speed (57200, modbus);
.................... 				#else
.................... 				  	set_uart_speed (19200, modbus);
.................... 				#endif	
.................... 			#else
.................... 			  	set_uart_speed (19200, modbus);
.................... 			#endif	
.................... 				
.................... 			}
.................... 		#else
.................... 			for (aux_b1 = 0; aux_b1 < NRO_POSI_BAUD; aux_b1++)
03D38:  MOVLB  3
03D3A:  CLRF   xB1
03D3C:  MOVF   xB1,W
03D3E:  SUBLW  05
03D40:  BNC   3D74
.................... 				{
.................... 				if (baud_rate == tabela_baud[aux_b1])
03D42:  BCF    FD8.0
03D44:  RLCF   xB1,W
03D46:  CLRF   03
03D48:  MOVLB  0
03D4A:  CALL   0108
03D4E:  TBLRD*+
03D50:  MOVFF  FF5,03
03D54:  MOVLB  4
03D56:  SUBWF  xC3,W
03D58:  BNZ   3D6E
03D5A:  MOVF   03,W
03D5C:  SUBWF  xC4,W
03D5E:  BNZ   3D6E
.................... 					{
.................... 				  	seta_baud_rate();
03D60:  MOVLB  0
03D62:  CALL   1766
.................... 					erro = 0;
03D66:  BCF    22.2
.................... 					break;
03D68:  MOVLB  3
03D6A:  BRA    3D74
03D6C:  MOVLB  4
.................... 					}
03D6E:  MOVLB  3
03D70:  INCF   xB1,F
03D72:  BRA    3D3C
.................... 				}
.................... 			if (erro == 1)
03D74:  BTFSS  22.2
03D76:  BRA    3DE8
.................... 				{
.................... 				baud_rate =  read_word(ee_baud_rate);
03D78:  MOVLB  A
03D7A:  CLRF   x5D
03D7C:  MOVLW  2D
03D7E:  MOVWF  x5C
03D80:  MOVLB  0
03D82:  CALL   170A
03D86:  MOVFF  02,4C4
03D8A:  MOVFF  01,4C3
.................... 				for (aux_b1 = 0; aux_b1 < NRO_POSI_BAUD; aux_b1++)
03D8E:  MOVLB  3
03D90:  CLRF   xB1
03D92:  MOVF   xB1,W
03D94:  SUBLW  05
03D96:  BNC   3DC4
.................... 					{
.................... 					if (baud_rate == tabela_baud[aux_b1])
03D98:  BCF    FD8.0
03D9A:  RLCF   xB1,W
03D9C:  CLRF   03
03D9E:  MOVLB  0
03DA0:  CALL   0108
03DA4:  TBLRD*+
03DA6:  MOVFF  FF5,03
03DAA:  MOVLB  4
03DAC:  SUBWF  xC3,W
03DAE:  BNZ   3DBE
03DB0:  MOVF   03,W
03DB2:  SUBWF  xC4,W
03DB4:  BNZ   3DBE
.................... 						{
.................... 						erro = 0;
03DB6:  BCF    22.2
.................... 						break;
03DB8:  MOVLB  3
03DBA:  BRA    3DC4
03DBC:  MOVLB  4
.................... 						}
03DBE:  MOVLB  3
03DC0:  INCF   xB1,F
03DC2:  BRA    3D92
.................... 					}
.................... 				if (erro == 1)
03DC4:  BTFSS  22.2
03DC6:  BRA    3DE8
.................... 					{
.................... 					baud_rate =  tabela_baud[3];
03DC8:  MOVLW  4B
03DCA:  MOVLB  4
03DCC:  MOVWF  xC4
03DCE:  CLRF   xC3
.................... 					write_byte(ee_baud_rate, baud_rate);
03DD0:  MOVLB  A
03DD2:  CLRF   x68
03DD4:  MOVLW  2D
03DD6:  MOVWF  x67
03DD8:  MOVFF  4C3,A69
03DDC:  MOVLB  0
03DDE:  CALL   1C46
.................... 				  	seta_baud_rate();
03DE2:  CALL   1766
03DE6:  MOVLB  3
.................... 					}
.................... 				}
.................... 		#endif
.................... 		endereco =  read_byte(ee_endereco);
03DE8:  MOVLB  A
03DEA:  CLRF   x66
03DEC:  MOVLW  26
03DEE:  MOVWF  x65
03DF0:  MOVLB  0
03DF2:  CALL   1C24
03DF6:  MOVFF  01,4CE
.................... 		if ((endereco == 0) || (endereco > 248))
03DFA:  MOVLB  4
03DFC:  MOVF   xCE,F
03DFE:  BZ    3E06
03E00:  MOVF   xCE,W
03E02:  SUBLW  F8
03E04:  BC    3E1E
.................... 			{
.................... 			endereco = 1;
03E06:  MOVLW  01
03E08:  MOVWF  xCE
.................... 			write_byte(ee_endereco, endereco);
03E0A:  MOVLB  A
03E0C:  CLRF   x68
03E0E:  MOVLW  26
03E10:  MOVWF  x67
03E12:  MOVFF  4CE,A69
03E16:  MOVLB  0
03E18:  CALL   1C46
03E1C:  MOVLB  4
.................... 			}
.................... 	#endif
.................... 	#if (home_system == true)
.................... 		endereco =  read_byte(ee_endereco);
.................... 		if (endereco == 255)
.................... 			{
.................... 			endereco = 100;
.................... 			write_byte(ee_endereco, endereco);
.................... 			}
.................... 	#endif
.................... 
.................... 	#if (st8500c == true)
.................... 		#if (com_tc == true)
.................... 		 	if (intervalo_integra != 15)
03E1E:  MOVF   xCF,W
03E20:  SUBLW  0F
03E22:  BZ    3E3C
.................... 		 		{
.................... 			 	intervalo_integra = 15;
03E24:  MOVLW  0F
03E26:  MOVWF  xCF
.................... 			 	write_byte(ee_intervalo_integra, 15);
03E28:  MOVLB  A
03E2A:  CLRF   x68
03E2C:  MOVLW  29
03E2E:  MOVWF  x67
03E30:  MOVLW  0F
03E32:  MOVWF  x69
03E34:  MOVLB  0
03E36:  CALL   1C46
03E3A:  MOVLB  4
.................... 			 	}
.................... 		#endif
.................... 	#endif
.................... 	#if (CONTROLADOR == false)
.................... 		intervalo_integra = valida_byte(intervalo_integra, ee_intervalo_integra, 0, 60, 15);
.................... 	#endif	
.................... 	#if (CONTROLADOR == true) || (st_prog == true)
.................... 		#if (st8500c == false)
.................... 			#if (com_rep == true)
.................... 				cor_minima_rep = valida_word(cor_minima_rep, ee_cor_minima_rep, 0, 9999, 0);
.................... 			#endif
.................... 			cor_minima = valida_byte(cor_minima, ee_cor_minima, 0, 50, 2);
.................... 			com_des_ten_a = valida_byte(com_des_ten_a, ee_com_des_ten_a, 0, 50, 0);
.................... 			com_des_ten_b = valida_byte(com_des_ten_b, ee_com_des_ten_b, 0, 50, 0);
.................... 			com_des_chtt = valida_byte(com_des_chtt, ee_com_des_chtt, 0, 50, 0);
.................... 			com_des_chtc = valida_byte(com_des_chtc, ee_com_des_chtc, 0, 50, 0);
.................... 			com_des_fp_ind_cap = valida_byte(com_des_fp_ind_cap, ee_com_des_fp_ind_cap, 80, (98+(100-set_point)), 100);
.................... 		#endif
.................... 
.................... 		#if (st8500c == true)
.................... 			for (aux_b1 = 0; aux_b1 < NRO_MAXIMO_CARGAS; aux_b1++)
03E3C:  MOVLB  3
03E3E:  CLRF   xB1
03E40:  MOVF   xB1,W
03E42:  SUBLW  0F
03E44:  BNC   3EA8
.................... 				{
.................... 				carga[aux_b1] = valida_byte(carga[aux_b1], (ee_carga_1 + aux_b1), 0, MAXIMA_CARGA, 100);
03E46:  CLRF   03
03E48:  MOVF   xB1,W
03E4A:  ADDLW  07
03E4C:  MOVWF  01
03E4E:  MOVLW  01
03E50:  ADDWFC 03,F
03E52:  MOVFF  01,A4C
03E56:  MOVFF  03,A4D
03E5A:  CLRF   03
03E5C:  MOVLB  3
03E5E:  MOVF   xB1,W
03E60:  ADDLW  07
03E62:  MOVWF  FE9
03E64:  MOVLW  01
03E66:  ADDWFC 03,W
03E68:  MOVWF  FEA
03E6A:  MOVFF  FEF,A51
03E6E:  MOVLW  F3
03E70:  ADDWF  xB1,W
03E72:  MOVLB  A
03E74:  MOVWF  x4F
03E76:  MOVLW  02
03E78:  MOVWF  x50
03E7A:  BTFSC  FD8.0
03E7C:  INCF   x50,F
03E7E:  MOVFF  A50,A53
03E82:  MOVFF  A4F,A52
03E86:  CLRF   x54
03E88:  MOVLW  FA
03E8A:  MOVWF  x55
03E8C:  MOVLW  64
03E8E:  MOVWF  x56
03E90:  MOVLB  0
03E92:  CALL   34B0
03E96:  MOVFF  A4D,FEA
03E9A:  MOVFF  A4C,FE9
03E9E:  MOVFF  01,FEF
03EA2:  MOVLB  3
03EA4:  INCF   xB1,F
03EA6:  BRA    3E40
.................... 				}
.................... 			vali_nro_cargas();   	
03EA8:  MOVLB  0
03EAA:  CALL   1C78
.................... 			valida_max_kw();
03EAE:  CALL   35F8
.................... 		#else
.................... 			if (banco_capacitor[0] > 250)
.................... 				{
.................... 				banco_capacitor[0] = read_byte(ee_banco_capacitor_1);
.................... 				if (banco_capacitor[0] > 250)
.................... 					{
.................... 					banco_capacitor[0] = 5;
.................... 					write_byte(ee_banco_capacitor_1,5);
.................... 					}
.................... 				}
.................... 			vali_nro_bancos_capacitor();	    	
.................... 			valida_min_max_kvar();
.................... 		#endif
.................... 
.................... 		
.................... 		#if (st8500c == true) 
.................... 			tempo_aciona = valida_byte(tempo_aciona, ee_tempo_aciona, 5, 240, 30);				//mínimo alterado de 30s para 5s
03EB2:  MOVFF  6A,A51
03EB6:  MOVLW  02
03EB8:  MOVLB  A
03EBA:  MOVWF  x53
03EBC:  MOVLW  83
03EBE:  MOVWF  x52
03EC0:  MOVLW  05
03EC2:  MOVWF  x54
03EC4:  MOVLW  F0
03EC6:  MOVWF  x55
03EC8:  MOVLW  1E
03ECA:  MOVWF  x56
03ECC:  MOVLB  0
03ECE:  CALL   34B0
03ED2:  MOVFF  01,6A
.................... 			tempo_desaciona = valida_byte(tempo_desaciona, ee_tempo_desaciona, 5, 240, 30);		//mínimo alterado de 30s para 5s
03ED6:  MOVFF  6B,A51
03EDA:  MOVLW  02
03EDC:  MOVLB  A
03EDE:  MOVWF  x53
03EE0:  MOVLW  84
03EE2:  MOVWF  x52
03EE4:  MOVLW  05
03EE6:  MOVWF  x54
03EE8:  MOVLW  F0
03EEA:  MOVWF  x55
03EEC:  MOVLW  1E
03EEE:  MOVWF  x56
03EF0:  MOVLB  0
03EF2:  CALL   34B0
03EF6:  MOVFF  01,6B
.................... 			aux_w1 = 0;
03EFA:  MOVLB  3
03EFC:  CLRF   x63
03EFE:  CLRF   x62
.................... 			for (aux_b1 = 0; aux_b1 < 13; aux_b1++)
03F00:  CLRF   xB1
03F02:  MOVF   xB1,W
03F04:  SUBLW  0C
03F06:  BTFSS  FD8.0
03F08:  BRA    4006
.................... 				{
.................... 				dem_cont_ponta[aux_b1] = valida_word(dem_cont_ponta[aux_b1], (ee_dem_cont_ponta + aux_w1), 0, CARGA_INSTALADA_MAX, NRO_MAXIMO_CARGAS * 100);
03F0A:  BCF    FD8.0
03F0C:  RLCF   xB1,W
03F0E:  CLRF   03
03F10:  ADDLW  DB
03F12:  MOVWF  01
03F14:  MOVLW  04
03F16:  ADDWFC 03,F
03F18:  MOVFF  01,A4C
03F1C:  MOVFF  03,A4D
03F20:  BCF    FD8.0
03F22:  MOVLB  3
03F24:  RLCF   xB1,W
03F26:  CLRF   03
03F28:  ADDLW  DB
03F2A:  MOVWF  FE9
03F2C:  MOVLW  04
03F2E:  ADDWFC 03,W
03F30:  MOVWF  FEA
03F32:  MOVFF  FEC,A53
03F36:  MOVF   FED,F
03F38:  MOVFF  FEF,A52
03F3C:  MOVLW  16
03F3E:  ADDWF  x62,W
03F40:  MOVLB  A
03F42:  MOVWF  x50
03F44:  MOVLW  03
03F46:  MOVLB  3
03F48:  ADDWFC x63,W
03F4A:  MOVLB  A
03F4C:  MOVWF  x51
03F4E:  MOVWF  x55
03F50:  MOVFF  A50,A54
03F54:  CLRF   x57
03F56:  CLRF   x56
03F58:  MOVLW  FD
03F5A:  MOVWF  x59
03F5C:  MOVLW  E8
03F5E:  MOVWF  x58
03F60:  MOVLW  06
03F62:  MOVWF  x5B
03F64:  MOVLW  40
03F66:  MOVWF  x5A
03F68:  MOVLB  0
03F6A:  CALL   357A
03F6E:  MOVFF  A4D,FEA
03F72:  MOVFF  A4C,FE9
03F76:  MOVFF  02,FEC
03F7A:  MOVF   FED,F
03F7C:  MOVFF  01,FEF
.................... 				dem_cont_fora_ponta[aux_b1] = valida_word(dem_cont_fora_ponta[aux_b1], (ee_dem_cont_fora_ponta + aux_w1), 0, CARGA_INSTALADA_MAX, NRO_MAXIMO_CARGAS * 100);
03F80:  BCF    FD8.0
03F82:  MOVLB  3
03F84:  RLCF   xB1,W
03F86:  CLRF   03
03F88:  ADDLW  F5
03F8A:  MOVWF  01
03F8C:  MOVLW  04
03F8E:  ADDWFC 03,F
03F90:  MOVFF  01,A4C
03F94:  MOVFF  03,A4D
03F98:  BCF    FD8.0
03F9A:  MOVLB  3
03F9C:  RLCF   xB1,W
03F9E:  CLRF   03
03FA0:  ADDLW  F5
03FA2:  MOVWF  FE9
03FA4:  MOVLW  04
03FA6:  ADDWFC 03,W
03FA8:  MOVWF  FEA
03FAA:  MOVFF  FEC,A53
03FAE:  MOVF   FED,F
03FB0:  MOVFF  FEF,A52
03FB4:  MOVLW  2E
03FB6:  ADDWF  x62,W
03FB8:  MOVLB  A
03FBA:  MOVWF  x50
03FBC:  MOVLW  03
03FBE:  MOVLB  3
03FC0:  ADDWFC x63,W
03FC2:  MOVLB  A
03FC4:  MOVWF  x51
03FC6:  MOVWF  x55
03FC8:  MOVFF  A50,A54
03FCC:  CLRF   x57
03FCE:  CLRF   x56
03FD0:  MOVLW  FD
03FD2:  MOVWF  x59
03FD4:  MOVLW  E8
03FD6:  MOVWF  x58
03FD8:  MOVLW  06
03FDA:  MOVWF  x5B
03FDC:  MOVLW  40
03FDE:  MOVWF  x5A
03FE0:  MOVLB  0
03FE2:  CALL   357A
03FE6:  MOVFF  A4D,FEA
03FEA:  MOVFF  A4C,FE9
03FEE:  MOVFF  02,FEC
03FF2:  MOVF   FED,F
03FF4:  MOVFF  01,FEF
.................... 				aux_w1 += 2;
03FF8:  MOVLW  02
03FFA:  MOVLB  3
03FFC:  ADDWF  x62,F
03FFE:  MOVLW  00
04000:  ADDWFC x63,F
04002:  INCF   xB1,F
04004:  BRA    3F02
.................... 				}
.................... 			carga_programada = valida_word(carga_programada, ee_carga_programada, 0, CARGA_INSTALADA_MAX, MAXIMA_CARGA_TOTAL);
04006:  MOVFF  510,A53
0400A:  MOVFF  50F,A52
0400E:  MOVLW  03
04010:  MOVLB  A
04012:  MOVWF  x55
04014:  MOVLW  DC
04016:  MOVWF  x54
04018:  CLRF   x57
0401A:  CLRF   x56
0401C:  MOVLW  FD
0401E:  MOVWF  x59
04020:  MOVLW  E8
04022:  MOVWF  x58
04024:  MOVLW  0F
04026:  MOVWF  x5B
04028:  MOVLW  A0
0402A:  MOVWF  x5A
0402C:  MOVLB  0
0402E:  CALL   357A
04032:  MOVFF  02,510
04036:  MOVFF  01,50F
.................... 
.................... 			#if (com_rep == true)
.................... 				fat_conv_ativa = valida_word(fat_conv_ativa, ee_fat_conv_ativa, 1, 9999, 1000);
.................... 				fat_conv_reativa = valida_word(fat_conv_reativa, ee_fat_conv_reativa, 1, 9999, 1000);
.................... 				protocolo_REP = valida_byte(protocolo_REP, ee_protocolo_REP, 0, 3, 0);
.................... 			#endif
.................... 			
.................... 
.................... 			dia_inicio_pc = valida_byte(dia_inicio_pc, ee_dia_inicio_pc, 1, 31, 1);
0403A:  MOVFF  511,A51
0403E:  MOVLW  03
04040:  MOVLB  A
04042:  MOVWF  x53
04044:  MOVLW  DE
04046:  MOVWF  x52
04048:  MOVLW  01
0404A:  MOVWF  x54
0404C:  MOVLW  1F
0404E:  MOVWF  x55
04050:  MOVLW  01
04052:  MOVWF  x56
04054:  MOVLB  0
04056:  CALL   34B0
0405A:  MOVFF  01,511
.................... 			mes_inicio_pc = valida_byte(mes_inicio_pc, ee_mes_inicio_pc, 1, 12, 5);
0405E:  MOVFF  512,A51
04062:  MOVLW  03
04064:  MOVLB  A
04066:  MOVWF  x53
04068:  MOVLW  DF
0406A:  MOVWF  x52
0406C:  MOVLW  01
0406E:  MOVWF  x54
04070:  MOVLW  0C
04072:  MOVWF  x55
04074:  MOVLW  05
04076:  MOVWF  x56
04078:  MOVLB  0
0407A:  CALL   34B0
0407E:  MOVFF  01,512
.................... 			dia_final_pc = valida_byte(dia_final_pc, ee_dia_final_pc, 1, 31, 30);
04082:  MOVFF  513,A51
04086:  MOVLW  03
04088:  MOVLB  A
0408A:  MOVWF  x53
0408C:  MOVLW  E0
0408E:  MOVWF  x52
04090:  MOVLW  01
04092:  MOVWF  x54
04094:  MOVLW  1F
04096:  MOVWF  x55
04098:  MOVLW  1E
0409A:  MOVWF  x56
0409C:  MOVLB  0
0409E:  CALL   34B0
040A2:  MOVFF  01,513
.................... 			mes_final_pc = valida_byte(mes_final_pc, ee_mes_final_pc, ee_mes_inicio_pc, 12, 11);
040A6:  MOVFF  514,A51
040AA:  MOVLW  03
040AC:  MOVLB  A
040AE:  MOVWF  x53
040B0:  MOVLW  E1
040B2:  MOVWF  x52
040B4:  MOVLW  DF
040B6:  MOVWF  x54
040B8:  MOVLW  0C
040BA:  MOVWF  x55
040BC:  MOVLW  0B
040BE:  MOVWF  x56
040C0:  MOVLB  0
040C2:  CALL   34B0
040C6:  MOVFF  01,514
.................... 	
.................... 			if ((mes_final_pc == mes_inicio_pc) || (mes_final_pc < mes_inicio_pc))
040CA:  MOVLB  5
040CC:  MOVF   x12,W
040CE:  SUBWF  x14,W
040D0:  BZ    40D8
040D2:  MOVF   x12,W
040D4:  SUBWF  x14,W
040D6:  BC    414C
.................... 				{
.................... 				mes_final_pc = read_byte(ee_mes_final_pc);
040D8:  MOVLW  03
040DA:  MOVLB  A
040DC:  MOVWF  x66
040DE:  MOVLW  E1
040E0:  MOVWF  x65
040E2:  MOVLB  0
040E4:  CALL   1C24
040E8:  MOVFF  01,514
.................... 				mes_inicio_pc = read_byte(ee_mes_inicio_pc);
040EC:  MOVLW  03
040EE:  MOVLB  A
040F0:  MOVWF  x66
040F2:  MOVLW  DF
040F4:  MOVWF  x65
040F6:  MOVLB  0
040F8:  CALL   1C24
040FC:  MOVFF  01,512
.................... 				if ((mes_final_pc == mes_inicio_pc) || (mes_final_pc < mes_inicio_pc))
04100:  MOVLB  5
04102:  MOVF   x12,W
04104:  SUBWF  x14,W
04106:  BZ    410E
04108:  MOVF   x12,W
0410A:  SUBWF  x14,W
0410C:  BC    414C
.................... 					{
.................... 					if (mes_inicio_pc != 12)
0410E:  MOVF   x12,W
04110:  SUBLW  0C
04112:  BZ    411A
.................... 						{
.................... 						mes_final_pc = 11;
04114:  MOVLW  0B
04116:  MOVWF  x14
.................... 						}
04118:  BRA    4122
.................... 					else
.................... 						{
.................... 						mes_final_pc = 11;
0411A:  MOVLW  0B
0411C:  MOVWF  x14
.................... 						mes_inicio_pc = 5;
0411E:  MOVLW  05
04120:  MOVWF  x12
.................... 						}
.................... 					write_byte(ee_mes_inicio_pc, mes_inicio_pc);
04122:  MOVLW  03
04124:  MOVLB  A
04126:  MOVWF  x68
04128:  MOVLW  DF
0412A:  MOVWF  x67
0412C:  MOVFF  512,A69
04130:  MOVLB  0
04132:  CALL   1C46
.................... 					write_byte(ee_mes_final_pc, mes_final_pc);
04136:  MOVLW  03
04138:  MOVLB  A
0413A:  MOVWF  x68
0413C:  MOVLW  E1
0413E:  MOVWF  x67
04140:  MOVFF  514,A69
04144:  MOVLB  0
04146:  CALL   1C46
0414A:  MOVLB  5
.................... 					}
.................... 				}
.................... 
.................... 			tipo_controle_demanda = valida_byte(tipo_controle_demanda, ee_tipo_controle_demanda, 0, 1, 0);
0414C:  MOVFF  84,A51
04150:  MOVLB  A
04152:  CLRF   x53
04154:  MOVLW  4F
04156:  MOVWF  x52
04158:  CLRF   x54
0415A:  MOVLW  01
0415C:  MOVWF  x55
0415E:  CLRF   x56
04160:  MOVLB  0
04162:  CALL   34B0
04166:  MOVFF  01,84
.................... 
.................... 			for (aux_b1 = 0; aux_b1 < NRO_MAXIMO_CARGAS; aux_b1++)
0416A:  MOVLB  3
0416C:  CLRF   xB1
0416E:  MOVF   xB1,W
04170:  SUBLW  0F
04172:  BTFSS  FD8.0
04174:  BRA    436E
.................... 				{
.................... 				if ((forma_controle[aux_b1] != 'D' ) && (forma_controle[aux_b1] != 'H'))
04176:  CLRF   03
04178:  MOVF   xB1,W
0417A:  ADDLW  59
0417C:  MOVWF  FE9
0417E:  MOVLW  01
04180:  ADDWFC 03,W
04182:  MOVWF  FEA
04184:  MOVF   FEF,W
04186:  SUBLW  44
04188:  BZ    4226
0418A:  CLRF   03
0418C:  MOVF   xB1,W
0418E:  ADDLW  59
04190:  MOVWF  FE9
04192:  MOVLW  01
04194:  ADDWFC 03,W
04196:  MOVWF  FEA
04198:  MOVF   FEF,W
0419A:  SUBLW  48
0419C:  BZ    4226
.................... 					{
.................... 					forma_controle[aux_b1] = read_byte(ee_forma_controle + aux_b1);
0419E:  CLRF   03
041A0:  MOVF   xB1,W
041A2:  ADDLW  59
041A4:  MOVWF  01
041A6:  MOVLW  01
041A8:  ADDWFC 03,F
041AA:  MOVFF  01,A4C
041AE:  MOVFF  03,A4D
041B2:  MOVLW  50
041B4:  MOVLB  3
041B6:  ADDWF  xB1,W
041B8:  MOVLB  A
041BA:  MOVWF  x4E
041BC:  CLRF   x66
041BE:  MOVWF  x65
041C0:  MOVLB  0
041C2:  CALL   1C24
041C6:  MOVFF  A4D,FEA
041CA:  MOVFF  A4C,FE9
041CE:  MOVFF  01,FEF
.................... 					if ((forma_controle[aux_b1] != 'D' ) && (forma_controle[aux_b1] != 'H'))
041D2:  CLRF   03
041D4:  MOVLB  3
041D6:  MOVF   xB1,W
041D8:  ADDLW  59
041DA:  MOVWF  FE9
041DC:  MOVLW  01
041DE:  ADDWFC 03,W
041E0:  MOVWF  FEA
041E2:  MOVF   FEF,W
041E4:  SUBLW  44
041E6:  BZ    4226
041E8:  CLRF   03
041EA:  MOVF   xB1,W
041EC:  ADDLW  59
041EE:  MOVWF  FE9
041F0:  MOVLW  01
041F2:  ADDWFC 03,W
041F4:  MOVWF  FEA
041F6:  MOVF   FEF,W
041F8:  SUBLW  48
041FA:  BZ    4226
.................... 						{
.................... 						forma_controle[aux_b1] = 'D';
041FC:  CLRF   03
041FE:  MOVF   xB1,W
04200:  ADDLW  59
04202:  MOVWF  FE9
04204:  MOVLW  01
04206:  ADDWFC 03,W
04208:  MOVWF  FEA
0420A:  MOVLW  44
0420C:  MOVWF  FEF
.................... 						write_byte(ee_forma_controle + aux_b1, 'D');
0420E:  MOVLW  50
04210:  ADDWF  xB1,W
04212:  MOVLB  A
04214:  MOVWF  x4C
04216:  CLRF   x68
04218:  MOVWF  x67
0421A:  MOVLW  44
0421C:  MOVWF  x69
0421E:  MOVLB  0
04220:  CALL   1C46
04224:  MOVLB  3
.................... 						}
.................... 					}
.................... 				hora_liga_controle[aux_b1] = valida_byte(hora_liga_controle[aux_b1], (ee_hora_liga_controle + aux_b1), 0, 23, 18);
04226:  CLRF   03
04228:  MOVF   xB1,W
0422A:  ADDLW  6A
0422C:  MOVWF  01
0422E:  MOVLW  01
04230:  ADDWFC 03,F
04232:  MOVFF  01,A4C
04236:  MOVFF  03,A4D
0423A:  CLRF   03
0423C:  MOVLB  3
0423E:  MOVF   xB1,W
04240:  ADDLW  6A
04242:  MOVWF  FE9
04244:  MOVLW  01
04246:  ADDWFC 03,W
04248:  MOVWF  FEA
0424A:  MOVFF  FEF,A51
0424E:  MOVLW  60
04250:  ADDWF  xB1,W
04252:  MOVLB  A
04254:  MOVWF  x4F
04256:  CLRF   x53
04258:  MOVWF  x52
0425A:  CLRF   x54
0425C:  MOVLW  17
0425E:  MOVWF  x55
04260:  MOVLW  12
04262:  MOVWF  x56
04264:  MOVLB  0
04266:  CALL   34B0
0426A:  MOVFF  A4D,FEA
0426E:  MOVFF  A4C,FE9
04272:  MOVFF  01,FEF
.................... 				minuto_liga_controle[aux_b1] = valida_byte(minuto_liga_controle[aux_b1], (ee_minuto_liga_controle + aux_b1), 0, 59, 0);
04276:  CLRF   03
04278:  MOVLB  3
0427A:  MOVF   xB1,W
0427C:  ADDLW  7B
0427E:  MOVWF  01
04280:  MOVLW  01
04282:  ADDWFC 03,F
04284:  MOVFF  01,A4C
04288:  MOVFF  03,A4D
0428C:  CLRF   03
0428E:  MOVLB  3
04290:  MOVF   xB1,W
04292:  ADDLW  7B
04294:  MOVWF  FE9
04296:  MOVLW  01
04298:  ADDWFC 03,W
0429A:  MOVWF  FEA
0429C:  MOVFF  FEF,A51
042A0:  MOVLW  70
042A2:  ADDWF  xB1,W
042A4:  MOVLB  A
042A6:  MOVWF  x4F
042A8:  CLRF   x53
042AA:  MOVWF  x52
042AC:  CLRF   x54
042AE:  MOVLW  3B
042B0:  MOVWF  x55
042B2:  CLRF   x56
042B4:  MOVLB  0
042B6:  CALL   34B0
042BA:  MOVFF  A4D,FEA
042BE:  MOVFF  A4C,FE9
042C2:  MOVFF  01,FEF
.................... 				hora_desliga_controle[aux_b1] = valida_byte(hora_desliga_controle[aux_b1], (ee_hora_desliga_controle + aux_b1), 0, 23, 21);
042C6:  CLRF   03
042C8:  MOVLB  3
042CA:  MOVF   xB1,W
042CC:  ADDLW  8C
042CE:  MOVWF  01
042D0:  MOVLW  01
042D2:  ADDWFC 03,F
042D4:  MOVFF  01,A4C
042D8:  MOVFF  03,A4D
042DC:  CLRF   03
042DE:  MOVLB  3
042E0:  MOVF   xB1,W
042E2:  ADDLW  8C
042E4:  MOVWF  FE9
042E6:  MOVLW  01
042E8:  ADDWFC 03,W
042EA:  MOVWF  FEA
042EC:  MOVFF  FEF,A51
042F0:  MOVLW  80
042F2:  ADDWF  xB1,W
042F4:  MOVLB  A
042F6:  MOVWF  x4F
042F8:  CLRF   x53
042FA:  MOVWF  x52
042FC:  CLRF   x54
042FE:  MOVLW  17
04300:  MOVWF  x55
04302:  MOVLW  15
04304:  MOVWF  x56
04306:  MOVLB  0
04308:  CALL   34B0
0430C:  MOVFF  A4D,FEA
04310:  MOVFF  A4C,FE9
04314:  MOVFF  01,FEF
.................... 				minuto_desliga_controle[aux_b1] = valida_byte(minuto_desliga_controle[aux_b1], (ee_minuto_desliga_controle + aux_b1), 0, 59, 0);
04318:  CLRF   03
0431A:  MOVLB  3
0431C:  MOVF   xB1,W
0431E:  ADDLW  9D
04320:  MOVWF  01
04322:  MOVLW  01
04324:  ADDWFC 03,F
04326:  MOVFF  01,A4C
0432A:  MOVFF  03,A4D
0432E:  CLRF   03
04330:  MOVLB  3
04332:  MOVF   xB1,W
04334:  ADDLW  9D
04336:  MOVWF  FE9
04338:  MOVLW  01
0433A:  ADDWFC 03,W
0433C:  MOVWF  FEA
0433E:  MOVFF  FEF,A51
04342:  MOVLW  90
04344:  ADDWF  xB1,W
04346:  MOVLB  A
04348:  MOVWF  x4F
0434A:  CLRF   x53
0434C:  MOVWF  x52
0434E:  CLRF   x54
04350:  MOVLW  3B
04352:  MOVWF  x55
04354:  CLRF   x56
04356:  MOVLB  0
04358:  CALL   34B0
0435C:  MOVFF  A4D,FEA
04360:  MOVFF  A4C,FE9
04364:  MOVFF  01,FEF
04368:  MOVLB  3
0436A:  INCF   xB1,F
0436C:  BRA    416E
.................... 				}
.................... 			if ((modo_saidas != MODO_INVERTIDO) && (modo_saidas != MODO_NORMAL))
0436E:  MOVLB  0
04370:  MOVF   x6C,F
04372:  BZ    43AC
04374:  DECFSZ x6C,W
04376:  BRA    437A
04378:  BRA    43AC
.................... 				{
.................... 				modo_saidas = read_byte(ee_modo_saidas);
0437A:  MOVLB  A
0437C:  CLRF   x66
0437E:  MOVLW  4C
04380:  MOVWF  x65
04382:  MOVLB  0
04384:  CALL   1C24
04388:  MOVFF  01,6C
.................... 				if ((modo_saidas != MODO_INVERTIDO) && (modo_saidas != MODO_NORMAL))
0438C:  MOVF   x6C,F
0438E:  BZ    43AC
04390:  DECFSZ x6C,W
04392:  BRA    4396
04394:  BRA    43AC
.................... 					{
.................... 					modo_saidas = MODO_NORMAL;
04396:  MOVLW  01
04398:  MOVWF  x6C
.................... 					write_byte(ee_modo_saidas, MODO_NORMAL);
0439A:  MOVLB  A
0439C:  CLRF   x68
0439E:  MOVLW  4C
043A0:  MOVWF  x67
043A2:  MOVLW  01
043A4:  MOVWF  x69
043A6:  MOVLB  0
043A8:  CALL   1C46
.................... 					}
.................... 				}
.................... 		#else
.................... 			tempo_aciona = valida_byte(tempo_aciona, ee_tempo_aciona, 0, 240, 30);
.................... 			tempo_desaciona = valida_byte(tempo_desaciona, ee_tempo_desaciona, 0, 240, 5);
.................... 			#if (com_rep == true)
.................... 				fat_conv_ativa = valida_word(fat_conv_ativa, ee_fat_conv_ativa, 1, 9999, 1000);
.................... 				fat_conv_reativa = valida_word(fat_conv_reativa, ee_fat_conv_reativa, 1, 9999, 1000);
.................... 				protocolo_REP = valida_byte(protocolo_REP, ee_protocolo_REP, 0, 3, 0);
.................... 			#endif
.................... 		#endif
.................... 
.................... 
.................... 		#if (st8500c == true)
.................... 			#define tempo_rmaximo	240
.................... 			#define tempo_rdefault	60
.................... 			
.................... 			for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++)
043AC:  MOVLB  3
043AE:  CLRF   xB1
043B0:  MOVLB  0
043B2:  MOVF   x6D,W
043B4:  MOVLB  3
043B6:  SUBWF  xB1,W
043B8:  BC    448E
.................... 				{
.................... 				if ((tempo_repouso[aux_b1] > tempo_rmaximo) || (tempo_repouso[aux_b1] < tempo_aciona))
043BA:  CLRF   03
043BC:  MOVF   xB1,W
043BE:  ADDLW  E7
043C0:  MOVWF  FE9
043C2:  MOVLW  00
043C4:  ADDWFC 03,W
043C6:  MOVWF  FEA
043C8:  MOVF   FEF,W
043CA:  SUBLW  F0
043CC:  BNC   43E6
043CE:  CLRF   03
043D0:  MOVF   xB1,W
043D2:  ADDLW  E7
043D4:  MOVWF  FE9
043D6:  MOVLW  00
043D8:  ADDWFC 03,W
043DA:  MOVWF  FEA
043DC:  MOVLB  0
043DE:  MOVF   x6A,W
043E0:  SUBWF  FEF,W
043E2:  BC    4488
043E4:  MOVLB  3
.................... 					{
.................... 					tempo_repouso[aux_b1] = read_byte(ee_tempo_repouso_1 + aux_b1);
043E6:  CLRF   03
043E8:  MOVF   xB1,W
043EA:  ADDLW  E7
043EC:  MOVWF  01
043EE:  MOVLW  00
043F0:  ADDWFC 03,F
043F2:  MOVFF  01,A4C
043F6:  MOVFF  03,A4D
043FA:  MOVLW  DA
043FC:  MOVLB  3
043FE:  ADDWF  xB1,W
04400:  MOVLB  A
04402:  MOVWF  x4E
04404:  MOVLW  02
04406:  MOVWF  x4F
04408:  BTFSC  FD8.0
0440A:  INCF   x4F,F
0440C:  MOVFF  A4F,A66
04410:  MOVFF  A4E,A65
04414:  MOVLB  0
04416:  CALL   1C24
0441A:  MOVFF  A4D,FEA
0441E:  MOVFF  A4C,FE9
04422:  MOVFF  01,FEF
.................... 					if ((tempo_repouso[aux_b1] > tempo_rmaximo) || (tempo_repouso[aux_b1] < tempo_aciona))
04426:  CLRF   03
04428:  MOVLB  3
0442A:  MOVF   xB1,W
0442C:  ADDLW  E7
0442E:  MOVWF  FE9
04430:  MOVLW  00
04432:  ADDWFC 03,W
04434:  MOVWF  FEA
04436:  MOVF   FEF,W
04438:  SUBLW  F0
0443A:  BNC   4454
0443C:  CLRF   03
0443E:  MOVF   xB1,W
04440:  ADDLW  E7
04442:  MOVWF  FE9
04444:  MOVLW  00
04446:  ADDWFC 03,W
04448:  MOVWF  FEA
0444A:  MOVLB  0
0444C:  MOVF   x6A,W
0444E:  SUBWF  FEF,W
04450:  BC    4488
04452:  MOVLB  3
.................... 						{
.................... 						tempo_repouso[aux_b1] = tempo_rdefault;
04454:  CLRF   03
04456:  MOVF   xB1,W
04458:  ADDLW  E7
0445A:  MOVWF  FE9
0445C:  MOVLW  00
0445E:  ADDWFC 03,W
04460:  MOVWF  FEA
04462:  MOVLW  3C
04464:  MOVWF  FEF
.................... 						write_byte((ee_tempo_repouso_1 + aux_b1), tempo_rdefault);
04466:  MOVLW  DA
04468:  ADDWF  xB1,W
0446A:  MOVLB  A
0446C:  MOVWF  x4C
0446E:  MOVLW  02
04470:  MOVWF  x4D
04472:  BTFSC  FD8.0
04474:  INCF   x4D,F
04476:  MOVFF  A4D,A68
0447A:  MOVFF  A4C,A67
0447E:  MOVLW  3C
04480:  MOVWF  x69
04482:  MOVLB  0
04484:  CALL   1C46
.................... 						}
.................... 					}
04488:  MOVLB  3
0448A:  INCF   xB1,F
0448C:  BRA    43B0
.................... 				}
.................... 		#else
.................... 
.................... 			if (sequencia > NRO_SEQUENCIAS)
.................... 				{
.................... 				sequencia =	read_byte(ee_sequencia);
.................... 				if (sequencia > NRO_SEQUENCIAS)
.................... 					{
.................... 					sequencia = 1;
.................... 					write_byte(ee_sequencia, 1);
.................... 					gera_sequencia_valor_bancos();
.................... 					}
.................... 				}
.................... 				
.................... 			gera_sequencia_valor_bancos();
.................... 		
.................... 			#define tempo_rmaximo	240
.................... 			#define tempo_rdefault	180
.................... 			
.................... 			#if (st_prog == false)
.................... 				for (aux_b1 = 0; aux_b1 < nro_bancos_capacitor; aux_b1++)
.................... 					{
.................... 					if ((tempo_repouso[aux_b1] > tempo_rmaximo) || (tempo_repouso[aux_b1] < tempo_aciona))
.................... 						{
.................... 						tempo_repouso[aux_b1] = read_byte(ee_tempo_repouso_1 + aux_b1);
.................... 						if ((tempo_repouso[aux_b1] > tempo_rmaximo) || (tempo_repouso[aux_b1] < tempo_aciona))
.................... 							{
.................... 							tempo_repouso[aux_b1] = tempo_rdefault;
.................... 							write_byte((ee_tempo_repouso_1 + aux_b1), tempo_rdefault);
.................... 							}
.................... 						}
.................... 					}
.................... 			#endif
.................... 		#endif
.................... 		
.................... 	    	
.................... 	#endif
.................... 
.................... 	ala_fp_ind = valida_byte(ala_fp_ind, ee_ala_fp_ind, 80, 100, 100);
0448E:  MOVFF  4D0,A51
04492:  MOVLB  A
04494:  CLRF   x53
04496:  MOVLW  1C
04498:  MOVWF  x52
0449A:  MOVLW  50
0449C:  MOVWF  x54
0449E:  MOVLW  64
044A0:  MOVWF  x55
044A2:  MOVWF  x56
044A4:  MOVLB  0
044A6:  CALL   34B0
044AA:  MOVFF  01,4D0
.................... 	ala_fp_cap = valida_byte(ala_fp_cap, ee_ala_fp_cap, 80, 100, 100);
044AE:  MOVFF  4D1,A51
044B2:  MOVLB  A
044B4:  CLRF   x53
044B6:  MOVLW  1D
044B8:  MOVWF  x52
044BA:  MOVLW  50
044BC:  MOVWF  x54
044BE:  MOVLW  64
044C0:  MOVWF  x55
044C2:  MOVWF  x56
044C4:  MOVLB  0
044C6:  CALL   34B0
044CA:  MOVFF  01,4D1
.................... 	ala_ten_a = valida_byte(ala_ten_a, ee_ala_ten_a, 0, 20, 0);
044CE:  MOVFF  4D2,A51
044D2:  MOVLB  A
044D4:  CLRF   x53
044D6:  MOVLW  1E
044D8:  MOVWF  x52
044DA:  CLRF   x54
044DC:  MOVLW  14
044DE:  MOVWF  x55
044E0:  CLRF   x56
044E2:  MOVLB  0
044E4:  CALL   34B0
044E8:  MOVFF  01,4D2
.................... 	ala_ten_b = valida_byte(ala_ten_b, ee_ala_ten_b, 0, 30, 0);
044EC:  MOVFF  4D3,A51
044F0:  MOVLB  A
044F2:  CLRF   x53
044F4:  MOVLW  1F
044F6:  MOVWF  x52
044F8:  CLRF   x54
044FA:  MOVLW  1E
044FC:  MOVWF  x55
044FE:  CLRF   x56
04500:  MOVLB  0
04502:  CALL   34B0
04506:  MOVFF  01,4D3
.................... 	
.................... 	#if (st8500c == false)
.................... 		ala_sc = valida_byte(ala_sc, ee_ala_sc, 0, 150, 0);
.................... //		ala_subc = valida_byte(ala_subc, ee_ala_subc, 0, 50, 0);
.................... 		ala_subc = valida_byte(ala_subc, ee_ala_subc, 0, 100, 0);		//Implementado em 29/09/09 por solicitação de cliente.
.................... 		ala_skw = valida_byte(ala_skw, ee_ala_skw, 0, 150, 0);
.................... 		ala_chtt = valida_byte(ala_chtt, ee_ala_chtt, 0, 50, 0);
.................... 		ala_chtc = valida_byte(ala_chtc, ee_ala_chtc, 0, 50, 0);
.................... 	#endif
.................... // valida programa horario
.................... 	#if (com_regs == true)
.................... 		#if (portatil == true)
.................... 			if (registro > 1)
.................... 				{
.................... 			 	registro = read_byte(ee_registro);
.................... 				if ((registro != 0) && (registro != 1))
.................... 					{
.................... 					registro = 1;
.................... 					write_byte(ee_registro, 1);
.................... 					}
.................... 				}
.................... 			
.................... 			if (prog_time > 1)
.................... 				{
.................... 			 	prog_time = read_byte(ee_prog_time);
.................... 				if ((prog_time > 1))
.................... 					{
.................... 					prog_time = 0;
.................... 					write_byte(ee_prog_time, 1);
.................... 					}
.................... 				}
.................... 	
.................... 			if (hora_liga > 23)
.................... 				{
.................... 				hora_liga = read_byte(ee_hora_liga);
.................... 				if (hora_liga > 23)
.................... 					{
.................... 					hora_liga = 0;
.................... 					write_byte(ee_hora_liga, 0);
.................... 					}
.................... 				}
.................... 			if (hora_desliga > 23)
.................... 				{
.................... 				hora_desliga = read_byte(ee_hora_desliga);
.................... 				if (hora_desliga > 23)
.................... 					{
.................... 					hora_desliga = 23;
.................... 					write_byte(ee_hora_desliga, 0);
.................... 					}
.................... 				}
.................... 
.................... 			if (minuto_liga > 59)
.................... 				{
.................... 				minuto_liga = read_byte(ee_minuto_liga);
.................... 				if (minuto_liga > 59)
.................... 					{
.................... 					minuto_liga = 0;
.................... 					write_byte(ee_minuto_liga, 0);
.................... 					}
.................... 				}
.................... 			if (minuto_desliga > 59)
.................... 				{
.................... 				minuto_desliga = read_byte(ee_minuto_desliga);
.................... 				if (minuto_desliga > 59)
.................... 					{
.................... 					minuto_desliga = 59;
.................... 					write_byte(ee_minuto_desliga, 0);
.................... 					}
.................... 				}
.................... 
.................... 			if (dia_liga > 31)
.................... 				{
.................... 				dia_liga == read_byte(ee_dia_liga);
.................... 				if (dia_liga > 31)
.................... 					{
.................... 					dia_liga = 1;
.................... 					write_byte(ee_dia_liga, 1);
.................... 					}
.................... 				}
.................... 			if (dia_desliga > 31)
.................... 				{
.................... 				dia_desliga == read_byte(ee_dia_desliga);
.................... 				if (dia_desliga > 31)
.................... 					{
.................... 					dia_desliga = 31;
.................... 					write_byte(ee_dia_desliga, 1);
.................... 					}
.................... 				}
.................... 
.................... 			if (fila_circular > 1)
.................... 				{
.................... 			 	fila_circular = read_byte(ee_fila_circular);
.................... 				if ((fila_circular != 0) && (fila_circular != 1))
.................... 					{
.................... 					fila_circular = 1;
.................... 					write_byte(ee_fila_circular, 1);
.................... 					}
.................... 				}
.................... 		
.................... 			#if (com_menu == true)
.................... 				if (qmenu != 5)
.................... 					{
.................... 			#endif
.................... 				if (dia_liga == dia_desliga)
.................... 					{
.................... 					if (hora_liga == hora_desliga)
.................... 						{
.................... 						if (minuto_liga == minuto_desliga)
.................... 							{
.................... 							if (prog_time == 1)
.................... 								{
.................... 								prog_time = 0;
.................... 								write_byte(ee_prog_time,0);
.................... 								}
.................... 							}
.................... 						}
.................... 					}
.................... 			#if (com_menu == true)
.................... 					}		
.................... 			#endif
.................... 		#endif
.................... 		
.................... 
.................... 	#endif
.................... 
.................... 	if (tipo_ligacao > 3)
0450A:  MOVLB  4
0450C:  MOVF   xC7,W
0450E:  SUBLW  03
04510:  BC    4540
.................... 		{
.................... 	 	tipo_ligacao = read_byte(ee_tipo_ligacao);
04512:  MOVLB  A
04514:  CLRF   x66
04516:  MOVLW  3E
04518:  MOVWF  x65
0451A:  MOVLB  0
0451C:  CALL   1C24
04520:  MOVFF  01,4C7
.................... 		if ((tipo_ligacao > 3))
04524:  MOVLB  4
04526:  MOVF   xC7,W
04528:  SUBLW  03
0452A:  BC    4540
.................... 			{
.................... 			tipo_ligacao = 0;
0452C:  CLRF   xC7
.................... 			write_byte(ee_tipo_ligacao, 0);
0452E:  MOVLB  A
04530:  CLRF   x68
04532:  MOVLW  3E
04534:  MOVWF  x67
04536:  CLRF   x69
04538:  MOVLB  0
0453A:  CALL   1C46
0453E:  MOVLB  4
.................... 			}
.................... 		}
.................... 
.................... 
.................... 	#if (st_prog == true)
.................... 		tipo_ligacao = 0;
.................... 	#endif
.................... 
.................... 	#if (st8500c == true)
.................... 		ala_demanda_ativa = valida_byte(ala_demanda_ativa, ee_ala_demanda_ativa, 0, 20, 10);
04540:  MOVFF  4DA,A51
04544:  MOVLB  A
04546:  CLRF   x53
04548:  MOVLW  49
0454A:  MOVWF  x52
0454C:  CLRF   x54
0454E:  MOVLW  14
04550:  MOVWF  x55
04552:  MOVLW  0A
04554:  MOVWF  x56
04556:  MOVLB  0
04558:  CALL   34B0
0455C:  MOVFF  01,4DA
.................... 	#else
.................... 		#if (com_alarme_demanda == true)
.................... 			ala_demanda_ativa = valida_word(ala_demanda_ativa, ee_ala_demanda_ativa, 0, 9999, 0);
.................... 		#endif
.................... 	#endif
.................... 
.................... 
.................... 	#if (funcao_505 == false)
.................... 		modo_funca = 1;
04560:  MOVLW  01
04562:  MOVLB  4
04564:  MOVWF  xA7
.................... 	#endif
.................... 		
.................... 	modo_funca = valida_byte(modo_funca, ee_modo_funca, 0, 3, 1);
04566:  MOVFF  4A7,A51
0456A:  MOVLB  A
0456C:  CLRF   x53
0456E:  MOVLW  40
04570:  MOVWF  x52
04572:  CLRF   x54
04574:  MOVLW  03
04576:  MOVWF  x55
04578:  MOVLW  01
0457A:  MOVWF  x56
0457C:  MOVLB  0
0457E:  CALL   34B0
04582:  MOVFF  01,4A7
.................... 
.................... 	erro = 0;
04586:  BCF    22.2
.................... 	if (hora_ponta >= hora_final_ponta)
04588:  MOVLB  5
0458A:  MOVF   x17,W
0458C:  SUBWF  x15,W
0458E:  BNC   45BE
.................... 		{
.................... 		hora_ponta = read_byte(ee_hora_ponta);
04590:  MOVLB  A
04592:  CLRF   x66
04594:  MOVLW  3A
04596:  MOVWF  x65
04598:  MOVLB  0
0459A:  CALL   1C24
0459E:  MOVFF  01,515
.................... 		hora_final_ponta = read_byte(ee_hora_final_ponta);
045A2:  MOVLB  A
045A4:  CLRF   x66
045A6:  MOVLW  3C
045A8:  MOVWF  x65
045AA:  MOVLB  0
045AC:  CALL   1C24
045B0:  MOVFF  01,517
.................... 		if (hora_ponta >= hora_final_ponta)
045B4:  MOVLB  5
045B6:  MOVF   x17,W
045B8:  SUBWF  x15,W
045BA:  BNC   45BE
.................... 			{
.................... 			erro = 1;
045BC:  BSF    22.2
.................... 			}
.................... 		}
.................... 	if (hora_ponta > 23)
045BE:  MOVF   x15,W
045C0:  SUBLW  17
045C2:  BC    45E0
.................... 		{
.................... 		hora_ponta = read_byte(ee_hora_ponta);
045C4:  MOVLB  A
045C6:  CLRF   x66
045C8:  MOVLW  3A
045CA:  MOVWF  x65
045CC:  MOVLB  0
045CE:  CALL   1C24
045D2:  MOVFF  01,515
.................... 		if (hora_ponta > 23)
045D6:  MOVLB  5
045D8:  MOVF   x15,W
045DA:  SUBLW  17
045DC:  BC    45E0
.................... 			{
.................... 			erro = 1;
045DE:  BSF    22.2
.................... 			}
.................... 		}
.................... 	if (hora_final_ponta > 23)
045E0:  MOVF   x17,W
045E2:  SUBLW  17
045E4:  BC    4602
.................... 		{
.................... 		hora_final_ponta = read_byte(ee_hora_final_ponta);
045E6:  MOVLB  A
045E8:  CLRF   x66
045EA:  MOVLW  3C
045EC:  MOVWF  x65
045EE:  MOVLB  0
045F0:  CALL   1C24
045F4:  MOVFF  01,517
.................... 		if (hora_final_ponta > 23)
045F8:  MOVLB  5
045FA:  MOVF   x17,W
045FC:  SUBLW  17
045FE:  BC    4602
.................... 			{
.................... 			erro = 1;
04600:  BSF    22.2
.................... 			}
.................... 		}
.................... 	if (minuto_ponta > 59)
04602:  MOVF   x16,W
04604:  SUBLW  3B
04606:  BC    4624
.................... 		{
.................... 		minuto_ponta = read_byte(ee_minuto_ponta);
04608:  MOVLB  A
0460A:  CLRF   x66
0460C:  MOVLW  3B
0460E:  MOVWF  x65
04610:  MOVLB  0
04612:  CALL   1C24
04616:  MOVFF  01,516
.................... 		if (minuto_ponta > 59)
0461A:  MOVLB  5
0461C:  MOVF   x16,W
0461E:  SUBLW  3B
04620:  BC    4624
.................... 			{
.................... 			erro = 1;
04622:  BSF    22.2
.................... 			}
.................... 		}
.................... 	if (minuto_final_ponta > 59)
04624:  MOVF   x18,W
04626:  SUBLW  3B
04628:  BC    4646
.................... 		{
.................... 		minuto_final_ponta = read_byte(ee_minuto_final_ponta);
0462A:  MOVLB  A
0462C:  CLRF   x66
0462E:  MOVLW  3D
04630:  MOVWF  x65
04632:  MOVLB  0
04634:  CALL   1C24
04638:  MOVFF  01,518
.................... 		if (minuto_final_ponta > 59)
0463C:  MOVLB  5
0463E:  MOVF   x18,W
04640:  SUBLW  3B
04642:  BC    4646
.................... 			{
.................... 			erro = 1;
04644:  BSF    22.2
.................... 			}
.................... 		}
.................... 	if (erro == 1)
04646:  BTFSS  22.2
04648:  BRA    46A0
.................... 		{
.................... 		hora_ponta = 18;
0464A:  MOVLW  12
0464C:  MOVWF  x15
.................... 		hora_final_ponta = 21;
0464E:  MOVLW  15
04650:  MOVWF  x17
.................... 		minuto_ponta = 0;
04652:  CLRF   x16
.................... 		minuto_final_ponta = 0;
04654:  CLRF   x18
.................... 		write_byte(ee_hora_ponta, 18);
04656:  MOVLB  A
04658:  CLRF   x68
0465A:  MOVLW  3A
0465C:  MOVWF  x67
0465E:  MOVLW  12
04660:  MOVWF  x69
04662:  MOVLB  0
04664:  CALL   1C46
.................... 		write_byte(ee_hora_final_ponta, 21);
04668:  MOVLB  A
0466A:  CLRF   x68
0466C:  MOVLW  3C
0466E:  MOVWF  x67
04670:  MOVLW  15
04672:  MOVWF  x69
04674:  MOVLB  0
04676:  CALL   1C46
.................... 		write_byte(ee_minuto_ponta, 30);
0467A:  MOVLB  A
0467C:  CLRF   x68
0467E:  MOVLW  3B
04680:  MOVWF  x67
04682:  MOVLW  1E
04684:  MOVWF  x69
04686:  MOVLB  0
04688:  CALL   1C46
.................... 		write_byte(ee_minuto_final_ponta, 30);
0468C:  MOVLB  A
0468E:  CLRF   x68
04690:  MOVLW  3D
04692:  MOVWF  x67
04694:  MOVLW  1E
04696:  MOVWF  x69
04698:  MOVLB  0
0469A:  CALL   1C46
0469E:  MOVLB  5
.................... 		}
.................... 
.................... 	#if (st_prog == true)
.................... 		tipo_ligacao = 0;
.................... 	#endif
.................... 
.................... 
.................... 	calcula_checksum_vars();
046A0:  MOVLB  0
046A2:  CALL   1A42
.................... 
.................... 	calcula_fundo_escala_corrente();
046A6:  CALL   0004
046AA:  RETURN 0
.................... 
....................     	
.................... }
.................... 
.................... 
.................... void assume_defaults(void)
.................... 	{
.................... 		set_point = 95;
*
02B4A:  MOVLW  5F
02B4C:  MOVLB  4
02B4E:  MOVWF  xCB
.................... 		write_byte(ee_set_point, set_point);
02B50:  MOVLB  A
02B52:  CLRF   x68
02B54:  MOVLW  0A
02B56:  MOVWF  x67
02B58:  MOVFF  4CB,A69
02B5C:  MOVLB  0
02B5E:  CALL   1C46
.................... 		ten_nomi = 220;
02B62:  MOVLB  4
02B64:  CLRF   xBE
02B66:  MOVLW  DC
02B68:  MOVWF  xBD
.................... 		write_word(ee_ten_nomi, ten_nomi);
02B6A:  MOVLB  A
02B6C:  CLRF   x5D
02B6E:  MOVLW  11
02B70:  MOVWF  x5C
02B72:  MOVFF  4BE,A5F
02B76:  MOVFF  4BD,A5E
02B7A:  MOVLB  0
02B7C:  RCALL  23AE
.................... 		valor_tc = 500;		
02B7E:  MOVLW  01
02B80:  MOVLB  4
02B82:  MOVWF  xC0
02B84:  MOVLW  F4
02B86:  MOVWF  xBF
.................... 		#if (tc_fixo == true)
.................... 			#if (portatil == true)
.................... 				busca_mul_tc();
.................... 			#else
.................... 				calcula_mul_tc();
02B88:  MOVLB  0
02B8A:  RCALL  2AB8
.................... 			#endif
.................... 		#endif
.................... 	
.................... 		#if (portatil == true)
.................... 			#if (se_com_flex == true)
.................... 				write_byte(ee_tipo_ponteira, 2);	//Alicate 1000A Minipa
.................... 			#else
.................... 				write_word(ee_valor_tc, 500);
.................... 			#endif
.................... 		#else
.................... 			write_word(ee_valor_tc, 500);
02B8C:  MOVLB  A
02B8E:  CLRF   x5D
02B90:  MOVLW  13
02B92:  MOVWF  x5C
02B94:  MOVLW  01
02B96:  MOVWF  x5F
02B98:  MOVLW  F4
02B9A:  MOVWF  x5E
02B9C:  MOVLB  0
02B9E:  RCALL  23AE
.................... 		#endif
.................... 		valor_tp = 1;		
02BA0:  MOVLB  4
02BA2:  CLRF   xC2
02BA4:  MOVLW  01
02BA6:  MOVWF  xC1
.................... 		write_word(ee_valor_tp, 1);
02BA8:  MOVLB  A
02BAA:  CLRF   x5D
02BAC:  MOVLW  2B
02BAE:  MOVWF  x5C
02BB0:  CLRF   x5F
02BB2:  MOVLW  01
02BB4:  MOVWF  x5E
02BB6:  MOVLB  0
02BB8:  CALL   23AE
.................... 		#if (portatil == true)	
.................... 			#if (se_com_flex == true)
.................... 				// ST9001G1
.................... 				os_cor_pt_r[0] = OFF_SET_COR_R_9001G1;
.................... 				write_byte(ee_os_cor_r_9001g1, OFF_SET_COR_R_9001G1);
.................... 				os_cor_pt_s[0] = OFF_SET_COR_S_9001G1;
.................... 				write_byte(ee_os_cor_s_9001g1, OFF_SET_COR_S_9001G1);
.................... 				os_cor_pt_t[0] = OFF_SET_COR_T_9001G1;
.................... 				write_byte(ee_os_cor_t_9001g1, OFF_SET_COR_T_9001G1);
.................... 				// ST9001G2
.................... 				os_cor_pt_r[1] = OFF_SET_COR_R_9001G2;
.................... 				write_byte(ee_os_cor_r_9001g2, OFF_SET_COR_R_9001G2);
.................... 				os_cor_pt_s[1] = OFF_SET_COR_S_9001G2;
.................... 				write_byte(ee_os_cor_s_9001g2, OFF_SET_COR_S_9001G2);
.................... 				os_cor_pt_t[1] = OFF_SET_COR_T_9001G2;
.................... 				write_byte(ee_os_cor_t_9001g2, OFF_SET_COR_T_9001G2);
.................... 				// ST9002G1
.................... 				os_cor_pt_r[2] = OFF_SET_COR_R_9002G1;
.................... 				write_byte(ee_os_cor_r_9002g1, OFF_SET_COR_R_9002G1);
.................... 				os_cor_pt_s[2] = OFF_SET_COR_S_9002G1;
.................... 				write_byte(ee_os_cor_s_9002g1, OFF_SET_COR_S_9002G1);
.................... 				os_cor_pt_t[2] = OFF_SET_COR_T_9002G1;
.................... 				write_byte(ee_os_cor_t_9002g1, OFF_SET_COR_T_9002G1);
.................... 				// ST9003G1
.................... 				os_cor_pt_r[3] = OFF_SET_COR_R_9003G1;
.................... 				write_byte(ee_os_cor_r_9003g1, OFF_SET_COR_R_9003G1);
.................... 				os_cor_pt_s[3] = OFF_SET_COR_S_9003G1;
.................... 				write_byte(ee_os_cor_s_9003g1, OFF_SET_COR_S_9003G1);
.................... 				os_cor_pt_t[3] = OFF_SET_COR_T_9003G1;
.................... 				write_byte(ee_os_cor_t_9003g1, OFF_SET_COR_T_9003G1);
.................... 				// ST9004G1
.................... 				os_cor_pt_r[4] = OFF_SET_COR_R_9004G1;
.................... 				write_byte(ee_os_cor_r_9004g1, OFF_SET_COR_R_9004G1);
.................... 				os_cor_pt_s[4] = OFF_SET_COR_S_9004G1;
.................... 				write_byte(ee_os_cor_s_9004g1, OFF_SET_COR_S_9004G1);
.................... 				os_cor_pt_t[4] = OFF_SET_COR_T_9004G1;
.................... 				write_byte(ee_os_cor_t_9004g1, OFF_SET_COR_T_9004G1);
.................... 				// ST9005G1
.................... 				os_cor_pt_r[5] = OFF_SET_COR_R_9005G1;
.................... 				write_byte(ee_os_cor_r_9005g1, OFF_SET_COR_R_9005G1);
.................... 				os_cor_pt_s[5] = OFF_SET_COR_S_9005G1;
.................... 				write_byte(ee_os_cor_s_9005g1, OFF_SET_COR_S_9005G1);
.................... 				os_cor_pt_t[5] = OFF_SET_COR_T_9005G1;
.................... 				write_byte(ee_os_cor_t_9005g1, OFF_SET_COR_T_9005G1);
.................... 				// ST9005G2
.................... 				os_cor_pt_r[6] = OFF_SET_COR_R_9005G2;
.................... 				write_byte(ee_os_cor_r_9005g2, OFF_SET_COR_R_9005G2);
.................... 				os_cor_pt_s[6] = OFF_SET_COR_S_9005G2;
.................... 				write_byte(ee_os_cor_s_9005g2, OFF_SET_COR_S_9005G2);
.................... 				os_cor_pt_t[6] = OFF_SET_COR_T_9005G2;
.................... 				write_byte(ee_os_cor_t_9005g2, OFF_SET_COR_T_9005G2);
.................... 				// ST9005G3
.................... 				os_cor_pt_r[7] = OFF_SET_COR_R_9005G3;
.................... 				write_byte(ee_os_cor_r_9005g3, OFF_SET_COR_R_9005G3);
.................... 				os_cor_pt_s[7] = OFF_SET_COR_S_9005G3;
.................... 				write_byte(ee_os_cor_s_9005g3, OFF_SET_COR_S_9005G3);
.................... 				os_cor_pt_t[7] = OFF_SET_COR_T_9005G3;
.................... 				write_byte(ee_os_cor_t_9005g3, OFF_SET_COR_T_9005G3);
.................... 				// ST9005G4
.................... 				os_cor_pt_r[8] = OFF_SET_COR_R_9005G4;
.................... 				write_byte(ee_os_cor_r_9005g4, OFF_SET_COR_R_9005G4);
.................... 				os_cor_pt_s[8] = OFF_SET_COR_S_9005G4;
.................... 				write_byte(ee_os_cor_s_9005g4, OFF_SET_COR_S_9005G4);
.................... 				os_cor_pt_t[8] = OFF_SET_COR_T_9005G4;
.................... 				write_byte(ee_os_cor_t_9005g4, OFF_SET_COR_T_9005G4);
.................... 				// ST9005G5
.................... 				os_cor_pt_r[9] = OFF_SET_COR_R_9005G5;
.................... 				write_byte(ee_os_cor_r_9005g5, OFF_SET_COR_R_9005G5);
.................... 				os_cor_pt_s[9] = OFF_SET_COR_S_9005G5;
.................... 				write_byte(ee_os_cor_s_9005g5, OFF_SET_COR_S_9005G5);
.................... 				os_cor_pt_t[9] = OFF_SET_COR_T_9005G5;
.................... 				write_byte(ee_os_cor_t_9005g5, OFF_SET_COR_T_9005G5);
.................... 				// ST9006G1
.................... 				os_cor_pt_r[10] = OFF_SET_COR_R_9006G1;
.................... 				write_byte(ee_os_cor_r_9006g1, OFF_SET_COR_R_9006G1);
.................... 				os_cor_pt_s[10] = OFF_SET_COR_S_9006G1;
.................... 				write_byte(ee_os_cor_s_9006g1, OFF_SET_COR_S_9006G1);
.................... 				os_cor_pt_t[10] = OFF_SET_COR_T_9006G1;
.................... 				write_byte(ee_os_cor_t_9006g1, OFF_SET_COR_T_9006G1);
.................... 				// ST9006G2
.................... 				os_cor_pt_r[11] = OFF_SET_COR_R_9006G2;
.................... 				write_byte(ee_os_cor_r_9006g2, OFF_SET_COR_R_9006G2);
.................... 				os_cor_pt_s[11] = OFF_SET_COR_S_9006G2;
.................... 				write_byte(ee_os_cor_s_9006g2, OFF_SET_COR_S_9006G2);
.................... 				os_cor_pt_t[11] = OFF_SET_COR_T_9006G2;
.................... 				write_byte(ee_os_cor_t_9006g2, OFF_SET_COR_T_9006G2);
.................... 				// ST9006G3
.................... 				os_cor_pt_r[12] = OFF_SET_COR_R_9006G3;
.................... 				write_byte(ee_os_cor_r_9006g3, OFF_SET_COR_R_9006G3);
.................... 				os_cor_pt_s[12] = OFF_SET_COR_S_9006G3;
.................... 				write_byte(ee_os_cor_s_9006g3, OFF_SET_COR_S_9006G3);
.................... 				os_cor_pt_t[12] = OFF_SET_COR_T_9006G3;
.................... 				write_byte(ee_os_cor_t_9006g3, OFF_SET_COR_T_9006G3);
.................... 				// ST9006G4
.................... 				os_cor_pt_r[13] = OFF_SET_COR_R_9006G4;
.................... 				write_byte(ee_os_cor_r_9006g4, OFF_SET_COR_R_9006G4);
.................... 				os_cor_pt_s[13] = OFF_SET_COR_S_9006G4;
.................... 				write_byte(ee_os_cor_s_9006g4, OFF_SET_COR_S_9006G4);
.................... 				os_cor_pt_t[13] = OFF_SET_COR_T_9006G4;
.................... 				write_byte(ee_os_cor_t_9006g4, OFF_SET_COR_T_9006G4);
.................... 				// ST9006G5
.................... 				os_cor_pt_r[14] = OFF_SET_COR_R_9006G5;
.................... 				write_byte(ee_os_cor_r_9006g5, OFF_SET_COR_R_9006G5);
.................... 				os_cor_pt_s[14] = OFF_SET_COR_S_9006G5;
.................... 				write_byte(ee_os_cor_s_9006g5, OFF_SET_COR_S_9006G5);
.................... 				os_cor_pt_t[14] = OFF_SET_COR_T_9006G5;
.................... 				write_byte(ee_os_cor_t_9006g5, OFF_SET_COR_T_9006G5);
.................... 				// ST9007G1
.................... 				os_cor_pt_r[15] = OFF_SET_COR_R_9007G1;
.................... 				write_byte(ee_os_cor_r_9007g1, OFF_SET_COR_R_9007G1);
.................... 				os_cor_pt_s[15] = OFF_SET_COR_S_9007G1;
.................... 				write_byte(ee_os_cor_s_9007g1, OFF_SET_COR_S_9007G1);
.................... 				os_cor_pt_t[15] = OFF_SET_COR_T_9007G1;
.................... 				write_byte(ee_os_cor_t_9007g1, OFF_SET_COR_T_9007G1);
.................... 				// ST9007G2
.................... 				os_cor_pt_r[16] = OFF_SET_COR_R_9007G2;
.................... 				write_byte(ee_os_cor_r_9007g2, OFF_SET_COR_R_9007G2);
.................... 				os_cor_pt_s[16] = OFF_SET_COR_S_9007G2;
.................... 				write_byte(ee_os_cor_s_9007g2, OFF_SET_COR_S_9007G2);
.................... 				os_cor_pt_t[16] = OFF_SET_COR_T_9007G2;
.................... 				write_byte(ee_os_cor_t_9007g2, OFF_SET_COR_T_9007G2);
.................... 				// ST9008G1
.................... 				os_cor_pt_r[17] = OFF_SET_COR_R_9008G1;
.................... 				write_byte(ee_os_cor_r_9008g1, OFF_SET_COR_R_9008G1);
.................... 				os_cor_pt_s[17] = OFF_SET_COR_S_9008G1;
.................... 				write_byte(ee_os_cor_s_9008g1, OFF_SET_COR_S_9008G1);
.................... 				os_cor_pt_t[17] = OFF_SET_COR_T_9008G1;
.................... 				write_byte(ee_os_cor_t_9008g1, OFF_SET_COR_T_9008G1);
.................... 	
.................... 			#elif (viercon == true)			
.................... 				// 30
.................... 				os_cor_pt_r[0] = OFF_SET_COR_R_20;
.................... 				write_byte(ee_os_cor_r_20, OFF_SET_COR_R_20);
.................... 				os_cor_pt_s[0] = OFF_SET_COR_S_20;
.................... 				write_byte(ee_os_cor_r_20, OFF_SET_COR_S_20);
.................... 				os_cor_pt_t[0] = OFF_SET_COR_T_20;
.................... 				write_byte(ee_os_cor_t_20, OFF_SET_COR_T_20);
.................... 				// 300
.................... 				os_cor_pt_r[1] = OFF_SET_COR_R_200;
.................... 				write_byte(ee_os_cor_r_200, OFF_SET_COR_R_200);
.................... 				os_cor_pt_s[1] = OFF_SET_COR_S_200;
.................... 				write_byte(ee_os_cor_r_200, OFF_SET_COR_S_200);
.................... 				os_cor_pt_t[1] = OFF_SET_COR_T_200;
.................... 				write_byte(ee_os_cor_t_200, OFF_SET_COR_T_200);
.................... 				// 3000
.................... 				os_cor_pt_r[2] = OFF_SET_COR_R_300;
.................... 				write_byte(ee_os_cor_r_300, OFF_SET_COR_R_300);
.................... 				os_cor_pt_s[2] = OFF_SET_COR_S_300;
.................... 				write_byte(ee_os_cor_r_300, OFF_SET_COR_S_300);
.................... 				os_cor_pt_t[2] = OFF_SET_COR_T_300;
.................... 				write_byte(ee_os_cor_t_300, OFF_SET_COR_T_300);
.................... 			#else
.................... 				// 20
.................... 				os_cor_pt_r[0] = OFF_SET_COR_R_20;
.................... 				write_byte(ee_os_cor_r_20, OFF_SET_COR_R_20);
.................... 				os_cor_pt_s[0] = OFF_SET_COR_S_20;
.................... 				write_byte(ee_os_cor_r_20, OFF_SET_COR_S_20);
.................... 				os_cor_pt_t[0] = OFF_SET_COR_T_20;
.................... 				write_byte(ee_os_cor_t_20, OFF_SET_COR_T_20);
.................... 				// 200
.................... 				os_cor_pt_r[1] = OFF_SET_COR_R_200;
.................... 				write_byte(ee_os_cor_r_200, OFF_SET_COR_R_200);
.................... 				os_cor_pt_s[1] = OFF_SET_COR_S_200;
.................... 				write_byte(ee_os_cor_r_200, OFF_SET_COR_S_200);
.................... 				os_cor_pt_t[1] = OFF_SET_COR_T_200;
.................... 				write_byte(ee_os_cor_t_200, OFF_SET_COR_T_200);
.................... 				// 300
.................... 				os_cor_pt_r[2] = OFF_SET_COR_R_300;
.................... 				write_byte(ee_os_cor_r_300, OFF_SET_COR_R_300);
.................... 				os_cor_pt_s[2] = OFF_SET_COR_S_300;
.................... 				write_byte(ee_os_cor_r_300, OFF_SET_COR_S_300);
.................... 				os_cor_pt_t[2] = OFF_SET_COR_T_300;
.................... 				write_byte(ee_os_cor_t_300, OFF_SET_COR_T_300);
.................... 				// 600
.................... 				os_cor_pt_r[3] = OFF_SET_COR_R_600;
.................... 				write_byte(ee_os_cor_r_600, OFF_SET_COR_R_600);
.................... 				os_cor_pt_s[3] = OFF_SET_COR_S_600;
.................... 				write_byte(ee_os_cor_r_600, OFF_SET_COR_S_600);
.................... 				os_cor_pt_t[3] = OFF_SET_COR_T_600;
.................... 				write_byte(ee_os_cor_t_600, OFF_SET_COR_T_600);
.................... 				// 1000
.................... 				os_cor_pt_r[4]= OFF_SET_COR_R_1000;
.................... 				write_byte(ee_os_cor_r_1000, OFF_SET_COR_R_1000);
.................... 				os_cor_pt_s[4] = OFF_SET_COR_S_1000;
.................... 				write_byte(ee_os_cor_r_1000, OFF_SET_COR_S_1000);
.................... 				os_cor_pt_t[4] = OFF_SET_COR_T_1000;
.................... 				write_byte(ee_os_cor_t_1000, OFF_SET_COR_T_1000);
.................... 				// 1500
.................... 				os_cor_pt_r[5]= OFF_SET_COR_R_1500;
.................... 				write_byte(ee_os_cor_r_1500, OFF_SET_COR_R_1500);
.................... 				os_cor_pt_s[5] = OFF_SET_COR_S_1500;
.................... 				write_byte(ee_os_cor_r_1500, OFF_SET_COR_S_1500);
.................... 				os_cor_pt_t[5] = OFF_SET_COR_T_1500;
.................... 				write_byte(ee_os_cor_t_1500, OFF_SET_COR_T_1500);
.................... 				#if (ponteira_kyoritsu == true)
.................... 				#else
.................... 					// 2000
.................... 					os_cor_pt_r[6]= OFF_SET_COR_R_2000;
.................... 					write_byte(ee_os_cor_r_2000, OFF_SET_COR_R_2000);
.................... 					os_cor_pt_s[6] = OFF_SET_COR_S_2000;
.................... 					write_byte(ee_os_cor_r_2000, OFF_SET_COR_S_2000);
.................... 					os_cor_pt_t[6] = OFF_SET_COR_T_2000;
.................... 					write_byte(ee_os_cor_t_2000, OFF_SET_COR_T_2000);
.................... 					// 3000
.................... 					os_cor_pt_r[7]= OFF_SET_COR_R_3000;
.................... 					write_byte(ee_os_cor_r_3000, OFF_SET_COR_R_3000);
.................... 					os_cor_pt_s[7] = OFF_SET_COR_S_3000;
.................... 					write_byte(ee_os_cor_r_3000, OFF_SET_COR_S_3000);
.................... 					os_cor_pt_t[7] = OFF_SET_COR_T_3000;
.................... 					write_byte(ee_os_cor_t_3000, OFF_SET_COR_T_3000);
.................... 					// 6000
.................... 					os_cor_pt_r[8]= OFF_SET_COR_R_6000;
.................... 					write_byte(ee_os_cor_r_6000, OFF_SET_COR_R_6000);
.................... 					os_cor_pt_s[8] = OFF_SET_COR_S_6000;
.................... 					write_byte(ee_os_cor_r_6000, OFF_SET_COR_S_6000);
.................... 					os_cor_pt_t[8] = OFF_SET_COR_T_6000;
.................... 					write_byte(ee_os_cor_t_6000, OFF_SET_COR_T_6000);
.................... 				#endif
.................... 			#endif
.................... 			
.................... 		#else
.................... 			os_cor_r = OFF_SET_COR_R;
02BBC:  MOVLW  0A
02BBE:  MOVLB  4
02BC0:  MOVWF  xB1
.................... 			write_byte(ee_os_cor_r, os_cor_r);
02BC2:  MOVLB  A
02BC4:  CLRF   x68
02BC6:  MOVLW  0B
02BC8:  MOVWF  x67
02BCA:  MOVFF  4B1,A69
02BCE:  MOVLB  0
02BD0:  CALL   1C46
.................... 			os_cor_s = OFF_SET_COR_S;
02BD4:  MOVLW  0A
02BD6:  MOVLB  4
02BD8:  MOVWF  xB2
.................... 			write_byte(ee_os_cor_r, os_cor_s);
02BDA:  MOVLB  A
02BDC:  CLRF   x68
02BDE:  MOVLW  0B
02BE0:  MOVWF  x67
02BE2:  MOVFF  4B2,A69
02BE6:  MOVLB  0
02BE8:  CALL   1C46
.................... 			os_cor_t = OFF_SET_COR_T;
02BEC:  MOVLW  0A
02BEE:  MOVLB  4
02BF0:  MOVWF  xB3
.................... 			write_byte(ee_os_cor_t, os_cor_t);
02BF2:  MOVLB  A
02BF4:  CLRF   x68
02BF6:  MOVLW  0D
02BF8:  MOVWF  x67
02BFA:  MOVFF  4B3,A69
02BFE:  MOVLB  0
02C00:  CALL   1C46
.................... 		#endif	
.................... 		
.................... 		os_ten_r1 = OFF_SET_TEN_R1;
02C04:  MOVLW  0A
02C06:  MOVLB  4
02C08:  MOVWF  xAB
.................... 		write_byte(ee_os_ten_r1, os_ten_r1);
02C0A:  MOVLB  A
02C0C:  CLRF   x68
02C0E:  MOVLW  0E
02C10:  MOVWF  x67
02C12:  MOVFF  4AB,A69
02C16:  MOVLB  0
02C18:  CALL   1C46
.................... 		os_ten_s1 = OFF_SET_TEN_S1;
02C1C:  MOVLW  0A
02C1E:  MOVLB  4
02C20:  MOVWF  xAC
.................... 		write_byte(ee_os_ten_s1, os_ten_s1);
02C22:  MOVLB  A
02C24:  CLRF   x68
02C26:  MOVLW  0F
02C28:  MOVWF  x67
02C2A:  MOVFF  4AC,A69
02C2E:  MOVLB  0
02C30:  CALL   1C46
.................... 		os_ten_t1 = OFF_SET_TEN_T1;
02C34:  MOVLW  0A
02C36:  MOVLB  4
02C38:  MOVWF  xAD
.................... 		write_byte(ee_os_ten_t1, os_ten_t1);
02C3A:  MOVLB  A
02C3C:  CLRF   x68
02C3E:  MOVLW  10
02C40:  MOVWF  x67
02C42:  MOVFF  4AD,A69
02C46:  MOVLB  0
02C48:  CALL   1C46
.................... 	
.................... 		#if (ade7754 == true)
.................... 			
.................... 		#else
.................... 			off_cor_r = OFF_SET_FP_R;
02C4C:  MOVLB  4
02C4E:  CLRF   xB7
.................... 			write_byte(ee_off_cor_r, off_cor_r);
02C50:  MOVLB  A
02C52:  CLRF   x68
02C54:  MOVLW  06
02C56:  MOVWF  x67
02C58:  MOVFF  4B7,A69
02C5C:  MOVLB  0
02C5E:  CALL   1C46
.................... 		#endif
.................... 		#if (controlador == true)
.................... 			forma_reg_cht = 1;
02C62:  MOVLW  01
02C64:  MOVLB  4
02C66:  MOVWF  xCD
.................... 		#else
.................... 			forma_reg_cht = 1;
.................... 		#endif
.................... 		write_byte(ee_forma_reg_cht, 1);
02C68:  MOVLB  A
02C6A:  CLRF   x68
02C6C:  MOVLW  2A
02C6E:  MOVWF  x67
02C70:  MOVLW  01
02C72:  MOVWF  x69
02C74:  MOVLB  0
02C76:  CALL   1C46
.................... 		#if (home_system == true)
.................... 			baud_rate =  19200;
.................... 			write_byte(ee_baud_rate, baud_rate);
.................... 			endereco = 100;
.................... 			write_byte(ee_endereco, 100);
.................... 		#else
.................... 			baud_rate =  tabela_baud[3];
02C7A:  MOVLW  4B
02C7C:  MOVLB  4
02C7E:  MOVWF  xC4
02C80:  CLRF   xC3
.................... 			write_byte(ee_baud_rate, baud_rate);
02C82:  MOVLB  A
02C84:  CLRF   x68
02C86:  MOVLW  2D
02C88:  MOVWF  x67
02C8A:  MOVFF  4C3,A69
02C8E:  MOVLB  0
02C90:  CALL   1C46
.................... 			endereco = 1;
02C94:  MOVLW  01
02C96:  MOVLB  4
02C98:  MOVWF  xCE
.................... 			write_byte(ee_endereco, 1);
02C9A:  MOVLB  A
02C9C:  CLRF   x68
02C9E:  MOVLW  26
02CA0:  MOVWF  x67
02CA2:  MOVLW  01
02CA4:  MOVWF  x69
02CA6:  MOVLB  0
02CA8:  CALL   1C46
.................... 		#endif
.................... 		#if (controlador == false)
.................... 			intervalo_reg = INTERVALO_REG_DEFAULT;		
.................... 			write_word(ee_intervalo_reg, INTERVALO_REG_DEFAULT);
.................... 		#else
.................... 			intervalo_reg = INTERVALO_REG_DEFAULT;		
02CAC:  MOVLW  01
02CAE:  MOVLB  4
02CB0:  MOVWF  xC6
02CB2:  MOVLW  2C
02CB4:  MOVWF  xC5
.................... 			write_word(ee_intervalo_reg, INTERVALO_REG_DEFAULT);
02CB6:  MOVLB  A
02CB8:  CLRF   x5D
02CBA:  MOVLW  27
02CBC:  MOVWF  x5C
02CBE:  MOVLW  01
02CC0:  MOVWF  x5F
02CC2:  MOVLW  2C
02CC4:  MOVWF  x5E
02CC6:  MOVLB  0
02CC8:  CALL   23AE
.................... 		#endif		
.................... 		intervalo_integra = 15;
02CCC:  MOVLW  0F
02CCE:  MOVLB  4
02CD0:  MOVWF  xCF
.................... 		aux_intervalo_integra = 15;
02CD2:  MOVLB  3
02CD4:  CLRF   xF4
02CD6:  MOVWF  xF3
.................... 		write_byte(ee_intervalo_integra, 15);
02CD8:  MOVLB  A
02CDA:  CLRF   x68
02CDC:  MOVLW  29
02CDE:  MOVWF  x67
02CE0:  MOVLW  0F
02CE2:  MOVWF  x69
02CE4:  MOVLB  0
02CE6:  CALL   1C46
.................... 	
.................... 		ala_fp_ind = 85;
02CEA:  MOVLW  55
02CEC:  MOVLB  4
02CEE:  MOVWF  xD0
.................... 		write_byte(ee_ala_fp_ind, 85);
02CF0:  MOVLB  A
02CF2:  CLRF   x68
02CF4:  MOVLW  1C
02CF6:  MOVWF  x67
02CF8:  MOVLW  55
02CFA:  MOVWF  x69
02CFC:  MOVLB  0
02CFE:  CALL   1C46
.................... 		ala_fp_cap = 85;
02D02:  MOVLW  55
02D04:  MOVLB  4
02D06:  MOVWF  xD1
.................... 		write_byte(ee_ala_fp_cap, 85);
02D08:  MOVLB  A
02D0A:  CLRF   x68
02D0C:  MOVLW  1D
02D0E:  MOVWF  x67
02D10:  MOVLW  55
02D12:  MOVWF  x69
02D14:  MOVLB  0
02D16:  CALL   1C46
.................... 		ala_ten_a = 0;
02D1A:  MOVLB  4
02D1C:  CLRF   xD2
.................... 		write_byte(ee_ala_ten_a, 0);
02D1E:  MOVLB  A
02D20:  CLRF   x68
02D22:  MOVLW  1E
02D24:  MOVWF  x67
02D26:  CLRF   x69
02D28:  MOVLB  0
02D2A:  CALL   1C46
.................... 		ala_ten_b = 0;
02D2E:  MOVLB  4
02D30:  CLRF   xD3
.................... 		write_byte(ee_ala_ten_b, 0);
02D32:  MOVLB  A
02D34:  CLRF   x68
02D36:  MOVLW  1F
02D38:  MOVWF  x67
02D3A:  CLRF   x69
02D3C:  MOVLB  0
02D3E:  CALL   1C46
.................... 		ala_sc = 100;
02D42:  MOVLW  64
02D44:  MOVLB  4
02D46:  MOVWF  xD4
.................... 		write_byte(ee_ala_sc, 100);
02D48:  MOVLB  A
02D4A:  CLRF   x68
02D4C:  MOVLW  20
02D4E:  MOVWF  x67
02D50:  MOVLW  64
02D52:  MOVWF  x69
02D54:  MOVLB  0
02D56:  CALL   1C46
.................... 		ala_subc = 0;
02D5A:  MOVLB  4
02D5C:  CLRF   xD7
.................... 		write_byte(ee_ala_subc, 0);
02D5E:  MOVLB  A
02D60:  CLRF   x68
02D62:  MOVLW  3F
02D64:  MOVWF  x67
02D66:  CLRF   x69
02D68:  MOVLB  0
02D6A:  CALL   1C46
.................... 		ala_chtt = 0;
02D6E:  MOVLB  4
02D70:  CLRF   xD5
.................... 		write_byte(ee_ala_chtt, 0);
02D72:  MOVLB  A
02D74:  CLRF   x68
02D76:  MOVLW  21
02D78:  MOVWF  x67
02D7A:  CLRF   x69
02D7C:  MOVLB  0
02D7E:  CALL   1C46
.................... 		ala_chtc = 0;
02D82:  MOVLB  4
02D84:  CLRF   xD6
.................... 		write_byte(ee_ala_chtc, 0);	
02D86:  MOVLB  A
02D88:  CLRF   x68
02D8A:  MOVLW  22
02D8C:  MOVWF  x67
02D8E:  CLRF   x69
02D90:  MOVLB  0
02D92:  CALL   1C46
.................... 		#if (com_alarme_demanda == true)
.................... 			ala_demanda_ativa = 0;
02D96:  MOVLB  4
02D98:  CLRF   xDA
.................... 	//		write_word(ee_ala_demanda_ativa, 0);
.................... 		#endif
.................... 	    	
.................... 	    registro = 0;
02D9A:  CLRF   xCC
.................... 		write_byte(ee_registro, 1);
02D9C:  MOVLB  A
02D9E:  CLRF   x68
02DA0:  MOVLW  2F
02DA2:  MOVWF  x67
02DA4:  MOVLW  01
02DA6:  MOVWF  x69
02DA8:  MOVLB  0
02DAA:  CALL   1C46
.................... 		#if (portatil == true)
.................... 			prog_time = 0;
.................... 			write_byte(ee_prog_time, 0);
.................... 			hora_liga = 0;
.................... 			write_byte(ee_hora_liga, 0);
.................... 			hora_desliga = 23;
.................... 			write_byte(ee_hora_desliga, 23);
.................... 			minuto_liga = 0;
.................... 			write_byte(ee_minuto_liga, 0);
.................... 			minuto_desliga = 59;
.................... 			write_byte(ee_minuto_desliga, 59);
.................... 			dia_liga = 1;
.................... 			write_byte(ee_dia_liga, 1);
.................... 			dia_desliga = 31;
.................... 			write_byte(ee_dia_desliga, 31);
.................... 			fila_circular = 1;
.................... 			write_byte(ee_fila_circular, 1);
.................... 		#endif
.................... 		tipo_ligacao = 0;
02DAE:  MOVLB  4
02DB0:  CLRF   xC7
.................... 		write_byte(ee_tipo_ligacao, 0);
02DB2:  MOVLB  A
02DB4:  CLRF   x68
02DB6:  MOVLW  3E
02DB8:  MOVWF  x67
02DBA:  CLRF   x69
02DBC:  MOVLB  0
02DBE:  CALL   1C46
.................... 	
.................... 		#if (controlador == true) || (st_prog == true)
.................... 			#if (st8500c == true)
.................... 				nro_cargas = NRO_MAXIMO_CARGAS / 2;
02DC2:  MOVLW  08
02DC4:  MOVWF  x6D
.................... 				write_byte(ee_nro_cargas, NRO_MAXIMO_CARGAS / 2);
02DC6:  MOVLW  03
02DC8:  MOVLB  A
02DCA:  MOVWF  x68
02DCC:  MOVLW  13
02DCE:  MOVWF  x67
02DD0:  MOVLW  08
02DD2:  MOVWF  x69
02DD4:  MOVLB  0
02DD6:  CALL   1C46
.................... 				max_kw = MAXIMA_CARGA;
02DDA:  CLRF   x66
02DDC:  MOVLW  FA
02DDE:  MOVWF  x65
.................... 		 		write_word(ee_max_kw, MAXIMA_CARGA);
02DE0:  MOVLW  02
02DE2:  MOVLB  A
02DE4:  MOVWF  x5D
02DE6:  MOVLW  81
02DE8:  MOVWF  x5C
02DEA:  CLRF   x5F
02DEC:  MOVLW  FA
02DEE:  MOVWF  x5E
02DF0:  MOVLB  0
02DF2:  CALL   23AE
.................... 				min_kw = 5;
02DF6:  MOVLW  05
02DF8:  MOVWF  x64
.................... 		 		write_byte(ee_min_kw, 5);
02DFA:  MOVLW  02
02DFC:  MOVLB  A
02DFE:  MOVWF  x68
02E00:  MOVLW  82
02E02:  MOVWF  x67
02E04:  MOVLW  05
02E06:  MOVWF  x69
02E08:  MOVLB  0
02E0A:  CALL   1C46
.................... 			#else
.................... 				nro_bancos_capacitor = NRO_MAXIMO_BANCOS_CAPACITOR / 2;
.................... 				write_byte(ee_nro_bancos_capacitor, NRO_MAXIMO_BANCOS_CAPACITOR / 2);
.................... 				max_kvar = 0;
.................... 		 		write_byte(ee_max_kvar,0);
.................... 				min_kvar = 5;
.................... 		 		write_byte(ee_min_kvar, 5);
.................... 		 	#endif
.................... 			sequencia = 1;
02E0E:  MOVLW  01
02E10:  MOVWF  x67
.................... 			calcular_bancos = 1;
02E12:  BSF    27.1
.................... 	 		write_byte(ee_sequencia, 1);
02E14:  MOVLW  02
02E16:  MOVLB  A
02E18:  MOVWF  x68
02E1A:  MOVLW  85
02E1C:  MOVWF  x67
02E1E:  MOVLW  01
02E20:  MOVWF  x69
02E22:  MOVLB  0
02E24:  CALL   1C46
.................... 			tempo_aciona = 30;
02E28:  MOVLW  1E
02E2A:  MOVWF  x6A
.................... 	 		write_byte(ee_tempo_aciona, 30);
02E2C:  MOVLW  02
02E2E:  MOVLB  A
02E30:  MOVWF  x68
02E32:  MOVLW  83
02E34:  MOVWF  x67
02E36:  MOVLW  1E
02E38:  MOVWF  x69
02E3A:  MOVLB  0
02E3C:  CALL   1C46
.................... 			tempo_desaciona = 5;
02E40:  MOVLW  05
02E42:  MOVWF  x6B
.................... 	 		write_byte(ee_tempo_desaciona, 5);
02E44:  MOVLW  02
02E46:  MOVLB  A
02E48:  MOVWF  x68
02E4A:  MOVLW  84
02E4C:  MOVWF  x67
02E4E:  MOVLW  05
02E50:  MOVWF  x69
02E52:  MOVLB  0
02E54:  CALL   1C46
.................... 			cor_minima = 2;
02E58:  MOVLW  02
02E5A:  MOVLB  4
02E5C:  MOVWF  xD9
.................... 	 		write_byte(ee_cor_minima, 2);
02E5E:  MOVLB  A
02E60:  MOVWF  x68
02E62:  MOVLW  EE
02E64:  MOVWF  x67
02E66:  MOVLW  02
02E68:  MOVWF  x69
02E6A:  MOVLB  0
02E6C:  CALL   1C46
.................... 	 		#if (com_rep == true)
.................... 	 			cor_minima_rep = 0;
.................... 	 			write_word(ee_cor_minima_rep, 0);
.................... 	 		#endif
.................... 			com_des_fp_ind_cap = 100;
02E70:  MOVLW  64
02E72:  MOVWF  5D
.................... 	 		write_byte(ee_com_des_fp_ind_cap, 100);
02E74:  MOVLW  02
02E76:  MOVLB  A
02E78:  MOVWF  x68
02E7A:  MOVLW  ED
02E7C:  MOVWF  x67
02E7E:  MOVLW  64
02E80:  MOVWF  x69
02E82:  MOVLB  0
02E84:  CALL   1C46
.................... 			com_des_ten_a = 0;
02E88:  CLRF   59
.................... 	 		write_byte(ee_com_des_ten_a, 0);
02E8A:  MOVLW  02
02E8C:  MOVLB  A
02E8E:  MOVWF  x68
02E90:  MOVLW  EA
02E92:  MOVWF  x67
02E94:  CLRF   x69
02E96:  MOVLB  0
02E98:  CALL   1C46
.................... 			com_des_ten_b = 0;
02E9C:  CLRF   5A
.................... 	 		write_byte(ee_com_des_ten_b, 0);
02E9E:  MOVLW  02
02EA0:  MOVLB  A
02EA2:  MOVWF  x68
02EA4:  MOVLW  EF
02EA6:  MOVWF  x67
02EA8:  CLRF   x69
02EAA:  MOVLB  0
02EAC:  CALL   1C46
.................... 			com_des_chtt = 0;
02EB0:  CLRF   5B
.................... 	 		write_byte(ee_com_des_chtt, 0);
02EB2:  MOVLW  02
02EB4:  MOVLB  A
02EB6:  MOVWF  x68
02EB8:  MOVLW  EB
02EBA:  MOVWF  x67
02EBC:  CLRF   x69
02EBE:  MOVLB  0
02EC0:  CALL   1C46
.................... 			com_des_chtc = 0;
02EC4:  CLRF   5C
.................... 	 		write_byte(ee_com_des_chtc, 0);
02EC6:  MOVLW  02
02EC8:  MOVLB  A
02ECA:  MOVWF  x68
02ECC:  MOVLW  EC
02ECE:  MOVWF  x67
02ED0:  CLRF   x69
02ED2:  MOVLB  0
02ED4:  CALL   1C46
.................... 	 		
.................... 			#if (st8500c == true)
.................... 				for (aux_b1 = 0; aux_b1 < NRO_MAXIMO_CARGAS; aux_b1++)
02ED8:  MOVLB  3
02EDA:  CLRF   xB1
02EDC:  MOVF   xB1,W
02EDE:  SUBLW  0F
02EE0:  BNC   2F4E
.................... 					{
.................... 					addr = ee_carga_1 + aux_b1;
02EE2:  MOVLW  F3
02EE4:  ADDWF  xB1,W
02EE6:  MOVWF  xED
02EE8:  MOVLW  02
02EEA:  MOVWF  xEE
02EEC:  BTFSC  FD8.0
02EEE:  INCF   xEE,F
.................... 					carga[aux_b1] = 100;
02EF0:  CLRF   03
02EF2:  MOVF   xB1,W
02EF4:  ADDLW  07
02EF6:  MOVWF  FE9
02EF8:  MOVLW  01
02EFA:  ADDWFC 03,W
02EFC:  MOVWF  FEA
02EFE:  MOVLW  64
02F00:  MOVWF  FEF
.................... 			 		write_byte(addr, 100);
02F02:  MOVFF  3EE,A68
02F06:  MOVFF  3ED,A67
02F0A:  MOVLB  A
02F0C:  MOVWF  x69
02F0E:  MOVLB  0
02F10:  CALL   1C46
.................... 		
.................... 					addr = ee_tempo_repouso_1 + aux_b1;
02F14:  MOVLW  DA
02F16:  MOVLB  3
02F18:  ADDWF  xB1,W
02F1A:  MOVWF  xED
02F1C:  MOVLW  02
02F1E:  MOVWF  xEE
02F20:  BTFSC  FD8.0
02F22:  INCF   xEE,F
.................... 					tempo_repouso[aux_b1] = 180;
02F24:  CLRF   03
02F26:  MOVF   xB1,W
02F28:  ADDLW  E7
02F2A:  MOVWF  FE9
02F2C:  MOVLW  00
02F2E:  ADDWFC 03,W
02F30:  MOVWF  FEA
02F32:  MOVLW  B4
02F34:  MOVWF  FEF
.................... 			 		write_byte(addr, 180);
02F36:  MOVFF  3EE,A68
02F3A:  MOVFF  3ED,A67
02F3E:  MOVLB  A
02F40:  MOVWF  x69
02F42:  MOVLB  0
02F44:  CALL   1C46
.................... 					}
.................... 			#else
.................... 				for (aux_b1 = 0; aux_b1 < NRO_MAXIMO_BANCOS_CAPACITOR; aux_b1++)
.................... 					{
.................... 					calcular_bancos = 1;
.................... 					
.................... 					addr = ee_banco_capacitor_1 + aux_b1;
.................... 					banco_capacitor[aux_b1] = 5;
.................... 			 		write_byte(addr, 5);
.................... 		
.................... 					addr = ee_tempo_repouso_1 + aux_b1;
.................... 					tempo_repouso[aux_b1] = 180;
.................... 			 		write_byte(addr, 180);
.................... 					}
.................... 			#endif
.................... 				
.................... 		#endif
.................... 		
.................... 		#if (com_rep == true)
02F48:  MOVLB  3
02F4A:  INCF   xB1,F
02F4C:  BRA    2EDC
.................... 			if (modo_rep > NRO_MODOS_REP)
.................... 				{
.................... 				modo_rep = read_byte(ee_modo_rep);
.................... 				if (modo_rep > NRO_MODOS_REP)
.................... 					{
.................... 					#if (st8500c == true)
.................... 						modo_rep = 1;
.................... 						write_byte(ee_modo_rep, 1);
.................... 					#else
.................... 						modo_rep = 0;
.................... 						write_byte(ee_modo_rep, 0);
.................... 					#endif
.................... 					}
.................... 				}
.................... 				
.................... 			write_word(ee_fat_conv_ativa, 1000);
.................... 			write_word(ee_fat_conv_reativa,1000);
.................... 			
.................... 		#endif
.................... 	
.................... 		calcula_checksum_vars();
02F4E:  MOVLB  0
02F50:  CALL   1A42
02F54:  RETURN 0
.................... 	    
.................... 	}
.................... 	
.................... void fixa_parametros(void)
.................... 	{
.................... 		#if (portatil == true)
.................... 			#if (se_com_flex == true)
.................... 				os_cor_pt_r[0] = OFF_SET_COR_R_9001G1;
.................... 				os_cor_pt_s[0] = OFF_SET_COR_S_9001G1;
.................... 				os_cor_pt_t[0] = OFF_SET_COR_T_9001G1;
.................... 				// ST9001G2
.................... 				os_cor_pt_r[1] = OFF_SET_COR_R_9001G2;
.................... 				os_cor_pt_s[1] = OFF_SET_COR_S_9001G2;
.................... 				os_cor_pt_t[1] = OFF_SET_COR_T_9001G2;
.................... 				// ST9002G1
.................... 				os_cor_pt_r[2] = OFF_SET_COR_R_9002G1;
.................... 				os_cor_pt_s[2] = OFF_SET_COR_S_9002G1;
.................... 				os_cor_pt_t[2] = OFF_SET_COR_T_9002G1;
.................... 				// ST9003G1
.................... 				os_cor_pt_r[3] = OFF_SET_COR_R_9003G1;
.................... 				os_cor_pt_s[3] = OFF_SET_COR_S_9003G1;
.................... 				os_cor_pt_t[3] = OFF_SET_COR_T_9003G1;
.................... 				// ST9004G1
.................... 				os_cor_pt_r[4] = OFF_SET_COR_R_9004G1;
.................... 				os_cor_pt_s[4] = OFF_SET_COR_S_9004G1;
.................... 				os_cor_pt_t[4] = OFF_SET_COR_T_9004G1;
.................... 				// ST9005G1
.................... 				os_cor_pt_r[5] = OFF_SET_COR_R_9005G1;
.................... 				os_cor_pt_s[5] = OFF_SET_COR_S_9005G1;
.................... 				os_cor_pt_t[5] = OFF_SET_COR_T_9005G1;
.................... 				// ST9005G2
.................... 				os_cor_pt_r[6] = OFF_SET_COR_R_9005G2;
.................... 				os_cor_pt_s[6] = OFF_SET_COR_S_9005G2;
.................... 				os_cor_pt_t[6] = OFF_SET_COR_T_9005G2;
.................... 				// ST9005G3
.................... 				os_cor_pt_r[7] = OFF_SET_COR_R_9005G3;
.................... 				os_cor_pt_s[7] = OFF_SET_COR_S_9005G3;
.................... 				os_cor_pt_t[7] = OFF_SET_COR_T_9005G3;
.................... 				// ST9005G4
.................... 				os_cor_pt_r[8] = OFF_SET_COR_R_9005G4;
.................... 				os_cor_pt_s[8] = OFF_SET_COR_S_9005G4;
.................... 				os_cor_pt_t[8] = OFF_SET_COR_T_9005G4;
.................... 				// ST9005G5
.................... 				os_cor_pt_r[9] = OFF_SET_COR_R_9005G5;
.................... 				os_cor_pt_s[9] = OFF_SET_COR_S_9005G5;
.................... 				os_cor_pt_t[9] = OFF_SET_COR_T_9005G5;
.................... 				// ST9006G1
.................... 				os_cor_pt_r[10] = OFF_SET_COR_R_9006G1;
.................... 				os_cor_pt_s[10] = OFF_SET_COR_S_9006G1;
.................... 				os_cor_pt_t[10] = OFF_SET_COR_T_9006G1;
.................... 				// ST9006G2
.................... 				os_cor_pt_r[11] = OFF_SET_COR_R_9006G2;
.................... 				os_cor_pt_s[11] = OFF_SET_COR_S_9006G2;
.................... 				os_cor_pt_t[11] = OFF_SET_COR_T_9006G2;
.................... 				// ST9006G3
.................... 				os_cor_pt_r[12] = OFF_SET_COR_R_9006G3;
.................... 				os_cor_pt_s[12] = OFF_SET_COR_S_9006G3;
.................... 				os_cor_pt_t[12] = OFF_SET_COR_T_9006G3;
.................... 				// ST9006G4
.................... 				os_cor_pt_r[13] = OFF_SET_COR_R_9006G4;
.................... 				os_cor_pt_s[13] = OFF_SET_COR_S_9006G4;
.................... 				os_cor_pt_t[13] = OFF_SET_COR_T_9006G4;
.................... 				// ST9006G5
.................... 				os_cor_pt_r[14] = OFF_SET_COR_R_9006G5;
.................... 				os_cor_pt_s[14] = OFF_SET_COR_S_9006G5;
.................... 				os_cor_pt_t[14] = OFF_SET_COR_T_9006G5;
.................... 				// ST9007G1
.................... 				os_cor_pt_r[15] = OFF_SET_COR_R_9007G1;
.................... 				os_cor_pt_s[15] = OFF_SET_COR_S_9007G1;
.................... 				os_cor_pt_t[15] = OFF_SET_COR_T_9007G1;
.................... 				// ST9007G2
.................... 				os_cor_pt_r[16] = OFF_SET_COR_R_9007G2;
.................... 				os_cor_pt_s[16] = OFF_SET_COR_S_9007G2;
.................... 				os_cor_pt_t[16] = OFF_SET_COR_T_9007G2;
.................... 				// ST9008G1
.................... 				os_cor_pt_r[17] = OFF_SET_COR_R_9008G1;
.................... 				os_cor_pt_s[17] = OFF_SET_COR_S_9008G1;
.................... 				os_cor_pt_t[17] = OFF_SET_COR_T_9008G1;
.................... 	//		
.................... 			#elif (viercon == true)	
.................... 				// 30
.................... 				os_cor_pt_r[0] = OFF_SET_COR_R_20;
.................... 				os_cor_pt_s[0] = OFF_SET_COR_S_20;
.................... 				os_cor_pt_t[0] = OFF_SET_COR_T_20;
.................... 				// 300
.................... 				os_cor_pt_r[1] = OFF_SET_COR_R_200;
.................... 				os_cor_pt_s[1] = OFF_SET_COR_S_200;
.................... 				os_cor_pt_t[1] = OFF_SET_COR_T_200;
.................... 				// 3000
.................... 				os_cor_pt_r[2] = OFF_SET_COR_R_300;
.................... 				os_cor_pt_s[2] = OFF_SET_COR_S_300;
.................... 				os_cor_pt_t[2] = OFF_SET_COR_T_300;
.................... 			#else
.................... 				// 20
.................... 				os_cor_pt_r[0] = OFF_SET_COR_R_20;
.................... 				os_cor_pt_s[0] = OFF_SET_COR_S_20;
.................... 				os_cor_pt_t[0] = OFF_SET_COR_T_20;
.................... 				// 200
.................... 				os_cor_pt_r[1] = OFF_SET_COR_R_200;
.................... 				os_cor_pt_s[1] = OFF_SET_COR_S_200;
.................... 				os_cor_pt_t[1] = OFF_SET_COR_T_200;
.................... 				// 300
.................... 				os_cor_pt_r[2] = OFF_SET_COR_R_300;
.................... 				os_cor_pt_s[2] = OFF_SET_COR_S_300;
.................... 				os_cor_pt_t[2] = OFF_SET_COR_T_300;
.................... 				// 600
.................... 				os_cor_pt_r[3] = OFF_SET_COR_R_600;
.................... 				os_cor_pt_s[3] = OFF_SET_COR_S_600;
.................... 				os_cor_pt_t[3] = OFF_SET_COR_T_600;
.................... 				// 1000
.................... 				os_cor_pt_r[4]= OFF_SET_COR_R_1000;
.................... 				os_cor_pt_s[4] = OFF_SET_COR_S_1000;
.................... 				os_cor_pt_t[4] = OFF_SET_COR_T_1000;
.................... 				// 1500
.................... 				os_cor_pt_r[5]= OFF_SET_COR_R_1500;
.................... 				os_cor_pt_s[5] = OFF_SET_COR_S_1500;
.................... 				os_cor_pt_t[5] = OFF_SET_COR_T_1500;
.................... 				#if (ponteira_kyoritsu == true)
.................... 				#else
.................... 					// 2000
.................... 					os_cor_pt_r[6]= OFF_SET_COR_R_2000;
.................... 					os_cor_pt_s[6] = OFF_SET_COR_S_2000;
.................... 					os_cor_pt_t[6] = OFF_SET_COR_T_2000;
.................... 					// 3000
.................... 					os_cor_pt_r[7]= OFF_SET_COR_R_3000;
.................... 					os_cor_pt_s[7] = OFF_SET_COR_S_3000;
.................... 					os_cor_pt_t[7] = OFF_SET_COR_T_3000;
.................... 					// 6000
.................... 					os_cor_pt_r[8]= OFF_SET_COR_R_6000;
.................... 					os_cor_pt_s[8] = OFF_SET_COR_S_6000;
.................... 					os_cor_pt_t[8] = OFF_SET_COR_T_6000;
.................... 				#endif
.................... 			#endif
.................... 		#else
.................... 		
.................... 			os_cor_r = OFF_SET_COR_R;
.................... 			os_cor_s = OFF_SET_COR_S;
.................... 			os_cor_t = OFF_SET_COR_T;
.................... 		
.................... 		#endif	
.................... 		os_ten_r1 = OFF_SET_TEN_R1;
.................... 		os_ten_s1 = OFF_SET_TEN_S1;
.................... 		os_ten_t1 = OFF_SET_TEN_T1;
.................... 	
.................... 	#if (ade7754 == true)
.................... 	
.................... 	#else
.................... 		off_cor_r = OFF_SET_FP_R;
.................... 	//	off_cor_s = OFF_SET_FP_S;
.................... 	//	off_cor_t = OFF_SET_FP_S;
.................... 	
.................... 	#endif    	
.................... 		calcula_checksum_vars();
.................... 	 
.................... 	
.................... 	}
.................... 
.................... /* Fim st_vali */
.................... 
.................... #if (com_regs == true)
.................... 	#include "sst25vfxxx.c"
.................... /*
.................... software Drivers
.................... 
.................... SST25VF512 512 Kbit(64K x 8) Serial Flash Memory
.................... SST25VF010 1 Mbit(128K x 8) Serial Flash Memory
.................... SST25VF020 2 Mbit(256K x 8) Serial Flash Memory
.................... SST25VF040 4 Mbit(512K x 8) Serial Flash Memory
.................... 
.................... April 30th, 2002
.................... 
.................... ABOUT THE softWARE
.................... This application note provides software driver examples for 25VFxxx,
.................... Serial Flash. Extensive comments are included in each routine to describe 
.................... the function of each routine.  The interface coding uses polling method 
.................... rather than the SPI protocol to interface with these serial devices.  The
.................... functions are differentiated below in terms of the communication protocols
.................... (uses Mode 0) and specific device operation instructions. This code has been 
.................... designed to compile using the Keil compiler.
.................... 
.................... 
.................... ABOUT THE 25VFxxx
.................... 
.................... Companion product datasheets for the 25VFxxx should be reviewed in 
.................... conjunction with this application note for a complete understanding 
.................... of the device.
.................... 
.................... 
.................... device Communication Protocol(pinout related) functions:
.................... 
.................... Functions                    		Function
.................... ------------------------------------------------------------------
.................... init					Initializes clock to set up mode 0.
.................... send_byte_flash			Sends one byte using FLASH_SI pin to send and 
.................... 						shift out 1-bit per clock rising edge
.................... get_byte_flash			receives one byte using FLASH_SO pin to receive and shift 
.................... 						in 1-bit per clock falling edge
.................... FLASH_CE_High			Sets Chip Enable pin of the serial flash to high
.................... FLASH_CE_Low			Clears Chip Enable of the serial flash to low
.................... Hold					Clears Hold pin to make serial flash hold
.................... Unhold					Unholds the serial flash
.................... 
.................... Note:  The pin names of the 25VFxxx are used in this application note. The associated test code
.................... will not compile unless these pinouts (FLASH_CLK, FLASH_SI, FLASH_SO, FLASH_SO, FLASH_CE,  Hold) are pre-defined on your
.................... software which should reflect your hardware interfaced. 	 
.................... 
.................... 
.................... device Operation Instruction functions:
.................... 
.................... Functions                    		Function
.................... ------------------------------------------------------------------
.................... Read_Status_Register	Reads the status register of the serial flash
.................... EWSR					Enables the Write Status Register
.................... WRSR					Performs a write to the status register
.................... WREN					Write enables the serial flash
.................... WRDI					Write disables the serial flash
.................... Read_ID					Reads the manufacturer ID and device ID
.................... read_byte_flash				Reads one byte from the serial flash and returns byte
.................... Read_Cont				Reads multiple bytes
.................... write_byte_flash		Program one byte to the serial flash
.................... Auto_Add_IncA			Initial Auto Address Increment process
.................... Auto_Add_IncB			Successive Auto_Address_Increment process after AAI initiation
.................... flash_erase				Erases entire serial flash
.................... sector_flash_erase		Erases one sector (4 KB) of the serial flash
.................... Block_Erase				Erases one block (32 KB) of the serial flash
.................... Wait_Busy				Polls status register until busy bit is low
.................... Wait_Busy_AAI			Polls status register until busy bit is low for AAI programming
.................... WREN_Check				Checks to see if WEL is set
.................... WREN_AAI_Check			Checks to see if WEL and AAI mode is set
.................... 
.................... 
.................... 
.................... "C" LANGUAGE DRIVERS
.................... */
.................... /********************************************************************/
.................... /* Copyright FLASH_SIlicon Storage Technology, Inc. (SST), 1994-2002*/
.................... /* Example "C" language Driver of 25VFXXX Serial Flash		    	*/
.................... /* Aaron Forward, FLASH_SIlicon Storage Technology, Inc.            */
.................... /*                                                                  */
.................... /* ReviFLASH_SIon 1.0, April 30th, 2002			     				*/   
.................... /*                                                                  */
.................... /*								    								*/
.................... /********************************************************************/
.................... 
.................... //#include <stdio.h>
.................... //#include <stdlib.h>
.................... 
.................... 
.................... /* Function Prototypes */
.................... 
.................... void init();
.................... void send_byte_flash(char out);
.................... char get_byte_flash();
.................... void FLASH_CE_High();
.................... void FLASH_CE_Low(int32 Dst);
.................... void Hold();
.................... void Unhold();
.................... char Read_Status_Register(int32 Dst);
.................... void EWSR(int32 Dst);
.................... void WRSR(int32 Dst ,char valor);
.................... void WREN(int32 Dst);
.................... void WRDI(int32 Dst);
.................... char Read_ID(int32 Dst, char ID_addr);
.................... char read_byte_flash(int32 Dst);
.................... //void Read_Cont(int32 Dst, char no_bytes);
.................... void write_byte_flash(int32 Dst, char valor);
.................... int32 write_word_flash(int32 Dst, word valor);
.................... void Auto_Add_IncA(int32 Dst, char valor);
.................... void Auto_Add_IncB(int32 Dst, char valor);
.................... void flash_erase(int32 Dst);
.................... void sector_flash_erase(int32 Dst);
.................... void Block_Erase(int32 Dst);
.................... void Wait_Busy(int32 Dst);
.................... void Wait_Busy_AAI(int32 Dst);
.................... void WREN_Check(int32 Dst);
.................... void WREN_AAI_Check(int32 Dst);
.................... 
.................... 
.................... char byte_flash;
.................... char ID_register_flash;
.................... char status_register_flash;
.................... 
.................... /************************************************************************/
.................... /* procedure: init														*/
.................... /*																		*/
.................... /* This procedure initializes the FLASH_CLK to low. Must be called prior to 	*/
.................... /* setting up mode 0.													*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Output:																*/
.................... /*		FLASH_CLK														*/
.................... /************************************************************************/
.................... void init()
.................... {
.................... 	output_low(FLASH_CLK);	/* set clock to low initial state */
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: send_byte_flash											*/
.................... /*																		*/
.................... /* This procedure outputs a byte shifting out 1-bit per clock rising	*/
.................... /* edge on the the FLASH_SI pin(LSB 1st).								*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		out																*/
.................... /*																		*/
.................... /* Output:																*/
.................... /*		FLASH_SI														*/
.................... /************************************************************************/
.................... void send_byte_flash(char out)
.................... {
.................... 	char i;
.................... 	for (i = 0; i < 8; i++)
.................... 		{
.................... 	   	output_bit(FLASH_SI,shift_left(&out,1,0));
.................... 		output_high(FLASH_CLK);				/* toggle clock high */
.................... 		output_low(FLASH_CLK);				/* toggle clock low */
.................... 		}
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: get_byte_flash											*/
.................... /*																		*/
.................... /* This procedure inputs a byte shifting in 1-bit per clock falling		*/
.................... /* edge on the FLASH_SO pin(LSB 1st).									*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		FLASH_SO														*/
.................... /*																		*/
.................... /* Output:																*/
.................... /*		None															*/
.................... /************************************************************************/
.................... char get_byte_flash()
.................... {
.................... 	char i;
.................... 	char in;
.................... 	in = 0;
.................... 	for (i = 0; i < 8; i++)
.................... 		{
....................    		shift_left(&in,1,input(FLASH_SO));
.................... 		output_high(FLASH_CLK);		/* toggle clock high */
.................... 		output_low(FLASH_CLK);		/* toggle clock low */
.................... 		}
.................... 	return(in);
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: FLASH_CE_High												*/
.................... /*																		*/
.................... /* This procedure set FLASH_CE = High.									*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Output:																*/
.................... /*		FLASH_CE														*/
.................... /*																		*/
.................... /************************************************************************/
.................... void FLASH_CE_High() 
.................... {
.................... 	output_high(FLASH1_CE);				/* set FLASH_CE high */
*
046AC:  BCF    F96.2
046AE:  BSF    F8D.2
.................... 	output_high(FLASH2_CE);				/* set FLASH_CE high */
046B0:  BCF    F96.2
046B2:  BSF    F8D.2
.................... 	output_high(FLASH3_CE);				/* set FLASH_CE high */
046B4:  BCF    F96.2
046B6:  BSF    F8D.2
.................... 	output_high(FLASH4_CE);				/* set FLASH_CE high */
046B8:  BCF    F96.2
046BA:  BSF    F8D.2
046BC:  RETURN 0
.................... //			 76543210
.................... //	setup_spi(0);
.................... 	
.................... }
.................... 
.................... 
.................... /************************************************************************/
.................... /* procedure: FLASH_CE_Low												*/
.................... /*																		*/
.................... /* This procedure drives the FLASH_CE of the device to low.  			*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Output:																*/
.................... /*		FLASH_CE														*/
.................... /*																		*/
.................... /************************************************************************/
.................... 
.................... void FLASH_CE_Low(int32 Dst){	
.................... //	setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
.................... //	setup_spi(SPI_MASTER | SPI_SCK_IDLE_HIGH | SPI_XMIT_L_TO_H | SPI_SAMPLE_AT_MIDDLE | SPI_CLK_DIV_4);
.................... //	output_low(FLASH_CLK);				/* toggle clock low */
.................... 
.................... 	output_low(FLASH1_CE);				/* clear FLASH_CE low */
*
04D2C:  BCF    F96.2
04D2E:  BCF    F8D.2
04D30:  RETURN 0
.................... }
.................... 
.................... 
.................... /************************************************************************/
.................... /* procedure: Hold()													*/
.................... /*																		*/
.................... /* This procedure clears the Hold pin to low.							*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Output:																*/
.................... /*		FLASH_HOLD														*/
.................... /************************************************************************/
.................... void Hold()
.................... {
.................... 	output_low(FLASH_HOLD);			/* clear Hold pin */
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: Unhold()													*/
.................... /*																		*/
.................... /* This procedure sets the Hold pin to high.							*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Output:																*/
.................... /*		FLASH_HOLD														*/
.................... /************************************************************************/
.................... void Unhold()
.................... {
.................... 	output_high(FLASH_HOLD);			/* set Hold pin */
*
046BE:  BCF    F96.0
046C0:  BSF    F8D.0
046C2:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... /************************************************************************/
.................... /* procedure: Read_Status_Register										*/
.................... /*																		*/
.................... /* This procedure read the status register and returns the byte.		*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		valor															*/
.................... /************************************************************************/
.................... char Read_Status_Register(int32 Dst)
.................... {
.................... 	FLASH_CE_Low(Dst);					/* enable device */
*
0556A:  MOVFF  A8A,A97
0556E:  MOVFF  A89,A96
05572:  MOVFF  A88,A95
05576:  MOVFF  A87,A94
0557A:  CALL   4D2C
.................... 	spi_write(0x05);
0557E:  MOVF   FC9,W
05580:  MOVLW  05
05582:  MOVWF  FC9
05584:  RRCF   FC7,W
05586:  BNC   5584
.................... 
.................... //	setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
.................... //	setup_spi(SPI_MASTER | SPI_SCK_IDLE_HIGH | SPI_XMIT_L_TO_H | SPI_SAMPLE_AT_MIDDLE | SPI_CLK_DIV_4);
.................... 
.................... 	status_register_flash = spi_read(0);
05588:  MOVF   FC9,W
0558A:  CLRF   FC9
0558C:  RRCF   FC7,W
0558E:  BNC   558C
05590:  MOVFF  FC9,88D
.................... 	FLASH_CE_High();				/* disable device */
05594:  CALL   46AC
.................... 	if ((status_register_flash & 0x0c) != 0 )
05598:  MOVLB  8
0559A:  MOVF   x8D,W
0559C:  ANDLW  0C
0559E:  BZ    55E6
.................... 		{
.................... 		desprotege_flash(Dst);
055A0:  MOVFF  A8A,A8E
055A4:  MOVFF  A89,A8D
055A8:  MOVFF  A88,A8C
055AC:  MOVFF  A87,A8B
055B0:  MOVLB  0
055B2:  CALL   4D80
.................... 		FLASH_CE_Low(Dst);					/* enable device */
055B6:  MOVFF  A8A,A97
055BA:  MOVFF  A89,A96
055BE:  MOVFF  A88,A95
055C2:  MOVFF  A87,A94
055C6:  CALL   4D2C
.................... 		spi_write(0x05);
055CA:  MOVF   FC9,W
055CC:  MOVLW  05
055CE:  MOVWF  FC9
055D0:  RRCF   FC7,W
055D2:  BNC   55D0
.................... 
.................... //		setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
.................... //		setup_spi(SPI_MASTER | SPI_SCK_IDLE_HIGH | SPI_XMIT_L_TO_H | SPI_SAMPLE_AT_MIDDLE | SPI_CLK_DIV_4);
.................... 
.................... 		status_register_flash = spi_read(0);
055D4:  MOVF   FC9,W
055D6:  CLRF   FC9
055D8:  RRCF   FC7,W
055DA:  BNC   55D8
055DC:  MOVFF  FC9,88D
.................... 		FLASH_CE_High();				/* disable device */
055E0:  CALL   46AC
055E4:  MOVLB  8
.................... 		}
.................... 	if ((status_register_flash & 0x0c) == 0x0c )
055E6:  MOVF   x8D,W
055E8:  ANDLW  0C
055EA:  SUBLW  0C
055EC:  BNZ   55F0
.................... 		{
.................... 		while(1)
.................... 			{
055EE:  BRA    55EE
.................... 				
.................... 			}
.................... 		}
.................... 	return(status_register_flash);
055F0:  MOVFF  88D,01
055F4:  MOVLB  0
055F6:  RETURN 0
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: EWSR														*/
.................... /*																		*/
.................... /* This procedure Enables Write Status Register.		  				*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /************************************************************************/
.................... void EWSR(int32 Dst)
.................... {
.................... 	FLASH_CE_Low(Dst);				/* enable device */
*
04D32:  MOVFF  A92,A97
04D36:  MOVFF  A91,A96
04D3A:  MOVFF  A90,A95
04D3E:  MOVFF  A8F,A94
04D42:  RCALL  4D2C
.................... 	spi_write(0x50);
04D44:  MOVF   FC9,W
04D46:  MOVLW  50
04D48:  MOVWF  FC9
04D4A:  RRCF   FC7,W
04D4C:  BNC   4D4A
.................... 	FLASH_CE_High();			/* disable device */
04D4E:  RCALL  46AC
04D50:  GOTO   4D92 (RETURN)
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: WRSR														*/
.................... /*																		*/
.................... /* This procedure writes a byte to the Status Register.					*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		valor															*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /************************************************************************/
.................... void WRSR(int32 Dst, char valor)
.................... {
.................... 	FLASH_CE_Low(Dst);				/* enable device */
04D54:  MOVFF  A92,A97
04D58:  MOVFF  A91,A96
04D5C:  MOVFF  A90,A95
04D60:  MOVFF  A8F,A94
04D64:  RCALL  4D2C
.................... 	spi_write(0x01);				/* select write to status register */
04D66:  MOVF   FC9,W
04D68:  MOVLW  01
04D6A:  MOVWF  FC9
04D6C:  RRCF   FC7,W
04D6E:  BNC   4D6C
.................... 	spi_write(valor);				/* data that will change the status of BPx */
04D70:  MOVF   FC9,W
04D72:  MOVFF  A93,FC9
04D76:  RRCF   FC7,W
04D78:  BNC   4D76
.................... 									/*or BPL (only bits 2,3,7 can be written) */
.................... 	FLASH_CE_High();				/* disable the device */
04D7A:  RCALL  46AC
04D7C:  GOTO   4DAC (RETURN)
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: WREN														*/
.................... /*																		*/
.................... /* This procedure enables the Write Enable Latch.						*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /************************************************************************/
.................... void WREN(int32 Dst)
.................... {
.................... 	FLASH_CE_Low(Dst);				/* enable device */
*
05664:  MOVFF  A82,A97
05668:  MOVFF  A81,A96
0566C:  MOVFF  A80,A95
05670:  MOVFF  A7F,A94
05674:  CALL   4D2C
.................... 	spi_write(0x06);		/* send WREN command */
05678:  MOVF   FC9,W
0567A:  MOVLW  06
0567C:  MOVWF  FC9
0567E:  RRCF   FC7,W
05680:  BNC   567E
.................... 	FLASH_CE_High();			/* disable device */
05682:  CALL   46AC
.................... 	WREN_Check(Dst);
05686:  MOVFF  A82,A86
0568A:  MOVFF  A81,A85
0568E:  MOVFF  A80,A84
05692:  MOVFF  A7F,A83
05696:  BRA    55F8
05698:  RETURN 0
.................... 
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: WRDI														*/
.................... /*																		*/
.................... /* This procedure disables the Write Enable Latch.						*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /************************************************************************/
.................... void WRDI(int32 Dst)
.................... {
.................... 	FLASH_CE_Low(Dst);				/* enable device */
*
057C4:  MOVFF  A7C,A97
057C8:  MOVFF  A7B,A96
057CC:  MOVFF  A7A,A95
057D0:  MOVFF  A79,A94
057D4:  CALL   4D2C
.................... 	spi_write(0x04);		/* send WRDI command */
057D8:  MOVF   FC9,W
057DA:  MOVLW  04
057DC:  MOVWF  FC9
057DE:  RRCF   FC7,W
057E0:  BNC   57DE
.................... 	FLASH_CE_High();			/* disable device */
057E2:  CALL   46AC
057E6:  RETURN 0
.................... }
.................... 
.................... 
.................... /************************************************************************/
.................... /* procedure: Read_ID													*/
.................... /*																		*/
.................... /* This procedure Reads the manufacturer's ID and device ID.  It will 	*/
.................... /* use 90h or ABh as the command to read the ID (90h in this sample).   */
.................... /* It is up to the user to give the last byte ID_addr to determine      */
.................... /* whether the device outputs manufacturer's ID first, or device ID 	*/
.................... /* first.  Please see the product datasheet for details.  Returns ID in */
.................... /* variable byte.														*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		ID_addr															*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		valor:	ID1														*/
.................... /*																		*/
.................... /************************************************************************/
.................... char Read_ID(int32 Dst, char ID_addr)
.................... {
.................... 	FLASH_CE_Low(Dst);			/* enable device */
*
04DAE:  MOVFF  A50,A97
04DB2:  MOVFF  A4F,A96
04DB6:  MOVFF  A4E,A95
04DBA:  MOVFF  A4D,A94
04DBE:  RCALL  4D2C
.................... 
.................... 	spi_write(0x90);			// send read ID command (90h or ABh) 
04DC0:  MOVF   FC9,W
04DC2:  MOVLW  90
04DC4:  MOVWF  FC9
04DC6:  RRCF   FC7,W
04DC8:  BNC   4DC6
....................    	spi_write(0x00);			/* send address */
04DCA:  MOVF   FC9,W
04DCC:  CLRF   FC9
04DCE:  RRCF   FC7,W
04DD0:  BNC   4DCE
.................... 	spi_write(0x00);			/* send address */
04DD2:  MOVF   FC9,W
04DD4:  CLRF   FC9
04DD6:  RRCF   FC7,W
04DD8:  BNC   4DD6
.................... 	spi_write(ID_addr);			/* send address - either 00H or 01H */
04DDA:  MOVF   FC9,W
04DDC:  MOVFF  A51,FC9
04DE0:  RRCF   FC7,W
04DE2:  BNC   4DE0
.................... 
.................... //	setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
.................... //	setup_spi(SPI_MASTER | SPI_SCK_IDLE_HIGH | SPI_XMIT_L_TO_H | SPI_SAMPLE_AT_MIDDLE | SPI_CLK_DIV_4);
.................... 
.................... 	ID_register_flash = spi_read(0);		/* receive byte */
04DE4:  MOVF   FC9,W
04DE6:  CLRF   FC9
04DE8:  RRCF   FC7,W
04DEA:  BNC   4DE8
04DEC:  MOVFF  FC9,88C
.................... 	FLASH_CE_High();						/* disable device */
04DF0:  RCALL  46AC
.................... 	return(ID_register_flash);
04DF2:  MOVLB  8
04DF4:  MOVFF  88C,01
04DF8:  MOVLB  0
04DFA:  RETURN 0
.................... }
.................... 
.................... 
.................... /************************************************************************/
.................... /* procedure:	read_byte_flash											*/
.................... /*																		*/		
.................... /* This procedure reads one address of the device.  It will return the 	*/
.................... /* byte read in variable valor.											*/
.................... /*																		*/
.................... /*																		*/
.................... /*																		*/
.................... /* Input:			/													*/
.................... /*		Dst:	Destination Address 000000H - 07FFFFH					*/
.................... /*      																*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		valor															*/
.................... /*																		*/
.................... /************************************************************************/
.................... char read_byte_flash(int32 Dst) 
.................... {
.................... 	FLASH_CE_Low(Dst);			/* enable device */
*
0550A:  MOVFF  A7C,A97
0550E:  MOVFF  A7B,A96
05512:  MOVFF  A7A,A95
05516:  MOVFF  A79,A94
0551A:  RCALL  4D2C
.................... 	spi_write(0x03); 			/* read command */
0551C:  MOVF   FC9,W
0551E:  MOVLW  03
05520:  MOVWF  FC9
05522:  RRCF   FC7,W
05524:  BNC   5522
.................... 	spi_write(make8(Dst, 2));	/* send 3 address bytes */
05526:  MOVFF  A7B,A7D
0552A:  MOVF   FC9,W
0552C:  MOVFF  A7B,FC9
05530:  RRCF   FC7,W
05532:  BNC   5530
.................... 	spi_write(make8(Dst, 1));
05534:  MOVFF  A7A,A7D
05538:  MOVF   FC9,W
0553A:  MOVFF  A7A,FC9
0553E:  RRCF   FC7,W
05540:  BNC   553E
.................... 	spi_write(make8(Dst, 0));
05542:  MOVFF  A79,A7D
05546:  MOVF   FC9,W
05548:  MOVFF  A79,FC9
0554C:  RRCF   FC7,W
0554E:  BNC   554C
.................... 
.................... //	setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
.................... //	setup_spi(SPI_MASTER | SPI_SCK_IDLE_HIGH | SPI_XMIT_L_TO_H | SPI_SAMPLE_AT_MIDDLE | SPI_CLK_DIV_4);
.................... 
.................... 	byte_flash = spi_read(0);
05550:  MOVF   FC9,W
05552:  CLRF   FC9
05554:  RRCF   FC7,W
05556:  BNC   5554
05558:  MOVFF  FC9,88B
.................... 	FLASH_CE_High();							/* disable device */
0555C:  CALL   46AC
.................... 	return(byte_flash);								/* return one byte read */
05560:  MOVLB  8
05562:  MOVFF  88B,01
05566:  MOVLB  0
05568:  RETURN 0
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure:	Read_Cont												*/
.................... /*																		*/		
.................... /* This procedure reads multiple addresses of the device and stores		*/
.................... /* data into 128 byte buffer. Maximum byte that can be read is 128 bytes*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		Dst:		Destination Address 000000H - 07FFFFH				*/
.................... /*      	no_bytes	Number of bytes to read	(max = 128)				*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /*																		*/
.................... /************************************************************************/
.................... //void Read_Cont(int32 Dst, char no_bytes)
.................... //{
.................... //	char i;
.................... //	FLASH_CE_Low();								/* enable device */
.................... //	send_byte_flash(0x03); 						/* read command */
.................... //	send_byte_flash(((Dst & 0xFFFFFF) >> 16)); 	/* send 3 address bytes */
.................... //	send_byte_flash(((Dst & 0xFFFF) >> 8));
.................... //	send_byte_flash(Dst & 0xFF);
.................... //	for (i = 0; i < no_bytes; i++)				/* read until no_bytes is reached */
.................... //		{
.................... //		buf_dados[i] = get_byte_flash();		/* receive byte and store at address 80H - FFH */
.................... //		}
.................... //	FLASH_CE_High();							/* disable device */
.................... //}
.................... 
.................... 
.................... 
.................... 
.................... /************************************************************************/
.................... /* procedure:	write_word_flash										*/
.................... /*																		*/
.................... /* This procedure programs one address of the device.					*/
.................... /* Assumption:  Address being programmed is already erased and is NOT	*/
.................... /*		block protected.												*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		Dst:		Destination Address 000000H - 07FFFFH				*/
.................... /*		valor:		word to be programmed								*/
.................... /*      																*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /*																		*/
.................... /************************************************************************/
.................... int32 write_word_flash(int32 Dst, word valor)
.................... {
.................... 	write_byte_flash(Dst++, (char)((valor >> 8)));
.................... 	write_byte_flash(Dst++, (char)(valor));
.................... 	return(Dst);
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure:	write_byte_flash										*/
.................... /*																		*/
.................... /* This procedure programs one address of the device.					*/
.................... /* Assumption:  Address being programmed is already erased and is NOT	*/
.................... /*		block protected.												*/
.................... /*																		*/
.................... /*																		*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		Dst:		Destination Address 000000H - 07FFFFH				*/
.................... /*		valor:		byte to be programmed								*/
.................... /*      																*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /*																		*/
.................... /************************************************************************/
.................... void write_byte_flash(int32 Dst, char valor)
.................... {
.................... 	WREN(Dst);
*
05748:  MOVFF  A7D,A82
0574C:  MOVFF  A7C,A81
05750:  MOVFF  A7B,A80
05754:  MOVFF  A7A,A7F
05758:  RCALL  5664
.................... 	FLASH_CE_Low(Dst);								/* enable device */
0575A:  MOVFF  A7D,A97
0575E:  MOVFF  A7C,A96
05762:  MOVFF  A7B,A95
05766:  MOVFF  A7A,A94
0576A:  CALL   4D2C
.................... 	spi_write(0x02); 						/* send Byte Program command */
0576E:  MOVF   FC9,W
05770:  MOVLW  02
05772:  MOVWF  FC9
05774:  RRCF   FC7,W
05776:  BNC   5774
.................... 
.................... 	spi_write(make8(Dst, 2));	/* send 3 address bytes */
05778:  MOVFF  A7C,A7F
0577C:  MOVF   FC9,W
0577E:  MOVFF  A7C,FC9
05782:  RRCF   FC7,W
05784:  BNC   5782
.................... 	spi_write(make8(Dst, 1));
05786:  MOVFF  A7B,A7F
0578A:  MOVF   FC9,W
0578C:  MOVFF  A7B,FC9
05790:  RRCF   FC7,W
05792:  BNC   5790
.................... 	spi_write(make8(Dst, 0));
05794:  MOVFF  A7A,A7F
05798:  MOVF   FC9,W
0579A:  MOVFF  A7A,FC9
0579E:  RRCF   FC7,W
057A0:  BNC   579E
.................... 
.................... //	spi_write(((Dst & 0xFFFFFF) >> 16));	/* send 3 address bytes */
.................... //	spi_write(((Dst & 0xFFFF) >> 8));
.................... //	spi_write(Dst & 0xFF);
.................... 
.................... 	spi_write(valor);						/* send byte to be programmed */
057A2:  MOVF   FC9,W
057A4:  MOVFF  A7E,FC9
057A8:  RRCF   FC7,W
057AA:  BNC   57A8
.................... 	FLASH_CE_High();							/* disable device */
057AC:  CALL   46AC
.................... 	Wait_Busy(Dst);
057B0:  MOVFF  A7D,A82
057B4:  MOVFF  A7C,A81
057B8:  MOVFF  A7B,A80
057BC:  MOVFF  A7A,A7F
057C0:  RCALL  569A
057C2:  RETURN 0
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure:	Auto_Add_IncA											*/
.................... /*																		*/
.................... /* This procedure programs consecutive addresses of the device.This		*/
.................... /* is used to to start the AAI process.  It should be followed by 		*/
.................... /* Auto_Add_IncB.														*/
.................... /* Assumption:  Address being programmed is already erased and is NOT	*/
.................... /*		block protected.												*/
.................... /*																		*/
.................... /*																		*/
.................... /* Note: Only RDSR command can be executed onFLASH_CE in AAI mode.	 	*/
.................... /* 	 Use WRDI to exit AAI mode unless AAI is programming the last		*/
.................... /*	 address or last address of unprotected block, which 				*/
.................... /*	 automatically exits AAI mode.										*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		Dst:		Destination Address 000000H - 07FFFFH				*/
.................... /*		valor:		byte to be programmed								*/
.................... /*      																*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /*																		*/
.................... /************************************************************************/
.................... void Auto_Add_IncA(int32 Dst, char valor)
.................... {
.................... 	WREN(Dst);
.................... 	FLASH_CE_Low(Dst);								/* enable device */
.................... 	spi_write(0xAD);						/* send AAI command */
.................... 
.................... 	spi_write(make8(Dst, 2));	/* send 3 address bytes */
.................... 	spi_write(make8(Dst, 1));
.................... 	spi_write(make8(Dst, 0));
.................... 
.................... //	spi_write(((Dst & 0xFFFFFF) >> 16)); 	/* send 3 address bytes */
.................... //	spi_write(((Dst & 0xFFFF) >> 8));
.................... //	spi_write(Dst & 0xFF);
.................... 
.................... 	spi_write(valor);						/* send byte to be programmed */
.................... 	FLASH_CE_High();							/* disable device */
.................... 	Wait_Busy(Dst);
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure:	Auto_Add_IncB											*/
.................... /*																		*/
.................... /* This procedure programs consecutive addresses of the device.This		*/
.................... /* is used after Auto_Address_IncA.										*/
.................... /* Assumption:  Address being programmed is already erased and is NOT	*/
.................... /*		block protected.												*/
.................... /*																		*/
.................... /* Note: Only RDSR command can be executed onFLASH_CE in AAI mode.	 	*/
.................... /* 	 Use WRDI to exit AAI mode unless AAI is programming the last		*/
.................... /*	 address or last address of unprotected block, which 				*/
.................... /*	 automatically exits AAI mode.										*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*																		*/
.................... /*		valor:		byte to be programmed								*/
.................... /*      																*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /*																		*/
.................... /************************************************************************/
.................... void Auto_Add_IncB(int32 Dst, char valor)
.................... {
.................... 	FLASH_CE_Low(Dst);					/* enable device */
.................... 	spi_write(0xAD);			/* send AAI command */
.................... 	spi_write(valor);			/* send byte to be programmed */
.................... 	FLASH_CE_High();				/* disable device */
.................... 	Wait_Busy(Dst);
.................... }
.................... 
.................... 
.................... #if (teste_cht_vag == true)
.................... 	void printa_status_erase(char qerase, int32 Dst)
.................... 		{
.................... 		#if (com_485 == true)
.................... 			output_high(direcao);
.................... 			delay_ms(1);
.................... 		#endif	
.................... 		printf("Apagando:%u: %u, %u, %lu, ", endereco, qerase, rotina, Dst);
.................... 		printf("\r\n");
.................... 		#if (com_485 == true)
.................... 			delay_ms(2);
.................... 			output_low(direcao);
.................... 		#endif
.................... 		}
.................... #endif	
.................... 
.................... 
.................... /************************************************************************/
.................... /* procedure: flash_erase												*/
.................... /*																		*/
.................... /* This procedure erases the entire Chip.								*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		None															*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /************************************************************************/
.................... void flash_erase(int32 Dst)
.................... {
.................... 	#if (teste_cht_vag == true)
.................... 		printa_status_erase(0, Dst);
.................... 	#endif	
.................... 	
.................... 	WREN(Dst);
*
0AA58:  MOVFF  A4D,A82
0AA5C:  MOVFF  A4C,A81
0AA60:  MOVFF  A4B,A80
0AA64:  MOVFF  A4A,A7F
0AA68:  CALL   5664
.................... 	FLASH_CE_Low(Dst);					/* enable device */
0AA6C:  MOVFF  A4D,A97
0AA70:  MOVFF  A4C,A96
0AA74:  MOVFF  A4B,A95
0AA78:  MOVFF  A4A,A94
0AA7C:  CALL   4D2C
.................... 	spi_write(0x60);					/* send Chip Erase command */
0AA80:  MOVF   FC9,W
0AA82:  MOVLW  60
0AA84:  MOVWF  FC9
0AA86:  RRCF   FC7,W
0AA88:  BNC   AA86
.................... 	FLASH_CE_High();					/* disable device */
0AA8A:  CALL   46AC
.................... 	Wait_Busy(Dst);
0AA8E:  MOVFF  A4D,A82
0AA92:  MOVFF  A4C,A81
0AA96:  MOVFF  A4B,A80
0AA9A:  MOVFF  A4A,A7F
0AA9E:  CALL   569A
0AAA2:  GOTO   AAC4 (RETURN)
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: sector_flash_erase										*/
.................... /*																		*/
.................... /* This procedure Sector Erases the Chip.								*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		Dst:		Destination Address 000000H - 07FFFFH				*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /************************************************************************/
.................... void sector_flash_erase(int32 Dst)
.................... {
.................... 	#if (teste_cht_vag == true)
.................... 		printa_status_erase(1, Dst);
.................... 	#endif	
.................... 	
.................... 	WREN(Dst);
*
056D6:  MOVFF  A7C,A82
056DA:  MOVFF  A7B,A81
056DE:  MOVFF  A7A,A80
056E2:  MOVFF  A79,A7F
056E6:  RCALL  5664
.................... 	FLASH_CE_Low(Dst);						/* enable device */
056E8:  MOVFF  A7C,A97
056EC:  MOVFF  A7B,A96
056F0:  MOVFF  A7A,A95
056F4:  MOVFF  A79,A94
056F8:  CALL   4D2C
.................... 	spi_write(0x20);						/* send Sector Erase command */
056FC:  MOVF   FC9,W
056FE:  MOVLW  20
05700:  MOVWF  FC9
05702:  RRCF   FC7,W
05704:  BNC   5702
.................... 
.................... 	spi_write(make8(Dst, 2));				/* send 3 address bytes */
05706:  MOVFF  A7B,A7D
0570A:  MOVF   FC9,W
0570C:  MOVFF  A7B,FC9
05710:  RRCF   FC7,W
05712:  BNC   5710
.................... 	spi_write(make8(Dst, 1));
05714:  MOVFF  A7A,A7D
05718:  MOVF   FC9,W
0571A:  MOVFF  A7A,FC9
0571E:  RRCF   FC7,W
05720:  BNC   571E
.................... 	spi_write(make8(Dst, 0));
05722:  MOVFF  A79,A7D
05726:  MOVF   FC9,W
05728:  MOVFF  A79,FC9
0572C:  RRCF   FC7,W
0572E:  BNC   572C
.................... 
.................... //	spi_write(((Dst & 0xFFFFFF) >> 16)); 	/* send 3 address bytes */
.................... //	spi_write(((Dst & 0xFFFF) >> 8));
.................... //	spi_write(Dst & 0xFF);
.................... 
.................... 	FLASH_CE_High();						/* disable device */
05730:  CALL   46AC
.................... 	Wait_Busy(Dst);
05734:  MOVFF  A7C,A82
05738:  MOVFF  A7B,A81
0573C:  MOVFF  A7A,A80
05740:  MOVFF  A79,A7F
05744:  RCALL  569A
05746:  RETURN 0
.................... }
.................... 
.................... /************************************************************************/
.................... /* procedure: Block_Erase												*/
.................... /*																		*/
.................... /* This procedure Block Erases the Chip.								*/
.................... /*																		*/
.................... /* Input:																*/
.................... /*		Dst:		Destination Address 000000H - 07FFFFH				*/
.................... /*																		*/
.................... /* Returns:																*/
.................... /*		Nothing															*/
.................... /************************************************************************/
.................... void Block_Erase(int32 Dst)
.................... {
.................... 	#if (teste_cht_vag == true)
.................... 		printa_status_erase(3, Dst);
.................... 	#endif	
.................... 
.................... 	WREN(Dst);
.................... 	FLASH_CE_Low(Dst);						/* enable device */
.................... 	spi_write(0x52);						/* send Block Erase command */
.................... 
.................... 	spi_write(make8(Dst, 2));				/* send 3 address bytes */
.................... 	spi_write(make8(Dst, 1));
.................... 	spi_write(make8(Dst, 0));
.................... 
.................... //	spi_write(((Dst & 0xFFFFFF) >> 16)); 	/* send 3 address bytes */
.................... //	spi_write(((Dst & 0xFFFF) >> 8));
.................... //	spi_write(Dst & 0xFF);
.................... 
.................... 	FLASH_CE_High();						/* disable device */
.................... 	Wait_Busy(Dst);
.................... }
.................... 
.................... //***********************************************************************
.................... // procedure: Wait_Busy													*
.................... // This procedure waits until device is no longer busy (can be used by	*
.................... // Byte-Program, Sector-Erase, Block-Erase, Chip-Erase).				*
.................... // Input:																*
.................... //		None															*
.................... // Returns:																*
.................... //		Nothing															*
.................... //***********************************************************************
.................... void Wait_Busy(int32 Dst){		//waste time until not busy
.................... 	while ((Read_Status_Register(Dst) & 0x01) == 0x01){
*
0569A:  MOVFF  A82,A8A
0569E:  MOVFF  A81,A89
056A2:  MOVFF  A80,A88
056A6:  MOVFF  A7F,A87
056AA:  RCALL  556A
056AC:  MOVF   01,W
056AE:  ANDLW  01
056B0:  SUBLW  01
056B2:  BNZ   56D4
.................... 		delay_us(10);
056B4:  CLRWDT
056B6:  MOVLW  20
056B8:  MOVWF  00
056BA:  DECFSZ 00,F
056BC:  BRA    56BA
056BE:  BRA    56C0
.................... 		Read_Status_Register(Dst);
056C0:  MOVFF  A82,A8A
056C4:  MOVFF  A81,A89
056C8:  MOVFF  A80,A88
056CC:  MOVFF  A7F,A87
056D0:  RCALL  556A
056D2:  BRA    569A
.................... 	}
056D4:  RETURN 0
.................... }
.................... 
.................... //***********************************************************************
.................... // procedure: Wait_Busy_AAI												*
.................... // This procedure waits until device is no longer busy for AAI mode.	*
.................... // Input:																*
.................... //		None															*
.................... // Returns:																*
.................... //		Nothing															*
.................... //***********************************************************************
.................... void Wait_Busy_AAI(int32 Dst){
.................... #if feira
.................... 	return;
.................... #endif	
.................... 	while ((Read_Status_Register(Dst) & 0x43) == 0x43){	// waste time until not busy
.................... 		Read_Status_Register(Dst);
.................... 	}
.................... }
.................... 
.................... //***********************************************************************
.................... // procedure: WREN_Check												*
.................... // This procedure checks to see if WEL bit set before program/erase.	*
.................... // Input:																*
.................... //		None															*
.................... // Returns:																*
.................... //		Nothing															*
.................... //***********************************************************************
.................... void WREN_Check(int32 Dst){
.................... 	status_register_flash = Read_Status_Register(Dst);
*
055F8:  MOVFF  A86,A8A
055FC:  MOVFF  A85,A89
05600:  MOVFF  A84,A88
05604:  MOVFF  A83,A87
05608:  RCALL  556A
0560A:  MOVFF  01,88D
.................... 	while(1){									// verify that WEL bit is set
.................... 		status_register_flash = Read_Status_Register(Dst);
0560E:  MOVFF  A86,A8A
05612:  MOVFF  A85,A89
05616:  MOVFF  A84,A88
0561A:  MOVFF  A83,A87
0561E:  RCALL  556A
05620:  MOVFF  01,88D
.................... 		if ((status_register_flash & 0x02) != 0x02){
05624:  MOVLB  8
05626:  MOVF   x8D,W
05628:  ANDLW  02
0562A:  SUBLW  02
0562C:  BZ    5656
.................... 			FLASH_CE_Low(Dst);					// enable device
0562E:  MOVFF  A86,A97
05632:  MOVFF  A85,A96
05636:  MOVFF  A84,A95
0563A:  MOVFF  A83,A94
0563E:  MOVLB  0
05640:  CALL   4D2C
.................... 			spi_write(0x06);					// send WREN command
05644:  MOVF   FC9,W
05646:  MOVLW  06
05648:  MOVWF  FC9
0564A:  RRCF   FC7,W
0564C:  BNC   564A
.................... 			FLASH_CE_High();					// disable device
0564E:  CALL   46AC
.................... 		}
05652:  BRA    565A
05654:  MOVLB  8
.................... 		else{
.................... 			break;
05656:  BRA    565E
05658:  MOVLB  0
.................... 		}
0565A:  BRA    560E
0565C:  MOVLB  8
.................... 	}
0565E:  MOVLB  0
05660:  GOTO   5698 (RETURN)
.................... }
.................... 
.................... //***********************************************************************
.................... // procedure: WREN_AAI_Check											*
.................... // This procedure checks for AAI and WEL bit onFLASH_CE in AAI mode.	*
.................... // Input:																*
.................... //		None															*
.................... // Returns:																*
.................... //		Nothing															*
.................... //***********************************************************************
.................... char AAI_check_flash;
.................... void WREN_AAI_Check(int32 Dst){
.................... 	AAI_check_flash = Read_Status_Register(Dst);	// read the status register
.................... 	if (AAI_check_flash != 0x42){					// verify that AAI and WEL bit is set
.................... 		while(1){									// option: insert a display to view error on LED? */
.................... 			break;
.................... 		}
.................... 	}
.................... }
.................... 
.................... //***********************************************************************
.................... // procedure: DESPROTEGE_FLASH()										*
.................... // Esta funcao desprotege todos os bancos da flash.						*
.................... // Input:																*
.................... //		None															*
.................... // Returns:																*
.................... //		Nothing															*
.................... //***********************************************************************
.................... void desprotege_flash(int32 Dst){
.................... 	EWSR(Dst);			// habilita escrita no status register
*
04D80:  MOVFF  A8E,A92
04D84:  MOVFF  A8D,A91
04D88:  MOVFF  A8C,A90
04D8C:  MOVFF  A8B,A8F
04D90:  BRA    4D32
.................... 	WRSR(Dst, 2);		// escreve zero no status register, desprotegendo a flash	
04D92:  MOVFF  A8E,A92
04D96:  MOVFF  A8D,A91
04D9A:  MOVFF  A8C,A90
04D9E:  MOVFF  A8B,A8F
04DA2:  MOVLW  02
04DA4:  MOVLB  A
04DA6:  MOVWF  x93
04DA8:  MOVLB  0
04DAA:  BRA    4D54
04DAC:  RETURN 0
.................... }
.................... 
.................... void exibe_erro_memoria(char mem, char status){
.................... exibe_erro_memoria_de_novo:			
.................... 	mensagem(1,129);
*
0523C:  MOVLW  01
0523E:  MOVLB  A
05240:  MOVWF  x4D
05242:  MOVLW  81
05244:  MOVWF  x4E
05246:  MOVLB  0
05248:  CALL   47E8
.................... 	displayp(17,status,1,0,0);
0524C:  MOVLW  11
0524E:  MOVLB  A
05250:  MOVWF  x4E
05252:  CLRF   x50
05254:  MOVFF  A4C,A4F
05258:  MOVLW  01
0525A:  MOVWF  x51
0525C:  CLRF   x52
0525E:  CLRF   x53
05260:  MOVLB  0
05262:  RCALL  5038
.................... 	while(true){
.................... 		status = read_ID(BANCO_0, 1);
05264:  MOVLB  A
05266:  CLRF   x50
05268:  CLRF   x4F
0526A:  CLRF   x4E
0526C:  CLRF   x4D
0526E:  MOVLW  01
05270:  MOVWF  x51
05272:  MOVLB  0
05274:  RCALL  4DAE
05276:  MOVFF  01,A4C
.................... 		if (status == 0x8E){
0527A:  MOVLB  A
0527C:  MOVF   x4C,W
0527E:  SUBLW  8E
05280:  BNZ   5286
.................... 			break;									// verifica se memoria está na placa
05282:  BRA    52A2
.................... 		}
05284:  BRA    52A0
.................... 		else{
.................... 			delay_ms(1000);
05286:  MOVLW  04
05288:  MOVWF  x4D
0528A:  MOVLW  FA
0528C:  MOVWF  x67
0528E:  MOVLB  0
05290:  CALL   1834
05294:  MOVLB  A
05296:  DECFSZ x4D,F
05298:  BRA    528A
.................... 			goto exibe_erro_memoria_de_novo;
0529A:  MOVLB  0
0529C:  BRA    523C
0529E:  MOVLB  A
.................... 		}
052A0:  BRA    5266
.................... 	}
052A2:  MOVLB  0
052A4:  GOTO   5302 (RETURN)
.................... }
.................... 
.................... void le_hardware(void){
.................... 	#if feira
.................... 		return;
.................... 	#endif
.................... 	//1)identifica que e quantas memorias existem
.................... 	//informa no display a configuracao do hardware
.................... 		
.................... 	desprotege_flash(BANCO_0);
052A8:  MOVLB  A
052AA:  CLRF   x8E
052AC:  CLRF   x8D
052AE:  CLRF   x8C
052B0:  CLRF   x8B
052B2:  MOVLB  0
052B4:  RCALL  4D80
.................... 	if (read_ID(BANCO_0, 1) == 0x8E){
052B6:  MOVLB  A
052B8:  CLRF   x50
052BA:  CLRF   x4F
052BC:  CLRF   x4E
052BE:  CLRF   x4D
052C0:  MOVLW  01
052C2:  MOVWF  x51
052C4:  MOVLB  0
052C6:  RCALL  4DAE
052C8:  MOVF   01,W
052CA:  SUBLW  8E
052CC:  BNZ   52DE
.................... 		desprotege_flash(BANCO_0);					// verifica se memoria 1 está na placa
052CE:  MOVLB  A
052D0:  CLRF   x8E
052D2:  CLRF   x8D
052D4:  CLRF   x8C
052D6:  CLRF   x8B
052D8:  MOVLB  0
052DA:  RCALL  4D80
.................... 	}
052DC:  BRA    5302
.................... 	else{
.................... 		exibe_erro_memoria(1, read_ID(BANCO_0, 1));
052DE:  MOVLB  A
052E0:  CLRF   x50
052E2:  CLRF   x4F
052E4:  CLRF   x4E
052E6:  CLRF   x4D
052E8:  MOVLW  01
052EA:  MOVWF  x51
052EC:  MOVLB  0
052EE:  RCALL  4DAE
052F0:  MOVFF  01,A4A
052F4:  MOVLW  01
052F6:  MOVLB  A
052F8:  MOVWF  x4B
052FA:  MOVFF  01,A4C
052FE:  MOVLB  0
05300:  BRA    523C
.................... 	}
05302:  GOTO   1BE4C (RETURN)
.................... }
.................... 
.................... #endif	
.................... #include "lcd_16x4.c"
.................... /*;**********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS									*
.................... ; Modulo: ST_display													*
.................... ; Funcao: MODULO PRINCIPAL DE CONTROLE									*
.................... ; Responsavel: VAGNER SANTOS											*
.................... ; Modificado: VAGNER SANTOS												*
.................... ; Inicio: 30/08/2000													*
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS									*
.................... ;************************************************************************/
....................   
.................... #define TAM_DSP		64         	/* Define numero de carac. do display */
.................... #define LINHA_1		0
.................... #define LINHA_2     16          
.................... #define LINHA_3     32
.................... #define LINHA_4     48
.................... #define MEIO_DSP	TAM_DSP/2   /* Define o meio do display					*/
.................... #define FIM_DSP		TAM_DSP     /* Ultimo caracter do display				*/
.................... #define LIMP_DSP	1           /* Comando que limpa o display				*/
.................... #define POSI_DSP	0x80        /* Coloca cursor na posicao inicial			*/
.................... #define COND_UTI	0x38        /* Condicoes de utilizacao do display		*/
.................... 								/*  2 linhas, matriz 8x5, interface 8 bit	*/
.................... #define MODOP_DSP	0x06        /* Modo de operacao do display:				*/
.................... 								/* Desloc. a direita com avanco autom.		*/
.................... #define ATIVA_DSP	0x0C        /* Ativacao do display:						*/
.................... 							 	/* Mensagem aparente e cursor nao			*/
.................... #define CUR_ESQ		0x10        /* Move o cursor para a esquerda			*/
.................... #define CUR_DIR		0x14        /* Move o cursor para a direita				*/
.................... #define CUR_ATV		0x0E        /* Ativa o cursor							*/
.................... #define CUR_DATV	0x0C        /* Desativa o cursor						*/
.................... #define SET_CGRAM_ADDRESS	0x40
.................... #define TROC_LIN	0xC0        /*  ; Passa o cursor para a segunda linha	*/
.................... 
.................... #define TIPO_LCD	2
.................... const char LCD_INIC[4] ={COND_UTI, COND_UTI, MODOP_DSP, ATIVA_DSP};
.................... char lcd_linha;
.................... 
.................... char ultima_linha;
.................... char ultima_mensagem;
.................... 
.................... #if (controlador == true)
.................... 	const char DB_DIR[8]={	
.................... 						// Caracter "0":
.................... 						//DB_DIR:
.................... 							0b00000001,
.................... 							0b00000011,
.................... 							0b00000011,
.................... 							0b00000011,
.................... 							0b00000011,
.................... 							0b00000011,
.................... 							0b00000011,
.................... 							0b00000001};
.................... 							
.................... 	const char DB_ESQ[8]={	
.................... 						//; Caracter "1":
.................... 						//DB_ESQ:
.................... 							0b00010000,
.................... 							0b00011000,
.................... 							0b00011000,
.................... 							0b00011000,
.................... 							0b00011000,
.................... 							0b00011000,
.................... 							0b00011000,
.................... 							0b00010000};
.................... 								
.................... 	const char DB_UP2[8]={	
.................... 						//; Caracter "2":
.................... 						//DB_UP2:
.................... 							0b00011111,
.................... 							0b00011111,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000};
.................... 							
.................... 	const char DB_DOWN2[8]={	
.................... 						//; Caracter "3":
.................... 						//DB_DOWN2:
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00011111,
.................... 							0b00011111};
.................... 						
.................... 	const char DB_UP2_DOWN1[8]={	
.................... 						//; Caracter "4":
.................... 						//DB_UP2_DOWN1:
.................... 							0b00011111,
.................... 							0b00011111,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00011111};
.................... 						
.................... 	const char DB_UP1_DOWN2[8]={	
.................... 						//; Caracter "5":
.................... 						//DB_UP1_DOWN2:
.................... 							0b00011111,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00011111,
.................... 							0b00011111};
.................... 						
.................... 	const char DB_UP1[8]={	
.................... 						//; Caracter "6":
.................... 						//DB_UP1:
.................... 							0b00011111,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000};
.................... 						
.................... 	const char DB_DOWN1[8]={	
.................... 						//; Caracter "7":
.................... 						//DB_DOWN1:
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00000000,
.................... 							0b00011111};
.................... 
.................... //Definiÿçao dos numeros para o display:
.................... 	const char D_ZERO_U[]={0, 2, 2, 1};
.................... 	const char D_ZERO_D[]={0, 3, 3, 1};
.................... 	const char D_UM_U[]={32, 0, 32, 32};
.................... 	const char D_UM_D[]={32, 0, 32, 32};
.................... 	const char D_DOIS_U[]={32, 4, 4, 1};
.................... 	const char D_DOIS_D[]={0, 5, 5, 32};
.................... 	const char D_TRES_U[]={32, 4, 4, 1};
.................... 	const char D_TRES_D[]={32, 5, 5, 1};
.................... 	const char D_QUATRO_U[]={0, 7, 7, 1};
.................... 	const char D_QUATRO_D[]={32, 6, 6, 1};
.................... 	const char D_CINCO_U[]={0, 4, 4, 32};
.................... 	const char D_CINCO_D[]={32, 5, 5, 1};
.................... 	const char D_SEIS_U[]={0, 4, 4, 32};
.................... 	const char D_SEIS_D[]={0, 5, 5, 1};
.................... 	const char D_SETE_U[]={32, 2, 2, 1};
.................... 	const char D_SETE_D[]={32, 32, 32, 1};
.................... 	const char D_OITO_U[]={0, 4, 4, 1};
.................... 	const char D_OITO_D[]={0, 5, 5, 1};
.................... 	const char D_NOVE_U[]={0, 4, 4, 1};
.................... 	const char D_NOVE_D[]={32, 5, 5, 1};
.................... 		
.................... 		
.................... 	const char D_C_U[]={"FP:"};
.................... 	const char D_C_D[]={"CAP"};
.................... 	const char D_I_U[]={"FP:"};
.................... 	const char D_I_D[]={"IND"};
.................... 	const char D_B_U[]={"FP:"};
.................... 	const char D_B_D[]={32, 32, 32};
.................... 
.................... 	//;D_C_U:		DCB		0, 4, 32
.................... 	//;D_C_D:		DCB		32, 6, 32
.................... 	//;D_I_U:		DCB		32, 32, 32
.................... 	//;D_I_D:		DCB		0, 32, 32
.................... 	//;D_B_U:		DCB		32, 32, 32
.................... 	//;D_B_D:		DCB		32, 32, 32
.................... 
.................... #else
.................... 	#define nro_caracteres_cgram	3
.................... 	const char tabela_cgram[nro_caracteres_cgram * 8] ={	
.................... 	// up
.................... 									0b00000100,
.................... 									0b00001110,
.................... 									0b00011111,
.................... 									0b00000100,
.................... 									0b00000100,
.................... 									0b00000100,
.................... 									0b00000000,
.................... 									0b00000000,
.................... 	// down
.................... 									0b00000000,
.................... 									0b00000100,
.................... 									0b00000100,
.................... 									0b00000100,
.................... 									0b00011111,
.................... 									0b00001110,
.................... 									0b00000100,
.................... 									0b00000000
.................... 	// Enter
.................... 									0b00000001,
.................... 									0b00000001,
.................... 									0b00000101,
.................... 									0b00001101,
.................... 									0b00011111,
.................... 									0b00001100,
.................... 									0b00000100,
.................... 									0b00000000
.................... 	
.................... 								};
.................... #endif
.................... 
.................... 
.................... void display(char);
.................... 
.................... 
.................... void wr_lcd(char controle_display, char caracter)
.................... {
.................... 	if (controle_display == 1)
*
01864:  MOVLB  A
01866:  DECFSZ x65,W
01868:  BRA    188E
.................... 		{
.................... 		output_high(CA0);
0186A:  BCF    F96.3
0186C:  BSF    F8D.3
.................... 	
.................... 		output_high(CS_DISP);
0186E:  BCF    F96.1
01870:  BSF    F8D.1
.................... 		delay_cycles(1);
01872:  NOP   
.................... 		output_d(caracter);
01874:  MOVFF  A66,F8C
.................... 		delay_cycles(1);
01878:  NOP   
.................... 		output_low(CS_DISP);
0187A:  BCF    F96.1
0187C:  BCF    F8D.1
.................... 		output_low(CA0);
0187E:  BCF    F96.3
01880:  BCF    F8D.3
.................... 		#if (__DEVICE__ == 6722)
.................... 			delay_us(50);
01882:  CLRWDT
01884:  MOVLW  A6
01886:  MOVWF  00
01888:  DECFSZ 00,F
0188A:  BRA    1888
.................... 		#else
.................... 			delay_us(50);
.................... 		#endif
.................... 		}
0188C:  BRA    18B0
.................... 	else
.................... 		{
.................... 
.................... 		output_low(CA0);
0188E:  BCF    F96.3
01890:  BCF    F8D.3
.................... 
.................... 		output_high(CS_DISP);
01892:  BCF    F96.1
01894:  BSF    F8D.1
.................... 		delay_cycles(1);
01896:  NOP   
.................... 		output_d(caracter);
01898:  MOVFF  A66,F8C
.................... 		delay_cycles(1);
0189C:  NOP   
.................... 		output_low(CS_DISP);
0189E:  BCF    F96.1
018A0:  BCF    F8D.1
.................... 		output_high(CA0);
018A2:  BCF    F96.3
018A4:  BSF    F8D.3
.................... 
.................... 		#if (__DEVICE__ == 6722)
.................... 			delay_ms(2);
018A6:  MOVLW  02
018A8:  MOVWF  x67
018AA:  MOVLB  0
018AC:  RCALL  1834
018AE:  MOVLB  A
.................... 		#else
.................... 			delay_ms(2);
.................... 		#endif
.................... 		
.................... 		}
018B0:  MOVLB  0
018B2:  RETURN 0
.................... 		
.................... }
.................... 
.................... void wr_lcd_old(short controle_display, char caracter)
.................... {
.................... 	if (controle_display == 1)
.................... 		{
.................... 		output_high(CA0);
.................... 		}
.................... 	else
.................... 		{
.................... 		output_low(CA0);
.................... 		}
.................... 	disable_interrupts(GLOBAL);
.................... 	
.................... 	output_d(caracter);
.................... 	output_low(CS_DISP);
.................... 	delay_cycles(1);
.................... 	output_high(CS_DISP);
.................... 	
.................... 	enable_interrupts(GLOBAL);
.................... 
.................... 	output_high(CA0);
.................... 	if (controle_display == 1)
.................... 		{
.................... 		delay_ms(2);
.................... 		}
.................... 	else
.................... 		{
.................... 		delay_us(45);
.................... 		}
.................... }
.................... 
.................... 
.................... void ativa_cursor(void)
.................... {
.................... 	wr_lcd(0,CUR_ATV);	
*
0FFD0:  MOVLB  A
0FFD2:  CLRF   x65
0FFD4:  MOVLW  0E
0FFD6:  MOVWF  x66
0FFD8:  MOVLB  0
0FFDA:  CALL   1864
0FFDE:  RETURN 0
.................... }
.................... void desativa_cursor(void)
.................... {
.................... 	wr_lcd(0,CUR_DATV);	
*
0FFC0:  MOVLB  A
0FFC2:  CLRF   x65
0FFC4:  MOVLW  0C
0FFC6:  MOVWF  x66
0FFC8:  MOVLB  0
0FFCA:  CALL   1864
0FFCE:  RETURN 0
.................... }
.................... void volta_cursor(void)
.................... {
.................... 	wr_lcd(0,CUR_ESQ);	
.................... }
.................... void avanca_cursor(void)
.................... {
.................... 	wr_lcd(0,CUR_DIR);	
*
0475E:  MOVLB  A
04760:  CLRF   x65
04762:  MOVLW  14
04764:  MOVWF  x66
04766:  MOVLB  0
04768:  CALL   1864
0476C:  GOTO   486E (RETURN)
.................... }
.................... 
.................... void primeira_linha(void)		/* Coloca cursor na posicao inicial	*/
.................... {
.................... 	wr_lcd(0,POSI_DSP);	
*
0FA98:  MOVLB  A
0FA9A:  CLRF   x65
0FA9C:  MOVLW  80
0FA9E:  MOVWF  x66
0FAA0:  MOVLB  0
0FAA2:  CALL   1864
0FAA6:  GOTO   100AE (RETURN)
.................... }
.................... void troca_linha(void)
.................... {
.................... 	wr_lcd(0,TROC_LIN);	
*
0FE56:  MOVLB  A
0FE58:  CLRF   x65
0FE5A:  MOVLW  C0
0FE5C:  MOVWF  x66
0FE5E:  MOVLB  0
0FE60:  CALL   1864
0FE64:  RETURN 0
.................... }
.................... 
.................... void inic_dis(void)
.................... {   
.................... 	char i;
.................... 	for(i = 0; i <= 3; i++)
*
018B4:  MOVLB  A
018B6:  CLRF   x4A
018B8:  MOVF   x4A,W
018BA:  SUBLW  03
018BC:  BNC   18DA
.................... 		{
.................... 		wr_lcd(0,LCD_INIC[i]);	
018BE:  CLRF   03
018C0:  MOVF   x4A,W
018C2:  MOVLB  0
018C4:  CALL   01EC
018C8:  MOVLB  A
018CA:  MOVWF  x4B
018CC:  CLRF   x65
018CE:  MOVWF  x66
018D0:  MOVLB  0
018D2:  RCALL  1864
.................... 		}
.................... 	#if (controlador == true)
018D4:  MOVLB  A
018D6:  INCF   x4A,F
018D8:  BRA    18B8
.................... 		wr_lcd(0,SET_CGRAM_ADDRESS);	
018DA:  CLRF   x65
018DC:  MOVLW  40
018DE:  MOVWF  x66
018E0:  MOVLB  0
018E2:  RCALL  1864
.................... 		for(i = 0; i < 8 ; i++)
018E4:  MOVLB  A
018E6:  CLRF   x4A
018E8:  MOVF   x4A,W
018EA:  SUBLW  07
018EC:  BNC   190E
.................... 			{
.................... 			wr_lcd(1,DB_DIR[i]);	
018EE:  CLRF   03
018F0:  MOVF   x4A,W
018F2:  MOVLB  0
018F4:  CALL   0204
018F8:  MOVLB  A
018FA:  MOVWF  x4B
018FC:  MOVLW  01
018FE:  MOVWF  x65
01900:  MOVFF  A4B,A66
01904:  MOVLB  0
01906:  RCALL  1864
01908:  MOVLB  A
0190A:  INCF   x4A,F
0190C:  BRA    18E8
.................... 			}
.................... 		for(i = 0; i < 8; i++)
0190E:  CLRF   x4A
01910:  MOVF   x4A,W
01912:  SUBLW  07
01914:  BNC   1936
.................... 			{
.................... 			wr_lcd(1,DB_ESQ[i]);	
01916:  CLRF   03
01918:  MOVF   x4A,W
0191A:  MOVLB  0
0191C:  CALL   0220
01920:  MOVLB  A
01922:  MOVWF  x4B
01924:  MOVLW  01
01926:  MOVWF  x65
01928:  MOVFF  A4B,A66
0192C:  MOVLB  0
0192E:  RCALL  1864
01930:  MOVLB  A
01932:  INCF   x4A,F
01934:  BRA    1910
.................... 			}
.................... 		for(i = 0; i < 8; i++)
01936:  CLRF   x4A
01938:  MOVF   x4A,W
0193A:  SUBLW  07
0193C:  BNC   195E
.................... 			{
.................... 			wr_lcd(1,DB_UP2[i]);	
0193E:  CLRF   03
01940:  MOVF   x4A,W
01942:  MOVLB  0
01944:  CALL   023C
01948:  MOVLB  A
0194A:  MOVWF  x4B
0194C:  MOVLW  01
0194E:  MOVWF  x65
01950:  MOVFF  A4B,A66
01954:  MOVLB  0
01956:  RCALL  1864
01958:  MOVLB  A
0195A:  INCF   x4A,F
0195C:  BRA    1938
.................... 			}
.................... 		for(i = 0; i < 8; i++)
0195E:  CLRF   x4A
01960:  MOVF   x4A,W
01962:  SUBLW  07
01964:  BNC   1986
.................... 			{
.................... 			wr_lcd(1,DB_DOWN2[i]);	
01966:  CLRF   03
01968:  MOVF   x4A,W
0196A:  MOVLB  0
0196C:  CALL   0258
01970:  MOVLB  A
01972:  MOVWF  x4B
01974:  MOVLW  01
01976:  MOVWF  x65
01978:  MOVFF  A4B,A66
0197C:  MOVLB  0
0197E:  RCALL  1864
01980:  MOVLB  A
01982:  INCF   x4A,F
01984:  BRA    1960
.................... 			}
.................... 		for(i = 0; i < 8; i++)
01986:  CLRF   x4A
01988:  MOVF   x4A,W
0198A:  SUBLW  07
0198C:  BNC   19AE
.................... 			{
.................... 			wr_lcd(1,DB_UP2_DOWN1[i]);	
0198E:  CLRF   03
01990:  MOVF   x4A,W
01992:  MOVLB  0
01994:  CALL   0274
01998:  MOVLB  A
0199A:  MOVWF  x4B
0199C:  MOVLW  01
0199E:  MOVWF  x65
019A0:  MOVFF  A4B,A66
019A4:  MOVLB  0
019A6:  RCALL  1864
019A8:  MOVLB  A
019AA:  INCF   x4A,F
019AC:  BRA    1988
.................... 			}
.................... 		for(i = 0; i < 8; i++)
019AE:  CLRF   x4A
019B0:  MOVF   x4A,W
019B2:  SUBLW  07
019B4:  BNC   19D6
.................... 			{
.................... 			wr_lcd(1,DB_UP1_DOWN2[i]);	
019B6:  CLRF   03
019B8:  MOVF   x4A,W
019BA:  MOVLB  0
019BC:  CALL   0290
019C0:  MOVLB  A
019C2:  MOVWF  x4B
019C4:  MOVLW  01
019C6:  MOVWF  x65
019C8:  MOVFF  A4B,A66
019CC:  MOVLB  0
019CE:  RCALL  1864
019D0:  MOVLB  A
019D2:  INCF   x4A,F
019D4:  BRA    19B0
.................... 			}
.................... 		for(i = 0; i < 8; i++)
019D6:  CLRF   x4A
019D8:  MOVF   x4A,W
019DA:  SUBLW  07
019DC:  BNC   19FE
.................... 			{
.................... 			wr_lcd(1,DB_UP1[i]);	
019DE:  CLRF   03
019E0:  MOVF   x4A,W
019E2:  MOVLB  0
019E4:  CALL   02AC
019E8:  MOVLB  A
019EA:  MOVWF  x4B
019EC:  MOVLW  01
019EE:  MOVWF  x65
019F0:  MOVFF  A4B,A66
019F4:  MOVLB  0
019F6:  RCALL  1864
019F8:  MOVLB  A
019FA:  INCF   x4A,F
019FC:  BRA    19D8
.................... 			}
.................... 		for(i = 0; i < 8; i++)
019FE:  CLRF   x4A
01A00:  MOVF   x4A,W
01A02:  SUBLW  07
01A04:  BNC   1A26
.................... 			{
.................... 			wr_lcd(1,DB_DOWN1[i]);	
01A06:  CLRF   03
01A08:  MOVF   x4A,W
01A0A:  MOVLB  0
01A0C:  CALL   02C8
01A10:  MOVLB  A
01A12:  MOVWF  x4B
01A14:  MOVLW  01
01A16:  MOVWF  x65
01A18:  MOVFF  A4B,A66
01A1C:  MOVLB  0
01A1E:  RCALL  1864
01A20:  MOVLB  A
01A22:  INCF   x4A,F
01A24:  BRA    1A00
.................... 			}
.................... 	#else
01A26:  MOVLB  0
01A28:  RETURN 0
.................... 		wr_lcd(0,SET_CGRAM_ADDRESS);	
.................... 		for(i = 0; i < (nro_caracteres_cgram * 8); i++)
.................... 			{
.................... 			wr_lcd(1,tabela_cgram[i]);	
.................... 			}
.................... 	#endif
.................... }
.................... 
.................... void lcd_gotoxy(byte xl, byte yl)		// x1 - posicao, y1, linha
.................... {
.................... 	byte lcd_addr;
.................... 	switch(yl)
*
046C4:  MOVLW  01
046C6:  MOVLB  A
046C8:  SUBWF  x63,W
046CA:  ADDLW  FC
046CC:  BC    4700
046CE:  ADDLW  04
046D0:  MOVLB  0
046D2:  GOTO   4714
.................... 		{
.................... 		case 1:
.................... 			{
.................... 			lcd_addr = 0x80;
046D6:  MOVLW  80
046D8:  MOVLB  A
046DA:  MOVWF  x64
.................... 			break;
046DC:  BRA    4700
046DE:  MOVLB  0
.................... 			}	
.................... 		case 2:
.................... 			{
.................... 			lcd_addr = 0xC0;
046E0:  MOVLW  C0
046E2:  MOVLB  A
046E4:  MOVWF  x64
.................... 			break;
046E6:  BRA    4700
046E8:  MOVLB  0
.................... 			}
.................... 		case 3:
.................... 			{
.................... 			lcd_addr = 0x90;
046EA:  MOVLW  90
046EC:  MOVLB  A
046EE:  MOVWF  x64
.................... 			break;
046F0:  BRA    4700
046F2:  MOVLB  0
.................... 			}
.................... 		case 4:
.................... 			{
.................... 			lcd_addr = 0xD0;
046F4:  MOVLW  D0
046F6:  MOVLB  A
046F8:  MOVWF  x64
.................... 			break;
046FA:  BRA    4700
046FC:  MOVLB  0
046FE:  MOVLB  A
.................... 			}
.................... 		}
.................... 	lcd_addr += xl-1;
04700:  MOVLW  01
04702:  SUBWF  x62,W
04704:  ADDWF  x64,F
.................... 	wr_lcd(0, lcd_addr);
04706:  CLRF   x65
04708:  MOVFF  A64,A66
0470C:  MOVLB  0
0470E:  CALL   1864
04712:  RETURN 0
.................... }
.................... 
.................... void limpa_display(void)
.................... {
.................... 	wr_lcd(0,LIMP_DSP);
*
01A2A:  MOVLB  A
01A2C:  CLRF   x65
01A2E:  MOVLW  01
01A30:  MOVWF  x66
01A32:  MOVLB  0
01A34:  RCALL  1864
.................... 	delay_ms(2);	
01A36:  MOVLW  02
01A38:  MOVLB  A
01A3A:  MOVWF  x67
01A3C:  MOVLB  0
01A3E:  RCALL  1834
01A40:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... void mensagem_rola(char linha, char linha_mens)
.................... {
.................... }
.................... 
.................... #if (st9600r == true)
.................... 	#include "st9600r_mens.c"
.................... #endif
.................... #if (st_prog == true)
.................... 	#include "st_prog_mens.c"
.................... #endif
.................... #if (ST8200C == true)
.................... 	#include "st8200_mens.c"
.................... #endif
.................... #if (st92 == true)
.................... 	#include "st9200_mens.c"
.................... #endif
.................... #if (ST8300C == true)
.................... 	#include "st8300_mens.c"
.................... #endif
.................... #if (ST8500C == true)
.................... 	#include "st8500_mens.c"
.................... 
.................... 	const char tabela_unidades[6][5]={"A",  	//0
.................... 									  "kW  ",	//1
.................... 									  "kVA ",	//2
.................... 									  "kVAr",	//3
.................... 									  "Hz  ",	//4
.................... 									  "Vac "	//5
.................... 									  };
.................... 									  
.................... 									  
.................... 	const char tabela_mens[178][17]={"                ",  	//0
.................... 								#if (com_tc == true)
.................... 								//	  0123456789012345
.................... 		     		       	     	"S T 8 5 0 0 C/TC",	//1
.................... 								#elif (com_rep == true))
.................... 								//	  0123456789012345
.................... 									"S T 8 5 0 0 C/IU",	//1
.................... 								#else
.................... 				     		    	#error "Falta definição"
.................... 								#endif
.................... 			     		             "N@:@@@@.@ V:@.@@",	//2
.................... 			     		             " Med. Eletricas ",    //3
.................... 			     		             "  E R R O !!!!! ",	//4
.................... 			     		             "Falta Sinal REP!",	//5
.................... 			     		             "   Ocorrencias  ",	//6
.................... 			     		             " Programa Geral ",	//7
.................... 			     		             "Programa  Cargas",	//8
.................... 									 "Programa Alarmes",	//9
.................... 			     		             "Programa Desliga",	//10
.................... 									 "   Manutencao   ",	//11
.................... 									 "   Instalacao   ",	//12
.................... 									 "Pot.Inst:@@@@@kW",	//13
.................... 									 "Nro de Cargas:  ",	//14
.................... 									 "     Usuario    ",	//15
.................... 									 "Max.Carga:@@@@kW",	//16
.................... 									 "Set-point:@@@@kW",	//17
.................... 									 "Acionamento:   s",	//18
.................... 									 "Carga @@:     kW",	//19
.................... 									 "T.Carga @@:    s",	//20
.................... 									 "Dem.Ativa:   @@%",	//21
.................... 									 "Acionado: @@@@kW",	//22
.................... 									 "Ten. (V):       ",	//23
.................... 									 "Cor. (A):       ", 	//24
.................... 									 "   Frequencia   ",    //25
.................... 									 "Pot.kW          ", 	//26
.................... 									 "Pot.kVA         ",  	//27
.................... 									 "Pot.kVAr        ",	//28
.................... 									 "Ftr Crg:       %",    //29
.................... 									 "Ftr Dmd:       %",	//30
.................... 									 "Flt.kVAr:       ",	//31
.................... 									 "Exc.kVAr:       ",	//32
.................... 									 "          Hz    ",	//33
.................... 									 "Dem.Cont.Mes: @@",	//34
.................... 									 "Ponta:   @@@@@kW",	//35
.................... 									 "F.Ponta: @@@@@kW",	//36
.................... 									 "  Apagando!!!   ",	//37
.................... 									 "Tipo Ligacao:   ",	//38
.................... 									 "End. Modbus:    ",	//39
.................... 									 "Baud Rate:      ",	//40
.................... 									 "FP Indutivo:    ",	//41
.................... 									 "FP Capacit.:    ",	//42
.................... 									 "Tensao Alta:   %",	//43
.................... 									 "Sub Tensao:    %",	//44
.................... 									 "  Periodo SECO  ",	//45
.................... 									 "I.@@/@@ F.@@/@@ ",	//46
.................... 									 "D. Med. kW:     ",	//47
.................... 									 "D. Prj. kW:     ",	//48
.................... 									 "Prog. Nao Autor.",	//49
.................... 									 " Prog. Liberada ",	//50
.................... 									 "@@@@@ Sem Limite",	//51
.................... 									 " Liga Carga:    ",	//52
.................... 									 " Desl Carga:    ",	//53
.................... 									 "D.Md. kVAr:     ",	//54
.................... 									 "D.Pj. kVAr:     ",	//55
.................... 									 "FP:             ",	//56
.................... 									 "Horario de Ponta",	//57
.................... 									 "Ajuste Relogio!!",	//58
.................... 									 "I.@@:@@ F.@@:@@ ",	//59
.................... 									 "   /  /     :   ",	//60
.................... 									 "       %       %",	//61
.................... 									 "Tempo  Carga:   ",	//62
.................... 									 "Aciona Carga:   ",	//63
.................... 									 "         Horas  ",	//64
.................... 									 "         Vezes  ",	//65
.................... 									 " Fim Ocorrencias",	//66	Cod Ocorrencia = 0
.................... 									 "Registro  Normal",	//67	Cod Ocorrencia = 1
.................... 									 "Tens Alta Fase R",	//68	Cod Ocorrencia = 2
.................... 									 "Tens Alta Fase S",	//69	Cod Ocorrencia = 3
.................... 									 "Tens Alta Fase T",	//70	Cod Ocorrencia = 4
.................... 									 "Ten Baixa Fase R",	//71	Cod Ocorrencia = 5
.................... 									 "Ten Baixa Fase S",	//72	Cod Ocorrencia = 6
.................... 									 "Ten Baixa Fase T",	//73	Cod Ocorrencia = 7
.................... 									 "MSG-OCOR-74-FREE",	//74	Cod Ocorrencia = 8
.................... 									 "MSG-OCOR-75-FREE",	//75	Cod Ocorrencia = 9
.................... 									 "MSG-OCOR-76-FREE",	//76	Cod Ocorrencia = 10
.................... 									 "Corr Alta Fase R",	//77	Cod Ocorrencia = 11
.................... 									 "Corr Alta Fase S",	//78	Cod Ocorrencia = 12
.................... 									 "Corr Alta Fase T",	//79	Cod Ocorrencia = 13
.................... 									 "  FP  Indutivo  ",	//80	Cod Ocorrencia = 14
.................... 									 " FP  Capacitivo ",	//81	Cod Ocorrencia = 15
.................... 									 "  Demanda ALTA  ",	//82	Cod Ocorrencia = 55
.................... 									 " TC Invertido R ",	//83	Cod Ocorrencia = 17
.................... 									 " TC Invertido S ",	//84	Cod Ocorrencia = 18
.................... 									 " TC Invertido T ",	//85	Cod Ocorrencia = 19
.................... 									 " Seq. Invertida ",	//86	Cod Ocorrencia = 20
.................... 									 "MSG-OCOR-87-FREE",	//87	Cod Ocorrencia = 21
.................... 									 "Transmissao Reg.",	//88	Cod Ocorrencia = 22
.................... 									 "Transmissao Ocor",	//89	Cod Ocorrencia = 23
.................... 									 "Volta de Energia",	//90	Cod Ocorrencia = 24
.................... 									 "      Reset     ", 	//91	Cod Ocorrencia = 25
.................... 									 "Inicio  Registro", 	//92	Cod Ocorrencia = 26
.................... 									 " Final Registro ", 	//93	Cod Ocorrencia = 27
.................... 									 " Ajuste de Data ", 	//94	Cod Ocorrencia = 28
.................... 									 "   Apagamento   ", 	//95	Cod Ocorrencia = 29
.................... 									 "Programa Teclado",	//96	Cod Ocorrencia = 30
.................... 									 "Prog Nao Autoriz",	//97	Cod Ocorrencia = 31
.................... 									 "Falta de Energia",    //98	Cod Ocorrencia = 32
.................... 									 "MSG-OCOR-99-FREE",	//99	Cod Ocorrencia = 33
.................... 									 "MSG-OCOR-100FREE", 	//100	Cod Ocorrencia = 34
.................... 									 "MSG-OCOR-101FREE", 	//101	Cod Ocorrencia = 35
.................... 									 "MSG-OCOR-102FREE", 	//102	Cod Ocorrencia = 36
.................... 									 "Reset do Alarme ",	//103	Cod Ocorrencia = 37
.................... 									 "  Tensao  Alta  ",	//104	Cod Ocorrencia = 38
.................... 									 "  Tensao Baixa  ",	//105	Cod Ocorrencia = 39
.................... 									 " Corrente  Alta ",	//106	Cod Ocorrencia = 40
.................... 									 "  Falta Fase R  ",	//107	Cod Ocorrencia = 41
.................... 									 "  Falta Fase S  ",	//108	Cod Ocorrencia = 42
.................... 									 "  Falta Fase T  ",	//109	Cod Ocorrencia = 43
.................... 									 "  Falta  Fases  ",	//110	Cod Ocorrencia = 44
.................... 									 "Corrente Baixa R",	//111	Cod Ocorrencia = 45
.................... 									 "Corrente Baixa S",	//112	Cod Ocorrencia = 46
.................... 									 "Corrente Baixa T",	//113	Cod Ocorrencia = 47
.................... 									 " Corrente Baixa ",	//114	Cod Ocorrencia = 48
.................... 									 "  Troca Tensao  ",	//115	Cod Ocorrencia = 49
.................... 									 " Potencia  Alta ",	//116	Cod Ocorrencia = 50
.................... 									 "Potencia Alta  R",	//117	Cod Ocorrencia = 51
.................... 									 "Potencia Alta  S",	//118	Cod Ocorrencia = 52
.................... 									 "Potencia Alta  T",	//119	Cod Ocorrencia = 53
.................... 									 "  Codigo Local  ",	//120	Cod Ocorrencia = 54
.................... 									 " Registro Teste ", 	//121	Cod Ocorrencia = 99
.................... 									 "Ocorrencia:     ",	//122
.................... 									 " Data e Horario ",	//123
.................... 									 " Data:   /  /   ",	//124
.................... 									 " Hora:     :    ",	//125
.................... 									 " Tensao Critica ",	//126
.................... 									 "Corrente Critica",	//127
.................... 									 "     Tabela     ",	//128
.................... 									 " Memoria: 1 NOK!",	//129
.................... 									 "Desl. por Tensao",	//130
.................... 									 "   Limpa Ocorr. ",	//131
.................... 									 "   * Cancelar   ",	//132
.................... 									 "  Zerar Carga   ",	//133
.................... 									 "Corrente Critica",	//134
.................... 									 "     Status     ",	//135
.................... 									 " D-??:?? L-??:??",	//136
.................... 									 "Desaciona:     s",	//137
.................... 									 "@@@@@@@@@@ (R)  ",	//138
.................... 									 "  (S)      (T)  ",	//139
.................... 									 "kWh:            ",	//140
.................... 									 "kVArh:          ",	//141
.................... 									 "  k. kWh:       ",	//142
.................... 									 "  k.kVArh:      ",	//143
.................... 									 "Tar:   Tempo:   ",	//144
.................... 									 "P:      /       ",	//145
.................... 									 "FP:        @@@@ ",    //146
.................... 									 "Ult.P kW:       ",	//147
.................... 									 "Ult.P kVAr:     ",	//148
.................... 									 " ERRO CRC - IU! ",	//149
.................... 									 "Carga em repouso", 	//150		
.................... 									 "Ult.kW:         ",	//151
.................... 									 "Ult.kVAr:       ",	//152
.................... 									 "Periodo Ponta   ",	//153
.................... 									 "Periodo F.Ponta ",	//154
.................... 									 "MSG_155-LIvre   ",	//155
.................... 									 "  Protocolo IU  ",	//156
.................... 									 "    REP:        ",	//157
.................... 									 "Modo Carga: @@-@",	//158
.................... 									 "Tipo de Controle",	//159
.................... 									 " Fila Sequencial", 	//160
.................... 									 "  Fila Circular ",	//161
.................... 									 " Periodo Ponta  ",    //162		Cod Ocorrencia = 58
.................... 									 "MSG_163-LIvre   ",    //163		Cod Ocorrencia = 59
.................... 									 "Periodo F. Ponta",    //164		Cod Ocorrencia = 60
.................... 									 "MSG_165-LIvre   ",	//165		Cod Ocorrencia = 61
.................... 									 "Falta Pulso REP ",    //166		Cod Ocorrencia = 62
.................... 									 "Volta Pulso REP ",    //167		Cod Ocorrencia = 63
.................... 									 "Erro Const.kWh  ",	//168
.................... 									 "Erro Const.kVArh",	//169
.................... 									 "Valor TC:     /5",	//170
.................... 									 "Valor TP:       ",	//171
.................... 									 "Modo Acionamento",	//172
.................... 									 "Modo Saidas INV ",	//173								 
.................... 									 "Modo Saidas NORM",	//174
.................... 									 "TESTE MEM       ",	//175
.................... 									 "END:            ",	//176
.................... 									 "FIM:            "		//177
.................... 	 								 };
.................... 
.................... 	 								 /// cuidado esta tabela esta na lcd_16x4
.................... 
.................... 	const char tabela_mens_esp[3][17]={"                ",  	//0
.................... 				     		             " S U L T E C H  ",	//1
.................... 				     		             "N@:@@@@.@ V:@.@@"	//2
.................... 				     		             };
.................... /*
.................... 	const char tabela_mens_esp[170][17]={"                ",  	//0
.................... 				     		             " S U L T E C H  ",	//1
.................... 				     		             "N@:@@@@.@ V:@.@@",	//2
.................... 				     		             "Med. Electricas ",    //3
.................... 				     		             "   Armonicos    ",	//4
.................... 				     		             "    Comandos    ",	//5
.................... 				     		             "   Ocorrencias  ",	//6
.................... 				     		             "Programa General",	//7
.................... 				     		             " Programa Cargas",	//8
.................... 										 "Programa Alarmes",	//9
.................... 				     		             "Programa Desliga",	//10
.................... 										 "  Manutencion   ",	//11
.................... 										 "  Harm. Tensao  ",	//12
.................... 										 " Harm. Corrente ",	//13
.................... 										 "N. de Cargas:   ",	//14
.................... 										 " Seq: Usuario   ",	//15
.................... 										 "Max.:       kVAr",	//16
.................... 										 "Min.:       kVAr",	//17
.................... 										 "Acionamento:   s",	//18
.................... 										 "B  :        kVAr",	//19
.................... 										 "Tempo B  :     s",	//20
.................... 										 "Cor Minima:    %",	//21
.................... 										 "Manual  FP:     ",	//22
.................... 										 "Tensao:         ",	//23
.................... 										 "Corrente:       ", 	//24
.................... 										 "   Frequencia   ",    //25
.................... 										 "P.Ativa         ", 	//26
.................... 										 "P.Aparen        ",  	//27
.................... 										 "P.Reativa       ",	//28
.................... 										 "FP:     R: @@@@ ",    //29
.................... 										 "S: @@@@ T: @@@@ ",	//30
.................... 										 "Falta:          ",	//31
.................... 										 "Excesso:        ",	//32
.................... 										 "          Hz    ",	//33
.................... 										 "Tensao:     Vac ",	//34
.................... 										 "Valor TC:     /5",	//35
.................... 										 "Valor TP:       ",	//36
.................... 										 "Set-Point:      ",	//37
.................... 										 "Tipo Ligacao:   ",	//38
.................... 										 "End. Modbus:    ",	//39
.................... 										 "Baud Rate:      ",	//40
.................... 										 "FP Indutivo:    ",	//41
.................... 										 "FP Capacit.:    ",	//42
.................... 										 "Tensao Alta:   %",	//43
.................... 										 "Sub Tensao:    %",	//44
.................... 										 "Cor. Alta:     %",	//45
.................... 										 "Cor. Baixa:    %",	//46
.................... 										 "CH Tensao:     %",	//47
.................... 										 "CH Corrente:   %",	//48
.................... 										 "Prog. Nao Autor.",	//49
.................... 										 " Prog. Liberada ",	//50
.................... 										 "@@@@@ Sem Limite",	//51
.................... 										 " Liga Carga:    ",	//52
.................... 										 " Desl Carga:    ",	//53
.................... 										 "Total:         %",	//54
.................... 										 "Fund.:         %",	//55
.................... 										 "   Harm:       %",	//56
.................... 										 "                ",	//57
.................... 										 "Ajuste Relogio!!",	//58
.................... 										 "                ",	//59
.................... 										 "   /  /     :   ",	//60
.................... 										 "       %       %",	//61
.................... 										 "Tempo  Carga:   ",	//62
.................... 										 "Aciona Carga:   ",	//63
.................... 										 "         Horas  ",	//64
.................... 										 "         Vezes  ",	//65
.................... 										 " Fim Ocorrencias",	//66	Cod Ocorrencia = 0
.................... 										 "Registro  Normal",	//67	Cod Ocorrencia = 1
.................... 										 "Tens Alta Fase R",	//68	Cod Ocorrencia = 2
.................... 										 "Tens Alta Fase S",	//69	Cod Ocorrencia = 3
.................... 										 "Tens Alta Fase T",	//70	Cod Ocorrencia = 4
.................... 										 "Ten Baixa Fase R",	//71	Cod Ocorrencia = 5
.................... 										 "Ten Baixa Fase S",	//72	Cod Ocorrencia = 6
.................... 										 "Ten Baixa Fase T",	//73	Cod Ocorrencia = 7
.................... 										 "CHT Corr. Alto R",	//74	Cod Ocorrencia = 8
.................... 										 "CHT Corr. Alto S",	//75	Cod Ocorrencia = 9
.................... 										 "CHT Corr. Alto T",	//76	Cod Ocorrencia = 10
.................... 										 "Corr Alta Fase R",	//77	Cod Ocorrencia = 11
.................... 										 "Corr Alta Fase S",	//78	Cod Ocorrencia = 12
.................... 										 "Corr Alta Fase T",	//79	Cod Ocorrencia = 13
.................... 										 "  FP  Indutivo  ",	//80	Cod Ocorrencia = 14
.................... 										 " FP  Capacitivo ",	//81	Cod Ocorrencia = 15
.................... 										 "Falta  Capacitor",	//82	Cod Ocorrencia = 16
.................... 										 " TC Invertido R ",	//83	Cod Ocorrencia = 17
.................... 										 " TC Invertido S ",	//84	Cod Ocorrencia = 18
.................... 										 " TC Invertido T ",	//85	Cod Ocorrencia = 19
.................... 										 " Seq. Invertida ",	//86	Cod Ocorrencia = 20
.................... 										 "Temperatura Alta",	//87	Cod Ocorrencia = 21
.................... 										 "Transmissao Reg.",	//88	Cod Ocorrencia = 22
.................... 										 "Transmissao Ocor",	//89	Cod Ocorrencia = 23
.................... 										 "Volta de Energia",	//90	Cod Ocorrencia = 24
.................... 										 "      Reset     ", 	//91	Cod Ocorrencia = 25
.................... 										 "Inicio  Registro", 	//92	Cod Ocorrencia = 26
.................... 										 " Final Registro ", 	//93	Cod Ocorrencia = 27
.................... 										 "  Ajuste  Data  ", 	//94	Cod Ocorrencia = 28
.................... 										 "   Apagamento   ", 	//95	Cod Ocorrencia = 29
.................... 										 "Programa Teclado",	//96	Cod Ocorrencia = 30
.................... 										 "Prog Nao Autoriz",	//97	Cod Ocorrencia = 31
.................... 										 "Falta de Energia",    //98	Cod Ocorrencia = 32
.................... 										 " Apagamento CHT ",	//99	Cod Ocorrencia = 33
.................... 										 "Transmissao  CHT", 	//100	Cod Ocorrencia = 34
.................... 										 "CHT Tensao  Alto", 	//101	Cod Ocorrencia = 35
.................... 										 "CHT Corren. Alto", 	//102	Cod Ocorrencia = 36
.................... 										 "Reset do Alarme ",	//103	Cod Ocorrencia = 37
.................... 										 "  Tensao  Alta  ",	//104	Cod Ocorrencia = 38
.................... 										 "  Tensao Baixa  ",	//105	Cod Ocorrencia = 39
.................... 										 " Corrente  Alta ",	//106	Cod Ocorrencia = 40
.................... 										 "  Falta Fase R  ",	//107	Cod Ocorrencia = 41
.................... 										 "  Falta Fase S  ",	//108	Cod Ocorrencia = 42
.................... 										 "  Falta Fase T  ",	//109	Cod Ocorrencia = 43
.................... 										 "  Falta  Fases  ",	//110	Cod Ocorrencia = 44
.................... 										 "Corrente Baixa R",	//111	Cod Ocorrencia = 45
.................... 										 "Corrente Baixa S",	//112	Cod Ocorrencia = 46
.................... 										 "Corrente Baixa T",	//113	Cod Ocorrencia = 47
.................... 										 " Corrente Baixa ",	//114	Cod Ocorrencia = 48
.................... 										 "  Troca Tensao  ",	//115	Cod Ocorrencia = 49
.................... 										 " Potencia  Alta ",	//116	Cod Ocorrencia = 50
.................... 										 "Potencia Alta  R",	//117	Cod Ocorrencia = 51
.................... 										 "Potencia Alta  S",	//118	Cod Ocorrencia = 52
.................... 										 "Potencia Alta  T",	//119	Cod Ocorrencia = 53
.................... 										 "  Codigo Local  ",	//120	Cod Ocorrencia = 54
.................... 										 " Demanda Alta   ", 	//121	Cod Ocorrencia = 55
.................... 										 "Ocorrencia:     ",	//122
.................... 										 "Programa Relogio",	//123
.................... 										 " Data:   /  /   ",	//124
.................... 										 " Hora:     :    ",	//125
.................... 										 " Tensao Critica ",	//126
.................... 										 "Corrente Critica",	//127
.................... 										 "     Tabela     ",	//128
.................... 										 " Memoria: 1 NOK!",	//129
.................... 										 "Desl. por Tensao",	//130
.................... 										 "   Limpa Ocorr. ",	//131
.................... 										 "   * Cancelar   ",	//132
.................... 										 "  Zerar Carga   ",	//133
.................... 										 "Corrente Critica",	//134
.................... 										 "    Status:     ",	//135
.................... 										 "Em Carga Minimo ",	//136
.................... 										 "Desaciona:     s",	//137
.................... 										 "@@@@@@@@@@ (R)  ",	//138
.................... 										 "  (S)      (T)  ",	//139
.................... 										 "  Em Modo REP   ",	//140
.................... 										 "  Tipo REP      ",	//141
.................... 										 "  K. KWh:       ",	//142
.................... 										 "  K. KVAh:      ",	//143
.................... 										 "FP:        @@@@ ",   //144
.................... 										 "P:      /       ",	//145
.................... 										 "FP:        @@@@ ",    //146
.................... 										 "Ult.P KW:  @@@@@",	//147
.................... 										 "Ult.P KVAr:@@@@@",	//148
.................... 										 "ERRO CRC - IU!!!",	//149
.................... 										 "Carga em repouso", 	//150		
.................... 										 "Ult.KW:     @@@@",	//151
.................... 										 "Ult.KVAr:   @@@@",	//152
.................... 										 "Periodo Ponta   ",	//153
.................... 										 "Periodo F.Ponta ",	//154
.................... 										 "MSG_155-LIvre   ",	//155
.................... 										 "MSG_156-LIvre   ",	//156
.................... 										 "MSG_157-LIvre   ",	//157
.................... 										 "Modo Carga: @@-@",	//158
.................... 										 "Tipo de Controle",	//159
.................... 										 " Fila Sequencial", 	//160
.................... 										 "  Fila Circular ",	//161
.................... 										 " Periodo Ponta  ",    //162		Cod Ocorrencia = 58
.................... 										 "MSG_163-LIvre   ",    //163		Cod Ocorrencia = 59
.................... 										 "Periodo F. Ponta",    //164		Cod Ocorrencia = 60
.................... 										 "MSG_165-LIvre   ",	//165		Cod Ocorrencia = 61
.................... 										 "Falta Pulso REP ",    //166		Cod Ocorrencia = 62
.................... 										 "Volta Pulso REP ",    //167		Cod Ocorrencia = 63
.................... 										 "Erro Const. KW  ",	//168
.................... 										 "Erro Const. KVAr"		//169
.................... 		 								 };
.................... */
.................... 
.................... //	2,3,4,5,6,7,14,15,25,29,41,42,43,44,49,55,58,59,60,61,62,63
.................... 	#define nro_tab_ocor	64
.................... 	const char tabela_ocorrencias[nro_tab_ocor]={	66,		//0
.................... 										67,		//1
.................... 										68,		//2
.................... 										69,		//3
.................... 										70,		//4
.................... 										71,		//5
.................... 										72,		//6
.................... 										73,		//7
.................... 										74,		//8
.................... 										75,		//9
.................... 										76,		//10
.................... 										77,		//11
.................... 										78,		//12
.................... 										79,		//13
.................... 										80,		//14
.................... 										81,		//15
.................... 										82,		//16
.................... 										83,		//17
.................... 										84,		//18
.................... 										85,		//19
.................... 										86,		//20
.................... 										87,		//21
.................... 										88,		//22
.................... 										89,		//23
.................... 										90,		//24
.................... 										91,		//25
.................... 										92,		//26
.................... 										93,		//27
.................... 										94,		//28
.................... 										95,		//29
.................... 										96,		//30
.................... 										97,		//31
.................... 										98,		//32
.................... 										99,		//33
.................... 										100,	//34
.................... 										101,	//35
.................... 										102,	//36
.................... 										103,	//37
.................... 										104,	//38
.................... 										105,	//39
.................... 										106,	//40
.................... 										107,	//41
.................... 										108,	//42
.................... 										109,	//43
.................... 										110,	//44
.................... 										111,	//45
.................... 										112,	//46
.................... 										113,	//47
.................... 										114,	//48
.................... 										115,	//49
.................... 										116,	//50
.................... 										117,	//51
.................... 										118,	//52
.................... 										119,	//53
.................... 										120,	//54
.................... 										82,		//55
.................... 										255,	//56
.................... 										255,	//57
.................... 										162,	//58
.................... 										163,	//59
.................... 										164,	//60
.................... 										165,	//61
.................... 										166,	//62
.................... 										167		//63
.................... 										};
.................... 
.................... 						
.................... 
.................... 	const char tabela_menu4[nro_menus4+1]={	0,
.................... 											1,
.................... 											2,
.................... 											3,
.................... 											11,
.................... 											4,
.................... 											5,
.................... 											10
.................... 											};									 
.................... 	
.................... 	#define m_menu_principal 3
.................... 	#define m_prog_liberada 11
.................... 	#define m_prog_nao_auto 11
.................... 	#define m_menu1	3
.................... 	#define m_menu2	4
.................... 	#define m_menu3	4
.................... 	#define m_menu4	5
.................... 	#define m_menu5	6
.................... 	#define m_menu6	9
.................... 	#define m_menu7	0
.................... 	#define m_menu8	0
.................... 	#define m_menu9	0
.................... 	#define m_menu10	0
.................... 	
.................... 	
.................... 	#define m_menu1_110  12
.................... 	#define m_menu1_111  13
.................... 	#define m_menu1_112  14
.................... 	#define m_menu1_113  15
.................... 	#define m_menu1_120  16
.................... 	#define m_menu1_121  13
.................... 	#define m_menu1_122  14
.................... 	#define m_menu1_123  15
.................... 	#define m_menu1_130  12
.................... 	#define m_menu1_131  20
.................... 	#define m_menu1_132  21
.................... 	#define m_menu1_133  22
.................... 	#define m_menu1_140  23
.................... 	#define m_menu1_141  20
.................... 	#define m_menu1_142  21
.................... 	#define m_menu1_143  22
.................... 	#define m_menu1_150  24
.................... 	#define m_menu1_151  13
.................... 	#define m_menu1_152  14
.................... 	#define m_menu1_153  15
.................... 	#define m_menu1_160  25
.................... 	#define m_menu1_161  26
.................... 	#define m_menu1_162  27
.................... 	#define m_menu1_163  0
.................... 	#define m_menu1_170  28
.................... 	#define m_menu1_171  30
.................... 	#define m_menu1_172  31
.................... 	#define m_menu1_173  32
.................... 	#define m_menu1_180  29
.................... 	#define m_menu1_181  31
.................... 	#define m_menu1_182  32
.................... 	#define m_menu1_183  33
.................... 	#define m_menu1_190  34
.................... 	#define m_menu1_191  13
.................... 	#define m_menu1_192  14
.................... 	#define m_menu1_193  15
.................... 	#define m_menu1_1100  35
.................... 	#define m_menu1_1101  13
.................... 	#define m_menu1_1102  14
.................... 	#define m_menu1_1103  15
.................... 	
.................... 	
.................... 	#define m_menu1_7  14
.................... 	#define m_menu1_8  14
.................... 	#define m_menu1_9  14
.................... 	#define m_menu1_10  14
.................... 	#define m_menu1_11  14
.................... 	#define m_menu1_12  14
.................... 	#define m_menu1_13  14
.................... 	#define m_menu1_14  14
.................... 	#define m_menu1_15  14
.................... 	#define m_menu1_16  14
.................... 	
.................... 	
.................... 	#define m_menu4_1	40
.................... 	#define m_menu4_2	41
.................... 	#define m_menu4_3	42
.................... 	#define m_menu4_4	43
.................... 	#define m_menu4_5	44
.................... 	#define m_menu4_6	45
.................... 	#define m_menu4_7	46
.................... 	#define m_menu4_8	47
.................... 	#define m_menu4_9	48
.................... 	#define m_menu4_10	49
.................... 	#define m_menu4_11	50
.................... 	#define m_menu4_12	51
.................... 	#define m_menu4_13	52
.................... 	#define m_menu4_14	53
.................... 	#define m_menu4_15	54
.................... 	#define m_menu4_16	55
.................... 	#define m_menu4_17	56
.................... 									//01234567890123456789012345678901234567890
.................... 									//			10		  20        30
.................... //	#define nro_caracteres	39
.................... //	const char tabela_alfabeto[nro_caracteres+1] ={" 0123456789ABCDEFGHIJKLMNOPQRSTUVXYZW-#"};
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 	const char tabela_mens_tipo2[17][4]={" ",		//00
.................... 										"01",		//01
.................... 										"02",		//02
.................... 										"03",		//03
.................... 										"04",		//04
.................... 										"05",		//05
.................... 										"06",		//06
.................... 										"07",		//07
.................... 										"08",		//08
.................... 										"09",		//09
.................... 										"10",		//10
.................... 										"11",		//11
.................... 										"12",		//12
.................... 										"13",		//13
.................... 										"14",		//14
.................... 										"15",		//15
.................... 										"16"		//16
.................... 										};
.................... 
.................... 	const char tabela_mens_tipo3[16][5]={"T01-",	//00
.................... 										"T02-",		//01
.................... 										"T03-",		//02
.................... 										"T04-",		//03
.................... 										"T05-",		//04
.................... 										"T06-",		//05
.................... 										"T07-",		//06
.................... 										"T08-",		//07
.................... 										"T09-",		//08
.................... 										"T10-",		//09
.................... 										"T11-",		//10
.................... 										"T12-",		//11
.................... 										"T13-",		//12
.................... 										"T14-",		//13
.................... 										"T15-",		//14
.................... 										"T16-"		//15
.................... 										};
.................... 
.................... 	const char tabela_menu4_old[nro_menus4+1]={	0,
.................... 											1,
.................... 											2,
.................... 											3,
.................... 											11,
.................... 											4,
.................... 											5,
.................... 											10
.................... 											};
.................... 
.................... 	const char tabela_menu_bancos[nro_menu_bancos+1]={	0,
.................... 														18,
.................... 														6,
.................... 														7,
.................... 														8,
.................... 														9,
.................... 														19,
.................... 														30,
.................... 														17
.................... 														};
.................... 
.................... 	
.................... 
.................... 										//   1234567890123456
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 										
.................... 
.................... #endif
.................... 
.................... void mensagem(char linha, char linha_mens)
.................... {
.................... 	ultima_linha = linha;
*
047E8:  MOVFF  A4D,890
.................... 	ultima_mensagem = linha_mens;
047EC:  MOVFF  A4E,891
.................... 	
.................... 	if (linha > 4)
047F0:  MOVLB  A
047F2:  MOVF   x4D,W
047F4:  SUBLW  04
047F6:  BC    47FC
.................... 		{
.................... 		linha = 1;
047F8:  MOVLW  01
047FA:  MOVWF  x4D
.................... 		}
.................... 	lcd_linha = linha;
047FC:  MOVFF  A4D,88F
.................... 	lcd_gotoxy(1,lcd_linha);
04800:  MOVLW  01
04802:  MOVWF  x62
04804:  MOVFF  88F,A63
04808:  MOVLB  0
0480A:  RCALL  46C4
.................... 	caracter = 0xff;
0480C:  MOVLB  3
0480E:  SETF   xBD
.................... 	aux_disp = 0;
04810:  CLRF   xB0
.................... 	while (caracter != 0)
04812:  MOVF   xBD,F
04814:  BZ    48D0
.................... 		{
.................... 		if (linha_mens < 200)
04816:  MOVLB  A
04818:  MOVF   x4E,W
0481A:  SUBLW  C7
0481C:  BNC   485A
.................... 			{
.................... 			#if (portatil ==  true)
.................... 				if (idioma == ESPANHOL)
.................... 					{
.................... 					caracter = tabela_mens_esp[linha_mens][aux_disp++];
.................... 					}
.................... 				else
.................... 					{
.................... 					caracter = tabela_mens[linha_mens][aux_disp++];
.................... 					}
.................... 			#else
.................... 				caracter = tabela_mens[linha_mens][aux_disp++];
0481E:  CLRF   x67
04820:  MOVFF  A4E,A66
04824:  CLRF   x69
04826:  MOVLW  11
04828:  MOVWF  x68
0482A:  MOVLB  0
0482C:  RCALL  473C
0482E:  MOVFF  02,A50
04832:  MOVFF  01,A4F
04836:  MOVLB  3
04838:  MOVF   xB0,W
0483A:  INCF   xB0,F
0483C:  ADDWF  01,W
0483E:  MOVWF  01
04840:  MOVLW  00
04842:  ADDWFC 02,W
04844:  MOVWF  03
04846:  MOVF   01,W
04848:  MOVFF  03,FF7
0484C:  MOVLB  0
0484E:  CALL   041C
04852:  MOVFF  FE8,3BD
.................... 			#endif
.................... 			}
04856:  BRA    4862
04858:  MOVLB  A
.................... 		else
.................... 			{
.................... 			if (linha_mens == 200)
0485A:  MOVF   x4E,W
0485C:  SUBLW  C8
0485E:  BNZ   4860
04860:  MOVLB  0
.................... 				{
.................... 				#if (tratar_localizacao	== true)
.................... 					#if (portatil == true)
.................... 						caracter = localizacao[aux_disp++];
.................... 						if (digitando_texto == 0)
.................... 							{
.................... 							if (caracter == '#')		// enter, final de linha, terminador de localizacao
.................... 								{
.................... 								caracter = ' ';
.................... 								}
.................... 							}
.................... 					#endif
.................... 				#endif
.................... 				}
.................... 			}
.................... 			
.................... 	
.................... 		if (caracter == '@')			// pula caracter
04862:  MOVLB  3
04864:  MOVF   xBD,W
04866:  SUBLW  40
04868:  BNZ   4872
.................... 			{
.................... 			avanca_cursor();
0486A:  MOVLB  0
0486C:  BRA    475E
.................... 			}
0486E:  BRA    48C4
04870:  MOVLB  3
.................... 		else if (caracter == 'é')		// up
04872:  MOVF   xBD,W
04874:  SUBLW  E9
04876:  BNZ   488A
.................... 			{
.................... 			wr_lcd(1, 0);
04878:  MOVLW  01
0487A:  MOVLB  A
0487C:  MOVWF  x65
0487E:  CLRF   x66
04880:  MOVLB  0
04882:  CALL   1864
.................... 			}
04886:  BRA    48C4
04888:  MOVLB  3
.................... 		else if (caracter == 'â')		// down
0488A:  MOVF   xBD,W
0488C:  SUBLW  E2
0488E:  BNZ   48A2
.................... 			{
.................... 			wr_lcd(1, 1);
04890:  MOVLW  01
04892:  MOVLB  A
04894:  MOVWF  x65
04896:  MOVWF  x66
04898:  MOVLB  0
0489A:  CALL   1864
.................... 			}
0489E:  BRA    48C4
048A0:  MOVLB  3
.................... 		else if (caracter == 'ä')		// enter
048A2:  MOVF   xBD,W
048A4:  SUBLW  E4
048A6:  BNZ   48BC
.................... 			{
.................... 			wr_lcd(1, 2);
048A8:  MOVLW  01
048AA:  MOVLB  A
048AC:  MOVWF  x65
048AE:  MOVLW  02
048B0:  MOVWF  x66
048B2:  MOVLB  0
048B4:  CALL   1864
.................... 			}
048B8:  BRA    48C4
048BA:  MOVLB  3
.................... 		else
.................... 			{
.................... 			display(caracter);
048BC:  MOVFF  3BD,A4F
048C0:  MOVLB  0
048C2:  RCALL  4770
.................... 			}
.................... 		if(aux_disp > 16)
048C4:  MOVLB  3
048C6:  MOVF   xB0,W
048C8:  SUBLW  10
048CA:  BC    48CE
.................... 			{
.................... 			break;
048CC:  BRA    48D0
.................... 			}
048CE:  BRA    4812
.................... 		} 
048D0:  MOVLB  0
048D2:  RETURN 0
.................... }
.................... 
.................... void display(char caracter)
.................... {   
.................... 	switch (caracter)
*
04770:  MOVLB  A
04772:  MOVF   x4F,W
04774:  XORLW  0C
04776:  MOVLB  0
04778:  BZ    4788
0477A:  XORLW  06
0477C:  BZ    47A0
0477E:  XORLW  02
04780:  BZ    47B8
04782:  XORLW  08
04784:  BZ    47CC
04786:  BRA    47D2
.................... 		{
.................... 		case '\f':
.................... 			{
.................... 			wr_lcd(0,1);
04788:  MOVLB  A
0478A:  CLRF   x65
0478C:  MOVLW  01
0478E:  MOVWF  x66
04790:  MOVLB  0
04792:  CALL   1864
.................... 			lcd_linha = 1;
04796:  MOVLW  01
04798:  MOVLB  8
0479A:  MOVWF  x8F
.................... 			break;			
0479C:  BRA    47E4
0479E:  MOVLB  0
.................... 			}
.................... 		case '\n':
.................... 			{
.................... 			lcd_gotoxy(1,++lcd_linha);
047A0:  MOVLB  8
047A2:  INCF   x8F,F
047A4:  MOVLW  01
047A6:  MOVLB  A
047A8:  MOVWF  x62
047AA:  MOVFF  88F,A63
047AE:  MOVLB  0
047B0:  RCALL  46C4
.................... 			break;
047B2:  MOVLB  8
047B4:  BRA    47E4
047B6:  MOVLB  0
.................... 			}
.................... 		case '\b':
.................... 			{
.................... 			wr_lcd(0, 0x10);
047B8:  MOVLB  A
047BA:  CLRF   x65
047BC:  MOVLW  10
047BE:  MOVWF  x66
047C0:  MOVLB  0
047C2:  CALL   1864
.................... 			break;
047C6:  MOVLB  8
047C8:  BRA    47E4
047CA:  MOVLB  0
.................... 			}
.................... 		case 0:
.................... 			{
.................... 			break;
047CC:  MOVLB  8
047CE:  BRA    47E4
047D0:  MOVLB  0
.................... 			}
.................... 		default:
.................... 			{
.................... 			wr_lcd(1, caracter);
047D2:  MOVLW  01
047D4:  MOVLB  A
047D6:  MOVWF  x65
047D8:  MOVFF  A4F,A66
047DC:  MOVLB  0
047DE:  CALL   1864
047E2:  MOVLB  8
.................... 			}
.................... 		}	
047E4:  MOVLB  0
047E6:  RETURN 0
.................... }
.................... 
.................... void lcd_posi(char pos)
.................... {
.................... 	if (pos < 16)				// 12345678901234567890
*
0AB24:  MOVLB  A
0AB26:  MOVF   x53,W
0AB28:  SUBLW  0F
0AB2A:  BNC   AB3E
.................... 		{
.................... 		lcd_gotoxy(pos,1);
0AB2C:  MOVFF  A53,A62
0AB30:  MOVLW  01
0AB32:  MOVWF  x63
0AB34:  MOVLB  0
0AB36:  CALL   46C4
.................... 		}						// 1              16  20
0AB3A:  BRA    AB88
0AB3C:  MOVLB  A
.................... 	else if(pos < 32)			// 12345678901234567890
0AB3E:  MOVF   x53,W
0AB40:  SUBLW  1F
0AB42:  BNC   AB5A
.................... 		{
.................... 		pos = pos - 16;
0AB44:  MOVLW  10
0AB46:  SUBWF  x53,F
.................... 		lcd_gotoxy(pos,2);
0AB48:  MOVFF  A53,A62
0AB4C:  MOVLW  02
0AB4E:  MOVWF  x63
0AB50:  MOVLB  0
0AB52:  CALL   46C4
.................... 		}						// 21			  36  40
0AB56:  BRA    AB88
0AB58:  MOVLB  A
.................... 	else if(pos < 48)			// 1234567890123456xxxx
0AB5A:  MOVF   x53,W
0AB5C:  SUBLW  2F
0AB5E:  BNC   AB76
.................... 		{
.................... 		pos = pos - 32;
0AB60:  MOVLW  20
0AB62:  SUBWF  x53,F
.................... 		lcd_gotoxy(pos,3);
0AB64:  MOVFF  A53,A62
0AB68:  MOVLW  03
0AB6A:  MOVWF  x63
0AB6C:  MOVLB  0
0AB6E:  CALL   46C4
.................... 		}						// 21             36  40 
0AB72:  BRA    AB88
0AB74:  MOVLB  A
.................... 	else						// 1234567890123456xxxx
.................... 		{
.................... 		pos = pos - 48;		 
0AB76:  MOVLW  30
0AB78:  SUBWF  x53,F
.................... 		lcd_gotoxy(pos,4);
0AB7A:  MOVFF  A53,A62
0AB7E:  MOVLW  04
0AB80:  MOVWF  x63
0AB82:  MOVLB  0
0AB84:  CALL   46C4
.................... 		}
0AB88:  RETURN 0
.................... }
.................... 
.................... void mostra_cur(char pos)
.................... {
.................... 	lcd_posi(pos);
.................... 	wr_lcd(0,CUR_ATV);	
.................... }
.................... 
.................... 	
.................... void displayp(char pos, int16 variavel,char inteiros, char decimais,char quantizacao)	
.................... {
.................... 	word z;
.................... 	char x;
.................... 	char decimal;
.................... 	int16 i;	
.................... 
.................... 	decimal = decimais;			    
*
05038:  MOVFF  A52,A57
.................... 
.................... 	if (pos < 16)				// 12345678901234567890
0503C:  MOVLB  A
0503E:  MOVF   x4E,W
05040:  SUBLW  0F
05042:  BNC   5056
.................... 		{
.................... 		lcd_gotoxy(pos,1);
05044:  MOVFF  A4E,A62
05048:  MOVLW  01
0504A:  MOVWF  x63
0504C:  MOVLB  0
0504E:  CALL   46C4
.................... 		}						// 1              16  20
05052:  BRA    50A0
05054:  MOVLB  A
.................... 	else if(pos < 32)			// 12345678901234567890
05056:  MOVF   x4E,W
05058:  SUBLW  1F
0505A:  BNC   5072
.................... 		{
.................... 		pos = pos - 16;
0505C:  MOVLW  10
0505E:  SUBWF  x4E,F
.................... 		lcd_gotoxy(pos,2);
05060:  MOVFF  A4E,A62
05064:  MOVLW  02
05066:  MOVWF  x63
05068:  MOVLB  0
0506A:  CALL   46C4
.................... 		}						// 21			  36  40
0506E:  BRA    50A0
05070:  MOVLB  A
.................... 	else if(pos < 48)			// 1234567890123456xxxx
05072:  MOVF   x4E,W
05074:  SUBLW  2F
05076:  BNC   508E
.................... 		{
.................... 		pos = pos - 32;
05078:  MOVLW  20
0507A:  SUBWF  x4E,F
.................... 		lcd_gotoxy(pos,3);
0507C:  MOVFF  A4E,A62
05080:  MOVLW  03
05082:  MOVWF  x63
05084:  MOVLB  0
05086:  CALL   46C4
.................... 		}						// 21             36  40 
0508A:  BRA    50A0
0508C:  MOVLB  A
.................... 	else						// 1234567890123456xxxx
.................... 		{
.................... 		pos = pos - 48;		 
0508E:  MOVLW  30
05090:  SUBWF  x4E,F
.................... 		lcd_gotoxy(pos,4);
05092:  MOVFF  A4E,A62
05096:  MOVLW  04
05098:  MOVWF  x63
0509A:  MOVLB  0
0509C:  CALL   46C4
.................... 		}
.................... 	
.................... 	if (quantizacao == 'P')	
050A0:  MOVLB  A
050A2:  MOVF   x53,W
050A4:  SUBLW  50
050A6:  BNZ   50BA
.................... 		{
.................... 		if (programando == 1)
050A8:  BTFSS  29.5
050AA:  BRA    50B0
.................... 			{
.................... 			pisca = 1;	
050AC:  BSF    2A.0
.................... 			}
050AE:  BRA    50B2
.................... 		else
.................... 			{
.................... 			pisca = 0;
050B0:  BCF    2A.0
.................... 			}
.................... 		z = 1;
050B2:  CLRF   x55
050B4:  MOVLW  01
050B6:  MOVWF  x54
.................... 		}
050B8:  BRA    50CE
.................... 	else
.................... 		{
.................... 		pisca = 0;
050BA:  BCF    2A.0
.................... 		z = pob(quantizacao);
050BC:  MOVFF  A53,A62
050C0:  MOVLB  0
050C2:  RCALL  4DFC
050C4:  MOVFF  02,A55
050C8:  MOVFF  01,A54
050CC:  MOVLB  A
.................... 		}
.................... 	i = variavel / z;
050CE:  MOVFF  A50,A6C
050D2:  MOVFF  A4F,A6B
050D6:  MOVFF  A55,A6E
050DA:  MOVFF  A54,A6D
050DE:  MOVLB  0
050E0:  RCALL  4ECC
050E2:  MOVFF  02,A59
050E6:  MOVFF  01,A58
.................... 	binasc2(i);		/* saida em buf_tmp[0 a 4]*/
050EA:  MOVFF  A59,A63
050EE:  MOVFF  A58,A62
050F2:  RCALL  4F12
.................... 	for (x = 5 - inteiros; x < 5; x++)
050F4:  MOVLW  05
050F6:  BSF    FD8.0
050F8:  MOVLB  A
050FA:  SUBFWB x51,W
050FC:  MOVWF  x56
050FE:  MOVF   x56,W
05100:  SUBLW  04
05102:  BNC   5160
.................... 		{
.................... 		if (pisca == 1)
05104:  BTFSS  2A.0
05106:  BRA    513E
.................... 			{
.................... 			if (piscar == 1)
05108:  BTFSS  29.7
0510A:  BRA    511E
.................... 				{
.................... 			    wr_lcd(1,' ');
0510C:  MOVLW  01
0510E:  MOVWF  x65
05110:  MOVLW  20
05112:  MOVWF  x66
05114:  MOVLB  0
05116:  CALL   1864
.................... 				}
0511A:  BRA    513A
0511C:  MOVLB  A
.................... 			else
.................... 				{
.................... 			    wr_lcd(1,buf_tmp[x]);
0511E:  CLRF   03
05120:  MOVF   x56,W
05122:  ADDLW  64
05124:  MOVWF  FE9
05126:  MOVLW  08
05128:  ADDWFC 03,W
0512A:  MOVWF  FEA
0512C:  MOVFF  FEF,A66
05130:  MOVLW  01
05132:  MOVWF  x65
05134:  MOVLB  0
05136:  CALL   1864
.................... 		    	}
.................... 		    }
0513A:  BRA    515A
0513C:  MOVLB  A
.................... 		 else
.................... 		 	{
.................... 		    wr_lcd(1,buf_tmp[x]);
0513E:  CLRF   03
05140:  MOVF   x56,W
05142:  ADDLW  64
05144:  MOVWF  FE9
05146:  MOVLW  08
05148:  ADDWFC 03,W
0514A:  MOVWF  FEA
0514C:  MOVFF  FEF,A66
05150:  MOVLW  01
05152:  MOVWF  x65
05154:  MOVLB  0
05156:  CALL   1864
.................... 			}
0515A:  MOVLB  A
0515C:  INCF   x56,F
0515E:  BRA    50FE
.................... 		}
.................... 	if (decimal != 0)
05160:  MOVF   x57,F
05162:  BZ    5238
.................... 		{
.................... 		wr_lcd(1,',');
05164:  MOVLW  01
05166:  MOVWF  x65
05168:  MOVLW  2C
0516A:  MOVWF  x66
0516C:  MOVLB  0
0516E:  CALL   1864
....................     	i=(int16)(variavel % z);
05172:  MOVFF  A50,A6C
05176:  MOVFF  A4F,A6B
0517A:  MOVFF  A55,A6E
0517E:  MOVFF  A54,A6D
05182:  RCALL  4ECC
05184:  MOVFF  00,A58
05188:  MOVLB  A
0518A:  MOVFF  03,A59
....................     	i=(int16)(i * 100 / z);
0518E:  MOVFF  A59,A67
05192:  MOVFF  A58,A66
05196:  CLRF   x69
05198:  MOVLW  64
0519A:  MOVWF  x68
0519C:  MOVLB  0
0519E:  CALL   473C
051A2:  MOVFF  02,A5B
051A6:  MOVFF  01,A5A
051AA:  MOVFF  02,A6C
051AE:  MOVFF  01,A6B
051B2:  MOVFF  A55,A6E
051B6:  MOVFF  A54,A6D
051BA:  RCALL  4ECC
051BC:  MOVFF  02,A59
051C0:  MOVFF  01,A58
.................... 		binasc2(i);		/* saida em buf_tmp[0 a 4]*/
051C4:  MOVFF  A59,A63
051C8:  MOVFF  A58,A62
051CC:  RCALL  4F12
.................... 		for (x=3; x < 3 + decimal; x++)
051CE:  MOVLW  03
051D0:  MOVLB  A
051D2:  MOVWF  x56
051D4:  MOVLW  03
051D6:  ADDWF  x57,W
051D8:  SUBWF  x56,W
051DA:  BC    5238
.................... 			{
.................... 			if (pisca == 1)
051DC:  BTFSS  2A.0
051DE:  BRA    5216
.................... 				{
.................... 				if (piscar == 1)
051E0:  BTFSS  29.7
051E2:  BRA    51F6
.................... 					{
.................... 				    wr_lcd(1,' ');
051E4:  MOVLW  01
051E6:  MOVWF  x65
051E8:  MOVLW  20
051EA:  MOVWF  x66
051EC:  MOVLB  0
051EE:  CALL   1864
.................... 					}
051F2:  BRA    5212
051F4:  MOVLB  A
.................... 				else
.................... 					{
.................... 		    		wr_lcd(1,buf_tmp[x]);
051F6:  CLRF   03
051F8:  MOVF   x56,W
051FA:  ADDLW  64
051FC:  MOVWF  FE9
051FE:  MOVLW  08
05200:  ADDWFC 03,W
05202:  MOVWF  FEA
05204:  MOVFF  FEF,A66
05208:  MOVLW  01
0520A:  MOVWF  x65
0520C:  MOVLB  0
0520E:  CALL   1864
.................... 		    		}
.................... 		    	}
05212:  BRA    5232
05214:  MOVLB  A
.................... 		    else
.................... 		    	{
.................... 	    		wr_lcd(1,buf_tmp[x]);
05216:  CLRF   03
05218:  MOVF   x56,W
0521A:  ADDLW  64
0521C:  MOVWF  FE9
0521E:  MOVLW  08
05220:  ADDWFC 03,W
05222:  MOVWF  FEA
05224:  MOVFF  FEF,A66
05228:  MOVLW  01
0522A:  MOVWF  x65
0522C:  MOVLB  0
0522E:  CALL   1864
.................... 			    }
05232:  MOVLB  A
05234:  INCF   x56,F
05236:  BRA    51D4
.................... 			}
.................... 		}    
05238:  MOVLB  0
0523A:  RETURN 0
.................... }
.................... 
.................... 
.................... /*
.................... 	valorf = (float)variavel);
.................... 	ptr_buf = 0;
.................... 	if (tipo == 0)
.................... 		{
.................... 		valorf = (float)(mul_tc * valorf);
.................... 		valorf = (float)(valorf/pob(quantizacao));
.................... 		printf(put_disp,"%f",(float)(valorf));
.................... 		}
.................... 	else
.................... 		{
.................... 		if (quantizacao == 0)
.................... 			{
.................... 			printf(put_disp,"%ld",(int32)(variavel));
.................... 			if (ptr_buf < 4)
.................... 				{
.................... 				if (ptr_buf == 1)
.................... 					{
.................... 					buf_disp[3] = buf_disp[0];
.................... 					buf_disp[0] = '@';
.................... 					buf_disp[1] = '@';
.................... 					buf_disp[2] = '@';
.................... 					}
.................... 				else if (ptr_buf == 2)
.................... 					{
.................... 					buf_disp[2] = buf_disp[0];
.................... 					buf_disp[3] = buf_disp[1];
.................... 					buf_disp[0] = '@';
.................... 					buf_disp[1] = '@';
.................... 					}
.................... 				else if (ptr_buf == 3)
.................... 					{
.................... 					buf_disp[3] = buf_disp[2];
.................... 					buf_disp[2] = buf_disp[1];
.................... 					buf_disp[1] = buf_disp[0];
.................... 					buf_disp[0] = '@';
.................... 					}
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			valorf = (float)(valorf / pob(quantizacao));
.................... 			printf(put_disp,"%f",(float)(valorf));
.................... 			}
.................... 		}
.................... */
.................... 
.................... 
.................... 
.................... void xprint_display(char pos, int16 variavel,char inteiros, char decimais,char quantizacao, char tipo)	
.................... {
.................... 	word z;
.................... 	char x;
.................... 	char y;
.................... 	char decimal;
.................... 	int16 i;	
.................... 	float valorf;
.................... 
.................... 	decimal = decimais;			    
.................... 
.................... 	if (pos < 16)				// 12345678901234567890
.................... 		{
.................... 		lcd_gotoxy(pos,1);
.................... 		}						// 1              16  20
.................... 	else if(pos < 32)			// 12345678901234567890
.................... 		{
.................... 		pos = pos - 16;
.................... 		lcd_gotoxy(pos,2);
.................... 		}						// 21			  36  40
.................... 	else if(pos < 48)			// 1234567890123456xxxx
.................... 		{
.................... 		pos = pos - 32;
.................... 		lcd_gotoxy(pos,3);
.................... 		}						// 21             36  40 
.................... 	else						// 1234567890123456xxxx
.................... 		{
.................... 		pos = pos - 48;		 
.................... 		lcd_gotoxy(pos,4);
.................... 		}
.................... 	
.................... 	z = pob(quantizacao);
.................... 		
.................... 	if (tipo == 'C')
.................... 		{
.................... 		valorf = (float)(variavel);
.................... 		valorf = (float)(mul_tc * valorf);
.................... 		valorf = (float)(valorf / z);
.................... 		sprintf(buf_tmp,"%f",(float)(valorf));
.................... 
.................... //		printf(put_disp,"%f",(float)(valorf));
.................... 
.................... 		x = 0;
.................... 		z = 5;
.................... 		y = 0;
.................... 		while(true)
.................... 			{
.................... 			if (y == 5)
.................... 				{
.................... 			    wr_lcd(1,' ');
.................... 				break;
.................... 				}
.................... 			inteiros = buf_tmp[x++];
.................... 			if (inteiros == '.')
.................... 				{
.................... 				inteiros = ',';
.................... 				}
.................... 			
.................... 			if ((inteiros == '.') || (inteiros == ','))
.................... 				{
.................... 				z = 0;
.................... 				y = 0;
.................... 				}
.................... 			if ( ((inteiros > ('0' - 1)) && (inteiros < ('9' + 1)) ) || (inteiros == ',') )
.................... 				{
.................... 			    wr_lcd(1,inteiros);
.................... 			    y++;
.................... 			    if ((inteiros != '.') && (inteiros != ','))
.................... 			    	{
.................... 				    z++;
.................... 				    }
.................... 			    if (z == 2)
.................... 			    	{
.................... 				    wr_lcd(1,' ');
.................... 				    break;
.................... 				    }
.................... 			    }
.................... 			else
.................... 				{
.................... 				if (x == 1)
.................... 					{
.................... 				    wr_lcd(1,'0');
.................... 					}
.................... 				}
.................... 			}
.................... 			
.................... //		fprintf(modbus, "\r\n1-[%s, %f]\r\n",buf_tmp, valorf);
.................... //		sprintf(buf_tmp,"{%f}",(float)(valorf));
.................... //		fprintf(modbus, "\r\n2-[%s, %f]",buf_tmp, valorf);
.................... 		
.................... 		}
.................... 	else if(tipo == 'A')
.................... 		{
.................... 		valorf = (float)(variavel);
.................... 		valorf = (float)(valorf / z);
.................... //		printf(put_disp,"%f",(float)(valorf));
.................... 		sprintf(buf_tmp,"%f",(float)(valorf));
.................... 
.................... 		x = 0;
.................... 		z = 5;
.................... 		while(true)
.................... 			{
.................... 			inteiros = buf_tmp[x++];
.................... 			if ((inteiros == '.') || (inteiros == ','))
.................... 				{
.................... 				inteiros = '.';
.................... 				z = 0;
.................... 				}
.................... 			if ( ((inteiros > ('0' - 1)) && (inteiros < ('9' + 1)) ) || (inteiros == '.') )
.................... 				{
.................... 			    wr_lcd(1,inteiros);
.................... 			    if ((inteiros != '.') && (inteiros != ','))
.................... 			    	{
.................... 				    z++;
.................... 				    }
.................... 			    if (z == 3)
.................... 			    	{
.................... 				    break;
.................... 				    }
.................... 			    }
.................... 			}
.................... 		}
.................... 	else
.................... 		{
.................... 		i = variavel / z;
.................... 		binasc2(i);		/* saida em buf_tmp[0 a 4]*/
.................... 		for (x = 5 - inteiros; x < 5; x++)
.................... 			{
.................... 		    wr_lcd(1,buf_tmp[x]);
.................... 			}
.................... 		if (decimal != 0)
.................... 			{
.................... 			wr_lcd(1,',');
.................... 	    	i=(int16)(variavel % z);
.................... 	    	i=(int16)(i * 100 / z);
.................... 			binasc2(i);		/* saida em buf_tmp[0 a 4]*/
.................... 			for (x=3; x < 3 + decimal; x++)
.................... 				{
.................... 	    		wr_lcd(1,buf_tmp[x]);
.................... 				}
.................... 			}    
.................... 		}
.................... 	
.................... }
.................... 
.................... void displayd(char pos, int16 variavel,char status)	
.................... {
.................... 	if (pos < 16)				// 12345678901234567890
*
13214:  MOVLB  A
13216:  MOVF   x4B,W
13218:  SUBLW  0F
1321A:  BNC   1322E
.................... 		{
.................... 		lcd_gotoxy(pos,1);
1321C:  MOVFF  A4B,A62
13220:  MOVLW  01
13222:  MOVWF  x63
13224:  MOVLB  0
13226:  CALL   46C4
.................... 		}						// 1              16  20
1322A:  BRA    13278
1322C:  MOVLB  A
.................... 	else if(pos < 32)			// 12345678901234567890
1322E:  MOVF   x4B,W
13230:  SUBLW  1F
13232:  BNC   1324A
.................... 		{
.................... 		pos = pos - 16;
13234:  MOVLW  10
13236:  SUBWF  x4B,F
.................... 		lcd_gotoxy(pos,2);
13238:  MOVFF  A4B,A62
1323C:  MOVLW  02
1323E:  MOVWF  x63
13240:  MOVLB  0
13242:  CALL   46C4
.................... 		}						// 21			  36  40
13246:  BRA    13278
13248:  MOVLB  A
.................... 	else if(pos < 48)			// 1234567890123456xxxx
1324A:  MOVF   x4B,W
1324C:  SUBLW  2F
1324E:  BNC   13266
.................... 		{
.................... 		pos = pos - 32;
13250:  MOVLW  20
13252:  SUBWF  x4B,F
.................... 		lcd_gotoxy(pos,3);
13254:  MOVFF  A4B,A62
13258:  MOVLW  03
1325A:  MOVWF  x63
1325C:  MOVLB  0
1325E:  CALL   46C4
.................... 		}						// 21             36  40 
13262:  BRA    13278
13264:  MOVLB  A
.................... 	else						// 1234567890123456xxxx
.................... 		{
.................... 		pos = pos - 48;		 
13266:  MOVLW  30
13268:  SUBWF  x4B,F
.................... 		lcd_gotoxy(pos,4);
1326A:  MOVFF  A4B,A62
1326E:  MOVLW  04
13270:  MOVWF  x63
13272:  MOVLB  0
13274:  CALL   46C4
.................... 		}
.................... 	
.................... 	if (status == 'P')	
13278:  MOVLB  A
1327A:  MOVF   x4E,W
1327C:  SUBLW  50
1327E:  BNZ   1328C
.................... 		{
.................... 		if (programando == 1)
13280:  BTFSS  29.5
13282:  BRA    13288
.................... 			{
.................... 			pisca = 1;	
13284:  BSF    2A.0
.................... 			}
13286:  BRA    1328A
.................... 		else
.................... 			{
.................... 			pisca = 0;
13288:  BCF    2A.0
.................... 			}
.................... 		}
1328A:  BRA    1328E
.................... 	else
.................... 		{
.................... 		pisca = 0;
1328C:  BCF    2A.0
.................... 		}
.................... 	if (pisca == 1)
1328E:  BTFSS  2A.0
13290:  BRA    132BA
.................... 		{
.................... 		if (piscar == 1)
13292:  BTFSS  29.7
13294:  BRA    132A8
.................... 			{
.................... 		    wr_lcd(1,' ');
13296:  MOVLW  01
13298:  MOVWF  x65
1329A:  MOVLW  20
1329C:  MOVWF  x66
1329E:  MOVLB  0
132A0:  CALL   1864
.................... 			}
132A4:  BRA    132B6
132A6:  MOVLB  A
.................... 		else
.................... 			{
.................... 		    wr_lcd(1,'0');
132A8:  MOVLW  01
132AA:  MOVWF  x65
132AC:  MOVLW  30
132AE:  MOVWF  x66
132B0:  MOVLB  0
132B2:  CALL   1864
.................... 		   	}
.................... 		}
132B6:  BRA    132C8
132B8:  MOVLB  A
.................... 	else
.................... 	 	{
.................... 	    wr_lcd(1,'0');
132BA:  MOVLW  01
132BC:  MOVWF  x65
132BE:  MOVLW  30
132C0:  MOVWF  x66
132C2:  MOVLB  0
132C4:  CALL   1864
.................... 		}
.................... 	wr_lcd(1,',');
132C8:  MOVLW  01
132CA:  MOVLB  A
132CC:  MOVWF  x65
132CE:  MOVLW  2C
132D0:  MOVWF  x66
132D2:  MOVLB  0
132D4:  CALL   1864
.................... 	binasc2(variavel);		/* saida em buf_tmp[0 a 4]*/
132D8:  MOVFF  A4D,A63
132DC:  MOVFF  A4C,A62
132E0:  CALL   4F12
.................... 	if (pisca == 1)
132E4:  BTFSS  2A.0
132E6:  BRA    13330
.................... 		{
.................... 		if (piscar == 1)
132E8:  BTFSS  29.7
132EA:  BRA    1330E
.................... 			{
.................... 			wr_lcd(1,' ');
132EC:  MOVLW  01
132EE:  MOVLB  A
132F0:  MOVWF  x65
132F2:  MOVLW  20
132F4:  MOVWF  x66
132F6:  MOVLB  0
132F8:  CALL   1864
.................... 			wr_lcd(1,' ');
132FC:  MOVLW  01
132FE:  MOVLB  A
13300:  MOVWF  x65
13302:  MOVLW  20
13304:  MOVWF  x66
13306:  MOVLB  0
13308:  CALL   1864
.................... 			}
1330C:  BRA    1332E
.................... 		else
.................... 			{
.................... 	    	wr_lcd(1,buf_tmp[3]);
1330E:  MOVLW  01
13310:  MOVLB  A
13312:  MOVWF  x65
13314:  MOVFF  867,A66
13318:  MOVLB  0
1331A:  CALL   1864
.................... 	    	wr_lcd(1,buf_tmp[4]);
1331E:  MOVLW  01
13320:  MOVLB  A
13322:  MOVWF  x65
13324:  MOVFF  868,A66
13328:  MOVLB  0
1332A:  CALL   1864
.................... 	    	}
.................... 	    }
1332E:  BRA    13350
.................... 	else
.................... 	   	{
....................     	wr_lcd(1,buf_tmp[3]);
13330:  MOVLW  01
13332:  MOVLB  A
13334:  MOVWF  x65
13336:  MOVFF  867,A66
1333A:  MOVLB  0
1333C:  CALL   1864
....................     	wr_lcd(1,buf_tmp[4]);
13340:  MOVLW  01
13342:  MOVLB  A
13344:  MOVWF  x65
13346:  MOVFF  868,A66
1334A:  MOVLB  0
1334C:  CALL   1864
.................... 	    }
13350:  RETURN 0
.................... }
.................... 
.................... 
.................... //print_display(11,pot_exec_r,4,1,5,'C', 255);
.................... 
.................... void print_display(char pos, int16 variavel,char inteiros, char decimais,char quantizacao, char tipo , char mens)	
.................... {
.................... 	short menor_dez, menor_cem;
.................... 	word z;
.................... 	char x;
.................... 	char y;
.................... 	char decimal;
.................... 	int16 i;	
.................... 	float valorf;
.................... 	int16 aux_wlcd;
.................... 
.................... 	decimal = decimais;			    
*
0EB54:  MOVFF  A50,A59
.................... 
.................... 	if (pos < 16)				// 12345678901234567890
0EB58:  MOVLB  A
0EB5A:  MOVF   x4C,W
0EB5C:  SUBLW  0F
0EB5E:  BNC   EB72
.................... 		{
.................... 		lcd_gotoxy(pos,1);
0EB60:  MOVFF  A4C,A62
0EB64:  MOVLW  01
0EB66:  MOVWF  x63
0EB68:  MOVLB  0
0EB6A:  CALL   46C4
.................... 		}						// 1              16  20
0EB6E:  BRA    EBBC
0EB70:  MOVLB  A
.................... 	else if(pos < 32)			// 12345678901234567890
0EB72:  MOVF   x4C,W
0EB74:  SUBLW  1F
0EB76:  BNC   EB8E
.................... 		{
.................... 		pos = pos - 16;
0EB78:  MOVLW  10
0EB7A:  SUBWF  x4C,F
.................... 		lcd_gotoxy(pos,2);
0EB7C:  MOVFF  A4C,A62
0EB80:  MOVLW  02
0EB82:  MOVWF  x63
0EB84:  MOVLB  0
0EB86:  CALL   46C4
.................... 		}						// 21			  36  40
0EB8A:  BRA    EBBC
0EB8C:  MOVLB  A
.................... 	else if(pos < 48)			// 1234567890123456xxxx
0EB8E:  MOVF   x4C,W
0EB90:  SUBLW  2F
0EB92:  BNC   EBAA
.................... 		{
.................... 		pos = pos - 32;
0EB94:  MOVLW  20
0EB96:  SUBWF  x4C,F
.................... 		lcd_gotoxy(pos,3);
0EB98:  MOVFF  A4C,A62
0EB9C:  MOVLW  03
0EB9E:  MOVWF  x63
0EBA0:  MOVLB  0
0EBA2:  CALL   46C4
.................... 		}						// 21             36  40 
0EBA6:  BRA    EBBC
0EBA8:  MOVLB  A
.................... 	else						// 1234567890123456xxxx
.................... 		{
.................... 		pos = pos - 48;		 
0EBAA:  MOVLW  30
0EBAC:  SUBWF  x4C,F
.................... 		lcd_gotoxy(pos,4);
0EBAE:  MOVFF  A4C,A62
0EBB2:  MOVLW  04
0EBB4:  MOVWF  x63
0EBB6:  MOVLB  0
0EBB8:  CALL   46C4
.................... 		}
.................... 	
.................... 	z = pob(quantizacao);
0EBBC:  MOVFF  A51,A62
0EBC0:  CALL   4DFC
0EBC4:  MOVFF  02,A56
0EBC8:  MOVFF  01,A55
.................... 		
.................... 	if (tipo == 'C')
0EBCC:  MOVLB  A
0EBCE:  MOVF   x52,W
0EBD0:  SUBLW  43
0EBD2:  BTFSS  FD8.2
0EBD4:  GOTO   F48A
.................... 		{
.................... 		#if (com_rep == true)
.................... 			if (modo_rep == 1)
.................... 				{
.................... 				mul_tc = 1;
.................... 				}
.................... 		#endif			
.................... 		valorf = (float)(variavel);
0EBD8:  MOVFF  A4E,A7E
0EBDC:  MOVFF  A4D,A7D
0EBE0:  MOVLB  0
0EBE2:  CALL   2924
0EBE6:  MOVFF  03,A5F
0EBEA:  MOVFF  02,A5E
0EBEE:  MOVFF  01,A5D
0EBF2:  MOVFF  00,A5C
.................... 		valorf = (float)(mul_tc * valorf);
0EBF6:  MOVFF  351,A80
0EBFA:  MOVFF  350,A7F
0EBFE:  MOVFF  34F,A7E
0EC02:  MOVFF  34E,A7D
0EC06:  MOVFF  A5F,A84
0EC0A:  MOVFF  A5E,A83
0EC0E:  MOVFF  A5D,A82
0EC12:  MOVFF  A5C,A81
0EC16:  CALL   5306
0EC1A:  MOVFF  03,A5F
0EC1E:  MOVFF  02,A5E
0EC22:  MOVFF  01,A5D
0EC26:  MOVFF  00,A5C
.................... 		valorf = (float)(valorf / z);
0EC2A:  MOVFF  A56,A7E
0EC2E:  MOVFF  A55,A7D
0EC32:  CALL   2924
0EC36:  MOVFF  A5F,A83
0EC3A:  MOVFF  A5E,A82
0EC3E:  MOVFF  A5D,A81
0EC42:  MOVFF  A5C,A80
0EC46:  MOVFF  03,A87
0EC4A:  MOVFF  02,A86
0EC4E:  MOVFF  01,A85
0EC52:  MOVFF  00,A84
0EC56:  CALL   295A
0EC5A:  MOVFF  03,A5F
0EC5E:  MOVFF  02,A5E
0EC62:  MOVFF  01,A5D
0EC66:  MOVFF  00,A5C
.................... 
.................... 		menor_dez = false;
0EC6A:  MOVLB  A
0EC6C:  BCF    x54.0
.................... 		menor_cem = false;
0EC6E:  BCF    x54.1
.................... 		if (valorf < 10)
0EC70:  MOVFF  A5F,A83
0EC74:  MOVFF  A5E,A82
0EC78:  MOVFF  A5D,A81
0EC7C:  MOVFF  A5C,A80
0EC80:  CLRF   x87
0EC82:  CLRF   x86
0EC84:  MOVLW  20
0EC86:  MOVWF  x85
0EC88:  MOVLW  82
0EC8A:  MOVWF  x84
0EC8C:  MOVLB  0
0EC8E:  RCALL  E81E
0EC90:  BNC   EC98
.................... 			{
.................... 			menor_dez = true;
0EC92:  MOVLB  A
0EC94:  BSF    x54.0
.................... 			}
0EC96:  BRA    ECC0
.................... 		else if (valorf < 100)
0EC98:  MOVFF  A5F,A83
0EC9C:  MOVFF  A5E,A82
0ECA0:  MOVFF  A5D,A81
0ECA4:  MOVFF  A5C,A80
0ECA8:  MOVLB  A
0ECAA:  CLRF   x87
0ECAC:  CLRF   x86
0ECAE:  MOVLW  48
0ECB0:  MOVWF  x85
0ECB2:  MOVLW  85
0ECB4:  MOVWF  x84
0ECB6:  MOVLB  0
0ECB8:  RCALL  E81E
0ECBA:  BNC   ECC2
.................... 			{
.................... 			menor_cem = true;
0ECBC:  MOVLB  A
0ECBE:  BSF    x54.1
0ECC0:  MOVLB  0
.................... 			}
.................... 		if (menor_dez == true) 
0ECC2:  MOVLB  A
0ECC4:  BTFSS  x54.0
0ECC6:  BRA    ED58
.................... 			{
.................... 			decimais = 2;
0ECC8:  MOVLW  02
0ECCA:  MOVWF  x50
.................... 			if (mens != 255)
0ECCC:  INCFSZ x53,W
0ECCE:  BRA    ECD2
0ECD0:  BRA    ED2C
.................... 				{
.................... 				sprintf(buf_tmp,"%5.3f %s",(float)(valorf), tabela_unidades[mens]);
0ECD2:  MOVF   x53,W
0ECD4:  MULLW  05
0ECD6:  MOVF   FF3,W
0ECD8:  CLRF   03
0ECDA:  MOVWF  x62
0ECDC:  MOVLW  08
0ECDE:  MOVLB  8
0ECE0:  MOVWF  x8A
0ECE2:  MOVLW  64
0ECE4:  MOVWF  x89
0ECE6:  MOVLW  04
0ECE8:  MOVWF  FE9
0ECEA:  MOVFF  A5F,A66
0ECEE:  MOVFF  A5E,A65
0ECF2:  MOVFF  A5D,A64
0ECF6:  MOVFF  A5C,A63
0ECFA:  MOVLW  03
0ECFC:  MOVLB  A
0ECFE:  MOVWF  x67
0ED00:  MOVLB  0
0ED02:  RCALL  E8B8
0ED04:  MOVLW  20
0ED06:  MOVLB  A
0ED08:  MOVWF  x70
0ED0A:  MOVLB  0
0ED0C:  RCALL  E898
0ED0E:  MOVLW  BA
0ED10:  MOVWF  FF6
0ED12:  MOVLW  12
0ED14:  MOVWF  FF7
0ED16:  MOVLW  00
0ED18:  MOVWF  FF8
0ED1A:  MOVLB  A
0ED1C:  MOVF   x62,W
0ED1E:  ADDWF  FF6,F
0ED20:  MOVLW  00
0ED22:  ADDWFC FF7,F
0ED24:  MOVLB  0
0ED26:  RCALL  EA66
.................... 				}
0ED28:  BRA    ED54
0ED2A:  MOVLB  A
.................... 			else
.................... 				{
.................... 				sprintf(buf_tmp,"%5.3f",(float)(valorf));
0ED2C:  MOVLW  08
0ED2E:  MOVLB  8
0ED30:  MOVWF  x8A
0ED32:  MOVLW  64
0ED34:  MOVWF  x89
0ED36:  MOVLW  04
0ED38:  MOVWF  FE9
0ED3A:  MOVFF  A5F,A66
0ED3E:  MOVFF  A5E,A65
0ED42:  MOVFF  A5D,A64
0ED46:  MOVFF  A5C,A63
0ED4A:  MOVLW  03
0ED4C:  MOVLB  A
0ED4E:  MOVWF  x67
0ED50:  MOVLB  0
0ED52:  RCALL  E8B8
.................... 				}
.................... 			}
0ED54:  BRA    F288
0ED56:  MOVLB  A
.................... 		else if (menor_cem == true) 
0ED58:  BTFSS  x54.1
0ED5A:  BRA    EDEC
.................... 			{
.................... 			decimais = 1;
0ED5C:  MOVLW  01
0ED5E:  MOVWF  x50
.................... 			if (mens != 255)
0ED60:  INCFSZ x53,W
0ED62:  BRA    ED66
0ED64:  BRA    EDC0
.................... 				{
.................... 				sprintf(buf_tmp,"%4.1f %s",(float)(valorf), tabela_unidades[mens]);
0ED66:  MOVF   x53,W
0ED68:  MULLW  05
0ED6A:  MOVF   FF3,W
0ED6C:  CLRF   03
0ED6E:  MOVWF  x62
0ED70:  MOVLW  08
0ED72:  MOVLB  8
0ED74:  MOVWF  x8A
0ED76:  MOVLW  64
0ED78:  MOVWF  x89
0ED7A:  MOVLW  03
0ED7C:  MOVWF  FE9
0ED7E:  MOVFF  A5F,A66
0ED82:  MOVFF  A5E,A65
0ED86:  MOVFF  A5D,A64
0ED8A:  MOVFF  A5C,A63
0ED8E:  MOVLW  01
0ED90:  MOVLB  A
0ED92:  MOVWF  x67
0ED94:  MOVLB  0
0ED96:  RCALL  E8B8
0ED98:  MOVLW  20
0ED9A:  MOVLB  A
0ED9C:  MOVWF  x70
0ED9E:  MOVLB  0
0EDA0:  RCALL  E898
0EDA2:  MOVLW  BA
0EDA4:  MOVWF  FF6
0EDA6:  MOVLW  12
0EDA8:  MOVWF  FF7
0EDAA:  MOVLW  00
0EDAC:  MOVWF  FF8
0EDAE:  MOVLB  A
0EDB0:  MOVF   x62,W
0EDB2:  ADDWF  FF6,F
0EDB4:  MOVLW  00
0EDB6:  ADDWFC FF7,F
0EDB8:  MOVLB  0
0EDBA:  RCALL  EA66
.................... 				}
0EDBC:  BRA    EDE8
0EDBE:  MOVLB  A
.................... 			else
.................... 				{
.................... 				sprintf(buf_tmp,"%4.1f",(float)(valorf));
0EDC0:  MOVLW  08
0EDC2:  MOVLB  8
0EDC4:  MOVWF  x8A
0EDC6:  MOVLW  64
0EDC8:  MOVWF  x89
0EDCA:  MOVLW  03
0EDCC:  MOVWF  FE9
0EDCE:  MOVFF  A5F,A66
0EDD2:  MOVFF  A5E,A65
0EDD6:  MOVFF  A5D,A64
0EDDA:  MOVFF  A5C,A63
0EDDE:  MOVLW  01
0EDE0:  MOVLB  A
0EDE2:  MOVWF  x67
0EDE4:  MOVLB  0
0EDE6:  RCALL  E8B8
.................... 				}
.................... 			}
0EDE8:  BRA    F288
0EDEA:  MOVLB  A
.................... 		else			
.................... 			{
.................... 			if (inteiros == 5)
0EDEC:  MOVF   x4F,W
0EDEE:  SUBLW  05
0EDF0:  BTFSS  FD8.2
0EDF2:  BRA    EF10
.................... 				{
.................... 				if (decimais == 1)
0EDF4:  DECFSZ x50,W
0EDF6:  BRA    EE84
.................... 					{
.................... 					if (mens != 255)
0EDF8:  INCFSZ x53,W
0EDFA:  BRA    EDFE
0EDFC:  BRA    EE58
.................... 						{
.................... 						sprintf(buf_tmp,"%6.1f %s",(float)(valorf), tabela_unidades[mens]);
0EDFE:  MOVF   x53,W
0EE00:  MULLW  05
0EE02:  MOVF   FF3,W
0EE04:  CLRF   03
0EE06:  MOVWF  x62
0EE08:  MOVLW  08
0EE0A:  MOVLB  8
0EE0C:  MOVWF  x8A
0EE0E:  MOVLW  64
0EE10:  MOVWF  x89
0EE12:  MOVLW  05
0EE14:  MOVWF  FE9
0EE16:  MOVFF  A5F,A66
0EE1A:  MOVFF  A5E,A65
0EE1E:  MOVFF  A5D,A64
0EE22:  MOVFF  A5C,A63
0EE26:  MOVLW  01
0EE28:  MOVLB  A
0EE2A:  MOVWF  x67
0EE2C:  MOVLB  0
0EE2E:  RCALL  E8B8
0EE30:  MOVLW  20
0EE32:  MOVLB  A
0EE34:  MOVWF  x70
0EE36:  MOVLB  0
0EE38:  RCALL  E898
0EE3A:  MOVLW  BA
0EE3C:  MOVWF  FF6
0EE3E:  MOVLW  12
0EE40:  MOVWF  FF7
0EE42:  MOVLW  00
0EE44:  MOVWF  FF8
0EE46:  MOVLB  A
0EE48:  MOVF   x62,W
0EE4A:  ADDWF  FF6,F
0EE4C:  MOVLW  00
0EE4E:  ADDWFC FF7,F
0EE50:  MOVLB  0
0EE52:  RCALL  EA66
.................... 						}
0EE54:  BRA    EE80
0EE56:  MOVLB  A
.................... 					else
.................... 						{
.................... 						sprintf(buf_tmp,"%6.1f",(float)(valorf));
0EE58:  MOVLW  08
0EE5A:  MOVLB  8
0EE5C:  MOVWF  x8A
0EE5E:  MOVLW  64
0EE60:  MOVWF  x89
0EE62:  MOVLW  05
0EE64:  MOVWF  FE9
0EE66:  MOVFF  A5F,A66
0EE6A:  MOVFF  A5E,A65
0EE6E:  MOVFF  A5D,A64
0EE72:  MOVFF  A5C,A63
0EE76:  MOVLW  01
0EE78:  MOVLB  A
0EE7A:  MOVWF  x67
0EE7C:  MOVLB  0
0EE7E:  RCALL  E8B8
.................... 						}
.................... 					}
0EE80:  BRA    EF0C
0EE82:  MOVLB  A
.................... 				else
.................... 					{
.................... 					if (mens != 255)
0EE84:  INCFSZ x53,W
0EE86:  BRA    EE8A
0EE88:  BRA    EEE4
.................... 						{
.................... 						sprintf(buf_tmp,"%7.2f %s",(float)(valorf), tabela_unidades[mens]);
0EE8A:  MOVF   x53,W
0EE8C:  MULLW  05
0EE8E:  MOVF   FF3,W
0EE90:  CLRF   03
0EE92:  MOVWF  x62
0EE94:  MOVLW  08
0EE96:  MOVLB  8
0EE98:  MOVWF  x8A
0EE9A:  MOVLW  64
0EE9C:  MOVWF  x89
0EE9E:  MOVLW  06
0EEA0:  MOVWF  FE9
0EEA2:  MOVFF  A5F,A66
0EEA6:  MOVFF  A5E,A65
0EEAA:  MOVFF  A5D,A64
0EEAE:  MOVFF  A5C,A63
0EEB2:  MOVLW  02
0EEB4:  MOVLB  A
0EEB6:  MOVWF  x67
0EEB8:  MOVLB  0
0EEBA:  RCALL  E8B8
0EEBC:  MOVLW  20
0EEBE:  MOVLB  A
0EEC0:  MOVWF  x70
0EEC2:  MOVLB  0
0EEC4:  RCALL  E898
0EEC6:  MOVLW  BA
0EEC8:  MOVWF  FF6
0EECA:  MOVLW  12
0EECC:  MOVWF  FF7
0EECE:  MOVLW  00
0EED0:  MOVWF  FF8
0EED2:  MOVLB  A
0EED4:  MOVF   x62,W
0EED6:  ADDWF  FF6,F
0EED8:  MOVLW  00
0EEDA:  ADDWFC FF7,F
0EEDC:  MOVLB  0
0EEDE:  RCALL  EA66
.................... 						}
0EEE0:  BRA    EF0C
0EEE2:  MOVLB  A
.................... 					else
.................... 						{
.................... 						sprintf(buf_tmp,"%7.2f",(float)(valorf));
0EEE4:  MOVLW  08
0EEE6:  MOVLB  8
0EEE8:  MOVWF  x8A
0EEEA:  MOVLW  64
0EEEC:  MOVWF  x89
0EEEE:  MOVLW  06
0EEF0:  MOVWF  FE9
0EEF2:  MOVFF  A5F,A66
0EEF6:  MOVFF  A5E,A65
0EEFA:  MOVFF  A5D,A64
0EEFE:  MOVFF  A5C,A63
0EF02:  MOVLW  02
0EF04:  MOVLB  A
0EF06:  MOVWF  x67
0EF08:  MOVLB  0
0EF0A:  RCALL  E8B8
.................... 						}
.................... 					}
.................... 				}
0EF0C:  BRA    F288
0EF0E:  MOVLB  A
.................... 			else if (inteiros == 4)
0EF10:  MOVF   x4F,W
0EF12:  SUBLW  04
0EF14:  BTFSS  FD8.2
0EF16:  BRA    F0CA
.................... 				{
.................... 				if (decimais == 0)
0EF18:  MOVF   x50,F
0EF1A:  BNZ   EFAC
.................... 					{
.................... 					aux_wlcd = (word)(valorf);
0EF1C:  MOVFF  A5F,A7C
0EF20:  MOVFF  A5E,A7B
0EF24:  MOVFF  A5D,A7A
0EF28:  MOVFF  A5C,A79
0EF2C:  MOVLB  0
0EF2E:  CALL   53FC
0EF32:  MOVFF  02,A61
0EF36:  MOVFF  01,A60
.................... 					if (mens != 255)
0EF3A:  MOVLB  A
0EF3C:  INCFSZ x53,W
0EF3E:  BRA    EF42
0EF40:  BRA    EF8E
.................... 						{
.................... 						sprintf(buf_tmp,"%lu %s",aux_wlcd, tabela_unidades[mens]);
0EF42:  MOVF   x53,W
0EF44:  MULLW  05
0EF46:  MOVF   FF3,W
0EF48:  CLRF   03
0EF4A:  MOVWF  x62
0EF4C:  MOVLW  08
0EF4E:  MOVLB  8
0EF50:  MOVWF  x8A
0EF52:  MOVLW  64
0EF54:  MOVWF  x89
0EF56:  MOVLW  10
0EF58:  MOVWF  FE9
0EF5A:  MOVFF  A61,A64
0EF5E:  MOVFF  A60,A63
0EF62:  MOVLB  0
0EF64:  RCALL  EA8E
0EF66:  MOVLW  20
0EF68:  MOVLB  A
0EF6A:  MOVWF  x70
0EF6C:  MOVLB  0
0EF6E:  RCALL  E898
0EF70:  MOVLW  BA
0EF72:  MOVWF  FF6
0EF74:  MOVLW  12
0EF76:  MOVWF  FF7
0EF78:  MOVLW  00
0EF7A:  MOVWF  FF8
0EF7C:  MOVLB  A
0EF7E:  MOVF   x62,W
0EF80:  ADDWF  FF6,F
0EF82:  MOVLW  00
0EF84:  ADDWFC FF7,F
0EF86:  MOVLB  0
0EF88:  RCALL  EA66
.................... 						}
0EF8A:  BRA    EFA8
0EF8C:  MOVLB  A
.................... 					else
.................... 						{
.................... 						sprintf(buf_tmp,"%lu",aux_wlcd);
0EF8E:  MOVLW  08
0EF90:  MOVLB  8
0EF92:  MOVWF  x8A
0EF94:  MOVLW  64
0EF96:  MOVWF  x89
0EF98:  MOVLW  10
0EF9A:  MOVWF  FE9
0EF9C:  MOVFF  A61,A64
0EFA0:  MOVFF  A60,A63
0EFA4:  MOVLB  0
0EFA6:  RCALL  EA8E
.................... 						}
.................... 					}
0EFA8:  BRA    F0C6
0EFAA:  MOVLB  A
.................... 				else if (decimais == 1)
0EFAC:  DECFSZ x50,W
0EFAE:  BRA    F03C
.................... 					{
.................... 					if (mens != 255)
0EFB0:  INCFSZ x53,W
0EFB2:  BRA    EFB6
0EFB4:  BRA    F010
.................... 						{
.................... 						sprintf(buf_tmp,"%5.1f %s",(float)(valorf), tabela_unidades[mens]);
0EFB6:  MOVF   x53,W
0EFB8:  MULLW  05
0EFBA:  MOVF   FF3,W
0EFBC:  CLRF   03
0EFBE:  MOVWF  x62
0EFC0:  MOVLW  08
0EFC2:  MOVLB  8
0EFC4:  MOVWF  x8A
0EFC6:  MOVLW  64
0EFC8:  MOVWF  x89
0EFCA:  MOVLW  04
0EFCC:  MOVWF  FE9
0EFCE:  MOVFF  A5F,A66
0EFD2:  MOVFF  A5E,A65
0EFD6:  MOVFF  A5D,A64
0EFDA:  MOVFF  A5C,A63
0EFDE:  MOVLW  01
0EFE0:  MOVLB  A
0EFE2:  MOVWF  x67
0EFE4:  MOVLB  0
0EFE6:  RCALL  E8B8
0EFE8:  MOVLW  20
0EFEA:  MOVLB  A
0EFEC:  MOVWF  x70
0EFEE:  MOVLB  0
0EFF0:  RCALL  E898
0EFF2:  MOVLW  BA
0EFF4:  MOVWF  FF6
0EFF6:  MOVLW  12
0EFF8:  MOVWF  FF7
0EFFA:  MOVLW  00
0EFFC:  MOVWF  FF8
0EFFE:  MOVLB  A
0F000:  MOVF   x62,W
0F002:  ADDWF  FF6,F
0F004:  MOVLW  00
0F006:  ADDWFC FF7,F
0F008:  MOVLB  0
0F00A:  RCALL  EA66
.................... 						}
0F00C:  BRA    F038
0F00E:  MOVLB  A
.................... 					else
.................... 						{
.................... 						sprintf(buf_tmp,"%5.1f",(float)(valorf));
0F010:  MOVLW  08
0F012:  MOVLB  8
0F014:  MOVWF  x8A
0F016:  MOVLW  64
0F018:  MOVWF  x89
0F01A:  MOVLW  04
0F01C:  MOVWF  FE9
0F01E:  MOVFF  A5F,A66
0F022:  MOVFF  A5E,A65
0F026:  MOVFF  A5D,A64
0F02A:  MOVFF  A5C,A63
0F02E:  MOVLW  01
0F030:  MOVLB  A
0F032:  MOVWF  x67
0F034:  MOVLB  0
0F036:  RCALL  E8B8
.................... 						}
.................... 					}
0F038:  BRA    F0C6
0F03A:  MOVLB  A
.................... 				else
.................... 					{
.................... 					if (mens != 255)
0F03C:  INCFSZ x53,W
0F03E:  BRA    F042
0F040:  BRA    F09C
.................... 						{
.................... 						sprintf(buf_tmp,"%6.2f %s",(float)(valorf), tabela_unidades[mens]);
0F042:  MOVF   x53,W
0F044:  MULLW  05
0F046:  MOVF   FF3,W
0F048:  CLRF   03
0F04A:  MOVWF  x62
0F04C:  MOVLW  08
0F04E:  MOVLB  8
0F050:  MOVWF  x8A
0F052:  MOVLW  64
0F054:  MOVWF  x89
0F056:  MOVLW  05
0F058:  MOVWF  FE9
0F05A:  MOVFF  A5F,A66
0F05E:  MOVFF  A5E,A65
0F062:  MOVFF  A5D,A64
0F066:  MOVFF  A5C,A63
0F06A:  MOVLW  02
0F06C:  MOVLB  A
0F06E:  MOVWF  x67
0F070:  MOVLB  0
0F072:  RCALL  E8B8
0F074:  MOVLW  20
0F076:  MOVLB  A
0F078:  MOVWF  x70
0F07A:  MOVLB  0
0F07C:  RCALL  E898
0F07E:  MOVLW  BA
0F080:  MOVWF  FF6
0F082:  MOVLW  12
0F084:  MOVWF  FF7
0F086:  MOVLW  00
0F088:  MOVWF  FF8
0F08A:  MOVLB  A
0F08C:  MOVF   x62,W
0F08E:  ADDWF  FF6,F
0F090:  MOVLW  00
0F092:  ADDWFC FF7,F
0F094:  MOVLB  0
0F096:  RCALL  EA66
.................... 						}
0F098:  BRA    F0C6
0F09A:  MOVLB  A
.................... 					else
.................... 						{
.................... 						sprintf(buf_tmp,"%6.2f",(float)(valorf));
0F09C:  MOVLW  08
0F09E:  MOVLB  8
0F0A0:  MOVWF  x8A
0F0A2:  MOVLW  64
0F0A4:  MOVWF  x89
0F0A6:  MOVLW  05
0F0A8:  MOVWF  FE9
0F0AA:  MOVFF  A5F,A66
0F0AE:  MOVFF  A5E,A65
0F0B2:  MOVFF  A5D,A64
0F0B6:  MOVFF  A5C,A63
0F0BA:  MOVLW  02
0F0BC:  MOVLB  A
0F0BE:  MOVWF  x67
0F0C0:  MOVLB  0
0F0C2:  CALL   E8B8
.................... 						}
.................... 					}
.................... 				}
0F0C6:  BRA    F288
0F0C8:  MOVLB  A
.................... 			else if (inteiros == 6)
0F0CA:  MOVF   x4F,W
0F0CC:  SUBLW  06
0F0CE:  BTFSS  FD8.2
0F0D0:  BRA    F1F6
.................... 				{
.................... 				if (decimais == 1)
0F0D2:  DECFSZ x50,W
0F0D4:  BRA    F168
.................... 					{
.................... 					if (mens != 255)
0F0D6:  INCFSZ x53,W
0F0D8:  BRA    F0DC
0F0DA:  BRA    F13A
.................... 						{
.................... 						sprintf(buf_tmp,"%6.1f %s",(float)(valorf), tabela_unidades[mens]);
0F0DC:  MOVF   x53,W
0F0DE:  MULLW  05
0F0E0:  MOVF   FF3,W
0F0E2:  CLRF   03
0F0E4:  MOVWF  x62
0F0E6:  MOVLW  08
0F0E8:  MOVLB  8
0F0EA:  MOVWF  x8A
0F0EC:  MOVLW  64
0F0EE:  MOVWF  x89
0F0F0:  MOVLW  05
0F0F2:  MOVWF  FE9
0F0F4:  MOVFF  A5F,A66
0F0F8:  MOVFF  A5E,A65
0F0FC:  MOVFF  A5D,A64
0F100:  MOVFF  A5C,A63
0F104:  MOVLW  01
0F106:  MOVLB  A
0F108:  MOVWF  x67
0F10A:  MOVLB  0
0F10C:  CALL   E8B8
0F110:  MOVLW  20
0F112:  MOVLB  A
0F114:  MOVWF  x70
0F116:  MOVLB  0
0F118:  CALL   E898
0F11C:  MOVLW  BA
0F11E:  MOVWF  FF6
0F120:  MOVLW  12
0F122:  MOVWF  FF7
0F124:  MOVLW  00
0F126:  MOVWF  FF8
0F128:  MOVLB  A
0F12A:  MOVF   x62,W
0F12C:  ADDWF  FF6,F
0F12E:  MOVLW  00
0F130:  ADDWFC FF7,F
0F132:  MOVLB  0
0F134:  RCALL  EA66
.................... 						}
0F136:  BRA    F164
0F138:  MOVLB  A
.................... 					else
.................... 						{
.................... 						sprintf(buf_tmp,"%6.1f",(float)(valorf));
0F13A:  MOVLW  08
0F13C:  MOVLB  8
0F13E:  MOVWF  x8A
0F140:  MOVLW  64
0F142:  MOVWF  x89
0F144:  MOVLW  05
0F146:  MOVWF  FE9
0F148:  MOVFF  A5F,A66
0F14C:  MOVFF  A5E,A65
0F150:  MOVFF  A5D,A64
0F154:  MOVFF  A5C,A63
0F158:  MOVLW  01
0F15A:  MOVLB  A
0F15C:  MOVWF  x67
0F15E:  MOVLB  0
0F160:  CALL   E8B8
.................... 						}
.................... 					}
0F164:  BRA    F1F2
0F166:  MOVLB  A
.................... 				else
.................... 					{
.................... 					if (mens != 255)
0F168:  INCFSZ x53,W
0F16A:  BRA    F16E
0F16C:  BRA    F1CA
.................... 						{
.................... 						sprintf(buf_tmp,"%7.0f %s",(float)(valorf), tabela_unidades[mens]);
0F16E:  MOVF   x53,W
0F170:  MULLW  05
0F172:  MOVF   FF3,W
0F174:  CLRF   03
0F176:  MOVWF  x62
0F178:  MOVLW  08
0F17A:  MOVLB  8
0F17C:  MOVWF  x8A
0F17E:  MOVLW  64
0F180:  MOVWF  x89
0F182:  MOVLW  06
0F184:  MOVWF  FE9
0F186:  MOVFF  A5F,A66
0F18A:  MOVFF  A5E,A65
0F18E:  MOVFF  A5D,A64
0F192:  MOVFF  A5C,A63
0F196:  MOVLB  A
0F198:  CLRF   x67
0F19A:  MOVLB  0
0F19C:  CALL   E8B8
0F1A0:  MOVLW  20
0F1A2:  MOVLB  A
0F1A4:  MOVWF  x70
0F1A6:  MOVLB  0
0F1A8:  CALL   E898
0F1AC:  MOVLW  BA
0F1AE:  MOVWF  FF6
0F1B0:  MOVLW  12
0F1B2:  MOVWF  FF7
0F1B4:  MOVLW  00
0F1B6:  MOVWF  FF8
0F1B8:  MOVLB  A
0F1BA:  MOVF   x62,W
0F1BC:  ADDWF  FF6,F
0F1BE:  MOVLW  00
0F1C0:  ADDWFC FF7,F
0F1C2:  MOVLB  0
0F1C4:  RCALL  EA66
.................... 						}
0F1C6:  BRA    F1F2
0F1C8:  MOVLB  A
.................... 					else
.................... 						{
.................... 						sprintf(buf_tmp,"%7.0f",(float)(valorf));
0F1CA:  MOVLW  08
0F1CC:  MOVLB  8
0F1CE:  MOVWF  x8A
0F1D0:  MOVLW  64
0F1D2:  MOVWF  x89
0F1D4:  MOVLW  06
0F1D6:  MOVWF  FE9
0F1D8:  MOVFF  A5F,A66
0F1DC:  MOVFF  A5E,A65
0F1E0:  MOVFF  A5D,A64
0F1E4:  MOVFF  A5C,A63
0F1E8:  MOVLB  A
0F1EA:  CLRF   x67
0F1EC:  MOVLB  0
0F1EE:  CALL   E8B8
.................... 						}
.................... 					}
.................... 				}
0F1F2:  BRA    F288
0F1F4:  MOVLB  A
.................... 			else
.................... 				{
.................... 				decimais = 2;
0F1F6:  MOVLW  02
0F1F8:  MOVWF  x50
.................... 				if (mens != 255)
0F1FA:  INCFSZ x53,W
0F1FC:  BRA    F200
0F1FE:  BRA    F25E
.................... 					{
.................... 					sprintf(buf_tmp,"%7.2f %s",(float)(valorf), tabela_unidades[mens]);
0F200:  MOVF   x53,W
0F202:  MULLW  05
0F204:  MOVF   FF3,W
0F206:  CLRF   03
0F208:  MOVWF  x62
0F20A:  MOVLW  08
0F20C:  MOVLB  8
0F20E:  MOVWF  x8A
0F210:  MOVLW  64
0F212:  MOVWF  x89
0F214:  MOVLW  06
0F216:  MOVWF  FE9
0F218:  MOVFF  A5F,A66
0F21C:  MOVFF  A5E,A65
0F220:  MOVFF  A5D,A64
0F224:  MOVFF  A5C,A63
0F228:  MOVLW  02
0F22A:  MOVLB  A
0F22C:  MOVWF  x67
0F22E:  MOVLB  0
0F230:  CALL   E8B8
0F234:  MOVLW  20
0F236:  MOVLB  A
0F238:  MOVWF  x70
0F23A:  MOVLB  0
0F23C:  CALL   E898
0F240:  MOVLW  BA
0F242:  MOVWF  FF6
0F244:  MOVLW  12
0F246:  MOVWF  FF7
0F248:  MOVLW  00
0F24A:  MOVWF  FF8
0F24C:  MOVLB  A
0F24E:  MOVF   x62,W
0F250:  ADDWF  FF6,F
0F252:  MOVLW  00
0F254:  ADDWFC FF7,F
0F256:  MOVLB  0
0F258:  RCALL  EA66
.................... 					}
0F25A:  BRA    F288
0F25C:  MOVLB  A
.................... 				else
.................... 					{
.................... 					sprintf(buf_tmp,"%7.2f",(float)(valorf));
0F25E:  MOVLW  08
0F260:  MOVLB  8
0F262:  MOVWF  x8A
0F264:  MOVLW  64
0F266:  MOVWF  x89
0F268:  MOVLW  06
0F26A:  MOVWF  FE9
0F26C:  MOVFF  A5F,A66
0F270:  MOVFF  A5E,A65
0F274:  MOVFF  A5D,A64
0F278:  MOVFF  A5C,A63
0F27C:  MOVLW  02
0F27E:  MOVLB  A
0F280:  MOVWF  x67
0F282:  MOVLB  0
0F284:  CALL   E8B8
.................... 					}
.................... 				}
.................... 			}
.................... 		
.................... 
.................... 		x = 0;
0F288:  MOVLB  A
0F28A:  CLRF   x57
.................... 		y = 0;
0F28C:  CLRF   x58
.................... 		while(true)
.................... 			{
.................... 			inteiros = buf_tmp[x++];
0F28E:  MOVF   x57,W
0F290:  INCF   x57,F
0F292:  CLRF   03
0F294:  ADDLW  64
0F296:  MOVWF  FE9
0F298:  MOVLW  08
0F29A:  ADDWFC 03,W
0F29C:  MOVWF  FEA
0F29E:  MOVFF  FEF,A4F
.................... 			if (inteiros != 0)
0F2A2:  MOVF   x4F,F
0F2A4:  BTFSC  FD8.2
0F2A6:  BRA    F484
.................... 				{
.................... 				if ((inteiros > ('0' - 1)) && (inteiros < ('9' + 1)))
0F2A8:  MOVF   x4F,W
0F2AA:  SUBLW  2F
0F2AC:  BC    F2B6
0F2AE:  MOVF   x4F,W
0F2B0:  SUBLW  39
0F2B2:  BNC   F2B6
.................... 					{
.................... 					y++;
0F2B4:  INCF   x58,F
.................... 					}
.................... 				if (decimais != 0)
0F2B6:  MOVF   x50,F
0F2B8:  BTFSC  FD8.2
0F2BA:  BRA    F472
.................... 					{
.................... 					if (inteiros == '.')
0F2BC:  MOVF   x4F,W
0F2BE:  SUBLW  2E
0F2C0:  BTFSS  FD8.2
0F2C2:  BRA    F45C
.................... 						{
.................... 						inteiros = ',';
0F2C4:  MOVLW  2C
0F2C6:  MOVWF  x4F
.................... 						if ((y == 0) || (y == 1))
0F2C8:  MOVF   x58,F
0F2CA:  BZ    F2D0
0F2CC:  DECFSZ x58,W
0F2CE:  BRA    F45C
.................... 							{
.................... 							if (y == 0)
0F2D0:  MOVF   x58,F
0F2D2:  BNZ   F2E6
.................... 								{
.................... 							    wr_lcd(1,'0');
0F2D4:  MOVLW  01
0F2D6:  MOVWF  x65
0F2D8:  MOVLW  30
0F2DA:  MOVWF  x66
0F2DC:  MOVLB  0
0F2DE:  CALL   1864
.................... 								}
0F2E2:  BRA    F308
0F2E4:  MOVLB  A
.................... 							else
.................... 								{
.................... 								inteiros = buf_tmp[x-2];
0F2E6:  MOVLW  02
0F2E8:  SUBWF  x57,W
0F2EA:  CLRF   03
0F2EC:  ADDLW  64
0F2EE:  MOVWF  FE9
0F2F0:  MOVLW  08
0F2F2:  ADDWFC 03,W
0F2F4:  MOVWF  FEA
0F2F6:  MOVFF  FEF,A4F
.................... 							    wr_lcd(1,inteiros);
0F2FA:  MOVLW  01
0F2FC:  MOVWF  x65
0F2FE:  MOVFF  A4F,A66
0F302:  MOVLB  0
0F304:  CALL   1864
.................... 								}
.................... 						    wr_lcd(1,',');
0F308:  MOVLW  01
0F30A:  MOVLB  A
0F30C:  MOVWF  x65
0F30E:  MOVLW  2C
0F310:  MOVWF  x66
0F312:  MOVLB  0
0F314:  CALL   1864
.................... 							inteiros = buf_tmp[x++];
0F318:  MOVLB  A
0F31A:  MOVF   x57,W
0F31C:  INCF   x57,F
0F31E:  CLRF   03
0F320:  ADDLW  64
0F322:  MOVWF  FE9
0F324:  MOVLW  08
0F326:  ADDWFC 03,W
0F328:  MOVWF  FEA
0F32A:  MOVFF  FEF,A4F
.................... 							if (inteiros == ' ')
0F32E:  MOVF   x4F,W
0F330:  SUBLW  20
0F332:  BNZ   F36A
.................... 								{
.................... 							    wr_lcd(1,'0');
0F334:  MOVLW  01
0F336:  MOVWF  x65
0F338:  MOVLW  30
0F33A:  MOVWF  x66
0F33C:  MOVLB  0
0F33E:  CALL   1864
.................... 						    	wr_lcd(1,' ');
0F342:  MOVLW  01
0F344:  MOVLB  A
0F346:  MOVWF  x65
0F348:  MOVLW  20
0F34A:  MOVWF  x66
0F34C:  MOVLB  0
0F34E:  CALL   1864
.................... 								if (menor_cem == false)
0F352:  MOVLB  A
0F354:  BTFSC  x54.1
0F356:  BRA    F368
.................... 									{
.................... 							    	wr_lcd(1,' ');
0F358:  MOVLW  01
0F35A:  MOVWF  x65
0F35C:  MOVLW  20
0F35E:  MOVWF  x66
0F360:  MOVLB  0
0F362:  CALL   1864
0F366:  MOVLB  A
.................... 							    	}
.................... 								}
0F368:  BRA    F3C6
.................... 							else
.................... 								{
.................... 							    wr_lcd(1,inteiros);
0F36A:  MOVLW  01
0F36C:  MOVWF  x65
0F36E:  MOVFF  A4F,A66
0F372:  MOVLB  0
0F374:  CALL   1864
.................... 								inteiros = buf_tmp[x++];
0F378:  MOVLB  A
0F37A:  MOVF   x57,W
0F37C:  INCF   x57,F
0F37E:  CLRF   03
0F380:  ADDLW  64
0F382:  MOVWF  FE9
0F384:  MOVLW  08
0F386:  ADDWFC 03,W
0F388:  MOVWF  FEA
0F38A:  MOVFF  FEF,A4F
.................... 						    	wr_lcd(1,inteiros);
0F38E:  MOVLW  01
0F390:  MOVWF  x65
0F392:  MOVFF  A4F,A66
0F396:  MOVLB  0
0F398:  CALL   1864
.................... 								if (menor_cem == false)
0F39C:  MOVLB  A
0F39E:  BTFSC  x54.1
0F3A0:  BRA    F3C6
.................... 									{
.................... 									inteiros = buf_tmp[x++];
0F3A2:  MOVF   x57,W
0F3A4:  INCF   x57,F
0F3A6:  CLRF   03
0F3A8:  ADDLW  64
0F3AA:  MOVWF  FE9
0F3AC:  MOVLW  08
0F3AE:  ADDWFC 03,W
0F3B0:  MOVWF  FEA
0F3B2:  MOVFF  FEF,A4F
.................... 							    	wr_lcd(1,inteiros);
0F3B6:  MOVLW  01
0F3B8:  MOVWF  x65
0F3BA:  MOVFF  A4F,A66
0F3BE:  MOVLB  0
0F3C0:  CALL   1864
0F3C4:  MOVLB  A
.................... 							    	}
.................... 							    }
.................... 						    if (mens != 255)
0F3C6:  INCFSZ x53,W
0F3C8:  BRA    F3CC
0F3CA:  BRA    F45A
.................... 						    	{
.................... 								while(true)
.................... 									{
.................... 									inteiros = buf_tmp[x++];
0F3CC:  MOVF   x57,W
0F3CE:  INCF   x57,F
0F3D0:  CLRF   03
0F3D2:  ADDLW  64
0F3D4:  MOVWF  FE9
0F3D6:  MOVLW  08
0F3D8:  ADDWFC 03,W
0F3DA:  MOVWF  FEA
0F3DC:  MOVFF  FEF,A4F
.................... 									if (inteiros != 0)
0F3E0:  MOVF   x4F,F
0F3E2:  BZ    F454
.................... 										{
.................... 										if (inteiros == ' ')
0F3E4:  MOVF   x4F,W
0F3E6:  SUBLW  20
0F3E8:  BNZ   F44E
.................... 											{
.................... 										    wr_lcd(1,inteiros);
0F3EA:  MOVLW  01
0F3EC:  MOVWF  x65
0F3EE:  MOVFF  A4F,A66
0F3F2:  MOVLB  0
0F3F4:  CALL   1864
.................... 											while(true)
.................... 												{
.................... 												inteiros = buf_tmp[x++];
0F3F8:  MOVLB  A
0F3FA:  MOVF   x57,W
0F3FC:  INCF   x57,F
0F3FE:  CLRF   03
0F400:  ADDLW  64
0F402:  MOVWF  FE9
0F404:  MOVLW  08
0F406:  ADDWFC 03,W
0F408:  MOVWF  FEA
0F40A:  MOVFF  FEF,A4F
.................... 												if (inteiros != 0)
0F40E:  MOVF   x4F,F
0F410:  BZ    F42A
.................... 													{
.................... 													if (inteiros != '0')
0F412:  MOVF   x4F,W
0F414:  SUBLW  30
0F416:  BZ    F428
.................... 														{
.................... 													    wr_lcd(1,inteiros);
0F418:  MOVLW  01
0F41A:  MOVWF  x65
0F41C:  MOVFF  A4F,A66
0F420:  MOVLB  0
0F422:  CALL   1864
0F426:  MOVLB  A
.................... 													    }
.................... 													}		
0F428:  BRA    F44C
.................... 												else
.................... 													{
.................... 												    wr_lcd(1,' ');
0F42A:  MOVLW  01
0F42C:  MOVWF  x65
0F42E:  MOVLW  20
0F430:  MOVWF  x66
0F432:  MOVLB  0
0F434:  CALL   1864
.................... 												    wr_lcd(1,' ');
0F438:  MOVLW  01
0F43A:  MOVLB  A
0F43C:  MOVWF  x65
0F43E:  MOVLW  20
0F440:  MOVWF  x66
0F442:  MOVLB  0
0F444:  CALL   1864
.................... 													break;
0F448:  BRA    F450
0F44A:  MOVLB  A
.................... 													}
0F44C:  BRA    F3FA
0F44E:  MOVLB  0
.................... 												}	
.................... 											}
.................... 										}
0F450:  BRA    F456
0F452:  MOVLB  A
.................... 									else
.................... 										{
.................... 										break;
0F454:  BRA    F45A
.................... 										}
0F456:  MOVLB  A
0F458:  BRA    F3CC
.................... 									}	    	
.................... 							    }
.................... 						    break;
0F45A:  BRA    F488
.................... 							}
.................... 						}
.................... 					if (menor_dez == false)
0F45C:  BTFSC  x54.0
0F45E:  BRA    F470
.................... 						{
.................... 					    wr_lcd(1,inteiros);
0F460:  MOVLW  01
0F462:  MOVWF  x65
0F464:  MOVFF  A4F,A66
0F468:  MOVLB  0
0F46A:  CALL   1864
0F46E:  MOVLB  A
.................... 					    }
.................... 					}
0F470:  BRA    F482
.................... 				else
.................... 					{
.................... 				    wr_lcd(1,inteiros);
0F472:  MOVLW  01
0F474:  MOVWF  x65
0F476:  MOVFF  A4F,A66
0F47A:  MOVLB  0
0F47C:  CALL   1864
0F480:  MOVLB  A
.................... 					}
.................... 			    }
0F482:  BRA    F486
.................... 			else
.................... 				{
.................... 				break;
0F484:  BRA    F488
.................... 				}
0F486:  BRA    F28E
.................... 			}
.................... 		
.................... 		}
0F488:  BRA    F690
.................... 	else if(tipo == 'A')
0F48A:  MOVF   x52,W
0F48C:  SUBLW  41
0F48E:  BTFSS  FD8.2
0F490:  BRA    F590
.................... 		{
.................... 		valorf = (float)(variavel);
0F492:  MOVFF  A4E,A7E
0F496:  MOVFF  A4D,A7D
0F49A:  MOVLB  0
0F49C:  CALL   2924
0F4A0:  MOVFF  03,A5F
0F4A4:  MOVFF  02,A5E
0F4A8:  MOVFF  01,A5D
0F4AC:  MOVFF  00,A5C
.................... 		valorf = (float)(valorf / z);
0F4B0:  MOVFF  A56,A7E
0F4B4:  MOVFF  A55,A7D
0F4B8:  CALL   2924
0F4BC:  MOVFF  A5F,A83
0F4C0:  MOVFF  A5E,A82
0F4C4:  MOVFF  A5D,A81
0F4C8:  MOVFF  A5C,A80
0F4CC:  MOVFF  03,A87
0F4D0:  MOVFF  02,A86
0F4D4:  MOVFF  01,A85
0F4D8:  MOVFF  00,A84
0F4DC:  CALL   295A
0F4E0:  MOVFF  03,A5F
0F4E4:  MOVFF  02,A5E
0F4E8:  MOVFF  01,A5D
0F4EC:  MOVFF  00,A5C
.................... 		sprintf(buf_tmp,"%f",(float)(valorf));
0F4F0:  MOVLW  08
0F4F2:  MOVLB  8
0F4F4:  MOVWF  x8A
0F4F6:  MOVLW  64
0F4F8:  MOVWF  x89
0F4FA:  MOVLW  89
0F4FC:  MOVWF  FE9
0F4FE:  MOVFF  A5F,A66
0F502:  MOVFF  A5E,A65
0F506:  MOVFF  A5D,A64
0F50A:  MOVFF  A5C,A63
0F50E:  MOVLW  02
0F510:  MOVLB  A
0F512:  MOVWF  x67
0F514:  MOVLB  0
0F516:  CALL   E8B8
.................... 
.................... 		x = 0;
0F51A:  MOVLB  A
0F51C:  CLRF   x57
.................... 		z = 5;
0F51E:  CLRF   x56
0F520:  MOVLW  05
0F522:  MOVWF  x55
.................... 		while(true)
.................... 			{
.................... 			inteiros = buf_tmp[x++];
0F524:  MOVF   x57,W
0F526:  INCF   x57,F
0F528:  CLRF   03
0F52A:  ADDLW  64
0F52C:  MOVWF  FE9
0F52E:  MOVLW  08
0F530:  ADDWFC 03,W
0F532:  MOVWF  FEA
0F534:  MOVFF  FEF,A4F
.................... 			if ((inteiros == '.') || (inteiros == ','))
0F538:  MOVF   x4F,W
0F53A:  SUBLW  2E
0F53C:  BZ    F544
0F53E:  MOVF   x4F,W
0F540:  SUBLW  2C
0F542:  BNZ   F54C
.................... 				{
.................... 				inteiros = '.';
0F544:  MOVLW  2E
0F546:  MOVWF  x4F
.................... 				z = 0;
0F548:  CLRF   x56
0F54A:  CLRF   x55
.................... 				}
.................... 			if ( ((inteiros > ('0' - 1)) && (inteiros < ('9' + 1)) ) || (inteiros == '.') )
0F54C:  MOVF   x4F,W
0F54E:  SUBLW  2F
0F550:  BC    F558
0F552:  MOVF   x4F,W
0F554:  SUBLW  39
0F556:  BC    F55E
0F558:  MOVF   x4F,W
0F55A:  SUBLW  2E
0F55C:  BNZ   F58C
.................... 				{
.................... 			    wr_lcd(1,inteiros);
0F55E:  MOVLW  01
0F560:  MOVWF  x65
0F562:  MOVFF  A4F,A66
0F566:  MOVLB  0
0F568:  CALL   1864
.................... 			    if ((inteiros != '.') && (inteiros != ','))
0F56C:  MOVLB  A
0F56E:  MOVF   x4F,W
0F570:  SUBLW  2E
0F572:  BZ    F580
0F574:  MOVF   x4F,W
0F576:  SUBLW  2C
0F578:  BZ    F580
.................... 			    	{
.................... 				    z++;
0F57A:  INCF   x55,F
0F57C:  BTFSC  FD8.2
0F57E:  INCF   x56,F
.................... 				    }
.................... 			    if (z == 3)
0F580:  MOVF   x55,W
0F582:  SUBLW  03
0F584:  BNZ   F58C
0F586:  MOVF   x56,F
0F588:  BNZ   F58C
.................... 			    	{
.................... 				    break;
0F58A:  BRA    F58E
.................... 				    }
.................... 			    }
0F58C:  BRA    F524
.................... 			}
.................... 		}
0F58E:  BRA    F690
.................... 	else
.................... 		{
.................... 		i = variavel / z;
0F590:  MOVFF  A4E,A6C
0F594:  MOVFF  A4D,A6B
0F598:  MOVFF  A56,A6E
0F59C:  MOVFF  A55,A6D
0F5A0:  MOVLB  0
0F5A2:  CALL   4ECC
0F5A6:  MOVFF  02,A5B
0F5AA:  MOVFF  01,A5A
.................... 		binasc2(i);		/* saida em buf_tmp[0 a 4]*/
0F5AE:  MOVFF  A5B,A63
0F5B2:  MOVFF  A5A,A62
0F5B6:  CALL   4F12
.................... 		for (x = 5 - inteiros; x < 5; x++)
0F5BA:  MOVLW  05
0F5BC:  BSF    FD8.0
0F5BE:  MOVLB  A
0F5C0:  SUBFWB x4F,W
0F5C2:  MOVWF  x57
0F5C4:  MOVF   x57,W
0F5C6:  SUBLW  04
0F5C8:  BNC   F5EC
.................... 			{
.................... 		    wr_lcd(1,buf_tmp[x]);
0F5CA:  CLRF   03
0F5CC:  MOVF   x57,W
0F5CE:  ADDLW  64
0F5D0:  MOVWF  FE9
0F5D2:  MOVLW  08
0F5D4:  ADDWFC 03,W
0F5D6:  MOVWF  FEA
0F5D8:  MOVFF  FEF,A66
0F5DC:  MOVLW  01
0F5DE:  MOVWF  x65
0F5E0:  MOVLB  0
0F5E2:  CALL   1864
0F5E6:  MOVLB  A
0F5E8:  INCF   x57,F
0F5EA:  BRA    F5C4
.................... 			}
.................... 		if (decimal != 0)
0F5EC:  MOVF   x59,F
0F5EE:  BZ    F690
.................... 			{
.................... 			wr_lcd(1,',');
0F5F0:  MOVLW  01
0F5F2:  MOVWF  x65
0F5F4:  MOVLW  2C
0F5F6:  MOVWF  x66
0F5F8:  MOVLB  0
0F5FA:  CALL   1864
.................... 	    	i=(int16)(variavel % z);
0F5FE:  MOVFF  A4E,A6C
0F602:  MOVFF  A4D,A6B
0F606:  MOVFF  A56,A6E
0F60A:  MOVFF  A55,A6D
0F60E:  CALL   4ECC
0F612:  MOVFF  00,A5A
0F616:  MOVLB  A
0F618:  MOVFF  03,A5B
.................... 	    	i=(int16)(i * 100 / z);
0F61C:  MOVFF  A5B,A67
0F620:  MOVFF  A5A,A66
0F624:  CLRF   x69
0F626:  MOVLW  64
0F628:  MOVWF  x68
0F62A:  MOVLB  0
0F62C:  CALL   473C
0F630:  MOVFF  02,A63
0F634:  MOVFF  01,A62
0F638:  MOVFF  02,A6C
0F63C:  MOVFF  01,A6B
0F640:  MOVFF  A56,A6E
0F644:  MOVFF  A55,A6D
0F648:  CALL   4ECC
0F64C:  MOVFF  02,A5B
0F650:  MOVFF  01,A5A
.................... 			binasc2(i);		/* saida em buf_tmp[0 a 4]*/
0F654:  MOVFF  A5B,A63
0F658:  MOVFF  A5A,A62
0F65C:  CALL   4F12
.................... 			for (x=3; x < 3 + decimal; x++)
0F660:  MOVLW  03
0F662:  MOVLB  A
0F664:  MOVWF  x57
0F666:  MOVLW  03
0F668:  ADDWF  x59,W
0F66A:  SUBWF  x57,W
0F66C:  BC    F690
.................... 				{
.................... 	    		wr_lcd(1,buf_tmp[x]);
0F66E:  CLRF   03
0F670:  MOVF   x57,W
0F672:  ADDLW  64
0F674:  MOVWF  FE9
0F676:  MOVLW  08
0F678:  ADDWFC 03,W
0F67A:  MOVWF  FEA
0F67C:  MOVFF  FEF,A66
0F680:  MOVLW  01
0F682:  MOVWF  x65
0F684:  MOVLB  0
0F686:  CALL   1864
0F68A:  MOVLB  A
0F68C:  INCF   x57,F
0F68E:  BRA    F666
.................... 				}
.................... 			}    
.................... 		}
0F690:  MOVLB  0
0F692:  RETURN 0
.................... 	
.................... }
.................... 
.................... void displaypl(char pos, int32 variavel, char inteiros)	{
.................... 	char x;
.................... 	lcd_posi(pos);
*
0AFBA:  MOVFF  A4A,A53
0AFBE:  RCALL  AB24
.................... 	long_asc(variavel);		// Saída em buf_tmp[0 a 9].
0AFC0:  MOVFF  A4E,A54
0AFC4:  MOVFF  A4D,A53
0AFC8:  MOVFF  A4C,A52
0AFCC:  MOVFF  A4B,A51
0AFD0:  BRA    AB8A
.................... 	for (x = 10 - inteiros; x < 10; x++){
0AFD2:  MOVLW  0A
0AFD4:  BSF    FD8.0
0AFD6:  MOVLB  A
0AFD8:  SUBFWB x4F,W
0AFDA:  MOVWF  x50
0AFDC:  MOVF   x50,W
0AFDE:  SUBLW  09
0AFE0:  BNC   B004
.................... 	    wr_lcd(1,buf_tmp[x]);
0AFE2:  CLRF   03
0AFE4:  MOVF   x50,W
0AFE6:  ADDLW  64
0AFE8:  MOVWF  FE9
0AFEA:  MOVLW  08
0AFEC:  ADDWFC 03,W
0AFEE:  MOVWF  FEA
0AFF0:  MOVFF  FEF,A66
0AFF4:  MOVLW  01
0AFF6:  MOVWF  x65
0AFF8:  MOVLB  0
0AFFA:  CALL   1864
0AFFE:  MOVLB  A
0B000:  INCF   x50,F
0B002:  BRA    AFDC
.................... 	}
0B004:  MOVLB  0
0B006:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... #if (controlador == true)
.................... 	void escreve_caracter_especial(char caracter, char posicao)
.................... 		{
.................... 		char x;
.................... 		caracter = caracter -'0';
*
0FAAA:  MOVLW  30
0FAAC:  MOVLB  A
0FAAE:  SUBWF  x53,F
.................... 		switch(caracter)
0FAB0:  MOVF   x53,W
0FAB2:  ADDLW  F6
0FAB4:  BTFSC  FD8.0
0FAB6:  BRA    FE1E
0FAB8:  ADDLW  0A
0FABA:  MOVLB  0
0FABC:  GOTO   FE22
.................... 		   	{
.................... 		    case 0:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FAC0:  MOVLB  A
0FAC2:  CLRF   x55
0FAC4:  MOVF   x55,W
0FAC6:  SUBLW  03
0FAC8:  BNC   FB12
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FACA:  MOVF   x54,W
0FACC:  SUBLW  55
0FACE:  BNZ   FAF0
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_ZERO_U[x]);
0FAD0:  CLRF   03
0FAD2:  MOVF   x55,W
0FAD4:  MOVLB  0
0FAD6:  CALL   02E4
0FADA:  MOVLB  A
0FADC:  MOVWF  x56
0FADE:  MOVLW  01
0FAE0:  MOVWF  x65
0FAE2:  MOVFF  A56,A66
0FAE6:  MOVLB  0
0FAE8:  CALL   1864
.................... 		  				}
0FAEC:  BRA    FB0C
0FAEE:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_ZERO_D[x]);
0FAF0:  CLRF   03
0FAF2:  MOVF   x55,W
0FAF4:  MOVLB  0
0FAF6:  CALL   02FC
0FAFA:  MOVLB  A
0FAFC:  MOVWF  x56
0FAFE:  MOVLW  01
0FB00:  MOVWF  x65
0FB02:  MOVFF  A56,A66
0FB06:  MOVLB  0
0FB08:  CALL   1864
.................... 						}
0FB0C:  MOVLB  A
0FB0E:  INCF   x55,F
0FB10:  BRA    FAC4
.................... 			    	}
.................... 			    break;
0FB12:  BRA    FE1E
0FB14:  MOVLB  0
.................... 			    }
.................... 		    case 1:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FB16:  MOVLB  A
0FB18:  CLRF   x55
0FB1A:  MOVF   x55,W
0FB1C:  SUBLW  03
0FB1E:  BNC   FB68
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FB20:  MOVF   x54,W
0FB22:  SUBLW  55
0FB24:  BNZ   FB46
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_UM_U[x]);
0FB26:  CLRF   03
0FB28:  MOVF   x55,W
0FB2A:  MOVLB  0
0FB2C:  CALL   0314
0FB30:  MOVLB  A
0FB32:  MOVWF  x56
0FB34:  MOVLW  01
0FB36:  MOVWF  x65
0FB38:  MOVFF  A56,A66
0FB3C:  MOVLB  0
0FB3E:  CALL   1864
.................... 		  				}
0FB42:  BRA    FB62
0FB44:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_UM_D[x]);
0FB46:  CLRF   03
0FB48:  MOVF   x55,W
0FB4A:  MOVLB  0
0FB4C:  CALL   0314
0FB50:  MOVLB  A
0FB52:  MOVWF  x56
0FB54:  MOVLW  01
0FB56:  MOVWF  x65
0FB58:  MOVFF  A56,A66
0FB5C:  MOVLB  0
0FB5E:  CALL   1864
.................... 						}
0FB62:  MOVLB  A
0FB64:  INCF   x55,F
0FB66:  BRA    FB1A
.................... 			    	}
.................... 			    break;
0FB68:  BRA    FE1E
0FB6A:  MOVLB  0
.................... 			    }
.................... 		    case 2:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FB6C:  MOVLB  A
0FB6E:  CLRF   x55
0FB70:  MOVF   x55,W
0FB72:  SUBLW  03
0FB74:  BNC   FBBE
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FB76:  MOVF   x54,W
0FB78:  SUBLW  55
0FB7A:  BNZ   FB9C
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_DOIS_U[x]);
0FB7C:  CLRF   03
0FB7E:  MOVF   x55,W
0FB80:  MOVLB  0
0FB82:  CALL   032C
0FB86:  MOVLB  A
0FB88:  MOVWF  x56
0FB8A:  MOVLW  01
0FB8C:  MOVWF  x65
0FB8E:  MOVFF  A56,A66
0FB92:  MOVLB  0
0FB94:  CALL   1864
.................... 		  				}
0FB98:  BRA    FBB8
0FB9A:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_DOIS_D[x]);
0FB9C:  CLRF   03
0FB9E:  MOVF   x55,W
0FBA0:  MOVLB  0
0FBA2:  CALL   0344
0FBA6:  MOVLB  A
0FBA8:  MOVWF  x56
0FBAA:  MOVLW  01
0FBAC:  MOVWF  x65
0FBAE:  MOVFF  A56,A66
0FBB2:  MOVLB  0
0FBB4:  CALL   1864
.................... 						}
0FBB8:  MOVLB  A
0FBBA:  INCF   x55,F
0FBBC:  BRA    FB70
.................... 			    	}
.................... 			    break;
0FBBE:  BRA    FE1E
0FBC0:  MOVLB  0
.................... 			    }
.................... 		    case 3:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FBC2:  MOVLB  A
0FBC4:  CLRF   x55
0FBC6:  MOVF   x55,W
0FBC8:  SUBLW  03
0FBCA:  BNC   FC14
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FBCC:  MOVF   x54,W
0FBCE:  SUBLW  55
0FBD0:  BNZ   FBF2
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_TRES_U[x]);
0FBD2:  CLRF   03
0FBD4:  MOVF   x55,W
0FBD6:  MOVLB  0
0FBD8:  CALL   032C
0FBDC:  MOVLB  A
0FBDE:  MOVWF  x56
0FBE0:  MOVLW  01
0FBE2:  MOVWF  x65
0FBE4:  MOVFF  A56,A66
0FBE8:  MOVLB  0
0FBEA:  CALL   1864
.................... 		  				}
0FBEE:  BRA    FC0E
0FBF0:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_TRES_D[x]);
0FBF2:  CLRF   03
0FBF4:  MOVF   x55,W
0FBF6:  MOVLB  0
0FBF8:  CALL   035C
0FBFC:  MOVLB  A
0FBFE:  MOVWF  x56
0FC00:  MOVLW  01
0FC02:  MOVWF  x65
0FC04:  MOVFF  A56,A66
0FC08:  MOVLB  0
0FC0A:  CALL   1864
.................... 						}
0FC0E:  MOVLB  A
0FC10:  INCF   x55,F
0FC12:  BRA    FBC6
.................... 			    	}
.................... 			    break;
0FC14:  BRA    FE1E
0FC16:  MOVLB  0
.................... 			    }
.................... 		    case 4:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FC18:  MOVLB  A
0FC1A:  CLRF   x55
0FC1C:  MOVF   x55,W
0FC1E:  SUBLW  03
0FC20:  BNC   FC6A
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FC22:  MOVF   x54,W
0FC24:  SUBLW  55
0FC26:  BNZ   FC48
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_QUATRO_U[x]);
0FC28:  CLRF   03
0FC2A:  MOVF   x55,W
0FC2C:  MOVLB  0
0FC2E:  CALL   0374
0FC32:  MOVLB  A
0FC34:  MOVWF  x56
0FC36:  MOVLW  01
0FC38:  MOVWF  x65
0FC3A:  MOVFF  A56,A66
0FC3E:  MOVLB  0
0FC40:  CALL   1864
.................... 		  				}
0FC44:  BRA    FC64
0FC46:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_QUATRO_D[x]);
0FC48:  CLRF   03
0FC4A:  MOVF   x55,W
0FC4C:  MOVLB  0
0FC4E:  CALL   038C
0FC52:  MOVLB  A
0FC54:  MOVWF  x56
0FC56:  MOVLW  01
0FC58:  MOVWF  x65
0FC5A:  MOVFF  A56,A66
0FC5E:  MOVLB  0
0FC60:  CALL   1864
.................... 						}
0FC64:  MOVLB  A
0FC66:  INCF   x55,F
0FC68:  BRA    FC1C
.................... 			    	}
.................... 			    break;
0FC6A:  BRA    FE1E
0FC6C:  MOVLB  0
.................... 			    }
.................... 		    case 5:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FC6E:  MOVLB  A
0FC70:  CLRF   x55
0FC72:  MOVF   x55,W
0FC74:  SUBLW  03
0FC76:  BNC   FCC0
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FC78:  MOVF   x54,W
0FC7A:  SUBLW  55
0FC7C:  BNZ   FC9E
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_CINCO_U[x]);
0FC7E:  CLRF   03
0FC80:  MOVF   x55,W
0FC82:  MOVLB  0
0FC84:  CALL   03A4
0FC88:  MOVLB  A
0FC8A:  MOVWF  x56
0FC8C:  MOVLW  01
0FC8E:  MOVWF  x65
0FC90:  MOVFF  A56,A66
0FC94:  MOVLB  0
0FC96:  CALL   1864
.................... 		  				}
0FC9A:  BRA    FCBA
0FC9C:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_CINCO_D[x]);
0FC9E:  CLRF   03
0FCA0:  MOVF   x55,W
0FCA2:  MOVLB  0
0FCA4:  CALL   035C
0FCA8:  MOVLB  A
0FCAA:  MOVWF  x56
0FCAC:  MOVLW  01
0FCAE:  MOVWF  x65
0FCB0:  MOVFF  A56,A66
0FCB4:  MOVLB  0
0FCB6:  CALL   1864
.................... 						}
0FCBA:  MOVLB  A
0FCBC:  INCF   x55,F
0FCBE:  BRA    FC72
.................... 			    	}
.................... 			    break;
0FCC0:  BRA    FE1E
0FCC2:  MOVLB  0
.................... 			    }
.................... 		    case 6:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FCC4:  MOVLB  A
0FCC6:  CLRF   x55
0FCC8:  MOVF   x55,W
0FCCA:  SUBLW  03
0FCCC:  BNC   FD16
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FCCE:  MOVF   x54,W
0FCD0:  SUBLW  55
0FCD2:  BNZ   FCF4
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_SEIS_U[x]);
0FCD4:  CLRF   03
0FCD6:  MOVF   x55,W
0FCD8:  MOVLB  0
0FCDA:  CALL   03A4
0FCDE:  MOVLB  A
0FCE0:  MOVWF  x56
0FCE2:  MOVLW  01
0FCE4:  MOVWF  x65
0FCE6:  MOVFF  A56,A66
0FCEA:  MOVLB  0
0FCEC:  CALL   1864
.................... 		  				}
0FCF0:  BRA    FD10
0FCF2:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_SEIS_D[x]);
0FCF4:  CLRF   03
0FCF6:  MOVF   x55,W
0FCF8:  MOVLB  0
0FCFA:  CALL   03BC
0FCFE:  MOVLB  A
0FD00:  MOVWF  x56
0FD02:  MOVLW  01
0FD04:  MOVWF  x65
0FD06:  MOVFF  A56,A66
0FD0A:  MOVLB  0
0FD0C:  CALL   1864
.................... 						}
0FD10:  MOVLB  A
0FD12:  INCF   x55,F
0FD14:  BRA    FCC8
.................... 			    	}
.................... 			    break;
0FD16:  BRA    FE1E
0FD18:  MOVLB  0
.................... 			    }
.................... 		    case 7:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FD1A:  MOVLB  A
0FD1C:  CLRF   x55
0FD1E:  MOVF   x55,W
0FD20:  SUBLW  03
0FD22:  BNC   FD6C
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FD24:  MOVF   x54,W
0FD26:  SUBLW  55
0FD28:  BNZ   FD4A
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_SETE_U[x]);
0FD2A:  CLRF   03
0FD2C:  MOVF   x55,W
0FD2E:  MOVLB  0
0FD30:  CALL   03D4
0FD34:  MOVLB  A
0FD36:  MOVWF  x56
0FD38:  MOVLW  01
0FD3A:  MOVWF  x65
0FD3C:  MOVFF  A56,A66
0FD40:  MOVLB  0
0FD42:  CALL   1864
.................... 		  				}
0FD46:  BRA    FD66
0FD48:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_SETE_D[x]);
0FD4A:  CLRF   03
0FD4C:  MOVF   x55,W
0FD4E:  MOVLB  0
0FD50:  CALL   03EC
0FD54:  MOVLB  A
0FD56:  MOVWF  x56
0FD58:  MOVLW  01
0FD5A:  MOVWF  x65
0FD5C:  MOVFF  A56,A66
0FD60:  MOVLB  0
0FD62:  CALL   1864
.................... 						}
0FD66:  MOVLB  A
0FD68:  INCF   x55,F
0FD6A:  BRA    FD1E
.................... 			    	}
.................... 			    break;
0FD6C:  BRA    FE1E
0FD6E:  MOVLB  0
.................... 			    }
.................... 		    case 8:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FD70:  MOVLB  A
0FD72:  CLRF   x55
0FD74:  MOVF   x55,W
0FD76:  SUBLW  03
0FD78:  BNC   FDC2
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FD7A:  MOVF   x54,W
0FD7C:  SUBLW  55
0FD7E:  BNZ   FDA0
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_OITO_U[x]);
0FD80:  CLRF   03
0FD82:  MOVF   x55,W
0FD84:  MOVLB  0
0FD86:  CALL   0404
0FD8A:  MOVLB  A
0FD8C:  MOVWF  x56
0FD8E:  MOVLW  01
0FD90:  MOVWF  x65
0FD92:  MOVFF  A56,A66
0FD96:  MOVLB  0
0FD98:  CALL   1864
.................... 		  				}
0FD9C:  BRA    FDBC
0FD9E:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_OITO_D[x]);
0FDA0:  CLRF   03
0FDA2:  MOVF   x55,W
0FDA4:  MOVLB  0
0FDA6:  CALL   03BC
0FDAA:  MOVLB  A
0FDAC:  MOVWF  x56
0FDAE:  MOVLW  01
0FDB0:  MOVWF  x65
0FDB2:  MOVFF  A56,A66
0FDB6:  MOVLB  0
0FDB8:  CALL   1864
.................... 						}
0FDBC:  MOVLB  A
0FDBE:  INCF   x55,F
0FDC0:  BRA    FD74
.................... 			    	}
.................... 			    break;
0FDC2:  BRA    FE1E
0FDC4:  MOVLB  0
.................... 			    }
.................... 		    case 9:
.................... 		    	{
.................... 		    	for (x = 0; x < 4; x++)
0FDC6:  MOVLB  A
0FDC8:  CLRF   x55
0FDCA:  MOVF   x55,W
0FDCC:  SUBLW  03
0FDCE:  BNC   FE18
.................... 		 	  		{
.................... 			 	  	if (posicao == 'U')
0FDD0:  MOVF   x54,W
0FDD2:  SUBLW  55
0FDD4:  BNZ   FDF6
.................... 			 	  		{
.................... 		 				wr_lcd(1,D_NOVE_U[x]);
0FDD6:  CLRF   03
0FDD8:  MOVF   x55,W
0FDDA:  MOVLB  0
0FDDC:  CALL   0404
0FDE0:  MOVLB  A
0FDE2:  MOVWF  x56
0FDE4:  MOVLW  01
0FDE6:  MOVWF  x65
0FDE8:  MOVFF  A56,A66
0FDEC:  MOVLB  0
0FDEE:  CALL   1864
.................... 		  				}
0FDF2:  BRA    FE12
0FDF4:  MOVLB  A
.................... 		   			else
.................... 		   				{
.................... 		   				wr_lcd(1,D_NOVE_D[x]);
0FDF6:  CLRF   03
0FDF8:  MOVF   x55,W
0FDFA:  MOVLB  0
0FDFC:  CALL   035C
0FE00:  MOVLB  A
0FE02:  MOVWF  x56
0FE04:  MOVLW  01
0FE06:  MOVWF  x65
0FE08:  MOVFF  A56,A66
0FE0C:  MOVLB  0
0FE0E:  CALL   1864
.................... 						}
0FE12:  MOVLB  A
0FE14:  INCF   x55,F
0FE16:  BRA    FDCA
.................... 			    	}
.................... 			    break;
0FE18:  BRA    FE1E
0FE1A:  MOVLB  0
0FE1C:  MOVLB  A
.................... 			    }
.................... 			}
0FE1E:  MOVLB  0
0FE20:  RETURN 0
.................... 	}
.................... #endif
.................... 
.................... #if (controlador == true)
.................... 	void displayfp_aciona(char pos, signed int16 variavel, char tipo )
.................... 	{
.................... 		int16 i;
.................... 		short sinal;
.................... 		char x, y;
.................... 	
.................... 		lcd_posi(pos);
.................... 	
.................... 		if (variavel > 0)
.................... 			{
.................... 			sinal = 0;
.................... 			i = (unsigned int16)(variavel);
.................... 			}
.................... 		else
.................... 			{
.................... 			sinal = 1;
.................... 			i = (unsigned int16)(variavel * (-1));
.................... 			}
.................... 		
.................... 	    i = (unsigned int16)(i / 1.024);
.................... 	
.................... 		if (tipo == 0)
.................... 			{
.................... 		    if ((i > 995) && (i <  1005))
.................... 		    	{
.................... 				wr_lcd(1,' ');
.................... 				wr_lcd(1,'1');
.................... 				wr_lcd(1,'.');
.................... 				wr_lcd(1,'0');
.................... 				wr_lcd(1,'0');
.................... 		    	}
.................... 		    else
.................... 		    	{
.................... 				if (sinal == 1)
.................... 			    	{
.................... 				    wr_lcd(1,'i');
.................... 		    		}
.................... 		    	else
.................... 		    		{
.................... 				    wr_lcd(1,'c');
.................... 		    		}
.................... 			    wr_lcd(1,'0');
.................... 			    wr_lcd(1,',');
.................... 				binasc2(i);							/* saida em buf_tmp[0 a 4]*/
.................... 		    	wr_lcd(1,buf_tmp[2]);
.................... 		    	wr_lcd(1,buf_tmp[3]);
.................... 				}
.................... 			wr_lcd(1,' ');
.................... 			}
.................... 	}
.................... #endif
.................... 
.................... #if (controlador == true)
.................... 	void displayfp(char pos, signed int16 variavel, char tipo )
.................... #else
.................... 	void displayfp(char pos, signed int16 variavel )
.................... #endif
.................... {
.................... 	int16 i;
.................... 	short sinal;
.................... 	char x, y;
.................... 	
.................... 	lcd_posi(pos);
*
10000:  MOVFF  A4A,A53
10004:  CALL   AB24
.................... 
.................... 
.................... 	if (variavel > 0)
10008:  MOVLB  A
1000A:  BTFSC  x4C.7
1000C:  GOTO   10030
10010:  MOVF   x4C,F
10012:  BTFSS  FD8.2
10014:  GOTO   10022
10018:  MOVF   x4B,W
1001A:  SUBLW  00
1001C:  BTFSC  FD8.0
1001E:  GOTO   10030
.................... 		{
.................... 		sinal = 0;		//FP Capacitivo
10022:  BCF    x50.0
.................... 		i = (unsigned int16)(variavel);
10024:  MOVFF  A4C,A4F
10028:  MOVFF  A4B,A4E
.................... 		}
1002C:  GOTO   1004E
.................... 	else
.................... 		{
.................... 		sinal = 1;		//FP Indutivo
10030:  BSF    x50.0
.................... 		i = (unsigned int16)(variavel * (-1));
10032:  MOVFF  A4C,A6F
10036:  MOVFF  A4B,A6E
1003A:  SETF   x71
1003C:  SETF   x70
1003E:  MOVLB  0
10040:  CALL   FA44
10044:  MOVFF  02,A4F
10048:  MOVLB  A
1004A:  MOVFF  01,A4E
.................... 		}
.................... 	
....................     i = (unsigned int16)(i / 1.024);
1004E:  MOVFF  A4F,A7E
10052:  MOVFF  A4E,A7D
10056:  MOVLB  0
10058:  CALL   2924
1005C:  MOVFF  03,A83
10060:  MOVFF  02,A82
10064:  MOVFF  01,A81
10068:  MOVFF  00,A80
1006C:  MOVLW  6F
1006E:  MOVLB  A
10070:  MOVWF  x87
10072:  MOVLW  12
10074:  MOVWF  x86
10076:  MOVLW  03
10078:  MOVWF  x85
1007A:  MOVLW  7F
1007C:  MOVWF  x84
1007E:  MOVLB  0
10080:  CALL   295A
10084:  MOVFF  03,A7C
10088:  MOVFF  02,A7B
1008C:  MOVFF  01,A7A
10090:  MOVFF  00,A79
10094:  CALL   53FC
10098:  MOVFF  02,A4F
1009C:  MOVFF  01,A4E
....................     
.................... 	#if (controlador == true)
.................... 		if (tipo == 1)
100A0:  MOVLB  A
100A2:  DECFSZ x4D,W
100A4:  GOTO   1030C
.................... 			{
.................... 			primeira_linha();		/* Coloca cursor na posicao inicial	*/
100A8:  MOVLB  0
100AA:  GOTO   FA98
.................... 		    if ((i > 995) && (i <  1005))
100AE:  MOVLB  A
100B0:  MOVF   x4F,W
100B2:  SUBLW  02
100B4:  BTFSC  FD8.0
100B6:  GOTO   101CE
100BA:  XORLW  FF
100BC:  BTFSS  FD8.2
100BE:  GOTO   100CC
100C2:  MOVF   x4E,W
100C4:  SUBLW  E3
100C6:  BTFSC  FD8.0
100C8:  GOTO   101CE
100CC:  MOVF   x4F,W
100CE:  SUBLW  03
100D0:  BTFSS  FD8.0
100D2:  GOTO   101CE
100D6:  BTFSS  FD8.2
100D8:  GOTO   100E6
100DC:  MOVF   x4E,W
100DE:  SUBLW  EC
100E0:  BTFSS  FD8.0
100E2:  GOTO   101CE
.................... 		    	{
.................... 			    wr_lcd(1,D_I_U[0]);
100E6:  MOVLW  01
100E8:  MOVWF  x65
100EA:  MOVLW  46
100EC:  MOVWF  x66
100EE:  MOVLB  0
100F0:  CALL   1864
.................... 			    wr_lcd(1,D_I_U[1]);
100F4:  MOVLW  01
100F6:  MOVLB  A
100F8:  MOVWF  x65
100FA:  MOVLW  50
100FC:  MOVWF  x66
100FE:  MOVLB  0
10100:  CALL   1864
.................... 			    wr_lcd(1,D_I_U[2]);
10104:  MOVLW  01
10106:  MOVLB  A
10108:  MOVWF  x65
1010A:  MOVLW  3A
1010C:  MOVWF  x66
1010E:  MOVLB  0
10110:  CALL   1864
.................... 			    	
.................... 		    	// ESCREVE PRIMEIRA LINHA
.................... 			    escreve_caracter_especial('1', 'U');
10114:  MOVLW  31
10116:  MOVLB  A
10118:  MOVWF  x53
1011A:  MOVLW  55
1011C:  MOVWF  x54
1011E:  MOVLB  0
10120:  CALL   FAAA
.................... 			    wr_lcd(1,' ');
10124:  MOVLW  01
10126:  MOVLB  A
10128:  MOVWF  x65
1012A:  MOVLW  20
1012C:  MOVWF  x66
1012E:  MOVLB  0
10130:  CALL   1864
.................... 			    escreve_caracter_especial('0', 'U');
10134:  MOVLW  30
10136:  MOVLB  A
10138:  MOVWF  x53
1013A:  MOVLW  55
1013C:  MOVWF  x54
1013E:  MOVLB  0
10140:  CALL   FAAA
.................... 			    escreve_caracter_especial('0', 'U');
10144:  MOVLW  30
10146:  MOVLB  A
10148:  MOVWF  x53
1014A:  MOVLW  55
1014C:  MOVWF  x54
1014E:  MOVLB  0
10150:  CALL   FAAA
.................... 				troca_linha();
10154:  CALL   FE56
.................... 			    wr_lcd(1,D_B_D[0]);
10158:  MOVLW  01
1015A:  MOVLB  A
1015C:  MOVWF  x65
1015E:  MOVLW  20
10160:  MOVWF  x66
10162:  MOVLB  0
10164:  CALL   1864
.................... 			    wr_lcd(1,D_B_D[1]);
10168:  MOVLW  01
1016A:  MOVLB  A
1016C:  MOVWF  x65
1016E:  MOVLW  20
10170:  MOVWF  x66
10172:  MOVLB  0
10174:  CALL   1864
.................... 			    wr_lcd(1,D_B_D[2]);
10178:  MOVLW  01
1017A:  MOVLB  A
1017C:  MOVWF  x65
1017E:  MOVLW  20
10180:  MOVWF  x66
10182:  MOVLB  0
10184:  CALL   1864
.................... 			    
.................... 			    escreve_caracter_especial('1', 'D');
10188:  MOVLW  31
1018A:  MOVLB  A
1018C:  MOVWF  x53
1018E:  MOVLW  44
10190:  MOVWF  x54
10192:  MOVLB  0
10194:  CALL   FAAA
.................... 			    wr_lcd(1,'.');
10198:  MOVLW  01
1019A:  MOVLB  A
1019C:  MOVWF  x65
1019E:  MOVLW  2E
101A0:  MOVWF  x66
101A2:  MOVLB  0
101A4:  CALL   1864
.................... 			    escreve_caracter_especial('0', 'D');
101A8:  MOVLW  30
101AA:  MOVLB  A
101AC:  MOVWF  x53
101AE:  MOVLW  44
101B0:  MOVWF  x54
101B2:  MOVLB  0
101B4:  CALL   FAAA
.................... 			    escreve_caracter_especial('0', 'D');
101B8:  MOVLW  30
101BA:  MOVLB  A
101BC:  MOVWF  x53
101BE:  MOVLW  44
101C0:  MOVWF  x54
101C2:  MOVLB  0
101C4:  CALL   FAAA
.................... 			    
.................... 		    	}
101C8:  GOTO   102F6
101CC:  MOVLB  A
.................... 		    else
.................... 		    	{
.................... 			    wr_lcd(1,D_I_U[0]);
101CE:  MOVLW  01
101D0:  MOVWF  x65
101D2:  MOVLW  46
101D4:  MOVWF  x66
101D6:  MOVLB  0
101D8:  CALL   1864
.................... 			    wr_lcd(1,D_I_U[1]);
101DC:  MOVLW  01
101DE:  MOVLB  A
101E0:  MOVWF  x65
101E2:  MOVLW  50
101E4:  MOVWF  x66
101E6:  MOVLB  0
101E8:  CALL   1864
.................... 			    wr_lcd(1,D_I_U[2]);
101EC:  MOVLW  01
101EE:  MOVLB  A
101F0:  MOVWF  x65
101F2:  MOVLW  3A
101F4:  MOVWF  x66
101F6:  MOVLB  0
101F8:  CALL   1864
.................... 
.................... //			    wr_lcd(1,'0');
.................... //			    wr_lcd(1,',');
.................... 				binasc2(i);							/* saida em buf_tmp[0 a 4]*/
101FC:  MOVFF  A4F,A63
10200:  MOVFF  A4E,A62
10204:  CALL   4F12
.................... //		    	wr_lcd(1,buf_tmp[2]);
.................... //		    	wr_lcd(1,buf_tmp[3]);
.................... 		    	
.................... 		    	// ESCREVE PRIMEIRA LINHA
.................... 			    escreve_caracter_especial('0', 'U');
10208:  MOVLW  30
1020A:  MOVLB  A
1020C:  MOVWF  x53
1020E:  MOVLW  55
10210:  MOVWF  x54
10212:  MOVLB  0
10214:  CALL   FAAA
.................... 			    wr_lcd(1,' ');
10218:  MOVLW  01
1021A:  MOVLB  A
1021C:  MOVWF  x65
1021E:  MOVLW  20
10220:  MOVWF  x66
10222:  MOVLB  0
10224:  CALL   1864
.................... 			    escreve_caracter_especial(buf_tmp[2], 'U');
10228:  MOVFF  866,A53
1022C:  MOVLW  55
1022E:  MOVLB  A
10230:  MOVWF  x54
10232:  MOVLB  0
10234:  CALL   FAAA
.................... 			    escreve_caracter_especial(buf_tmp[3], 'U');
10238:  MOVFF  867,A53
1023C:  MOVLW  55
1023E:  MOVLB  A
10240:  MOVWF  x54
10242:  MOVLB  0
10244:  CALL   FAAA
.................... 			    
.................... 		    	
.................... 				// ESCREVE SEGUNDA LINHA
.................... 				troca_linha();
10248:  CALL   FE56
.................... 				if (sinal==1)
1024C:  MOVLB  A
1024E:  BTFSS  x50.0
10250:  GOTO   10288
.................... 			    	{
.................... 				    wr_lcd(1,D_I_D[0]);
10254:  MOVLW  01
10256:  MOVWF  x65
10258:  MOVLW  49
1025A:  MOVWF  x66
1025C:  MOVLB  0
1025E:  CALL   1864
.................... 				    wr_lcd(1,D_I_D[1]);
10262:  MOVLW  01
10264:  MOVLB  A
10266:  MOVWF  x65
10268:  MOVLW  4E
1026A:  MOVWF  x66
1026C:  MOVLB  0
1026E:  CALL   1864
.................... 				    wr_lcd(1,D_I_D[2]);
10272:  MOVLW  01
10274:  MOVLB  A
10276:  MOVWF  x65
10278:  MOVLW  44
1027A:  MOVWF  x66
1027C:  MOVLB  0
1027E:  CALL   1864
.................... 		    		}
10282:  GOTO   102B6
10286:  MOVLB  A
.................... 		    	else
.................... 		    		{
.................... 				    wr_lcd(1,D_C_D[0]);
10288:  MOVLW  01
1028A:  MOVWF  x65
1028C:  MOVLW  43
1028E:  MOVWF  x66
10290:  MOVLB  0
10292:  CALL   1864
.................... 				    wr_lcd(1,D_C_D[1]);
10296:  MOVLW  01
10298:  MOVLB  A
1029A:  MOVWF  x65
1029C:  MOVLW  41
1029E:  MOVWF  x66
102A0:  MOVLB  0
102A2:  CALL   1864
.................... 				    wr_lcd(1,D_C_D[2]);
102A6:  MOVLW  01
102A8:  MOVLB  A
102AA:  MOVWF  x65
102AC:  MOVLW  50
102AE:  MOVWF  x66
102B0:  MOVLB  0
102B2:  CALL   1864
.................... 		    		}
.................... 		    		
.................... 			    escreve_caracter_especial('0', 'D');
102B6:  MOVLW  30
102B8:  MOVLB  A
102BA:  MOVWF  x53
102BC:  MOVLW  44
102BE:  MOVWF  x54
102C0:  MOVLB  0
102C2:  CALL   FAAA
.................... 			    wr_lcd(1,'.');
102C6:  MOVLW  01
102C8:  MOVLB  A
102CA:  MOVWF  x65
102CC:  MOVLW  2E
102CE:  MOVWF  x66
102D0:  MOVLB  0
102D2:  CALL   1864
.................... 			    escreve_caracter_especial(buf_tmp[2], 'D');
102D6:  MOVFF  866,A53
102DA:  MOVLW  44
102DC:  MOVLB  A
102DE:  MOVWF  x54
102E0:  MOVLB  0
102E2:  CALL   FAAA
.................... 			    escreve_caracter_especial(buf_tmp[3], 'D');
102E6:  MOVFF  867,A53
102EA:  MOVLW  44
102EC:  MOVLB  A
102EE:  MOVWF  x54
102F0:  MOVLB  0
102F2:  CALL   FAAA
.................... 		    		
.................... 		    	
.................... 				}
.................... 		    wr_lcd(1,' ');
102F6:  MOVLW  01
102F8:  MOVLB  A
102FA:  MOVWF  x65
102FC:  MOVLW  20
102FE:  MOVWF  x66
10300:  MOVLB  0
10302:  CALL   1864
.................... 		    }
10306:  GOTO   1041A
1030A:  MOVLB  A
.................... 		else
.................... 			{
.................... 		    if ((i > 995) && (i <  1005))
1030C:  MOVF   x4F,W
1030E:  SUBLW  02
10310:  BTFSC  FD8.0
10312:  GOTO   10396
10316:  XORLW  FF
10318:  BTFSS  FD8.2
1031A:  GOTO   10328
1031E:  MOVF   x4E,W
10320:  SUBLW  E3
10322:  BTFSC  FD8.0
10324:  GOTO   10396
10328:  MOVF   x4F,W
1032A:  SUBLW  03
1032C:  BTFSS  FD8.0
1032E:  GOTO   10396
10332:  BTFSS  FD8.2
10334:  GOTO   10342
10338:  MOVF   x4E,W
1033A:  SUBLW  EC
1033C:  BTFSS  FD8.0
1033E:  GOTO   10396
.................... 		    	{
.................... 			    #if (monofasico == true)
.................... 					wr_lcd(1,' ');
.................... 			    #endif
.................... 				wr_lcd(1,' ');
10342:  MOVLW  01
10344:  MOVWF  x65
10346:  MOVLW  20
10348:  MOVWF  x66
1034A:  MOVLB  0
1034C:  CALL   1864
.................... 				wr_lcd(1,'1');
10350:  MOVLW  01
10352:  MOVLB  A
10354:  MOVWF  x65
10356:  MOVLW  31
10358:  MOVWF  x66
1035A:  MOVLB  0
1035C:  CALL   1864
.................... 				wr_lcd(1,'.');
10360:  MOVLW  01
10362:  MOVLB  A
10364:  MOVWF  x65
10366:  MOVLW  2E
10368:  MOVWF  x66
1036A:  MOVLB  0
1036C:  CALL   1864
.................... 				wr_lcd(1,'0');
10370:  MOVLW  01
10372:  MOVLB  A
10374:  MOVWF  x65
10376:  MOVLW  30
10378:  MOVWF  x66
1037A:  MOVLB  0
1037C:  CALL   1864
.................... 				wr_lcd(1,'0');
10380:  MOVLW  01
10382:  MOVLB  A
10384:  MOVWF  x65
10386:  MOVLW  30
10388:  MOVWF  x66
1038A:  MOVLB  0
1038C:  CALL   1864
.................... 			    #if (monofasico == true)
.................... 					wr_lcd(1,' ');
.................... 					wr_lcd(1,' ');
.................... 			    #endif
.................... 		    	}
10390:  GOTO   1040A
10394:  MOVLB  A
.................... 		    else
.................... 		    	{
.................... 				if (sinal==1)
10396:  BTFSS  x50.0
10398:  GOTO   103B0
.................... 			    	{
.................... 				    wr_lcd(1,'i');
1039C:  MOVLW  01
1039E:  MOVWF  x65
103A0:  MOVLW  69
103A2:  MOVWF  x66
103A4:  MOVLB  0
103A6:  CALL   1864
.................... 				    #if (monofasico == true)
.................... 					    wr_lcd(1,'n');
.................... 					    wr_lcd(1,'d');
.................... 					#endif
.................... 		    		}
103AA:  GOTO   103BE
103AE:  MOVLB  A
.................... 		    	else
.................... 		    		{
.................... 				    wr_lcd(1,'c');
103B0:  MOVLW  01
103B2:  MOVWF  x65
103B4:  MOVLW  63
103B6:  MOVWF  x66
103B8:  MOVLB  0
103BA:  CALL   1864
.................... 				    #if (monofasico == true)
.................... 					    wr_lcd(1,'a');
.................... 					    wr_lcd(1,'p');
.................... 					#endif
.................... 		    		}
.................... 			    #if (monofasico == true)
.................... 				    wr_lcd(1,' ');
.................... 				#endif
.................... 			    wr_lcd(1,'0');
103BE:  MOVLW  01
103C0:  MOVLB  A
103C2:  MOVWF  x65
103C4:  MOVLW  30
103C6:  MOVWF  x66
103C8:  MOVLB  0
103CA:  CALL   1864
.................... 			    wr_lcd(1,',');
103CE:  MOVLW  01
103D0:  MOVLB  A
103D2:  MOVWF  x65
103D4:  MOVLW  2C
103D6:  MOVWF  x66
103D8:  MOVLB  0
103DA:  CALL   1864
.................... 				binasc2(i);							/* saida em buf_tmp[0 a 4]*/
103DE:  MOVFF  A4F,A63
103E2:  MOVFF  A4E,A62
103E6:  CALL   4F12
.................... 		    	wr_lcd(1,buf_tmp[2]);
103EA:  MOVLW  01
103EC:  MOVLB  A
103EE:  MOVWF  x65
103F0:  MOVFF  866,A66
103F4:  MOVLB  0
103F6:  CALL   1864
.................... 		    	wr_lcd(1,buf_tmp[3]);
103FA:  MOVLW  01
103FC:  MOVLB  A
103FE:  MOVWF  x65
10400:  MOVFF  867,A66
10404:  MOVLB  0
10406:  CALL   1864
.................... 				}
.................... 		    wr_lcd(1,' ');
1040A:  MOVLW  01
1040C:  MOVLB  A
1040E:  MOVWF  x65
10410:  MOVLW  20
10412:  MOVWF  x66
10414:  MOVLB  0
10416:  CALL   1864
.................... 		   	}
.................... 	#else
1041A:  GOTO   FEF8 (RETURN)
.................... 	    if ((i > 995) && (i <  1005))
.................... 	    	{
.................... 		    wr_lcd(1,' ');
.................... 		    wr_lcd(1,'1');
.................... 		    wr_lcd(1,'.');
.................... 		    wr_lcd(1,'0');
.................... 		    wr_lcd(1,'0');
.................... 	    	}
.................... 	    else
.................... 	    	{
.................... 			if (sinal==1)
.................... 		    	{
.................... 			    wr_lcd(1,'i');
.................... 	    		}
.................... 	    	else
.................... 	    		{
.................... 			    wr_lcd(1,'c');
.................... 	    		}
.................... 		    wr_lcd(1,'0');
.................... 		    wr_lcd(1,',');
.................... 			binasc2(i);							/* saida em buf_tmp[0 a 4]*/
.................... 	    	wr_lcd(1,buf_tmp[2]);
.................... 	    	wr_lcd(1,buf_tmp[3]);
.................... 			}
.................... 	    wr_lcd(1,' ');
....................    #endif
.................... 
.................... }
.................... 
.................... 
.................... /*		    	for (x = 0; x < 4; x++)
.................... 		    		{
....................     				wr_lcd(1,D_ZERO_D[x]);
.................... 			    	}
.................... 			    y = (buf_tmp[2] - '0')* 4;
.................... 		    	for (x = 0; x < 4; x++)
.................... 		    		{
....................     				wr_lcd(1,D_ZERO_D[y++]);
.................... 			    	}
.................... 			    y = (buf_tmp[3] - '0')* 4;
.................... 		    	for (x = 0; x < 4; x++)
.................... 		    		{
....................     				wr_lcd(1,D_ZERO_D[y++]);
.................... 			    	}
.................... */
.................... void exibe_sim_nao(int16 variavel, char pos, char status)
.................... {
.................... 	if (pos < 16)				// 12345678901234567890
.................... 		{
.................... 		lcd_gotoxy(pos,1);
.................... 		}						// 1              16  20
.................... 	else if(pos < 32)			// 12345678901234567890
.................... 		{
.................... 		pos = pos - 16;
.................... 		lcd_gotoxy(pos,2);
.................... 		}						// 21			  36  40
.................... 	else if(pos < 48)			// 1234567890123456xxxx
.................... 		{
.................... 		pos = pos - 32;
.................... 		lcd_gotoxy(pos,3);
.................... 		}						// 21             36  40 
.................... 	else						// 1234567890123456xxxx
.................... 		{
.................... 		pos = pos - 48;		 
.................... 		lcd_gotoxy(pos,4);
.................... 		}
.................... 				
.................... 	if (variavel == 0)
.................... 		{
.................... 		buf_tmp[0]='N';
.................... 		buf_tmp[1]='a';
.................... 		buf_tmp[2]='o';
.................... 		}
.................... 	else
.................... 		{
.................... 		buf_tmp[0]='S';
.................... 		buf_tmp[1]='i';
.................... 		buf_tmp[2]='m';
.................... 		}
.................... 	if ((piscar == 1) && (status == 'P'))
.................... 		{
.................... 		buf_tmp[0]=' ';
.................... 		buf_tmp[1]=' ';
.................... 		buf_tmp[2]=' ';
.................... 		}
.................... 	wr_lcd(1,buf_tmp[0]);
.................... 	wr_lcd(1,buf_tmp[1]);
.................... 	wr_lcd(1,buf_tmp[2]);
.................... }
.................... 
.................... void exibe_off(char pos)
.................... {
.................... 	#if (disp_lcd == true)
.................... 		if (programando == 1)
*
1312E:  BTFSS  29.5
13130:  BRA    131CA
.................... 			{
.................... 			if (piscar == 1)
13132:  BTFSS  29.7
13134:  BRA    13180
.................... 				{
.................... 				lcd_posi(pos);
13136:  MOVFF  A4B,A53
1313A:  CALL   AB24
.................... 				wr_lcd(1,' ');
1313E:  MOVLW  01
13140:  MOVLB  A
13142:  MOVWF  x65
13144:  MOVLW  20
13146:  MOVWF  x66
13148:  MOVLB  0
1314A:  CALL   1864
.................... 				wr_lcd(1,' ');
1314E:  MOVLW  01
13150:  MOVLB  A
13152:  MOVWF  x65
13154:  MOVLW  20
13156:  MOVWF  x66
13158:  MOVLB  0
1315A:  CALL   1864
.................... 				wr_lcd(1,' ');
1315E:  MOVLW  01
13160:  MOVLB  A
13162:  MOVWF  x65
13164:  MOVLW  20
13166:  MOVWF  x66
13168:  MOVLB  0
1316A:  CALL   1864
.................... 				wr_lcd(1,' ');
1316E:  MOVLW  01
13170:  MOVLB  A
13172:  MOVWF  x65
13174:  MOVLW  20
13176:  MOVWF  x66
13178:  MOVLB  0
1317A:  CALL   1864
.................... 				}
1317E:  BRA    131C8
.................... 			else
.................... 				{
.................... 				lcd_posi(pos);
13180:  MOVFF  A4B,A53
13184:  CALL   AB24
.................... 				wr_lcd(1,' ');
13188:  MOVLW  01
1318A:  MOVLB  A
1318C:  MOVWF  x65
1318E:  MOVLW  20
13190:  MOVWF  x66
13192:  MOVLB  0
13194:  CALL   1864
.................... 				wr_lcd(1,'O');
13198:  MOVLW  01
1319A:  MOVLB  A
1319C:  MOVWF  x65
1319E:  MOVLW  4F
131A0:  MOVWF  x66
131A2:  MOVLB  0
131A4:  CALL   1864
.................... 				wr_lcd(1,'F');
131A8:  MOVLW  01
131AA:  MOVLB  A
131AC:  MOVWF  x65
131AE:  MOVLW  46
131B0:  MOVWF  x66
131B2:  MOVLB  0
131B4:  CALL   1864
.................... 				wr_lcd(1,'F');
131B8:  MOVLW  01
131BA:  MOVLB  A
131BC:  MOVWF  x65
131BE:  MOVLW  46
131C0:  MOVWF  x66
131C2:  MOVLB  0
131C4:  CALL   1864
.................... 				}
.................... 			}
131C8:  BRA    13212
.................... 		else
.................... 			{
.................... 			lcd_posi(pos);
131CA:  MOVFF  A4B,A53
131CE:  CALL   AB24
.................... 			wr_lcd(1,' ');
131D2:  MOVLW  01
131D4:  MOVLB  A
131D6:  MOVWF  x65
131D8:  MOVLW  20
131DA:  MOVWF  x66
131DC:  MOVLB  0
131DE:  CALL   1864
.................... 			wr_lcd(1,'O');
131E2:  MOVLW  01
131E4:  MOVLB  A
131E6:  MOVWF  x65
131E8:  MOVLW  4F
131EA:  MOVWF  x66
131EC:  MOVLB  0
131EE:  CALL   1864
.................... 			wr_lcd(1,'F');
131F2:  MOVLW  01
131F4:  MOVLB  A
131F6:  MOVWF  x65
131F8:  MOVLW  46
131FA:  MOVWF  x66
131FC:  MOVLB  0
131FE:  CALL   1864
.................... 			wr_lcd(1,'F');
13202:  MOVLW  01
13204:  MOVLB  A
13206:  MOVWF  x65
13208:  MOVLW  46
1320A:  MOVWF  x66
1320C:  MOVLB  0
1320E:  CALL   1864
.................... 			}
.................... 	#else
13212:  RETURN 0
.................... 		lcd_posi(pos);
.................... 		wr_lcd(1,' ');
.................... 		wr_lcd(1,'O');
.................... 		wr_lcd(1,'F');
.................... 		wr_lcd(1,'F');
.................... 	#endif
.................... }
.................... 
.................... 
.................... void exibe_equip_nro_serie(void)
.................... {		
.................... //         "NR:@@@@.@-V:@.@@",	//2
.................... 	#if (st9600r == true)
.................... 		mensagem(4,131);
.................... 	#else
.................... 		mensagem(2,2);
*
048D4:  MOVLW  02
048D6:  MOVLB  A
048D8:  MOVWF  x4D
048DA:  MOVWF  x4E
048DC:  MOVLB  0
048DE:  RCALL  47E8
.................... 	#endif
.................... 	
.................... 	#if (st9600r == true)
.................... 		lcd_gotoxy(2,4);
.................... 	#else
.................... 		lcd_gotoxy(2,2);
048E0:  MOVLW  02
048E2:  MOVLB  A
048E4:  MOVWF  x62
048E6:  MOVWF  x63
048E8:  MOVLB  0
048EA:  RCALL  46C4
.................... 	#endif
.................... 	wr_lcd(1,0B11011111);
048EC:  MOVLW  01
048EE:  MOVLB  A
048F0:  MOVWF  x65
048F2:  MOVLW  DF
048F4:  MOVWF  x66
048F6:  MOVLB  0
048F8:  CALL   1864
.................... 	#if (st9600r == true)
.................... 		lcd_gotoxy(4,4);
.................... 	#else	
.................... 		lcd_gotoxy(4,2);
048FC:  MOVLW  04
048FE:  MOVLB  A
04900:  MOVWF  x62
04902:  MOVLW  02
04904:  MOVWF  x63
04906:  MOVLB  0
04908:  RCALL  46C4
.................... 	#endif
.................... 	wr_lcd(1,buf_nro[0]);
0490A:  MOVLW  01
0490C:  MOVLB  A
0490E:  MOVWF  x65
04910:  MOVFF  4F,A66
04914:  MOVLB  0
04916:  CALL   1864
.................... 	wr_lcd(1,buf_nro[1]);
0491A:  MOVLW  01
0491C:  MOVLB  A
0491E:  MOVWF  x65
04920:  MOVFF  50,A66
04924:  MOVLB  0
04926:  CALL   1864
.................... 	wr_lcd(1,buf_nro[2]);
0492A:  MOVLW  01
0492C:  MOVLB  A
0492E:  MOVWF  x65
04930:  MOVFF  51,A66
04934:  MOVLB  0
04936:  CALL   1864
.................... 	wr_lcd(1,buf_nro[3]);
0493A:  MOVLW  01
0493C:  MOVLB  A
0493E:  MOVWF  x65
04940:  MOVFF  52,A66
04944:  MOVLB  0
04946:  CALL   1864
.................... 	wr_lcd(1,'.');
0494A:  MOVLW  01
0494C:  MOVLB  A
0494E:  MOVWF  x65
04950:  MOVLW  2E
04952:  MOVWF  x66
04954:  MOVLB  0
04956:  CALL   1864
.................... 	wr_lcd(1,cequipo[19]);
0495A:  MOVLW  01
0495C:  MOVLB  A
0495E:  MOVWF  x65
04960:  MOVLW  42
04962:  MOVWF  x66
04964:  MOVLB  0
04966:  CALL   1864
.................... 	#if (st9600r == true)
.................... 		lcd_gotoxy(13,4);
.................... 	#else
.................... 		lcd_gotoxy(13,2);
0496A:  MOVLW  0D
0496C:  MOVLB  A
0496E:  MOVWF  x62
04970:  MOVLW  02
04972:  MOVWF  x63
04974:  MOVLB  0
04976:  RCALL  46C4
.................... 	#endif
.................... 	wr_lcd(1,cequipo[9]);
04978:  MOVLW  01
0497A:  MOVLB  A
0497C:  MOVWF  x65
0497E:  MOVLW  32
04980:  MOVWF  x66
04982:  MOVLB  0
04984:  CALL   1864
.................... 	wr_lcd(1,'.');
04988:  MOVLW  01
0498A:  MOVLB  A
0498C:  MOVWF  x65
0498E:  MOVLW  2E
04990:  MOVWF  x66
04992:  MOVLB  0
04994:  CALL   1864
.................... 	wr_lcd(1,cequipo[11]);
04998:  MOVLW  01
0499A:  MOVLB  A
0499C:  MOVWF  x65
0499E:  MOVLW  58
049A0:  MOVWF  x66
049A2:  MOVLB  0
049A4:  CALL   1864
.................... 	wr_lcd(1,cequipo[12]);
049A8:  MOVLW  01
049AA:  MOVLB  A
049AC:  MOVWF  x65
049AE:  MOVLW  58
049B0:  MOVWF  x66
049B2:  MOVLB  0
049B4:  CALL   1864
049B8:  RETURN 0
.................... }	
.................... 
.................... void mensagem_inicial(void)
.................... {
.................... 
.................... 	buf_nro[0] = read_byte(ee_nro_1);
049BA:  MOVLW  03
049BC:  MOVLB  A
049BE:  MOVWF  x66
049C0:  MOVLW  7C
049C2:  MOVWF  x65
049C4:  MOVLB  0
049C6:  CALL   1C24
049CA:  MOVFF  01,4F
.................... 	buf_nro[1] = read_byte(ee_nro_2);
049CE:  MOVLW  03
049D0:  MOVLB  A
049D2:  MOVWF  x66
049D4:  MOVLW  7D
049D6:  MOVWF  x65
049D8:  MOVLB  0
049DA:  CALL   1C24
049DE:  MOVFF  01,50
.................... 	buf_nro[2] = read_byte(ee_nro_3);
049E2:  MOVLW  03
049E4:  MOVLB  A
049E6:  MOVWF  x66
049E8:  MOVLW  7E
049EA:  MOVWF  x65
049EC:  MOVLB  0
049EE:  CALL   1C24
049F2:  MOVFF  01,51
.................... 	buf_nro[3] = read_byte(ee_nro_4);
049F6:  MOVLW  03
049F8:  MOVLB  A
049FA:  MOVWF  x66
049FC:  MOVLW  7F
049FE:  MOVWF  x65
04A00:  MOVLB  0
04A02:  CALL   1C24
04A06:  MOVFF  01,52
.................... 	if ((buf_nro[0] < '0')	|| (buf_nro[0] > '9'))
04A0A:  MOVF   4F,W
04A0C:  SUBLW  2F
04A0E:  BC    4A16
04A10:  MOVF   4F,W
04A12:  SUBLW  39
04A14:  BC    4A2E
.................... 		{
.................... 		buf_nro[0] = '0';
04A16:  MOVLW  30
04A18:  MOVWF  4F
.................... 		write_byte(ee_nro_1, '0');
04A1A:  MOVLW  03
04A1C:  MOVLB  A
04A1E:  MOVWF  x68
04A20:  MOVLW  7C
04A22:  MOVWF  x67
04A24:  MOVLW  30
04A26:  MOVWF  x69
04A28:  MOVLB  0
04A2A:  CALL   1C46
.................... 		}
.................... 	if ((buf_nro[1] < '0')	|| (buf_nro[1] > '9'))
04A2E:  MOVF   50,W
04A30:  SUBLW  2F
04A32:  BC    4A3A
04A34:  MOVF   50,W
04A36:  SUBLW  39
04A38:  BC    4A52
.................... 		{
.................... 		buf_nro[1] = '0';
04A3A:  MOVLW  30
04A3C:  MOVWF  50
.................... 		write_byte(ee_nro_2, '0');
04A3E:  MOVLW  03
04A40:  MOVLB  A
04A42:  MOVWF  x68
04A44:  MOVLW  7D
04A46:  MOVWF  x67
04A48:  MOVLW  30
04A4A:  MOVWF  x69
04A4C:  MOVLB  0
04A4E:  CALL   1C46
.................... 		}
.................... 	if ((buf_nro[2] < '0')	|| (buf_nro[2] > '9'))
04A52:  MOVF   51,W
04A54:  SUBLW  2F
04A56:  BC    4A5E
04A58:  MOVF   51,W
04A5A:  SUBLW  39
04A5C:  BC    4A76
.................... 		{
.................... 		buf_nro[2] = '0';
04A5E:  MOVLW  30
04A60:  MOVWF  51
.................... 		write_byte(ee_nro_3, '0');
04A62:  MOVLW  03
04A64:  MOVLB  A
04A66:  MOVWF  x68
04A68:  MOVLW  7E
04A6A:  MOVWF  x67
04A6C:  MOVLW  30
04A6E:  MOVWF  x69
04A70:  MOVLB  0
04A72:  CALL   1C46
.................... 		}
.................... 	if ((buf_nro[3] < '0')	|| (buf_nro[3] > '9'))
04A76:  MOVF   52,W
04A78:  SUBLW  2F
04A7A:  BC    4A82
04A7C:  MOVF   52,W
04A7E:  SUBLW  39
04A80:  BC    4A9A
.................... 		{
.................... 		buf_nro[3] = '0';
04A82:  MOVLW  30
04A84:  MOVWF  52
.................... 		write_byte(ee_nro_4, '0');
04A86:  MOVLW  03
04A88:  MOVLB  A
04A8A:  MOVWF  x68
04A8C:  MOVLW  7F
04A8E:  MOVWF  x67
04A90:  MOVLW  30
04A92:  MOVWF  x69
04A94:  MOVLB  0
04A96:  CALL   1C46
.................... 		}
.................... 
.................... 	inic_dis();
04A9A:  CALL   18B4
.................... 	inic_idioma();
04A9E:  CALL   34AC
.................... 	#if (st_prog == true)
.................... 		mensagem(1,1);
.................... 		mensagem(2,2);
.................... 		mensagem(3,0);
.................... 		lcd_gotoxy(5,4);
.................... 		for (aux_b1=0; aux_b1 < 7; aux_b1++)
.................... 			{
.................... 			display(cequipo[aux_b1]);
.................... 			}
.................... 		mensagem(4,0);
.................... 		lcd_gotoxy(3,4);
.................... 		existe = false;
.................... 	#elif (st9600r == true)
.................... 		mensagem(1,69);
.................... 		mensagem(2,66);
.................... 		mensagem(3,2);
.................... //		lcd_gotoxy(5,3);
.................... //		for (aux_b1=0; aux_b1 < 7; aux_b1++)
.................... //			{
.................... //			display(cequipo[aux_b1]);
.................... //			}
.................... 		mensagem(4,0);
.................... 		lcd_gotoxy(3,4);
.................... 		existe = false;
.................... 
.................... 	#elif (disp_lcd == true)
.................... 		#if (st92 == true)
.................... 			mensagem(1,1);
.................... 		#else
.................... 			mensagem(1,1);
04AA2:  MOVLW  01
04AA4:  MOVLB  A
04AA6:  MOVWF  x4D
04AA8:  MOVWF  x4E
04AAA:  MOVLB  0
04AAC:  RCALL  47E8
.................... 		#endif
.................... 		exibe_equip_nro_serie();
04AAE:  RCALL  48D4
.................... 		return;		
04AB0:  BRA    4B84
.................... 	#else
.................... 		mensagem(1,1);
.................... 		exibe_equip_nro_serie();
.................... 		return;
.................... 	#endif
.................... 	for (aux_b1=8; aux_b1 < 20; aux_b1++)
04AB2:  MOVLW  08
04AB4:  MOVLB  3
04AB6:  MOVWF  xB1
04AB8:  MOVF   xB1,W
04ABA:  SUBLW  13
04ABC:  BTFSS  FD8.0
04ABE:  BRA    4B82
.................... 		{
.................... 		data1 = cequipo[aux_b1];
04AC0:  CLRF   03
04AC2:  MOVF   xB1,W
04AC4:  MOVLB  0
04AC6:  CALL   01C2
04ACA:  MOVFF  FE8,3BE
....................        	if (data1 == '@') 
04ACE:  MOVLB  3
04AD0:  MOVF   xBE,W
04AD2:  SUBLW  40
04AD4:  BNZ   4B74
....................        		{
.................... 			if ((buf_nro[0] > ('0'- 1)) && (buf_nro[0] < ('9' + 1)))
04AD6:  MOVF   4F,W
04AD8:  SUBLW  2F
04ADA:  BC    4B3E
04ADC:  MOVF   4F,W
04ADE:  SUBLW  39
04AE0:  BNC   4B3E
.................... 				{
.................... 				if ((buf_nro[1] > ('0'- 1)) && (buf_nro[1] < ('9' + 1)))
04AE2:  MOVF   50,W
04AE4:  SUBLW  2F
04AE6:  BC    4B3E
04AE8:  MOVF   50,W
04AEA:  SUBLW  39
04AEC:  BNC   4B3E
.................... 					{
.................... 					if ((buf_nro[2] > ('0'- 1)) && (buf_nro[2] < ('9' + 1)))
04AEE:  MOVF   51,W
04AF0:  SUBLW  2F
04AF2:  BC    4B3E
04AF4:  MOVF   51,W
04AF6:  SUBLW  39
04AF8:  BNC   4B3E
.................... 						{
.................... 						if ((buf_nro[3] > ('0'- 1)) && (buf_nro[3] < ('9' + 1)))
04AFA:  MOVF   52,W
04AFC:  SUBLW  2F
04AFE:  BC    4B3E
04B00:  MOVF   52,W
04B02:  SUBLW  39
04B04:  BNC   4B3E
.................... 							{
.................... 							display('-');
04B06:  MOVLW  2D
04B08:  MOVLB  A
04B0A:  MOVWF  x4F
04B0C:  MOVLB  0
04B0E:  RCALL  4770
.................... 							existe = true;
04B10:  BSF    21.5
.................... 						    for (aux_b2 = 0; aux_b2 < 4; aux_b2++)
04B12:  MOVLB  3
04B14:  CLRF   xB2
04B16:  MOVF   xB2,W
04B18:  SUBLW  03
04B1A:  BNC   4B3E
....................        							{
.................... 								data1 = buf_nro[aux_b2];
04B1C:  CLRF   03
04B1E:  MOVF   xB2,W
04B20:  ADDLW  4F
04B22:  MOVWF  FE9
04B24:  MOVLW  00
04B26:  ADDWFC 03,W
04B28:  MOVWF  FEA
04B2A:  MOVFF  FEF,3BE
.................... 								display(data1);
04B2E:  MOVFF  3BE,A4F
04B32:  MOVLB  0
04B34:  RCALL  4770
.................... 								aux_b1++;
04B36:  MOVLB  3
04B38:  INCF   xB1,F
04B3A:  INCF   xB2,F
04B3C:  BRA    4B16
....................        							}
.................... 							}
.................... 						}
.................... 					}
.................... 				}
.................... 			if (existe == false)
04B3E:  BTFSC  21.5
04B40:  BRA    4B72
.................... 				{
.................... 				display('-');
04B42:  MOVLW  2D
04B44:  MOVLB  A
04B46:  MOVWF  x4F
04B48:  MOVLB  0
04B4A:  RCALL  4770
.................... 			    for (aux_b2 = 0; aux_b2 < 4; aux_b2++)
04B4C:  MOVLB  3
04B4E:  CLRF   xB2
04B50:  MOVF   xB2,W
04B52:  SUBLW  03
04B54:  BNC   4B72
.................... 					{
.................... 					data1 = cequipo[aux_b1];
04B56:  CLRF   03
04B58:  MOVF   xB1,W
04B5A:  MOVLB  0
04B5C:  CALL   01C2
04B60:  MOVFF  FE8,3BE
.................... 					display(data1);
04B64:  MOVFF  3BE,A4F
04B68:  RCALL  4770
.................... 					aux_b1++;
04B6A:  MOVLB  3
04B6C:  INCF   xB1,F
04B6E:  INCF   xB2,F
04B70:  BRA    4B50
.................... 					}
.................... 
.................... 				}
.................... 			}
04B72:  BRA    4B7E
.................... 		else
.................... 			{
.................... 			display(data1);
04B74:  MOVFF  3BE,A4F
04B78:  MOVLB  0
04B7A:  RCALL  4770
04B7C:  MOVLB  3
.................... 			}
04B7E:  INCF   xB1,F
04B80:  BRA    4AB8
04B82:  MOVLB  0
.................... 		}
04B84:  RETURN 0
.................... 
.................... }	
.................... 
.................... 
.................... #if (st8200c == true) 
.................... 	void leds(char qleds)
.................... 		{
.................... 		}
.................... #endif
.................... 
.................... 
.................... 
.................... /* Fim lcd_16x2 */
.................... 
.................... 
.................... #include "st8500c_regs.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_MAIN                                                        *
.................... ; Funcao: MODULO PRINCIPAL DE CONTROLE									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... /*
.................... OBSERVACAO, QUANDO FOR IMPLEMENTADO O REGISTRO DE 250 EM 250MS, COLOCAR NOS 4 BIT MSB DO MES, ONDE:
.................... BITS:  76543210
.................... 	   ||||||||
.................... 	   ||||++++- Bits do mes variam de 1 a 12.
.................... 	   |||+----- Não usado, sempre 0.
.................... 	   |++------ Bits do intervalo de 250ms dentro do segundo
.................... 	   |		 00 - tempo 0
.................... 	   |		 01 - tempo 250ms
.................... 	   |		 10 - tempo 500ms
.................... 	   |		 11 - tempo 750ms
.................... 	   +-------- indica registro com intervalo menor que 1 segundo.
.................... */
.................... 
.................... void grava_registros(void);
.................... void tx_reg_mdb(void);
.................... void apaga_registros(void);
.................... 
.................... 
.................... void grava_registros(char codigo)
.................... {
.................... 
.................... 	char buf_dados[TAM_REGS];
.................... 
.................... 	
.................... 	buf_dados[0] = codigo;
*
05F70:  MOVFF  A4A,A4B
.................... 	
.................... 	
.................... 	if (codigo == reg_falta_energia)
05F74:  MOVLB  A
05F76:  MOVF   x4A,W
05F78:  SUBLW  20
05F7A:  BNZ   5F9A
.................... 		{
.................... 		#if (com_relogio == true)
.................... 			buf_dados[1] = dia_old;
05F7C:  MOVFF  3D,A4C
.................... 			buf_dados[2] = mes_old;
05F80:  MOVFF  3E,A4D
.................... 			buf_dados[3] = ano_old;
05F84:  MOVFF  3F,A4E
.................... 			buf_dados[4] = hora_old;
05F88:  MOVFF  40,A4F
.................... 			buf_dados[5] = minuto_old;
05F8C:  MOVFF  41,A50
.................... 			buf_dados[6] = segundo_old;
05F90:  MOVFF  42,A51
.................... 		#else
.................... 			buf_dados[1] = dia;
.................... 			buf_dados[2] = mes;
.................... 			buf_dados[3] = ano;
.................... 			buf_dados[4] = hora;
.................... 			buf_dados[5] = minuto;
.................... 			buf_dados[6] = 0;
.................... 		#endif
.................... 		buf_dados[7] = 240;
05F94:  MOVLW  F0
05F96:  MOVWF  x52
.................... 		}
05F98:  BRA    5FBA
.................... 	else
....................        	{
.................... 		buf_dados[1] = dia;
05F9A:  MOVFF  3BF,A4C
.................... 		buf_dados[2] = mes;
05F9E:  MOVFF  3C0,A4D
.................... 		buf_dados[3] = ano;
05FA2:  MOVFF  3C1,A4E
.................... 		buf_dados[4] = hora;
05FA6:  MOVFF  3C2,A4F
.................... 		buf_dados[5] = minuto;
05FAA:  MOVFF  3C3,A50
.................... 		if (codigo == registro_normal)
05FAE:  DECFSZ x4A,W
05FB0:  BRA    5FB6
.................... 			{
.................... 			buf_dados[6] = 0;
05FB2:  CLRF   x51
.................... 			}
05FB4:  BRA    5FBA
.................... 		else
.................... 			{
.................... 			buf_dados[6] = segundo;
05FB6:  MOVFF  3C4,A51
.................... 			}
.................... 		}
.................... 
.................... 
.................... 	codigo_old_regs = codigo;
05FBA:  MOVFF  A4A,4D
....................   	buf_dados[7] = frequencia;
05FBE:  MOVFF  24E,A52
....................   	
.................... 	buf_dados[8] = (char)(make8(tensao_tri, 1));
05FC2:  MOVFF  28F,A53
.................... 	buf_dados[9] = (char)(make8(tensao_tri, 0));
05FC6:  MOVFF  28E,A54
.................... 	#if (com_tc == true)
.................... 		aux_f1 = (float)(corrente_tri);
05FCA:  MOVFF  291,A7E
05FCE:  MOVFF  290,A7D
05FD2:  MOVLB  0
05FD4:  CALL   2924
05FD8:  MOVFF  03,397
05FDC:  MOVFF  02,396
05FE0:  MOVFF  01,395
05FE4:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc;
05FE8:  MOVFF  397,A80
05FEC:  MOVFF  396,A7F
05FF0:  MOVFF  395,A7E
05FF4:  MOVFF  394,A7D
05FF8:  MOVFF  351,A84
05FFC:  MOVFF  350,A83
06000:  MOVFF  34F,A82
06004:  MOVFF  34E,A81
06008:  CALL   5306
0600C:  MOVFF  03,397
06010:  MOVFF  02,396
06014:  MOVFF  01,395
06018:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
0601C:  MOVFF  397,A7C
06020:  MOVFF  396,A7B
06024:  MOVFF  395,A7A
06028:  MOVFF  394,A79
0602C:  CALL   53FC
06030:  MOVFF  02,363
06034:  MOVFF  01,362
.................... 		buf_dados[10] = (char)(make8(aux_w1, 1));
06038:  MOVFF  363,A55
.................... 		buf_dados[11] = (char)(make8(aux_w1, 0));
0603C:  MOVFF  362,A56
.................... 	#else
.................... 		buf_dados[10] = (char)(make8(corrente_tri, 1));
.................... 		buf_dados[11] = (char)(make8(corrente_tri, 0));
.................... 	#endif
.................... 	buf_dados[12] = (char)(make8(fator_pot, 1));
06040:  MOVFF  293,A57
.................... 	buf_dados[13] = (char)(make8(fator_pot, 0));
06044:  MOVFF  292,A58
.................... 
.................... 	#if (com_tc == true)
.................... 		aux_f1 = (float)(dem_ativa_proj);
06048:  MOVFF  27F,A7E
0604C:  MOVFF  27E,A7D
06050:  CALL   2924
06054:  MOVFF  03,397
06058:  MOVFF  02,396
0605C:  MOVFF  01,395
06060:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
06064:  MOVFF  397,A80
06068:  MOVFF  396,A7F
0606C:  MOVFF  395,A7E
06070:  MOVFF  394,A7D
06074:  MOVFF  351,A84
06078:  MOVFF  350,A83
0607C:  MOVFF  34F,A82
06080:  MOVFF  34E,A81
06084:  CALL   5306
06088:  MOVFF  03,A6E
0608C:  MOVFF  02,A6D
06090:  MOVFF  01,A6C
06094:  MOVFF  00,A6B
06098:  MOVFF  4C2,A7E
0609C:  MOVFF  4C1,A7D
060A0:  CALL   2924
060A4:  MOVFF  A6E,A80
060A8:  MOVFF  A6D,A7F
060AC:  MOVFF  A6C,A7E
060B0:  MOVFF  A6B,A7D
060B4:  MOVFF  03,A84
060B8:  MOVFF  02,A83
060BC:  MOVFF  01,A82
060C0:  MOVFF  00,A81
060C4:  CALL   5306
060C8:  MOVFF  03,397
060CC:  MOVFF  02,396
060D0:  MOVFF  01,395
060D4:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
060D8:  MOVFF  397,A7C
060DC:  MOVFF  396,A7B
060E0:  MOVFF  395,A7A
060E4:  MOVFF  394,A79
060E8:  CALL   53FC
060EC:  MOVFF  02,363
060F0:  MOVFF  01,362
.................... 		buf_dados[14] = (char)(make8(aux_w1, 1));
060F4:  MOVFF  363,A59
.................... 		buf_dados[15] = (char)(make8(aux_w1, 0));
060F8:  MOVFF  362,A5A
.................... 
.................... 		aux_f1 = (float)(dem_reativa_proj);
060FC:  MOVFF  281,A7E
06100:  MOVFF  280,A7D
06104:  CALL   2924
06108:  MOVFF  03,397
0610C:  MOVFF  02,396
06110:  MOVFF  01,395
06114:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
06118:  MOVFF  397,A80
0611C:  MOVFF  396,A7F
06120:  MOVFF  395,A7E
06124:  MOVFF  394,A7D
06128:  MOVFF  351,A84
0612C:  MOVFF  350,A83
06130:  MOVFF  34F,A82
06134:  MOVFF  34E,A81
06138:  CALL   5306
0613C:  MOVFF  03,A6E
06140:  MOVFF  02,A6D
06144:  MOVFF  01,A6C
06148:  MOVFF  00,A6B
0614C:  MOVFF  4C2,A7E
06150:  MOVFF  4C1,A7D
06154:  CALL   2924
06158:  MOVFF  A6E,A80
0615C:  MOVFF  A6D,A7F
06160:  MOVFF  A6C,A7E
06164:  MOVFF  A6B,A7D
06168:  MOVFF  03,A84
0616C:  MOVFF  02,A83
06170:  MOVFF  01,A82
06174:  MOVFF  00,A81
06178:  CALL   5306
0617C:  MOVFF  03,397
06180:  MOVFF  02,396
06184:  MOVFF  01,395
06188:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
0618C:  MOVFF  397,A7C
06190:  MOVFF  396,A7B
06194:  MOVFF  395,A7A
06198:  MOVFF  394,A79
0619C:  CALL   53FC
061A0:  MOVFF  02,363
061A4:  MOVFF  01,362
.................... 		buf_dados[16] = (char)(make8(aux_w1, 1));
061A8:  MOVFF  363,A5B
.................... 		buf_dados[17] = (char)(make8(aux_w1, 0));
061AC:  MOVFF  362,A5C
.................... 
.................... 		aux_f1 = (float)(consumo_ati);
061B0:  MOVFF  42F,A7C
061B4:  MOVFF  42E,A7B
061B8:  MOVFF  42D,A7A
061BC:  MOVFF  42C,A79
061C0:  CALL   5438
061C4:  MOVFF  03,397
061C8:  MOVFF  02,396
061CC:  MOVFF  01,395
061D0:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
061D4:  MOVFF  397,A80
061D8:  MOVFF  396,A7F
061DC:  MOVFF  395,A7E
061E0:  MOVFF  394,A7D
061E4:  MOVFF  351,A84
061E8:  MOVFF  350,A83
061EC:  MOVFF  34F,A82
061F0:  MOVFF  34E,A81
061F4:  CALL   5306
061F8:  MOVFF  03,A6E
061FC:  MOVFF  02,A6D
06200:  MOVFF  01,A6C
06204:  MOVFF  00,A6B
06208:  MOVFF  4C2,A7E
0620C:  MOVFF  4C1,A7D
06210:  CALL   2924
06214:  MOVFF  A6E,A80
06218:  MOVFF  A6D,A7F
0621C:  MOVFF  A6C,A7E
06220:  MOVFF  A6B,A7D
06224:  MOVFF  03,A84
06228:  MOVFF  02,A83
0622C:  MOVFF  01,A82
06230:  MOVFF  00,A81
06234:  CALL   5306
06238:  MOVFF  03,397
0623C:  MOVFF  02,396
06240:  MOVFF  01,395
06244:  MOVFF  00,394
.................... 		aux_l1 = (int32)(aux_f1);
06248:  MOVFF  397,A7C
0624C:  MOVFF  396,A7B
06250:  MOVFF  395,A7A
06254:  MOVFF  394,A79
06258:  CALL   5470
0625C:  MOVFF  03,373
06260:  MOVFF  02,372
06264:  MOVFF  01,371
06268:  MOVFF  00,370
.................... 		buf_dados[18] = (char)(make8(aux_l1,3));
0626C:  MOVFF  373,A5D
.................... 		buf_dados[19] = (char)(make8(aux_l1,2));
06270:  MOVFF  372,A5E
.................... 		buf_dados[20] = (char)(make8(aux_l1,1));
06274:  MOVFF  371,A5F
.................... 		buf_dados[21] = (char)(make8(aux_l1,0));
06278:  MOVFF  370,A60
.................... 
.................... 		aux_f1 = (float)(consumo_reati);
0627C:  MOVFF  42B,A7C
06280:  MOVFF  42A,A7B
06284:  MOVFF  429,A7A
06288:  MOVFF  428,A79
0628C:  CALL   5438
06290:  MOVFF  03,397
06294:  MOVFF  02,396
06298:  MOVFF  01,395
0629C:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
062A0:  MOVFF  397,A80
062A4:  MOVFF  396,A7F
062A8:  MOVFF  395,A7E
062AC:  MOVFF  394,A7D
062B0:  MOVFF  351,A84
062B4:  MOVFF  350,A83
062B8:  MOVFF  34F,A82
062BC:  MOVFF  34E,A81
062C0:  CALL   5306
062C4:  MOVFF  03,A6E
062C8:  MOVFF  02,A6D
062CC:  MOVFF  01,A6C
062D0:  MOVFF  00,A6B
062D4:  MOVFF  4C2,A7E
062D8:  MOVFF  4C1,A7D
062DC:  CALL   2924
062E0:  MOVFF  A6E,A80
062E4:  MOVFF  A6D,A7F
062E8:  MOVFF  A6C,A7E
062EC:  MOVFF  A6B,A7D
062F0:  MOVFF  03,A84
062F4:  MOVFF  02,A83
062F8:  MOVFF  01,A82
062FC:  MOVFF  00,A81
06300:  CALL   5306
06304:  MOVFF  03,397
06308:  MOVFF  02,396
0630C:  MOVFF  01,395
06310:  MOVFF  00,394
.................... 		aux_l1 = (int32)(aux_f1);
06314:  MOVFF  397,A7C
06318:  MOVFF  396,A7B
0631C:  MOVFF  395,A7A
06320:  MOVFF  394,A79
06324:  CALL   5470
06328:  MOVFF  03,373
0632C:  MOVFF  02,372
06330:  MOVFF  01,371
06334:  MOVFF  00,370
.................... 		buf_dados[22] = (char)(make8(aux_l1,3));
06338:  MOVFF  373,A61
.................... 		buf_dados[23] = (char)(make8(aux_l1,2));
0633C:  MOVFF  372,A62
.................... 		buf_dados[24] = (char)(make8(aux_l1,1));
06340:  MOVFF  371,A63
.................... 		buf_dados[26] = (char)(make8(aux_l1,0));
06344:  MOVFF  370,A65
.................... 
.................... 		aux_f1 = (float)(dem_ativa);
06348:  MOVFF  277,A7E
0634C:  MOVFF  276,A7D
06350:  CALL   2924
06354:  MOVFF  03,397
06358:  MOVFF  02,396
0635C:  MOVFF  01,395
06360:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
06364:  MOVFF  397,A80
06368:  MOVFF  396,A7F
0636C:  MOVFF  395,A7E
06370:  MOVFF  394,A7D
06374:  MOVFF  351,A84
06378:  MOVFF  350,A83
0637C:  MOVFF  34F,A82
06380:  MOVFF  34E,A81
06384:  CALL   5306
06388:  MOVFF  03,A6E
0638C:  MOVFF  02,A6D
06390:  MOVFF  01,A6C
06394:  MOVFF  00,A6B
06398:  MOVFF  4C2,A7E
0639C:  MOVFF  4C1,A7D
063A0:  CALL   2924
063A4:  MOVFF  A6E,A80
063A8:  MOVFF  A6D,A7F
063AC:  MOVFF  A6C,A7E
063B0:  MOVFF  A6B,A7D
063B4:  MOVFF  03,A84
063B8:  MOVFF  02,A83
063BC:  MOVFF  01,A82
063C0:  MOVFF  00,A81
063C4:  CALL   5306
063C8:  MOVFF  03,397
063CC:  MOVFF  02,396
063D0:  MOVFF  01,395
063D4:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
063D8:  MOVFF  397,A7C
063DC:  MOVFF  396,A7B
063E0:  MOVFF  395,A7A
063E4:  MOVFF  394,A79
063E8:  CALL   53FC
063EC:  MOVFF  02,363
063F0:  MOVFF  01,362
.................... 		buf_dados[26] = (char)(make8(aux_w1, 1));
063F4:  MOVFF  363,A65
.................... 		buf_dados[27] = (char)(make8(aux_w1, 0));
063F8:  MOVFF  362,A66
.................... 		
.................... 		aux_f1 = (float)(dem_reativa);
063FC:  MOVFF  279,A7E
06400:  MOVFF  278,A7D
06404:  CALL   2924
06408:  MOVFF  03,397
0640C:  MOVFF  02,396
06410:  MOVFF  01,395
06414:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
06418:  MOVFF  397,A80
0641C:  MOVFF  396,A7F
06420:  MOVFF  395,A7E
06424:  MOVFF  394,A7D
06428:  MOVFF  351,A84
0642C:  MOVFF  350,A83
06430:  MOVFF  34F,A82
06434:  MOVFF  34E,A81
06438:  CALL   5306
0643C:  MOVFF  03,A6E
06440:  MOVFF  02,A6D
06444:  MOVFF  01,A6C
06448:  MOVFF  00,A6B
0644C:  MOVFF  4C2,A7E
06450:  MOVFF  4C1,A7D
06454:  CALL   2924
06458:  MOVFF  A6E,A80
0645C:  MOVFF  A6D,A7F
06460:  MOVFF  A6C,A7E
06464:  MOVFF  A6B,A7D
06468:  MOVFF  03,A84
0646C:  MOVFF  02,A83
06470:  MOVFF  01,A82
06474:  MOVFF  00,A81
06478:  CALL   5306
0647C:  MOVFF  03,397
06480:  MOVFF  02,396
06484:  MOVFF  01,395
06488:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
0648C:  MOVFF  397,A7C
06490:  MOVFF  396,A7B
06494:  MOVFF  395,A7A
06498:  MOVFF  394,A79
0649C:  CALL   53FC
064A0:  MOVFF  02,363
064A4:  MOVFF  01,362
.................... 		buf_dados[28] = (char)(make8(aux_w1, 1));
064A8:  MOVFF  363,A67
.................... 		buf_dados[29] = (char)(make8(aux_w1, 0));
064AC:  MOVFF  362,A68
.................... 	#else
.................... 		buf_dados[14] = (char)(make8(dem_ativa_proj, 1));
.................... 		buf_dados[15] = (char)(make8(dem_ativa_proj, 0));
.................... 		buf_dados[16] = (char)(make8(dem_reativa_proj, 1));
.................... 		buf_dados[17] = (char)(make8(dem_reativa_proj, 0));
.................... 	
.................... 		buf_dados[18] = (char)(make8(consumo_ati,3));
.................... 		buf_dados[19] = (char)(make8(consumo_ati,2));
.................... 		buf_dados[20] = (char)(make8(consumo_ati,1));
.................... 		buf_dados[21] = (char)(make8(consumo_ati,0));
.................... 	
.................... 		buf_dados[22] = (char)(make8(consumo_reati,3));
.................... 		buf_dados[23] = (char)(make8(consumo_reati,2));
.................... 		buf_dados[24] = (char)(make8(consumo_reati,1));
.................... 		buf_dados[25] = (char)(make8(consumo_reati,0));
.................... 	
.................... 		buf_dados[26] = (char)(make8(dem_ativa, 1));
.................... 		buf_dados[27] = (char)(make8(dem_ativa, 0));
.................... 		buf_dados[28] = (char)(make8(dem_reativa, 1));
.................... 		buf_dados[29] = (char)(make8(dem_reativa, 0));
.................... 	#endif
.................... 
.................... 	buf_dados[30] = SAIDA2;
064B0:  MOVFF  885,A69
.................... 	buf_dados[31] = SAIDA3;
064B4:  MOVFF  886,A6A
.................... 
.................... 
.................... 	aux_l1 = 0;
064B8:  MOVLB  3
064BA:  CLRF   x73
064BC:  CLRF   x72
064BE:  CLRF   x71
064C0:  CLRF   x70
.................... 	#if (com_relogio == true)
.................... 		aux_w1 = read_word_nvr(ds_ptr_regs);
064C2:  MOVLW  0A
064C4:  MOVLB  A
064C6:  MOVWF  x79
064C8:  MOVLB  0
064CA:  CALL   54CA
064CE:  MOVFF  02,363
064D2:  MOVFF  01,362
.................... 	#else
.................... 		aux_w1 = read_word(ee_ptr_regs);
.................... 	#endif
.................... 	aux_l1 = (int32)(aux_w1);
064D6:  MOVLB  3
064D8:  CLRF   x73
064DA:  CLRF   x72
064DC:  MOVFF  363,371
064E0:  MOVFF  362,370
.................... 	aux_l1 = (int32)(aux_l1 * TAM_REGS);
064E4:  RLCF   x70,W
064E6:  MOVWF  00
064E8:  RLCF   x71,W
064EA:  MOVWF  01
064EC:  RLCF   x72,W
064EE:  MOVWF  02
064F0:  RLCF   x73,W
064F2:  MOVWF  03
064F4:  RLCF   00,F
064F6:  RLCF   01,F
064F8:  RLCF   02,F
064FA:  RLCF   03,F
064FC:  RLCF   00,F
064FE:  RLCF   01,F
06500:  RLCF   02,F
06502:  RLCF   03,F
06504:  RLCF   00,F
06506:  RLCF   01,F
06508:  RLCF   02,F
0650A:  RLCF   03,F
0650C:  RLCF   00,F
0650E:  RLCF   01,F
06510:  RLCF   02,F
06512:  RLCF   03,F
06514:  MOVLW  E0
06516:  ANDWF  00,F
06518:  MOVFF  03,373
0651C:  MOVFF  02,372
06520:  MOVFF  01,371
06524:  MOVFF  00,370
.................... 		
.................... 	//	antes de salva, verifica se este setor está apagado,caso não esteja, apaga o setor de 4K.
.................... 	if (read_byte_flash(aux_l1) != 0xff)// primeira posicao disponível, possui o codigo, sempre != 255
06528:  MOVFF  373,A7C
0652C:  MOVFF  372,A7B
06530:  MOVFF  371,A7A
06534:  MOVFF  370,A79
06538:  MOVLB  0
0653A:  CALL   550A
0653E:  INCFSZ 01,W
06540:  BRA    6544
06542:  BRA    6558
.................... 		{
.................... 		sector_flash_erase(aux_l1);
06544:  MOVFF  373,A7C
06548:  MOVFF  372,A7B
0654C:  MOVFF  371,A7A
06550:  MOVFF  370,A79
06554:  CALL   56D6
.................... 		}
.................... 	// salva no buffer da flash 
.................... 	aux_b1 = TAM_REGS;
06558:  MOVLW  20
0655A:  MOVLB  3
0655C:  MOVWF  xB1
.................... 
.................... 	for (aux_b4 = 0; aux_b4 < aux_b1; aux_b4++)
0655E:  CLRF   xB4
06560:  MOVF   xB1,W
06562:  SUBWF  xB4,W
06564:  BC    65F2
.................... 		{
.................... 	//	antes de salva, verifica se este setor está apagado,caso não esteja, apaga o setor de 4K.
.................... 		if (read_byte_flash(aux_l1) != 0xff)	// posicao disponível, possui o codigo, sempre != 255
06566:  MOVFF  373,A7C
0656A:  MOVFF  372,A7B
0656E:  MOVFF  371,A7A
06572:  MOVFF  370,A79
06576:  MOVLB  0
06578:  CALL   550A
0657C:  INCFSZ 01,W
0657E:  BRA    6582
06580:  BRA    6596
.................... 			{
.................... 			sector_flash_erase(aux_l1);
06582:  MOVFF  373,A7C
06586:  MOVFF  372,A7B
0658A:  MOVFF  371,A7A
0658E:  MOVFF  370,A79
06592:  CALL   56D6
.................... 			}
.................... 		write_byte_flash(aux_l1++, buf_dados[aux_b4]);
06596:  MOVLB  3
06598:  MOVFF  373,03
0659C:  MOVFF  372,02
065A0:  MOVFF  371,01
065A4:  MOVFF  370,00
065A8:  MOVLW  01
065AA:  ADDWF  x70,F
065AC:  BTFSC  FD8.0
065AE:  INCF   x71,F
065B0:  BTFSC  FD8.2
065B2:  INCF   x72,F
065B4:  BTFSC  FD8.2
065B6:  INCF   x73,F
065B8:  MOVFF  03,A7D
065BC:  MOVFF  02,A6D
065C0:  MOVFF  01,A6C
065C4:  MOVFF  00,A6B
065C8:  CLRF   03
065CA:  MOVF   xB4,W
065CC:  ADDLW  4B
065CE:  MOVWF  FE9
065D0:  MOVLW  0A
065D2:  ADDWFC 03,W
065D4:  MOVWF  FEA
065D6:  MOVFF  FEF,A7E
065DA:  MOVFF  02,A7C
065DE:  MOVFF  01,A7B
065E2:  MOVFF  00,A7A
065E6:  MOVLB  0
065E8:  CALL   5748
065EC:  MOVLB  3
065EE:  INCF   xB4,F
065F0:  BRA    6560
.................... 		}
.................... 	WRDI(aux_l1);	//Desabilita flash para gravação.
065F2:  MOVFF  373,A7C
065F6:  MOVFF  372,A7B
065FA:  MOVFF  371,A7A
065FE:  MOVFF  370,A79
06602:  MOVLB  0
06604:  CALL   57C4
.................... 	aux_w1++;
06608:  MOVLB  3
0660A:  INCF   x62,F
0660C:  BTFSC  FD8.2
0660E:  INCF   x63,F
.................... 	#if (com_relogio == true)
.................... 		write_word_nvr(ds_ptr_regs, aux_w1);   
06610:  MOVLW  0A
06612:  MOVLB  A
06614:  MOVWF  x79
06616:  MOVFF  363,A7B
0661A:  MOVFF  362,A7A
0661E:  MOVLB  0
06620:  CALL   5802
.................... 	#else
.................... 		write_word(ee_ptr_regs, aux_w1);   
.................... 	#endif
.................... 	
.................... 	aux_b1 = (char)(aux_w1 / nro_registros_por_banco);
06624:  MOVFF  363,A6C
06628:  MOVFF  362,A6B
0662C:  MOVLW  3A
0662E:  MOVLB  A
06630:  MOVWF  x6E
06632:  MOVLW  98
06634:  MOVWF  x6D
06636:  MOVLB  0
06638:  CALL   4ECC
0663C:  MOVFF  01,3B1
.................... 	#if (com_relogio == true)
.................... 		write_byte_nvr(ds_banco_escrita,aux_b1);
06640:  MOVLW  14
06642:  MOVLB  A
06644:  MOVWF  x6B
06646:  MOVFF  3B1,A6C
0664A:  MOVLB  0
0664C:  RCALL  5F64
.................... 	#else
.................... 		write_byte(ee_banco_escrita,aux_b1);
.................... 	#endif
.................... 	
.................... 	if (aux_w1 >= (limite_registros - 3 ))
0664E:  MOVLB  3
06650:  MOVF   x63,W
06652:  SUBLW  39
06654:  BC    668E
06656:  XORLW  FF
06658:  BNZ   6660
0665A:  MOVF   x62,W
0665C:  SUBLW  94
0665E:  BC    668E
.................... 		{
.................... 		#if (com_relogio == true)
.................... 			write_byte_nvr(ds_banco_escrita,0);
06660:  MOVLW  14
06662:  MOVLB  A
06664:  MOVWF  x6B
06666:  CLRF   x6C
06668:  MOVLB  0
0666A:  RCALL  5F64
.................... 			write_word_nvr(ds_ptr_regs, 0);   
0666C:  MOVLW  0A
0666E:  MOVLB  A
06670:  MOVWF  x79
06672:  CLRF   x7B
06674:  CLRF   x7A
06676:  MOVLB  0
06678:  CALL   5802
.................... 		#else
.................... 			write_byte(ee_banco_escrita,0);
.................... 			write_word(ee_ptr_regs, 0);   
.................... 		#endif
.................... 		sector_flash_erase(0);
0667C:  MOVLB  A
0667E:  CLRF   x7C
06680:  CLRF   x7B
06682:  CLRF   x7A
06684:  CLRF   x79
06686:  MOVLB  0
06688:  CALL   56D6
0668C:  MOVLB  3
.................... 		}
.................... 	
.................... 	write_long(ee_consumo_ati, consumo_ati);
0668E:  MOVLW  01
06690:  MOVLB  A
06692:  MOVWF  x7A
06694:  MOVLW  04
06696:  MOVWF  x79
06698:  MOVFF  42F,A7E
0669C:  MOVFF  42E,A7D
066A0:  MOVFF  42D,A7C
066A4:  MOVFF  42C,A7B
066A8:  MOVLB  0
066AA:  CALL   1B0A
.................... 	write_long(ee_consumo_reati, consumo_reati);
066AE:  MOVLW  01
066B0:  MOVLB  A
066B2:  MOVWF  x7A
066B4:  MOVLW  08
066B6:  MOVWF  x79
066B8:  MOVFF  42B,A7E
066BC:  MOVFF  42A,A7D
066C0:  MOVFF  429,A7C
066C4:  MOVFF  428,A7B
066C8:  MOVLB  0
066CA:  CALL   1B0A
066CE:  RETURN 0
.................... 	
.................... 
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /*   Transmissão dos registros */
.................... void tx_reg_mdb(void)
.................... {
.................... 	
.................... 	char x;
.................... 	char y;
.................... 	#if (com_relogio == true)
.................... 		aux_b4 = read_byte_nvr(ds_banco_leitura);
*
0966A:  MOVLW  13
0966C:  MOVLB  A
0966E:  MOVWF  x4F
09670:  MOVLB  0
09672:  CALL   731A
09676:  MOVFF  01,3B4
.................... 	#else
.................... 		aux_b4 = read_byte(ee_banco_leitura);
.................... 	#endif
.................... 	if (aux_b4 > 8)
0967A:  MOVLB  3
0967C:  MOVF   xB4,W
0967E:  SUBLW  08
09680:  BC    9694
.................... 		{
.................... 		aux_b4 = 0;
09682:  CLRF   xB4
.................... 		#if (com_relogio == true)
.................... 			write_byte_nvr(ds_banco_leitura, 0);
09684:  MOVLW  13
09686:  MOVLB  A
09688:  MOVWF  x6B
0968A:  CLRF   x6C
0968C:  MOVLB  0
0968E:  CALL   5F64
09692:  MOVLB  3
.................... 		#else
.................... 			write_byte(ee_banco_leitura, 0);
.................... 		#endif
.................... 		}
.................... 	aux_l1 = (int32)(addr_regs_modbus - addr_inicio_coleta_regs);
09694:  MOVLW  98
09696:  MOVLB  5
09698:  SUBWF  x29,W
0969A:  MOVWF  00
0969C:  MOVLW  3A
0969E:  SUBWFB x2A,W
096A0:  MOVFF  00,370
096A4:  MOVLB  3
096A6:  MOVWF  x71
096A8:  CLRF   x72
096AA:  CLRF   x73
.................... 	aux_l2 = (int32)(nro_registros_por_banco * TAM_REGS * aux_b4);
096AC:  MOVLB  A
096AE:  CLRF   x75
096B0:  MOVLW  07
096B2:  MOVWF  x74
096B4:  MOVLW  53
096B6:  MOVWF  x73
096B8:  CLRF   x72
096BA:  CLRF   x79
096BC:  CLRF   x78
096BE:  CLRF   x77
096C0:  MOVFF  3B4,A76
096C4:  MOVLB  0
096C6:  CALL   67FC
096CA:  MOVFF  03,377
096CE:  MOVFF  02,376
096D2:  MOVFF  01,375
096D6:  MOVFF  00,374
.................... 	aux_l1 = aux_l2 + (int32)(aux_l1 * TAM_REGS);
096DA:  MOVLB  3
096DC:  RLCF   x70,W
096DE:  MOVWF  00
096E0:  RLCF   x71,W
096E2:  MOVWF  01
096E4:  RLCF   x72,W
096E6:  MOVWF  02
096E8:  RLCF   x73,W
096EA:  MOVWF  03
096EC:  RLCF   00,F
096EE:  RLCF   01,F
096F0:  RLCF   02,F
096F2:  RLCF   03,F
096F4:  RLCF   00,F
096F6:  RLCF   01,F
096F8:  RLCF   02,F
096FA:  RLCF   03,F
096FC:  RLCF   00,F
096FE:  RLCF   01,F
09700:  RLCF   02,F
09702:  RLCF   03,F
09704:  RLCF   00,F
09706:  RLCF   01,F
09708:  RLCF   02,F
0970A:  RLCF   03,F
0970C:  MOVLW  E0
0970E:  ANDWF  00,F
09710:  MOVF   00,W
09712:  ADDWF  x74,W
09714:  MOVWF  x70
09716:  MOVF   01,W
09718:  ADDWFC x75,W
0971A:  MOVWF  x71
0971C:  MOVF   02,W
0971E:  ADDWFC x76,W
09720:  MOVWF  x72
09722:  MOVF   03,W
09724:  ADDWFC x77,W
09726:  MOVWF  x73
.................... 	y = (nro_pontos_modbus * 2);
09728:  BCF    FD8.0
0972A:  MOVLB  5
0972C:  RLCF   x27,W
0972E:  MOVWF  02
09730:  RLCF   x28,W
09732:  MOVFF  02,A4E
09736:  MOVLB  A
.................... 	for (x = 0; x < y ; x++)
09738:  CLRF   x4D
0973A:  MOVF   x4E,W
0973C:  SUBWF  x4D,W
0973E:  BC    97B4
.................... 		{
.................... 		buf_tx[ptrtx++] = read_byte_flash(aux_l1++); 
09740:  MOVLB  5
09742:  MOVF   x2F,W
09744:  INCF   x2F,F
09746:  ADDLW  48
09748:  MOVWF  01
0974A:  MOVLW  09
0974C:  MOVWF  03
0974E:  BTFSC  FD8.0
09750:  INCF   03,F
09752:  MOVFF  01,A4F
09756:  MOVFF  03,A50
0975A:  MOVLB  3
0975C:  MOVFF  373,03
09760:  MOVFF  372,02
09764:  MOVFF  371,01
09768:  MOVFF  370,00
0976C:  MOVLW  01
0976E:  ADDWF  x70,F
09770:  BTFSC  FD8.0
09772:  INCF   x71,F
09774:  BTFSC  FD8.2
09776:  INCF   x72,F
09778:  BTFSC  FD8.2
0977A:  INCF   x73,F
0977C:  MOVFF  03,A54
09780:  MOVFF  02,A53
09784:  MOVFF  01,A52
09788:  MOVFF  00,A51
0978C:  MOVFF  03,A7C
09790:  MOVFF  02,A7B
09794:  MOVFF  01,A7A
09798:  MOVFF  00,A79
0979C:  MOVLB  0
0979E:  CALL   550A
097A2:  MOVFF  A50,FEA
097A6:  MOVFF  A4F,FE9
097AA:  MOVFF  01,FEF
097AE:  MOVLB  A
097B0:  INCF   x4D,F
097B2:  BRA    973A
....................     	}
097B4:  MOVLB  0
097B6:  GOTO   A4A2 (RETURN)
.................... }
.................... 
.................... 
.................... void apaga_registros(void)
.................... {
.................... 	#if (com_relogio == true)
.................... 		write_byte_nvr(ds_banco_escrita, 0);
*
0A660:  MOVLW  14
0A662:  MOVLB  A
0A664:  MOVWF  x6B
0A666:  CLRF   x6C
0A668:  MOVLB  0
0A66A:  CALL   5F64
.................... 		write_byte_nvr(ds_banco_leitura, 0);
0A66E:  MOVLW  13
0A670:  MOVLB  A
0A672:  MOVWF  x6B
0A674:  CLRF   x6C
0A676:  MOVLB  0
0A678:  CALL   5F64
.................... 		write_word_nvr(ds_ptr_regs, 0);
0A67C:  MOVLW  0A
0A67E:  MOVLB  A
0A680:  MOVWF  x79
0A682:  CLRF   x7B
0A684:  CLRF   x7A
0A686:  MOVLB  0
0A688:  CALL   5802
.................... 	#else
.................... 		write_byte(ee_banco_escrita, 0);
.................... 		write_byte(ee_banco_leitura, 0);
.................... 		write_word(ee_ptr_regs, 0);
.................... 	#endif
.................... 	for (aux_l1 = 0; aux_l1 < 32768; aux_l1++)
0A68C:  MOVLB  3
0A68E:  CLRF   x73
0A690:  CLRF   x72
0A692:  CLRF   x71
0A694:  CLRF   x70
0A696:  MOVF   x73,F
0A698:  BNZ   A6D8
0A69A:  MOVF   x72,F
0A69C:  BNZ   A6D8
0A69E:  MOVF   x71,W
0A6A0:  SUBLW  7F
0A6A2:  BNC   A6D8
.................... 		{
.................... 		sector_flash_erase(aux_l1);
0A6A4:  MOVFF  373,A7C
0A6A8:  MOVFF  372,A7B
0A6AC:  MOVFF  371,A7A
0A6B0:  MOVFF  370,A79
0A6B4:  MOVLB  0
0A6B6:  CALL   56D6
.................... 		aux_l1 += 4096;
0A6BA:  MOVLW  10
0A6BC:  MOVLB  3
0A6BE:  ADDWF  x71,F
0A6C0:  MOVLW  00
0A6C2:  ADDWFC x72,F
0A6C4:  ADDWFC x73,F
0A6C6:  MOVLW  01
0A6C8:  ADDWF  x70,F
0A6CA:  BTFSC  FD8.0
0A6CC:  INCF   x71,F
0A6CE:  BTFSC  FD8.2
0A6D0:  INCF   x72,F
0A6D2:  BTFSC  FD8.2
0A6D4:  INCF   x73,F
0A6D6:  BRA    A696
.................... 		}
.................... 	grava_ocorrencias(reg_apagou);
0A6D8:  MOVLW  1D
0A6DA:  MOVLB  A
0A6DC:  MOVWF  x58
0A6DE:  MOVLB  0
0A6E0:  CALL   5828
.................... 	registro = 0;
0A6E4:  MOVLB  4
0A6E6:  CLRF   xCC
.................... 	write_byte(ee_prog_time, 0);
0A6E8:  MOVLB  A
0A6EA:  CLRF   x68
0A6EC:  MOVLW  30
0A6EE:  MOVWF  x67
0A6F0:  CLRF   x69
0A6F2:  MOVLB  0
0A6F4:  CALL   1C46
0A6F8:  GOTO   B830 (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... 
.................... void apaga_memoria(void)
.................... {
.................... 	desprotege_flash(BANCO_0);
*
0AAA6:  MOVLB  A
0AAA8:  CLRF   x8E
0AAAA:  CLRF   x8D
0AAAC:  CLRF   x8C
0AAAE:  CLRF   x8B
0AAB0:  MOVLB  0
0AAB2:  CALL   4D80
.................... 	flash_erase(BANCO_0);	
0AAB6:  MOVLB  A
0AAB8:  CLRF   x4D
0AABA:  CLRF   x4C
0AABC:  CLRF   x4B
0AABE:  CLRF   x4A
0AAC0:  MOVLB  0
0AAC2:  BRA    AA58
.................... 	write_word_nvr(ds_ptr_ocor, 0);
0AAC4:  MOVLW  0E
0AAC6:  MOVLB  A
0AAC8:  MOVWF  x79
0AACA:  CLRF   x7B
0AACC:  CLRF   x7A
0AACE:  MOVLB  0
0AAD0:  CALL   5802
.................... 	write_word_nvr(ds_ptr_regs, 0);
0AAD4:  MOVLW  0A
0AAD6:  MOVLB  A
0AAD8:  MOVWF  x79
0AADA:  CLRF   x7B
0AADC:  CLRF   x7A
0AADE:  MOVLB  0
0AAE0:  CALL   5802
.................... 	write_byte_nvr(ds_banco_escrita,0);
0AAE4:  MOVLW  14
0AAE6:  MOVLB  A
0AAE8:  MOVWF  x6B
0AAEA:  CLRF   x6C
0AAEC:  MOVLB  0
0AAEE:  CALL   5F64
.................... 	write_byte_nvr(ds_banco_leitura, 0);
0AAF2:  MOVLW  13
0AAF4:  MOVLB  A
0AAF6:  MOVWF  x6B
0AAF8:  CLRF   x6C
0AAFA:  MOVLB  0
0AAFC:  CALL   5F64
.................... 	grava_ocorrencias(reg_apagou);
0AB00:  MOVLW  1D
0AB02:  MOVLB  A
0AB04:  MOVWF  x58
0AB06:  MOVLB  0
0AB08:  CALL   5828
.................... 	registro = 0;
0AB0C:  MOVLB  4
0AB0E:  CLRF   xCC
.................... 	write_byte(ee_registro, registro);
0AB10:  MOVLB  A
0AB12:  CLRF   x68
0AB14:  MOVLW  2F
0AB16:  MOVWF  x67
0AB18:  MOVFF  4CC,A69
0AB1C:  MOVLB  0
0AB1E:  CALL   1C46
0AB22:  RETURN 0
.................... }
.................... 
.................... 
.................... void wr_falta_energia(void)
.................... {
.................... 	#if (com_relogio == true)
.................... 		delay_ms(100);
*
066D0:  MOVLW  64
066D2:  MOVLB  A
066D4:  MOVWF  x67
066D6:  MOVLB  0
066D8:  CALL   1834
.................... 		dia_old = rtc_read_nvr(ds_dia_old);
066DC:  MOVLW  16
066DE:  MOVLB  A
066E0:  MOVWF  x7B
066E2:  MOVLB  0
066E4:  CALL   54B2
066E8:  MOVFF  01,3D
.................... 		mes_old = rtc_read_nvr(ds_mes_old);
066EC:  MOVLW  17
066EE:  MOVLB  A
066F0:  MOVWF  x7B
066F2:  MOVLB  0
066F4:  CALL   54B2
066F8:  MOVFF  01,3E
.................... 		ano_old = rtc_read_nvr(ds_ano_old);
066FC:  MOVLW  18
066FE:  MOVLB  A
06700:  MOVWF  x7B
06702:  MOVLB  0
06704:  CALL   54B2
06708:  MOVFF  01,3F
.................... 		hora_old = rtc_read_nvr(ds_hora_old);
0670C:  MOVLW  19
0670E:  MOVLB  A
06710:  MOVWF  x7B
06712:  MOVLB  0
06714:  CALL   54B2
06718:  MOVFF  01,40
.................... 		minuto_old = rtc_read_nvr(ds_minuto_old);
0671C:  MOVLW  1A
0671E:  MOVLB  A
06720:  MOVWF  x7B
06722:  MOVLB  0
06724:  CALL   54B2
06728:  MOVFF  01,41
.................... 		segundo_old = rtc_read_nvr(ds_segundo_old);
0672C:  MOVLW  1B
0672E:  MOVLB  A
06730:  MOVWF  x7B
06732:  MOVLB  0
06734:  CALL   54B2
06738:  MOVFF  01,42
.................... 		
.................... 		if ((segundo != segundo_old) || (minuto_old != minuto) || (hora_old != hora))
0673C:  MOVF   42,W
0673E:  MOVLB  3
06740:  SUBWF  xC4,W
06742:  BNZ   6750
06744:  MOVF   xC3,W
06746:  SUBWF  41,W
06748:  BNZ   6750
0674A:  MOVF   xC2,W
0674C:  SUBWF  40,W
0674E:  BZ    67F6
.................... 			{
.................... 			consumo_ati = read_long(ee_consumo_ati);	
06750:  MOVLW  01
06752:  MOVLB  A
06754:  MOVWF  x7A
06756:  MOVLW  04
06758:  MOVWF  x79
0675A:  MOVLB  0
0675C:  CALL   1A4E
06760:  MOVFF  03,42F
06764:  MOVFF  02,42E
06768:  MOVFF  01,42D
0676C:  MOVFF  00,42C
.................... 			consumo_reati = read_long(ee_consumo_reati);
06770:  MOVLW  01
06772:  MOVLB  A
06774:  MOVWF  x7A
06776:  MOVLW  08
06778:  MOVWF  x79
0677A:  MOVLB  0
0677C:  CALL   1A4E
06780:  MOVFF  03,42B
06784:  MOVFF  02,42A
06788:  MOVFF  01,429
0678C:  MOVFF  00,428
.................... 
.................... 			tensao_tri = 0;
06790:  MOVLB  2
06792:  CLRF   x8F
06794:  CLRF   x8E
.................... 			corrente_tri = 0;
06796:  CLRF   x91
06798:  CLRF   x90
.................... 			fator_pot = 1024;
0679A:  MOVLW  04
0679C:  MOVWF  x93
0679E:  CLRF   x92
.................... 	
.................... 			dem_ativa = 0;
067A0:  CLRF   x77
067A2:  CLRF   x76
.................... 			dem_reativa = 0;
067A4:  CLRF   x79
067A6:  CLRF   x78
.................... 
.................... 			dem_ativa_proj = 0;
067A8:  CLRF   x7F
067AA:  CLRF   x7E
.................... 			dem_reativa_proj = 0;
067AC:  CLRF   x81
067AE:  CLRF   x80
.................... 
.................... 		
.................... 			grava_registros(reg_falta_energia);
067B0:  MOVLW  20
067B2:  MOVLB  A
067B4:  MOVWF  x4A
067B6:  MOVLB  0
067B8:  CALL   5F70
.................... 			grava_ocorrencias(reg_falta_energia);
067BC:  MOVLW  20
067BE:  MOVLB  A
067C0:  MOVWF  x58
067C2:  MOVLB  0
067C4:  CALL   5828
.................... 			
.................... 			delay_ms(100);
067C8:  MOVLW  64
067CA:  MOVLB  A
067CC:  MOVWF  x67
067CE:  MOVLB  0
067D0:  CALL   1834
.................... 			rtc_get_date();
067D4:  CALL   4C98
.................... 			rtc_get_time();
067D8:  CALL   4CE2
.................... 		
.................... 			grava_registros(reg_volta_energia);
067DC:  MOVLW  18
067DE:  MOVLB  A
067E0:  MOVWF  x4A
067E2:  MOVLB  0
067E4:  CALL   5F70
.................... 			grava_ocorrencias(reg_volta_energia);
067E8:  MOVLW  18
067EA:  MOVLB  A
067EC:  MOVWF  x58
067EE:  MOVLB  0
067F0:  CALL   5828
067F4:  MOVLB  3
.................... 		
.................... 			}
.................... 	
.................... 	#else		
067F6:  MOVLB  0
067F8:  GOTO   1BE64 (RETURN)
.................... 		delay_ms(100);
.................... 		grava_registros(reg_falta_energia);
.................... 	#endif
.................... }
.................... 
.................... 	
.................... void calcula_autonomia(void)
.................... 	{
.................... 	}
.................... 
.................... 
.................... /* fim st_regs */    
.................... 
.................... #include "teste_regs.c"
.................... //***********************************************************************
.................... // Empresa: Sultech Sitemas Eletrônicos									*
.................... // Projeto: ST5200T														*
.................... // Modulo: Teste da Menória												*
.................... // Função: Testar o fncionamento da memória.							*
.................... // Responsável: Rafael Calai								*
.................... // Inicio: 19/09/2016													*
.................... //***********************************************************************
.................... 
.................... void GravarRegistrosTest(void){
.................... 	char err_grava;
.................... 	int32 aux_l1;
.................... 	nro_erro_mem = 0;
.................... 	testando_memoria = 1;
.................... 	
.................... 	mensagem(1,175);
.................... 	mensagem(2,176);
.................... 	apaga_memoria();
.................... 
.................... 	for (aux_w1 = 0; aux_w1 < limite_registros/7; aux_w1++){	 
.................... 		aux_l1 = (int32)(aux_w1);						// Buscamos a posição de registro.
.................... 		aux_l1 = (int32)(aux_l1 * 224);					// Convertemos em posição de memória da flash externa.
.................... 		for (aux_b1 = 0; aux_b1 < 224; aux_b1++){		// Salvando no buffer da flash.	
.................... 			write_byte_flash(aux_l1++,'A');
.................... 		}
.................... 		lcd_gotoxy(14,2);
.................... 		wr_lcd(1,'A');
.................... 		aux_f1 = aux_l1/7905;
.................... 		displaypl(22,aux_f1,3);
.................... 	}
.................... 	for (aux_w1 = 0; aux_w1 < limite_registros/7; aux_w1++){	 
.................... 		aux_l1 = (int32)(aux_w1);						// Buscamos a posição de registro.
.................... 		aux_l1 = (int32)(aux_l1 * 224);					// Convertemos em posição de memória da flash externa.
.................... 		for (aux_b1 = 0; aux_b1 < 224; aux_b1++){		// Lendo no buffer da flash.
.................... 			err_grava = read_byte_flash(aux_l1++);			
.................... 			if (err_grava != 'A')
.................... 				nro_erro_mem++;	
.................... 		}															
.................... 		nro_erro_mem2 = nro_erro_mem/7905;
.................... 		displaypl(30,nro_erro_mem2,3);	//62
.................... 		aux_f1 = aux_l1/7905;
.................... 		displaypl(22,aux_f1,3);
.................... 	}
.................... 	mensagem(2,176);
.................... 	apaga_memoria();
.................... 	for (aux_w1 = 0; aux_w1 < limite_registros/7; aux_w1++){	 
.................... 		aux_l1 = (int32)(aux_w1);						// Buscamos a posição de registro.
.................... 		aux_l1 = (int32)(aux_l1 * 224);					// Convertemos em posição de memória da flash externa.
.................... 		for (aux_b1 = 0; aux_b1 < 224; aux_b1++){		// Salvando no buffer da flash.	
.................... 			write_byte_flash(aux_l1++,'5');
.................... 		}
.................... 		lcd_gotoxy(14,2);
.................... 		wr_lcd(1,'5');
.................... 		aux_f1 = aux_l1/7905;
.................... 		displaypl(22,aux_f1,3);
.................... 	}
.................... 	for (aux_w1 = 0; aux_w1 < limite_registros/7; aux_w1++){	 
.................... 		aux_l1 = (int32)(aux_w1);						// Buscamos a posição de registro.
.................... 		aux_l1 = (int32)(aux_l1 * 224);					// Convertemos em posição de memória da flash externa.
.................... 		for (aux_b1 = 0; aux_b1 < 224; aux_b1++){		// Lendo no buffer da flash.
.................... 			err_grava = read_byte_flash(aux_l1++);			
.................... 			if (err_grava != '5')
.................... 				nro_erro_mem++;	
.................... 		}															
.................... 		nro_erro_mem2 = nro_erro_mem/7905;
.................... 		displaypl(30,nro_erro_mem2,3);	//62
.................... 		aux_f1 = aux_l1/7905;
.................... 		displaypl(22,aux_f1,3);
.................... 	}
.................... 	apaga_memoria();
.................... 	mensagem(1,177);
.................... 	testando_memoria = 0;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 	
.................... 
.................... #include "novo_testa_mem.c"
.................... //***********************************************************************
.................... // Empresa: Sultech Sitemas EletrÃ´nicos									*
.................... // Projeto: ST8500C														*
.................... // Modulo: Teste da MenÃ³ria												*
.................... // FunÃ§Ã£o: Testar o funcionamento da memÃ³ria.							*
.................... // ResponsÃ¡vel: Ãngelo													*
.................... // Inicio: 03/10/2022													*
.................... //***********************************************************************
.................... 
.................... int8 x;
.................... const char valor_t[2]= {'A','5'};
.................... char retorno=0;
.................... int32 fim_mem = 0x0FFFFF;
.................... int32 end_mem = 0;
.................... 
.................... void teste_memoria(void){
.................... 	nro_erro_mem =0;
*
0B008:  MOVLB  4
0B00A:  CLRF   x8B
0B00C:  CLRF   x8A
0B00E:  CLRF   x89
0B010:  CLRF   x88
.................... 	testando_memoria =1;
0B012:  BSF    1E.0
.................... 	mensagem(1,175);
0B014:  MOVLW  01
0B016:  MOVLB  A
0B018:  MOVWF  x4D
0B01A:  MOVLW  AF
0B01C:  MOVWF  x4E
0B01E:  MOVLB  0
0B020:  CALL   47E8
.................... 	mensagem(2,176);
0B024:  MOVLW  02
0B026:  MOVLB  A
0B028:  MOVWF  x4D
0B02A:  MOVLW  B0
0B02C:  MOVWF  x4E
0B02E:  MOVLB  0
0B030:  CALL   47E8
.................... 		for (x=0; x<2; x++){
0B034:  MOVLB  8
0B036:  CLRF   x92
0B038:  MOVF   x92,W
0B03A:  SUBLW  01
0B03C:  BTFSS  FD8.0
0B03E:  BRA    B1C0
.................... 		apaga_memoria();
0B040:  MOVLB  0
0B042:  RCALL  AAA6
.................... 		lcd_gotoxy(14,1);
0B044:  MOVLW  0E
0B046:  MOVLB  A
0B048:  MOVWF  x62
0B04A:  MOVLW  01
0B04C:  MOVWF  x63
0B04E:  MOVLB  0
0B050:  CALL   46C4
.................... 		wr_lcd(1,valor_t[x]);
0B054:  CLRF   03
0B056:  MOVLB  8
0B058:  MOVF   x92,W
0B05A:  MOVLB  0
0B05C:  CALL   1054
0B060:  MOVLB  A
0B062:  MOVWF  x4A
0B064:  MOVLW  01
0B066:  MOVWF  x65
0B068:  MOVFF  A4A,A66
0B06C:  MOVLB  0
0B06E:  CALL   1864
.................... 		for(end_mem=0;end_mem<fim_mem+1;end_mem++){
0B072:  MOVLB  8
0B074:  CLRF   x9B
0B076:  CLRF   x9A
0B078:  CLRF   x99
0B07A:  CLRF   x98
0B07C:  MOVLW  01
0B07E:  ADDWF  x94,W
0B080:  MOVWF  00
0B082:  MOVLW  00
0B084:  ADDWFC x95,W
0B086:  MOVWF  01
0B088:  MOVLW  00
0B08A:  ADDWFC x96,W
0B08C:  MOVWF  02
0B08E:  MOVLW  00
0B090:  ADDWFC x97,W
0B092:  MOVWF  03
0B094:  MOVF   x9B,W
0B096:  SUBWF  03,W
0B098:  BNC   B10A
0B09A:  BNZ   B0B2
0B09C:  MOVF   x9A,W
0B09E:  SUBWF  02,W
0B0A0:  BNC   B10A
0B0A2:  BNZ   B0B2
0B0A4:  MOVF   x99,W
0B0A6:  SUBWF  01,W
0B0A8:  BNC   B10A
0B0AA:  BNZ   B0B2
0B0AC:  MOVF   00,W
0B0AE:  SUBWF  x98,W
0B0B0:  BC    B10A
.................... 			write_byte_flash(end_mem,valor_t[x]);
0B0B2:  CLRF   03
0B0B4:  MOVF   x92,W
0B0B6:  MOVLB  0
0B0B8:  CALL   1054
0B0BC:  MOVLB  A
0B0BE:  MOVWF  x4A
0B0C0:  MOVFF  89B,A7D
0B0C4:  MOVFF  89A,A7C
0B0C8:  MOVFF  899,A7B
0B0CC:  MOVFF  898,A7A
0B0D0:  MOVWF  x7E
0B0D2:  MOVLB  0
0B0D4:  CALL   5748
.................... 			displaypl(22,end_mem,7);
0B0D8:  MOVLW  16
0B0DA:  MOVLB  A
0B0DC:  MOVWF  x4A
0B0DE:  MOVFF  89B,A4E
0B0E2:  MOVFF  89A,A4D
0B0E6:  MOVFF  899,A4C
0B0EA:  MOVFF  898,A4B
0B0EE:  MOVLW  07
0B0F0:  MOVWF  x4F
0B0F2:  MOVLB  0
0B0F4:  RCALL  AFBA
0B0F6:  MOVLW  01
0B0F8:  MOVLB  8
0B0FA:  ADDWF  x98,F
0B0FC:  BTFSC  FD8.0
0B0FE:  INCF   x99,F
0B100:  BTFSC  FD8.2
0B102:  INCF   x9A,F
0B104:  BTFSC  FD8.2
0B106:  INCF   x9B,F
0B108:  BRA    B07C
.................... 		}
.................... 		for(end_mem=0;end_mem<fim_mem+1;end_mem++){
0B10A:  CLRF   x9B
0B10C:  CLRF   x9A
0B10E:  CLRF   x99
0B110:  CLRF   x98
0B112:  MOVLW  01
0B114:  ADDWF  x94,W
0B116:  MOVWF  00
0B118:  MOVLW  00
0B11A:  ADDWFC x95,W
0B11C:  MOVWF  01
0B11E:  MOVLW  00
0B120:  ADDWFC x96,W
0B122:  MOVWF  02
0B124:  MOVLW  00
0B126:  ADDWFC x97,W
0B128:  MOVWF  03
0B12A:  MOVF   x9B,W
0B12C:  SUBWF  03,W
0B12E:  BNC   B1BC
0B130:  BNZ   B148
0B132:  MOVF   x9A,W
0B134:  SUBWF  02,W
0B136:  BNC   B1BC
0B138:  BNZ   B148
0B13A:  MOVF   x99,W
0B13C:  SUBWF  01,W
0B13E:  BNC   B1BC
0B140:  BNZ   B148
0B142:  MOVF   00,W
0B144:  SUBWF  x98,W
0B146:  BC    B1BC
.................... 			retorno=read_byte_flash(end_mem);
0B148:  MOVFF  89B,A7C
0B14C:  MOVFF  89A,A7B
0B150:  MOVFF  899,A7A
0B154:  MOVFF  898,A79
0B158:  MOVLB  0
0B15A:  CALL   550A
0B15E:  MOVFF  01,893
.................... 			if(retorno!= valor_t[x])
0B162:  CLRF   03
0B164:  MOVLB  8
0B166:  MOVF   x92,W
0B168:  MOVLB  0
0B16A:  CALL   1054
0B16E:  MOVWF  01
0B170:  MOVLB  8
0B172:  SUBWF  x93,W
0B174:  BZ    B18A
.................... 				nro_erro_mem++;
0B176:  MOVLW  01
0B178:  MOVLB  4
0B17A:  ADDWF  x88,F
0B17C:  BTFSC  FD8.0
0B17E:  INCF   x89,F
0B180:  BTFSC  FD8.2
0B182:  INCF   x8A,F
0B184:  BTFSC  FD8.2
0B186:  INCF   x8B,F
0B188:  MOVLB  8
.................... 			displaypl(22,end_mem,7);
0B18A:  MOVLW  16
0B18C:  MOVLB  A
0B18E:  MOVWF  x4A
0B190:  MOVFF  89B,A4E
0B194:  MOVFF  89A,A4D
0B198:  MOVFF  899,A4C
0B19C:  MOVFF  898,A4B
0B1A0:  MOVLW  07
0B1A2:  MOVWF  x4F
0B1A4:  MOVLB  0
0B1A6:  RCALL  AFBA
0B1A8:  MOVLW  01
0B1AA:  MOVLB  8
0B1AC:  ADDWF  x98,F
0B1AE:  BTFSC  FD8.0
0B1B0:  INCF   x99,F
0B1B2:  BTFSC  FD8.2
0B1B4:  INCF   x9A,F
0B1B6:  BTFSC  FD8.2
0B1B8:  INCF   x9B,F
0B1BA:  BRA    B112
.................... 		}
0B1BC:  INCF   x92,F
0B1BE:  BRA    B038
.................... 	}
.................... 	apaga_memoria();
0B1C0:  MOVLB  0
0B1C2:  RCALL  AAA6
.................... 	mensagem(2,177);
0B1C4:  MOVLW  02
0B1C6:  MOVLB  A
0B1C8:  MOVWF  x4D
0B1CA:  MOVLW  B1
0B1CC:  MOVWF  x4E
0B1CE:  MOVLB  0
0B1D0:  CALL   47E8
.................... 	displaypl(22,nro_erro_mem,7);	
0B1D4:  MOVLW  16
0B1D6:  MOVLB  A
0B1D8:  MOVWF  x4A
0B1DA:  MOVFF  48B,A4E
0B1DE:  MOVFF  48A,A4D
0B1E2:  MOVFF  489,A4C
0B1E6:  MOVFF  488,A4B
0B1EA:  MOVLW  07
0B1EC:  MOVWF  x4F
0B1EE:  MOVLB  0
0B1F0:  RCALL  AFBA
.................... 	testando_memoria = 0;
0B1F2:  BCF    1E.0
0B1F4:  RETURN 0
.................... }
.................... 
.................... 
.................... #if (com_regs == true)
.................... 	#include "st8500c_ocor.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_MAIN                                                        *
.................... ; Funcao: MODULO PRINCIPAL DE CONTROLE									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
....................  
.................... 	
.................... void grava_ocorrencias(char codigo)
.................... {
.................... 
.................... 	char buf_dados[TAM_REGS];
.................... 		
.................... 	write_long(ee_consumo_ati, consumo_ati);
*
05828:  MOVLW  01
0582A:  MOVLB  A
0582C:  MOVWF  x7A
0582E:  MOVLW  04
05830:  MOVWF  x79
05832:  MOVFF  42F,A7E
05836:  MOVFF  42E,A7D
0583A:  MOVFF  42D,A7C
0583E:  MOVFF  42C,A7B
05842:  MOVLB  0
05844:  CALL   1B0A
.................... 	write_long(ee_consumo_reati, consumo_reati);
05848:  MOVLW  01
0584A:  MOVLB  A
0584C:  MOVWF  x7A
0584E:  MOVLW  08
05850:  MOVWF  x79
05852:  MOVFF  42B,A7E
05856:  MOVFF  42A,A7D
0585A:  MOVFF  429,A7C
0585E:  MOVFF  428,A7B
05862:  MOVLB  0
05864:  CALL   1B0A
.................... 
.................... 	for (aux_b1 = 8; aux_b1 < TAM_REGS; aux_b1++)
05868:  MOVLW  08
0586A:  MOVLB  3
0586C:  MOVWF  xB1
0586E:  MOVF   xB1,W
05870:  SUBLW  1F
05872:  BNC   5888
.................... 		{
.................... 		buf_dados[aux_b1] = 0;
05874:  CLRF   03
05876:  MOVF   xB1,W
05878:  ADDLW  59
0587A:  MOVWF  FE9
0587C:  MOVLW  0A
0587E:  ADDWFC 03,W
05880:  MOVWF  FEA
05882:  CLRF   FEF
05884:  INCF   xB1,F
05886:  BRA    586E
.................... 		}
.................... 
.................... 	codigo_old = codigo;
05888:  MOVFF  A58,4C
.................... 	buf_dados[0] = codigo;
0588C:  MOVFF  A58,A59
.................... 	
.................... 	if (codigo == reg_falta_energia)
05890:  MOVLB  A
05892:  MOVF   x58,W
05894:  SUBLW  20
05896:  BNZ   58B6
.................... 		{
.................... 		buf_dados[1] = dia_old;
05898:  MOVFF  3D,A5A
.................... 		buf_dados[2] = mes_old;
0589C:  MOVFF  3E,A5B
.................... 		buf_dados[3] = ano_old;
058A0:  MOVFF  3F,A5C
.................... 		buf_dados[4] = hora_old;
058A4:  MOVFF  40,A5D
.................... 		buf_dados[5] = minuto_old;
058A8:  MOVFF  41,A5E
.................... 		buf_dados[6] = segundo_old;
058AC:  MOVFF  42,A5F
.................... 		buf_dados[7] = 240;
058B0:  MOVLW  F0
058B2:  MOVWF  x60
.................... 		}
058B4:  BRA    58D2
.................... 	else
.................... 		{
.................... 		buf_dados[1] = dia;
058B6:  MOVFF  3BF,A5A
.................... 		buf_dados[2] = mes;
058BA:  MOVFF  3C0,A5B
.................... 		buf_dados[3] = ano;
058BE:  MOVFF  3C1,A5C
.................... 		buf_dados[4] = hora;
058C2:  MOVFF  3C2,A5D
.................... 		buf_dados[5] = minuto;
058C6:  MOVFF  3C3,A5E
.................... 		buf_dados[6] = segundo;
058CA:  MOVFF  3C4,A5F
.................... 		buf_dados[7] = frequencia;
058CE:  MOVFF  24E,A60
.................... 		}
.................... 
.................... 	if (codigo == reg_reset)
058D2:  MOVF   x58,W
058D4:  SUBLW  19
058D6:  BNZ   5938
.................... 		{
.................... 		consumo_ati = read_long(ee_consumo_ati);	
058D8:  MOVLW  01
058DA:  MOVWF  x7A
058DC:  MOVLW  04
058DE:  MOVWF  x79
058E0:  MOVLB  0
058E2:  CALL   1A4E
058E6:  MOVFF  03,42F
058EA:  MOVFF  02,42E
058EE:  MOVFF  01,42D
058F2:  MOVFF  00,42C
.................... 		consumo_reati = read_long(ee_consumo_reati);
058F6:  MOVLW  01
058F8:  MOVLB  A
058FA:  MOVWF  x7A
058FC:  MOVLW  08
058FE:  MOVWF  x79
05900:  MOVLB  0
05902:  CALL   1A4E
05906:  MOVFF  03,42B
0590A:  MOVFF  02,42A
0590E:  MOVFF  01,429
05912:  MOVFF  00,428
.................... 
.................... 		tensao_tri = 0;
05916:  MOVLB  2
05918:  CLRF   x8F
0591A:  CLRF   x8E
.................... 		corrente_tri = 0;
0591C:  CLRF   x91
0591E:  CLRF   x90
.................... 		fator_pot = 1024;
05920:  MOVLW  04
05922:  MOVWF  x93
05924:  CLRF   x92
.................... 	
.................... 		dem_ativa = 0;
05926:  CLRF   x77
05928:  CLRF   x76
.................... 		dem_reativa = 0;
0592A:  CLRF   x79
0592C:  CLRF   x78
.................... 
.................... 		dem_ativa_proj = 0;
0592E:  CLRF   x7F
05930:  CLRF   x7E
.................... 		dem_reativa_proj = 0;
05932:  CLRF   x81
05934:  CLRF   x80
05936:  MOVLB  A
.................... 		}
.................... 	buf_dados[8] = (char)(make8(tensao_tri, 1));
05938:  MOVFF  28F,A61
.................... 	buf_dados[9] = (char)(make8(tensao_tri, 0));
0593C:  MOVFF  28E,A62
.................... 	#if (com_tc == true)
.................... 		aux_f1 = (float)(corrente_tri);
05940:  MOVFF  291,A7E
05944:  MOVFF  290,A7D
05948:  MOVLB  0
0594A:  CALL   2924
0594E:  MOVFF  03,397
05952:  MOVFF  02,396
05956:  MOVFF  01,395
0595A:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc;
0595E:  MOVFF  397,A80
05962:  MOVFF  396,A7F
05966:  MOVFF  395,A7E
0596A:  MOVFF  394,A7D
0596E:  MOVFF  351,A84
05972:  MOVFF  350,A83
05976:  MOVFF  34F,A82
0597A:  MOVFF  34E,A81
0597E:  RCALL  5306
05980:  MOVFF  03,397
05984:  MOVFF  02,396
05988:  MOVFF  01,395
0598C:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
05990:  MOVFF  397,A7C
05994:  MOVFF  396,A7B
05998:  MOVFF  395,A7A
0599C:  MOVFF  394,A79
059A0:  RCALL  53FC
059A2:  MOVFF  02,363
059A6:  MOVFF  01,362
.................... 		buf_dados[10] = (char)(make8(aux_w1, 1));
059AA:  MOVFF  363,A63
.................... 		buf_dados[11] = (char)(make8(aux_w1, 0));
059AE:  MOVFF  362,A64
.................... 	#else
.................... 		buf_dados[10] = (char)(make8(corrente_tri, 1));
.................... 		buf_dados[11] = (char)(make8(corrente_tri, 0));
.................... 	#endif
.................... 	buf_dados[12] = (char)(make8(fator_pot, 1));
059B2:  MOVFF  293,A65
.................... 	buf_dados[13] = (char)(make8(fator_pot, 0));
059B6:  MOVFF  292,A66
.................... 	
.................... 	#if (com_tc == true)
.................... 		aux_f1 = (float)(dem_ativa_proj);
059BA:  MOVFF  27F,A7E
059BE:  MOVFF  27E,A7D
059C2:  CALL   2924
059C6:  MOVFF  03,397
059CA:  MOVFF  02,396
059CE:  MOVFF  01,395
059D2:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
059D6:  MOVFF  397,A80
059DA:  MOVFF  396,A7F
059DE:  MOVFF  395,A7E
059E2:  MOVFF  394,A7D
059E6:  MOVFF  351,A84
059EA:  MOVFF  350,A83
059EE:  MOVFF  34F,A82
059F2:  MOVFF  34E,A81
059F6:  RCALL  5306
059F8:  MOVFF  03,A7C
059FC:  MOVFF  02,A7B
05A00:  MOVFF  01,A7A
05A04:  MOVFF  00,A79
05A08:  MOVFF  4C2,A7E
05A0C:  MOVFF  4C1,A7D
05A10:  CALL   2924
05A14:  MOVFF  A7C,A80
05A18:  MOVFF  A7B,A7F
05A1C:  MOVFF  A7A,A7E
05A20:  MOVFF  A79,A7D
05A24:  MOVFF  03,A84
05A28:  MOVFF  02,A83
05A2C:  MOVFF  01,A82
05A30:  MOVFF  00,A81
05A34:  RCALL  5306
05A36:  MOVFF  03,397
05A3A:  MOVFF  02,396
05A3E:  MOVFF  01,395
05A42:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
05A46:  MOVFF  397,A7C
05A4A:  MOVFF  396,A7B
05A4E:  MOVFF  395,A7A
05A52:  MOVFF  394,A79
05A56:  RCALL  53FC
05A58:  MOVFF  02,363
05A5C:  MOVFF  01,362
.................... 		buf_dados[14] = (char)(make8(aux_w1, 1));
05A60:  MOVFF  363,A67
.................... 		buf_dados[15] = (char)(make8(aux_w1, 0));
05A64:  MOVFF  362,A68
.................... 
.................... 		aux_f1 = (float)(dem_reativa_proj);
05A68:  MOVFF  281,A7E
05A6C:  MOVFF  280,A7D
05A70:  CALL   2924
05A74:  MOVFF  03,397
05A78:  MOVFF  02,396
05A7C:  MOVFF  01,395
05A80:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
05A84:  MOVFF  397,A80
05A88:  MOVFF  396,A7F
05A8C:  MOVFF  395,A7E
05A90:  MOVFF  394,A7D
05A94:  MOVFF  351,A84
05A98:  MOVFF  350,A83
05A9C:  MOVFF  34F,A82
05AA0:  MOVFF  34E,A81
05AA4:  RCALL  5306
05AA6:  MOVFF  03,A7C
05AAA:  MOVFF  02,A7B
05AAE:  MOVFF  01,A7A
05AB2:  MOVFF  00,A79
05AB6:  MOVFF  4C2,A7E
05ABA:  MOVFF  4C1,A7D
05ABE:  CALL   2924
05AC2:  MOVFF  A7C,A80
05AC6:  MOVFF  A7B,A7F
05ACA:  MOVFF  A7A,A7E
05ACE:  MOVFF  A79,A7D
05AD2:  MOVFF  03,A84
05AD6:  MOVFF  02,A83
05ADA:  MOVFF  01,A82
05ADE:  MOVFF  00,A81
05AE2:  RCALL  5306
05AE4:  MOVFF  03,397
05AE8:  MOVFF  02,396
05AEC:  MOVFF  01,395
05AF0:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
05AF4:  MOVFF  397,A7C
05AF8:  MOVFF  396,A7B
05AFC:  MOVFF  395,A7A
05B00:  MOVFF  394,A79
05B04:  RCALL  53FC
05B06:  MOVFF  02,363
05B0A:  MOVFF  01,362
.................... 		buf_dados[16] = (char)(make8(aux_w1, 1));
05B0E:  MOVFF  363,A69
.................... 		buf_dados[17] = (char)(make8(aux_w1, 0));
05B12:  MOVFF  362,A6A
.................... 
.................... 		aux_f1 = (float)(consumo_ati);
05B16:  MOVFF  42F,A7C
05B1A:  MOVFF  42E,A7B
05B1E:  MOVFF  42D,A7A
05B22:  MOVFF  42C,A79
05B26:  RCALL  5438
05B28:  MOVFF  03,397
05B2C:  MOVFF  02,396
05B30:  MOVFF  01,395
05B34:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
05B38:  MOVFF  397,A80
05B3C:  MOVFF  396,A7F
05B40:  MOVFF  395,A7E
05B44:  MOVFF  394,A7D
05B48:  MOVFF  351,A84
05B4C:  MOVFF  350,A83
05B50:  MOVFF  34F,A82
05B54:  MOVFF  34E,A81
05B58:  CALL   5306
05B5C:  MOVFF  03,A7C
05B60:  MOVFF  02,A7B
05B64:  MOVFF  01,A7A
05B68:  MOVFF  00,A79
05B6C:  MOVFF  4C2,A7E
05B70:  MOVFF  4C1,A7D
05B74:  CALL   2924
05B78:  MOVFF  A7C,A80
05B7C:  MOVFF  A7B,A7F
05B80:  MOVFF  A7A,A7E
05B84:  MOVFF  A79,A7D
05B88:  MOVFF  03,A84
05B8C:  MOVFF  02,A83
05B90:  MOVFF  01,A82
05B94:  MOVFF  00,A81
05B98:  CALL   5306
05B9C:  MOVFF  03,397
05BA0:  MOVFF  02,396
05BA4:  MOVFF  01,395
05BA8:  MOVFF  00,394
.................... 		aux_l1 = (int32)(aux_f1);
05BAC:  MOVFF  397,A7C
05BB0:  MOVFF  396,A7B
05BB4:  MOVFF  395,A7A
05BB8:  MOVFF  394,A79
05BBC:  RCALL  5470
05BBE:  MOVFF  03,373
05BC2:  MOVFF  02,372
05BC6:  MOVFF  01,371
05BCA:  MOVFF  00,370
.................... 		buf_dados[18] = (char)(make8(aux_l1,3));
05BCE:  MOVFF  373,A6B
.................... 		buf_dados[19] = (char)(make8(aux_l1,2));
05BD2:  MOVFF  372,A6C
.................... 		buf_dados[20] = (char)(make8(aux_l1,1));
05BD6:  MOVFF  371,A6D
.................... 		buf_dados[21] = (char)(make8(aux_l1,0));
05BDA:  MOVFF  370,A6E
.................... 
.................... 		aux_f1 = (float)(consumo_reati);
05BDE:  MOVFF  42B,A7C
05BE2:  MOVFF  42A,A7B
05BE6:  MOVFF  429,A7A
05BEA:  MOVFF  428,A79
05BEE:  RCALL  5438
05BF0:  MOVFF  03,397
05BF4:  MOVFF  02,396
05BF8:  MOVFF  01,395
05BFC:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
05C00:  MOVFF  397,A80
05C04:  MOVFF  396,A7F
05C08:  MOVFF  395,A7E
05C0C:  MOVFF  394,A7D
05C10:  MOVFF  351,A84
05C14:  MOVFF  350,A83
05C18:  MOVFF  34F,A82
05C1C:  MOVFF  34E,A81
05C20:  CALL   5306
05C24:  MOVFF  03,A7C
05C28:  MOVFF  02,A7B
05C2C:  MOVFF  01,A7A
05C30:  MOVFF  00,A79
05C34:  MOVFF  4C2,A7E
05C38:  MOVFF  4C1,A7D
05C3C:  CALL   2924
05C40:  MOVFF  A7C,A80
05C44:  MOVFF  A7B,A7F
05C48:  MOVFF  A7A,A7E
05C4C:  MOVFF  A79,A7D
05C50:  MOVFF  03,A84
05C54:  MOVFF  02,A83
05C58:  MOVFF  01,A82
05C5C:  MOVFF  00,A81
05C60:  CALL   5306
05C64:  MOVFF  03,397
05C68:  MOVFF  02,396
05C6C:  MOVFF  01,395
05C70:  MOVFF  00,394
.................... 		aux_l1 = (int32)(aux_f1);
05C74:  MOVFF  397,A7C
05C78:  MOVFF  396,A7B
05C7C:  MOVFF  395,A7A
05C80:  MOVFF  394,A79
05C84:  CALL   5470
05C88:  MOVFF  03,373
05C8C:  MOVFF  02,372
05C90:  MOVFF  01,371
05C94:  MOVFF  00,370
.................... 		buf_dados[22] = (char)(make8(aux_l1,3));
05C98:  MOVFF  373,A6F
.................... 		buf_dados[23] = (char)(make8(aux_l1,2));
05C9C:  MOVFF  372,A70
.................... 		buf_dados[24] = (char)(make8(aux_l1,1));
05CA0:  MOVFF  371,A71
.................... 		buf_dados[26] = (char)(make8(aux_l1,0));
05CA4:  MOVFF  370,A73
.................... 
.................... 		aux_f1 = (float)(dem_ativa);
05CA8:  MOVFF  277,A7E
05CAC:  MOVFF  276,A7D
05CB0:  CALL   2924
05CB4:  MOVFF  03,397
05CB8:  MOVFF  02,396
05CBC:  MOVFF  01,395
05CC0:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
05CC4:  MOVFF  397,A80
05CC8:  MOVFF  396,A7F
05CCC:  MOVFF  395,A7E
05CD0:  MOVFF  394,A7D
05CD4:  MOVFF  351,A84
05CD8:  MOVFF  350,A83
05CDC:  MOVFF  34F,A82
05CE0:  MOVFF  34E,A81
05CE4:  CALL   5306
05CE8:  MOVFF  03,A7C
05CEC:  MOVFF  02,A7B
05CF0:  MOVFF  01,A7A
05CF4:  MOVFF  00,A79
05CF8:  MOVFF  4C2,A7E
05CFC:  MOVFF  4C1,A7D
05D00:  CALL   2924
05D04:  MOVFF  A7C,A80
05D08:  MOVFF  A7B,A7F
05D0C:  MOVFF  A7A,A7E
05D10:  MOVFF  A79,A7D
05D14:  MOVFF  03,A84
05D18:  MOVFF  02,A83
05D1C:  MOVFF  01,A82
05D20:  MOVFF  00,A81
05D24:  CALL   5306
05D28:  MOVFF  03,397
05D2C:  MOVFF  02,396
05D30:  MOVFF  01,395
05D34:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
05D38:  MOVFF  397,A7C
05D3C:  MOVFF  396,A7B
05D40:  MOVFF  395,A7A
05D44:  MOVFF  394,A79
05D48:  CALL   53FC
05D4C:  MOVFF  02,363
05D50:  MOVFF  01,362
.................... 		buf_dados[26] = (char)(make8(aux_w1, 1));
05D54:  MOVFF  363,A73
.................... 		buf_dados[27] = (char)(make8(aux_w1, 0));
05D58:  MOVFF  362,A74
.................... 		
.................... 		aux_f1 = (float)(dem_reativa);
05D5C:  MOVFF  279,A7E
05D60:  MOVFF  278,A7D
05D64:  CALL   2924
05D68:  MOVFF  03,397
05D6C:  MOVFF  02,396
05D70:  MOVFF  01,395
05D74:  MOVFF  00,394
.................... 		aux_f1 = aux_f1 * mul_tc * valor_tp;
05D78:  MOVFF  397,A80
05D7C:  MOVFF  396,A7F
05D80:  MOVFF  395,A7E
05D84:  MOVFF  394,A7D
05D88:  MOVFF  351,A84
05D8C:  MOVFF  350,A83
05D90:  MOVFF  34F,A82
05D94:  MOVFF  34E,A81
05D98:  CALL   5306
05D9C:  MOVFF  03,A7C
05DA0:  MOVFF  02,A7B
05DA4:  MOVFF  01,A7A
05DA8:  MOVFF  00,A79
05DAC:  MOVFF  4C2,A7E
05DB0:  MOVFF  4C1,A7D
05DB4:  CALL   2924
05DB8:  MOVFF  A7C,A80
05DBC:  MOVFF  A7B,A7F
05DC0:  MOVFF  A7A,A7E
05DC4:  MOVFF  A79,A7D
05DC8:  MOVFF  03,A84
05DCC:  MOVFF  02,A83
05DD0:  MOVFF  01,A82
05DD4:  MOVFF  00,A81
05DD8:  CALL   5306
05DDC:  MOVFF  03,397
05DE0:  MOVFF  02,396
05DE4:  MOVFF  01,395
05DE8:  MOVFF  00,394
.................... 		aux_w1 = (word)(aux_f1);
05DEC:  MOVFF  397,A7C
05DF0:  MOVFF  396,A7B
05DF4:  MOVFF  395,A7A
05DF8:  MOVFF  394,A79
05DFC:  CALL   53FC
05E00:  MOVFF  02,363
05E04:  MOVFF  01,362
.................... 		buf_dados[28] = (char)(make8(aux_w1, 1));
05E08:  MOVFF  363,A75
.................... 		buf_dados[29] = (char)(make8(aux_w1, 0));
05E0C:  MOVFF  362,A76
.................... 		
.................... 	#else
.................... 	
.................... 		buf_dados[14] = (char)(make8(dem_ativa_proj, 1));
.................... 		buf_dados[15] = (char)(make8(dem_ativa_proj, 0));
.................... 		buf_dados[16] = (char)(make8(dem_reativa_proj, 1));
.................... 		buf_dados[17] = (char)(make8(dem_reativa_proj, 0));
.................... 
.................... 		buf_dados[18] = (char)(make8(consumo_ati,3));
.................... 		buf_dados[19] = (char)(make8(consumo_ati,2));
.................... 		buf_dados[20] = (char)(make8(consumo_ati,1));
.................... 		buf_dados[21] = (char)(make8(consumo_ati,0));
.................... 	
.................... 		buf_dados[22] = (char)(make8(consumo_reati,3));
.................... 		buf_dados[23] = (char)(make8(consumo_reati,2));
.................... 		buf_dados[24] = (char)(make8(consumo_reati,1));
.................... 		buf_dados[25] = (char)(make8(consumo_reati,0));
.................... 
.................... 		buf_dados[26] = (char)(make8(dem_ativa, 1));
.................... 		buf_dados[27] = (char)(make8(dem_ativa, 0));
.................... 		buf_dados[28] = (char)(make8(dem_reativa, 1));
.................... 		buf_dados[29] = (char)(make8(dem_reativa, 0));
.................... 		
.................... 	#endif
.................... 
.................... 
.................... 	buf_dados[30] = SAIDA2;
05E10:  MOVFF  885,A77
.................... 	buf_dados[31] = SAIDA3;
05E14:  MOVFF  886,A78
.................... 
.................... 	#if (com_relogio == true)
.................... 		aux_w1 =  read_word_nvr(ds_ptr_ocor);
05E18:  MOVLW  0E
05E1A:  MOVLB  A
05E1C:  MOVWF  x79
05E1E:  MOVLB  0
05E20:  CALL   54CA
05E24:  MOVFF  02,363
05E28:  MOVFF  01,362
.................... 	#else
.................... 		aux_w1 =  read_word(ee_ptr_rocor);
.................... 	#endif
.................... 	if (aux_w1 > limite_ocorrencias)
05E2C:  MOVLB  3
05E2E:  MOVF   x63,F
05E30:  BNZ   5E38
05E32:  MOVF   x62,W
05E34:  SUBLW  FA
05E36:  BC    5E3C
.................... 		{
.................... 		aux_w1 = 0;
05E38:  CLRF   x63
05E3A:  CLRF   x62
.................... 		}
.................... 	aux_l2 = (int32)(aux_w1 * TAM_REGS);
05E3C:  RLCF   x62,W
05E3E:  MOVWF  02
05E40:  RLCF   x63,W
05E42:  MOVWF  03
05E44:  RLCF   02,F
05E46:  RLCF   03,F
05E48:  RLCF   02,F
05E4A:  RLCF   03,F
05E4C:  RLCF   02,F
05E4E:  RLCF   03,F
05E50:  RLCF   02,F
05E52:  RLCF   03,F
05E54:  MOVLW  E0
05E56:  ANDWF  02,F
05E58:  MOVFF  02,374
05E5C:  MOVFF  03,375
05E60:  CLRF   x76
05E62:  CLRF   x77
.................... 	aux_l1 =  aux_l2 + inicio_ocorrencias;
05E64:  MOVFF  374,370
05E68:  MOVLW  53
05E6A:  MOVLB  3
05E6C:  ADDWF  x75,W
05E6E:  MOVLB  A
05E70:  MOVWF  x7A
05E72:  MOVLW  07
05E74:  MOVLB  3
05E76:  ADDWFC x76,W
05E78:  MOVLB  A
05E7A:  MOVWF  x7B
05E7C:  MOVLW  00
05E7E:  MOVLB  3
05E80:  ADDWFC x77,W
05E82:  MOVLB  A
05E84:  MOVWF  x7C
05E86:  MOVLW  10
05E88:  MOVLB  A
05E8A:  ADDWF  x7A,W
05E8C:  MOVLB  3
05E8E:  MOVWF  x71
05E90:  MOVLW  00
05E92:  MOVLB  A
05E94:  ADDWFC x7B,W
05E96:  MOVLB  3
05E98:  MOVWF  x72
05E9A:  MOVLW  00
05E9C:  MOVLB  A
05E9E:  ADDWFC x7C,W
05EA0:  MOVLB  3
05EA2:  MOVWF  x73
.................... 
.................... //	antes de salva, verifica se este setor está apagado,caso não esteja, apaga o setor de 4K.
.................... 	aux_b1 = read_byte_flash(aux_l1); 
05EA4:  MOVFF  373,A7C
05EA8:  MOVFF  372,A7B
05EAC:  MOVFF  371,A7A
05EB0:  MOVFF  370,A79
05EB4:  MOVLB  0
05EB6:  CALL   550A
05EBA:  MOVFF  01,3B1
.................... 	if (aux_b1 != 0xff)
05EBE:  MOVLB  3
05EC0:  INCFSZ xB1,W
05EC2:  BRA    5EC6
05EC4:  BRA    5EDE
.................... 		{
.................... 		sector_flash_erase(aux_l1);
05EC6:  MOVFF  373,A7C
05ECA:  MOVFF  372,A7B
05ECE:  MOVFF  371,A7A
05ED2:  MOVFF  370,A79
05ED6:  MOVLB  0
05ED8:  CALL   56D6
05EDC:  MOVLB  3
.................... 		}
.................... 	
.................... /* salva no buffer da flash */	
.................... 	aux_b3 = TAM_REGS;
05EDE:  MOVLW  20
05EE0:  MOVWF  xB3
.................... 	for (aux_b4 = 0; aux_b4 < aux_b3; aux_b4++)
05EE2:  CLRF   xB4
05EE4:  MOVF   xB3,W
05EE6:  SUBWF  xB4,W
05EE8:  BC    5F26
.................... 		{
.................... 		write_byte_flash(aux_l1, buf_dados[aux_b4]);
05EEA:  CLRF   03
05EEC:  MOVF   xB4,W
05EEE:  ADDLW  59
05EF0:  MOVWF  FE9
05EF2:  MOVLW  0A
05EF4:  ADDWFC 03,W
05EF6:  MOVWF  FEA
05EF8:  MOVFF  FEF,A7E
05EFC:  MOVFF  373,A7D
05F00:  MOVFF  372,A7C
05F04:  MOVFF  371,A7B
05F08:  MOVFF  370,A7A
05F0C:  MOVLB  0
05F0E:  RCALL  5748
.................... 		aux_l1++;
05F10:  MOVLW  01
05F12:  MOVLB  3
05F14:  ADDWF  x70,F
05F16:  BTFSC  FD8.0
05F18:  INCF   x71,F
05F1A:  BTFSC  FD8.2
05F1C:  INCF   x72,F
05F1E:  BTFSC  FD8.2
05F20:  INCF   x73,F
05F22:  INCF   xB4,F
05F24:  BRA    5EE4
.................... 		}
.................... 	WRDI(aux_l1);	//Desabilita flash para gravação.
05F26:  MOVFF  373,A7C
05F2A:  MOVFF  372,A7B
05F2E:  MOVFF  371,A7A
05F32:  MOVFF  370,A79
05F36:  MOVLB  0
05F38:  RCALL  57C4
.................... 	aux_w1++;
05F3A:  MOVLB  3
05F3C:  INCF   x62,F
05F3E:  BTFSC  FD8.2
05F40:  INCF   x63,F
.................... 	if (aux_w1 > limite_ocorrencias)
05F42:  MOVF   x63,F
05F44:  BNZ   5F4C
05F46:  MOVF   x62,W
05F48:  SUBLW  FA
05F4A:  BC    5F50
.................... 		{
.................... 		aux_w1 = 0;	
05F4C:  CLRF   x63
05F4E:  CLRF   x62
.................... 		}
.................... 	#if (com_relogio == true)
.................... 		write_word_nvr(ds_ptr_ocor, aux_w1);
05F50:  MOVLW  0E
05F52:  MOVLB  A
05F54:  MOVWF  x79
05F56:  MOVFF  363,A7B
05F5A:  MOVFF  362,A7A
05F5E:  MOVLB  0
05F60:  RCALL  5802
.................... 	#else
05F62:  RETURN 0
.................... 		write_word(ee_ptr_rocor, aux_w1);
.................... 	#endif
.................... }
.................... 
.................... 
.................... void apaga_ocorrencias(void)
.................... {
.................... 	
.................... 	aux_l1 = inicio_ocorrencias;
*
0A6FC:  MOVLB  3
0A6FE:  CLRF   x73
0A700:  MOVLW  07
0A702:  MOVWF  x72
0A704:  MOVLW  63
0A706:  MOVWF  x71
0A708:  CLRF   x70
.................... 	
.................... 	sector_flash_erase(aux_l1);
0A70A:  MOVFF  373,A7C
0A70E:  MOVFF  372,A7B
0A712:  MOVFF  371,A7A
0A716:  MOVFF  370,A79
0A71A:  MOVLB  0
0A71C:  CALL   56D6
.................... 	aux_l1 += 4096;
0A720:  MOVLW  10
0A722:  MOVLB  3
0A724:  ADDWF  x71,F
0A726:  MOVLW  00
0A728:  ADDWFC x72,F
0A72A:  ADDWFC x73,F
.................... 	sector_flash_erase(aux_l1);
0A72C:  MOVFF  373,A7C
0A730:  MOVFF  372,A7B
0A734:  MOVFF  371,A7A
0A738:  MOVFF  370,A79
0A73C:  MOVLB  0
0A73E:  CALL   56D6
.................... 	aux_l1 += 4096;
0A742:  MOVLW  10
0A744:  MOVLB  3
0A746:  ADDWF  x71,F
0A748:  MOVLW  00
0A74A:  ADDWFC x72,F
0A74C:  ADDWFC x73,F
.................... 	sector_flash_erase(aux_l1);
0A74E:  MOVFF  373,A7C
0A752:  MOVFF  372,A7B
0A756:  MOVFF  371,A7A
0A75A:  MOVFF  370,A79
0A75E:  MOVLB  0
0A760:  CALL   56D6
.................... 
.................... 	write_word_nvr(ds_ptr_ocor, 0);
0A764:  MOVLW  0E
0A766:  MOVLB  A
0A768:  MOVWF  x79
0A76A:  CLRF   x7B
0A76C:  CLRF   x7A
0A76E:  MOVLB  0
0A770:  CALL   5802
.................... 	grava_ocorrencias(reg_apagou);
0A774:  MOVLW  1D
0A776:  MOVLB  A
0A778:  MOVWF  x58
0A77A:  MOVLB  0
0A77C:  CALL   5828
.................... 	
.................... 	mensagem(2,37);
0A780:  MOVLW  02
0A782:  MOVLB  A
0A784:  MOVWF  x4D
0A786:  MOVLW  25
0A788:  MOVWF  x4E
0A78A:  MOVLB  0
0A78C:  CALL   47E8
.................... 	delay_ms(2000);
0A790:  MOVLW  08
0A792:  MOVLB  A
0A794:  MOVWF  x4A
0A796:  MOVLW  FA
0A798:  MOVWF  x67
0A79A:  MOVLB  0
0A79C:  CALL   1834
0A7A0:  MOVLB  A
0A7A2:  DECFSZ x4A,F
0A7A4:  BRA    A796
0A7A6:  MOVLB  0
0A7A8:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... 
.................... void tx_ocor_mdb(void)
.................... {
.................... 	char x;
.................... 	char y;
.................... 	
.................... 	
.................... 	aux_l1 = (int32)(addr_regs_modbus);
*
097BA:  MOVLB  3
097BC:  CLRF   x73
097BE:  CLRF   x72
097C0:  MOVFF  52A,371
097C4:  MOVFF  529,370
.................... 	
.................... 	aux_l2 = (int32)(addr_inicio_coleta_ocor);
097C8:  CLRF   x77
097CA:  CLRF   x76
097CC:  MOVLW  75
097CE:  MOVWF  x75
097D0:  MOVLW  94
097D2:  MOVWF  x74
.................... 	
.................... 	aux_l2 = (int32)(aux_l1 - aux_l2);
097D4:  MOVF   x74,W
097D6:  SUBWF  x70,W
097D8:  MOVWF  00
097DA:  MOVF   x75,W
097DC:  SUBWFB x71,W
097DE:  MOVWF  01
097E0:  MOVF   x76,W
097E2:  SUBWFB x72,W
097E4:  MOVWF  02
097E6:  MOVF   x77,W
097E8:  SUBWFB x73,W
097EA:  MOVWF  x77
097EC:  MOVFF  02,376
097F0:  MOVFF  01,375
097F4:  MOVFF  00,374
.................... 
.................... 	aux_l1 = inicio_ocorrencias;
097F8:  CLRF   x73
097FA:  MOVLW  07
097FC:  MOVWF  x72
097FE:  MOVLW  63
09800:  MOVWF  x71
09802:  CLRF   x70
.................... 
.................... 	aux_l1 = aux_l1 + (int32)(aux_l2 * TAM_REGS);
09804:  RLCF   x74,W
09806:  MOVWF  00
09808:  RLCF   x75,W
0980A:  MOVWF  01
0980C:  RLCF   x76,W
0980E:  MOVWF  02
09810:  RLCF   x77,W
09812:  MOVWF  03
09814:  RLCF   00,F
09816:  RLCF   01,F
09818:  RLCF   02,F
0981A:  RLCF   03,F
0981C:  RLCF   00,F
0981E:  RLCF   01,F
09820:  RLCF   02,F
09822:  RLCF   03,F
09824:  RLCF   00,F
09826:  RLCF   01,F
09828:  RLCF   02,F
0982A:  RLCF   03,F
0982C:  RLCF   00,F
0982E:  RLCF   01,F
09830:  RLCF   02,F
09832:  RLCF   03,F
09834:  MOVLW  E0
09836:  ANDWF  00,F
09838:  MOVF   00,W
0983A:  ADDWF  x70,F
0983C:  MOVF   01,W
0983E:  ADDWFC x71,F
09840:  MOVF   02,W
09842:  ADDWFC x72,F
09844:  MOVF   03,W
09846:  ADDWFC x73,F
.................... 
.................... 	y = (nro_pontos_modbus * 2);
09848:  BCF    FD8.0
0984A:  MOVLB  5
0984C:  RLCF   x27,W
0984E:  MOVWF  02
09850:  RLCF   x28,W
09852:  MOVFF  02,A4E
09856:  MOVLB  A
.................... 	for (x = 0; x < y ; x++)
09858:  CLRF   x4D
0985A:  MOVF   x4E,W
0985C:  SUBWF  x4D,W
0985E:  BC    98B4
.................... 		{
.................... 		buf_tx[ptrtx++] = read_byte_flash(aux_l1); 
09860:  MOVLB  5
09862:  MOVF   x2F,W
09864:  INCF   x2F,F
09866:  ADDLW  48
09868:  MOVWF  01
0986A:  MOVLW  09
0986C:  MOVWF  03
0986E:  BTFSC  FD8.0
09870:  INCF   03,F
09872:  MOVFF  01,A4F
09876:  MOVFF  03,A50
0987A:  MOVFF  373,A7C
0987E:  MOVFF  372,A7B
09882:  MOVFF  371,A7A
09886:  MOVFF  370,A79
0988A:  MOVLB  0
0988C:  CALL   550A
09890:  MOVFF  A50,FEA
09894:  MOVFF  A4F,FE9
09898:  MOVFF  01,FEF
.................... 		aux_l1++;
0989C:  MOVLW  01
0989E:  MOVLB  3
098A0:  ADDWF  x70,F
098A2:  BTFSC  FD8.0
098A4:  INCF   x71,F
098A6:  BTFSC  FD8.2
098A8:  INCF   x72,F
098AA:  BTFSC  FD8.2
098AC:  INCF   x73,F
098AE:  MOVLB  A
098B0:  INCF   x4D,F
098B2:  BRA    985A
....................    		}
098B4:  MOVLB  0
098B6:  GOTO   A4E0 (RETURN)
....................     	
.................... }
.................... 
.................... 
.................... 
.................... /* fim st_ocor */    
.................... 
.................... 	#if (com_cht == true)
.................... 		#include "st_rcht.c"
.................... 	#endif		
.................... #endif
.................... #if (com_cht == true)
.................... 	#include "st_ccht.c"
.................... #endif
.................... #include "st8500_deci.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ROTINAS                               	                     *
.................... ; Funcao: MODULO DE ROTINAS DE COMUNICACAO								 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 01/08/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... void valida_max_kw(void){	
.................... 	char aux_b1;
.................... 	word aux_w1;
.................... 	
.................... 	max_kw = read_word(ee_max_kw);
*
035F8:  MOVLW  02
035FA:  MOVLB  A
035FC:  MOVWF  x5D
035FE:  MOVLW  81
03600:  MOVWF  x5C
03602:  MOVLB  0
03604:  CALL   170A
03608:  MOVFF  02,66
0360C:  MOVFF  01,65
.................... 	aux_w1 = 0;
03610:  MOVLB  A
03612:  CLRF   x4E
03614:  CLRF   x4D
.................... 	for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++){
03616:  CLRF   x4C
03618:  MOVLB  0
0361A:  MOVF   x6D,W
0361C:  MOVLB  A
0361E:  SUBWF  x4C,W
03620:  BC    363C
.................... 		aux_w1 += carga[aux_b1];
03622:  CLRF   03
03624:  MOVF   x4C,W
03626:  ADDLW  07
03628:  MOVWF  FE9
0362A:  MOVLW  01
0362C:  ADDWFC 03,W
0362E:  MOVWF  FEA
03630:  MOVF   FEF,W
03632:  ADDWF  x4D,F
03634:  MOVLW  00
03636:  ADDWFC x4E,F
03638:  INCF   x4C,F
0363A:  BRA    3618
.................... 	}
.................... 	carga_instalada = aux_w1;
0363C:  MOVFF  A4E,6F
03640:  MOVFF  A4D,6E
.................... 	if (max_kw > aux_w1){
03644:  MOVF   x4E,W
03646:  MOVLB  0
03648:  SUBWF  x66,W
0364A:  BNC   3666
0364C:  BNZ   365E
0364E:  MOVF   x65,W
03650:  MOVLB  A
03652:  SUBWF  x4D,W
03654:  BTFSS  FD8.0
03656:  BRA    365C
03658:  MOVLB  0
0365A:  BRA    3666
0365C:  MOVLB  0
.................... 		max_kw = 100 * NRO_MAXIMO_CARGAS;
0365E:  MOVLW  06
03660:  MOVWF  x66
03662:  MOVLW  40
03664:  MOVWF  x65
.................... 	}
.................... 	for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++){
03666:  MOVLB  A
03668:  CLRF   x4C
0366A:  MOVLB  0
0366C:  MOVF   x6D,W
0366E:  MOVLB  A
03670:  SUBWF  x4C,W
03672:  BC    36AC
.................... 		if (max_kw < carga[aux_b1]){
03674:  CLRF   03
03676:  MOVF   x4C,W
03678:  ADDLW  07
0367A:  MOVWF  FE9
0367C:  MOVLW  01
0367E:  ADDWFC 03,W
03680:  MOVWF  FEA
03682:  MOVF   FEF,W
03684:  MOVLB  0
03686:  MOVF   x66,F
03688:  BNZ   36A6
0368A:  SUBWF  x65,W
0368C:  BC    36A6
.................... 			max_kw = carga[aux_b1];
0368E:  CLRF   03
03690:  MOVLB  A
03692:  MOVF   x4C,W
03694:  ADDLW  07
03696:  MOVWF  FE9
03698:  MOVLW  01
0369A:  ADDWFC 03,W
0369C:  MOVWF  FEA
0369E:  MOVLB  0
036A0:  CLRF   x66
036A2:  MOVFF  FEF,65
.................... 		}
036A6:  MOVLB  A
036A8:  INCF   x4C,F
036AA:  BRA    366A
.................... 	}
.................... 		
.................... 	menor_carga = carga_instalada;
036AC:  MOVFF  6F,71
036B0:  MOVFF  6E,70
.................... 	for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++){
036B4:  CLRF   x4C
036B6:  MOVLB  0
036B8:  MOVF   x6D,W
036BA:  MOVLB  A
036BC:  SUBWF  x4C,W
036BE:  BC    36FA
.................... 		if (menor_carga > carga[aux_b1]){
036C0:  CLRF   03
036C2:  MOVF   x4C,W
036C4:  ADDLW  07
036C6:  MOVWF  FE9
036C8:  MOVLW  01
036CA:  ADDWFC 03,W
036CC:  MOVWF  FEA
036CE:  MOVF   FEF,W
036D0:  MOVLB  0
036D2:  MOVF   x71,F
036D4:  BNZ   36DC
036D6:  SUBWF  x70,W
036D8:  BZ    36F4
036DA:  BNC   36F4
.................... 			menor_carga = carga[aux_b1];
036DC:  CLRF   03
036DE:  MOVLB  A
036E0:  MOVF   x4C,W
036E2:  ADDLW  07
036E4:  MOVWF  FE9
036E6:  MOVLW  01
036E8:  ADDWFC 03,W
036EA:  MOVWF  FEA
036EC:  MOVLB  0
036EE:  CLRF   x71
036F0:  MOVFF  FEF,70
.................... 		}
036F4:  MOVLB  A
036F6:  INCF   x4C,F
036F8:  BRA    36B6
.................... 	}
036FA:  MOVLB  0
036FC:  RETURN 0
.................... }		
.................... 		
.................... void vali_nro_cargas(void){
....................     if ((nro_cargas == 0) || (nro_cargas > NRO_MAXIMO_CARGAS)){
*
01C78:  MOVF   x6D,F
01C7A:  BZ    1C82
01C7C:  MOVF   x6D,W
01C7E:  SUBLW  10
01C80:  BC    1CB4
....................    	   	nro_cargas = read_byte(ee_nro_cargas);
01C82:  MOVLW  03
01C84:  MOVLB  A
01C86:  MOVWF  x66
01C88:  MOVLW  13
01C8A:  MOVWF  x65
01C8C:  MOVLB  0
01C8E:  RCALL  1C24
01C90:  MOVFF  01,6D
....................     	if ((nro_cargas == 0) || (nro_cargas > NRO_MAXIMO_CARGAS)){
01C94:  MOVF   x6D,F
01C96:  BZ    1C9E
01C98:  MOVF   x6D,W
01C9A:  SUBLW  10
01C9C:  BC    1CB4
.................... 	 	   	nro_cargas = NRO_MAXIMO_CARGAS;
01C9E:  MOVLW  10
01CA0:  MOVWF  x6D
.................... 			write_byte(ee_nro_cargas, NRO_MAXIMO_CARGAS);
01CA2:  MOVLW  03
01CA4:  MOVLB  A
01CA6:  MOVWF  x68
01CA8:  MOVLW  13
01CAA:  MOVWF  x67
01CAC:  MOVLW  10
01CAE:  MOVWF  x69
01CB0:  MOVLB  0
01CB2:  RCALL  1C46
.................... 	   	}
.................... 	}
01CB4:  RETURN 0
.................... }
.................... 
.................... void apaga_tempos(void){					
.................... 	for (data1 = 0; data1 < NRO_MAXIMO_CARGAS; data1++){
*
0B1F6:  MOVLB  3
0B1F8:  CLRF   xBE
0B1FA:  MOVF   xBE,W
0B1FC:  SUBLW  0F
0B1FE:  BNC   B2AE
.................... 		minuteiro[data1] = 0;
0B200:  CLRF   03
0B202:  MOVF   xBE,W
0B204:  ADDLW  A7
0B206:  MOVWF  FE9
0B208:  MOVLW  00
0B20A:  ADDWFC 03,W
0B20C:  MOVWF  FEA
0B20E:  CLRF   FEF
.................... 		horimetro[data1] = 0;
0B210:  BCF    FD8.0
0B212:  RLCF   xBE,W
0B214:  CLRF   03
0B216:  ADDLW  87
0B218:  MOVWF  FE9
0B21A:  MOVLW  00
0B21C:  ADDWFC 03,W
0B21E:  MOVWF  FEA
0B220:  CLRF   FEC
0B222:  MOVF   FED,F
0B224:  CLRF   FEF
.................... 		acionamentos[data1] = 0;
0B226:  BCF    FD8.0
0B228:  RLCF   xBE,W
0B22A:  CLRF   03
0B22C:  ADDLW  C7
0B22E:  MOVWF  FE9
0B230:  MOVLW  00
0B232:  ADDWFC 03,W
0B234:  MOVWF  FEA
0B236:  CLRF   FEC
0B238:  MOVF   FED,F
0B23A:  CLRF   FEF
.................... 		write_byte(ee_minuteiro + data1, 0);
0B23C:  MOVLW  8A
0B23E:  ADDWF  xBE,W
0B240:  MOVLB  A
0B242:  MOVWF  x4A
0B244:  MOVLW  02
0B246:  MOVWF  x4B
0B248:  BTFSC  FD8.0
0B24A:  INCF   x4B,F
0B24C:  MOVFF  A4B,A68
0B250:  MOVFF  A4A,A67
0B254:  CLRF   x69
0B256:  MOVLB  0
0B258:  CALL   1C46
.................... 		write_word(ee_horimetro + (data1 * 2), 0);
0B25C:  BCF    FD8.0
0B25E:  MOVLB  3
0B260:  RLCF   xBE,W
0B262:  ADDLW  9A
0B264:  MOVLB  A
0B266:  MOVWF  x4A
0B268:  MOVLW  02
0B26A:  MOVWF  x4B
0B26C:  BTFSC  FD8.0
0B26E:  INCF   x4B,F
0B270:  MOVFF  A4B,A5D
0B274:  MOVFF  A4A,A5C
0B278:  CLRF   x5F
0B27A:  CLRF   x5E
0B27C:  MOVLB  0
0B27E:  CALL   23AE
.................... 		write_word(ee_acionamentos + (data1 * 2), 0);
0B282:  BCF    FD8.0
0B284:  MOVLB  3
0B286:  RLCF   xBE,W
0B288:  ADDLW  BA
0B28A:  MOVLB  A
0B28C:  MOVWF  x4A
0B28E:  MOVLW  02
0B290:  MOVWF  x4B
0B292:  BTFSC  FD8.0
0B294:  INCF   x4B,F
0B296:  MOVFF  A4B,A5D
0B29A:  MOVFF  A4A,A5C
0B29E:  CLRF   x5F
0B2A0:  CLRF   x5E
0B2A2:  MOVLB  0
0B2A4:  CALL   23AE
0B2A8:  MOVLB  3
0B2AA:  INCF   xBE,F
0B2AC:  BRA    B1FA
.................... 	}
0B2AE:  MOVLB  0
0B2B0:  RETURN 0
.................... }
.................... void recupera_tempos_acionamentos(void){
.................... 	for (aux_b1 = 0; aux_b1 < NRO_MAXIMO_CARGAS; aux_b1++){
*
02F56:  MOVLB  3
02F58:  CLRF   xB1
02F5A:  MOVF   xB1,W
02F5C:  SUBLW  0F
02F5E:  BTFSS  FD8.0
02F60:  BRA    30B6
.................... 		minuteiro[aux_b1] = read_byte(ee_minuteiro + aux_b1);
02F62:  CLRF   03
02F64:  MOVF   xB1,W
02F66:  ADDLW  A7
02F68:  MOVWF  01
02F6A:  MOVLW  00
02F6C:  ADDWFC 03,F
02F6E:  MOVFF  01,A4A
02F72:  MOVFF  03,A4B
02F76:  MOVLW  8A
02F78:  MOVLB  3
02F7A:  ADDWF  xB1,W
02F7C:  MOVLB  A
02F7E:  MOVWF  x4C
02F80:  MOVLW  02
02F82:  MOVWF  x4D
02F84:  BTFSC  FD8.0
02F86:  INCF   x4D,F
02F88:  MOVFF  A4D,A66
02F8C:  MOVFF  A4C,A65
02F90:  MOVLB  0
02F92:  CALL   1C24
02F96:  MOVFF  A4B,FEA
02F9A:  MOVFF  A4A,FE9
02F9E:  MOVFF  01,FEF
.................... 		horimetro[aux_b1] = read_word(ee_horimetro + (aux_b1 * 2));
02FA2:  BCF    FD8.0
02FA4:  MOVLB  3
02FA6:  RLCF   xB1,W
02FA8:  CLRF   03
02FAA:  ADDLW  87
02FAC:  MOVWF  01
02FAE:  MOVLW  00
02FB0:  ADDWFC 03,F
02FB2:  MOVFF  01,A4A
02FB6:  MOVFF  03,A4B
02FBA:  BCF    FD8.0
02FBC:  MOVLB  3
02FBE:  RLCF   xB1,W
02FC0:  ADDLW  9A
02FC2:  MOVLB  A
02FC4:  MOVWF  x4C
02FC6:  MOVLW  02
02FC8:  MOVWF  x4D
02FCA:  BTFSC  FD8.0
02FCC:  INCF   x4D,F
02FCE:  MOVFF  A4D,A5D
02FD2:  MOVFF  A4C,A5C
02FD6:  MOVLB  0
02FD8:  CALL   170A
02FDC:  MOVFF  A4B,FEA
02FE0:  MOVFF  A4A,FE9
02FE4:  MOVFF  02,FEC
02FE8:  MOVF   FED,F
02FEA:  MOVFF  01,FEF
.................... 		acionamentos[aux_b1] = read_word(ee_acionamentos + (aux_b1 * 2));
02FEE:  BCF    FD8.0
02FF0:  MOVLB  3
02FF2:  RLCF   xB1,W
02FF4:  CLRF   03
02FF6:  ADDLW  C7
02FF8:  MOVWF  01
02FFA:  MOVLW  00
02FFC:  ADDWFC 03,F
02FFE:  MOVFF  01,A4A
03002:  MOVFF  03,A4B
03006:  BCF    FD8.0
03008:  MOVLB  3
0300A:  RLCF   xB1,W
0300C:  ADDLW  BA
0300E:  MOVLB  A
03010:  MOVWF  x4C
03012:  MOVLW  02
03014:  MOVWF  x4D
03016:  BTFSC  FD8.0
03018:  INCF   x4D,F
0301A:  MOVFF  A4D,A5D
0301E:  MOVFF  A4C,A5C
03022:  MOVLB  0
03024:  CALL   170A
03028:  MOVFF  A4B,FEA
0302C:  MOVFF  A4A,FE9
03030:  MOVFF  02,FEC
03034:  MOVF   FED,F
03036:  MOVFF  01,FEF
.................... 		tempo_repouso[aux_b1] = read_byte(ee_tempo_repouso_1 + aux_b1);
0303A:  CLRF   03
0303C:  MOVLB  3
0303E:  MOVF   xB1,W
03040:  ADDLW  E7
03042:  MOVWF  01
03044:  MOVLW  00
03046:  ADDWFC 03,F
03048:  MOVFF  01,A4A
0304C:  MOVFF  03,A4B
03050:  MOVLW  DA
03052:  MOVLB  3
03054:  ADDWF  xB1,W
03056:  MOVLB  A
03058:  MOVWF  x4C
0305A:  MOVLW  02
0305C:  MOVWF  x4D
0305E:  BTFSC  FD8.0
03060:  INCF   x4D,F
03062:  MOVFF  A4D,A66
03066:  MOVFF  A4C,A65
0306A:  MOVLB  0
0306C:  CALL   1C24
03070:  MOVFF  A4B,FEA
03074:  MOVFF  A4A,FE9
03078:  MOVFF  01,FEF
.................... 		aux_tempo_repouso[aux_b1] = tempo_repouso[aux_b1];
0307C:  CLRF   03
0307E:  MOVLB  3
03080:  MOVF   xB1,W
03082:  ADDLW  F7
03084:  MOVWF  01
03086:  MOVLW  00
03088:  ADDWFC 03,F
0308A:  MOVFF  03,A4B
0308E:  CLRF   03
03090:  MOVLB  3
03092:  MOVF   xB1,W
03094:  ADDLW  E7
03096:  MOVWF  FE9
03098:  MOVLW  00
0309A:  ADDWFC 03,W
0309C:  MOVWF  FEA
0309E:  MOVFF  FEF,A4C
030A2:  MOVLB  A
030A4:  MOVFF  A4B,FEA
030A8:  MOVFF  01,FE9
030AC:  MOVFF  A4C,FEF
030B0:  MOVLB  3
030B2:  INCF   xB1,F
030B4:  BRA    2F5A
.................... 	}
030B6:  MOVLB  0
030B8:  GOTO   3292 (RETURN)
.................... }
.................... 
.................... void salva_contadores(void){
.................... 	char aux_b1;
.................... 	for (aux_b1 = 0; aux_b1 < NRO_MAXIMO_CARGAS; aux_b1++){
*
0DB90:  MOVLB  A
0DB92:  CLRF   x50
0DB94:  MOVF   x50,W
0DB96:  SUBLW  0F
0DB98:  BNC   DC42
.................... 		write_byte(ee_minuteiro + aux_b1, minuteiro[aux_b1]);
0DB9A:  MOVLW  8A
0DB9C:  ADDWF  x50,W
0DB9E:  MOVWF  x51
0DBA0:  MOVLW  02
0DBA2:  MOVWF  x52
0DBA4:  BTFSC  FD8.0
0DBA6:  INCF   x52,F
0DBA8:  CLRF   03
0DBAA:  MOVF   x50,W
0DBAC:  ADDLW  A7
0DBAE:  MOVWF  FE9
0DBB0:  MOVLW  00
0DBB2:  ADDWFC 03,W
0DBB4:  MOVWF  FEA
0DBB6:  MOVFF  FEF,A69
0DBBA:  MOVFF  A52,A68
0DBBE:  MOVFF  A51,A67
0DBC2:  MOVLB  0
0DBC4:  CALL   1C46
.................... 		write_word(ee_horimetro + (aux_b1 * 2), horimetro[aux_b1]);
0DBC8:  BCF    FD8.0
0DBCA:  MOVLB  A
0DBCC:  RLCF   x50,W
0DBCE:  ADDLW  9A
0DBD0:  MOVWF  x51
0DBD2:  MOVLW  02
0DBD4:  MOVWF  x52
0DBD6:  BTFSC  FD8.0
0DBD8:  INCF   x52,F
0DBDA:  BCF    FD8.0
0DBDC:  RLCF   x50,W
0DBDE:  CLRF   03
0DBE0:  ADDLW  87
0DBE2:  MOVWF  FE9
0DBE4:  MOVLW  00
0DBE6:  ADDWFC 03,W
0DBE8:  MOVWF  FEA
0DBEA:  MOVFF  FEC,A5F
0DBEE:  MOVF   FED,F
0DBF0:  MOVFF  FEF,A5E
0DBF4:  MOVFF  A52,A5D
0DBF8:  MOVFF  A51,A5C
0DBFC:  MOVLB  0
0DBFE:  CALL   23AE
.................... 		write_word(ee_acionamentos + (aux_b1 * 2), acionamentos[aux_b1]);
0DC02:  BCF    FD8.0
0DC04:  MOVLB  A
0DC06:  RLCF   x50,W
0DC08:  ADDLW  BA
0DC0A:  MOVWF  x51
0DC0C:  MOVLW  02
0DC0E:  MOVWF  x52
0DC10:  BTFSC  FD8.0
0DC12:  INCF   x52,F
0DC14:  BCF    FD8.0
0DC16:  RLCF   x50,W
0DC18:  CLRF   03
0DC1A:  ADDLW  C7
0DC1C:  MOVWF  FE9
0DC1E:  MOVLW  00
0DC20:  ADDWFC 03,W
0DC22:  MOVWF  FEA
0DC24:  MOVFF  FEC,A5F
0DC28:  MOVF   FED,F
0DC2A:  MOVFF  FEF,A5E
0DC2E:  MOVFF  A52,A5D
0DC32:  MOVFF  A51,A5C
0DC36:  MOVLB  0
0DC38:  CALL   23AE
0DC3C:  MOVLB  A
0DC3E:  INCF   x50,F
0DC40:  BRA    DB94
.................... 	}
0DC42:  MOVLB  0
0DC44:  RETURN 0
.................... }
.................... 
.................... void trata_saidas(void){
.................... 	output_01 = LED;
*
016A2:  MOVFF  884,72
.................... 	output_low(CSIO1);
016A6:  BCF    F96.4
016A8:  BCF    F8D.4
.................... 	output_d(output_01);
016AA:  MOVFF  72,F8C
.................... 	output_high(CSIO1);
016AE:  BCF    F96.4
016B0:  BSF    F8D.4
.................... 		
.................... 	output_low(CSIO4);
016B2:  BCF    F96.7
016B4:  BCF    F8D.7
.................... 	output_d(0b00010000);
016B6:  MOVLW  10
016B8:  MOVWF  F8C
.................... 	output_high(CSIO4);
016BA:  BCF    F96.7
016BC:  BSF    F8D.7
.................... 
.................... 	if (modo_saidas == MODO_INVERTIDO){
016BE:  MOVF   x6C,F
016C0:  BNZ   16E8
.................... 		output_01 = saida2;
016C2:  MOVFF  885,72
.................... 		output_01 = ~output_01;
016C6:  COMF   x72,F
.................... 		output_low(CSIO2);
016C8:  BCF    F96.5
016CA:  BCF    F8D.5
.................... 		output_d(output_01);
016CC:  MOVFF  72,F8C
.................... 		output_high(CSIO2);
016D0:  BCF    F96.5
016D2:  BSF    F8D.5
.................... 		
.................... 		output_01 = saida3;
016D4:  MOVFF  886,72
.................... 		output_01 = ~output_01;
016D8:  COMF   x72,F
.................... 		output_low(CSIO3);
016DA:  BCF    F96.6
016DC:  BCF    F8D.6
.................... 		output_d(output_01);
016DE:  MOVFF  72,F8C
.................... 		output_high(CSIO3);
016E2:  BCF    F96.6
016E4:  BSF    F8D.6
.................... 	}
016E6:  BRA    1708
.................... 	else{	
.................... 		output_01 = saida2;
016E8:  MOVFF  885,72
.................... 		output_low(CSIO2);
016EC:  BCF    F96.5
016EE:  BCF    F8D.5
.................... 		output_d(output_01);
016F0:  MOVFF  72,F8C
.................... 		output_high(CSIO2);
016F4:  BCF    F96.5
016F6:  BSF    F8D.5
.................... 		
.................... 		output_01 = saida3;
016F8:  MOVFF  886,72
.................... 		output_low(CSIO3);
016FC:  BCF    F96.6
016FE:  BCF    F8D.6
.................... 		output_d(output_01);
01700:  MOVFF  72,F8C
.................... 		output_high(CSIO3);
01704:  BCF    F96.6
01706:  BSF    F8D.6
.................... 	}
01708:  RETURN 0
.................... }				
.................... 
.................... void trata_desliga_ten_a(void){
.................... 	if (com_des_ten_a != 0){		/* SE PROGRAMACAO DIFERENTE DE ZERO COM CRITICA */
*
161D6:  MOVF   59,F
161D8:  BTFSC  FD8.2
161DA:  BRA    16380
.................... 		if ((tipo_ligacao == 0) || (tipo_ligacao == 2)){
161DC:  MOVLB  4
161DE:  MOVF   xC7,F
161E0:  BZ    161E8
161E2:  MOVF   xC7,W
161E4:  SUBLW  02
161E6:  BNZ   161F2
.................... 			aux_w1 = ten_nomi;
161E8:  MOVFF  4BE,363
161EC:  MOVFF  4BD,362
.................... 		}
161F0:  BRA    16246
.................... 		else{
.................... 			aux_w1 = (int16)(ten_nomi * 1.7320508);
161F2:  MOVFF  4BE,A7E
161F6:  MOVFF  4BD,A7D
161FA:  MOVLB  0
161FC:  CALL   2924
16200:  MOVFF  03,A80
16204:  MOVFF  02,A7F
16208:  MOVFF  01,A7E
1620C:  MOVFF  00,A7D
16210:  MOVLW  D7
16212:  MOVLB  A
16214:  MOVWF  x84
16216:  MOVLW  B3
16218:  MOVWF  x83
1621A:  MOVLW  5D
1621C:  MOVWF  x82
1621E:  MOVLW  7F
16220:  MOVWF  x81
16222:  MOVLB  0
16224:  CALL   5306
16228:  MOVFF  03,A7C
1622C:  MOVFF  02,A7B
16230:  MOVFF  01,A7A
16234:  MOVFF  00,A79
16238:  CALL   53FC
1623C:  MOVFF  02,363
16240:  MOVFF  01,362
16244:  MOVLB  4
.................... 		}
.................... // valor para tensao acima da minima			
.................... 		aux_w2 = aux_w1;
16246:  MOVFF  363,365
1624A:  MOVFF  362,364
.................... 		aux_w2 = (int16)(aux_w2 << 6);
1624E:  MOVLB  3
16250:  RLCF   x64,F
16252:  RLCF   x65,F
16254:  RLCF   x64,F
16256:  RLCF   x65,F
16258:  RLCF   x64,F
1625A:  RLCF   x65,F
1625C:  RLCF   x64,F
1625E:  RLCF   x65,F
16260:  RLCF   x64,F
16262:  RLCF   x65,F
16264:  RLCF   x64,F
16266:  RLCF   x65,F
16268:  MOVLW  C0
1626A:  ANDWF  x64,F
.................... // valor para tensao abaixo da minima		
.................... 		aux_w1 = 1 + (int16)((aux_w1 * com_des_ten_a)/100);
1626C:  MOVFF  363,A67
16270:  MOVFF  362,A66
16274:  MOVLB  A
16276:  CLRF   x69
16278:  MOVFF  59,A68
1627C:  MOVLB  0
1627E:  CALL   473C
16282:  MOVFF  02,A4B
16286:  MOVFF  01,A4A
1628A:  MOVFF  02,A6C
1628E:  MOVFF  01,A6B
16292:  MOVLB  A
16294:  CLRF   x6E
16296:  MOVLW  64
16298:  MOVWF  x6D
1629A:  MOVLB  0
1629C:  CALL   4ECC
162A0:  MOVF   01,W
162A2:  ADDLW  01
162A4:  MOVLB  3
162A6:  MOVWF  x62
162A8:  MOVLW  00
162AA:  ADDWFC 02,W
162AC:  MOVWF  x63
.................... 		aux_w1 = (int16)((aux_w1 + aux_w2) * 64);
162AE:  MOVF   x64,W
162B0:  ADDWF  x62,W
162B2:  MOVLB  A
162B4:  MOVWF  x4A
162B6:  MOVLB  3
162B8:  MOVF   x65,W
162BA:  ADDWFC x63,W
162BC:  MOVLB  A
162BE:  MOVWF  x4B
162C0:  RLCF   x4A,W
162C2:  MOVLB  3
162C4:  MOVWF  x62
162C6:  MOVLB  A
162C8:  RLCF   x4B,W
162CA:  MOVLB  3
162CC:  MOVWF  x63
162CE:  RLCF   x62,F
162D0:  RLCF   x63,F
162D2:  RLCF   x62,F
162D4:  RLCF   x63,F
162D6:  RLCF   x62,F
162D8:  RLCF   x63,F
162DA:  RLCF   x62,F
162DC:  RLCF   x63,F
162DE:  RLCF   x62,F
162E0:  RLCF   x63,F
162E2:  MOVLW  C0
162E4:  ANDWF  x62,F
.................... 		if ((tensao_r > aux_w1) || (tensao_s > aux_w1) || (tensao_t > aux_w1)){
162E6:  MOVF   x63,W
162E8:  MOVLB  2
162EA:  SUBWF  x51,W
162EC:  BNC   162FE
162EE:  BNZ   16330
162F0:  MOVF   x50,W
162F2:  MOVLB  3
162F4:  SUBWF  x62,W
162F6:  BTFSC  FD8.0
162F8:  BRA    162FE
162FA:  MOVLB  2
162FC:  BRA    16330
162FE:  MOVLB  3
16300:  MOVF   x63,W
16302:  MOVLB  2
16304:  SUBWF  xD5,W
16306:  BNC   16318
16308:  BNZ   16330
1630A:  MOVF   xD4,W
1630C:  MOVLB  3
1630E:  SUBWF  x62,W
16310:  BTFSC  FD8.0
16312:  BRA    16318
16314:  MOVLB  2
16316:  BRA    16330
16318:  MOVLB  3
1631A:  MOVF   x63,W
1631C:  SUBWF  x2C,W
1631E:  BNC   16334
16320:  BTFSC  FD8.2
16322:  BRA    16328
16324:  MOVLB  2
16326:  BRA    16330
16328:  MOVF   x2B,W
1632A:  SUBWF  x62,W
1632C:  BC    16334
1632E:  MOVLB  2
.................... 			des_ten_a = true;
16330:  BSF    25.3
.................... 		}
16332:  BRA    1637C
.................... 		else if ((tensao_r < aux_w2) && (tensao_s < aux_w2) && (tensao_t < aux_w2)){
16334:  MOVLB  2
16336:  MOVF   x51,W
16338:  MOVLB  3
1633A:  SUBWF  x65,W
1633C:  BNC   1637A
1633E:  BNZ   1634E
16340:  MOVF   x64,W
16342:  MOVLB  2
16344:  SUBWF  x50,W
16346:  BTFSS  FD8.0
16348:  BRA    1634E
1634A:  MOVLB  3
1634C:  BRA    1637A
1634E:  MOVLB  2
16350:  MOVF   xD5,W
16352:  MOVLB  3
16354:  SUBWF  x65,W
16356:  BNC   1637A
16358:  BNZ   1636A
1635A:  MOVF   x64,W
1635C:  MOVLB  2
1635E:  SUBWF  xD4,W
16360:  BTFSS  FD8.0
16362:  BRA    16368
16364:  MOVLB  3
16366:  BRA    1637A
16368:  MOVLB  3
1636A:  MOVF   x2C,W
1636C:  SUBWF  x65,W
1636E:  BNC   1637A
16370:  BNZ   16378
16372:  MOVF   x64,W
16374:  SUBWF  x2B,W
16376:  BC    1637A
.................... 			des_ten_a = false;
16378:  BCF    25.3
1637A:  MOVLB  2
.................... 		}
.................... 	}
1637C:  BRA    16384
1637E:  MOVLB  0
.................... 	else{
.................... 		des_ten_a = false;
16380:  BCF    25.3
16382:  MOVLB  2
.................... 	}
16384:  MOVLB  0
16386:  GOTO   16F8E (RETURN)
.................... }
.................... 
.................... void ligar_carga(char carga){
.................... 	char saida;
.................... 
.................... 	ligou_carga = false;
*
0A884:  BCF    26.3
.................... 	if (aux_tempo_repouso[carga] == 0){
0A886:  CLRF   03
0A888:  MOVLB  A
0A88A:  MOVF   x65,W
0A88C:  ADDLW  F7
0A88E:  MOVWF  FE9
0A890:  MOVLW  00
0A892:  ADDWFC 03,W
0A894:  MOVWF  FEA
0A896:  MOVF   FEF,F
0A898:  BTFSS  FD8.2
0A89A:  BRA    A9AE
.................... 		switch (carga){
0A89C:  MOVF   x65,W
0A89E:  ADDLW  F0
0A8A0:  BTFSC  FD8.0
0A8A2:  BRA    A9AE
0A8A4:  ADDLW  10
0A8A6:  MOVLB  0
0A8A8:  GOTO   AA18
.................... 			case 0:{
.................... 				if (TRIAC_1 == false){
0A8AC:  MOVLB  8
0A8AE:  BTFSC  x85.0
0A8B0:  BRA    A8B6
.................... 					TRIAC_1 = true;
0A8B2:  BSF    x85.0
.................... 					ligou_carga = true;
0A8B4:  BSF    26.3
.................... 				}
.................... 				break;
0A8B6:  MOVLB  A
0A8B8:  BRA    A9AE
0A8BA:  MOVLB  0
.................... 			}
.................... 			case 1:{
.................... 				if (TRIAC_2 == false){
0A8BC:  MOVLB  8
0A8BE:  BTFSC  x85.1
0A8C0:  BRA    A8C6
.................... 					TRIAC_2 = true;
0A8C2:  BSF    x85.1
.................... 					ligou_carga = true;
0A8C4:  BSF    26.3
.................... 				}
.................... 				break;
0A8C6:  MOVLB  A
0A8C8:  BRA    A9AE
0A8CA:  MOVLB  0
.................... 			}
.................... 			case 2:{
.................... 				if (TRIAC_3 == false){
0A8CC:  MOVLB  8
0A8CE:  BTFSC  x85.2
0A8D0:  BRA    A8D6
.................... 					TRIAC_3 = true;
0A8D2:  BSF    x85.2
.................... 					ligou_carga = true;
0A8D4:  BSF    26.3
.................... 				}
.................... 				break;
0A8D6:  MOVLB  A
0A8D8:  BRA    A9AE
0A8DA:  MOVLB  0
.................... 			}
.................... 			case 3:{
.................... 				if (TRIAC_4 == false){
0A8DC:  MOVLB  8
0A8DE:  BTFSC  x85.3
0A8E0:  BRA    A8E6
.................... 					TRIAC_4 = true;
0A8E2:  BSF    x85.3
.................... 					ligou_carga = true;
0A8E4:  BSF    26.3
.................... 				}
.................... 				break;
0A8E6:  MOVLB  A
0A8E8:  BRA    A9AE
0A8EA:  MOVLB  0
.................... 			}
.................... 			case 4:{
.................... 				if (TRIAC_5 == false){
0A8EC:  MOVLB  8
0A8EE:  BTFSC  x85.4
0A8F0:  BRA    A8F6
.................... 					TRIAC_5 = true;
0A8F2:  BSF    x85.4
.................... 					ligou_carga = true;
0A8F4:  BSF    26.3
.................... 				}
.................... 				break;
0A8F6:  MOVLB  A
0A8F8:  BRA    A9AE
0A8FA:  MOVLB  0
.................... 			}
.................... 			case 5:{
.................... 				if (TRIAC_6 == false){
0A8FC:  MOVLB  8
0A8FE:  BTFSC  x85.5
0A900:  BRA    A906
.................... 					TRIAC_6 = true;
0A902:  BSF    x85.5
.................... 					ligou_carga = true;
0A904:  BSF    26.3
.................... 				}
.................... 				break;
0A906:  MOVLB  A
0A908:  BRA    A9AE
0A90A:  MOVLB  0
.................... 			}
.................... 			case 6:{
.................... 				if (TRIAC_7 == false){
0A90C:  MOVLB  8
0A90E:  BTFSC  x85.6
0A910:  BRA    A916
.................... 					TRIAC_7 = true;
0A912:  BSF    x85.6
.................... 					ligou_carga = true;
0A914:  BSF    26.3
.................... 				}
.................... 				break;
0A916:  MOVLB  A
0A918:  BRA    A9AE
0A91A:  MOVLB  0
.................... 			}
.................... 			case 7:{
.................... 				if (TRIAC_8 == false){
0A91C:  MOVLB  8
0A91E:  BTFSC  x85.7
0A920:  BRA    A926
.................... 					TRIAC_8 = true;
0A922:  BSF    x85.7
.................... 					ligou_carga = true;
0A924:  BSF    26.3
.................... 				}
.................... 				break;
0A926:  MOVLB  A
0A928:  BRA    A9AE
0A92A:  MOVLB  0
.................... 			}
.................... 			case 8:{
.................... 				if (TRIAC_9 == false){
0A92C:  MOVLB  8
0A92E:  BTFSC  x86.0
0A930:  BRA    A936
.................... 					TRIAC_9 = true;
0A932:  BSF    x86.0
.................... 					ligou_carga = true;
0A934:  BSF    26.3
.................... 				}
.................... 				break;
0A936:  MOVLB  A
0A938:  BRA    A9AE
0A93A:  MOVLB  0
.................... 			}
.................... 			case 9:{
.................... 				if (TRIAC_10 == false){
0A93C:  MOVLB  8
0A93E:  BTFSC  x86.1
0A940:  BRA    A946
.................... 					TRIAC_10 = true;
0A942:  BSF    x86.1
.................... 					ligou_carga = true;
0A944:  BSF    26.3
.................... 				}
.................... 				break;
0A946:  MOVLB  A
0A948:  BRA    A9AE
0A94A:  MOVLB  0
.................... 			}
.................... 			case 10:{
.................... 				if (TRIAC_11 == false){
0A94C:  MOVLB  8
0A94E:  BTFSC  x86.2
0A950:  BRA    A956
.................... 					TRIAC_11 = true;
0A952:  BSF    x86.2
.................... 					ligou_carga = true;
0A954:  BSF    26.3
.................... 				}
.................... 				break;
0A956:  MOVLB  A
0A958:  BRA    A9AE
0A95A:  MOVLB  0
.................... 			}
.................... 			case 11:{
.................... 				if (TRIAC_12 == false){
0A95C:  MOVLB  8
0A95E:  BTFSC  x86.3
0A960:  BRA    A966
.................... 					TRIAC_12 = true;
0A962:  BSF    x86.3
.................... 					ligou_carga = true;
0A964:  BSF    26.3
.................... 				}
.................... 				break;
0A966:  MOVLB  A
0A968:  BRA    A9AE
0A96A:  MOVLB  0
.................... 			}
.................... 			case 12:{
.................... 				if (TRIAC_13 == false){
0A96C:  MOVLB  8
0A96E:  BTFSC  x86.4
0A970:  BRA    A976
.................... 					TRIAC_13 = true;
0A972:  BSF    x86.4
.................... 					ligou_carga = true;
0A974:  BSF    26.3
.................... 				}
.................... 				break;
0A976:  MOVLB  A
0A978:  BRA    A9AE
0A97A:  MOVLB  0
.................... 			}
.................... 			case 13:{
.................... 				if (TRIAC_14 == false){
0A97C:  MOVLB  8
0A97E:  BTFSC  x86.5
0A980:  BRA    A986
.................... 					TRIAC_14 = true;
0A982:  BSF    x86.5
.................... 					ligou_carga = true;
0A984:  BSF    26.3
.................... 				}
.................... 				break;
0A986:  MOVLB  A
0A988:  BRA    A9AE
0A98A:  MOVLB  0
.................... 			}
.................... 			case 14:{
.................... 				if (TRIAC_15 == false){
0A98C:  MOVLB  8
0A98E:  BTFSC  x86.6
0A990:  BRA    A996
.................... 					TRIAC_15 = true;
0A992:  BSF    x86.6
.................... 					ligou_carga = true;
0A994:  BSF    26.3
.................... 				}
.................... 				break;
0A996:  MOVLB  A
0A998:  BRA    A9AE
0A99A:  MOVLB  0
.................... 			}
.................... 			case 15:{
.................... 				if (TRIAC_16 == false){
0A99C:  MOVLB  8
0A99E:  BTFSC  x86.7
0A9A0:  BRA    A9A6
.................... 					TRIAC_16 = true;
0A9A2:  BSF    x86.7
.................... 					ligou_carga = true;
0A9A4:  BSF    26.3
.................... 				}
.................... 				break;
0A9A6:  MOVLB  A
0A9A8:  BRA    A9AE
0A9AA:  MOVLB  0
0A9AC:  MOVLB  A
.................... 			}
.................... 		}
.................... 	}
.................... 	if (ligou_carga == true){
0A9AE:  BTFSS  26.3
0A9B0:  BRA    AA14
.................... 		aux_tempo_aciona = tempo_aciona;
0A9B2:  MOVFF  6A,68
.................... 		ultimo_tempo_aciona = tempo_aciona;
0A9B6:  MOVFF  6A,69
.................... 		acionamentos[carga]++;
0A9BA:  BCF    FD8.0
0A9BC:  RLCF   x65,W
0A9BE:  CLRF   03
0A9C0:  ADDLW  C7
0A9C2:  MOVWF  FE9
0A9C4:  MOVLW  00
0A9C6:  ADDWFC 03,W
0A9C8:  MOVWF  FEA
0A9CA:  MOVLW  01
0A9CC:  ADDWF  FEE,F
0A9CE:  BNC   A9D2
0A9D0:  INCF   FEF,F
.................... 		ptr_aciona = carga;
0A9D2:  MOVFF  A65,85
.................... 		carga_acionada[carga] = true;
0A9D6:  CLRF   03
0A9D8:  MOVF   x65,W
0A9DA:  ADDLW  17
0A9DC:  MOVWF  FE9
0A9DE:  MOVLW  01
0A9E0:  ADDWFC 03,W
0A9E2:  MOVWF  FEA
0A9E4:  MOVLW  01
0A9E6:  MOVWF  FEF
.................... 		saida = SAIDA2;
0A9E8:  MOVFF  885,A66
.................... 		write_byte(ee_saida2, saida);
0A9EC:  CLRF   x68
0A9EE:  MOVLW  4A
0A9F0:  MOVWF  x67
0A9F2:  MOVFF  A66,A69
0A9F6:  MOVLB  0
0A9F8:  CALL   1C46
.................... 		saida = SAIDA3;
0A9FC:  MOVFF  886,A66
.................... 		write_byte(ee_saida3, saida);
0AA00:  MOVLB  A
0AA02:  CLRF   x68
0AA04:  MOVLW  4B
0AA06:  MOVWF  x67
0AA08:  MOVFF  A66,A69
0AA0C:  MOVLB  0
0AA0E:  CALL   1C46
0AA12:  MOVLB  A
.................... 	}
0AA14:  MOVLB  0
0AA16:  RETURN 0
.................... }
.................... 
.................... void desligar_carga(char carga){
.................... 	char saida;
.................... 	desligou_carga = false;
*
01CB6:  BCF    26.4
.................... 
.................... 	switch (carga){
01CB8:  MOVLB  A
01CBA:  MOVF   x65,W
01CBC:  ADDLW  F0
01CBE:  BTFSC  FD8.0
01CC0:  BRA    1DCC
01CC2:  ADDLW  10
01CC4:  MOVLB  0
01CC6:  GOTO   1E46
.................... 		case 0:{
.................... 			if (TRIAC_1 == true){
01CCA:  MOVLB  8
01CCC:  BTFSS  x85.0
01CCE:  BRA    1CD4
.................... 				TRIAC_1 = false;
01CD0:  BCF    x85.0
.................... 				desligou_carga = true;
01CD2:  BSF    26.4
.................... 			}
.................... 			break;
01CD4:  MOVLB  A
01CD6:  BRA    1DCC
01CD8:  MOVLB  0
.................... 		}
.................... 		case 1:{
.................... 			if (TRIAC_2 == true){
01CDA:  MOVLB  8
01CDC:  BTFSS  x85.1
01CDE:  BRA    1CE4
.................... 				TRIAC_2 = false;
01CE0:  BCF    x85.1
.................... 				desligou_carga = true;
01CE2:  BSF    26.4
.................... 			}
.................... 			break;
01CE4:  MOVLB  A
01CE6:  BRA    1DCC
01CE8:  MOVLB  0
.................... 		}
.................... 		case 2:{
.................... 			if (TRIAC_3 == true){
01CEA:  MOVLB  8
01CEC:  BTFSS  x85.2
01CEE:  BRA    1CF4
.................... 				TRIAC_3 = false;
01CF0:  BCF    x85.2
.................... 				desligou_carga = true;
01CF2:  BSF    26.4
.................... 			}
.................... 			break;
01CF4:  MOVLB  A
01CF6:  BRA    1DCC
01CF8:  MOVLB  0
.................... 		}
.................... 		case 3:{
.................... 			if (TRIAC_4 == true){
01CFA:  MOVLB  8
01CFC:  BTFSS  x85.3
01CFE:  BRA    1D04
.................... 				TRIAC_4 = false;
01D00:  BCF    x85.3
.................... 				desligou_carga = true;
01D02:  BSF    26.4
.................... 			}
.................... 			break;
01D04:  MOVLB  A
01D06:  BRA    1DCC
01D08:  MOVLB  0
.................... 		}
.................... 		case 4:{
.................... 			if (TRIAC_5 == true){
01D0A:  MOVLB  8
01D0C:  BTFSS  x85.4
01D0E:  BRA    1D14
.................... 				TRIAC_5 = false;
01D10:  BCF    x85.4
.................... 				desligou_carga = true;
01D12:  BSF    26.4
.................... 			}
.................... 			break;
01D14:  MOVLB  A
01D16:  BRA    1DCC
01D18:  MOVLB  0
.................... 		}
.................... 		case 5:{
.................... 			if (TRIAC_6 == true){
01D1A:  MOVLB  8
01D1C:  BTFSS  x85.5
01D1E:  BRA    1D24
.................... 				TRIAC_6 = false;
01D20:  BCF    x85.5
.................... 				desligou_carga = true;
01D22:  BSF    26.4
.................... 			}
.................... 			break;
01D24:  MOVLB  A
01D26:  BRA    1DCC
01D28:  MOVLB  0
.................... 		}
.................... 		case 6:{
.................... 			if (TRIAC_7 == true){
01D2A:  MOVLB  8
01D2C:  BTFSS  x85.6
01D2E:  BRA    1D34
.................... 				TRIAC_7 = false;
01D30:  BCF    x85.6
.................... 				desligou_carga = true;
01D32:  BSF    26.4
.................... 			}
.................... 			break;
01D34:  MOVLB  A
01D36:  BRA    1DCC
01D38:  MOVLB  0
.................... 		}
.................... 		case 7:{
.................... 			if (TRIAC_8 == true){
01D3A:  MOVLB  8
01D3C:  BTFSS  x85.7
01D3E:  BRA    1D44
.................... 				TRIAC_8 = false;
01D40:  BCF    x85.7
.................... 				desligou_carga = true;
01D42:  BSF    26.4
.................... 			}
.................... 			break;
01D44:  MOVLB  A
01D46:  BRA    1DCC
01D48:  MOVLB  0
.................... 		}
.................... 		case 8:{
.................... 			if (TRIAC_9 == true){
01D4A:  MOVLB  8
01D4C:  BTFSS  x86.0
01D4E:  BRA    1D54
.................... 				TRIAC_9 = false;
01D50:  BCF    x86.0
.................... 				desligou_carga = true;
01D52:  BSF    26.4
.................... 			}
.................... 			break;
01D54:  MOVLB  A
01D56:  BRA    1DCC
01D58:  MOVLB  0
.................... 		}
.................... 		case 9:{
.................... 			if (TRIAC_10 == true){
01D5A:  MOVLB  8
01D5C:  BTFSS  x86.1
01D5E:  BRA    1D64
.................... 				TRIAC_10 = false;
01D60:  BCF    x86.1
.................... 				desligou_carga = true;
01D62:  BSF    26.4
.................... 			}
.................... 			break;
01D64:  MOVLB  A
01D66:  BRA    1DCC
01D68:  MOVLB  0
.................... 		}
.................... 		case 10:{
.................... 			if (TRIAC_11 == true){
01D6A:  MOVLB  8
01D6C:  BTFSS  x86.2
01D6E:  BRA    1D74
.................... 				TRIAC_11 = false;
01D70:  BCF    x86.2
.................... 				desligou_carga = true;
01D72:  BSF    26.4
.................... 			}
.................... 			break;
01D74:  MOVLB  A
01D76:  BRA    1DCC
01D78:  MOVLB  0
.................... 		}
.................... 		case 11:{
.................... 			if (TRIAC_12 == true){
01D7A:  MOVLB  8
01D7C:  BTFSS  x86.3
01D7E:  BRA    1D84
.................... 				TRIAC_12 = false;
01D80:  BCF    x86.3
.................... 				desligou_carga = true;
01D82:  BSF    26.4
.................... 			}
.................... 			break;
01D84:  MOVLB  A
01D86:  BRA    1DCC
01D88:  MOVLB  0
.................... 		}
.................... 		case 12:{
.................... 			if (TRIAC_13 == true){
01D8A:  MOVLB  8
01D8C:  BTFSS  x86.4
01D8E:  BRA    1D94
.................... 				TRIAC_13 = false;
01D90:  BCF    x86.4
.................... 				desligou_carga = true;
01D92:  BSF    26.4
.................... 			}
.................... 			break;
01D94:  MOVLB  A
01D96:  BRA    1DCC
01D98:  MOVLB  0
.................... 		}
.................... 		case 13:{
.................... 			if (TRIAC_14 == true){
01D9A:  MOVLB  8
01D9C:  BTFSS  x86.5
01D9E:  BRA    1DA4
.................... 				TRIAC_14 = false;
01DA0:  BCF    x86.5
.................... 				desligou_carga = true;
01DA2:  BSF    26.4
.................... 			}
.................... 			break;
01DA4:  MOVLB  A
01DA6:  BRA    1DCC
01DA8:  MOVLB  0
.................... 		}
.................... 		case 14:{
.................... 			if (TRIAC_15 == true){
01DAA:  MOVLB  8
01DAC:  BTFSS  x86.6
01DAE:  BRA    1DB4
.................... 				TRIAC_15 = false;
01DB0:  BCF    x86.6
.................... 				desligou_carga = true;
01DB2:  BSF    26.4
.................... 			}
.................... 			break;
01DB4:  MOVLB  A
01DB6:  BRA    1DCC
01DB8:  MOVLB  0
.................... 		}
.................... 		case 15:{
.................... 			if (TRIAC_16 == true){
01DBA:  MOVLB  8
01DBC:  BTFSS  x86.7
01DBE:  BRA    1DC4
.................... 				TRIAC_16 = false;
01DC0:  BCF    x86.7
.................... 				desligou_carga = true;
01DC2:  BSF    26.4
.................... 			}
.................... 			break;
01DC4:  MOVLB  A
01DC6:  BRA    1DCC
01DC8:  MOVLB  0
01DCA:  MOVLB  A
.................... 		}
.................... 	}
.................... 
.................... 	if (desligou_carga == true){
01DCC:  BTFSS  26.4
01DCE:  BRA    1E42
.................... 		aux_tempo_aciona = tempo_desaciona;
01DD0:  MOVFF  6B,68
.................... 		ultimo_tempo_aciona = tempo_desaciona;
01DD4:  MOVFF  6B,69
.................... 		aux_tempo_repouso[carga] = tempo_repouso[carga];
01DD8:  CLRF   03
01DDA:  MOVF   x65,W
01DDC:  ADDLW  F7
01DDE:  MOVWF  01
01DE0:  MOVLW  00
01DE2:  ADDWFC 03,F
01DE4:  MOVFF  03,A68
01DE8:  CLRF   03
01DEA:  MOVF   x65,W
01DEC:  ADDLW  E7
01DEE:  MOVWF  FE9
01DF0:  MOVLW  00
01DF2:  ADDWFC 03,W
01DF4:  MOVWF  FEA
01DF6:  MOVFF  FEF,A69
01DFA:  MOVFF  A68,FEA
01DFE:  MOVFF  01,FE9
01E02:  MOVFF  A69,FEF
.................... 		ptr_desaciona = carga;
01E06:  MOVFF  A65,86
.................... 		carga_acionada[carga] = false;
01E0A:  CLRF   03
01E0C:  MOVF   x65,W
01E0E:  ADDLW  17
01E10:  MOVWF  FE9
01E12:  MOVLW  01
01E14:  ADDWFC 03,W
01E16:  MOVWF  FEA
01E18:  CLRF   FEF
.................... 		saida = SAIDA2;
01E1A:  MOVFF  885,A66
.................... 		write_byte(ee_saida2, saida);
01E1E:  CLRF   x68
01E20:  MOVLW  4A
01E22:  MOVWF  x67
01E24:  MOVFF  A66,A69
01E28:  MOVLB  0
01E2A:  RCALL  1C46
.................... 		saida = SAIDA3;
01E2C:  MOVFF  886,A66
.................... 		write_byte(ee_saida3, saida);
01E30:  MOVLB  A
01E32:  CLRF   x68
01E34:  MOVLW  4B
01E36:  MOVWF  x67
01E38:  MOVFF  A66,A69
01E3C:  MOVLB  0
01E3E:  RCALL  1C46
01E40:  MOVLB  A
.................... 	}	
01E42:  MOVLB  0
01E44:  RETURN 0
.................... }
.................... 
.................... void trata_tempos_aciona_repouso(void){
....................    	for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++){
*
17068:  MOVLB  3
1706A:  CLRF   xB1
1706C:  MOVLB  0
1706E:  MOVF   x6D,W
17070:  MOVLB  3
17072:  SUBWF  xB1,W
17074:  BC    17102
.................... 		if (aux_tempo_repouso[aux_b1] > 0){
17076:  CLRF   03
17078:  MOVF   xB1,W
1707A:  ADDLW  F7
1707C:  MOVWF  FE9
1707E:  MOVLW  00
17080:  ADDWFC 03,W
17082:  MOVWF  FEA
17084:  MOVF   FEF,F
17086:  BZ    170FA
.................... 			if (aux_tempo_repouso[aux_b1] > tempo_repouso[aux_b1]){
17088:  CLRF   03
1708A:  MOVF   xB1,W
1708C:  ADDLW  F7
1708E:  MOVWF  FE9
17090:  MOVLW  00
17092:  ADDWFC 03,W
17094:  MOVWF  FEA
17096:  MOVFF  FEF,A4A
1709A:  CLRF   03
1709C:  MOVF   xB1,W
1709E:  ADDLW  E7
170A0:  MOVWF  FE9
170A2:  MOVLW  00
170A4:  ADDWFC 03,W
170A6:  MOVWF  FEA
170A8:  MOVF   FEF,W
170AA:  MOVLB  A
170AC:  SUBWF  x4A,W
170AE:  BZ    170E8
170B0:  BNC   170E8
.................... 				aux_tempo_repouso[aux_b1] = tempo_repouso[aux_b1];
170B2:  CLRF   03
170B4:  MOVLB  3
170B6:  MOVF   xB1,W
170B8:  ADDLW  F7
170BA:  MOVWF  01
170BC:  MOVLW  00
170BE:  ADDWFC 03,F
170C0:  MOVFF  03,A4B
170C4:  CLRF   03
170C6:  MOVLB  3
170C8:  MOVF   xB1,W
170CA:  ADDLW  E7
170CC:  MOVWF  FE9
170CE:  MOVLW  00
170D0:  ADDWFC 03,W
170D2:  MOVWF  FEA
170D4:  MOVFF  FEF,A4C
170D8:  MOVLB  A
170DA:  MOVFF  A4B,FEA
170DE:  MOVFF  01,FE9
170E2:  MOVFF  A4C,FEF
.................... 			}
170E6:  BRA    170FC
.................... 			else{
.................... 				aux_tempo_repouso[aux_b1]--;
170E8:  CLRF   03
170EA:  MOVLB  3
170EC:  MOVF   xB1,W
170EE:  ADDLW  F7
170F0:  MOVWF  FE9
170F2:  MOVLW  00
170F4:  ADDWFC 03,W
170F6:  MOVWF  FEA
170F8:  DECF   FEF,F
170FA:  MOVLB  A
.................... 			}
.................... 		}
170FC:  MOVLB  3
170FE:  INCF   xB1,F
17100:  BRA    1706C
.................... 	}
.................... 		
.................... 	if (aux_tempo_aciona != 0){
17102:  MOVLB  0
17104:  MOVF   x68,F
17106:  BZ    1710A
.................... 		aux_tempo_aciona--;
17108:  DECF   x68,F
.................... 	}
1710A:  GOTO   1737E (RETURN)
.................... }
.................... 
.................... // saida2 com os primeiros 8 cargas
.................... // Saida3 com os ultimos 8 cargas
.................... void trata_segundeiro(void){
.................... 	for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++){
1710E:  MOVLB  3
17110:  CLRF   xB1
17112:  MOVLB  0
17114:  MOVF   x6D,W
17116:  MOVLB  3
17118:  SUBWF  xB1,W
1711A:  BTFSC  FD8.0
1711C:  BRA    17266
.................... 		if (carga_acionada[aux_b1] == 1){
1711E:  CLRF   03
17120:  MOVF   xB1,W
17122:  ADDLW  17
17124:  MOVWF  FE9
17126:  MOVLW  01
17128:  ADDWFC 03,W
1712A:  MOVWF  FEA
1712C:  DECFSZ FEF,W
1712E:  BRA    17262
.................... 			segundeiro[aux_b1]++;
17130:  CLRF   03
17132:  MOVF   xB1,W
17134:  ADDLW  B7
17136:  MOVWF  FE9
17138:  MOVLW  00
1713A:  ADDWFC 03,W
1713C:  MOVWF  FEA
1713E:  INCF   FEF,F
.................... 			if (segundeiro[aux_b1] > 59){
17140:  CLRF   03
17142:  MOVF   xB1,W
17144:  ADDLW  B7
17146:  MOVWF  FE9
17148:  MOVLW  00
1714A:  ADDWFC 03,W
1714C:  MOVWF  FEA
1714E:  MOVF   FEF,W
17150:  SUBLW  3B
17152:  BTFSC  FD8.0
17154:  BRA    17262
.................... 				segundeiro[aux_b1] = 0;
17156:  CLRF   03
17158:  MOVF   xB1,W
1715A:  ADDLW  B7
1715C:  MOVWF  FE9
1715E:  MOVLW  00
17160:  ADDWFC 03,W
17162:  MOVWF  FEA
17164:  CLRF   FEF
.................... 				minuteiro[aux_b1]++;
17166:  CLRF   03
17168:  MOVF   xB1,W
1716A:  ADDLW  A7
1716C:  MOVWF  FE9
1716E:  MOVLW  00
17170:  ADDWFC 03,W
17172:  MOVWF  FEA
17174:  INCF   FEF,F
.................... 				if (minuteiro[aux_b1]>59){
17176:  CLRF   03
17178:  MOVF   xB1,W
1717A:  ADDLW  A7
1717C:  MOVWF  FE9
1717E:  MOVLW  00
17180:  ADDWFC 03,W
17182:  MOVWF  FEA
17184:  MOVF   FEF,W
17186:  SUBLW  3B
17188:  BC    17262
.................... 					minuteiro[aux_b1] = 0;
1718A:  CLRF   03
1718C:  MOVF   xB1,W
1718E:  ADDLW  A7
17190:  MOVWF  FE9
17192:  MOVLW  00
17194:  ADDWFC 03,W
17196:  MOVWF  FEA
17198:  CLRF   FEF
.................... 					horimetro[aux_b1]++;
1719A:  BCF    FD8.0
1719C:  RLCF   xB1,W
1719E:  CLRF   03
171A0:  ADDLW  87
171A2:  MOVWF  FE9
171A4:  MOVLW  00
171A6:  ADDWFC 03,W
171A8:  MOVWF  FEA
171AA:  MOVLW  01
171AC:  ADDWF  FEE,F
171AE:  BNC   171B2
171B0:  INCF   FEF,F
.................... 					write_byte(ee_minuteiro + aux_b1, minuteiro[aux_b1]);
171B2:  MOVLW  8A
171B4:  ADDWF  xB1,W
171B6:  MOVLB  A
171B8:  MOVWF  x4A
171BA:  MOVLW  02
171BC:  MOVWF  x4B
171BE:  BTFSC  FD8.0
171C0:  INCF   x4B,F
171C2:  CLRF   03
171C4:  MOVLB  3
171C6:  MOVF   xB1,W
171C8:  ADDLW  A7
171CA:  MOVWF  FE9
171CC:  MOVLW  00
171CE:  ADDWFC 03,W
171D0:  MOVWF  FEA
171D2:  MOVFF  FEF,A69
171D6:  MOVFF  A4B,A68
171DA:  MOVFF  A4A,A67
171DE:  MOVLB  0
171E0:  CALL   1C46
.................... 					write_word(ee_horimetro + (aux_b1* 2), horimetro[aux_b1]);
171E4:  BCF    FD8.0
171E6:  MOVLB  3
171E8:  RLCF   xB1,W
171EA:  ADDLW  9A
171EC:  MOVLB  A
171EE:  MOVWF  x4A
171F0:  MOVLW  02
171F2:  MOVWF  x4B
171F4:  BTFSC  FD8.0
171F6:  INCF   x4B,F
171F8:  BCF    FD8.0
171FA:  MOVLB  3
171FC:  RLCF   xB1,W
171FE:  CLRF   03
17200:  ADDLW  87
17202:  MOVWF  FE9
17204:  MOVLW  00
17206:  ADDWFC 03,W
17208:  MOVWF  FEA
1720A:  MOVFF  FEC,A5F
1720E:  MOVF   FED,F
17210:  MOVFF  FEF,A5E
17214:  MOVFF  A4B,A5D
17218:  MOVFF  A4A,A5C
1721C:  MOVLB  0
1721E:  CALL   23AE
.................... 					write_word(ee_acionamentos + (aux_b1 * 2), acionamentos[aux_b1]);
17222:  BCF    FD8.0
17224:  MOVLB  3
17226:  RLCF   xB1,W
17228:  ADDLW  BA
1722A:  MOVLB  A
1722C:  MOVWF  x4A
1722E:  MOVLW  02
17230:  MOVWF  x4B
17232:  BTFSC  FD8.0
17234:  INCF   x4B,F
17236:  BCF    FD8.0
17238:  MOVLB  3
1723A:  RLCF   xB1,W
1723C:  CLRF   03
1723E:  ADDLW  C7
17240:  MOVWF  FE9
17242:  MOVLW  00
17244:  ADDWFC 03,W
17246:  MOVWF  FEA
17248:  MOVFF  FEC,A5F
1724C:  MOVF   FED,F
1724E:  MOVFF  FEF,A5E
17252:  MOVFF  A4B,A5D
17256:  MOVFF  A4A,A5C
1725A:  MOVLB  0
1725C:  CALL   23AE
17260:  MOVLB  3
.................... 				}
.................... 			}
.................... 		}
17262:  INCF   xB1,F
17264:  BRA    17112
.................... 	}
17266:  MOVLB  0
17268:  GOTO   17380 (RETURN)
.................... }
.................... 
.................... char trata_desligamentos(char carga){
.................... 	desligou_carga = false;
.................... 	if (carga_acionada[carga] == true){
.................... 		desligar_carga(carga);
.................... 	}
.................... 	if (desligou_carga == true){
.................... 		aux_tempo_aciona = tempo_desaciona;
.................... 		ultimo_tempo_aciona = tempo_desaciona;
.................... 		return(carga);
.................... 	}
.................... 	else{
.................... 		return(0xff);
.................... 	}
.................... }
.................... char trata_acionamentos(char carga){
.................... 	ligou_carga = false;
.................... 	if (carga_disponivel[carga] == true){
.................... 		ligar_carga(carga);
.................... 	}
.................... 	if (ligou_carga == true){
.................... 		aux_tempo_aciona = tempo_aciona;
.................... 		ultimo_tempo_aciona = tempo_aciona;
.................... 		return(carga);
.................... 	}
.................... 	else{
.................... 		return(0xff);
.................... 	}
.................... }
.................... 
.................... void ve_carga_disponivel(void){
.................... 	char aux_b1;
.................... 	for (aux_b1 = 0; aux_b1 < nro_cargas; aux_b1++){
.................... 		if (carga[aux_b1] > 0){
.................... 			if (carga_acionada[aux_b1] == false){
.................... 				carga_disponivel[aux_b1] = true;
.................... 			}
.................... 			else if (carga_acionada[aux_b1] == true){
.................... 				carga_disponivel[aux_b1] = false;
.................... 			}
.................... 			else{
.................... 				carga_disponivel[aux_b1] = true;
.................... 				desligar_carga(aux_b1);
.................... 			}
.................... 		}
.................... 		else{
.................... 			carga_disponivel[aux_b1] = false;
.................... 		}
.................... 	}
.................... }
.................... 
.................... void busca_demanda_contratada(void){
.................... 	char periodo_fatura_old;
.................... 	int32 tempo_ponta, tempo_fora, tempo_atual;
.................... 	
.................... 	periodo_fatura_old = periodo_fatura;
*
06A36:  MOVFF  35F,A4B
.................... 	periodo_fatura = 0;
06A3A:  MOVLB  3
06A3C:  CLRF   x5F
.................... 	
.................... 	aux_l1 = (int32)(hora);
06A3E:  CLRF   x73
06A40:  CLRF   x72
06A42:  CLRF   x71
06A44:  MOVFF  3C2,370
.................... 	aux_l2 = (int32)(minuto);
06A48:  CLRF   x77
06A4A:  CLRF   x76
06A4C:  CLRF   x75
06A4E:  MOVFF  3C3,374
.................... 	aux_l1 = aux_l1 * 3600;
06A52:  MOVFF  373,A75
06A56:  MOVFF  372,A74
06A5A:  MOVFF  371,A73
06A5E:  MOVFF  370,A72
06A62:  MOVLB  A
06A64:  CLRF   x79
06A66:  CLRF   x78
06A68:  MOVLW  0E
06A6A:  MOVWF  x77
06A6C:  MOVLW  10
06A6E:  MOVWF  x76
06A70:  MOVLB  0
06A72:  RCALL  67FC
06A74:  MOVFF  03,373
06A78:  MOVFF  02,372
06A7C:  MOVFF  01,371
06A80:  MOVFF  00,370
.................... 	aux_l2 = aux_l2 * 60;
06A84:  MOVFF  377,A75
06A88:  MOVFF  376,A74
06A8C:  MOVFF  375,A73
06A90:  MOVFF  374,A72
06A94:  MOVLB  A
06A96:  CLRF   x79
06A98:  CLRF   x78
06A9A:  CLRF   x77
06A9C:  MOVLW  3C
06A9E:  MOVWF  x76
06AA0:  MOVLB  0
06AA2:  RCALL  67FC
06AA4:  MOVFF  03,377
06AA8:  MOVFF  02,376
06AAC:  MOVFF  01,375
06AB0:  MOVFF  00,374
.................... 	tempo_atual = aux_l1 + aux_l2;
06AB4:  MOVLB  3
06AB6:  MOVF   x74,W
06AB8:  ADDWF  x70,W
06ABA:  MOVLB  A
06ABC:  MOVWF  x54
06ABE:  MOVLB  3
06AC0:  MOVF   x75,W
06AC2:  ADDWFC x71,W
06AC4:  MOVLB  A
06AC6:  MOVWF  x55
06AC8:  MOVLB  3
06ACA:  MOVF   x76,W
06ACC:  ADDWFC x72,W
06ACE:  MOVLB  A
06AD0:  MOVWF  x56
06AD2:  MOVLB  3
06AD4:  MOVF   x77,W
06AD6:  ADDWFC x73,W
06AD8:  MOVLB  A
06ADA:  MOVWF  x57
.................... 				
.................... 	aux_l1 = (int32)(hora_ponta);
06ADC:  MOVLB  3
06ADE:  CLRF   x73
06AE0:  CLRF   x72
06AE2:  CLRF   x71
06AE4:  MOVFF  515,370
.................... 	aux_l2 = (int32)(minuto_ponta);
06AE8:  CLRF   x77
06AEA:  CLRF   x76
06AEC:  CLRF   x75
06AEE:  MOVFF  516,374
.................... 	aux_l1 = aux_l1 * 3600;
06AF2:  MOVFF  373,A75
06AF6:  MOVFF  372,A74
06AFA:  MOVFF  371,A73
06AFE:  MOVFF  370,A72
06B02:  MOVLB  A
06B04:  CLRF   x79
06B06:  CLRF   x78
06B08:  MOVLW  0E
06B0A:  MOVWF  x77
06B0C:  MOVLW  10
06B0E:  MOVWF  x76
06B10:  MOVLB  0
06B12:  RCALL  67FC
06B14:  MOVFF  03,373
06B18:  MOVFF  02,372
06B1C:  MOVFF  01,371
06B20:  MOVFF  00,370
.................... 	aux_l2 = aux_l2 * 60;
06B24:  MOVFF  377,A75
06B28:  MOVFF  376,A74
06B2C:  MOVFF  375,A73
06B30:  MOVFF  374,A72
06B34:  MOVLB  A
06B36:  CLRF   x79
06B38:  CLRF   x78
06B3A:  CLRF   x77
06B3C:  MOVLW  3C
06B3E:  MOVWF  x76
06B40:  MOVLB  0
06B42:  RCALL  67FC
06B44:  MOVFF  03,377
06B48:  MOVFF  02,376
06B4C:  MOVFF  01,375
06B50:  MOVFF  00,374
.................... 	tempo_ponta = aux_l1 + aux_l2;
06B54:  MOVLB  3
06B56:  MOVF   x74,W
06B58:  ADDWF  x70,W
06B5A:  MOVLB  A
06B5C:  MOVWF  x4C
06B5E:  MOVLB  3
06B60:  MOVF   x75,W
06B62:  ADDWFC x71,W
06B64:  MOVLB  A
06B66:  MOVWF  x4D
06B68:  MOVLB  3
06B6A:  MOVF   x76,W
06B6C:  ADDWFC x72,W
06B6E:  MOVLB  A
06B70:  MOVWF  x4E
06B72:  MOVLB  3
06B74:  MOVF   x77,W
06B76:  ADDWFC x73,W
06B78:  MOVLB  A
06B7A:  MOVWF  x4F
.................... 
.................... 	aux_l1 = (int32)(hora_final_ponta);
06B7C:  MOVLB  3
06B7E:  CLRF   x73
06B80:  CLRF   x72
06B82:  CLRF   x71
06B84:  MOVFF  517,370
.................... 	aux_l2 = (int32)(minuto_final_ponta);
06B88:  CLRF   x77
06B8A:  CLRF   x76
06B8C:  CLRF   x75
06B8E:  MOVFF  518,374
.................... 	aux_l1 = aux_l1 * 3600;
06B92:  MOVFF  373,A75
06B96:  MOVFF  372,A74
06B9A:  MOVFF  371,A73
06B9E:  MOVFF  370,A72
06BA2:  MOVLB  A
06BA4:  CLRF   x79
06BA6:  CLRF   x78
06BA8:  MOVLW  0E
06BAA:  MOVWF  x77
06BAC:  MOVLW  10
06BAE:  MOVWF  x76
06BB0:  MOVLB  0
06BB2:  RCALL  67FC
06BB4:  MOVFF  03,373
06BB8:  MOVFF  02,372
06BBC:  MOVFF  01,371
06BC0:  MOVFF  00,370
.................... 	aux_l2 = aux_l2 * 60;
06BC4:  MOVFF  377,A75
06BC8:  MOVFF  376,A74
06BCC:  MOVFF  375,A73
06BD0:  MOVFF  374,A72
06BD4:  MOVLB  A
06BD6:  CLRF   x79
06BD8:  CLRF   x78
06BDA:  CLRF   x77
06BDC:  MOVLW  3C
06BDE:  MOVWF  x76
06BE0:  MOVLB  0
06BE2:  RCALL  67FC
06BE4:  MOVFF  03,377
06BE8:  MOVFF  02,376
06BEC:  MOVFF  01,375
06BF0:  MOVFF  00,374
.................... 	tempo_fora = aux_l1 + aux_l2;
06BF4:  MOVLB  3
06BF6:  MOVF   x74,W
06BF8:  ADDWF  x70,W
06BFA:  MOVLB  A
06BFC:  MOVWF  x50
06BFE:  MOVLB  3
06C00:  MOVF   x75,W
06C02:  ADDWFC x71,W
06C04:  MOVLB  A
06C06:  MOVWF  x51
06C08:  MOVLB  3
06C0A:  MOVF   x76,W
06C0C:  ADDWFC x72,W
06C0E:  MOVLB  A
06C10:  MOVWF  x52
06C12:  MOVLB  3
06C14:  MOVF   x77,W
06C16:  ADDWFC x73,W
06C18:  MOVLB  A
06C1A:  MOVWF  x53
.................... 			
.................... 	if (tempo_atual >= tempo_ponta){
06C1C:  MOVF   x4F,W
06C1E:  SUBWF  x57,W
06C20:  BNC   6C6C
06C22:  BNZ   6C3A
06C24:  MOVF   x4E,W
06C26:  SUBWF  x56,W
06C28:  BNC   6C6C
06C2A:  BNZ   6C3A
06C2C:  MOVF   x4D,W
06C2E:  SUBWF  x55,W
06C30:  BNC   6C6C
06C32:  BNZ   6C3A
06C34:  MOVF   x4C,W
06C36:  SUBWF  x54,W
06C38:  BNC   6C6C
.................... 		if (tempo_atual <= tempo_fora){
06C3A:  MOVF   x57,W
06C3C:  SUBWF  x53,W
06C3E:  BNC   6C62
06C40:  BNZ   6C58
06C42:  MOVF   x56,W
06C44:  SUBWF  x52,W
06C46:  BNC   6C62
06C48:  BNZ   6C58
06C4A:  MOVF   x55,W
06C4C:  SUBWF  x51,W
06C4E:  BNC   6C62
06C50:  BNZ   6C58
06C52:  MOVF   x54,W
06C54:  SUBWF  x50,W
06C56:  BNC   6C62
.................... 			periodo_fatura = PERIODO_PONTA;
06C58:  MOVLW  01
06C5A:  MOVLB  3
06C5C:  MOVWF  x5F
.................... 		}
06C5E:  BRA    6C68
06C60:  MOVLB  A
.................... 		else{
.................... 			periodo_fatura = PERIODO_FORA_PONTA;
06C62:  MOVLW  02
06C64:  MOVLB  3
06C66:  MOVWF  x5F
.................... 		}
.................... 	}
06C68:  BRA    6C72
06C6A:  MOVLB  A
.................... 	else{
.................... 		periodo_fatura = PERIODO_FORA_PONTA;
06C6C:  MOVLW  02
06C6E:  MOVLB  3
06C70:  MOVWF  x5F
.................... 	}
.................... 
.................... 	switch(periodo_fatura){
06C72:  MOVF   x5F,W
06C74:  XORLW  01
06C76:  MOVLB  0
06C78:  BZ    6C80
06C7A:  XORLW  03
06C7C:  BZ    6CBC
06C7E:  BRA    6CF8
.................... 		case PERIODO_PONTA:{
.................... 			dem_contratada = dem_cont_ponta[mes - 1];
06C80:  MOVLW  01
06C82:  MOVLB  3
06C84:  SUBWF  xC0,W
06C86:  MOVWF  00
06C88:  BCF    FD8.0
06C8A:  RLCF   00,F
06C8C:  MOVF   00,W
06C8E:  CLRF   03
06C90:  ADDLW  DB
06C92:  MOVWF  FE9
06C94:  MOVLW  04
06C96:  ADDWFC 03,W
06C98:  MOVWF  FEA
06C9A:  MOVFF  FEC,27B
06C9E:  MOVF   FED,F
06CA0:  MOVFF  FEF,27A
.................... 			if (periodo_fatura_old != periodo_fatura){
06CA4:  MOVF   x5F,W
06CA6:  MOVLB  A
06CA8:  SUBWF  x4B,W
06CAA:  BZ    6CB8
.................... 				grava_ocorrencias(reg_trocou_periodo_fatura_periodo_ponta);
06CAC:  MOVLW  3A
06CAE:  MOVWF  x58
06CB0:  MOVLB  0
06CB2:  CALL   5828
06CB6:  MOVLB  A
.................... 			}
.................... 			break;
06CB8:  BRA    6D1E
06CBA:  MOVLB  0
.................... 		} 
.................... 		case PERIODO_FORA_PONTA:{
.................... 			dem_contratada = dem_cont_fora_ponta[mes - 1];
06CBC:  MOVLW  01
06CBE:  MOVLB  3
06CC0:  SUBWF  xC0,W
06CC2:  MOVWF  00
06CC4:  BCF    FD8.0
06CC6:  RLCF   00,F
06CC8:  MOVF   00,W
06CCA:  CLRF   03
06CCC:  ADDLW  F5
06CCE:  MOVWF  FE9
06CD0:  MOVLW  04
06CD2:  ADDWFC 03,W
06CD4:  MOVWF  FEA
06CD6:  MOVFF  FEC,27B
06CDA:  MOVF   FED,F
06CDC:  MOVFF  FEF,27A
.................... 			if (periodo_fatura_old != periodo_fatura){
06CE0:  MOVF   x5F,W
06CE2:  MOVLB  A
06CE4:  SUBWF  x4B,W
06CE6:  BZ    6CF4
.................... 				grava_ocorrencias(reg_trocou_periodo_fatura_periodo_fora_ponta);
06CE8:  MOVLW  3C
06CEA:  MOVWF  x58
06CEC:  MOVLB  0
06CEE:  CALL   5828
06CF2:  MOVLB  A
.................... 			}
.................... 			break;
06CF4:  BRA    6D1E
06CF6:  MOVLB  0
.................... 		} 
.................... 		default:{
.................... 			dem_contratada = dem_cont_ponta[mes - 1];
06CF8:  MOVLW  01
06CFA:  MOVLB  3
06CFC:  SUBWF  xC0,W
06CFE:  MOVWF  00
06D00:  BCF    FD8.0
06D02:  RLCF   00,F
06D04:  MOVF   00,W
06D06:  CLRF   03
06D08:  ADDLW  DB
06D0A:  MOVWF  FE9
06D0C:  MOVLW  04
06D0E:  ADDWFC 03,W
06D10:  MOVWF  FEA
06D12:  MOVFF  FEC,27B
06D16:  MOVF   FED,F
06D18:  MOVFF  FEF,27A
06D1C:  MOVLB  A
.................... 		}
.................... 	}
06D1E:  MOVLB  0
06D20:  RETURN 0
.................... }
.................... 
.................... 
.................... void ve_carga_acionada(void){
.................... 	dem_acionada = 0;
*
1AFDA:  MOVLB  2
1AFDC:  CLRF   x7D
1AFDE:  CLRF   x7C
.................... 	for (aux_b1=0; aux_b1 < nro_cargas; aux_b1++){
1AFE0:  MOVLB  3
1AFE2:  CLRF   xB1
1AFE4:  MOVLB  0
1AFE6:  MOVF   x6D,W
1AFE8:  MOVLB  3
1AFEA:  SUBWF  xB1,W
1AFEC:  BC    1B052
.................... 		if (carga_acionada[aux_b1] == true){
1AFEE:  CLRF   03
1AFF0:  MOVF   xB1,W
1AFF2:  ADDLW  17
1AFF4:  MOVWF  FE9
1AFF6:  MOVLW  01
1AFF8:  ADDWFC 03,W
1AFFA:  MOVWF  FEA
1AFFC:  DECFSZ FEF,W
1AFFE:  BRA    1B01C
.................... 			dem_acionada += carga[aux_b1];
1B000:  CLRF   03
1B002:  MOVF   xB1,W
1B004:  ADDLW  07
1B006:  MOVWF  FE9
1B008:  MOVLW  01
1B00A:  ADDWFC 03,W
1B00C:  MOVWF  FEA
1B00E:  MOVF   FEF,W
1B010:  MOVLB  2
1B012:  ADDWF  x7C,F
1B014:  MOVLW  00
1B016:  ADDWFC x7D,F
.................... 		}
1B018:  BRA    1B04C
1B01A:  MOVLB  3
.................... 		else if (carga_acionada[aux_b1] == false){
1B01C:  CLRF   03
1B01E:  MOVF   xB1,W
1B020:  ADDLW  17
1B022:  MOVWF  FE9
1B024:  MOVLW  01
1B026:  ADDWFC 03,W
1B028:  MOVWF  FEA
1B02A:  MOVF   FEF,F
1B02C:  BNZ   1B030
.................... 		}	
1B02E:  BRA    1B04A
.................... 		else{
.................... 			carga_acionada[aux_b1] = false;
1B030:  CLRF   03
1B032:  MOVF   xB1,W
1B034:  ADDLW  17
1B036:  MOVWF  FE9
1B038:  MOVLW  01
1B03A:  ADDWFC 03,W
1B03C:  MOVWF  FEA
1B03E:  CLRF   FEF
.................... 			desligar_carga(aux_b1);
1B040:  MOVFF  3B1,A65
1B044:  MOVLB  0
1B046:  CALL   1CB6
1B04A:  MOVLB  2
.................... 		}
1B04C:  MOVLB  3
1B04E:  INCF   xB1,F
1B050:  BRA    1AFE4
.................... 	}
1B052:  MOVLB  0
1B054:  RETURN 0
.................... }
.................... 
.................... void st8500_decisao(void){
.................... 	char qcarga;
.................... 	char ligar, desligar;
.................... 	word acionamento_tmp;
.................... 	word carga_necessaria;
.................... 	word dem_contratada_plus;
.................... 	word dem_contratada_liga;
.................... 	word dem_ativa_decide;
.................... 	word dem_ativa_proj_decide;
.................... 	int32 tempo_liga, tempo_desliga, tempo_atual;
.................... 	
.................... 	ligar = false;
1B056:  MOVLB  A
1B058:  CLRF   x4B
.................... 	desligar = false;
1B05A:  CLRF   x4C
.................... 	
.................... 	acionamento_tmp = 0;
1B05C:  CLRF   x4E
1B05E:  CLRF   x4D
.................... 	if (aux_tempo_aciona == 0){
1B060:  MOVLB  0
1B062:  MOVF   x68,F
1B064:  BTFSS  FD8.2
1B066:  GOTO   1BC5C
.................... 		aux_tempo_aciona = ultimo_tempo_aciona;
1B06A:  MOVFF  69,68
.................... 		for (qcarga = 0; qcarga < nro_cargas; qcarga++){
1B06E:  MOVLB  A
1B070:  CLRF   x4A
1B072:  MOVLB  0
1B074:  MOVF   x6D,W
1B076:  MOVLB  A
1B078:  SUBWF  x4A,W
1B07A:  BC    1B09E
.................... 			if (carga[qcarga] == 0){
1B07C:  CLRF   03
1B07E:  MOVF   x4A,W
1B080:  ADDLW  07
1B082:  MOVWF  FE9
1B084:  MOVLW  01
1B086:  ADDWFC 03,W
1B088:  MOVWF  FEA
1B08A:  MOVF   FEF,F
1B08C:  BNZ   1B09A
.................... 				desligar_carga(qcarga);
1B08E:  MOVFF  A4A,A65
1B092:  MOVLB  0
1B094:  CALL   1CB6
1B098:  MOVLB  A
.................... 			}
1B09A:  INCF   x4A,F
1B09C:  BRA    1B072
.................... 		}
.................... 			
.................... 		ve_carga_acionada();
1B09E:  MOVLB  0
1B0A0:  RCALL  1AFDA
.................... 		#if (com_tc == true)
.................... 			time_out_modo_rep = 5;
1B0A2:  MOVLW  05
1B0A4:  MOVLB  5
1B0A6:  MOVWF  x2B
.................... 		#endif
.................... 		if (time_out_modo_rep == 0){
1B0A8:  MOVF   x2B,F
1B0AA:  BTFSS  FD8.2
1B0AC:  BRA    1B170
.................... 			if (dem_acionada < dem_contratada){
1B0AE:  MOVLB  2
1B0B0:  MOVF   x7D,W
1B0B2:  SUBWF  x7B,W
1B0B4:  BNC   1B16A
1B0B6:  BNZ   1B0BE
1B0B8:  MOVF   x7A,W
1B0BA:  SUBWF  x7C,W
1B0BC:  BC    1B16A
.................... 				for (qcarga = 0; qcarga < nro_cargas; qcarga++){
1B0BE:  MOVLB  A
1B0C0:  CLRF   x4A
1B0C2:  MOVLB  0
1B0C4:  MOVF   x6D,W
1B0C6:  MOVLB  A
1B0C8:  SUBWF  x4A,W
1B0CA:  BC    1B168
.................... 					if (carga[qcarga] > 0){
1B0CC:  CLRF   03
1B0CE:  MOVF   x4A,W
1B0D0:  ADDLW  07
1B0D2:  MOVWF  FE9
1B0D4:  MOVLW  01
1B0D6:  ADDWFC 03,W
1B0D8:  MOVWF  FEA
1B0DA:  MOVF   FEF,F
1B0DC:  BZ    1B164
.................... 						if (forma_controle[qcarga] == 'D'){
1B0DE:  CLRF   03
1B0E0:  MOVF   x4A,W
1B0E2:  ADDLW  59
1B0E4:  MOVWF  FE9
1B0E6:  MOVLW  01
1B0E8:  ADDWFC 03,W
1B0EA:  MOVWF  FEA
1B0EC:  MOVF   FEF,W
1B0EE:  SUBLW  44
1B0F0:  BNZ   1B164
.................... 							if (carga_acionada[qcarga] != true){
1B0F2:  CLRF   03
1B0F4:  MOVF   x4A,W
1B0F6:  ADDLW  17
1B0F8:  MOVWF  FE9
1B0FA:  MOVLW  01
1B0FC:  ADDWFC 03,W
1B0FE:  MOVWF  FEA
1B100:  DECFSZ FEF,W
1B102:  BRA    1B106
1B104:  BRA    1B164
.................... 								if (aux_tempo_repouso[qcarga] == 0){
1B106:  CLRF   03
1B108:  MOVF   x4A,W
1B10A:  ADDLW  F7
1B10C:  MOVWF  FE9
1B10E:  MOVLW  00
1B110:  ADDWFC 03,W
1B112:  MOVWF  FEA
1B114:  MOVF   FEF,F
1B116:  BNZ   1B162
.................... 									ligar_carga(qcarga);
1B118:  MOVFF  A4A,A65
1B11C:  MOVLB  0
1B11E:  CALL   A884
.................... 									acionamento_tmp += carga[qcarga];
1B122:  CLRF   03
1B124:  MOVLB  A
1B126:  MOVF   x4A,W
1B128:  ADDLW  07
1B12A:  MOVWF  FE9
1B12C:  MOVLW  01
1B12E:  ADDWFC 03,W
1B130:  MOVWF  FEA
1B132:  MOVF   FEF,W
1B134:  ADDWF  x4D,F
1B136:  MOVLW  00
1B138:  ADDWFC x4E,F
.................... 									if ((acionamento_tmp >= max_kw) || (acionamento_tmp > carga_necessaria)){
1B13A:  MOVLB  0
1B13C:  MOVF   x66,W
1B13E:  MOVLB  A
1B140:  SUBWF  x4E,W
1B142:  BNC   1B150
1B144:  BNZ   1B15E
1B146:  MOVLB  0
1B148:  MOVF   x65,W
1B14A:  MOVLB  A
1B14C:  SUBWF  x4D,W
1B14E:  BC    1B15E
1B150:  MOVF   x50,W
1B152:  SUBWF  x4E,W
1B154:  BNC   1B160
1B156:  BNZ   1B15E
1B158:  MOVF   x4D,W
1B15A:  SUBWF  x4F,W
1B15C:  BC    1B160
.................... 										break;
1B15E:  BRA    1B168
.................... 									}
.................... 								}
1B160:  BRA    1B164
.................... 								else{
.................... 									break;
1B162:  BRA    1B168
.................... 								}
.................... 							}
.................... 						}
.................... 					}
1B164:  INCF   x4A,F
1B166:  BRA    1B0C2
1B168:  MOVLB  2
.................... 				}
.................... 			}
.................... 		}
1B16A:  GOTO   1BC56
1B16E:  MOVLB  5
.................... 		else{
.................... 			#if (instantaneo==false)
.................... 				if (timer_integra < 10){
1B170:  MOVF   x2C,W
1B172:  SUBLW  09
1B174:  BTFSS  FD8.0
1B176:  BRA    1B274
.................... 					aux_l1 = (int32)(dem_contratada);
1B178:  MOVLB  3
1B17A:  CLRF   x73
1B17C:  CLRF   x72
1B17E:  MOVFF  27B,371
1B182:  MOVFF  27A,370
.................... 					aux_l1 = (int32)((aux_l1 * 110) / 100);		// Edison 22/12/09
1B186:  MOVFF  373,A75
1B18A:  MOVFF  372,A74
1B18E:  MOVFF  371,A73
1B192:  MOVFF  370,A72
1B196:  MOVLB  A
1B198:  CLRF   x79
1B19A:  CLRF   x78
1B19C:  CLRF   x77
1B19E:  MOVLW  6E
1B1A0:  MOVWF  x76
1B1A2:  MOVLB  0
1B1A4:  CALL   67FC
1B1A8:  MOVFF  03,A68
1B1AC:  MOVFF  02,A67
1B1B0:  MOVFF  01,A66
1B1B4:  MOVFF  00,A65
1B1B8:  BCF    FD8.1
1B1BA:  MOVFF  03,A73
1B1BE:  MOVFF  02,A72
1B1C2:  MOVFF  01,A71
1B1C6:  MOVFF  00,A70
1B1CA:  MOVLB  A
1B1CC:  CLRF   x77
1B1CE:  CLRF   x76
1B1D0:  CLRF   x75
1B1D2:  MOVLW  64
1B1D4:  MOVWF  x74
1B1D6:  MOVLB  0
1B1D8:  CALL   6858
1B1DC:  MOVFF  03,373
1B1E0:  MOVFF  02,372
1B1E4:  MOVFF  01,371
1B1E8:  MOVFF  00,370
.................... 					dem_contratada_plus = (word)(aux_l1);
1B1EC:  MOVFF  371,A52
1B1F0:  MOVFF  370,A51
.................... 					aux_l1 = (int32)(dem_contratada);
1B1F4:  MOVLB  3
1B1F6:  CLRF   x73
1B1F8:  CLRF   x72
1B1FA:  MOVFF  27B,371
1B1FE:  MOVFF  27A,370
.................... 					aux_l1 = (int32)((aux_l1 * 100) / 100);
1B202:  MOVFF  373,A75
1B206:  MOVFF  372,A74
1B20A:  MOVFF  371,A73
1B20E:  MOVFF  370,A72
1B212:  MOVLB  A
1B214:  CLRF   x79
1B216:  CLRF   x78
1B218:  CLRF   x77
1B21A:  MOVLW  64
1B21C:  MOVWF  x76
1B21E:  MOVLB  0
1B220:  CALL   67FC
1B224:  MOVFF  03,A68
1B228:  MOVFF  02,A67
1B22C:  MOVFF  01,A66
1B230:  MOVFF  00,A65
1B234:  BCF    FD8.1
1B236:  MOVFF  03,A73
1B23A:  MOVFF  02,A72
1B23E:  MOVFF  01,A71
1B242:  MOVFF  00,A70
1B246:  MOVLB  A
1B248:  CLRF   x77
1B24A:  CLRF   x76
1B24C:  CLRF   x75
1B24E:  MOVLW  64
1B250:  MOVWF  x74
1B252:  MOVLB  0
1B254:  CALL   6858
1B258:  MOVFF  03,373
1B25C:  MOVFF  02,372
1B260:  MOVFF  01,371
1B264:  MOVFF  00,370
.................... 					dem_contratada_liga = (word)(aux_l1);
1B268:  MOVFF  371,A54
1B26C:  MOVFF  370,A53
.................... 				}
1B270:  BRA    1B470
1B272:  MOVLB  5
.................... 				else if (timer_integra < 20){
1B274:  MOVF   x2C,W
1B276:  SUBLW  13
1B278:  BTFSS  FD8.0
1B27A:  BRA    1B378
.................... 					aux_l1 = (int32)(dem_contratada);
1B27C:  MOVLB  3
1B27E:  CLRF   x73
1B280:  CLRF   x72
1B282:  MOVFF  27B,371
1B286:  MOVFF  27A,370
.................... 					aux_l1 = (int32)((aux_l1 * 105) / 100);		// Edison 22/12/09
1B28A:  MOVFF  373,A75
1B28E:  MOVFF  372,A74
1B292:  MOVFF  371,A73
1B296:  MOVFF  370,A72
1B29A:  MOVLB  A
1B29C:  CLRF   x79
1B29E:  CLRF   x78
1B2A0:  CLRF   x77
1B2A2:  MOVLW  69
1B2A4:  MOVWF  x76
1B2A6:  MOVLB  0
1B2A8:  CALL   67FC
1B2AC:  MOVFF  03,A68
1B2B0:  MOVFF  02,A67
1B2B4:  MOVFF  01,A66
1B2B8:  MOVFF  00,A65
1B2BC:  BCF    FD8.1
1B2BE:  MOVFF  03,A73
1B2C2:  MOVFF  02,A72
1B2C6:  MOVFF  01,A71
1B2CA:  MOVFF  00,A70
1B2CE:  MOVLB  A
1B2D0:  CLRF   x77
1B2D2:  CLRF   x76
1B2D4:  CLRF   x75
1B2D6:  MOVLW  64
1B2D8:  MOVWF  x74
1B2DA:  MOVLB  0
1B2DC:  CALL   6858
1B2E0:  MOVFF  03,373
1B2E4:  MOVFF  02,372
1B2E8:  MOVFF  01,371
1B2EC:  MOVFF  00,370
.................... 					dem_contratada_plus = (word)(aux_l1);
1B2F0:  MOVFF  371,A52
1B2F4:  MOVFF  370,A51
.................... 					aux_l1 = (int32)(dem_contratada);
1B2F8:  MOVLB  3
1B2FA:  CLRF   x73
1B2FC:  CLRF   x72
1B2FE:  MOVFF  27B,371
1B302:  MOVFF  27A,370
.................... 					aux_l1 = (int32)((aux_l1 * 100) / 100);
1B306:  MOVFF  373,A75
1B30A:  MOVFF  372,A74
1B30E:  MOVFF  371,A73
1B312:  MOVFF  370,A72
1B316:  MOVLB  A
1B318:  CLRF   x79
1B31A:  CLRF   x78
1B31C:  CLRF   x77
1B31E:  MOVLW  64
1B320:  MOVWF  x76
1B322:  MOVLB  0
1B324:  CALL   67FC
1B328:  MOVFF  03,A68
1B32C:  MOVFF  02,A67
1B330:  MOVFF  01,A66
1B334:  MOVFF  00,A65
1B338:  BCF    FD8.1
1B33A:  MOVFF  03,A73
1B33E:  MOVFF  02,A72
1B342:  MOVFF  01,A71
1B346:  MOVFF  00,A70
1B34A:  MOVLB  A
1B34C:  CLRF   x77
1B34E:  CLRF   x76
1B350:  CLRF   x75
1B352:  MOVLW  64
1B354:  MOVWF  x74
1B356:  MOVLB  0
1B358:  CALL   6858
1B35C:  MOVFF  03,373
1B360:  MOVFF  02,372
1B364:  MOVFF  01,371
1B368:  MOVFF  00,370
.................... 					dem_contratada_liga = (word)(aux_l1);
1B36C:  MOVFF  371,A54
1B370:  MOVFF  370,A53
.................... 				}
1B374:  BRA    1B470
1B376:  MOVLB  5
.................... 				else{
.................... 					aux_l1 = (int32)(dem_contratada);
1B378:  MOVLB  3
1B37A:  CLRF   x73
1B37C:  CLRF   x72
1B37E:  MOVFF  27B,371
1B382:  MOVFF  27A,370
.................... 					aux_l1 = (int32)((aux_l1 * 100) / 100);		// Edison 22/12/09
1B386:  MOVFF  373,A75
1B38A:  MOVFF  372,A74
1B38E:  MOVFF  371,A73
1B392:  MOVFF  370,A72
1B396:  MOVLB  A
1B398:  CLRF   x79
1B39A:  CLRF   x78
1B39C:  CLRF   x77
1B39E:  MOVLW  64
1B3A0:  MOVWF  x76
1B3A2:  MOVLB  0
1B3A4:  CALL   67FC
1B3A8:  MOVFF  03,A68
1B3AC:  MOVFF  02,A67
1B3B0:  MOVFF  01,A66
1B3B4:  MOVFF  00,A65
1B3B8:  BCF    FD8.1
1B3BA:  MOVFF  03,A73
1B3BE:  MOVFF  02,A72
1B3C2:  MOVFF  01,A71
1B3C6:  MOVFF  00,A70
1B3CA:  MOVLB  A
1B3CC:  CLRF   x77
1B3CE:  CLRF   x76
1B3D0:  CLRF   x75
1B3D2:  MOVLW  64
1B3D4:  MOVWF  x74
1B3D6:  MOVLB  0
1B3D8:  CALL   6858
1B3DC:  MOVFF  03,373
1B3E0:  MOVFF  02,372
1B3E4:  MOVFF  01,371
1B3E8:  MOVFF  00,370
.................... 					dem_contratada_plus = (word)(aux_l1);
1B3EC:  MOVFF  371,A52
1B3F0:  MOVFF  370,A51
.................... 					aux_l1 = (int32)(dem_contratada);
1B3F4:  MOVLB  3
1B3F6:  CLRF   x73
1B3F8:  CLRF   x72
1B3FA:  MOVFF  27B,371
1B3FE:  MOVFF  27A,370
.................... 					aux_l1 = (int32)((aux_l1 * 100) / 100);
1B402:  MOVFF  373,A75
1B406:  MOVFF  372,A74
1B40A:  MOVFF  371,A73
1B40E:  MOVFF  370,A72
1B412:  MOVLB  A
1B414:  CLRF   x79
1B416:  CLRF   x78
1B418:  CLRF   x77
1B41A:  MOVLW  64
1B41C:  MOVWF  x76
1B41E:  MOVLB  0
1B420:  CALL   67FC
1B424:  MOVFF  03,A68
1B428:  MOVFF  02,A67
1B42C:  MOVFF  01,A66
1B430:  MOVFF  00,A65
1B434:  BCF    FD8.1
1B436:  MOVFF  03,A73
1B43A:  MOVFF  02,A72
1B43E:  MOVFF  01,A71
1B442:  MOVFF  00,A70
1B446:  MOVLB  A
1B448:  CLRF   x77
1B44A:  CLRF   x76
1B44C:  CLRF   x75
1B44E:  MOVLW  64
1B450:  MOVWF  x74
1B452:  MOVLB  0
1B454:  CALL   6858
1B458:  MOVFF  03,373
1B45C:  MOVFF  02,372
1B460:  MOVFF  01,371
1B464:  MOVFF  00,370
.................... 					dem_contratada_liga = (word)(aux_l1);
1B468:  MOVFF  371,A54
1B46C:  MOVFF  370,A53
.................... 				}
.................... 			#else												// para controle de carga sem intervalo de integração.
.................... 					aux_l1 = (int32)(dem_contratada);
.................... 					aux_l1 = (int32)((aux_l1 * 100) / 100);		// Edison 22/12/09
.................... 					dem_contratada_plus = (word)(aux_l1);
.................... 					aux_l1 = (int32)(dem_contratada);
.................... 					aux_l1 = (int32)((aux_l1 * 100) / 100);
.................... 					dem_contratada_liga = (word)(aux_l1);
.................... 			#endif
.................... 	
.................... 	//		if ((dem_acionada < dem_contratada) && (dem_ativa_proj < dem_contratada))
.................... 			#if (com_tc  == true)
.................... 				aux_f1 = dem_ativa;
1B470:  MOVFF  277,A7E
1B474:  MOVFF  276,A7D
1B478:  CALL   2924
1B47C:  MOVFF  03,397
1B480:  MOVFF  02,396
1B484:  MOVFF  01,395
1B488:  MOVFF  00,394
.................... 				dem_ativa_decide = (word)(aux_f1 * mul_tc);
1B48C:  MOVFF  397,A80
1B490:  MOVFF  396,A7F
1B494:  MOVFF  395,A7E
1B498:  MOVFF  394,A7D
1B49C:  MOVFF  351,A84
1B4A0:  MOVFF  350,A83
1B4A4:  MOVFF  34F,A82
1B4A8:  MOVFF  34E,A81
1B4AC:  CALL   5306
1B4B0:  MOVFF  03,A7C
1B4B4:  MOVFF  02,A7B
1B4B8:  MOVFF  01,A7A
1B4BC:  MOVFF  00,A79
1B4C0:  CALL   53FC
1B4C4:  MOVFF  02,A56
1B4C8:  MOVFF  01,A55
.................... 				aux_f1 = dem_ativa_proj;
1B4CC:  MOVFF  27F,A7E
1B4D0:  MOVFF  27E,A7D
1B4D4:  CALL   2924
1B4D8:  MOVFF  03,397
1B4DC:  MOVFF  02,396
1B4E0:  MOVFF  01,395
1B4E4:  MOVFF  00,394
.................... 				dem_ativa_proj_decide = (word)(aux_f1 * mul_tc);
1B4E8:  MOVFF  397,A80
1B4EC:  MOVFF  396,A7F
1B4F0:  MOVFF  395,A7E
1B4F4:  MOVFF  394,A7D
1B4F8:  MOVFF  351,A84
1B4FC:  MOVFF  350,A83
1B500:  MOVFF  34F,A82
1B504:  MOVFF  34E,A81
1B508:  CALL   5306
1B50C:  MOVFF  03,A7C
1B510:  MOVFF  02,A7B
1B514:  MOVFF  01,A7A
1B518:  MOVFF  00,A79
1B51C:  CALL   53FC
1B520:  MOVFF  02,A58
1B524:  MOVFF  01,A57
.................... 			#endif
.................... 			#if (com_rep == true)
.................... 				dem_ativa_decide = dem_ativa;
.................... 				dem_ativa_proj_decide = dem_ativa_proj;
.................... 			#endif
.................... 
.................... //			fprintf(modbus,"DA:%lu ; DP:%lu ; DM%lu ;", dem_ativa, dem_ativa_proj, dem_media_ativa);
.................... //			fprintf(modbus,"DAQ:%lu ; DPQ:%lu ;", dem_ativa_decide, dem_ativa_proj_decide);
.................... 
.................... //			fprintf(modbus,"\r\n");
.................... 			
.................... 			if (dem_ativa_decide != dem_contratada){
1B528:  MOVLB  2
1B52A:  MOVF   x7A,W
1B52C:  MOVLB  A
1B52E:  SUBWF  x55,W
1B530:  BNZ   1B53E
1B532:  MOVLB  2
1B534:  MOVF   x7B,W
1B536:  MOVLB  A
1B538:  SUBWF  x56,W
1B53A:  BTFSC  FD8.2
1B53C:  BRA    1B864
.................... 				if ((dem_ativa_proj_decide < dem_contratada_liga)){
1B53E:  MOVF   x58,W
1B540:  SUBWF  x54,W
1B542:  BNC   1B560
1B544:  BNZ   1B54C
1B546:  MOVF   x53,W
1B548:  SUBWF  x57,W
1B54A:  BC    1B560
.................... 					carga_necessaria = dem_contratada_liga - dem_ativa_proj_decide;
1B54C:  MOVF   x57,W
1B54E:  SUBWF  x53,W
1B550:  MOVWF  x4F
1B552:  MOVF   x58,W
1B554:  SUBWFB x54,W
1B556:  MOVWF  x50
.................... 					ligar = true;
1B558:  MOVLW  01
1B55A:  MOVWF  x4B
.................... 					desligar = false;
1B55C:  CLRF   x4C
.................... 				}
1B55E:  BRA    1B586
.................... 				else{
.................... 					if (dem_ativa_proj_decide > dem_contratada_plus){
1B560:  MOVF   x52,W
1B562:  SUBWF  x58,W
1B564:  BNC   1B582
1B566:  BNZ   1B56E
1B568:  MOVF   x57,W
1B56A:  SUBWF  x51,W
1B56C:  BC    1B582
.................... 						carga_necessaria = dem_ativa_proj_decide - dem_contratada_plus;
1B56E:  MOVF   x51,W
1B570:  SUBWF  x57,W
1B572:  MOVWF  x4F
1B574:  MOVF   x52,W
1B576:  SUBWFB x58,W
1B578:  MOVWF  x50
.................... 						ligar = false;
1B57A:  CLRF   x4B
.................... 						desligar = true;
1B57C:  MOVLW  01
1B57E:  MOVWF  x4C
.................... 					}
1B580:  BRA    1B586
.................... 					else{
.................... 						desligar = false;
1B582:  CLRF   x4C
.................... 						ligar = false;
1B584:  CLRF   x4B
.................... 					}
.................... 				}
.................... 		
.................... 				if (ligar == true){
1B586:  DECFSZ x4B,W
1B588:  BRA    1B710
.................... 					if (tipo_controle_demanda == CONTROLE_FILO){
1B58A:  MOVLB  0
1B58C:  MOVF   x84,F
1B58E:  BNZ   1B63E
.................... 						for (qcarga = 0; qcarga < nro_cargas; qcarga++){
1B590:  MOVLB  A
1B592:  CLRF   x4A
1B594:  MOVLB  0
1B596:  MOVF   x6D,W
1B598:  MOVLB  A
1B59A:  SUBWF  x4A,W
1B59C:  BC    1B63A
.................... 							if (carga[qcarga] > 0){
1B59E:  CLRF   03
1B5A0:  MOVF   x4A,W
1B5A2:  ADDLW  07
1B5A4:  MOVWF  FE9
1B5A6:  MOVLW  01
1B5A8:  ADDWFC 03,W
1B5AA:  MOVWF  FEA
1B5AC:  MOVF   FEF,F
1B5AE:  BZ    1B636
.................... 								if (forma_controle[qcarga] == 'D'){
1B5B0:  CLRF   03
1B5B2:  MOVF   x4A,W
1B5B4:  ADDLW  59
1B5B6:  MOVWF  FE9
1B5B8:  MOVLW  01
1B5BA:  ADDWFC 03,W
1B5BC:  MOVWF  FEA
1B5BE:  MOVF   FEF,W
1B5C0:  SUBLW  44
1B5C2:  BNZ   1B636
.................... 									if (carga_acionada[qcarga] != true){
1B5C4:  CLRF   03
1B5C6:  MOVF   x4A,W
1B5C8:  ADDLW  17
1B5CA:  MOVWF  FE9
1B5CC:  MOVLW  01
1B5CE:  ADDWFC 03,W
1B5D0:  MOVWF  FEA
1B5D2:  DECFSZ FEF,W
1B5D4:  BRA    1B5D8
1B5D6:  BRA    1B636
.................... 										if (aux_tempo_repouso[qcarga] == 0){
1B5D8:  CLRF   03
1B5DA:  MOVF   x4A,W
1B5DC:  ADDLW  F7
1B5DE:  MOVWF  FE9
1B5E0:  MOVLW  00
1B5E2:  ADDWFC 03,W
1B5E4:  MOVWF  FEA
1B5E6:  MOVF   FEF,F
1B5E8:  BNZ   1B634
.................... 											ligar_carga(qcarga);
1B5EA:  MOVFF  A4A,A65
1B5EE:  MOVLB  0
1B5F0:  CALL   A884
.................... 											acionamento_tmp += carga[qcarga];
1B5F4:  CLRF   03
1B5F6:  MOVLB  A
1B5F8:  MOVF   x4A,W
1B5FA:  ADDLW  07
1B5FC:  MOVWF  FE9
1B5FE:  MOVLW  01
1B600:  ADDWFC 03,W
1B602:  MOVWF  FEA
1B604:  MOVF   FEF,W
1B606:  ADDWF  x4D,F
1B608:  MOVLW  00
1B60A:  ADDWFC x4E,F
.................... 											if ((acionamento_tmp >= max_kw) || (acionamento_tmp > carga_necessaria)){
1B60C:  MOVLB  0
1B60E:  MOVF   x66,W
1B610:  MOVLB  A
1B612:  SUBWF  x4E,W
1B614:  BNC   1B622
1B616:  BNZ   1B630
1B618:  MOVLB  0
1B61A:  MOVF   x65,W
1B61C:  MOVLB  A
1B61E:  SUBWF  x4D,W
1B620:  BC    1B630
1B622:  MOVF   x50,W
1B624:  SUBWF  x4E,W
1B626:  BNC   1B632
1B628:  BNZ   1B630
1B62A:  MOVF   x4D,W
1B62C:  SUBWF  x4F,W
1B62E:  BC    1B632
.................... 												break;
1B630:  BRA    1B63A
.................... 											}
.................... 										}
1B632:  BRA    1B636
.................... 										else{
.................... 											break;
1B634:  BRA    1B63A
.................... 										}
.................... 									}
.................... 								}
.................... 							}
1B636:  INCF   x4A,F
1B638:  BRA    1B594
.................... 						}
.................... 					}
1B63A:  BRA    1B710
1B63C:  MOVLB  0
.................... 					else if (tipo_controle_demanda == CONTROLE_FILA_CIRCULAR){
1B63E:  DECFSZ x84,W
1B640:  BRA    1B6FC
.................... 						if (ptr_aciona >= (nro_cargas-1)){
1B642:  MOVLW  01
1B644:  SUBWF  x6D,W
1B646:  SUBWF  x85,W
1B648:  BNC   1B64C
.................... 							ptr_aciona = 0;
1B64A:  CLRF   x85
.................... 						}
.................... 						for (qcarga = ptr_aciona; qcarga < nro_cargas; qcarga++){
1B64C:  MOVFF  85,A4A
1B650:  MOVF   x6D,W
1B652:  MOVLB  A
1B654:  SUBWF  x4A,W
1B656:  BC    1B6F8
.................... 							if (carga[qcarga] > 0){
1B658:  CLRF   03
1B65A:  MOVF   x4A,W
1B65C:  ADDLW  07
1B65E:  MOVWF  FE9
1B660:  MOVLW  01
1B662:  ADDWFC 03,W
1B664:  MOVWF  FEA
1B666:  MOVF   FEF,F
1B668:  BZ    1B6F0
.................... 								if (forma_controle[qcarga] == 'D'){
1B66A:  CLRF   03
1B66C:  MOVF   x4A,W
1B66E:  ADDLW  59
1B670:  MOVWF  FE9
1B672:  MOVLW  01
1B674:  ADDWFC 03,W
1B676:  MOVWF  FEA
1B678:  MOVF   FEF,W
1B67A:  SUBLW  44
1B67C:  BNZ   1B6F0
.................... 									if (carga_acionada[qcarga] != true){
1B67E:  CLRF   03
1B680:  MOVF   x4A,W
1B682:  ADDLW  17
1B684:  MOVWF  FE9
1B686:  MOVLW  01
1B688:  ADDWFC 03,W
1B68A:  MOVWF  FEA
1B68C:  DECFSZ FEF,W
1B68E:  BRA    1B692
1B690:  BRA    1B6F0
.................... 										if (aux_tempo_repouso[qcarga] == 0){
1B692:  CLRF   03
1B694:  MOVF   x4A,W
1B696:  ADDLW  F7
1B698:  MOVWF  FE9
1B69A:  MOVLW  00
1B69C:  ADDWFC 03,W
1B69E:  MOVWF  FEA
1B6A0:  MOVF   FEF,F
1B6A2:  BNZ   1B6EE
.................... 											ligar_carga(qcarga);
1B6A4:  MOVFF  A4A,A65
1B6A8:  MOVLB  0
1B6AA:  CALL   A884
.................... 											acionamento_tmp += carga[qcarga];
1B6AE:  CLRF   03
1B6B0:  MOVLB  A
1B6B2:  MOVF   x4A,W
1B6B4:  ADDLW  07
1B6B6:  MOVWF  FE9
1B6B8:  MOVLW  01
1B6BA:  ADDWFC 03,W
1B6BC:  MOVWF  FEA
1B6BE:  MOVF   FEF,W
1B6C0:  ADDWF  x4D,F
1B6C2:  MOVLW  00
1B6C4:  ADDWFC x4E,F
.................... 											if ((acionamento_tmp >= max_kw) || (acionamento_tmp > carga_necessaria)){
1B6C6:  MOVLB  0
1B6C8:  MOVF   x66,W
1B6CA:  MOVLB  A
1B6CC:  SUBWF  x4E,W
1B6CE:  BNC   1B6DC
1B6D0:  BNZ   1B6EA
1B6D2:  MOVLB  0
1B6D4:  MOVF   x65,W
1B6D6:  MOVLB  A
1B6D8:  SUBWF  x4D,W
1B6DA:  BC    1B6EA
1B6DC:  MOVF   x50,W
1B6DE:  SUBWF  x4E,W
1B6E0:  BNC   1B6EC
1B6E2:  BNZ   1B6EA
1B6E4:  MOVF   x4D,W
1B6E6:  SUBWF  x4F,W
1B6E8:  BC    1B6EC
.................... 												break;
1B6EA:  BRA    1B6F8
.................... 											}
.................... 										}
1B6EC:  BRA    1B6F0
.................... 										else{
.................... 											break;
1B6EE:  BRA    1B6F8
.................... 										}
.................... 									}
.................... 								}
.................... 							}
1B6F0:  INCF   x4A,F
1B6F2:  MOVLB  0
1B6F4:  BRA    1B650
1B6F6:  MOVLB  A
.................... 						}
.................... 					}
1B6F8:  BRA    1B710
1B6FA:  MOVLB  0
.................... 					else{
.................... 						tipo_controle_demanda = read_byte(ee_tipo_controle_demanda);
1B6FC:  MOVLB  A
1B6FE:  CLRF   x66
1B700:  MOVLW  4F
1B702:  MOVWF  x65
1B704:  MOVLB  0
1B706:  CALL   1C24
1B70A:  MOVFF  01,84
1B70E:  MOVLB  A
.................... 					}
.................... 				}
.................... 				if (desligar == true){
1B710:  DECFSZ x4C,W
1B712:  BRA    1B864
.................... 					if (tipo_controle_demanda == CONTROLE_FILO){
1B714:  MOVLB  0
1B716:  MOVF   x84,F
1B718:  BNZ   1B7AA
.................... 						qcarga = nro_cargas;
1B71A:  MOVFF  6D,A4A
.................... 						do{
.................... 							qcarga--;
1B71E:  MOVLB  A
1B720:  DECF   x4A,F
.................... 							if (carga[qcarga] > 0){
1B722:  CLRF   03
1B724:  MOVF   x4A,W
1B726:  ADDLW  07
1B728:  MOVWF  FE9
1B72A:  MOVLW  01
1B72C:  ADDWFC 03,W
1B72E:  MOVWF  FEA
1B730:  MOVF   FEF,F
1B732:  BZ    1B7A2
.................... 								if (forma_controle[qcarga] == 'D'){
1B734:  CLRF   03
1B736:  MOVF   x4A,W
1B738:  ADDLW  59
1B73A:  MOVWF  FE9
1B73C:  MOVLW  01
1B73E:  ADDWFC 03,W
1B740:  MOVWF  FEA
1B742:  MOVF   FEF,W
1B744:  SUBLW  44
1B746:  BNZ   1B7A2
.................... 									if (carga_acionada[qcarga] == true){
1B748:  CLRF   03
1B74A:  MOVF   x4A,W
1B74C:  ADDLW  17
1B74E:  MOVWF  FE9
1B750:  MOVLW  01
1B752:  ADDWFC 03,W
1B754:  MOVWF  FEA
1B756:  DECFSZ FEF,W
1B758:  BRA    1B7A2
.................... 										desligar_carga(qcarga);
1B75A:  MOVFF  A4A,A65
1B75E:  MOVLB  0
1B760:  CALL   1CB6
.................... 										acionamento_tmp += carga[qcarga];
1B764:  CLRF   03
1B766:  MOVLB  A
1B768:  MOVF   x4A,W
1B76A:  ADDLW  07
1B76C:  MOVWF  FE9
1B76E:  MOVLW  01
1B770:  ADDWFC 03,W
1B772:  MOVWF  FEA
1B774:  MOVF   FEF,W
1B776:  ADDWF  x4D,F
1B778:  MOVLW  00
1B77A:  ADDWFC x4E,F
.................... 										if ((acionamento_tmp >= max_kw) || (acionamento_tmp > carga_necessaria)){
1B77C:  MOVLB  0
1B77E:  MOVF   x66,W
1B780:  MOVLB  A
1B782:  SUBWF  x4E,W
1B784:  BNC   1B792
1B786:  BNZ   1B7A0
1B788:  MOVLB  0
1B78A:  MOVF   x65,W
1B78C:  MOVLB  A
1B78E:  SUBWF  x4D,W
1B790:  BC    1B7A0
1B792:  MOVF   x50,W
1B794:  SUBWF  x4E,W
1B796:  BNC   1B7A2
1B798:  BNZ   1B7A0
1B79A:  MOVF   x4D,W
1B79C:  SUBWF  x4F,W
1B79E:  BC    1B7A2
.................... 											break;
1B7A0:  BRA    1B7A6
.................... 										}
.................... 									}
.................... 								}
.................... 							}
.................... 						}
.................... 						while (qcarga != 0);
1B7A2:  MOVF   x4A,F
1B7A4:  BNZ   1B720
.................... //						for (qcarga = (nro_cargas - 1); qcarga > 0; qcarga--){
.................... //							if (carga[qcarga] > 0){
.................... //								if (forma_controle[qcarga] == 'D'){
.................... //									if (carga_acionada[qcarga] == true){
.................... //										desligar_carga(qcarga);
.................... //										acionamento_tmp += carga[qcarga];
.................... //										if ((acionamento_tmp >= max_kw) || (acionamento_tmp > carga_necessaria)){
.................... //											break;
.................... //										}
.................... //									}
.................... //								}
.................... //							}
.................... //						}
.................... 					}
1B7A6:  BRA    1B864
1B7A8:  MOVLB  0
.................... 					else if (tipo_controle_demanda == CONTROLE_FILA_CIRCULAR){
1B7AA:  DECFSZ x84,W
1B7AC:  BRA    1B850
.................... 						if (ptr_desaciona >= (nro_cargas-1)){
1B7AE:  MOVLW  01
1B7B0:  SUBWF  x6D,W
1B7B2:  SUBWF  x86,W
1B7B4:  BNC   1B7B8
.................... 							ptr_desaciona = 0;
1B7B6:  CLRF   x86
.................... 						}
.................... 						for (qcarga = ptr_desaciona; qcarga < nro_cargas; qcarga++){
1B7B8:  MOVFF  86,A4A
1B7BC:  MOVF   x6D,W
1B7BE:  MOVLB  A
1B7C0:  SUBWF  x4A,W
1B7C2:  BC    1B84C
.................... 							if (carga[qcarga] > 0){
1B7C4:  CLRF   03
1B7C6:  MOVF   x4A,W
1B7C8:  ADDLW  07
1B7CA:  MOVWF  FE9
1B7CC:  MOVLW  01
1B7CE:  ADDWFC 03,W
1B7D0:  MOVWF  FEA
1B7D2:  MOVF   FEF,F
1B7D4:  BZ    1B844
.................... 								if (forma_controle[qcarga] == 'D'){
1B7D6:  CLRF   03
1B7D8:  MOVF   x4A,W
1B7DA:  ADDLW  59
1B7DC:  MOVWF  FE9
1B7DE:  MOVLW  01
1B7E0:  ADDWFC 03,W
1B7E2:  MOVWF  FEA
1B7E4:  MOVF   FEF,W
1B7E6:  SUBLW  44
1B7E8:  BNZ   1B844
.................... 									if (carga_acionada[qcarga] == true){
1B7EA:  CLRF   03
1B7EC:  MOVF   x4A,W
1B7EE:  ADDLW  17
1B7F0:  MOVWF  FE9
1B7F2:  MOVLW  01
1B7F4:  ADDWFC 03,W
1B7F6:  MOVWF  FEA
1B7F8:  DECFSZ FEF,W
1B7FA:  BRA    1B844
.................... 										desligar_carga(qcarga);
1B7FC:  MOVFF  A4A,A65
1B800:  MOVLB  0
1B802:  CALL   1CB6
.................... 										acionamento_tmp += carga[qcarga];
1B806:  CLRF   03
1B808:  MOVLB  A
1B80A:  MOVF   x4A,W
1B80C:  ADDLW  07
1B80E:  MOVWF  FE9
1B810:  MOVLW  01
1B812:  ADDWFC 03,W
1B814:  MOVWF  FEA
1B816:  MOVF   FEF,W
1B818:  ADDWF  x4D,F
1B81A:  MOVLW  00
1B81C:  ADDWFC x4E,F
.................... 										if ((acionamento_tmp >= max_kw) || (acionamento_tmp > carga_necessaria)){
1B81E:  MOVLB  0
1B820:  MOVF   x66,W
1B822:  MOVLB  A
1B824:  SUBWF  x4E,W
1B826:  BNC   1B834
1B828:  BNZ   1B842
1B82A:  MOVLB  0
1B82C:  MOVF   x65,W
1B82E:  MOVLB  A
1B830:  SUBWF  x4D,W
1B832:  BC    1B842
1B834:  MOVF   x50,W
1B836:  SUBWF  x4E,W
1B838:  BNC   1B844
1B83A:  BNZ   1B842
1B83C:  MOVF   x4D,W
1B83E:  SUBWF  x4F,W
1B840:  BC    1B844
.................... 											break;
1B842:  BRA    1B84C
.................... 										}
.................... 									}
.................... 								}
.................... 							}
1B844:  INCF   x4A,F
1B846:  MOVLB  0
1B848:  BRA    1B7BC
1B84A:  MOVLB  A
.................... 						}
.................... 					}
1B84C:  BRA    1B864
1B84E:  MOVLB  0
.................... 					else{
.................... 						tipo_controle_demanda = read_byte(ee_tipo_controle_demanda);
1B850:  MOVLB  A
1B852:  CLRF   x66
1B854:  MOVLW  4F
1B856:  MOVWF  x65
1B858:  MOVLB  0
1B85A:  CALL   1C24
1B85E:  MOVFF  01,84
1B862:  MOVLB  A
.................... 					}
.................... 				}
.................... 			}
.................... 	
.................... 			aux_l1 = (int32)(hora);
1B864:  MOVLB  3
1B866:  CLRF   x73
1B868:  CLRF   x72
1B86A:  CLRF   x71
1B86C:  MOVFF  3C2,370
.................... 			aux_l2 = (int32)(minuto);
1B870:  CLRF   x77
1B872:  CLRF   x76
1B874:  CLRF   x75
1B876:  MOVFF  3C3,374
.................... 			aux_l1 = aux_l1 * 3600;
1B87A:  MOVFF  373,A75
1B87E:  MOVFF  372,A74
1B882:  MOVFF  371,A73
1B886:  MOVFF  370,A72
1B88A:  MOVLB  A
1B88C:  CLRF   x79
1B88E:  CLRF   x78
1B890:  MOVLW  0E
1B892:  MOVWF  x77
1B894:  MOVLW  10
1B896:  MOVWF  x76
1B898:  MOVLB  0
1B89A:  CALL   67FC
1B89E:  MOVFF  03,373
1B8A2:  MOVFF  02,372
1B8A6:  MOVFF  01,371
1B8AA:  MOVFF  00,370
.................... 			aux_l2 = aux_l2 * 60;
1B8AE:  MOVFF  377,A75
1B8B2:  MOVFF  376,A74
1B8B6:  MOVFF  375,A73
1B8BA:  MOVFF  374,A72
1B8BE:  MOVLB  A
1B8C0:  CLRF   x79
1B8C2:  CLRF   x78
1B8C4:  CLRF   x77
1B8C6:  MOVLW  3C
1B8C8:  MOVWF  x76
1B8CA:  MOVLB  0
1B8CC:  CALL   67FC
1B8D0:  MOVFF  03,377
1B8D4:  MOVFF  02,376
1B8D8:  MOVFF  01,375
1B8DC:  MOVFF  00,374
.................... 			tempo_atual = aux_l1 + aux_l2;
1B8E0:  MOVLB  3
1B8E2:  MOVF   x74,W
1B8E4:  ADDWF  x70,W
1B8E6:  MOVLB  A
1B8E8:  MOVWF  x61
1B8EA:  MOVLB  3
1B8EC:  MOVF   x75,W
1B8EE:  ADDWFC x71,W
1B8F0:  MOVLB  A
1B8F2:  MOVWF  x62
1B8F4:  MOVLB  3
1B8F6:  MOVF   x76,W
1B8F8:  ADDWFC x72,W
1B8FA:  MOVLB  A
1B8FC:  MOVWF  x63
1B8FE:  MOVLB  3
1B900:  MOVF   x77,W
1B902:  ADDWFC x73,W
1B904:  MOVLB  A
1B906:  MOVWF  x64
.................... 				
.................... 			for (qcarga = 0; qcarga < nro_cargas; qcarga++){
1B908:  CLRF   x4A
1B90A:  MOVLB  0
1B90C:  MOVF   x6D,W
1B90E:  MOVLB  A
1B910:  SUBWF  x4A,W
1B912:  BTFSC  FD8.0
1B914:  BRA    1BC54
.................... 				ligar = false;
1B916:  CLRF   x4B
.................... 				if (carga[qcarga] > 0){
1B918:  CLRF   03
1B91A:  MOVF   x4A,W
1B91C:  ADDLW  07
1B91E:  MOVWF  FE9
1B920:  MOVLW  01
1B922:  ADDWFC 03,W
1B924:  MOVWF  FEA
1B926:  MOVF   FEF,F
1B928:  BTFSC  FD8.2
1B92A:  BRA    1BC50
.................... 					if (forma_controle[qcarga] == 'H'){
1B92C:  CLRF   03
1B92E:  MOVF   x4A,W
1B930:  ADDLW  59
1B932:  MOVWF  FE9
1B934:  MOVLW  01
1B936:  ADDWFC 03,W
1B938:  MOVWF  FEA
1B93A:  MOVF   FEF,W
1B93C:  SUBLW  48
1B93E:  BTFSS  FD8.2
1B940:  BRA    1BC50
.................... 						aux_l1 = (int32)(hora_liga_controle[qcarga]);
1B942:  CLRF   03
1B944:  MOVF   x4A,W
1B946:  ADDLW  6A
1B948:  MOVWF  FE9
1B94A:  MOVLW  01
1B94C:  ADDWFC 03,W
1B94E:  MOVWF  FEA
1B950:  MOVF   FEF,W
1B952:  MOVLB  3
1B954:  CLRF   x73
1B956:  CLRF   x72
1B958:  CLRF   x71
1B95A:  MOVWF  x70
.................... 						aux_l2 = (int32)(minuto_liga_controle[qcarga]);
1B95C:  CLRF   03
1B95E:  MOVLB  A
1B960:  MOVF   x4A,W
1B962:  ADDLW  7B
1B964:  MOVWF  FE9
1B966:  MOVLW  01
1B968:  ADDWFC 03,W
1B96A:  MOVWF  FEA
1B96C:  MOVF   FEF,W
1B96E:  MOVLB  3
1B970:  CLRF   x77
1B972:  CLRF   x76
1B974:  CLRF   x75
1B976:  MOVWF  x74
.................... 						aux_l1 = aux_l1 * 3600;
1B978:  MOVFF  373,A75
1B97C:  MOVFF  372,A74
1B980:  MOVFF  371,A73
1B984:  MOVFF  370,A72
1B988:  MOVLB  A
1B98A:  CLRF   x79
1B98C:  CLRF   x78
1B98E:  MOVLW  0E
1B990:  MOVWF  x77
1B992:  MOVLW  10
1B994:  MOVWF  x76
1B996:  MOVLB  0
1B998:  CALL   67FC
1B99C:  MOVFF  03,373
1B9A0:  MOVFF  02,372
1B9A4:  MOVFF  01,371
1B9A8:  MOVFF  00,370
.................... 						aux_l2 = aux_l2 * 60;
1B9AC:  MOVFF  377,A75
1B9B0:  MOVFF  376,A74
1B9B4:  MOVFF  375,A73
1B9B8:  MOVFF  374,A72
1B9BC:  MOVLB  A
1B9BE:  CLRF   x79
1B9C0:  CLRF   x78
1B9C2:  CLRF   x77
1B9C4:  MOVLW  3C
1B9C6:  MOVWF  x76
1B9C8:  MOVLB  0
1B9CA:  CALL   67FC
1B9CE:  MOVFF  03,377
1B9D2:  MOVFF  02,376
1B9D6:  MOVFF  01,375
1B9DA:  MOVFF  00,374
.................... 						tempo_liga = aux_l1 + aux_l2;
1B9DE:  MOVLB  3
1B9E0:  MOVF   x74,W
1B9E2:  ADDWF  x70,W
1B9E4:  MOVLB  A
1B9E6:  MOVWF  x59
1B9E8:  MOVLB  3
1B9EA:  MOVF   x75,W
1B9EC:  ADDWFC x71,W
1B9EE:  MOVLB  A
1B9F0:  MOVWF  x5A
1B9F2:  MOVLB  3
1B9F4:  MOVF   x76,W
1B9F6:  ADDWFC x72,W
1B9F8:  MOVLB  A
1B9FA:  MOVWF  x5B
1B9FC:  MOVLB  3
1B9FE:  MOVF   x77,W
1BA00:  ADDWFC x73,W
1BA02:  MOVLB  A
1BA04:  MOVWF  x5C
.................... 			
.................... 						aux_l1 = (int32)(hora_desliga_controle[qcarga]);
1BA06:  CLRF   03
1BA08:  MOVF   x4A,W
1BA0A:  ADDLW  8C
1BA0C:  MOVWF  FE9
1BA0E:  MOVLW  01
1BA10:  ADDWFC 03,W
1BA12:  MOVWF  FEA
1BA14:  MOVF   FEF,W
1BA16:  MOVLB  3
1BA18:  CLRF   x73
1BA1A:  CLRF   x72
1BA1C:  CLRF   x71
1BA1E:  MOVWF  x70
.................... 						aux_l2 = (int32)(minuto_desliga_controle[qcarga]);
1BA20:  CLRF   03
1BA22:  MOVLB  A
1BA24:  MOVF   x4A,W
1BA26:  ADDLW  9D
1BA28:  MOVWF  FE9
1BA2A:  MOVLW  01
1BA2C:  ADDWFC 03,W
1BA2E:  MOVWF  FEA
1BA30:  MOVF   FEF,W
1BA32:  MOVLB  3
1BA34:  CLRF   x77
1BA36:  CLRF   x76
1BA38:  CLRF   x75
1BA3A:  MOVWF  x74
.................... 						aux_l1 = aux_l1 * 3600;
1BA3C:  MOVFF  373,A75
1BA40:  MOVFF  372,A74
1BA44:  MOVFF  371,A73
1BA48:  MOVFF  370,A72
1BA4C:  MOVLB  A
1BA4E:  CLRF   x79
1BA50:  CLRF   x78
1BA52:  MOVLW  0E
1BA54:  MOVWF  x77
1BA56:  MOVLW  10
1BA58:  MOVWF  x76
1BA5A:  MOVLB  0
1BA5C:  CALL   67FC
1BA60:  MOVFF  03,373
1BA64:  MOVFF  02,372
1BA68:  MOVFF  01,371
1BA6C:  MOVFF  00,370
.................... 						aux_l2 = aux_l2 * 60;
1BA70:  MOVFF  377,A75
1BA74:  MOVFF  376,A74
1BA78:  MOVFF  375,A73
1BA7C:  MOVFF  374,A72
1BA80:  MOVLB  A
1BA82:  CLRF   x79
1BA84:  CLRF   x78
1BA86:  CLRF   x77
1BA88:  MOVLW  3C
1BA8A:  MOVWF  x76
1BA8C:  MOVLB  0
1BA8E:  CALL   67FC
1BA92:  MOVFF  03,377
1BA96:  MOVFF  02,376
1BA9A:  MOVFF  01,375
1BA9E:  MOVFF  00,374
.................... 						tempo_desliga = aux_l1 + aux_l2;
1BAA2:  MOVLB  3
1BAA4:  MOVF   x74,W
1BAA6:  ADDWF  x70,W
1BAA8:  MOVLB  A
1BAAA:  MOVWF  x5D
1BAAC:  MOVLB  3
1BAAE:  MOVF   x75,W
1BAB0:  ADDWFC x71,W
1BAB2:  MOVLB  A
1BAB4:  MOVWF  x5E
1BAB6:  MOVLB  3
1BAB8:  MOVF   x76,W
1BABA:  ADDWFC x72,W
1BABC:  MOVLB  A
1BABE:  MOVWF  x5F
1BAC0:  MOVLB  3
1BAC2:  MOVF   x77,W
1BAC4:  ADDWFC x73,W
1BAC6:  MOVLB  A
1BAC8:  MOVWF  x60
.................... 						
.................... 						if (tempo_liga < tempo_desliga){
1BACA:  MOVF   x5C,W
1BACC:  SUBWF  x60,W
1BACE:  BTFSS  FD8.0
1BAD0:  BRA    1BB7C
1BAD2:  BNZ   1BAF0
1BAD4:  MOVF   x5B,W
1BAD6:  SUBWF  x5F,W
1BAD8:  BTFSS  FD8.0
1BADA:  BRA    1BB7C
1BADC:  BNZ   1BAF0
1BADE:  MOVF   x5A,W
1BAE0:  SUBWF  x5E,W
1BAE2:  BTFSS  FD8.0
1BAE4:  BRA    1BB7C
1BAE6:  BNZ   1BAF0
1BAE8:  MOVF   x5D,W
1BAEA:  SUBWF  x59,W
1BAEC:  BTFSC  FD8.0
1BAEE:  BRA    1BB7C
.................... 							if (tempo_atual < tempo_liga){
1BAF0:  MOVF   x64,W
1BAF2:  SUBWF  x5C,W
1BAF4:  BNC   1BB12
1BAF6:  BNZ   1BB0E
1BAF8:  MOVF   x63,W
1BAFA:  SUBWF  x5B,W
1BAFC:  BNC   1BB12
1BAFE:  BNZ   1BB0E
1BB00:  MOVF   x62,W
1BB02:  SUBWF  x5A,W
1BB04:  BNC   1BB12
1BB06:  BNZ   1BB0E
1BB08:  MOVF   x59,W
1BB0A:  SUBWF  x61,W
1BB0C:  BC    1BB12
.................... 								ligar = false;
1BB0E:  CLRF   x4B
.................... 								goto decide_h;
1BB10:  BRA    1BC30
.................... 							}
.................... 							if (tempo_atual > tempo_desliga){
1BB12:  MOVF   x60,W
1BB14:  SUBWF  x64,W
1BB16:  BNC   1BB34
1BB18:  BNZ   1BB30
1BB1A:  MOVF   x5F,W
1BB1C:  SUBWF  x63,W
1BB1E:  BNC   1BB34
1BB20:  BNZ   1BB30
1BB22:  MOVF   x5E,W
1BB24:  SUBWF  x62,W
1BB26:  BNC   1BB34
1BB28:  BNZ   1BB30
1BB2A:  MOVF   x61,W
1BB2C:  SUBWF  x5D,W
1BB2E:  BC    1BB34
.................... 								ligar = false;
1BB30:  CLRF   x4B
.................... 								goto decide_h;
1BB32:  BRA    1BC30
.................... 							}
.................... 							if (tempo_atual > tempo_liga){
1BB34:  MOVF   x5C,W
1BB36:  SUBWF  x64,W
1BB38:  BNC   1BB7C
1BB3A:  BNZ   1BB52
1BB3C:  MOVF   x5B,W
1BB3E:  SUBWF  x63,W
1BB40:  BNC   1BB7C
1BB42:  BNZ   1BB52
1BB44:  MOVF   x5A,W
1BB46:  SUBWF  x62,W
1BB48:  BNC   1BB7C
1BB4A:  BNZ   1BB52
1BB4C:  MOVF   x61,W
1BB4E:  SUBWF  x59,W
1BB50:  BC    1BB7C
.................... 								if (tempo_atual < tempo_desliga){
1BB52:  MOVF   x64,W
1BB54:  SUBWF  x60,W
1BB56:  BNC   1BB78
1BB58:  BNZ   1BB70
1BB5A:  MOVF   x63,W
1BB5C:  SUBWF  x5F,W
1BB5E:  BNC   1BB78
1BB60:  BNZ   1BB70
1BB62:  MOVF   x62,W
1BB64:  SUBWF  x5E,W
1BB66:  BNC   1BB78
1BB68:  BNZ   1BB70
1BB6A:  MOVF   x5D,W
1BB6C:  SUBWF  x61,W
1BB6E:  BC    1BB78
.................... 									ligar = true;
1BB70:  MOVLW  01
1BB72:  MOVWF  x4B
.................... 									goto decide_h;
1BB74:  BRA    1BC30
.................... 								}
1BB76:  BRA    1BB7C
.................... 								else{
.................... 									ligar = false;
1BB78:  CLRF   x4B
.................... 									goto decide_h;
1BB7A:  BRA    1BC30
.................... 								}
.................... 							}
.................... 						}
.................... 						if (tempo_liga > tempo_desliga){
1BB7C:  MOVF   x60,W
1BB7E:  SUBWF  x5C,W
1BB80:  BTFSS  FD8.0
1BB82:  BRA    1BC30
1BB84:  BNZ   1BBA2
1BB86:  MOVF   x5F,W
1BB88:  SUBWF  x5B,W
1BB8A:  BTFSS  FD8.0
1BB8C:  BRA    1BC30
1BB8E:  BNZ   1BBA2
1BB90:  MOVF   x5E,W
1BB92:  SUBWF  x5A,W
1BB94:  BTFSS  FD8.0
1BB96:  BRA    1BC30
1BB98:  BNZ   1BBA2
1BB9A:  MOVF   x59,W
1BB9C:  SUBWF  x5D,W
1BB9E:  BTFSC  FD8.0
1BBA0:  BRA    1BC30
.................... 							if (tempo_atual > tempo_liga){
1BBA2:  MOVF   x5C,W
1BBA4:  SUBWF  x64,W
1BBA6:  BNC   1BBC6
1BBA8:  BNZ   1BBC0
1BBAA:  MOVF   x5B,W
1BBAC:  SUBWF  x63,W
1BBAE:  BNC   1BBC6
1BBB0:  BNZ   1BBC0
1BBB2:  MOVF   x5A,W
1BBB4:  SUBWF  x62,W
1BBB6:  BNC   1BBC6
1BBB8:  BNZ   1BBC0
1BBBA:  MOVF   x61,W
1BBBC:  SUBWF  x59,W
1BBBE:  BC    1BBC6
.................... 								ligar = true;
1BBC0:  MOVLW  01
1BBC2:  MOVWF  x4B
.................... 								goto decide_h;
1BBC4:  BRA    1BC30
.................... 							}
.................... 							if (tempo_atual < tempo_desliga){
1BBC6:  MOVF   x64,W
1BBC8:  SUBWF  x60,W
1BBCA:  BNC   1BBEA
1BBCC:  BNZ   1BBE4
1BBCE:  MOVF   x63,W
1BBD0:  SUBWF  x5F,W
1BBD2:  BNC   1BBEA
1BBD4:  BNZ   1BBE4
1BBD6:  MOVF   x62,W
1BBD8:  SUBWF  x5E,W
1BBDA:  BNC   1BBEA
1BBDC:  BNZ   1BBE4
1BBDE:  MOVF   x5D,W
1BBE0:  SUBWF  x61,W
1BBE2:  BC    1BBEA
.................... 								ligar = true;
1BBE4:  MOVLW  01
1BBE6:  MOVWF  x4B
.................... 								goto decide_h;
1BBE8:  BRA    1BC30
.................... 							}
.................... 							if (tempo_atual < tempo_liga){
1BBEA:  MOVF   x64,W
1BBEC:  SUBWF  x5C,W
1BBEE:  BNC   1BC30
1BBF0:  BNZ   1BC08
1BBF2:  MOVF   x63,W
1BBF4:  SUBWF  x5B,W
1BBF6:  BNC   1BC30
1BBF8:  BNZ   1BC08
1BBFA:  MOVF   x62,W
1BBFC:  SUBWF  x5A,W
1BBFE:  BNC   1BC30
1BC00:  BNZ   1BC08
1BC02:  MOVF   x59,W
1BC04:  SUBWF  x61,W
1BC06:  BC    1BC30
.................... 								if (tempo_atual > tempo_desliga){
1BC08:  MOVF   x60,W
1BC0A:  SUBWF  x64,W
1BC0C:  BNC   1BC2C
1BC0E:  BNZ   1BC26
1BC10:  MOVF   x5F,W
1BC12:  SUBWF  x63,W
1BC14:  BNC   1BC2C
1BC16:  BNZ   1BC26
1BC18:  MOVF   x5E,W
1BC1A:  SUBWF  x62,W
1BC1C:  BNC   1BC2C
1BC1E:  BNZ   1BC26
1BC20:  MOVF   x61,W
1BC22:  SUBWF  x5D,W
1BC24:  BC    1BC2C
.................... 									ligar = false;
1BC26:  CLRF   x4B
.................... 									goto decide_h;
1BC28:  BRA    1BC30
.................... 								}
1BC2A:  BRA    1BC30
.................... 								else{
.................... 									ligar = true;
1BC2C:  MOVLW  01
1BC2E:  MOVWF  x4B
.................... 									goto decide_h;
.................... 								}
.................... 							}
.................... 						}
.................... 
.................... decide_h:				// após todas as decisões, liga ou desliga a carga
.................... 						if (ligar == true){
1BC30:  MOVLB  A
1BC32:  DECFSZ x4B,W
1BC34:  BRA    1BC44
.................... 							ligar_carga(qcarga);
1BC36:  MOVFF  A4A,A65
1BC3A:  MOVLB  0
1BC3C:  CALL   A884
.................... 						}
1BC40:  BRA    1BC4E
1BC42:  MOVLB  A
.................... 						else{
.................... 							desligar_carga(qcarga);
1BC44:  MOVFF  A4A,A65
1BC48:  MOVLB  0
1BC4A:  CALL   1CB6
1BC4E:  MOVLB  A
.................... 						}
.................... 					}
.................... 				}
1BC50:  INCF   x4A,F
1BC52:  BRA    1B90A
1BC54:  MOVLB  2
.................... 			}
.................... 		}
.................... 		ve_carga_acionada();
1BC56:  MOVLB  0
1BC58:  CALL   1AFDA
.................... 	}
1BC5C:  GOTO   1C0C6 (RETURN)
.................... }
.................... 
.................... #include "tensao_ff.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: st_CALC                                                        *
.................... ; Funcao: MODULO ROTINAS DE CALCULOS   									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... void calc_tensao_ff(void)
.................... {
.................... /* calcula tensao entre R e S */	
.................... 	#if (monofasico == false)
.................... 		if (tipo_ligacao == 0)
*
19D54:  MOVLB  4
19D56:  MOVF   xC7,F
19D58:  BTFSS  FD8.2
19D5A:  BRA    19F00
.................... 			{
.................... 			aux_l1 = 0;
19D5C:  MOVLB  3
19D5E:  CLRF   x73
19D60:  CLRF   x72
19D62:  CLRF   x71
19D64:  CLRF   x70
.................... 			aux_l1 = tensao_r;
19D66:  CLRF   x73
19D68:  CLRF   x72
19D6A:  MOVFF  251,371
19D6E:  MOVFF  250,370
.................... 			aux_l1 += tensao_s;
19D72:  MOVLB  2
19D74:  MOVF   xD4,W
19D76:  MOVLB  3
19D78:  ADDWF  x70,F
19D7A:  MOVLB  2
19D7C:  MOVF   xD5,W
19D7E:  MOVLB  3
19D80:  ADDWFC x71,F
19D82:  MOVLW  00
19D84:  ADDWFC x72,F
19D86:  ADDWFC x73,F
.................... 			aux_l1 = aux_l1 >> 1;
19D88:  BCF    FD8.0
19D8A:  RRCF   x73,F
19D8C:  RRCF   x72,F
19D8E:  RRCF   x71,F
19D90:  RRCF   x70,F
.................... 			tensao_rs = (word)(aux_l1 * 1.7320508);
19D92:  MOVFF  373,A7C
19D96:  MOVFF  372,A7B
19D9A:  MOVFF  371,A7A
19D9E:  MOVFF  370,A79
19DA2:  MOVLB  0
19DA4:  CALL   5438
19DA8:  MOVFF  03,A80
19DAC:  MOVFF  02,A7F
19DB0:  MOVFF  01,A7E
19DB4:  MOVFF  00,A7D
19DB8:  MOVLW  D7
19DBA:  MOVLB  A
19DBC:  MOVWF  x84
19DBE:  MOVLW  B3
19DC0:  MOVWF  x83
19DC2:  MOVLW  5D
19DC4:  MOVWF  x82
19DC6:  MOVLW  7F
19DC8:  MOVWF  x81
19DCA:  MOVLB  0
19DCC:  CALL   5306
19DD0:  MOVFF  03,A7C
19DD4:  MOVFF  02,A7B
19DD8:  MOVFF  01,A7A
19DDC:  MOVFF  00,A79
19DE0:  CALL   53FC
19DE4:  MOVFF  02,273
19DE8:  MOVFF  01,272
.................... 	
.................... 		/* calcula tensao entre T e S */	
.................... 			aux_l1 = 0;
19DEC:  MOVLB  3
19DEE:  CLRF   x73
19DF0:  CLRF   x72
19DF2:  CLRF   x71
19DF4:  CLRF   x70
.................... 			aux_l1 = tensao_s;
19DF6:  CLRF   x73
19DF8:  CLRF   x72
19DFA:  MOVFF  2D5,371
19DFE:  MOVFF  2D4,370
.................... 			aux_l1 += tensao_t;
19E02:  MOVF   x2B,W
19E04:  ADDWF  x70,F
19E06:  MOVF   x2C,W
19E08:  ADDWFC x71,F
19E0A:  MOVLW  00
19E0C:  ADDWFC x72,F
19E0E:  ADDWFC x73,F
.................... 			aux_l1 = aux_l1 >> 1;
19E10:  BCF    FD8.0
19E12:  RRCF   x73,F
19E14:  RRCF   x72,F
19E16:  RRCF   x71,F
19E18:  RRCF   x70,F
.................... 			tensao_st = (word)(aux_l1 * 1.7320508);
19E1A:  MOVFF  373,A7C
19E1E:  MOVFF  372,A7B
19E22:  MOVFF  371,A7A
19E26:  MOVFF  370,A79
19E2A:  MOVLB  0
19E2C:  CALL   5438
19E30:  MOVFF  03,A80
19E34:  MOVFF  02,A7F
19E38:  MOVFF  01,A7E
19E3C:  MOVFF  00,A7D
19E40:  MOVLW  D7
19E42:  MOVLB  A
19E44:  MOVWF  x84
19E46:  MOVLW  B3
19E48:  MOVWF  x83
19E4A:  MOVLW  5D
19E4C:  MOVWF  x82
19E4E:  MOVLW  7F
19E50:  MOVWF  x81
19E52:  MOVLB  0
19E54:  CALL   5306
19E58:  MOVFF  03,A7C
19E5C:  MOVFF  02,A7B
19E60:  MOVFF  01,A7A
19E64:  MOVFF  00,A79
19E68:  CALL   53FC
19E6C:  MOVFF  02,2E5
19E70:  MOVFF  01,2E4
.................... 		
.................... 		/* calcula tensao entre R e T */	
.................... 			aux_l1 = 0;
19E74:  MOVLB  3
19E76:  CLRF   x73
19E78:  CLRF   x72
19E7A:  CLRF   x71
19E7C:  CLRF   x70
.................... 			aux_l1 = tensao_r;
19E7E:  CLRF   x73
19E80:  CLRF   x72
19E82:  MOVFF  251,371
19E86:  MOVFF  250,370
.................... 			aux_l1 += tensao_t;
19E8A:  MOVF   x2B,W
19E8C:  ADDWF  x70,F
19E8E:  MOVF   x2C,W
19E90:  ADDWFC x71,F
19E92:  MOVLW  00
19E94:  ADDWFC x72,F
19E96:  ADDWFC x73,F
.................... 			aux_l1 = aux_l1 >> 1;
19E98:  BCF    FD8.0
19E9A:  RRCF   x73,F
19E9C:  RRCF   x72,F
19E9E:  RRCF   x71,F
19EA0:  RRCF   x70,F
.................... 			tensao_rt = (word)(aux_l1 * 1.7320508);
19EA2:  MOVFF  373,A7C
19EA6:  MOVFF  372,A7B
19EAA:  MOVFF  371,A7A
19EAE:  MOVFF  370,A79
19EB2:  MOVLB  0
19EB4:  CALL   5438
19EB8:  MOVFF  03,A80
19EBC:  MOVFF  02,A7F
19EC0:  MOVFF  01,A7E
19EC4:  MOVFF  00,A7D
19EC8:  MOVLW  D7
19ECA:  MOVLB  A
19ECC:  MOVWF  x84
19ECE:  MOVLW  B3
19ED0:  MOVWF  x83
19ED2:  MOVLW  5D
19ED4:  MOVWF  x82
19ED6:  MOVLW  7F
19ED8:  MOVWF  x81
19EDA:  MOVLB  0
19EDC:  CALL   5306
19EE0:  MOVFF  03,A7C
19EE4:  MOVFF  02,A7B
19EE8:  MOVFF  01,A7A
19EEC:  MOVFF  00,A79
19EF0:  CALL   53FC
19EF4:  MOVFF  02,33C
19EF8:  MOVFF  01,33B
.................... 			}
19EFC:  BRA    1A37E
19EFE:  MOVLB  4
.................... 		else
.................... 			{
.................... 			
.................... 			// calcula tensao entre R e S 
.................... 			aux_w1 = (word)(tensao_r + (tensao_s >> 1));
19F00:  BCF    FD8.0
19F02:  MOVLB  2
19F04:  RRCF   xD5,W
19F06:  MOVWF  03
19F08:  RRCF   xD4,W
19F0A:  ADDWF  x50,W
19F0C:  MOVLB  3
19F0E:  MOVWF  x62
19F10:  MOVF   03,W
19F12:  MOVLB  2
19F14:  ADDWFC x51,W
19F16:  MOVLB  3
19F18:  MOVWF  x63
.................... 			aux_l1 = tensao_s;
19F1A:  CLRF   x73
19F1C:  CLRF   x72
19F1E:  MOVFF  2D5,371
19F22:  MOVFF  2D4,370
.................... 			aux_l1 = (int32)(aux_l1 * 887);
19F26:  MOVFF  373,A75
19F2A:  MOVFF  372,A74
19F2E:  MOVFF  371,A73
19F32:  MOVFF  370,A72
19F36:  MOVLB  A
19F38:  CLRF   x79
19F3A:  CLRF   x78
19F3C:  MOVLW  03
19F3E:  MOVWF  x77
19F40:  MOVLW  77
19F42:  MOVWF  x76
19F44:  MOVLB  0
19F46:  CALL   67FC
19F4A:  MOVFF  03,373
19F4E:  MOVFF  02,372
19F52:  MOVFF  01,371
19F56:  MOVFF  00,370
.................... 			aux_w2 = (word)(aux_l1 >> 10);
19F5A:  MOVLB  3
19F5C:  RRCF   x73,W
19F5E:  MOVWF  02
19F60:  RRCF   x72,W
19F62:  MOVWF  01
19F64:  RRCF   x71,W
19F66:  MOVWF  00
19F68:  RRCF   02,F
19F6A:  RRCF   01,F
19F6C:  RRCF   00,F
19F6E:  MOVLW  3F
19F70:  ANDWF  02,F
19F72:  MOVFF  01,365
19F76:  MOVFF  00,364
.................... 			aux_l1 = aux_w1;
19F7A:  CLRF   x73
19F7C:  CLRF   x72
19F7E:  MOVFF  363,371
19F82:  MOVFF  362,370
.................... 			aux_l1 = aux_l1 * aux_l1;
19F86:  MOVFF  373,A75
19F8A:  MOVFF  372,A74
19F8E:  MOVFF  371,A73
19F92:  MOVFF  370,A72
19F96:  MOVFF  373,A79
19F9A:  MOVFF  372,A78
19F9E:  MOVFF  371,A77
19FA2:  MOVFF  370,A76
19FA6:  MOVLB  0
19FA8:  CALL   67FC
19FAC:  MOVFF  03,373
19FB0:  MOVFF  02,372
19FB4:  MOVFF  01,371
19FB8:  MOVFF  00,370
.................... 			aux_l2 = aux_w2;
19FBC:  MOVLB  3
19FBE:  CLRF   x77
19FC0:  CLRF   x76
19FC2:  MOVFF  365,375
19FC6:  MOVFF  364,374
.................... 			aux_l2 = aux_l2 * aux_l2;
19FCA:  MOVFF  377,A75
19FCE:  MOVFF  376,A74
19FD2:  MOVFF  375,A73
19FD6:  MOVFF  374,A72
19FDA:  MOVFF  377,A79
19FDE:  MOVFF  376,A78
19FE2:  MOVFF  375,A77
19FE6:  MOVFF  374,A76
19FEA:  MOVLB  0
19FEC:  CALL   67FC
19FF0:  MOVFF  03,377
19FF4:  MOVFF  02,376
19FF8:  MOVFF  01,375
19FFC:  MOVFF  00,374
.................... 			aux_l1 = (sqrtx(aux_l1 + aux_l2));
1A000:  MOVLB  3
1A002:  MOVF   x74,W
1A004:  ADDWF  x70,W
1A006:  MOVWF  00
1A008:  MOVF   x75,W
1A00A:  ADDWFC x71,W
1A00C:  MOVWF  01
1A00E:  MOVF   x76,W
1A010:  ADDWFC x72,W
1A012:  MOVWF  02
1A014:  MOVF   x77,W
1A016:  ADDWFC x73,W
1A018:  MOVWF  03
1A01A:  MOVFF  FE8,A7C
1A01E:  MOVFF  02,A7B
1A022:  MOVFF  01,A7A
1A026:  MOVFF  00,A79
1A02A:  MOVLB  0
1A02C:  CALL   5438
1A030:  MOVFF  03,A51
1A034:  MOVFF  02,A50
1A038:  MOVFF  01,A4F
1A03C:  MOVFF  00,A4E
1A040:  MOVFF  03,A75
1A044:  MOVFF  02,A74
1A048:  MOVFF  01,A73
1A04C:  MOVFF  00,A72
1A050:  CALL   158EC
1A054:  MOVFF  03,A7C
1A058:  MOVFF  02,A7B
1A05C:  MOVFF  01,A7A
1A060:  MOVFF  00,A79
1A064:  CALL   5470
1A068:  MOVFF  03,373
1A06C:  MOVFF  02,372
1A070:  MOVFF  01,371
1A074:  MOVFF  00,370
.................... 			tensao_rs = (word)(aux_l1);
1A078:  MOVFF  371,273
1A07C:  MOVFF  370,272
.................... 		
.................... 		// calcula tensao entre T e S 
.................... 			aux_w1 = (word)(tensao_s + (tensao_t >> 1));
1A080:  BCF    FD8.0
1A082:  MOVLB  3
1A084:  RRCF   x2C,W
1A086:  MOVWF  03
1A088:  RRCF   x2B,W
1A08A:  MOVLB  2
1A08C:  ADDWF  xD4,W
1A08E:  MOVLB  3
1A090:  MOVWF  x62
1A092:  MOVF   03,W
1A094:  MOVLB  2
1A096:  ADDWFC xD5,W
1A098:  MOVLB  3
1A09A:  MOVWF  x63
.................... 			aux_l1 = tensao_t;
1A09C:  CLRF   x73
1A09E:  CLRF   x72
1A0A0:  MOVFF  32C,371
1A0A4:  MOVFF  32B,370
.................... 			aux_l1 = (int32)(aux_l1 * 887);
1A0A8:  MOVFF  373,A75
1A0AC:  MOVFF  372,A74
1A0B0:  MOVFF  371,A73
1A0B4:  MOVFF  370,A72
1A0B8:  MOVLB  A
1A0BA:  CLRF   x79
1A0BC:  CLRF   x78
1A0BE:  MOVLW  03
1A0C0:  MOVWF  x77
1A0C2:  MOVLW  77
1A0C4:  MOVWF  x76
1A0C6:  MOVLB  0
1A0C8:  CALL   67FC
1A0CC:  MOVFF  03,373
1A0D0:  MOVFF  02,372
1A0D4:  MOVFF  01,371
1A0D8:  MOVFF  00,370
.................... 			aux_w2 = (word)(aux_l1 >> 10);
1A0DC:  MOVLB  3
1A0DE:  RRCF   x73,W
1A0E0:  MOVWF  02
1A0E2:  RRCF   x72,W
1A0E4:  MOVWF  01
1A0E6:  RRCF   x71,W
1A0E8:  MOVWF  00
1A0EA:  RRCF   02,F
1A0EC:  RRCF   01,F
1A0EE:  RRCF   00,F
1A0F0:  MOVLW  3F
1A0F2:  ANDWF  02,F
1A0F4:  MOVFF  01,365
1A0F8:  MOVFF  00,364
.................... 			aux_l1 = aux_w1;
1A0FC:  CLRF   x73
1A0FE:  CLRF   x72
1A100:  MOVFF  363,371
1A104:  MOVFF  362,370
.................... 			aux_l1 = aux_l1 * aux_l1;
1A108:  MOVFF  373,A75
1A10C:  MOVFF  372,A74
1A110:  MOVFF  371,A73
1A114:  MOVFF  370,A72
1A118:  MOVFF  373,A79
1A11C:  MOVFF  372,A78
1A120:  MOVFF  371,A77
1A124:  MOVFF  370,A76
1A128:  MOVLB  0
1A12A:  CALL   67FC
1A12E:  MOVFF  03,373
1A132:  MOVFF  02,372
1A136:  MOVFF  01,371
1A13A:  MOVFF  00,370
.................... 			aux_l2 = aux_w2;
1A13E:  MOVLB  3
1A140:  CLRF   x77
1A142:  CLRF   x76
1A144:  MOVFF  365,375
1A148:  MOVFF  364,374
.................... 			aux_l2 = aux_l2 * aux_l2;
1A14C:  MOVFF  377,A75
1A150:  MOVFF  376,A74
1A154:  MOVFF  375,A73
1A158:  MOVFF  374,A72
1A15C:  MOVFF  377,A79
1A160:  MOVFF  376,A78
1A164:  MOVFF  375,A77
1A168:  MOVFF  374,A76
1A16C:  MOVLB  0
1A16E:  CALL   67FC
1A172:  MOVFF  03,377
1A176:  MOVFF  02,376
1A17A:  MOVFF  01,375
1A17E:  MOVFF  00,374
.................... 			aux_l1 = (sqrtx(aux_l1 + aux_l2));
1A182:  MOVLB  3
1A184:  MOVF   x74,W
1A186:  ADDWF  x70,W
1A188:  MOVWF  00
1A18A:  MOVF   x75,W
1A18C:  ADDWFC x71,W
1A18E:  MOVWF  01
1A190:  MOVF   x76,W
1A192:  ADDWFC x72,W
1A194:  MOVWF  02
1A196:  MOVF   x77,W
1A198:  ADDWFC x73,W
1A19A:  MOVWF  03
1A19C:  MOVFF  FE8,A7C
1A1A0:  MOVFF  02,A7B
1A1A4:  MOVFF  01,A7A
1A1A8:  MOVFF  00,A79
1A1AC:  MOVLB  0
1A1AE:  CALL   5438
1A1B2:  MOVFF  03,A51
1A1B6:  MOVFF  02,A50
1A1BA:  MOVFF  01,A4F
1A1BE:  MOVFF  00,A4E
1A1C2:  MOVFF  03,A75
1A1C6:  MOVFF  02,A74
1A1CA:  MOVFF  01,A73
1A1CE:  MOVFF  00,A72
1A1D2:  CALL   158EC
1A1D6:  MOVFF  03,A7C
1A1DA:  MOVFF  02,A7B
1A1DE:  MOVFF  01,A7A
1A1E2:  MOVFF  00,A79
1A1E6:  CALL   5470
1A1EA:  MOVFF  03,373
1A1EE:  MOVFF  02,372
1A1F2:  MOVFF  01,371
1A1F6:  MOVFF  00,370
.................... 			tensao_st = (word)(aux_l1);
1A1FA:  MOVFF  371,2E5
1A1FE:  MOVFF  370,2E4
.................... 		
.................... 		// calcula tensao entre R e T 
.................... 			aux_w1 = (word)(tensao_t + (tensao_r >> 1));
1A202:  BCF    FD8.0
1A204:  MOVLB  2
1A206:  RRCF   x51,W
1A208:  MOVWF  03
1A20A:  RRCF   x50,W
1A20C:  MOVLB  3
1A20E:  ADDWF  x2B,W
1A210:  MOVWF  x62
1A212:  MOVF   03,W
1A214:  ADDWFC x2C,W
1A216:  MOVWF  x63
.................... 			aux_l1 = tensao_r;
1A218:  CLRF   x73
1A21A:  CLRF   x72
1A21C:  MOVFF  251,371
1A220:  MOVFF  250,370
.................... 			aux_l1 = (int32)(aux_l1 * 887);
1A224:  MOVFF  373,A75
1A228:  MOVFF  372,A74
1A22C:  MOVFF  371,A73
1A230:  MOVFF  370,A72
1A234:  MOVLB  A
1A236:  CLRF   x79
1A238:  CLRF   x78
1A23A:  MOVLW  03
1A23C:  MOVWF  x77
1A23E:  MOVLW  77
1A240:  MOVWF  x76
1A242:  MOVLB  0
1A244:  CALL   67FC
1A248:  MOVFF  03,373
1A24C:  MOVFF  02,372
1A250:  MOVFF  01,371
1A254:  MOVFF  00,370
.................... 			aux_w2 = (word)(aux_l1 >> 10);
1A258:  MOVLB  3
1A25A:  RRCF   x73,W
1A25C:  MOVWF  02
1A25E:  RRCF   x72,W
1A260:  MOVWF  01
1A262:  RRCF   x71,W
1A264:  MOVWF  00
1A266:  RRCF   02,F
1A268:  RRCF   01,F
1A26A:  RRCF   00,F
1A26C:  MOVLW  3F
1A26E:  ANDWF  02,F
1A270:  MOVFF  01,365
1A274:  MOVFF  00,364
.................... 			aux_l1 = aux_w1;
1A278:  CLRF   x73
1A27A:  CLRF   x72
1A27C:  MOVFF  363,371
1A280:  MOVFF  362,370
.................... 			aux_l1 = aux_l1 * aux_l1;
1A284:  MOVFF  373,A75
1A288:  MOVFF  372,A74
1A28C:  MOVFF  371,A73
1A290:  MOVFF  370,A72
1A294:  MOVFF  373,A79
1A298:  MOVFF  372,A78
1A29C:  MOVFF  371,A77
1A2A0:  MOVFF  370,A76
1A2A4:  MOVLB  0
1A2A6:  CALL   67FC
1A2AA:  MOVFF  03,373
1A2AE:  MOVFF  02,372
1A2B2:  MOVFF  01,371
1A2B6:  MOVFF  00,370
.................... 			aux_l2 = aux_w2;
1A2BA:  MOVLB  3
1A2BC:  CLRF   x77
1A2BE:  CLRF   x76
1A2C0:  MOVFF  365,375
1A2C4:  MOVFF  364,374
.................... 			aux_l2 = aux_l2 * aux_l2;
1A2C8:  MOVFF  377,A75
1A2CC:  MOVFF  376,A74
1A2D0:  MOVFF  375,A73
1A2D4:  MOVFF  374,A72
1A2D8:  MOVFF  377,A79
1A2DC:  MOVFF  376,A78
1A2E0:  MOVFF  375,A77
1A2E4:  MOVFF  374,A76
1A2E8:  MOVLB  0
1A2EA:  CALL   67FC
1A2EE:  MOVFF  03,377
1A2F2:  MOVFF  02,376
1A2F6:  MOVFF  01,375
1A2FA:  MOVFF  00,374
.................... 			aux_l1 = (sqrtx(aux_l1 + aux_l2));
1A2FE:  MOVLB  3
1A300:  MOVF   x74,W
1A302:  ADDWF  x70,W
1A304:  MOVWF  00
1A306:  MOVF   x75,W
1A308:  ADDWFC x71,W
1A30A:  MOVWF  01
1A30C:  MOVF   x76,W
1A30E:  ADDWFC x72,W
1A310:  MOVWF  02
1A312:  MOVF   x77,W
1A314:  ADDWFC x73,W
1A316:  MOVWF  03
1A318:  MOVFF  FE8,A7C
1A31C:  MOVFF  02,A7B
1A320:  MOVFF  01,A7A
1A324:  MOVFF  00,A79
1A328:  MOVLB  0
1A32A:  CALL   5438
1A32E:  MOVFF  03,A51
1A332:  MOVFF  02,A50
1A336:  MOVFF  01,A4F
1A33A:  MOVFF  00,A4E
1A33E:  MOVFF  03,A75
1A342:  MOVFF  02,A74
1A346:  MOVFF  01,A73
1A34A:  MOVFF  00,A72
1A34E:  CALL   158EC
1A352:  MOVFF  03,A7C
1A356:  MOVFF  02,A7B
1A35A:  MOVFF  01,A7A
1A35E:  MOVFF  00,A79
1A362:  CALL   5470
1A366:  MOVFF  03,373
1A36A:  MOVFF  02,372
1A36E:  MOVFF  01,371
1A372:  MOVFF  00,370
.................... 			tensao_rt = (word)(aux_l1);
1A376:  MOVFF  371,33C
1A37A:  MOVFF  370,33B
.................... 			
.................... 			}
.................... 			
.................... 	#else
1A37E:  GOTO   1AB44 (RETURN)
.................... 		aux_l1 = 0;
.................... 		aux_l1 = tensao_r;
.................... 		tensao_rs = (word)(aux_l1 * 1.7320508);
.................... 	#endif
.................... 
.................... }
.................... 
.................... 
.................... 
.................... #include "tensao_alta.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: st_CALC                                                        *
.................... ; Funcao: MODULO ROTINAS DE CALCULOS   									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... void calc_tensao_alta(void)
.................... {	
.................... 	if (valor_tp == 1)
1A382:  MOVLB  4
1A384:  DECFSZ xC1,W
1A386:  BRA    1A3A6
1A388:  MOVF   xC2,F
1A38A:  BNZ   1A3A6
.................... 		{
.................... 		tensao_rs_na_alta = tensao_r;
1A38C:  MOVFF  251,275
1A390:  MOVFF  250,274
.................... 		#if (monofasico == false)
.................... 			tensao_st_na_alta = tensao_s;
1A394:  MOVFF  2D5,2E7
1A398:  MOVFF  2D4,2E6
.................... 			tensao_rt_na_alta = tensao_t;
1A39C:  MOVFF  32C,33E
1A3A0:  MOVFF  32B,33D
.................... 		#endif
.................... 		}
1A3A4:  BRA    1A4F8
.................... 	else
.................... 		{
.................... 		aux_l1 = (int32)(tensao_r);
1A3A6:  MOVLB  3
1A3A8:  CLRF   x73
1A3AA:  CLRF   x72
1A3AC:  MOVFF  251,371
1A3B0:  MOVFF  250,370
.................... 		aux_l1 = (int32)(aux_l1 * valor_tp );
1A3B4:  MOVFF  373,A75
1A3B8:  MOVFF  372,A74
1A3BC:  MOVFF  371,A73
1A3C0:  MOVFF  370,A72
1A3C4:  MOVLB  A
1A3C6:  CLRF   x79
1A3C8:  CLRF   x78
1A3CA:  MOVFF  4C2,A77
1A3CE:  MOVFF  4C1,A76
1A3D2:  MOVLB  0
1A3D4:  CALL   67FC
1A3D8:  MOVFF  03,373
1A3DC:  MOVFF  02,372
1A3E0:  MOVFF  01,371
1A3E4:  MOVFF  00,370
.................... 		tensao_rs_na_alta = (word)(aux_l1 / 1000);
1A3E8:  BCF    FD8.1
1A3EA:  MOVFF  373,A73
1A3EE:  MOVFF  372,A72
1A3F2:  MOVFF  371,A71
1A3F6:  MOVFF  370,A70
1A3FA:  MOVLB  A
1A3FC:  CLRF   x77
1A3FE:  CLRF   x76
1A400:  MOVLW  03
1A402:  MOVWF  x75
1A404:  MOVLW  E8
1A406:  MOVWF  x74
1A408:  MOVLB  0
1A40A:  CALL   6858
1A40E:  MOVFF  01,275
1A412:  MOVFF  00,274
.................... 	
.................... 		#if (monofasico == false)
.................... 			aux_l1 = (int32)(tensao_s);
1A416:  MOVLB  3
1A418:  CLRF   x73
1A41A:  CLRF   x72
1A41C:  MOVFF  2D5,371
1A420:  MOVFF  2D4,370
.................... 			aux_l1 = (int32)(aux_l1 * valor_tp);
1A424:  MOVFF  373,A75
1A428:  MOVFF  372,A74
1A42C:  MOVFF  371,A73
1A430:  MOVFF  370,A72
1A434:  MOVLB  A
1A436:  CLRF   x79
1A438:  CLRF   x78
1A43A:  MOVFF  4C2,A77
1A43E:  MOVFF  4C1,A76
1A442:  MOVLB  0
1A444:  CALL   67FC
1A448:  MOVFF  03,373
1A44C:  MOVFF  02,372
1A450:  MOVFF  01,371
1A454:  MOVFF  00,370
.................... 			tensao_st_na_alta = (word)(aux_l1 / 1000);
1A458:  BCF    FD8.1
1A45A:  MOVFF  373,A73
1A45E:  MOVFF  372,A72
1A462:  MOVFF  371,A71
1A466:  MOVFF  370,A70
1A46A:  MOVLB  A
1A46C:  CLRF   x77
1A46E:  CLRF   x76
1A470:  MOVLW  03
1A472:  MOVWF  x75
1A474:  MOVLW  E8
1A476:  MOVWF  x74
1A478:  MOVLB  0
1A47A:  CALL   6858
1A47E:  MOVFF  01,2E7
1A482:  MOVFF  00,2E6
.................... 			
.................... 			aux_l1 = (int32)(tensao_r);
1A486:  MOVLB  3
1A488:  CLRF   x73
1A48A:  CLRF   x72
1A48C:  MOVFF  251,371
1A490:  MOVFF  250,370
.................... 			aux_l1 = (int32)(aux_l1 * valor_tp);
1A494:  MOVFF  373,A75
1A498:  MOVFF  372,A74
1A49C:  MOVFF  371,A73
1A4A0:  MOVFF  370,A72
1A4A4:  MOVLB  A
1A4A6:  CLRF   x79
1A4A8:  CLRF   x78
1A4AA:  MOVFF  4C2,A77
1A4AE:  MOVFF  4C1,A76
1A4B2:  MOVLB  0
1A4B4:  CALL   67FC
1A4B8:  MOVFF  03,373
1A4BC:  MOVFF  02,372
1A4C0:  MOVFF  01,371
1A4C4:  MOVFF  00,370
.................... 			tensao_rt_na_alta = (word)(aux_l1 / 1000);
1A4C8:  BCF    FD8.1
1A4CA:  MOVFF  373,A73
1A4CE:  MOVFF  372,A72
1A4D2:  MOVFF  371,A71
1A4D6:  MOVFF  370,A70
1A4DA:  MOVLB  A
1A4DC:  CLRF   x77
1A4DE:  CLRF   x76
1A4E0:  MOVLW  03
1A4E2:  MOVWF  x75
1A4E4:  MOVLW  E8
1A4E6:  MOVWF  x74
1A4E8:  MOVLB  0
1A4EA:  CALL   6858
1A4EE:  MOVFF  01,33E
1A4F2:  MOVFF  00,33D
1A4F6:  MOVLB  4
.................... 		#endif
.................... 		}
1A4F8:  MOVLB  0
1A4FA:  GOTO   1AB46 (RETURN)
.................... }	
.................... 
.................... 
.................... 
.................... #include "tensao_tri.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: st_CALC                                                        *
.................... ; Funcao: MODULO ROTINAS DE CALCULOS   									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... void calc_tensao_corrente_tri(void)
.................... {	
.................... // calculos de tensao e corrente trifásica	
.................... 
.................... 	soma_reg();
*
1A6AE:  BRA    1A4FE
.................... 
.................... 	#if (monofasico == true)
.................... 		if (tipo_ligacao == 0)
.................... 			{
.................... 			tensao_tri = tensao_r;
.................... 			}
.................... 		else
.................... 			{
.................... 			tensao_tri = tensao_rs;
.................... 			}
.................... 	 	corrente_tri = corrente_r  * 3;
.................... 	#else
.................... 		if (tipo_ligacao == 0)		// estrela = 0, em delta = 1
1A6B0:  MOVLB  4
1A6B2:  MOVF   xC7,F
1A6B4:  BNZ   1A774
.................... 			{
.................... 		 	aux_l3 = (int32)(tensao_r + tensao_s + tensao_t) / 3;
1A6B6:  MOVLB  2
1A6B8:  MOVF   xD4,W
1A6BA:  ADDWF  x50,W
1A6BC:  MOVLB  A
1A6BE:  MOVWF  x4E
1A6C0:  MOVLB  2
1A6C2:  MOVF   xD5,W
1A6C4:  ADDWFC x51,W
1A6C6:  MOVLB  A
1A6C8:  MOVWF  x4F
1A6CA:  MOVLB  3
1A6CC:  MOVF   x2B,W
1A6CE:  MOVLB  A
1A6D0:  ADDWF  x4E,W
1A6D2:  MOVWF  01
1A6D4:  MOVLB  3
1A6D6:  MOVF   x2C,W
1A6D8:  MOVLB  A
1A6DA:  ADDWFC x4F,W
1A6DC:  MOVWF  03
1A6DE:  MOVFF  01,A4E
1A6E2:  MOVWF  x4F
1A6E4:  BCF    FD8.1
1A6E6:  CLRF   x73
1A6E8:  CLRF   x72
1A6EA:  MOVWF  x71
1A6EC:  MOVFF  01,A70
1A6F0:  CLRF   x77
1A6F2:  CLRF   x76
1A6F4:  CLRF   x75
1A6F6:  MOVLW  03
1A6F8:  MOVWF  x74
1A6FA:  MOVLB  0
1A6FC:  CALL   6858
1A700:  MOVFF  03,37B
1A704:  MOVFF  02,37A
1A708:  MOVFF  01,379
1A70C:  MOVFF  00,378
.................... 	 		aux_l3 = (int32)(aux_l3 * 1.7320508);
1A710:  MOVFF  37B,A7C
1A714:  MOVFF  37A,A7B
1A718:  MOVFF  379,A7A
1A71C:  MOVFF  378,A79
1A720:  CALL   5438
1A724:  MOVFF  03,A80
1A728:  MOVFF  02,A7F
1A72C:  MOVFF  01,A7E
1A730:  MOVFF  00,A7D
1A734:  MOVLW  D7
1A736:  MOVLB  A
1A738:  MOVWF  x84
1A73A:  MOVLW  B3
1A73C:  MOVWF  x83
1A73E:  MOVLW  5D
1A740:  MOVWF  x82
1A742:  MOVLW  7F
1A744:  MOVWF  x81
1A746:  MOVLB  0
1A748:  CALL   5306
1A74C:  MOVFF  03,A7C
1A750:  MOVFF  02,A7B
1A754:  MOVFF  01,A7A
1A758:  MOVFF  00,A79
1A75C:  CALL   5470
1A760:  MOVFF  03,37B
1A764:  MOVFF  02,37A
1A768:  MOVFF  01,379
1A76C:  MOVFF  00,378
.................... 			}
1A770:  BRA    1A7CE
1A772:  MOVLB  4
.................... 		else
.................... 			{
.................... 		 	aux_l3 = (int32)(tensao_rs + tensao_st + tensao_rt) / 3;
1A774:  MOVLB  2
1A776:  MOVF   xE4,W
1A778:  ADDWF  x72,W
1A77A:  MOVLB  A
1A77C:  MOVWF  x4E
1A77E:  MOVLB  2
1A780:  MOVF   xE5,W
1A782:  ADDWFC x73,W
1A784:  MOVLB  A
1A786:  MOVWF  x4F
1A788:  MOVLB  3
1A78A:  MOVF   x3B,W
1A78C:  MOVLB  A
1A78E:  ADDWF  x4E,W
1A790:  MOVWF  01
1A792:  MOVLB  3
1A794:  MOVF   x3C,W
1A796:  MOVLB  A
1A798:  ADDWFC x4F,W
1A79A:  MOVWF  03
1A79C:  MOVFF  01,A4E
1A7A0:  MOVWF  x4F
1A7A2:  BCF    FD8.1
1A7A4:  CLRF   x73
1A7A6:  CLRF   x72
1A7A8:  MOVWF  x71
1A7AA:  MOVFF  01,A70
1A7AE:  CLRF   x77
1A7B0:  CLRF   x76
1A7B2:  CLRF   x75
1A7B4:  MOVLW  03
1A7B6:  MOVWF  x74
1A7B8:  MOVLB  0
1A7BA:  CALL   6858
1A7BE:  MOVFF  03,37B
1A7C2:  MOVFF  02,37A
1A7C6:  MOVFF  01,379
1A7CA:  MOVFF  00,378
.................... 	 		}
.................... 		tensao_tri = (word)(aux_l3);
1A7CE:  MOVFF  379,28F
1A7D2:  MOVFF  378,28E
.................... 		if (modo_funca == 1)
1A7D6:  MOVLB  4
1A7D8:  DECFSZ xA7,W
1A7DA:  BRA    1AA6C
.................... 			{
.................... 			soma_pot_ati = (int32)(pot_ativa_r +  pot_ativa_s + pot_ativa_t);
1A7DC:  MOVLB  2
1A7DE:  MOVF   xDC,W
1A7E0:  ADDWF  x58,W
1A7E2:  MOVLB  A
1A7E4:  MOVWF  x4E
1A7E6:  MOVLB  2
1A7E8:  MOVF   xDD,W
1A7EA:  ADDWFC x59,W
1A7EC:  MOVLB  A
1A7EE:  MOVWF  x4F
1A7F0:  MOVLB  3
1A7F2:  MOVF   x33,W
1A7F4:  MOVLB  A
1A7F6:  ADDWF  x4E,W
1A7F8:  MOVWF  01
1A7FA:  MOVLB  3
1A7FC:  MOVF   x34,W
1A7FE:  MOVLB  A
1A800:  ADDWFC x4F,W
1A802:  MOVFF  01,3F6
1A806:  MOVLB  3
1A808:  MOVWF  xF7
1A80A:  CLRF   xF8
1A80C:  CLRF   xF9
.................... 			soma_pot_reat = (int32)(pot_reativa_r + pot_reativa_s + pot_reativa_t);
1A80E:  MOVLB  2
1A810:  MOVF   xE0,W
1A812:  ADDWF  x5C,W
1A814:  MOVLB  A
1A816:  MOVWF  x4E
1A818:  MOVLB  2
1A81A:  MOVF   xE1,W
1A81C:  ADDWFC x5D,W
1A81E:  MOVLB  A
1A820:  MOVWF  x4F
1A822:  MOVLB  3
1A824:  MOVF   x37,W
1A826:  MOVLB  A
1A828:  ADDWF  x4E,W
1A82A:  MOVWF  01
1A82C:  MOVLB  3
1A82E:  MOVF   x38,W
1A830:  MOVLB  A
1A832:  ADDWFC x4F,W
1A834:  MOVFF  01,3FA
1A838:  MOVLB  3
1A83A:  MOVWF  xFB
1A83C:  CLRF   xFC
1A83E:  CLRF   xFD
.................... 			soma_pot_ati = (int32)(soma_pot_ati * soma_pot_ati);
1A840:  MOVFF  3F9,A75
1A844:  MOVFF  3F8,A74
1A848:  MOVFF  3F7,A73
1A84C:  MOVFF  3F6,A72
1A850:  MOVFF  3F9,A79
1A854:  MOVFF  3F8,A78
1A858:  MOVFF  3F7,A77
1A85C:  MOVFF  3F6,A76
1A860:  MOVLB  0
1A862:  CALL   67FC
1A866:  MOVFF  03,3F9
1A86A:  MOVFF  02,3F8
1A86E:  MOVFF  01,3F7
1A872:  MOVFF  00,3F6
.................... 			soma_pot_reat = (int32)(soma_pot_reat * soma_pot_reat);
1A876:  MOVFF  3FD,A75
1A87A:  MOVFF  3FC,A74
1A87E:  MOVFF  3FB,A73
1A882:  MOVFF  3FA,A72
1A886:  MOVFF  3FD,A79
1A88A:  MOVFF  3FC,A78
1A88E:  MOVFF  3FB,A77
1A892:  MOVFF  3FA,A76
1A896:  CALL   67FC
1A89A:  MOVFF  03,3FD
1A89E:  MOVFF  02,3FC
1A8A2:  MOVFF  01,3FB
1A8A6:  MOVFF  00,3FA
.................... 			pot_apa_tri = (int32)(sqrtx((float)(soma_pot_ati + soma_pot_reat))); 	 
1A8AA:  MOVLB  3
1A8AC:  MOVF   xFA,W
1A8AE:  ADDWF  xF6,W
1A8B0:  MOVWF  00
1A8B2:  MOVF   xFB,W
1A8B4:  ADDWFC xF7,W
1A8B6:  MOVWF  01
1A8B8:  MOVF   xFC,W
1A8BA:  ADDWFC xF8,W
1A8BC:  MOVWF  02
1A8BE:  MOVF   xFD,W
1A8C0:  ADDWFC xF9,W
1A8C2:  MOVWF  03
1A8C4:  MOVFF  FE8,A7C
1A8C8:  MOVFF  02,A7B
1A8CC:  MOVFF  01,A7A
1A8D0:  MOVFF  00,A79
1A8D4:  MOVLB  0
1A8D6:  CALL   5438
1A8DA:  MOVFF  03,A51
1A8DE:  MOVFF  02,A50
1A8E2:  MOVFF  01,A4F
1A8E6:  MOVFF  00,A4E
1A8EA:  MOVFF  03,A75
1A8EE:  MOVFF  02,A74
1A8F2:  MOVFF  01,A73
1A8F6:  MOVFF  00,A72
1A8FA:  CALL   158EC
1A8FE:  MOVFF  03,A7C
1A902:  MOVFF  02,A7B
1A906:  MOVFF  01,A7A
1A90A:  MOVFF  00,A79
1A90E:  CALL   5470
1A912:  MOVFF  03,401
1A916:  MOVFF  02,400
1A91A:  MOVFF  01,3FF
1A91E:  MOVFF  00,3FE
.................... 			pot_apa_tri = (int32)((pot_apa_tri * 1000) << 4); 	 
1A922:  MOVFF  401,A75
1A926:  MOVFF  400,A74
1A92A:  MOVFF  3FF,A73
1A92E:  MOVFF  3FE,A72
1A932:  MOVLB  A
1A934:  CLRF   x79
1A936:  CLRF   x78
1A938:  MOVLW  03
1A93A:  MOVWF  x77
1A93C:  MOVLW  E8
1A93E:  MOVWF  x76
1A940:  MOVLB  0
1A942:  CALL   67FC
1A946:  MOVFF  03,A51
1A94A:  MOVFF  02,A50
1A94E:  MOVFF  01,A4F
1A952:  MOVFF  00,A4E
1A956:  MOVLB  A
1A958:  RLCF   00,W
1A95A:  MOVWF  00
1A95C:  RLCF   01,W
1A95E:  MOVWF  01
1A960:  RLCF   02,W
1A962:  MOVWF  02
1A964:  RLCF   03,W
1A966:  MOVWF  03
1A968:  RLCF   00,F
1A96A:  RLCF   01,F
1A96C:  RLCF   02,F
1A96E:  RLCF   03,F
1A970:  RLCF   00,F
1A972:  RLCF   01,F
1A974:  RLCF   02,F
1A976:  RLCF   03,F
1A978:  RLCF   00,F
1A97A:  RLCF   01,F
1A97C:  RLCF   02,F
1A97E:  RLCF   03,F
1A980:  MOVLW  F0
1A982:  ANDWF  00,F
1A984:  MOVFF  03,401
1A988:  MOVFF  02,400
1A98C:  MOVFF  01,3FF
1A990:  MOVFF  00,3FE
.................... 		
.................... 		 	aux_l3 = (int32)(aux_l3 * 1.7320508);		/* aux_l3 já tem tensao_tri */
1A994:  MOVFF  37B,A7C
1A998:  MOVFF  37A,A7B
1A99C:  MOVFF  379,A7A
1A9A0:  MOVFF  378,A79
1A9A4:  MOVLB  0
1A9A6:  CALL   5438
1A9AA:  MOVFF  03,A80
1A9AE:  MOVFF  02,A7F
1A9B2:  MOVFF  01,A7E
1A9B6:  MOVFF  00,A7D
1A9BA:  MOVLW  D7
1A9BC:  MOVLB  A
1A9BE:  MOVWF  x84
1A9C0:  MOVLW  B3
1A9C2:  MOVWF  x83
1A9C4:  MOVLW  5D
1A9C6:  MOVWF  x82
1A9C8:  MOVLW  7F
1A9CA:  MOVWF  x81
1A9CC:  MOVLB  0
1A9CE:  CALL   5306
1A9D2:  MOVFF  03,A7C
1A9D6:  MOVFF  02,A7B
1A9DA:  MOVFF  01,A7A
1A9DE:  MOVFF  00,A79
1A9E2:  CALL   5470
1A9E6:  MOVFF  03,37B
1A9EA:  MOVFF  02,37A
1A9EE:  MOVFF  01,379
1A9F2:  MOVFF  00,378
.................... 		 	aux_l3 = (int32)(aux_l3 * valor_tp);		/* aux_l3 já tem tensao_tri */
1A9F6:  MOVFF  37B,A75
1A9FA:  MOVFF  37A,A74
1A9FE:  MOVFF  379,A73
1AA02:  MOVFF  378,A72
1AA06:  MOVLB  A
1AA08:  CLRF   x79
1AA0A:  CLRF   x78
1AA0C:  MOVFF  4C2,A77
1AA10:  MOVFF  4C1,A76
1AA14:  MOVLB  0
1AA16:  CALL   67FC
1AA1A:  MOVFF  03,37B
1AA1E:  MOVFF  02,37A
1AA22:  MOVFF  01,379
1AA26:  MOVFF  00,378
.................... 		 	aux_l3 = (int32)(pot_apa_tri / aux_l3);
1AA2A:  BCF    FD8.1
1AA2C:  MOVFF  401,A73
1AA30:  MOVFF  400,A72
1AA34:  MOVFF  3FF,A71
1AA38:  MOVFF  3FE,A70
1AA3C:  MOVFF  37B,A77
1AA40:  MOVFF  37A,A76
1AA44:  MOVFF  379,A75
1AA48:  MOVFF  378,A74
1AA4C:  CALL   6858
1AA50:  MOVFF  03,37B
1AA54:  MOVFF  02,37A
1AA58:  MOVFF  01,379
1AA5C:  MOVFF  00,378
.................... 		 	
.................... 		 	corrente_tri = (word)(aux_l3);
1AA60:  MOVFF  379,291
1AA64:  MOVFF  378,290
.................... 			}
1AA68:  BRA    1AA72
1AA6A:  MOVLB  4
.................... 		else
.................... 			{
.................... 		 	corrente_tri = 0;
1AA6C:  MOVLB  2
1AA6E:  CLRF   x91
1AA70:  CLRF   x90
1AA72:  MOVLB  0
.................... 			}
.................... 	#endif
1AA74:  GOTO   1AB48 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void calculo_trifasico(void)
.................... {
.................... 	#if (st8500c  == true)
.................... 		#if (com_tc == true)
.................... 			float aux_f1;
.................... 		#endif
.................... 	#endif
.................... 	
.................... // calculo do fator de potencia total 
.................... 	#if (st8500c == false)
.................... 		calc_fator_total();
.................... 	#else
.................... 		#if (com_tc == true)
.................... 		
.................... 			calc_fator_total();
1AA78:  GOTO   19B9E
.................... 		
.................... 			aux_l1 = pot_ativa_r;
1AA7C:  MOVLB  3
1AA7E:  CLRF   x73
1AA80:  CLRF   x72
1AA82:  MOVFF  259,371
1AA86:  MOVFF  258,370
.................... 			aux_l1 += pot_ativa_s;
1AA8A:  MOVLB  2
1AA8C:  MOVF   xDC,W
1AA8E:  MOVLB  3
1AA90:  ADDWF  x70,F
1AA92:  MOVLB  2
1AA94:  MOVF   xDD,W
1AA96:  MOVLB  3
1AA98:  ADDWFC x71,F
1AA9A:  MOVLW  00
1AA9C:  ADDWFC x72,F
1AA9E:  ADDWFC x73,F
.................... 			aux_l1 += pot_ativa_t;
1AAA0:  MOVF   x33,W
1AAA2:  ADDWF  x70,F
1AAA4:  MOVF   x34,W
1AAA6:  ADDWFC x71,F
1AAA8:  MOVLW  00
1AAAA:  ADDWFC x72,F
1AAAC:  ADDWFC x73,F
.................... 			pot_ativa_tot = aux_l1;
1AAAE:  MOVFF  373,245
1AAB2:  MOVFF  372,244
1AAB6:  MOVFF  371,243
1AABA:  MOVFF  370,242
.................... 
.................... 			aux_l1 = pot_reativa_r;
1AABE:  CLRF   x73
1AAC0:  CLRF   x72
1AAC2:  MOVFF  25D,371
1AAC6:  MOVFF  25C,370
.................... 			aux_l1 += pot_reativa_s;
1AACA:  MOVLB  2
1AACC:  MOVF   xE0,W
1AACE:  MOVLB  3
1AAD0:  ADDWF  x70,F
1AAD2:  MOVLB  2
1AAD4:  MOVF   xE1,W
1AAD6:  MOVLB  3
1AAD8:  ADDWFC x71,F
1AADA:  MOVLW  00
1AADC:  ADDWFC x72,F
1AADE:  ADDWFC x73,F
.................... 			aux_l1 += pot_reativa_t;
1AAE0:  MOVF   x37,W
1AAE2:  ADDWF  x70,F
1AAE4:  MOVF   x38,W
1AAE6:  ADDWFC x71,F
1AAE8:  MOVLW  00
1AAEA:  ADDWFC x72,F
1AAEC:  ADDWFC x73,F
.................... 			pot_reativa_tot = aux_l1;
1AAEE:  MOVFF  373,249
1AAF2:  MOVFF  372,248
1AAF6:  MOVFF  371,247
1AAFA:  MOVFF  370,246
.................... 
.................... 			aux_l1 = pot_aparente_r;
1AAFE:  CLRF   x73
1AB00:  CLRF   x72
1AB02:  MOVFF  25B,371
1AB06:  MOVFF  25A,370
.................... 			aux_l1 += pot_aparente_s;
1AB0A:  MOVLB  2
1AB0C:  MOVF   xDE,W
1AB0E:  MOVLB  3
1AB10:  ADDWF  x70,F
1AB12:  MOVLB  2
1AB14:  MOVF   xDF,W
1AB16:  MOVLB  3
1AB18:  ADDWFC x71,F
1AB1A:  MOVLW  00
1AB1C:  ADDWFC x72,F
1AB1E:  ADDWFC x73,F
.................... 			aux_l1 += pot_aparente_t;
1AB20:  MOVF   x35,W
1AB22:  ADDWF  x70,F
1AB24:  MOVF   x36,W
1AB26:  ADDWFC x71,F
1AB28:  MOVLW  00
1AB2A:  ADDWFC x72,F
1AB2C:  ADDWFC x73,F
.................... 			pot_aparente_tot = aux_l1;
1AB2E:  MOVFF  373,24D
1AB32:  MOVFF  372,24C
1AB36:  MOVFF  371,24B
1AB3A:  MOVFF  370,24A
.................... 			
.................... 		#endif		
.................... 	#endif
.................... 
.................... 	calc_tensao_ff();
1AB3E:  MOVLB  0
1AB40:  GOTO   19D54
.................... 
.................... 	calc_tensao_alta();
1AB44:  BRA    1A382
.................... 
.................... 	calc_tensao_corrente_tri();
1AB46:  BRA    1A6AE
1AB48:  GOTO   1C062 (RETURN)
.................... 	
.................... 	
.................... }
.................... 
.................... 
.................... 
.................... #include "kvar_req.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: st_CALC                                                        *
.................... ; Funcao: MODULO ROTINAS DE CALCULOS   									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... /* calculo do kvar requerido */	    
.................... /* pot_req_x = potencia_reativa - srq(((potencia_ativa / setpoint) ^2)) - ( potencia_ativa ^ 2))  */
.................... 
.................... #if (monofasico == false)
.................... 	void kvar_req_tri(char);
.................... #endif
.................... 
.................... 
.................... void kvar_requerido(char fase)
.................... {
.................... /* pot_req_x = potencia_reativa - srq(((potencia_ativa / setpoint) ^2)) - ( potencia_ativa ^ 2))  */
.................... 	#if (monofasico == true)
.................... 		word aux_w4;
.................... 		#if (portatil == false)
.................... 			if (cor_min == true)
.................... 				{
.................... 				return;
.................... 				}
.................... 		#endif
.................... 		pot_exec_r = 0;
.................... 		pot_req_r = 0;
.................... 		if (com_des_fp_ind_cap < 100)
.................... 			{
.................... 			if (pot_reativa_r == 0)
.................... 				{
.................... 				return;
.................... 				}
.................... 			}
.................... 		if (fator_pot_r > 0 )
.................... 			{
.................... 			aux_l3 = (word)(fator_pot_r);
.................... 			aux_l3 = (aux_l3 * 100);
.................... 			aux_w4 = (word)(aux_l3 / 1024);
.................... 			#if (controlador == true)
.................... 				if (com_des_fp_ind_cap >= 100)	// > 100 indica que é desliganento em indutivo
.................... 					{
.................... 					if (fator_pot_r == 1024)
.................... 						{
.................... 						aux_w4 = 100;
.................... 						goto calcula_excedente_10;
.................... 						}
.................... 					else
.................... 						{
.................... 						pot_exec_r = pot_reativa_r;
.................... 						return;
.................... 						}
.................... 					}
.................... 				else
.................... 					{ // desligamento entre 1.00 e 0.80 capacitivo
.................... 					if (aux_w4 >= com_des_fp_ind_cap)
.................... 						{
.................... 						return;
.................... 						}
.................... 					}
.................... 			#else
.................... 				if (aux_w4 >= set_point)
.................... 					{
.................... 					return;
.................... 					}
.................... 			#endif
.................... 			
.................... 			}
.................... 		else
.................... 			{
.................... // FP INDUTIVO			
.................... 			aux_l3 = (word)(fator_pot_r * (-1));
.................... 			aux_l3 = (aux_l3 * 100);
.................... 			aux_w4 = (word)(aux_l3 / 1024);
.................... calcula_excedente_10:	
.................... 			aux_set_point = 100 - (com_des_fp_ind_cap - 100);
.................... // Aauxw4 com o valor do fator de potencia X 100)
.................... 			if (aux_w4 >= set_point)
.................... 				{
.................... // maior ou igual a setpoint, então vamos ver se temos o excedente					
.................... 				#if (controlador == true)
.................... // verifica se desçigamento é dentro de FP indutivo
.................... 					if (com_des_fp_ind_cap >= 100)	// > 100 indica que é desliganento em indutivo
.................... 						{
.................... 						if (aux_w4 <= aux_set_point)
.................... 							{					
.................... /// menor que o set-point de desligamento, entã dentro da histerese. excedente e requerido = 0								
.................... 							return;			// dentro da hsiterese
.................... 							}
.................... 						else
.................... 							{
.................... // fator de potencia acima do set-point de desligamento, calcula o excedente	
.................... 							aux_l1 = pot_ativa_r;
.................... 							aux_l3 = pot_reativa_r;
.................... 							aux_l2 = aux_l1;
.................... 						    aux_l1 = (aux_l1 * 100);
.................... 						    aux_l1 = aux_l1 / com_des_fp_ind_cap;	
.................... 						    aux_l1 = aux_l1 * aux_l1;
....................     						aux_l2 = aux_l2 * aux_l2;
....................     						aux_l1 = (int32)(sqrtx(aux_l1 - aux_l2));
.................... 							aux_w1 = (word)((aux_l3 - aux_l1));	
.................... 							if (bit_test(aux_w1, 15) == true)
.................... 								{
.................... 								aux_w1 = ~aux_w1 + 1;
.................... 								}
.................... 							pot_exec_r = aux_w1;
.................... 							return;	
.................... 							}
.................... 						}
.................... 				#else
.................... 					return;
.................... 				#endif
.................... 				}
.................... 			}
.................... 		
.................... 		aux_l1 = pot_ativa_r;
.................... 		aux_l3 = pot_reativa_r;
.................... 		aux_l2 = aux_l1;
.................... 	    aux_l1 = (aux_l1 * 100);
.................... 		
.................... 		if (fator_pot_r > 0 )
.................... 			{
.................... 			#if (controlador == true)
.................... 			    aux_l1 = aux_l1 / com_des_fp_ind_cap;	
.................... 			#else
.................... 			    aux_l1 = aux_l1 / set_point;	
.................... 			#endif
.................... 			
.................... 			}
.................... 		else
.................... 			{
.................... 			#if (com_rep == true)
.................... 				if (modo_rep == 1)
.................... 					{
.................... 					if (aux_w4 >= set_point)
.................... 						{
.................... 					    aux_l1 = aux_l1 / 100;	
.................... 						}
.................... 					else
.................... 						{
.................... 					    aux_l1 = aux_l1 / set_point;	
.................... 						}
.................... 					}
.................... 				else
.................... 					{
.................... 				    aux_l1 = aux_l1 / set_point;	
.................... 				    }
.................... 			#else
.................... 			    aux_l1 = aux_l1 / set_point;	
.................... 		    #endif
.................... 		    }
.................... 	    aux_l1 = aux_l1 * aux_l1;
.................... 	    aux_l2 = aux_l2 * aux_l2;
.................... 	    aux_l1 = (int32)(sqrtx(aux_l1 - aux_l2));
.................... 	
.................... 		aux_w1 = (word)((aux_l3 - aux_l1));	
.................... 
.................... 		if (valor_tp != 1)
.................... 			{
.................... 			aux_w1 = (int16)(aux_w1 * valor_tp);
.................... 			}
.................... 		
.................... 		if (fator_pot_r > 0 )
.................... 			{
.................... 			pot_exec_r = aux_w1;
.................... 			}
.................... 		else
.................... 			{
.................... 			#if (com_rep == true)
.................... 				if (modo_rep == 1)
.................... 					{
.................... 					if (aux_w4 >= set_point)
.................... 						{
.................... 						pot_exec_r = aux_w1;
.................... 						}
.................... 					else
.................... 						{
.................... 						pot_req_r = aux_w1;
.................... 						}
.................... 					}
.................... 				else
.................... 					{
.................... 					pot_req_r = aux_w1;
.................... 					}
.................... 			#else
.................... 				pot_req_r = aux_w1;
.................... 			#endif
.................... 			}
.................... 
.................... 	#else
.................... 		kvar_req_tri(fase);
*
19B96:  MOVFF  A4A,A4B
19B9A:  BRA    198CA
.................... 	#endif	
19B9C:  RETURN 0
.................... 		
.................... }
.................... 
.................... 
.................... 
.................... #if (monofasico == false)
.................... 	void kvar_req_tri(char fase)
.................... 	{
.................... 		#if (st8500c == true)
.................... 			word pot_ativa;
.................... 			word pot_reativa;
.................... 			word pot_exec;
.................... 			word pot_req;
.................... 			word aux_w4;
.................... 			signed word fator_pot_fase;
.................... 			pot_exec = 0;
*
198CA:  MOVLB  A
198CC:  CLRF   x51
198CE:  CLRF   x50
.................... 			pot_req = 0;
198D0:  CLRF   x53
198D2:  CLRF   x52
.................... 			pot_reativa = pot_reativa_tot;
198D4:  MOVFF  247,A4F
198D8:  MOVFF  246,A4E
.................... 			pot_ativa = pot_ativa_tot;
198DC:  MOVFF  243,A4D
198E0:  MOVFF  242,A4C
.................... 			fator_pot_fase = fator_pot;
198E4:  MOVFF  293,A57
198E8:  MOVFF  292,A56
.................... 			
.................... 			if (pot_reativa == 0)
198EC:  MOVF   x4E,F
198EE:  BNZ   198F6
198F0:  MOVF   x4F,F
198F2:  BNZ   198F6
.................... 				{
.................... 				goto kvar_req_tri_retorna;
198F4:  BRA    19B26
.................... 				}
.................... 			if (fator_pot_fase > 0)
198F6:  BTFSC  x57.7
198F8:  BRA    1990E
198FA:  MOVF   x57,F
198FC:  BNZ   19904
198FE:  MOVF   x56,W
19900:  SUBLW  00
19902:  BC    1990E
.................... 				{
.................... 				#if (com_tc == true)
.................... 					pot_exec = pot_reativa;
19904:  MOVFF  A4F,A51
19908:  MOVFF  A4E,A50
.................... 				#else
.................... 					pot_exec = pot_reativa * 32;
.................... 				#endif
.................... 				goto kvar_req_tri_retorna;
1990C:  BRA    19B26
.................... 				}
.................... 			aux_l3 = (word)(fator_pot_fase * (-1));
1990E:  MOVFF  A57,A6F
19912:  MOVFF  A56,A6E
19916:  SETF   x71
19918:  SETF   x70
1991A:  MOVLB  0
1991C:  CALL   FA44
19920:  MOVFF  02,379
19924:  MOVLB  3
19926:  MOVFF  01,378
1992A:  CLRF   x7A
1992C:  CLRF   x7B
.................... 			aux_l3 = (aux_l3 * 100);
1992E:  MOVFF  37B,A75
19932:  MOVFF  37A,A74
19936:  MOVFF  379,A73
1993A:  MOVFF  378,A72
1993E:  MOVLB  A
19940:  CLRF   x79
19942:  CLRF   x78
19944:  CLRF   x77
19946:  MOVLW  64
19948:  MOVWF  x76
1994A:  MOVLB  0
1994C:  CALL   67FC
19950:  MOVFF  03,37B
19954:  MOVFF  02,37A
19958:  MOVFF  01,379
1995C:  MOVFF  00,378
.................... 			aux_w4 = (word)(aux_l3 / 1024);
19960:  MOVLB  3
19962:  RRCF   x7B,W
19964:  MOVWF  02
19966:  RRCF   x7A,W
19968:  MOVWF  01
1996A:  RRCF   x79,W
1996C:  MOVWF  00
1996E:  RRCF   02,F
19970:  RRCF   01,F
19972:  RRCF   00,F
19974:  MOVLW  3F
19976:  ANDWF  02,F
19978:  MOVFF  01,A55
1997C:  MOVFF  00,A54
.................... 			if (aux_w4 >= 92)
19980:  MOVLB  A
19982:  MOVF   x55,F
19984:  BNZ   1998C
19986:  MOVF   x54,W
19988:  SUBLW  5B
1998A:  BC    1998E
.................... 				{
.................... 				goto kvar_req_tri_retorna;
1998C:  BRA    19B26
.................... 				}
.................... 		
.................... 			aux_l1 = pot_ativa;
1998E:  MOVLB  3
19990:  CLRF   x73
19992:  CLRF   x72
19994:  MOVFF  A4D,371
19998:  MOVFF  A4C,370
.................... 			aux_l3 = pot_reativa;
1999C:  CLRF   x7B
1999E:  CLRF   x7A
199A0:  MOVFF  A4F,379
199A4:  MOVFF  A4E,378
.................... 			aux_l2 = aux_l1;
199A8:  MOVFF  373,377
199AC:  MOVFF  372,376
199B0:  MOVFF  371,375
199B4:  MOVFF  370,374
.................... 		   	aux_l1 = (aux_l1 * 100);
199B8:  MOVFF  373,A75
199BC:  MOVFF  372,A74
199C0:  MOVFF  371,A73
199C4:  MOVFF  370,A72
199C8:  MOVLB  A
199CA:  CLRF   x79
199CC:  CLRF   x78
199CE:  CLRF   x77
199D0:  MOVLW  64
199D2:  MOVWF  x76
199D4:  MOVLB  0
199D6:  CALL   67FC
199DA:  MOVFF  03,373
199DE:  MOVFF  02,372
199E2:  MOVFF  01,371
199E6:  MOVFF  00,370
.................... 		
.................... 		    aux_l1 = aux_l1 / 92;	
199EA:  BCF    FD8.1
199EC:  MOVFF  373,A73
199F0:  MOVFF  372,A72
199F4:  MOVFF  371,A71
199F8:  MOVFF  370,A70
199FC:  MOVLB  A
199FE:  CLRF   x77
19A00:  CLRF   x76
19A02:  CLRF   x75
19A04:  MOVLW  5C
19A06:  MOVWF  x74
19A08:  MOVLB  0
19A0A:  CALL   6858
19A0E:  MOVFF  03,373
19A12:  MOVFF  02,372
19A16:  MOVFF  01,371
19A1A:  MOVFF  00,370
.................... 		   	aux_l1 = aux_l1 * aux_l1;
19A1E:  MOVFF  373,A75
19A22:  MOVFF  372,A74
19A26:  MOVFF  371,A73
19A2A:  MOVFF  370,A72
19A2E:  MOVFF  373,A79
19A32:  MOVFF  372,A78
19A36:  MOVFF  371,A77
19A3A:  MOVFF  370,A76
19A3E:  CALL   67FC
19A42:  MOVFF  03,373
19A46:  MOVFF  02,372
19A4A:  MOVFF  01,371
19A4E:  MOVFF  00,370
.................... 		   	aux_l2 = aux_l2 * aux_l2;
19A52:  MOVFF  377,A75
19A56:  MOVFF  376,A74
19A5A:  MOVFF  375,A73
19A5E:  MOVFF  374,A72
19A62:  MOVFF  377,A79
19A66:  MOVFF  376,A78
19A6A:  MOVFF  375,A77
19A6E:  MOVFF  374,A76
19A72:  CALL   67FC
19A76:  MOVFF  03,377
19A7A:  MOVFF  02,376
19A7E:  MOVFF  01,375
19A82:  MOVFF  00,374
.................... 		   	aux_l1 = (int32)(sqrtx(aux_l1 - aux_l2));
19A86:  MOVLB  3
19A88:  MOVF   x74,W
19A8A:  SUBWF  x70,W
19A8C:  MOVWF  00
19A8E:  MOVF   x75,W
19A90:  SUBWFB x71,W
19A92:  MOVWF  01
19A94:  MOVF   x76,W
19A96:  SUBWFB x72,W
19A98:  MOVWF  02
19A9A:  MOVF   x77,W
19A9C:  SUBWFB x73,W
19A9E:  MOVWF  03
19AA0:  MOVFF  FE8,A7C
19AA4:  MOVFF  02,A7B
19AA8:  MOVFF  01,A7A
19AAC:  MOVFF  00,A79
19AB0:  MOVLB  0
19AB2:  CALL   5438
19AB6:  MOVFF  03,A5B
19ABA:  MOVFF  02,A5A
19ABE:  MOVFF  01,A59
19AC2:  MOVFF  00,A58
19AC6:  MOVFF  03,A75
19ACA:  MOVFF  02,A74
19ACE:  MOVFF  01,A73
19AD2:  MOVFF  00,A72
19AD6:  CALL   158EC
19ADA:  MOVFF  03,A7C
19ADE:  MOVFF  02,A7B
19AE2:  MOVFF  01,A7A
19AE6:  MOVFF  00,A79
19AEA:  CALL   5470
19AEE:  MOVFF  03,373
19AF2:  MOVFF  02,372
19AF6:  MOVFF  01,371
19AFA:  MOVFF  00,370
.................... 			
.................... 			aux_w1 = (word)((aux_l3 - aux_l1));	
19AFE:  MOVLB  3
19B00:  MOVF   x70,W
19B02:  SUBWF  x78,W
19B04:  MOVWF  00
19B06:  MOVF   x71,W
19B08:  SUBWFB x79,W
19B0A:  MOVWF  01
19B0C:  MOVF   x72,W
19B0E:  SUBWFB x7A,W
19B10:  MOVF   x73,W
19B12:  SUBWFB x7B,W
19B14:  MOVFF  01,363
19B18:  MOVFF  00,362
.................... 			#if (com_tc == true)
.................... 				pot_req = aux_w1;
19B1C:  MOVFF  363,A53
19B20:  MOVFF  362,A52
19B24:  MOVLB  A
.................... 			#else
.................... 				pot_req = aux_w1 * 32;
.................... 			#endif
.................... 					
.................... 		
.................... 		#else
.................... 			word pot_ativa;
.................... 			word pot_reativa;
.................... 			word pot_exec;
.................... 			word pot_req;
.................... 			word aux_w4;
.................... 			signed word fator_pot_fase;
.................... 			
.................... 			#if (controlador == true)
.................... 				if (cor_min == true)
.................... 					{
.................... 					return;
.................... 					}
.................... 			#endif
.................... 			pot_exec = 0;
.................... 			pot_req = 0;
.................... 			#if (com_rep == true)
.................... 				#if (st8300c == true)
.................... 					if (modo_rep == true)
.................... 						{
.................... 						if (fase =='R')
.................... 							{
.................... 							pot_reativa = pot_reativa_r * 3;
.................... 							pot_ativa = pot_ativa_r * 3;
.................... 							fator_pot_fase = fator_pot_r;
.................... 							}
.................... 						if ((fase == 'S') || (fase == 'T'))
.................... 							{
.................... 							pot_exec = pot_exec_r * 3;
.................... 							pot_req = pot_req_r * 3;
.................... 							goto kvar_req_tri_retorna;
.................... 							}	
.................... 						}
.................... 					else
.................... 						{
.................... 						if (fase =='R')
.................... 							{
.................... 							pot_reativa = pot_reativa_r;
.................... 							pot_ativa = pot_ativa_r;
.................... 							fator_pot_fase = fator_pot_r;
.................... 							}
.................... 						else if (fase =='S')
.................... 							{
.................... 							pot_reativa = pot_reativa_s;
.................... 							pot_ativa = pot_ativa_s;
.................... 							fator_pot_fase = fator_pot_s;
.................... 							}
.................... 						else
.................... 							{
.................... 							pot_reativa = pot_reativa_t;
.................... 							pot_ativa = pot_ativa_t;
.................... 							fator_pot_fase = fator_pot_t;
.................... 							}
.................... 						}
.................... 				#endif
.................... 			#else
.................... 				if (fase =='R')
.................... 					{
.................... 					pot_reativa = pot_reativa_r;
.................... 					pot_ativa = pot_ativa_r;
.................... 					fator_pot_fase = fator_pot_r;
.................... 					}
.................... 				else if (fase =='S')
.................... 					{
.................... 					pot_reativa = pot_reativa_s;
.................... 					pot_ativa = pot_ativa_s;
.................... 					fator_pot_fase = fator_pot_s;
.................... 					}
.................... 				else
.................... 					{
.................... 					pot_reativa = pot_reativa_t;
.................... 					pot_ativa = pot_ativa_t;
.................... 					fator_pot_fase = fator_pot_t;
.................... 					}
.................... 			#endif
.................... 			
.................... 				if (pot_reativa == 0)
.................... 					{
.................... 					#if (controlador == true)
.................... 						if (com_des_fp_ind_cap < 100)
.................... 							{
.................... 							goto kvar_req_tri_retorna;
.................... 							}
.................... 					#else
.................... 						goto kvar_req_tri_retorna;
.................... 					#endif
.................... 				}
.................... 		
.................... 			if (fator_pot_fase > 0 )
.................... 				{
.................... 				aux_l3 = (word)(fator_pot_fase);
.................... 				aux_l3 = (aux_l3 * 100);
.................... 				aux_w4 = (word)(aux_l3 / 1024);
.................... 				#if (controlador == true)
.................... 					if (com_des_fp_ind_cap >= 100)
.................... 						{
.................... 						if (fator_pot_r == 1024)
.................... 							{
.................... 							aux_w4 = 100;
.................... 							goto calcula_excedente_10;
.................... 							}
.................... 						else
.................... 							{
.................... 							pot_exec = pot_reativa;
.................... 							goto kvar_req_tri_retorna;
.................... 							}
.................... 						}
.................... 					else
.................... 						{
.................... 						if (aux_w4 >= com_des_fp_ind_cap)
.................... 							{
.................... 							goto kvar_req_tri_retorna;
.................... 							}
.................... 						}
.................... 				#else
.................... 					if (aux_w4 >= set_point)
.................... 						{
.................... 						goto kvar_req_tri_retorna;
.................... 						}
.................... 				#endif
.................... 				}
.................... 			else
.................... 				{
.................... 				aux_l3 = (word)(fator_pot_fase * (-1));
.................... 				aux_l3 = (aux_l3 * 100);
.................... 				aux_w4 = (word)(aux_l3 / 1024);
.................... 			calcula_excedente_10:
.................... 				#if (controlador == true)
.................... 					aux_set_point = 100 - (com_des_fp_ind_cap - 100);
.................... 				#endif
.................... 				if (aux_w4 >= set_point)
.................... 					{
.................... 					#if (controlador == true)
.................... 						if (com_des_fp_ind_cap >= 100)
.................... 							{
.................... 							if (aux_w4 <= aux_set_point)
.................... 								{
.................... 								goto kvar_req_tri_retorna;
.................... 								}
.................... 							else
.................... 								{
.................... 								aux_l1 = pot_ativa;
.................... 								aux_l3 = pot_reativa;
.................... 								aux_l2 = aux_l1;
.................... 		   						aux_l1 = (aux_l1 * 100);
.................... 		   						aux_l1 = aux_l1 / com_des_fp_ind_cap;
.................... 		   						aux_l1 = aux_l1 * aux_l1;
.................... 		   						aux_l2 = aux_l2 * aux_l2;
.................... 		   						aux_l1 = (int32)(sqrtx(aux_l1 - aux_l2));
.................... 		   						aux_w1 = (word)((aux_l3 - aux_l1));
.................... 		   						if (bit_test(aux_w1, 15) == true)
.................... 		   							{
.................... 			   						aux_w1 = ~aux_w1 + 1;
.................... 			   						}
.................... 			   					pot_exec = aux_w1;
.................... 								goto kvar_req_tri_retorna;
.................... 								}
.................... 							}
.................... 					#else
.................... 						goto kvar_req_tri_retorna;
.................... 					#endif
.................... 					}
.................... 				}
.................... 		
.................... 			aux_l1 = pot_ativa;
.................... 			aux_l3 = pot_reativa;
.................... 			aux_l2 = aux_l1;
.................... 		   	aux_l1 = (aux_l1 * 100);
.................... 		
.................... 			#if (controlador == true)
.................... 				if (fator_pot_fase > 0)
.................... 					{
.................... 				    aux_l1 = aux_l1 / com_des_fp_ind_cap;	
.................... 					}
.................... 				else
.................... 					{
.................... 					#if (com_rep == true)
.................... 						if (modo_rep == 1)
.................... 							{
.................... 							if (aux_w4 >= set_point)
.................... 								{
.................... 								aux_l1 = aux_l1 / 100;
.................... 								}
.................... 							else
.................... 								{
.................... 							    aux_l1 = aux_l1 / set_point;	
.................... 							    }
.................... 							}
.................... 						else
.................... 							{
.................... 						    aux_l1 = aux_l1 / set_point;	
.................... 							}
.................... 					#else
.................... 					    aux_l1 = aux_l1 / set_point;	
.................... 					#endif
.................... 					}
.................... 			#else	
.................... 			    aux_l1 = aux_l1 / set_point;	
.................... 			#endif
.................... 		   	aux_l1 = aux_l1 * aux_l1;
.................... 		   	aux_l2 = aux_l2 * aux_l2;
.................... 		   	aux_l1 = (int32)(sqrtx(aux_l1 - aux_l2));
.................... 			
.................... 			aux_w1 = (word)((aux_l3 - aux_l1));	
.................... 		
.................... 			if (valor_tp != 1)
.................... 				{
.................... 				aux_w1 = (int16)(aux_w1 * valor_tp);
.................... 				}
.................... 		
.................... 			
.................... 			if (fator_pot_fase > 0)
.................... 				{
.................... 				pot_exec = aux_w1;
.................... 				}
.................... 			else
.................... 				{
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						if (aux_w4 >= set_point)
.................... 							{
.................... 							pot_exec = aux_w1;
.................... 							}
.................... 						else
.................... 							{
.................... 							pot_req = aux_w1;
.................... 						    }
.................... 						}
.................... 					else
.................... 						{
.................... 						pot_req = aux_w1;
.................... 						}
.................... 				#else
.................... 					pot_req = aux_w1;
.................... 				#endif
.................... 				}
.................... 					
.................... 		
.................... 		#endif
.................... 				
.................... kvar_req_tri_retorna:
.................... 		#if (st8500c == true)
.................... 			{
.................... 			pot_exec_r = pot_exec;
19B26:  MOVFF  A51,287
19B2A:  MOVFF  A50,286
.................... 			pot_req_r = pot_req;
19B2E:  MOVFF  A53,289
19B32:  MOVFF  A52,288
.................... 			pot_exec_r = pot_exec_r / 3;
19B36:  MOVFF  287,A6C
19B3A:  MOVFF  286,A6B
19B3E:  MOVLB  A
19B40:  CLRF   x6E
19B42:  MOVLW  03
19B44:  MOVWF  x6D
19B46:  MOVLB  0
19B48:  CALL   4ECC
19B4C:  MOVFF  02,287
19B50:  MOVFF  01,286
.................... 			pot_req_r = pot_req_r / 3;
19B54:  MOVFF  289,A6C
19B58:  MOVFF  288,A6B
19B5C:  MOVLB  A
19B5E:  CLRF   x6E
19B60:  MOVLW  03
19B62:  MOVWF  x6D
19B64:  MOVLB  0
19B66:  CALL   4ECC
19B6A:  MOVFF  02,289
19B6E:  MOVFF  01,288
.................... 			pot_exec_s = pot_exec_r;
19B72:  MOVFF  287,2E9
19B76:  MOVFF  286,2E8
.................... 			pot_req_s = pot_req_r;
19B7A:  MOVFF  289,2EB
19B7E:  MOVFF  288,2EA
.................... 			pot_exec_t = pot_exec_r;
19B82:  MOVFF  287,340
19B86:  MOVFF  286,33F
.................... 			pot_req_t = pot_req_r;
19B8A:  MOVFF  289,342
19B8E:  MOVFF  288,341
.................... 			}
.................... 		#else
19B92:  GOTO   19B9C (RETURN)
.................... 			#if (com_rep == true)
.................... 				#if (st8300c == true)
.................... 					if (modo_rep == true)
.................... 						{
.................... 						pot_exec_r = pot_exec;
.................... 						pot_req_r = pot_req;
.................... 						pot_exec_r = pot_exec_r / 3;
.................... 						pot_req_r = pot_req_r / 3;
.................... 						pot_exec_s = pot_exec_r;
.................... 						pot_req_s = pot_req_r;
.................... 						pot_exec_t = pot_exec_r;
.................... 						pot_req_t = pot_req_r;
.................... 						}
.................... 					else
.................... 						{
.................... 						if (fase =='R')
.................... 							{
.................... 							pot_exec_r = pot_exec;
.................... 							pot_req_r = pot_req;
.................... 							}
.................... 						else if (fase =='S')
.................... 							{
.................... 							pot_exec_s = pot_exec;
.................... 							pot_req_s = pot_req;
.................... 							}
.................... 						else
.................... 							{
.................... 							pot_exec_t = pot_exec;
.................... 							pot_req_t = pot_req;
.................... 							}
.................... 						}
.................... 				#else
.................... 					if (fase =='R')
.................... 						{
.................... 						pot_exec_r = pot_exec;
.................... 						pot_req_r = pot_req;
.................... 						}
.................... 					else if (fase =='S')
.................... 						{
.................... 						pot_exec_s = pot_exec;
.................... 						pot_req_s = pot_req;
.................... 						}
.................... 					else
.................... 						{
.................... 						pot_exec_t = pot_exec;
.................... 						pot_req_t = pot_req;
.................... 						}
.................... 				#endif
.................... 			#else
.................... 				if (fase =='R')
.................... 					{
.................... 					pot_exec_r = pot_exec;
.................... 					pot_req_r = pot_req;
.................... 					}
.................... 				else if (fase =='S')
.................... 					{
.................... 					pot_exec_s = pot_exec;
.................... 					pot_req_s = pot_req;
.................... 					}
.................... 				else
.................... 					{
.................... 					pot_exec_t = pot_exec;
.................... 					pot_req_t = pot_req;
.................... 					}
.................... 			#endif
.................... 		#endif
.................... 	}
.................... #endif
.................... 
.................... ///  antigo agora sem uso
.................... /*
.................... void kvar_req_old(char fase)
.................... {
.................... 		if (fase =='R')
.................... 			{
.................... 			#if (controlador == true)
.................... 				if (cor_min == true)
.................... 					{
.................... 					return;
.................... 					}
.................... 			#endif
.................... 			pot_exec_r = 0;
.................... 			pot_req_r = 0;
.................... 			if (pot_reativa_r == 0)
.................... 				{
.................... 				return;
.................... 				}
.................... 			if (fator_pot_r > 0 )
.................... 				{
.................... 				aux_l3 = (word)(fator_pot_r);
.................... 				aux_l3 = (aux_l3 * 100);
.................... 				aux_w1 = (word)(aux_l3 / 1024);
.................... 				#if (controlador == true)
.................... 					if (aux_w1 >= com_des_fp_ind_cap)
.................... 						{
.................... 						return;
.................... 						}
.................... 				#else
.................... 					if (aux_w1 >= set_point)
.................... 						{
.................... 						return;
.................... 						}
.................... 				#endif
.................... 				}
.................... 			else
.................... 				{
.................... 				aux_l3 = (word)(fator_pot_r * (-1));
.................... 				aux_l3 = (aux_l3 * 100);
.................... 				aux_w1 = (word)(aux_l3 / 1024);
.................... 				if (aux_w1 >= set_point)
.................... 					{
.................... 					return;
.................... 					}
.................... 				}
.................... 			}
.................... 		#if (monofasico == false)
.................... 			else if (fase =='S')
.................... 				{
.................... 				#if (controlador == true)
.................... 					if (cor_min == true)
.................... 						{
.................... 						return;
.................... 						}
.................... 				#endif
.................... 				pot_exec_s = 0;
.................... 				pot_req_s = 0;
.................... 				if (pot_reativa_s == 0)
.................... 					{
.................... 					return;
.................... 					}
.................... 				if (fator_pot_s > 0 )
.................... 					{
.................... 					aux_l3 = (word)(fator_pot_s);
.................... 					aux_l3 = (aux_l3 * 100);
.................... 					aux_w1 = (word)(aux_l3 / 1024);
.................... 					#if (controlador == true)
.................... 						if (aux_w1 >= com_des_fp_cap)
.................... 							{
.................... 							return;
.................... 							}
.................... 					#else
.................... 						if (aux_w1 >= set_point)
.................... 							{
.................... 							return;
.................... 							}
.................... 					#endif
.................... 					}
.................... 				else
.................... 					{
.................... 					aux_l3 = (word)(fator_pot_s * (-1));
.................... 					aux_l3 = (aux_l3 * 100);
.................... 					aux_w1 = (word)(aux_l3 / 1024);
.................... 					if (aux_w1 >= set_point)
.................... 						{
.................... 						return;
.................... 						}
.................... 					}
.................... 				}
.................... 			else 
.................... 				{
.................... 				#if (controlador == true)
.................... 					if (cor_min == true)
.................... 						{
.................... 						return;
.................... 						}
.................... 				#endif
.................... 				pot_exec_t = 0;
.................... 				pot_req_t = 0;
.................... 				if (pot_reativa_t == 0)
.................... 					{
.................... 					return;
.................... 					}
.................... 				if (fator_pot_t > 0 )
.................... 					{
.................... 					aux_l3 = (word)(fator_pot_t);
.................... 					aux_l3 = (aux_l3 * 100);
.................... 					aux_w1 = (word)(aux_l3 / 1024);
.................... 					#if (controlador == true)
.................... 						if (aux_w1 >= com_des_fp_cap)
.................... 							{
.................... 							return;
.................... 							}
.................... 					#else
.................... 						if (aux_w1 >= set_point)
.................... 							{
.................... 							return;
.................... 							}
.................... 					#endif
.................... 					}
.................... 				else
.................... 					{
.................... 					aux_l3 = (word)(fator_pot_t * (-1));
.................... 					aux_l3 = (aux_l3 * 100);
.................... 					aux_w1 = (word)(aux_l3 / 1024);
.................... 					if (aux_w1 >= set_point)
.................... 						{
.................... 						return;
.................... 						}
.................... 					}
.................... 				}
.................... 		#endif
.................... 
.................... 		if (fase =='R')
.................... 			{
.................... 			aux_l1 = pot_ativa_r;
.................... 			aux_l3 = pot_reativa_r;
.................... 			}
.................... 		#if (monofasico == false)
.................... 			else if (fase =='S')
.................... 				{
.................... 				aux_l1 = pot_ativa_s;
.................... 				aux_l3 = pot_reativa_s;
.................... 				}
.................... 			else 
.................... 				{
.................... 				aux_l1 = pot_ativa_t;
.................... 				aux_l3 = pot_reativa_t;
.................... 				}
.................... 		#endif
.................... 		
.................... 		aux_l2 = aux_l1;
.................... 	    aux_l1 = (aux_l1 * 100);
.................... 
.................... 		#if (controlador == true)
.................... 			if (fase =='R')
.................... 				{
.................... 				if (fator_pot_r > 0)
.................... 					{
.................... 				    aux_l1 = aux_l1 / com_des_fp_ind_cap;	
.................... 					}
.................... 				else
.................... 					{
.................... 				    aux_l1 = aux_l1 / set_point;	
.................... 					}
.................... 				}
.................... 			#if (monofasico == false)
.................... 				else if (fase =='S')
.................... 					{
.................... 					if (fator_pot_s > 0)
.................... 						{
.................... 					    aux_l1 = aux_l1 / com_des_fp_cap;	
.................... 						}
.................... 					else
.................... 						{
.................... 					    aux_l1 = aux_l1 / set_point;	
.................... 						}
.................... 					}
.................... 				else 
.................... 					{
.................... 					if (fator_pot_t > 0)
.................... 						{
.................... 					    aux_l1 = aux_l1 / com_des_fp_cap;	
.................... 						}
.................... 					else
.................... 						{
.................... 					    aux_l1 = aux_l1 / set_point;	
.................... 						}
.................... 					}
.................... 			#endif
.................... 		#else	
.................... 		    aux_l1 = aux_l1 / set_point;	
.................... 		#endif
.................... 	    aux_l1 = aux_l1 * aux_l1;
.................... 	    aux_l2 = aux_l2 * aux_l2;
.................... 	    aux_l1 = (int32)(sqrtx(aux_l1 - aux_l2));
.................... 	
.................... 		aux_w1 = (word)((aux_l3 - aux_l1));	
.................... 
.................... 		if (valor_tp != 1)
.................... 			{
.................... 			aux_w1 = (int16)(aux_w1 * valor_tp);
.................... 			}
.................... 
.................... 	
.................... 		if (fase =='R')
.................... 			{
.................... 			if (fator_pot_r > 0)
.................... 				{
.................... 				pot_exec_r = aux_w1;
.................... 				}
.................... 			else
.................... 				{
.................... 				pot_req_r = aux_w1;
.................... 				}
.................... 			}
.................... 		#if (monofasico == false)
.................... 			else if (fase =='S')
.................... 				{
.................... 				if (fator_pot_s > 0)
.................... 					{
.................... 					pot_exec_s = aux_w1;
.................... 					}
.................... 				else
.................... 					{
.................... 					pot_req_s = aux_w1;
.................... 					}
.................... 				}
.................... 			else 
.................... 				{
.................... 				if (fator_pot_t > 0)
.................... 					{
.................... 					pot_exec_t = aux_w1;
.................... 					}
.................... 				else
.................... 					{
.................... 					pot_req_t = aux_w1;
.................... 					}
.................... 				}
.................... 		#endif
.................... }
.................... */
.................... 
.................... #include "calcfreq.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: st_CALC                                                        *
.................... ; Funcao: MODULO ROTINAS DE CALCULOS   									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... /*   calculo de frequencia
.................... 	Funçao: Calcular a frequencia da fase R
.................... 	Entrada: val_freq com o nro de interrupçoes do timer e da interrupcao de rede
.................... 	saida: Frequencia em Q2.
.................... 	Obs.  se freq_final = 0, frequencia = 60hz
.................... 	para calculo da regra de tres, temos que com 60hz, temos 32 * 60 interrupcoes 
.................... 	do timer = INTS_PER_SECOND(= 1920 => definicao na st_main.c)
.................... 	freq_final * 240(60hz em q2) / INTS_PER_SECOND
.................... */
.................... 
.................... void calc_frequencia(void){
.................... 	#if (feira)
.................... 		frequencia = 240;
.................... 		return;
.................... 	#endif
.................... 
.................... 	float aux_f1;
.................... 	float aux_f2;
.................... 	int32 freq_aux;
.................... 
.................... 	calculando_freq = 1;
*
1AB4C:  BSF    21.2
.................... 	if (nro_ints_old == 1){
1AB4E:  MOVLB  4
1AB50:  DECFSZ x21,W
1AB52:  BRA    1AB9A
.................... 		freq_aux = 65536 - freq_tmp1;
1AB54:  MOVLW  00
1AB56:  BSF    FD8.0
1AB58:  SUBFWB x1E,W
1AB5A:  MOVLB  A
1AB5C:  MOVWF  x52
1AB5E:  MOVLW  00
1AB60:  MOVLB  4
1AB62:  SUBFWB x1F,W
1AB64:  MOVLB  A
1AB66:  MOVWF  x53
1AB68:  MOVLW  01
1AB6A:  BTFSS  FD8.0
1AB6C:  DECF   FE8,F
1AB6E:  MOVWF  x54
1AB70:  MOVLW  00
1AB72:  BTFSS  FD8.0
1AB74:  DECF   FE8,F
1AB76:  MOVWF  x55
.................... 		freq_aux += freq_tmp - 15536;
1AB78:  MOVLW  B0
1AB7A:  MOVLB  4
1AB7C:  SUBWF  x1C,W
1AB7E:  MOVWF  00
1AB80:  MOVLW  3C
1AB82:  SUBWFB x1D,W
1AB84:  MOVWF  03
1AB86:  MOVF   00,W
1AB88:  MOVLB  A
1AB8A:  ADDWF  x52,F
1AB8C:  MOVF   03,W
1AB8E:  ADDWFC x53,F
1AB90:  MOVLW  00
1AB92:  ADDWFC x54,F
1AB94:  ADDWFC x55,F
.................... //		#if (cristal == 40)
.................... //			freq_aux = (word)(freq_aux / 2 );
.................... //		#else
.................... //			freq_aux = (word)(freq_aux / 3 );
.................... //			freq_aux += 10000;
.................... //		#endif
.................... 	}
1AB96:  BRA    1AC26
1AB98:  MOVLB  4
.................... 	else if (nro_ints_old == 2){
1AB9A:  MOVF   x21,W
1AB9C:  SUBLW  02
1AB9E:  BNZ   1ABFE
.................... 		aux_w1 = 65535 - freq_tmp1;
1ABA0:  MOVLW  FF
1ABA2:  BSF    FD8.0
1ABA4:  SUBFWB x1E,W
1ABA6:  MOVLB  3
1ABA8:  MOVWF  x62
1ABAA:  MOVLW  FF
1ABAC:  MOVLB  4
1ABAE:  SUBFWB x1F,W
1ABB0:  MOVLB  3
1ABB2:  MOVWF  x63
.................... 		#if (cristal == 20)
.................... 			aux_w2 = freq_tmp - (65536 - 25000);	//valor_timer1;
.................... 		#elif (cristal == 24)
.................... 			aux_w2 = freq_tmp - (65536 - 30000);	//valor_timer1;
.................... 		#elif (cristal == 40)
.................... 			aux_w2 = freq_tmp - (65536 - 50000);	//valor_timer1;
1ABB4:  MOVLW  B0
1ABB6:  MOVLB  4
1ABB8:  SUBWF  x1C,W
1ABBA:  MOVLB  3
1ABBC:  MOVWF  x64
1ABBE:  MOVLW  3C
1ABC0:  MOVLB  4
1ABC2:  SUBWFB x1D,W
1ABC4:  MOVLB  3
1ABC6:  MOVWF  x65
.................... 		#else			
.................... 			aux_w2 = freq_tmp - (65536 - 30000);	//valor_timer1;
.................... 		#endif
.................... 		freq_aux = aux_w1;
1ABC8:  MOVLB  A
1ABCA:  CLRF   x55
1ABCC:  CLRF   x54
1ABCE:  MOVFF  363,A53
1ABD2:  MOVFF  362,A52
.................... 		freq_aux += aux_w2;
1ABD6:  MOVLB  3
1ABD8:  MOVF   x64,W
1ABDA:  MOVLB  A
1ABDC:  ADDWF  x52,F
1ABDE:  MOVLB  3
1ABE0:  MOVF   x65,W
1ABE2:  MOVLB  A
1ABE4:  ADDWFC x53,F
1ABE6:  MOVLW  00
1ABE8:  ADDWFC x54,F
1ABEA:  ADDWFC x55,F
.................... 		freq_aux += 50000;
1ABEC:  MOVLW  50
1ABEE:  ADDWF  x52,F
1ABF0:  MOVLW  C3
1ABF2:  ADDWFC x53,F
1ABF4:  MOVLW  00
1ABF6:  ADDWFC x54,F
1ABF8:  ADDWFC x55,F
.................... //		#if (cristal == 40)
.................... //			aux_w1 = (word)(aux_l1 / 2);
.................... //			freq_aux = (word)(aux_w1);
.................... //		#else
.................... //			aux_w1 = (word)(aux_l1 / 3);
.................... //			freq_aux = (word)(aux_w1 + 10000);
.................... //		#endif
.................... 	}
1ABFA:  BRA    1AC26
1ABFC:  MOVLB  4
.................... 	else{
.................... 		if(freq_50hz){
1ABFE:  BTFSS  21.3
1AC00:  BRA    1AC16
.................... 			freq_aux = 100000;
1AC02:  MOVLB  A
1AC04:  CLRF   x55
1AC06:  MOVLW  01
1AC08:  MOVWF  x54
1AC0A:  MOVLW  86
1AC0C:  MOVWF  x53
1AC0E:  MOVLW  A0
1AC10:  MOVWF  x52
.................... 		}
1AC12:  BRA    1AC26
1AC14:  MOVLB  4
.................... 		else{
.................... 			freq_aux = 83333;
1AC16:  MOVLB  A
1AC18:  CLRF   x55
1AC1A:  MOVLW  01
1AC1C:  MOVWF  x54
1AC1E:  MOVLW  45
1AC20:  MOVWF  x53
1AC22:  MOVLW  85
1AC24:  MOVWF  x52
.................... 		}
.................... 	}
.................... 	aux_f1 = (float)(0.0000002);
1AC26:  MOVLW  95
1AC28:  MOVWF  x4D
1AC2A:  MOVLW  BF
1AC2C:  MOVWF  x4C
1AC2E:  MOVLW  56
1AC30:  MOVWF  x4B
1AC32:  MOVLW  68
1AC34:  MOVWF  x4A
.................... 	aux_f2 = freq_aux;
1AC36:  MOVFF  A55,A7C
1AC3A:  MOVFF  A54,A7B
1AC3E:  MOVFF  A53,A7A
1AC42:  MOVFF  A52,A79
1AC46:  MOVLB  0
1AC48:  CALL   5438
1AC4C:  MOVFF  03,A51
1AC50:  MOVFF  02,A50
1AC54:  MOVFF  01,A4F
1AC58:  MOVFF  00,A4E
.................... 	aux_f1 = (float)(aux_f1 * aux_f2);
1AC5C:  MOVFF  A4D,A80
1AC60:  MOVFF  A4C,A7F
1AC64:  MOVFF  A4B,A7E
1AC68:  MOVFF  A4A,A7D
1AC6C:  MOVFF  A51,A84
1AC70:  MOVFF  A50,A83
1AC74:  MOVFF  A4F,A82
1AC78:  MOVFF  A4E,A81
1AC7C:  CALL   5306
1AC80:  MOVFF  03,A4D
1AC84:  MOVFF  02,A4C
1AC88:  MOVFF  01,A4B
1AC8C:  MOVFF  00,A4A
.................... 	aux_f1 = (float)(4 / aux_f1);
1AC90:  MOVLB  A
1AC92:  CLRF   x83
1AC94:  CLRF   x82
1AC96:  CLRF   x81
1AC98:  MOVLW  81
1AC9A:  MOVWF  x80
1AC9C:  MOVFF  A4D,A87
1ACA0:  MOVFF  A4C,A86
1ACA4:  MOVFF  A4B,A85
1ACA8:  MOVFF  A4A,A84
1ACAC:  MOVLB  0
1ACAE:  CALL   295A
1ACB2:  MOVFF  03,A4D
1ACB6:  MOVFF  02,A4C
1ACBA:  MOVFF  01,A4B
1ACBE:  MOVFF  00,A4A
.................... 	aux_w1 = aux_f1;
1ACC2:  MOVFF  A4D,A7C
1ACC6:  MOVFF  A4C,A7B
1ACCA:  MOVFF  A4B,A7A
1ACCE:  MOVFF  A4A,A79
1ACD2:  CALL   53FC
1ACD6:  MOVFF  02,363
1ACDA:  MOVFF  01,362
.................... 	if (aux_w1 > 140){
1ACDE:  MOVLB  3
1ACE0:  MOVF   x63,F
1ACE2:  BNZ   1ACEA
1ACE4:  MOVF   x62,W
1ACE6:  SUBLW  8C
1ACE8:  BC    1AD2A
.................... 		aux_w1 = 240;
1ACEA:  CLRF   x63
1ACEC:  MOVLW  F0
1ACEE:  MOVWF  x62
.................... 		soma_freq += aux_w1;
1ACF0:  MOVF   x62,W
1ACF2:  MOVLB  4
1ACF4:  ADDWF  x23,F
1ACF6:  MOVLB  3
1ACF8:  MOVF   x63,W
1ACFA:  MOVLB  4
1ACFC:  ADDWFC x24,F
.................... 		conta_soma_freq++;
1ACFE:  INCF   x25,F
.................... 		if (conta_soma_freq > 15){
1AD00:  MOVF   x25,W
1AD02:  SUBLW  0F
1AD04:  BC    1AD28
.................... 			frequencia = soma_freq / conta_soma_freq;
1AD06:  MOVFF  424,A6C
1AD0A:  MOVFF  423,A6B
1AD0E:  MOVLB  A
1AD10:  CLRF   x6E
1AD12:  MOVFF  425,A6D
1AD16:  MOVLB  0
1AD18:  CALL   4ECC
1AD1C:  MOVFF  01,24E
.................... 			soma_freq = 0;
1AD20:  MOVLB  4
1AD22:  CLRF   x24
1AD24:  CLRF   x23
.................... 			conta_soma_freq = 0;
1AD26:  CLRF   x25
1AD28:  MOVLB  3
.................... 		}
.................... 	}
.................... 	calcular_frequencia = 0;
1AD2A:  BCF    21.1
.................... 	calculando_freq = 0;
1AD2C:  BCF    21.2
.................... 
.................... 	if (tensao_r < TENSAO_FALTA){
1AD2E:  MOVLB  2
1AD30:  MOVF   x51,W
1AD32:  SUBLW  0C
1AD34:  BNC   1AD44
1AD36:  BNZ   1AD3E
1AD38:  MOVF   x50,W
1AD3A:  SUBLW  7F
1AD3C:  BNC   1AD44
.................... 		freq_50hz = 0;
1AD3E:  BCF    21.3
.................... 		frequencia = 0;	
1AD40:  CLRF   x4E
.................... 	}
1AD42:  BRA    1AD64
.................... 	else{
.................... 		if(frequencia > 220){			// em 60hz
1AD44:  MOVF   x4E,W
1AD46:  SUBLW  DC
1AD48:  BC    1AD4E
.................... 			freq_50hz = 0;
1AD4A:  BCF    21.3
.................... 		}
1AD4C:  BRA    1AD50
.................... 		else{							// em 50hz
.................... 			freq_50hz = 1;
1AD4E:  BSF    21.3
.................... 		}
.................... 		if((frequencia < 180) && (frequencia > 250)){
1AD50:  MOVF   x4E,W
1AD52:  SUBLW  B3
1AD54:  BNC   1AD62
1AD56:  MOVF   x4E,W
1AD58:  SUBLW  FA
1AD5A:  BC    1AD62
.................... 			erro_freq = 1;
1AD5C:  BSF    24.4
.................... 			frequencia = 0;
1AD5E:  CLRF   x4E
.................... 		}
1AD60:  BRA    1AD64
.................... 		else{
.................... 			erro_freq = 0;
1AD62:  BCF    24.4
.................... 		}
.................... 	}
1AD64:  MOVLB  0
1AD66:  GOTO   1C08C (RETURN)
.................... }
.................... 
.................... //void calculo_frequencia(void){
.................... //	if(nro_media_freq > 2){
.................... //		aux_w1 = (word)(soma_freq / 4);
.................... //		frequencia = (aux_w1 * 4);
.................... //		soma_freq = 0;
.................... //		nro_media_freq = 0;
.................... //	}
.................... //	else{
.................... //		soma_freq += (conta_freq * 4);			// (4 é quantização)
.................... //		conta_freq = 0;
.................... //		nro_media_freq++;
.................... //	}	
.................... //
.................... //	if (tensao_r < TENSAO_FALTA){
.................... //		freq_50hz = 0;
.................... //		frequencia = 0;
.................... //	}
.................... //	else{
.................... //		if (frequencia > 200){
.................... //			freq_50hz = 0;		// em 60hz
.................... //		}
.................... //		else{
.................... //			freq_50hz = 1;		// em 50hz
.................... //		}
.................... //		if ((frequencia < 180) && (frequencia > 250)){
.................... //			erro_freq = 1;
.................... //		}
.................... //		else{
.................... //			erro_freq = 0;
.................... //		}
.................... //	}
.................... //	calcular_frequencia = false;
.................... //
.................... //	#if (feira)
.................... //		if(frequencia > 220){
.................... //			frequencia = 240;
.................... //		}
.................... //		else if(frequencia > 180){
.................... //			frequencia = 200;
.................... //		}
.................... //		else{
.................... //			frequencia = 0;
.................... //		}
.................... //	#endif
.................... //}	
.................... 
.................... 
.................... //void calc_frequencia(void)
.................... //{
.................... //	#if (feira)
.................... //		frequencia = 240;
.................... //		return;
.................... //	#endif
.................... //#if (ade7754 == true)
.................... //	float aux_f1;
.................... //	aux_f1 = 0.0000024;
.................... //	aux_f1 = aux_f1 * periodo_ade7754;
.................... //	aux_f1 = (1 / aux_f1) * 4;
.................... //	frequencia = (char)(aux_f1);
.................... //	calcular_frequencia = 0;
.................... ///*
.................... //	if (tensao_r > 3200)			// 50 Vac (50 * 64)
.................... //		{
.................... //*/
.................... //		if (frequencia < 120)		// 30hz
.................... //			{
.................... //			frequencia = 240;
.................... //			}
.................... ///*
.................... //		}
.................... //*/
.................... //#else
.................... //	float aux_f1;
.................... //	long long freq_aux;
.................... //
.................... //	calculando_freq = 1;
.................... //	if (nro_ints_old == 1){
.................... //		if (freq_tmp > freq_tmp1){
.................... //			freq_aux = freq_tmp - freq_tmp1;
.................... //		}
.................... //		else{
.................... //			freq_aux = freq_tmp1 - freq_tmp;
.................... //		}
.................... //		#if (cristal == 40)
.................... //			freq_aux = (word)(freq_aux / 2 );
.................... //		#else
.................... //			freq_aux = (word)(freq_aux / 3 );
.................... //			freq_aux += 10000;
.................... //		#endif
.................... //	}
.................... //	else if (nro_ints_old == 2){
.................... //		aux_w1 = 65535 - freq_tmp1;
.................... //		#if (cristal == 20)
.................... //			aux_w2 = freq_tmp - (65536 - 25000);	//valor_timer1;
.................... //		#elif (cristal == 24)
.................... //			aux_w2 = freq_tmp - (65536 - 30000);	//valor_timer1;
.................... //		#elif (cristal == 40)
.................... //			aux_w2 = freq_tmp - (65536 - 50000);	//valor_timer1;
.................... //		#else			
.................... //			aux_w2 = freq_tmp - (65536 - 30000);	//valor_timer1;
.................... //		#endif
.................... //		aux_l1 = (int32)(aux_w1);
.................... //		aux_l1 += aux_w2;
.................... //		#if (cristal == 40)
.................... //			aux_w1 = (word)(aux_l1 / 2);
.................... //			freq_aux = (word)(aux_w1);
.................... //		#else
.................... //			aux_w1 = (word)(aux_l1 / 3);
.................... //			freq_aux = (word)(aux_w1 + 10000);
.................... //		#endif
.................... //	}
.................... //	else{
.................... //		if(freq_50hz){
.................... //			freq_aux = 20000;
.................... //		}
.................... //		else{
.................... //			freq_aux = 16666;
.................... //		}	
.................... //	}
.................... //
.................... //	aux_w1 = freq_aux;
.................... //	aux_f1 = (float)(freq_aux);
.................... //	aux_f1 = (float)(aux_f1 / 1000000);
.................... //	aux_f1 = (float)(4 / aux_f1);
.................... //	freq_aux = (char)(aux_f1);
.................... //	if (freq_aux > 140){
.................... //		soma_freq = soma_freq + freq_aux;
.................... //		conta_soma_freq++;
.................... //		if (conta_soma_freq > 15){
.................... //			frequencia = soma_freq / conta_soma_freq;
.................... //			soma_freq = 0;
.................... //			conta_soma_freq = 0;
.................... //		}
.................... //	}
.................... //	calcular_frequencia = 0;
.................... //	calculando_freq = 0;
.................... //
.................... ////
.................... ////
.................... //#endif
.................... //	if (tensao_r < TENSAO_FALTA)
.................... //		{
.................... //		freq_50hz = 0;
.................... //		frequencia = 0;	
.................... //		}
.................... //	else	
.................... //		{
.................... //		if (frequencia > 220)
.................... //			{
.................... //			// em 60hz
.................... //			freq_50hz = 0;
.................... //			}
.................... //		else
.................... //			{
.................... //			// em 50hz
.................... //			freq_50hz = 1;
.................... //			}
.................... //		if ((frequencia < 180) && (frequencia > 250))
.................... //			{
.................... //			erro_freq = 1;
.................... //			}
.................... //		else
.................... //			{
.................... //			erro_freq = 0;
.................... //			}
.................... //		}
.................... //
.................... ////
.................... ////	erro_freq = 0;
.................... ////	freq_50hz = 0;
.................... ////	
.................... //
.................... //}
.................... //
.................... 
.................... 
.................... 
.................... 
.................... 
.................... ///*;***********************************************************************
.................... //; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... //; Modulo: st_CALC                                                        *
.................... //; Funcao: MODULO ROTINAS DE CALCULOS   									 *
.................... //; Responsavel: VAGNER SANTOS											 *
.................... //; Modificado ; VAGNER SANTOS                                             *
.................... //; Inicio: 30/08/2000                                                     *
.................... //; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... //;**********************************************************************  */
.................... //void calc_frequencia(void){
.................... //	float aux_f1;
.................... //	word freq_aux;
.................... //
.................... //	if (calcular_frequencia == 1){
.................... //		if(fechar_frequencia){
.................... //			calculando_freq = 1;
.................... //			freq_aux = conta_freq * 4;
.................... //			soma_freq += freq_aux;
.................... //			conta_soma_freq++;
.................... //			if(conta_soma_freq > 10){
.................... //				frequencia = soma_freq / conta_soma_freq;
.................... //				soma_freq = 0;
.................... //				conta_soma_freq = 0;
.................... //			}
.................... //			conta_freq = 0;
.................... //			fechar_frequencia = 0;
.................... //			calculando_freq = 0;
.................... //		}
.................... //		calcular_frequencia = 0;
.................... //	}	
.................... //
.................... //	if (tensao_r < TENSAO_FALTA){
.................... //		freq_50hz = 0;
.................... //		frequencia = 0;
.................... //	}
.................... //	else{
.................... //		if (frequencia > 200){
.................... //			// em 60hz
.................... //			freq_50hz = 0;
.................... //		}
.................... //		else{
.................... //			// em 50hz
.................... //			freq_50hz = 1;
.................... //		}
.................... //		if ((frequencia < 180) && (frequencia > 250)){
.................... //			erro_freq = 1;
.................... //		}
.................... //		else{
.................... //			erro_freq = 0;
.................... //		}
.................... //	}
.................... //	
.................... //	#if(feira)
.................... //		frequencia = 240;
.................... //	#endif
.................... //
.................... //	erro_freq = 0;
.................... //}
.................... //
.................... 
.................... 
.................... #include "calcfptotal.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: st_CALC                                                        *
.................... ; Funcao: MODULO ROTINAS DE CALCULOS   									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... 
.................... void calc_fator_total(void)
.................... {    
.................... 	#if (st8500c == false)
.................... 	/* calculo do fator de potencia total */
.................... 		#if (monofasico == true)
.................... 			fator_pot = fator_pot_r;
.................... 		#else
.................... 			sinal_r = 0;
.................... 			sinal_s = 0;
.................... 			sinal_t = 0;
.................... 			
.................... 			if ((fator_pot_r == 1024) && (fator_pot_s == 1024) && (fator_pot_t == 1024))
.................... 				{
.................... 				 fator_pot = 1024;
.................... 				 return;
.................... 				}
.................... 		
.................... 			soma_pot_apa = (int32)(pot_aparente_r +  pot_aparente_s + pot_aparente_t);
.................... 			soma_pot_ati = (int32)(pot_ativa_r +  pot_ativa_s + pot_ativa_t) * 1024;
.................... 			aux_l3 = soma_pot_ati / soma_pot_apa;
.................... 			fator_pot = (signed word)(aux_l3);
.................... 		
.................... 			if (fator_pot_r != 1024)
.................... 				{
.................... 				sinal_r = fator_pot_r;
.................... 				}
.................... 			if (fator_pot_s != 1024)
.................... 				{
.................... 				sinal_s = fator_pot_s;
.................... 				}
.................... 			if (fator_pot_t != 1024)
.................... 				{
.................... 				sinal_t = fator_pot_t;
.................... 				}
.................... 			sinal_r = sinal_r + sinal_s + sinal_t;
.................... 				
.................... 			if (sinal_r > 0)
.................... 				{
.................... 				sinal = 1;
.................... 				}
.................... 			else
.................... 				{
.................... 				sinal = (-1);
.................... 				}
.................... 			
.................... 			fator_pot = (signed word)(fator_pot * sinal);
.................... 		#endif	
.................... 	#else
.................... 		#if (com_tc == true)
.................... 	/* calculo do fator de potencia total */
.................... 			sinal_r = 0;
*
19B9E:  MOVLB  2
19BA0:  CLRF   x05
19BA2:  CLRF   x04
.................... 			sinal_s = 0;
19BA4:  CLRF   x9B
19BA6:  CLRF   x9A
.................... 			sinal_t = 0;
19BA8:  CLRF   xF2
19BAA:  CLRF   xF1
.................... 			
.................... 			if ((fator_pot_r == 1024) && (fator_pot_s == 1024) && (fator_pot_t == 1024))
19BAC:  MOVF   x62,F
19BAE:  BNZ   19BE2
19BB0:  MOVF   x63,W
19BB2:  SUBLW  04
19BB4:  BNZ   19BE2
19BB6:  MOVF   xE2,F
19BB8:  BNZ   19BE2
19BBA:  MOVF   xE3,W
19BBC:  SUBLW  04
19BBE:  BNZ   19BE2
19BC0:  MOVLB  3
19BC2:  MOVF   x39,F
19BC4:  BTFSC  FD8.2
19BC6:  BRA    19BCC
19BC8:  MOVLB  2
19BCA:  BRA    19BE2
19BCC:  MOVF   x3A,W
19BCE:  SUBLW  04
19BD0:  BTFSC  FD8.2
19BD2:  BRA    19BD8
19BD4:  MOVLB  2
19BD6:  BRA    19BE2
.................... 				{
.................... 				 fator_pot = 1024;
19BD8:  MOVLW  04
19BDA:  MOVLB  2
19BDC:  MOVWF  x93
19BDE:  CLRF   x92
.................... 				 return;
19BE0:  BRA    19D4E
.................... 				}
.................... 		
.................... 			soma_pot_apa = (int32)(pot_aparente_r +  pot_aparente_s + pot_aparente_t);
19BE2:  MOVF   xDE,W
19BE4:  ADDWF  x5A,W
19BE6:  MOVLB  A
19BE8:  MOVWF  x4E
19BEA:  MOVLB  2
19BEC:  MOVF   xDF,W
19BEE:  ADDWFC x5B,W
19BF0:  MOVLB  A
19BF2:  MOVWF  x4F
19BF4:  MOVLB  3
19BF6:  MOVF   x35,W
19BF8:  MOVLB  A
19BFA:  ADDWF  x4E,W
19BFC:  MOVWF  01
19BFE:  MOVLB  3
19C00:  MOVF   x36,W
19C02:  MOVLB  A
19C04:  ADDWFC x4F,W
19C06:  MOVFF  01,402
19C0A:  MOVLB  4
19C0C:  MOVWF  x03
19C0E:  CLRF   x04
19C10:  CLRF   x05
.................... 			soma_pot_ati = (int32)(pot_ativa_r +  pot_ativa_s + pot_ativa_t) * 1024;
19C12:  MOVLB  2
19C14:  MOVF   xDC,W
19C16:  ADDWF  x58,W
19C18:  MOVLB  A
19C1A:  MOVWF  x4E
19C1C:  MOVLB  2
19C1E:  MOVF   xDD,W
19C20:  ADDWFC x59,W
19C22:  MOVLB  A
19C24:  MOVWF  x4F
19C26:  MOVLB  3
19C28:  MOVF   x33,W
19C2A:  MOVLB  A
19C2C:  ADDWF  x4E,W
19C2E:  MOVWF  01
19C30:  MOVLB  3
19C32:  MOVF   x34,W
19C34:  MOVLB  A
19C36:  ADDWFC x4F,W
19C38:  MOVWF  03
19C3A:  CLRF   x50
19C3C:  MOVLB  3
19C3E:  CLRF   xF6
19C40:  RLCF   01,W
19C42:  MOVLB  3
19C44:  MOVWF  xF7
19C46:  RLCF   03,W
19C48:  MOVLB  3
19C4A:  MOVWF  xF8
19C4C:  MOVLB  A
19C4E:  RLCF   x50,W
19C50:  MOVLB  3
19C52:  MOVWF  xF9
19C54:  RLCF   xF7,F
19C56:  RLCF   xF8,F
19C58:  RLCF   xF9,F
19C5A:  MOVLW  FC
19C5C:  ANDWF  xF7,F
.................... 			aux_l3 = soma_pot_ati / soma_pot_apa;
19C5E:  BCF    FD8.1
19C60:  MOVFF  3F9,A73
19C64:  MOVFF  3F8,A72
19C68:  MOVFF  3F7,A71
19C6C:  MOVFF  3F6,A70
19C70:  MOVFF  405,A77
19C74:  MOVFF  404,A76
19C78:  MOVFF  403,A75
19C7C:  MOVFF  402,A74
19C80:  MOVLB  0
19C82:  CALL   6858
19C86:  MOVFF  03,37B
19C8A:  MOVFF  02,37A
19C8E:  MOVFF  01,379
19C92:  MOVFF  00,378
.................... 			fator_pot = (signed word)(aux_l3);
19C96:  MOVFF  379,293
19C9A:  MOVFF  378,292
.................... 		
.................... 			if (fator_pot_r != 1024)
19C9E:  MOVLB  2
19CA0:  MOVF   x62,F
19CA2:  BNZ   19CAA
19CA4:  MOVF   x63,W
19CA6:  SUBLW  04
19CA8:  BZ    19CB2
.................... 				{
.................... 				sinal_r = fator_pot_r;
19CAA:  MOVFF  263,205
19CAE:  MOVFF  262,204
.................... 				}
.................... 			if (fator_pot_s != 1024)
19CB2:  MOVF   xE2,F
19CB4:  BNZ   19CBC
19CB6:  MOVF   xE3,W
19CB8:  SUBLW  04
19CBA:  BZ    19CC4
.................... 				{
.................... 				sinal_s = fator_pot_s;
19CBC:  MOVFF  2E3,29B
19CC0:  MOVFF  2E2,29A
.................... 				}
.................... 			if (fator_pot_t != 1024)
19CC4:  MOVLB  3
19CC6:  MOVF   x39,F
19CC8:  BNZ   19CD0
19CCA:  MOVF   x3A,W
19CCC:  SUBLW  04
19CCE:  BZ    19CD8
.................... 				{
.................... 				sinal_t = fator_pot_t;
19CD0:  MOVFF  33A,2F2
19CD4:  MOVFF  339,2F1
.................... 				}
.................... 			sinal_r = sinal_r + sinal_s + sinal_t;
19CD8:  MOVLB  2
19CDA:  MOVF   x9A,W
19CDC:  ADDWF  x04,W
19CDE:  MOVLB  A
19CE0:  MOVWF  x4E
19CE2:  MOVLB  2
19CE4:  MOVF   x9B,W
19CE6:  ADDWFC x05,W
19CE8:  MOVLB  A
19CEA:  MOVWF  x4F
19CEC:  MOVLB  2
19CEE:  MOVF   xF1,W
19CF0:  MOVLB  A
19CF2:  ADDWF  x4E,W
19CF4:  MOVLB  2
19CF6:  MOVWF  x04
19CF8:  MOVF   xF2,W
19CFA:  MOVLB  A
19CFC:  ADDWFC x4F,W
19CFE:  MOVLB  2
19D00:  MOVWF  x05
.................... 				
.................... 			if (sinal_r > 0)
19D02:  BTFSC  x05.7
19D04:  BRA    19D1A
19D06:  MOVF   x05,F
19D08:  BNZ   19D10
19D0A:  MOVF   x04,W
19D0C:  SUBLW  00
19D0E:  BC    19D1A
.................... 				{
.................... 				sinal = 1;
19D10:  MOVLW  01
19D12:  MOVLB  4
19D14:  MOVWF  x06
.................... 				}
19D16:  BRA    19D1E
19D18:  MOVLB  2
.................... 			else
.................... 				{
.................... 				sinal = (-1);
19D1A:  MOVLB  4
19D1C:  SETF   x06
.................... 				}
.................... 			
.................... 			fator_pot = (signed word)(fator_pot * sinal);
19D1E:  CLRF   03
19D20:  MOVF   x06,W
19D22:  MOVWF  00
19D24:  BTFSC  FE8.7
19D26:  DECF   03,F
19D28:  MOVLB  A
19D2A:  MOVWF  x4E
19D2C:  MOVFF  03,A4F
19D30:  MOVFF  293,A6F
19D34:  MOVFF  292,A6E
19D38:  MOVFF  03,A71
19D3C:  MOVWF  x70
19D3E:  MOVLB  0
19D40:  CALL   FA44
19D44:  MOVFF  02,293
19D48:  MOVFF  01,292
19D4C:  MOVLB  2
.................... 		#endif	
.................... 	#endif
19D4E:  MOVLB  0
19D50:  GOTO   1AA7C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #if (com_rep == true)
.................... 	#include "st8500c_rep.c"
.................... #endif
.................... 
.................... #if (com_consumo == true)
.................... 	#include "st_cons.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: st92ROTA                                                        *
.................... ; Funcao: MODULO ROTINAS             									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... void inic_consumo(void)
.................... {	
.................... 	nro_soma_consumo = 0;
*
0250A:  MOVLB  4
0250C:  CLRF   x39
0250E:  CLRF   x38
.................... 	soma_consumo_r = 0;
02510:  CLRF   x3D
02512:  CLRF   x3C
02514:  CLRF   x3B
02516:  CLRF   x3A
.................... 	soma_consumo_s = 0;
02518:  CLRF   x41
0251A:  CLRF   x40
0251C:  CLRF   x3F
0251E:  CLRF   x3E
.................... 	soma_consumo_t = 0;
02520:  CLRF   x45
02522:  CLRF   x44
02524:  CLRF   x43
02526:  CLRF   x42
.................... 	soma_consumo_rea_r = 0;
02528:  CLRF   x49
0252A:  CLRF   x48
0252C:  CLRF   x47
0252E:  CLRF   x46
.................... 	soma_consumo_rea_s = 0;
02530:  CLRF   x4D
02532:  CLRF   x4C
02534:  CLRF   x4B
02536:  CLRF   x4A
.................... 	soma_consumo_rea_t = 0;
02538:  CLRF   x51
0253A:  CLRF   x50
0253C:  CLRF   x4F
0253E:  CLRF   x4E
.................... 
.................... 	consumo = 0;
02540:  CLRF   x6D
02542:  CLRF   x6C
02544:  CLRF   x6B
02546:  CLRF   x6A
.................... 	consumo_ati= 0;
02548:  CLRF   x2F
0254A:  CLRF   x2E
0254C:  CLRF   x2D
0254E:  CLRF   x2C
.................... 	consumo_ati_p= 0;
02550:  CLRF   x37
02552:  CLRF   x36
02554:  CLRF   x35
02556:  CLRF   x34
.................... 	consumo_r_tmp = 0;
02558:  CLRF   x61
0255A:  CLRF   x60
0255C:  CLRF   x5F
0255E:  CLRF   x5E
.................... 	consumo_reati_r_tmp = 0;
02560:  CLRF   x65
02562:  CLRF   x64
02564:  CLRF   x63
02566:  CLRF   x62
.................... 	consumo_reati = 0;
02568:  CLRF   x2B
0256A:  CLRF   x2A
0256C:  CLRF   x29
0256E:  CLRF   x28
.................... 	consumo_rea_p = 0;
02570:  CLRF   x33
02572:  CLRF   x32
02574:  CLRF   x31
02576:  CLRF   x30
.................... 	
.................... 	#if (com_consumo_aparente == true)
02578:  MOVLB  0
0257A:  RETURN 0
.................... 		soma_dem_apa_r = 0;
.................... 		soma_dem_apa_s = 0;
.................... 		soma_dem_apa_t = 0;
.................... 
.................... 		consumo_apa_r_tmp = 0;
.................... 		consumo_apa = 0;
.................... 		consumo_apa_p = 0;
.................... 	#endif
.................... }
.................... 
.................... void grava_consumo_old(void){
.................... 	write_word(ee_consumo_ati_ant,consumo_ati);
.................... 	write_word(ee_consumo_reati_ant,consumo_reati);
.................... 	aux_l1 = (int32)(consumo_r_tmp * 1000);
.................... 	write_word(ee_consumo_ati_tmp_ant ,aux_l1);
.................... 	aux_l1 = (int32)(consumo_reati_r_tmp * 1000);
.................... 	write_word(ee_consumo_reati_tmp_ant,aux_l1);
.................... }
.................... 
.................... 
.................... #if (com_demanda == true)
.................... 	void zera_demandas(void)
.................... 	{
.................... 		dem_maxima_aparente = 0;
*
0243E:  MOVLB  2
02440:  CLRF   x6D
02442:  CLRF   x6C
.................... 		dem_maxima_ativa = 0;
02444:  CLRF   x6B
02446:  CLRF   x6A
.................... 		dem_media_ativa = 0;
02448:  CLRF   x65
0244A:  CLRF   x64
.................... 		dem_media_aparente = 0;
0244C:  CLRF   x67
0244E:  CLRF   x66
.................... 		soma_dem_apa_r = 0;
02450:  MOVLB  4
02452:  CLRF   x55
02454:  CLRF   x54
02456:  CLRF   x53
02458:  CLRF   x52
.................... 		soma_dem_apa_s = 0;
0245A:  CLRF   x59
0245C:  CLRF   x58
0245E:  CLRF   x57
02460:  CLRF   x56
.................... 		soma_dem_apa_t = 0;
02462:  CLRF   x5D
02464:  CLRF   x5C
02466:  CLRF   x5B
02468:  CLRF   x5A
.................... 		for (aux_b1 = 0; aux_b1 < 59; aux_b1++)
0246A:  MOVLB  3
0246C:  CLRF   xB1
0246E:  MOVF   xB1,W
02470:  SUBLW  3A
02472:  BNC   24C8
.................... 			{
.................... 			morder_t1 = 1;
02474:  BSF    1F.6
.................... 			morder_t3 = 1;
02476:  BSF    1F.7
.................... 			morder_calc = 1;
02478:  BSF    20.0
.................... 			write_word(ee_buf_dem_ativa + (aux_b1 * 2), 0);
0247A:  BCF    FD8.0
0247C:  RLCF   xB1,W
0247E:  ADDLW  90
02480:  MOVLB  A
02482:  MOVWF  x4A
02484:  MOVLW  01
02486:  MOVWF  x4B
02488:  BTFSC  FD8.0
0248A:  INCF   x4B,F
0248C:  MOVFF  A4B,A5D
02490:  MOVFF  A4A,A5C
02494:  CLRF   x5F
02496:  CLRF   x5E
02498:  MOVLB  0
0249A:  RCALL  23AE
.................... 			write_word(ee_buf_dem_aparente + (aux_b1 * 2), 0);
0249C:  BCF    FD8.0
0249E:  MOVLB  3
024A0:  RLCF   xB1,W
024A2:  ADDLW  08
024A4:  MOVLB  A
024A6:  MOVWF  x4A
024A8:  MOVLW  02
024AA:  MOVWF  x4B
024AC:  BTFSC  FD8.0
024AE:  INCF   x4B,F
024B0:  MOVFF  A4B,A5D
024B4:  MOVFF  A4A,A5C
024B8:  CLRF   x5F
024BA:  CLRF   x5E
024BC:  MOVLB  0
024BE:  RCALL  23AE
.................... 			pulsa_wdt();
024C0:  RCALL  2428
.................... 			}
.................... 		#if (st8500c == true)
.................... 			#if (com_tc == true)
024C2:  MOVLB  3
024C4:  INCF   xB1,F
024C6:  BRA    246E
.................... 				aux_intervalo_integra = 1;	//intervalo_integra;
024C8:  CLRF   xF4
024CA:  MOVLW  01
024CC:  MOVWF  xF3
.................... 			#endif
.................... 		#else
.................... 			aux_intervalo_integra = intervalo_integra;
.................... 		#endif
.................... 		
.................... 		dem_apa_r = 0;
024CE:  MOVLB  4
024D0:  CLRF   x75
024D2:  CLRF   x74
.................... 		dem_apa_s = 0;
024D4:  CLRF   x77
024D6:  CLRF   x76
.................... 		dem_apa_t = 0;
024D8:  CLRF   x79
024DA:  CLRF   x78
.................... 		dem_aparente = 0;
024DC:  CLRF   x7B
024DE:  CLRF   x7A
.................... 	
.................... 		demanda_r = 0;	
024E0:  CLRF   x7D
024E2:  CLRF   x7C
.................... 		demanda_s = 0;
024E4:  CLRF   x7F
024E6:  CLRF   x7E
.................... 		demanda_t = 0;	
024E8:  CLRF   x81
024EA:  CLRF   x80
.................... 		dem_ativa = 0;
024EC:  MOVLB  2
024EE:  CLRF   x77
024F0:  CLRF   x76
.................... 	
.................... 		dem_reat_r = 0;	
024F2:  MOVLB  4
024F4:  CLRF   x6F
024F6:  CLRF   x6E
.................... 		dem_reat_s = 0;
024F8:  CLRF   x71
024FA:  CLRF   x70
.................... 		dem_reat_t = 0;	
024FC:  CLRF   x73
024FE:  CLRF   x72
.................... 		dem_reativa = 0;
02500:  MOVLB  2
02502:  CLRF   x79
02504:  CLRF   x78
02506:  MOVLB  0
02508:  RETURN 0
.................... 	
.................... 	}
.................... #endif
.................... 
.................... void zera_consumo(void)
.................... {
.................... 
.................... 	inic_consumo();
*
0A7AA:  CALL   250A
.................... 
.................... 	write_word(ee_consumo_l,0);
0A7AE:  MOVLW  01
0A7B0:  MOVLB  A
0A7B2:  MOVWF  x5D
0A7B4:  MOVLW  14
0A7B6:  MOVWF  x5C
0A7B8:  CLRF   x5F
0A7BA:  CLRF   x5E
0A7BC:  MOVLB  0
0A7BE:  CALL   23AE
.................... 	write_word(ee_consumo_h,0);
0A7C2:  MOVLW  01
0A7C4:  MOVLB  A
0A7C6:  MOVWF  x5D
0A7C8:  MOVLW  16
0A7CA:  MOVWF  x5C
0A7CC:  CLRF   x5F
0A7CE:  CLRF   x5E
0A7D0:  MOVLB  0
0A7D2:  CALL   23AE
.................... 		
.................... 	write_word(ee_consumo_rea_l,0);
0A7D6:  MOVLW  01
0A7D8:  MOVLB  A
0A7DA:  MOVWF  x5D
0A7DC:  MOVLW  18
0A7DE:  MOVWF  x5C
0A7E0:  CLRF   x5F
0A7E2:  CLRF   x5E
0A7E4:  MOVLB  0
0A7E6:  CALL   23AE
.................... 	write_word(ee_consumo_rea_h,0);
0A7EA:  MOVLW  01
0A7EC:  MOVLB  A
0A7EE:  MOVWF  x5D
0A7F0:  MOVLW  1A
0A7F2:  MOVWF  x5C
0A7F4:  CLRF   x5F
0A7F6:  CLRF   x5E
0A7F8:  MOVLB  0
0A7FA:  CALL   23AE
.................... 
.................... 	write_word(ee_consumo_l_p,0);
0A7FE:  MOVLW  01
0A800:  MOVLB  A
0A802:  MOVWF  x5D
0A804:  MOVLW  20
0A806:  MOVWF  x5C
0A808:  CLRF   x5F
0A80A:  CLRF   x5E
0A80C:  MOVLB  0
0A80E:  CALL   23AE
.................... 	write_word(ee_consumo_h_p,0);
0A812:  MOVLW  01
0A814:  MOVLB  A
0A816:  MOVWF  x5D
0A818:  MOVLW  22
0A81A:  MOVWF  x5C
0A81C:  CLRF   x5F
0A81E:  CLRF   x5E
0A820:  MOVLB  0
0A822:  CALL   23AE
.................... 		
.................... 	write_word(ee_consumo_rea_l_p,0);
0A826:  MOVLW  01
0A828:  MOVLB  A
0A82A:  MOVWF  x5D
0A82C:  MOVLW  24
0A82E:  MOVWF  x5C
0A830:  CLRF   x5F
0A832:  CLRF   x5E
0A834:  MOVLB  0
0A836:  CALL   23AE
.................... 	write_word(ee_consumo_rea_h_p,0);
0A83A:  MOVLW  01
0A83C:  MOVLB  A
0A83E:  MOVWF  x5D
0A840:  MOVLW  26
0A842:  MOVWF  x5C
0A844:  CLRF   x5F
0A846:  CLRF   x5E
0A848:  MOVLB  0
0A84A:  CALL   23AE
.................... 
.................... 	#if (com_consumo_aparente == true)
.................... 		write_word(ee_consumo_apa_l,0);
.................... 		write_word(ee_consumo_apa_h,0);
.................... 	
.................... 		write_word(ee_consumo_apa_l_p,0);
.................... 		write_word(ee_consumo_apa_h_p,0);
.................... 	#endif
.................... 
.................... 	#if (com_demanda == true)
.................... 		zera_demandas();
0A84E:  CALL   243E
.................... 	
.................... 		dem_maxima_aparente_ant = 0;
0A852:  MOVLB  2
0A854:  CLRF   x71
0A856:  CLRF   x70
.................... 		dem_maxima_ativa_ant = 0;
0A858:  CLRF   x6F
0A85A:  CLRF   x6E
.................... 		
.................... 	 	write_word(ee_dem_maxima_aparente_ant,0);
0A85C:  MOVLB  A
0A85E:  CLRF   x5D
0A860:  MOVLW  FC
0A862:  MOVWF  x5C
0A864:  CLRF   x5F
0A866:  CLRF   x5E
0A868:  MOVLB  0
0A86A:  CALL   23AE
.................... 	 	write_word(ee_dem_maxima_ativa_ant,0);
0A86E:  MOVLB  A
0A870:  CLRF   x5D
0A872:  MOVLW  FE
0A874:  MOVWF  x5C
0A876:  CLRF   x5F
0A878:  CLRF   x5E
0A87A:  MOVLB  0
0A87C:  CALL   23AE
.................... 	#endif
0A880:  GOTO   B84A (RETURN)
.................... }
.................... 
.................... 
.................... void integra_consumo(void){
.................... 	int32 soma_consumo;
.................... 	float aux_f1;
.................... 	if (modo_funca != 1){
*
14F86:  MOVLB  4
14F88:  DECFSZ xA7,W
14F8A:  BRA    14F8E
14F8C:  BRA    14F92
.................... 		return;
14F8E:  GOTO   158E8
.................... 	}
.................... 	
.................... 	#if (st8500c == true)
.................... 		aux_w1 = 120;		// como integralizamos a cada 30 segundos, deve ser multiplicado por 2.
14F92:  MOVLB  3
14F94:  CLRF   x63
14F96:  MOVLW  78
14F98:  MOVWF  x62
.................... 	#else
.................... 		aux_w1 = 60;
.................... 	#endif
.................... 	periodo_soma = (word)(nro_soma_consumo * aux_w1);		// multiplica cada valor integrado 
14F9A:  MOVFF  439,A67
14F9E:  MOVFF  438,A66
14FA2:  MOVFF  363,A69
14FA6:  MOVFF  362,A68
14FAA:  MOVLB  0
14FAC:  CALL   473C
14FB0:  MOVFF  02,485
14FB4:  MOVFF  01,484
.................... 
.................... 	aux_b1 = minuto - 1;
14FB8:  MOVLW  01
14FBA:  MOVLB  3
14FBC:  SUBWF  xC3,W
14FBE:  MOVWF  xB1
.................... 	if (aux_b1 == 255){
14FC0:  INCFSZ xB1,W
14FC2:  BRA    14FC8
.................... 		aux_b1 = 59;
14FC4:  MOVLW  3B
14FC6:  MOVWF  xB1
.................... 	}
.................... 	aux_b1 = aux_b1 * 2;
14FC8:  BCF    FD8.0
14FCA:  RLCF   xB1,F
.................... 															// por 60 para dar 1 minuto(3600 segundos)
.................... // integra/calcula consumo ativo		
.................... 	#if (com_demanda == true)
.................... 		aux_l2 = soma_dem_apa_r;
14FCC:  MOVFF  455,377
14FD0:  MOVFF  454,376
14FD4:  MOVFF  453,375
14FD8:  MOVFF  452,374
.................... 		dem_apa_r = (int16)(aux_l2 / nro_soma_consumo);
14FDC:  BCF    FD8.1
14FDE:  MOVFF  377,A73
14FE2:  MOVFF  376,A72
14FE6:  MOVFF  375,A71
14FEA:  MOVFF  374,A70
14FEE:  MOVLB  A
14FF0:  CLRF   x77
14FF2:  CLRF   x76
14FF4:  MOVFF  439,A75
14FF8:  MOVFF  438,A74
14FFC:  MOVLB  0
14FFE:  CALL   6858
15002:  MOVFF  01,475
15006:  MOVFF  00,474
.................... 		aux_l2 = soma_dem_apa_s; 
1500A:  MOVFF  459,377
1500E:  MOVFF  458,376
15012:  MOVFF  457,375
15016:  MOVFF  456,374
.................... 		dem_apa_s = (int16)(aux_l2 / nro_soma_consumo);
1501A:  BCF    FD8.1
1501C:  MOVFF  377,A73
15020:  MOVFF  376,A72
15024:  MOVFF  375,A71
15028:  MOVFF  374,A70
1502C:  MOVLB  A
1502E:  CLRF   x77
15030:  CLRF   x76
15032:  MOVFF  439,A75
15036:  MOVFF  438,A74
1503A:  MOVLB  0
1503C:  CALL   6858
15040:  MOVFF  01,477
15044:  MOVFF  00,476
.................... 		aux_l2 = soma_dem_apa_t; 
15048:  MOVFF  45D,377
1504C:  MOVFF  45C,376
15050:  MOVFF  45B,375
15054:  MOVFF  45A,374
.................... 		dem_apa_t = (int16)(aux_l2 / nro_soma_consumo);
15058:  BCF    FD8.1
1505A:  MOVFF  377,A73
1505E:  MOVFF  376,A72
15062:  MOVFF  375,A71
15066:  MOVFF  374,A70
1506A:  MOVLB  A
1506C:  CLRF   x77
1506E:  CLRF   x76
15070:  MOVFF  439,A75
15074:  MOVFF  438,A74
15078:  MOVLB  0
1507A:  CALL   6858
1507E:  MOVFF  01,479
15082:  MOVFF  00,478
.................... 		aux_l2 = dem_apa_r;
15086:  MOVLB  3
15088:  CLRF   x77
1508A:  CLRF   x76
1508C:  MOVFF  475,375
15090:  MOVFF  474,374
.................... 		aux_l2 += dem_apa_s; 
15094:  MOVLB  4
15096:  MOVF   x76,W
15098:  MOVLB  3
1509A:  ADDWF  x74,F
1509C:  MOVLB  4
1509E:  MOVF   x77,W
150A0:  MOVLB  3
150A2:  ADDWFC x75,F
150A4:  MOVLW  00
150A6:  ADDWFC x76,F
150A8:  ADDWFC x77,F
.................... 		aux_l2 += dem_apa_t;
150AA:  MOVLB  4
150AC:  MOVF   x78,W
150AE:  MOVLB  3
150B0:  ADDWF  x74,F
150B2:  MOVLB  4
150B4:  MOVF   x79,W
150B6:  MOVLB  3
150B8:  ADDWFC x75,F
150BA:  MOVLW  00
150BC:  ADDWFC x76,F
150BE:  ADDWFC x77,F
.................... 		aux_l2 *= valor_tp;
150C0:  MOVFF  377,A75
150C4:  MOVFF  376,A74
150C8:  MOVFF  375,A73
150CC:  MOVFF  374,A72
150D0:  MOVLB  A
150D2:  CLRF   x79
150D4:  CLRF   x78
150D6:  MOVFF  4C2,A77
150DA:  MOVFF  4C1,A76
150DE:  MOVLB  0
150E0:  CALL   67FC
150E4:  MOVFF  03,377
150E8:  MOVFF  02,376
150EC:  MOVFF  01,375
150F0:  MOVFF  00,374
.................... 		dem_aparente = (int16)(aux_l2 / 32);
150F4:  MOVLB  3
150F6:  RRCF   x77,W
150F8:  MOVWF  03
150FA:  RRCF   x76,W
150FC:  MOVWF  02
150FE:  RRCF   x75,W
15100:  MOVWF  01
15102:  RRCF   x74,W
15104:  MOVWF  00
15106:  RRCF   03,F
15108:  RRCF   02,F
1510A:  RRCF   01,F
1510C:  RRCF   00,F
1510E:  RRCF   03,F
15110:  RRCF   02,F
15112:  RRCF   01,F
15114:  RRCF   00,F
15116:  RRCF   03,F
15118:  RRCF   02,F
1511A:  RRCF   01,F
1511C:  RRCF   00,F
1511E:  RRCF   03,F
15120:  RRCF   02,F
15122:  RRCF   01,F
15124:  RRCF   00,F
15126:  MOVLW  07
15128:  ANDWF  03,F
1512A:  MOVFF  01,47B
1512E:  MOVFF  00,47A
.................... 	
.................... 		write_word((ee_buf_dem_aparente + aux_b1), dem_aparente);
15132:  MOVLW  08
15134:  ADDWF  xB1,W
15136:  MOVLB  A
15138:  MOVWF  x52
1513A:  MOVLW  02
1513C:  MOVWF  x53
1513E:  BTFSC  FD8.0
15140:  INCF   x53,F
15142:  MOVFF  A53,A5D
15146:  MOVFF  A52,A5C
1514A:  MOVFF  47B,A5F
1514E:  MOVFF  47A,A5E
15152:  MOVLB  0
15154:  CALL   23AE
.................... 	#endif
.................... 
.................... 	#if (com_demanda == true)
.................... 	    aux_l2 = soma_consumo_r;
15158:  MOVFF  43D,377
1515C:  MOVFF  43C,376
15160:  MOVFF  43B,375
15164:  MOVFF  43A,374
.................... 		demanda_r = (int16)(aux_l2 / nro_soma_consumo);	
15168:  BCF    FD8.1
1516A:  MOVFF  377,A73
1516E:  MOVFF  376,A72
15172:  MOVFF  375,A71
15176:  MOVFF  374,A70
1517A:  MOVLB  A
1517C:  CLRF   x77
1517E:  CLRF   x76
15180:  MOVFF  439,A75
15184:  MOVFF  438,A74
15188:  MOVLB  0
1518A:  CALL   6858
1518E:  MOVFF  01,47D
15192:  MOVFF  00,47C
.................... 	    aux_l2 = soma_consumo_s;
15196:  MOVFF  441,377
1519A:  MOVFF  440,376
1519E:  MOVFF  43F,375
151A2:  MOVFF  43E,374
.................... 		demanda_s = (int16)(aux_l2 / nro_soma_consumo);
151A6:  BCF    FD8.1
151A8:  MOVFF  377,A73
151AC:  MOVFF  376,A72
151B0:  MOVFF  375,A71
151B4:  MOVFF  374,A70
151B8:  MOVLB  A
151BA:  CLRF   x77
151BC:  CLRF   x76
151BE:  MOVFF  439,A75
151C2:  MOVFF  438,A74
151C6:  MOVLB  0
151C8:  CALL   6858
151CC:  MOVFF  01,47F
151D0:  MOVFF  00,47E
.................... 	    aux_l2 = soma_consumo_t;
151D4:  MOVFF  445,377
151D8:  MOVFF  444,376
151DC:  MOVFF  443,375
151E0:  MOVFF  442,374
.................... 		demanda_t = (int16)(aux_l2 / nro_soma_consumo);	
151E4:  BCF    FD8.1
151E6:  MOVFF  377,A73
151EA:  MOVFF  376,A72
151EE:  MOVFF  375,A71
151F2:  MOVFF  374,A70
151F6:  MOVLB  A
151F8:  CLRF   x77
151FA:  CLRF   x76
151FC:  MOVFF  439,A75
15200:  MOVFF  438,A74
15204:  MOVLB  0
15206:  CALL   6858
1520A:  MOVFF  01,481
1520E:  MOVFF  00,480
.................... 		aux_l2 = demanda_r;
15212:  MOVLB  3
15214:  CLRF   x77
15216:  CLRF   x76
15218:  MOVFF  47D,375
1521C:  MOVFF  47C,374
.................... 		aux_l2 += demanda_s; 
15220:  MOVLB  4
15222:  MOVF   x7E,W
15224:  MOVLB  3
15226:  ADDWF  x74,F
15228:  MOVLB  4
1522A:  MOVF   x7F,W
1522C:  MOVLB  3
1522E:  ADDWFC x75,F
15230:  MOVLW  00
15232:  ADDWFC x76,F
15234:  ADDWFC x77,F
.................... 		aux_l2 += demanda_t;
15236:  MOVLB  4
15238:  MOVF   x80,W
1523A:  MOVLB  3
1523C:  ADDWF  x74,F
1523E:  MOVLB  4
15240:  MOVF   x81,W
15242:  MOVLB  3
15244:  ADDWFC x75,F
15246:  MOVLW  00
15248:  ADDWFC x76,F
1524A:  ADDWFC x77,F
.................... 		aux_l2 *= valor_tp;
1524C:  MOVFF  377,A75
15250:  MOVFF  376,A74
15254:  MOVFF  375,A73
15258:  MOVFF  374,A72
1525C:  MOVLB  A
1525E:  CLRF   x79
15260:  CLRF   x78
15262:  MOVFF  4C2,A77
15266:  MOVFF  4C1,A76
1526A:  MOVLB  0
1526C:  CALL   67FC
15270:  MOVFF  03,377
15274:  MOVFF  02,376
15278:  MOVFF  01,375
1527C:  MOVFF  00,374
.................... 		dem_ativa = (int16)(aux_l2 / 32);
15280:  MOVLB  3
15282:  RRCF   x77,W
15284:  MOVWF  03
15286:  RRCF   x76,W
15288:  MOVWF  02
1528A:  RRCF   x75,W
1528C:  MOVWF  01
1528E:  RRCF   x74,W
15290:  MOVWF  00
15292:  RRCF   03,F
15294:  RRCF   02,F
15296:  RRCF   01,F
15298:  RRCF   00,F
1529A:  RRCF   03,F
1529C:  RRCF   02,F
1529E:  RRCF   01,F
152A0:  RRCF   00,F
152A2:  RRCF   03,F
152A4:  RRCF   02,F
152A6:  RRCF   01,F
152A8:  RRCF   00,F
152AA:  RRCF   03,F
152AC:  RRCF   02,F
152AE:  RRCF   01,F
152B0:  RRCF   00,F
152B2:  MOVLW  07
152B4:  ANDWF  03,F
152B6:  MOVFF  01,277
152BA:  MOVFF  00,276
.................... 		
.................... 		write_word((ee_buf_dem_ativa + aux_b1), dem_ativa);
152BE:  MOVLW  90
152C0:  ADDWF  xB1,W
152C2:  MOVLB  A
152C4:  MOVWF  x52
152C6:  MOVLW  01
152C8:  MOVWF  x53
152CA:  BTFSC  FD8.0
152CC:  INCF   x53,F
152CE:  MOVFF  A53,A5D
152D2:  MOVFF  A52,A5C
152D6:  MOVFF  277,A5F
152DA:  MOVFF  276,A5E
152DE:  MOVLB  0
152E0:  CALL   23AE
.................... 	#endif
.................... 	#if (st8500c == true)
.................... 		#if (com_tc == true)
.................... 			aux_b1 = minuto + 15;
152E4:  MOVLW  0F
152E6:  MOVLB  3
152E8:  ADDWF  xC3,W
152EA:  MOVWF  xB1
.................... 			if (aux_b1 > 59)
152EC:  MOVF   xB1,W
152EE:  SUBLW  3B
152F0:  BC    152F6
.................... 				{
.................... 				aux_b1 = aux_b1 - 59;
152F2:  MOVLW  3B
152F4:  SUBWF  xB1,F
.................... 				}
.................... 			write_word((ee_buf_dem_ativa + (aux_b1 * 2)), 0);			// apaga a demanda do intervalo futuro.
152F6:  BCF    FD8.0
152F8:  RLCF   xB1,W
152FA:  ADDLW  90
152FC:  MOVLB  A
152FE:  MOVWF  x52
15300:  MOVLW  01
15302:  MOVWF  x53
15304:  BTFSC  FD8.0
15306:  INCF   x53,F
15308:  MOVFF  A53,A5D
1530C:  MOVFF  A52,A5C
15310:  CLRF   x5F
15312:  CLRF   x5E
15314:  MOVLB  0
15316:  CALL   23AE
.................... 			write_word((ee_buf_dem_aparente + (aux_b1 * 2)), 0);
1531A:  BCF    FD8.0
1531C:  MOVLB  3
1531E:  RLCF   xB1,W
15320:  ADDLW  08
15322:  MOVLB  A
15324:  MOVWF  x52
15326:  MOVLW  02
15328:  MOVWF  x53
1532A:  BTFSC  FD8.0
1532C:  INCF   x53,F
1532E:  MOVFF  A53,A5D
15332:  MOVFF  A52,A5C
15336:  CLRF   x5F
15338:  CLRF   x5E
1533A:  MOVLB  0
1533C:  CALL   23AE
.................... 		#endif
.................... 	#endif
.................... 
.................... 	soma_consumo = soma_consumo_r + soma_consumo_s + soma_consumo_t;
15340:  MOVLB  4
15342:  MOVF   x3E,W
15344:  ADDWF  x3A,W
15346:  MOVLB  A
15348:  MOVWF  x52
1534A:  MOVLB  4
1534C:  MOVF   x3F,W
1534E:  ADDWFC x3B,W
15350:  MOVLB  A
15352:  MOVWF  x53
15354:  MOVLB  4
15356:  MOVF   x40,W
15358:  ADDWFC x3C,W
1535A:  MOVLB  A
1535C:  MOVWF  x54
1535E:  MOVLB  4
15360:  MOVF   x41,W
15362:  ADDWFC x3D,W
15364:  MOVLB  A
15366:  MOVWF  x55
15368:  MOVLB  4
1536A:  MOVF   x42,W
1536C:  MOVLB  A
1536E:  ADDWF  x52,W
15370:  MOVWF  x4A
15372:  MOVLB  4
15374:  MOVF   x43,W
15376:  MOVLB  A
15378:  ADDWFC x53,W
1537A:  MOVWF  x4B
1537C:  MOVLB  4
1537E:  MOVF   x44,W
15380:  MOVLB  A
15382:  ADDWFC x54,W
15384:  MOVWF  x4C
15386:  MOVLB  4
15388:  MOVF   x45,W
1538A:  MOVLB  A
1538C:  ADDWFC x55,W
1538E:  MOVWF  x4D
.................... 	aux_f1 = soma_consumo;
15390:  MOVFF  A4D,A7C
15394:  MOVFF  A4C,A7B
15398:  MOVFF  A4B,A7A
1539C:  MOVFF  A4A,A79
153A0:  MOVLB  0
153A2:  CALL   5438
153A6:  MOVFF  03,A51
153AA:  MOVFF  02,A50
153AE:  MOVFF  01,A4F
153B2:  MOVFF  00,A4E
.................... 	consumo_r_tmp += (float)(aux_f1 / periodo_soma);
153B6:  MOVFF  485,A7E
153BA:  MOVFF  484,A7D
153BE:  CALL   2924
153C2:  MOVFF  A51,A83
153C6:  MOVFF  A50,A82
153CA:  MOVFF  A4F,A81
153CE:  MOVFF  A4E,A80
153D2:  MOVFF  03,A87
153D6:  MOVFF  02,A86
153DA:  MOVFF  01,A85
153DE:  MOVFF  00,A84
153E2:  CALL   295A
153E6:  BCF    FD8.1
153E8:  MOVFF  461,A83
153EC:  MOVFF  460,A82
153F0:  MOVFF  45F,A81
153F4:  MOVFF  45E,A80
153F8:  MOVFF  03,A87
153FC:  MOVFF  02,A86
15400:  MOVFF  01,A85
15404:  MOVFF  00,A84
15408:  RCALL  14D0E
1540A:  MOVFF  03,461
1540E:  MOVFF  02,460
15412:  MOVFF  01,45F
15416:  MOVFF  00,45E
.................... 
.................... 	#if(com_rep)
.................... 		consumo_tmp = (int16)(consumo_r_tmp);
.................... 		consumo_r_tmp = (float)(consumo_r_tmp - consumo_tmp);
.................... 	#else
.................... 		consumo_tmp = (int16)(consumo_r_tmp / 32);
1541A:  MOVFF  461,A83
1541E:  MOVFF  460,A82
15422:  MOVFF  45F,A81
15426:  MOVFF  45E,A80
1542A:  MOVLB  A
1542C:  CLRF   x87
1542E:  CLRF   x86
15430:  CLRF   x85
15432:  MOVLW  84
15434:  MOVWF  x84
15436:  MOVLB  0
15438:  CALL   295A
1543C:  MOVFF  03,A7C
15440:  MOVFF  02,A7B
15444:  MOVFF  01,A7A
15448:  MOVFF  00,A79
1544C:  CALL   53FC
15450:  MOVFF  02,483
15454:  MOVFF  01,482
.................... 		consumo_r_tmp = (float)(consumo_r_tmp - (consumo_tmp * 32));
15458:  MOVLB  4
1545A:  RLCF   x82,W
1545C:  MOVWF  02
1545E:  RLCF   x83,W
15460:  MOVWF  03
15462:  RLCF   02,F
15464:  RLCF   03,F
15466:  RLCF   02,F
15468:  RLCF   03,F
1546A:  RLCF   02,F
1546C:  RLCF   03,F
1546E:  RLCF   02,F
15470:  RLCF   03,F
15472:  MOVLW  E0
15474:  ANDWF  02,F
15476:  MOVFF  02,A7D
1547A:  MOVFF  03,A7E
1547E:  MOVLB  0
15480:  CALL   2924
15484:  BSF    FD8.1
15486:  MOVFF  461,A83
1548A:  MOVFF  460,A82
1548E:  MOVFF  45F,A81
15492:  MOVFF  45E,A80
15496:  MOVFF  03,A87
1549A:  MOVFF  02,A86
1549E:  MOVFF  01,A85
154A2:  MOVFF  00,A84
154A6:  RCALL  14D0E
154A8:  MOVFF  03,461
154AC:  MOVFF  02,460
154B0:  MOVFF  01,45F
154B4:  MOVFF  00,45E
.................... 	#endif
.................... 	consumo_l = read_word(ee_consumo_l);	
154B8:  MOVLW  01
154BA:  MOVLB  A
154BC:  MOVWF  x5D
154BE:  MOVLW  14
154C0:  MOVWF  x5C
154C2:  MOVLB  0
154C4:  CALL   170A
154C8:  MOVFF  02,467
154CC:  MOVFF  01,466
.................... 	consumo_h = read_word(ee_consumo_h);	
154D0:  MOVLW  01
154D2:  MOVLB  A
154D4:  MOVWF  x5D
154D6:  MOVLW  16
154D8:  MOVWF  x5C
154DA:  MOVLB  0
154DC:  CALL   170A
154E0:  MOVFF  02,469
154E4:  MOVFF  01,468
.................... 	consumo = make32(consumo_h,consumo_l);
154E8:  MOVFF  468,46C
154EC:  MOVFF  469,46D
154F0:  MOVFF  466,46A
154F4:  MOVFF  467,46B
.................... 	consumo += consumo_tmp;
154F8:  MOVLB  4
154FA:  MOVF   x82,W
154FC:  ADDWF  x6A,F
154FE:  MOVF   x83,W
15500:  ADDWFC x6B,F
15502:  MOVLW  00
15504:  ADDWFC x6C,F
15506:  ADDWFC x6D,F
.................... 	consumo_l = consumo;
15508:  MOVFF  46B,467
1550C:  MOVFF  46A,466
.................... 	consumo_h = consumo >> 16;
15510:  MOVFF  46C,468
15514:  MOVFF  46D,469
.................... 
.................... 	write_word(ee_consumo_l, consumo_l);
15518:  MOVLW  01
1551A:  MOVLB  A
1551C:  MOVWF  x5D
1551E:  MOVLW  14
15520:  MOVWF  x5C
15522:  MOVFF  467,A5F
15526:  MOVFF  466,A5E
1552A:  MOVLB  0
1552C:  CALL   23AE
.................... 	write_word(ee_consumo_h, consumo_h);
15530:  MOVLW  01
15532:  MOVLB  A
15534:  MOVWF  x5D
15536:  MOVLW  16
15538:  MOVWF  x5C
1553A:  MOVFF  469,A5F
1553E:  MOVFF  468,A5E
15542:  MOVLB  0
15544:  CALL   23AE
.................... 
.................... 	consumo_ati = consumo;
15548:  MOVFF  46D,42F
1554C:  MOVFF  46C,42E
15550:  MOVFF  46B,42D
15554:  MOVFF  46A,42C
.................... 
.................... 	soma_consumo_r = 0;
15558:  MOVLB  4
1555A:  CLRF   x3D
1555C:  CLRF   x3C
1555E:  CLRF   x3B
15560:  CLRF   x3A
.................... 	soma_consumo_s = 0;
15562:  CLRF   x41
15564:  CLRF   x40
15566:  CLRF   x3F
15568:  CLRF   x3E
.................... 	soma_consumo_t = 0;
1556A:  CLRF   x45
1556C:  CLRF   x44
1556E:  CLRF   x43
15570:  CLRF   x42
.................... 		
.................... // integra/calcula consumo reativo		
....................     aux_l2 = soma_consumo_rea_r;
15572:  MOVFF  449,377
15576:  MOVFF  448,376
1557A:  MOVFF  447,375
1557E:  MOVFF  446,374
.................... 	dem_reat_r = (int16)(aux_l2 / nro_soma_consumo);	
15582:  BCF    FD8.1
15584:  MOVFF  377,A73
15588:  MOVFF  376,A72
1558C:  MOVFF  375,A71
15590:  MOVFF  374,A70
15594:  MOVLB  A
15596:  CLRF   x77
15598:  CLRF   x76
1559A:  MOVFF  439,A75
1559E:  MOVFF  438,A74
155A2:  MOVLB  0
155A4:  CALL   6858
155A8:  MOVFF  01,46F
155AC:  MOVFF  00,46E
....................     aux_l2 = soma_consumo_rea_s;
155B0:  MOVFF  44D,377
155B4:  MOVFF  44C,376
155B8:  MOVFF  44B,375
155BC:  MOVFF  44A,374
.................... 	dem_reat_s = (int16)(aux_l2 / nro_soma_consumo);
155C0:  BCF    FD8.1
155C2:  MOVFF  377,A73
155C6:  MOVFF  376,A72
155CA:  MOVFF  375,A71
155CE:  MOVFF  374,A70
155D2:  MOVLB  A
155D4:  CLRF   x77
155D6:  CLRF   x76
155D8:  MOVFF  439,A75
155DC:  MOVFF  438,A74
155E0:  MOVLB  0
155E2:  CALL   6858
155E6:  MOVFF  01,471
155EA:  MOVFF  00,470
....................     aux_l2 = soma_consumo_rea_t;
155EE:  MOVFF  451,377
155F2:  MOVFF  450,376
155F6:  MOVFF  44F,375
155FA:  MOVFF  44E,374
.................... 	dem_reat_t = (int16)(aux_l2 / nro_soma_consumo);	
155FE:  BCF    FD8.1
15600:  MOVFF  377,A73
15604:  MOVFF  376,A72
15608:  MOVFF  375,A71
1560C:  MOVFF  374,A70
15610:  MOVLB  A
15612:  CLRF   x77
15614:  CLRF   x76
15616:  MOVFF  439,A75
1561A:  MOVFF  438,A74
1561E:  MOVLB  0
15620:  CALL   6858
15624:  MOVFF  01,473
15628:  MOVFF  00,472
.................... 	aux_l2 = dem_reat_r;
1562C:  MOVLB  3
1562E:  CLRF   x77
15630:  CLRF   x76
15632:  MOVFF  46F,375
15636:  MOVFF  46E,374
.................... 	aux_l2 += dem_reat_s; 
1563A:  MOVLB  4
1563C:  MOVF   x70,W
1563E:  MOVLB  3
15640:  ADDWF  x74,F
15642:  MOVLB  4
15644:  MOVF   x71,W
15646:  MOVLB  3
15648:  ADDWFC x75,F
1564A:  MOVLW  00
1564C:  ADDWFC x76,F
1564E:  ADDWFC x77,F
.................... 	aux_l2 += dem_reat_t; 
15650:  MOVLB  4
15652:  MOVF   x72,W
15654:  MOVLB  3
15656:  ADDWF  x74,F
15658:  MOVLB  4
1565A:  MOVF   x73,W
1565C:  MOVLB  3
1565E:  ADDWFC x75,F
15660:  MOVLW  00
15662:  ADDWFC x76,F
15664:  ADDWFC x77,F
.................... 	aux_l2 *= valor_tp;
15666:  MOVFF  377,A75
1566A:  MOVFF  376,A74
1566E:  MOVFF  375,A73
15672:  MOVFF  374,A72
15676:  MOVLB  A
15678:  CLRF   x79
1567A:  CLRF   x78
1567C:  MOVFF  4C2,A77
15680:  MOVFF  4C1,A76
15684:  MOVLB  0
15686:  CALL   67FC
1568A:  MOVFF  03,377
1568E:  MOVFF  02,376
15692:  MOVFF  01,375
15696:  MOVFF  00,374
.................... 	dem_reativa = (int16)(aux_l2 / 32);
1569A:  MOVLB  3
1569C:  RRCF   x77,W
1569E:  MOVWF  03
156A0:  RRCF   x76,W
156A2:  MOVWF  02
156A4:  RRCF   x75,W
156A6:  MOVWF  01
156A8:  RRCF   x74,W
156AA:  MOVWF  00
156AC:  RRCF   03,F
156AE:  RRCF   02,F
156B0:  RRCF   01,F
156B2:  RRCF   00,F
156B4:  RRCF   03,F
156B6:  RRCF   02,F
156B8:  RRCF   01,F
156BA:  RRCF   00,F
156BC:  RRCF   03,F
156BE:  RRCF   02,F
156C0:  RRCF   01,F
156C2:  RRCF   00,F
156C4:  RRCF   03,F
156C6:  RRCF   02,F
156C8:  RRCF   01,F
156CA:  RRCF   00,F
156CC:  MOVLW  07
156CE:  ANDWF  03,F
156D0:  MOVFF  01,279
156D4:  MOVFF  00,278
.................... 
.................... 	soma_consumo = soma_consumo_rea_r + soma_consumo_rea_s + soma_consumo_rea_t;
156D8:  MOVLB  4
156DA:  MOVF   x4A,W
156DC:  ADDWF  x46,W
156DE:  MOVLB  A
156E0:  MOVWF  x52
156E2:  MOVLB  4
156E4:  MOVF   x4B,W
156E6:  ADDWFC x47,W
156E8:  MOVLB  A
156EA:  MOVWF  x53
156EC:  MOVLB  4
156EE:  MOVF   x4C,W
156F0:  ADDWFC x48,W
156F2:  MOVLB  A
156F4:  MOVWF  x54
156F6:  MOVLB  4
156F8:  MOVF   x4D,W
156FA:  ADDWFC x49,W
156FC:  MOVLB  A
156FE:  MOVWF  x55
15700:  MOVLB  4
15702:  MOVF   x4E,W
15704:  MOVLB  A
15706:  ADDWF  x52,W
15708:  MOVWF  x4A
1570A:  MOVLB  4
1570C:  MOVF   x4F,W
1570E:  MOVLB  A
15710:  ADDWFC x53,W
15712:  MOVWF  x4B
15714:  MOVLB  4
15716:  MOVF   x50,W
15718:  MOVLB  A
1571A:  ADDWFC x54,W
1571C:  MOVWF  x4C
1571E:  MOVLB  4
15720:  MOVF   x51,W
15722:  MOVLB  A
15724:  ADDWFC x55,W
15726:  MOVWF  x4D
.................... 	aux_f1 = soma_consumo;
15728:  MOVFF  A4D,A7C
1572C:  MOVFF  A4C,A7B
15730:  MOVFF  A4B,A7A
15734:  MOVFF  A4A,A79
15738:  MOVLB  0
1573A:  CALL   5438
1573E:  MOVFF  03,A51
15742:  MOVFF  02,A50
15746:  MOVFF  01,A4F
1574A:  MOVFF  00,A4E
.................... 	consumo_reati_r_tmp += (float)(aux_f1 / periodo_soma);
1574E:  MOVFF  485,A7E
15752:  MOVFF  484,A7D
15756:  CALL   2924
1575A:  MOVFF  A51,A83
1575E:  MOVFF  A50,A82
15762:  MOVFF  A4F,A81
15766:  MOVFF  A4E,A80
1576A:  MOVFF  03,A87
1576E:  MOVFF  02,A86
15772:  MOVFF  01,A85
15776:  MOVFF  00,A84
1577A:  CALL   295A
1577E:  BCF    FD8.1
15780:  MOVFF  465,A83
15784:  MOVFF  464,A82
15788:  MOVFF  463,A81
1578C:  MOVFF  462,A80
15790:  MOVFF  03,A87
15794:  MOVFF  02,A86
15798:  MOVFF  01,A85
1579C:  MOVFF  00,A84
157A0:  CALL   14D0E
157A4:  MOVFF  03,465
157A8:  MOVFF  02,464
157AC:  MOVFF  01,463
157B0:  MOVFF  00,462
.................... 
.................... 	consumo_tmp = (int16)(consumo_reati_r_tmp);
157B4:  MOVFF  465,A7C
157B8:  MOVFF  464,A7B
157BC:  MOVFF  463,A7A
157C0:  MOVFF  462,A79
157C4:  CALL   53FC
157C8:  MOVFF  02,483
157CC:  MOVFF  01,482
.................... 	consumo_reati_r_tmp = (float)(consumo_reati_r_tmp - consumo_tmp);
157D0:  MOVFF  483,A7E
157D4:  MOVFF  482,A7D
157D8:  CALL   2924
157DC:  BSF    FD8.1
157DE:  MOVFF  465,A83
157E2:  MOVFF  464,A82
157E6:  MOVFF  463,A81
157EA:  MOVFF  462,A80
157EE:  MOVFF  03,A87
157F2:  MOVFF  02,A86
157F6:  MOVFF  01,A85
157FA:  MOVFF  00,A84
157FE:  CALL   14D0E
15802:  MOVFF  03,465
15806:  MOVFF  02,464
1580A:  MOVFF  01,463
1580E:  MOVFF  00,462
.................... 
.................... 	consumo_l = read_word(ee_consumo_rea_l);	
15812:  MOVLW  01
15814:  MOVLB  A
15816:  MOVWF  x5D
15818:  MOVLW  18
1581A:  MOVWF  x5C
1581C:  MOVLB  0
1581E:  CALL   170A
15822:  MOVFF  02,467
15826:  MOVFF  01,466
.................... 	consumo_h = read_word(ee_consumo_rea_h);	
1582A:  MOVLW  01
1582C:  MOVLB  A
1582E:  MOVWF  x5D
15830:  MOVLW  1A
15832:  MOVWF  x5C
15834:  MOVLB  0
15836:  CALL   170A
1583A:  MOVFF  02,469
1583E:  MOVFF  01,468
.................... 
.................... 	consumo = make32(consumo_h,consumo_l);
15842:  MOVFF  468,46C
15846:  MOVFF  469,46D
1584A:  MOVFF  466,46A
1584E:  MOVFF  467,46B
.................... 	consumo += consumo_tmp;
15852:  MOVLB  4
15854:  MOVF   x82,W
15856:  ADDWF  x6A,F
15858:  MOVF   x83,W
1585A:  ADDWFC x6B,F
1585C:  MOVLW  00
1585E:  ADDWFC x6C,F
15860:  ADDWFC x6D,F
.................... 	consumo_l = consumo;
15862:  MOVFF  46B,467
15866:  MOVFF  46A,466
.................... 	consumo_h = consumo >> 16;
1586A:  MOVFF  46C,468
1586E:  MOVFF  46D,469
.................... 
.................... 	write_word(ee_consumo_rea_l, consumo_l);
15872:  MOVLW  01
15874:  MOVLB  A
15876:  MOVWF  x5D
15878:  MOVLW  18
1587A:  MOVWF  x5C
1587C:  MOVFF  467,A5F
15880:  MOVFF  466,A5E
15884:  MOVLB  0
15886:  CALL   23AE
.................... 	write_word(ee_consumo_rea_h, consumo_h);
1588A:  MOVLW  01
1588C:  MOVLB  A
1588E:  MOVWF  x5D
15890:  MOVLW  1A
15892:  MOVWF  x5C
15894:  MOVFF  469,A5F
15898:  MOVFF  468,A5E
1589C:  MOVLB  0
1589E:  CALL   23AE
.................... 
.................... 	consumo_reati = consumo;
158A2:  MOVFF  46D,42B
158A6:  MOVFF  46C,42A
158AA:  MOVFF  46B,429
158AE:  MOVFF  46A,428
.................... 
.................... 	soma_consumo_rea_r = 0;
158B2:  MOVLB  4
158B4:  CLRF   x49
158B6:  CLRF   x48
158B8:  CLRF   x47
158BA:  CLRF   x46
.................... 	soma_consumo_rea_s = 0;                           
158BC:  CLRF   x4D
158BE:  CLRF   x4C
158C0:  CLRF   x4B
158C2:  CLRF   x4A
.................... 	soma_consumo_rea_t = 0;
158C4:  CLRF   x51
158C6:  CLRF   x50
158C8:  CLRF   x4F
158CA:  CLRF   x4E
.................... 
.................... //#################################################################################################
.................... 	
.................... 	// Integra/calcula consumo aparente atendendo Maxi Eletro
.................... 	#if (com_consumo_aparente == true)
.................... 		soma_consumo = soma_dem_apa_r + soma_dem_apa_s + soma_dem_apa_t;
.................... 		aux_f1 = soma_consumo;
.................... 		consumo_apa_r_tmp += (float)(aux_f1 / periodo_soma);
.................... 
.................... 		if (consumo_apa_r_tmp > 32){
.................... 			consumo_tmp = (int16)(consumo_apa_r_tmp / 32);
.................... 			consumo_apa_r_tmp = (float)(consumo_apa_r_tmp - (consumo_tmp * 32));			
.................... 			if ((hora >= hora_ponta) && ( hora < hora_final_ponta)){
.................... 				consumo_l = read_word(ee_consumo_apa_l_p);	
.................... 				consumo_h = read_word(ee_consumo_apa_h_p);	
.................... 			}
.................... 			else{
.................... 				consumo_l = read_word(ee_consumo_apa_l);
.................... 				consumo_h = read_word(ee_consumo_apa_h);
.................... 			}
.................... 			consumo = make32(consumo_h,consumo_l);
.................... 			consumo += consumo_tmp;
.................... 			consumo_l = consumo;
.................... 			consumo_h = consumo >> 16;
.................... 			if ((hora >= hora_ponta) && ( hora < hora_final_ponta)){
.................... 				write_word(ee_consumo_apa_l_p, consumo_l);
.................... 				write_word(ee_consumo_apa_h_p, consumo_h);
.................... 			}
.................... 			else{
.................... 				write_word(ee_consumo_apa_l, consumo_l);
.................... 				write_word(ee_consumo_apa_h, consumo_h);
.................... 			}
.................... 		}
.................... 		else
.................... 			{
.................... 			if ((hora >= hora_ponta) && ( hora < hora_final_ponta)){
.................... 				consumo_l = read_word(ee_consumo_apa_l_p);
.................... 				consumo_h = read_word(ee_consumo_apa_h_p);
.................... 			}
.................... 			else{
.................... 				consumo_l = read_word(ee_consumo_apa_l);
.................... 				consumo_h = read_word(ee_consumo_apa_h);
.................... 			}
.................... 			consumo = make32(consumo_h,consumo_l);
.................... 		}
.................... 	
.................... 		if ((hora >= hora_ponta) && ( hora < hora_final_ponta)){
.................... 			consumo_apa_p = consumo;
.................... 		}
.................... 		else{
.................... 			consumo_apa = consumo;
.................... 		}
.................... 		soma_dem_apa_r = 0;
.................... 		soma_dem_apa_s = 0;
.................... 		soma_dem_apa_t = 0;
.................... 	#else
.................... 		#if (com_demanda == true)
.................... 			soma_dem_apa_r = 0;
158CC:  CLRF   x55
158CE:  CLRF   x54
158D0:  CLRF   x53
158D2:  CLRF   x52
.................... 			soma_dem_apa_s = 0;
158D4:  CLRF   x59
158D6:  CLRF   x58
158D8:  CLRF   x57
158DA:  CLRF   x56
.................... 			soma_dem_apa_t = 0;
158DC:  CLRF   x5D
158DE:  CLRF   x5C
158E0:  CLRF   x5B
158E2:  CLRF   x5A
.................... 		#endif
.................... 	#endif
.................... //#################################################################################################
.................... 
.................... 
.................... // reinicializa somatorio de consumo
.................... 	nro_soma_consumo = 0;
158E4:  CLRF   x39
158E6:  CLRF   x38
158E8:  MOVLB  0
158EA:  RETURN 0
.................... 
.................... }
.................... 
.................... void soma_consumo(void){
.................... 	if (modo_funca != 1){
*
14C32:  MOVLB  4
14C34:  DECFSZ xA7,W
14C36:  BRA    14C3A
14C38:  BRA    14C3C
.................... 		return;
14C3A:  BRA    14D08
.................... 	}
.................... 
.................... 	#if(com_rep)
.................... 		aux_l1 = (int32)(pot_ativa_tot / 3);
.................... 		soma_consumo_r += aux_l1;
.................... 		soma_consumo_s += aux_l1;
.................... 		soma_consumo_t += aux_l1;
.................... 	
.................... 		soma_dem_apa_r += pot_aparente_r;
.................... 		soma_dem_apa_s += pot_aparente_s;
.................... 		soma_dem_apa_t += pot_aparente_t;
.................... 	
.................... 		aux_l1 = (int32)(pot_reativa_tot / 3);
.................... 		soma_consumo_rea_r += aux_l1;
.................... 		soma_consumo_rea_s += aux_l1;
.................... 		soma_consumo_rea_t += aux_l1;
.................... 	#else
.................... 		soma_consumo_r += pot_ativa_r;
14C3C:  MOVLB  2
14C3E:  MOVF   x58,W
14C40:  MOVLB  4
14C42:  ADDWF  x3A,F
14C44:  MOVLB  2
14C46:  MOVF   x59,W
14C48:  MOVLB  4
14C4A:  ADDWFC x3B,F
14C4C:  MOVLW  00
14C4E:  ADDWFC x3C,F
14C50:  ADDWFC x3D,F
.................... 		soma_consumo_s += pot_ativa_s;
14C52:  MOVLB  2
14C54:  MOVF   xDC,W
14C56:  MOVLB  4
14C58:  ADDWF  x3E,F
14C5A:  MOVLB  2
14C5C:  MOVF   xDD,W
14C5E:  MOVLB  4
14C60:  ADDWFC x3F,F
14C62:  MOVLW  00
14C64:  ADDWFC x40,F
14C66:  ADDWFC x41,F
.................... 		soma_consumo_t += pot_ativa_t;
14C68:  MOVLB  3
14C6A:  MOVF   x33,W
14C6C:  MOVLB  4
14C6E:  ADDWF  x42,F
14C70:  MOVLB  3
14C72:  MOVF   x34,W
14C74:  MOVLB  4
14C76:  ADDWFC x43,F
14C78:  MOVLW  00
14C7A:  ADDWFC x44,F
14C7C:  ADDWFC x45,F
.................... 	
.................... 		soma_dem_apa_r += pot_aparente_r;
14C7E:  MOVLB  2
14C80:  MOVF   x5A,W
14C82:  MOVLB  4
14C84:  ADDWF  x52,F
14C86:  MOVLB  2
14C88:  MOVF   x5B,W
14C8A:  MOVLB  4
14C8C:  ADDWFC x53,F
14C8E:  MOVLW  00
14C90:  ADDWFC x54,F
14C92:  ADDWFC x55,F
.................... 		soma_dem_apa_s += pot_aparente_s;
14C94:  MOVLB  2
14C96:  MOVF   xDE,W
14C98:  MOVLB  4
14C9A:  ADDWF  x56,F
14C9C:  MOVLB  2
14C9E:  MOVF   xDF,W
14CA0:  MOVLB  4
14CA2:  ADDWFC x57,F
14CA4:  MOVLW  00
14CA6:  ADDWFC x58,F
14CA8:  ADDWFC x59,F
.................... 		soma_dem_apa_t += pot_aparente_t;
14CAA:  MOVLB  3
14CAC:  MOVF   x35,W
14CAE:  MOVLB  4
14CB0:  ADDWF  x5A,F
14CB2:  MOVLB  3
14CB4:  MOVF   x36,W
14CB6:  MOVLB  4
14CB8:  ADDWFC x5B,F
14CBA:  MOVLW  00
14CBC:  ADDWFC x5C,F
14CBE:  ADDWFC x5D,F
.................... 	
.................... 		soma_consumo_rea_r += pot_reativa_r;
14CC0:  MOVLB  2
14CC2:  MOVF   x5C,W
14CC4:  MOVLB  4
14CC6:  ADDWF  x46,F
14CC8:  MOVLB  2
14CCA:  MOVF   x5D,W
14CCC:  MOVLB  4
14CCE:  ADDWFC x47,F
14CD0:  MOVLW  00
14CD2:  ADDWFC x48,F
14CD4:  ADDWFC x49,F
.................... 		soma_consumo_rea_s += pot_reativa_s;
14CD6:  MOVLB  2
14CD8:  MOVF   xE0,W
14CDA:  MOVLB  4
14CDC:  ADDWF  x4A,F
14CDE:  MOVLB  2
14CE0:  MOVF   xE1,W
14CE2:  MOVLB  4
14CE4:  ADDWFC x4B,F
14CE6:  MOVLW  00
14CE8:  ADDWFC x4C,F
14CEA:  ADDWFC x4D,F
.................... 		soma_consumo_rea_t += pot_reativa_t;
14CEC:  MOVLB  3
14CEE:  MOVF   x37,W
14CF0:  MOVLB  4
14CF2:  ADDWF  x4E,F
14CF4:  MOVLB  3
14CF6:  MOVF   x38,W
14CF8:  MOVLB  4
14CFA:  ADDWFC x4F,F
14CFC:  MOVLW  00
14CFE:  ADDWFC x50,F
14D00:  ADDWFC x51,F
.................... 	#endif
.................... 
.................... 	nro_soma_consumo++;
14D02:  INCF   x38,F
14D04:  BTFSC  FD8.2
14D06:  INCF   x39,F
14D08:  MOVLB  0
14D0A:  GOTO   17290 (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... 
.................... #if (com_demanda == true)
.................... 	void calcula_demandas(void)
.................... 	{
.................... 		#if (st8500c == true)
.................... 			word dem_max_ativa_tmp;
.................... 		#endif
.................... 		if (modo_funca != 1)
*
15A3E:  MOVLB  4
15A40:  DECFSZ xA7,W
15A42:  BRA    15A46
15A44:  BRA    15A48
.................... 			{
.................... 			return;
15A46:  BRA    160E8
.................... 			}
.................... 	/* integracao de potencia ativa e aparente média e máxima */		
.................... 	/* calcula potencia ativa e aparente média e máxima */
.................... 		aux_b1 = minuto - 1;
15A48:  MOVLW  01
15A4A:  MOVLB  3
15A4C:  SUBWF  xC3,W
15A4E:  MOVWF  xB1
.................... 		if (aux_b1 == 255)
15A50:  INCFSZ xB1,W
15A52:  BRA    15A58
.................... 			{
.................... 			aux_b1 = 59;
15A54:  MOVLW  3B
15A56:  MOVWF  xB1
.................... 			}
.................... 		aux_w1 = read_word(ee_buf_dem_ativa + (aux_b1 * 2));
15A58:  BCF    FD8.0
15A5A:  RLCF   xB1,W
15A5C:  ADDLW  90
15A5E:  MOVLB  A
15A60:  MOVWF  x4C
15A62:  MOVLW  01
15A64:  MOVWF  x4D
15A66:  BTFSC  FD8.0
15A68:  INCF   x4D,F
15A6A:  MOVFF  A4D,A5D
15A6E:  MOVFF  A4C,A5C
15A72:  MOVLB  0
15A74:  CALL   170A
15A78:  MOVFF  02,363
15A7C:  MOVFF  01,362
.................... 		aux_w2 = read_word(ee_buf_dem_aparente + (aux_b1 * 2));
15A80:  BCF    FD8.0
15A82:  MOVLB  3
15A84:  RLCF   xB1,W
15A86:  ADDLW  08
15A88:  MOVLB  A
15A8A:  MOVWF  x4C
15A8C:  MOVLW  02
15A8E:  MOVWF  x4D
15A90:  BTFSC  FD8.0
15A92:  INCF   x4D,F
15A94:  MOVFF  A4D,A5D
15A98:  MOVFF  A4C,A5C
15A9C:  MOVLB  0
15A9E:  CALL   170A
15AA2:  MOVFF  02,365
15AA6:  MOVFF  01,364
.................... 			
.................... 		if (dem_maxima_aparente < aux_w2)
15AAA:  MOVLB  2
15AAC:  MOVF   x6D,W
15AAE:  MOVLB  3
15AB0:  SUBWF  x65,W
15AB2:  BNC   15ACE
15AB4:  BNZ   15AC6
15AB6:  MOVF   x64,W
15AB8:  MOVLB  2
15ABA:  SUBWF  x6C,W
15ABC:  BTFSS  FD8.0
15ABE:  BRA    15AC4
15AC0:  MOVLB  3
15AC2:  BRA    15ACE
15AC4:  MOVLB  3
.................... 			{
.................... 			dem_maxima_aparente = aux_w2;
15AC6:  MOVFF  365,26D
15ACA:  MOVFF  364,26C
.................... 			}
.................... 		if (dem_maxima_ativa < aux_w1)
15ACE:  MOVLB  2
15AD0:  MOVF   x6B,W
15AD2:  MOVLB  3
15AD4:  SUBWF  x63,W
15AD6:  BNC   15AF2
15AD8:  BNZ   15AEA
15ADA:  MOVF   x62,W
15ADC:  MOVLB  2
15ADE:  SUBWF  x6A,W
15AE0:  BTFSS  FD8.0
15AE2:  BRA    15AE8
15AE4:  MOVLB  3
15AE6:  BRA    15AF2
15AE8:  MOVLB  3
.................... 			{
.................... 			dem_maxima_ativa = aux_w1;
15AEA:  MOVFF  363,26B
15AEE:  MOVFF  362,26A
.................... 			}
.................... 		#if (tc_fixo == true)
.................... 			#if (st8500c == true)
.................... 				if (dem_maxima_ativa > (valor_tc_fixo * ten_nomi * 2))
15AF2:  MOVLW  01
15AF4:  MOVLB  A
15AF6:  MOVWF  x67
15AF8:  MOVLW  F4
15AFA:  MOVWF  x66
15AFC:  MOVFF  4BE,A69
15B00:  MOVFF  4BD,A68
15B04:  MOVLB  0
15B06:  CALL   473C
15B0A:  MOVFF  02,A4D
15B0E:  MOVFF  01,A4C
15B12:  BCF    FD8.0
15B14:  MOVLB  A
15B16:  RLCF   01,W
15B18:  MOVWF  02
15B1A:  RLCF   x4D,W
15B1C:  MOVWF  03
15B1E:  MOVFF  02,01
15B22:  MOVF   03,W
15B24:  MOVLB  2
15B26:  SUBWF  x6B,W
15B28:  BNC   15B36
15B2A:  BNZ   15B32
15B2C:  MOVF   x6A,W
15B2E:  SUBWF  01,W
15B30:  BC    15B36
.................... 					{
.................... 					 dem_maxima_ativa = 0;
15B32:  CLRF   x6B
15B34:  CLRF   x6A
.................... 					}
.................... 				if (dem_maxima_aparente > (valor_tc_fixo * ten_nomi * 2))
15B36:  MOVLW  01
15B38:  MOVLB  A
15B3A:  MOVWF  x67
15B3C:  MOVLW  F4
15B3E:  MOVWF  x66
15B40:  MOVFF  4BE,A69
15B44:  MOVFF  4BD,A68
15B48:  MOVLB  0
15B4A:  CALL   473C
15B4E:  MOVFF  02,A4D
15B52:  MOVFF  01,A4C
15B56:  BCF    FD8.0
15B58:  MOVLB  A
15B5A:  RLCF   01,W
15B5C:  MOVWF  02
15B5E:  RLCF   x4D,W
15B60:  MOVWF  03
15B62:  MOVFF  02,01
15B66:  MOVF   03,W
15B68:  MOVLB  2
15B6A:  SUBWF  x6D,W
15B6C:  BNC   15B7A
15B6E:  BNZ   15B76
15B70:  MOVF   x6C,W
15B72:  SUBWF  01,W
15B74:  BC    15B7A
.................... 					{
.................... 					 dem_maxima_aparente = 0;
15B76:  CLRF   x6D
15B78:  CLRF   x6C
.................... 					}
.................... 			#else
.................... 				if (dem_maxima_ativa > (valor_tc_fixo * ten_nomi * valor_tp * 2))
.................... 					{
.................... 					 dem_maxima_ativa = 0;
.................... 					}
.................... 				if (dem_maxima_aparente > (valor_tc_fixo * ten_nomi * valor_tp * 2))
.................... 					{
.................... 					 dem_maxima_aparente = 0;
.................... 					}
.................... 			#endif
.................... 		#else
.................... 			if (dem_maxima_ativa > (valor_tc * ten_nomi * valor_tp * 2))
.................... 				{
.................... 				 dem_maxima_ativa = 0;
.................... 				}
.................... 			if (dem_maxima_aparente > (valor_tc * ten_nomi * valor_tp * 2))
.................... 				{
.................... 				 dem_maxima_aparente = 0;
.................... 				}
.................... 		#endif
.................... 		if (aux_intervalo_integra > intervalo_integra)
15B7A:  MOVLB  3
15B7C:  MOVF   xF4,F
15B7E:  BNZ   15B8A
15B80:  MOVF   xF3,W
15B82:  MOVLB  4
15B84:  SUBWF  xCF,W
15B86:  BC    15B92
15B88:  MOVLB  3
.................... 			{
.................... 			#if (st8500c == true)
.................... 				aux_intervalo_integra = 1;
15B8A:  CLRF   xF4
15B8C:  MOVLW  01
15B8E:  MOVWF  xF3
15B90:  MOVLB  4
.................... 			#else
.................... 				aux_intervalo_integra = intervalo_integra;
.................... 			#endif
.................... 			}
.................... 		aux_intervalo_integra--;
15B92:  MOVLB  3
15B94:  MOVF   xF3,W
15B96:  BTFSC  FD8.2
15B98:  DECF   xF4,F
15B9A:  DECF   xF3,F
.................... 	
.................... 	//	tendencia_demanda_ativa	
.................... 		
.................... 		if (aux_intervalo_integra == 0)
15B9C:  MOVF   xF3,F
15B9E:  BTFSS  FD8.2
15BA0:  BRA    160E6
15BA2:  MOVF   xF4,F
15BA4:  BTFSS  FD8.2
15BA6:  BRA    160E6
.................... 			{
.................... 			aux_l2 = 0;
15BA8:  CLRF   x77
15BAA:  CLRF   x76
15BAC:  CLRF   x75
15BAE:  CLRF   x74
.................... 			aux_l1 = 0;
15BB0:  CLRF   x73
15BB2:  CLRF   x72
15BB4:  CLRF   x71
15BB6:  CLRF   x70
.................... 			#if (st8500c == true)
.................... 				dem_max_ativa_tmp = 0;
15BB8:  MOVLB  A
15BBA:  CLRF   x4B
15BBC:  CLRF   x4A
.................... 			#endif
.................... 			for (aux_b2 = 0; aux_b2 < intervalo_integra ; aux_b2++)
15BBE:  MOVLB  3
15BC0:  CLRF   xB2
15BC2:  MOVLB  4
15BC4:  MOVF   xCF,W
15BC6:  MOVLB  3
15BC8:  SUBWF  xB2,W
15BCA:  BC    15C8A
.................... 				{                                          
.................... 				aux_l2 += (int32)read_word(ee_buf_dem_aparente + (aux_b1 * 2));
15BCC:  BCF    FD8.0
15BCE:  RLCF   xB1,W
15BD0:  ADDLW  08
15BD2:  MOVLB  A
15BD4:  MOVWF  x4C
15BD6:  MOVLW  02
15BD8:  MOVWF  x4D
15BDA:  BTFSC  FD8.0
15BDC:  INCF   x4D,F
15BDE:  MOVFF  A4D,A5D
15BE2:  MOVFF  A4C,A5C
15BE6:  MOVLB  0
15BE8:  CALL   170A
15BEC:  MOVFF  01,00
15BF0:  MOVFF  02,01
15BF4:  CLRF   02
15BF6:  CLRF   03
15BF8:  MOVF   00,W
15BFA:  MOVLB  3
15BFC:  ADDWF  x74,F
15BFE:  MOVF   01,W
15C00:  ADDWFC x75,F
15C02:  MOVF   02,W
15C04:  ADDWFC x76,F
15C06:  MOVF   03,W
15C08:  ADDWFC x77,F
.................... 				aux_l3 = (int32)read_word(ee_buf_dem_ativa + (aux_b1 * 2));
15C0A:  BCF    FD8.0
15C0C:  RLCF   xB1,W
15C0E:  ADDLW  90
15C10:  MOVLB  A
15C12:  MOVWF  x4C
15C14:  MOVLW  01
15C16:  MOVWF  x4D
15C18:  BTFSC  FD8.0
15C1A:  INCF   x4D,F
15C1C:  MOVFF  A4D,A5D
15C20:  MOVFF  A4C,A5C
15C24:  MOVLB  0
15C26:  CALL   170A
15C2A:  MOVLB  3
15C2C:  CLRF   x7B
15C2E:  CLRF   x7A
15C30:  MOVFF  02,379
15C34:  MOVFF  01,378
.................... 				aux_l1 += aux_l3;
15C38:  MOVF   x78,W
15C3A:  ADDWF  x70,F
15C3C:  MOVF   x79,W
15C3E:  ADDWFC x71,F
15C40:  MOVF   x7A,W
15C42:  ADDWFC x72,F
15C44:  MOVF   x7B,W
15C46:  ADDWFC x73,F
.................... 				
.................... 				aux_b1--;					/* faz minuto = minuto-1 */
15C48:  DECF   xB1,F
.................... 				if (aux_b1 == 255)			/* se virou, recomeça em 59 */
15C4A:  INCFSZ xB1,W
15C4C:  BRA    15C52
.................... 					{
.................... 					aux_b1 = 59;
15C4E:  MOVLW  3B
15C50:  MOVWF  xB1
.................... 					}
.................... 				#if (st8500c == true)
.................... 					if (dem_max_ativa_tmp < aux_l3)
15C52:  MOVF   x7B,F
15C54:  BNZ   15C76
15C56:  MOVF   x7A,F
15C58:  BNZ   15C76
15C5A:  MOVLB  A
15C5C:  MOVF   x4B,W
15C5E:  MOVLB  3
15C60:  SUBWF  x79,W
15C62:  BNC   15C7E
15C64:  BNZ   15C76
15C66:  MOVF   x78,W
15C68:  MOVLB  A
15C6A:  SUBWF  x4A,W
15C6C:  BTFSS  FD8.0
15C6E:  BRA    15C74
15C70:  MOVLB  3
15C72:  BRA    15C7E
15C74:  MOVLB  3
.................... 						{
.................... 						dem_max_ativa_tmp = (word)(aux_l3);
15C76:  MOVFF  379,A4B
15C7A:  MOVFF  378,A4A
.................... 						}
.................... 				#endif
.................... 				pulsa_wdt();
15C7E:  MOVLB  0
15C80:  CALL   2428
15C84:  MOVLB  3
15C86:  INCF   xB2,F
15C88:  BRA    15BC2
.................... 				}
.................... 			dem_media_ativa = (int16)(aux_l1 / intervalo_integra);
15C8A:  BCF    FD8.1
15C8C:  MOVFF  373,A73
15C90:  MOVFF  372,A72
15C94:  MOVFF  371,A71
15C98:  MOVFF  370,A70
15C9C:  MOVLB  A
15C9E:  CLRF   x77
15CA0:  CLRF   x76
15CA2:  CLRF   x75
15CA4:  MOVFF  4CF,A74
15CA8:  MOVLB  0
15CAA:  CALL   6858
15CAE:  MOVFF  01,265
15CB2:  MOVFF  00,264
.................... 			dem_media_aparente = (int16)(aux_l2 / intervalo_integra);
15CB6:  BCF    FD8.1
15CB8:  MOVFF  377,A73
15CBC:  MOVFF  376,A72
15CC0:  MOVFF  375,A71
15CC4:  MOVFF  374,A70
15CC8:  MOVLB  A
15CCA:  CLRF   x77
15CCC:  CLRF   x76
15CCE:  CLRF   x75
15CD0:  MOVFF  4CF,A74
15CD4:  MOVLB  0
15CD6:  CALL   6858
15CDA:  MOVFF  01,267
15CDE:  MOVFF  00,266
.................... 			aux_f1 = (float)(dem_media_ativa);
15CE2:  MOVFF  265,A7E
15CE6:  MOVFF  264,A7D
15CEA:  CALL   2924
15CEE:  MOVFF  03,397
15CF2:  MOVFF  02,396
15CF6:  MOVFF  01,395
15CFA:  MOVFF  00,394
.................... 			aux_f1 = (float)(aux_f1 * aux_f1);
15CFE:  MOVFF  397,A80
15D02:  MOVFF  396,A7F
15D06:  MOVFF  395,A7E
15D0A:  MOVFF  394,A7D
15D0E:  MOVFF  397,A84
15D12:  MOVFF  396,A83
15D16:  MOVFF  395,A82
15D1A:  MOVFF  394,A81
15D1E:  CALL   5306
15D22:  MOVFF  03,397
15D26:  MOVFF  02,396
15D2A:  MOVFF  01,395
15D2E:  MOVFF  00,394
.................... 			aux_f2 = (float)(dem_media_aparente);
15D32:  MOVFF  267,A7E
15D36:  MOVFF  266,A7D
15D3A:  CALL   2924
15D3E:  MOVFF  03,39B
15D42:  MOVFF  02,39A
15D46:  MOVFF  01,399
15D4A:  MOVFF  00,398
.................... 			aux_f2 = (float)(aux_f2 * aux_f2);
15D4E:  MOVFF  39B,A80
15D52:  MOVFF  39A,A7F
15D56:  MOVFF  399,A7E
15D5A:  MOVFF  398,A7D
15D5E:  MOVFF  39B,A84
15D62:  MOVFF  39A,A83
15D66:  MOVFF  399,A82
15D6A:  MOVFF  398,A81
15D6E:  CALL   5306
15D72:  MOVFF  03,39B
15D76:  MOVFF  02,39A
15D7A:  MOVFF  01,399
15D7E:  MOVFF  00,398
.................... 			dem_media_reativa = (word)(sqrtx(aux_f2 - aux_f1));
15D82:  BSF    FD8.1
15D84:  MOVFF  39B,A83
15D88:  MOVFF  39A,A82
15D8C:  MOVFF  399,A81
15D90:  MOVFF  398,A80
15D94:  MOVFF  397,A87
15D98:  MOVFF  396,A86
15D9C:  MOVFF  395,A85
15DA0:  MOVFF  394,A84
15DA4:  CALL   14D0E
15DA8:  MOVFF  03,A4F
15DAC:  MOVFF  02,A4E
15DB0:  MOVFF  01,A4D
15DB4:  MOVFF  00,A4C
15DB8:  MOVFF  03,A75
15DBC:  MOVFF  02,A74
15DC0:  MOVFF  01,A73
15DC4:  MOVFF  00,A72
15DC8:  RCALL  158EC
15DCA:  MOVFF  03,A7C
15DCE:  MOVFF  02,A7B
15DD2:  MOVFF  01,A7A
15DD6:  MOVFF  00,A79
15DDA:  CALL   53FC
15DDE:  MOVFF  02,269
15DE2:  MOVFF  01,268
.................... 			aux_intervalo_integra = 1;	//intervalo_integra;
15DE6:  MOVLB  3
15DE8:  CLRF   xF4
15DEA:  MOVLW  01
15DEC:  MOVWF  xF3
.................... 			write_word(ee_dem_maxima_aparente, dem_maxima_aparente);
15DEE:  MOVLB  A
15DF0:  MOVWF  x5D
15DF2:  CLRF   x5C
15DF4:  MOVFF  26D,A5F
15DF8:  MOVFF  26C,A5E
15DFC:  MOVLB  0
15DFE:  CALL   23AE
.................... 			write_word(ee_dem_maxima_ativa, dem_maxima_ativa);
15E02:  MOVLW  01
15E04:  MOVLB  A
15E06:  MOVWF  x5D
15E08:  MOVLW  02
15E0A:  MOVWF  x5C
15E0C:  MOVFF  26B,A5F
15E10:  MOVFF  26A,A5E
15E14:  MOVLB  0
15E16:  CALL   23AE
.................... 			#if (st8500c == true)
.................... 				#if (com_tc == true)
.................... 					aux_l2 = 0;
15E1A:  MOVLB  3
15E1C:  CLRF   x77
15E1E:  CLRF   x76
15E20:  CLRF   x75
15E22:  CLRF   x74
.................... 					aux_l1 = 0;
15E24:  CLRF   x73
15E26:  CLRF   x72
15E28:  CLRF   x71
15E2A:  CLRF   x70
.................... 					aux_b1 = minuto - 1;
15E2C:  MOVLW  01
15E2E:  SUBWF  xC3,W
15E30:  MOVWF  xB1
.................... 					if (aux_b1 > 59)			/* se virou, recomeça em 59 */
15E32:  MOVF   xB1,W
15E34:  SUBLW  3B
15E36:  BC    15E3C
.................... 						{
.................... 						aux_b1 = 59;
15E38:  MOVLW  3B
15E3A:  MOVWF  xB1
.................... 						}
.................... 					
.................... 	//			fprintf(modbus,"NA cons:%u - %u :", minuto, aux_b1 );
.................... 					for (aux_b2 = 0; aux_b2 < 2 ; aux_b2++)
15E3C:  CLRF   xB2
15E3E:  MOVF   xB2,W
15E40:  SUBLW  01
15E42:  BNC   15ED0
.................... 						{         
.................... 							
.................... 	//			fprintf(modbus,"%lu ;", (int32)read_word(ee_buf_dem_ativa + (aux_b1 * 2)));
.................... 							                                 
.................... 						aux_l2 += (int32)read_word(ee_buf_dem_aparente + (aux_b1 * 2));
15E44:  BCF    FD8.0
15E46:  RLCF   xB1,W
15E48:  ADDLW  08
15E4A:  MOVLB  A
15E4C:  MOVWF  x4C
15E4E:  MOVLW  02
15E50:  MOVWF  x4D
15E52:  BTFSC  FD8.0
15E54:  INCF   x4D,F
15E56:  MOVFF  A4D,A5D
15E5A:  MOVFF  A4C,A5C
15E5E:  MOVLB  0
15E60:  CALL   170A
15E64:  MOVFF  01,00
15E68:  MOVFF  02,01
15E6C:  CLRF   02
15E6E:  CLRF   03
15E70:  MOVF   00,W
15E72:  MOVLB  3
15E74:  ADDWF  x74,F
15E76:  MOVF   01,W
15E78:  ADDWFC x75,F
15E7A:  MOVF   02,W
15E7C:  ADDWFC x76,F
15E7E:  MOVF   03,W
15E80:  ADDWFC x77,F
.................... 						aux_l1 += (int32)read_word(ee_buf_dem_ativa + (aux_b1 * 2));
15E82:  BCF    FD8.0
15E84:  RLCF   xB1,W
15E86:  ADDLW  90
15E88:  MOVLB  A
15E8A:  MOVWF  x4C
15E8C:  MOVLW  01
15E8E:  MOVWF  x4D
15E90:  BTFSC  FD8.0
15E92:  INCF   x4D,F
15E94:  MOVFF  A4D,A5D
15E98:  MOVFF  A4C,A5C
15E9C:  MOVLB  0
15E9E:  CALL   170A
15EA2:  MOVFF  01,00
15EA6:  MOVFF  02,01
15EAA:  CLRF   02
15EAC:  CLRF   03
15EAE:  MOVF   00,W
15EB0:  MOVLB  3
15EB2:  ADDWF  x70,F
15EB4:  MOVF   01,W
15EB6:  ADDWFC x71,F
15EB8:  MOVF   02,W
15EBA:  ADDWFC x72,F
15EBC:  MOVF   03,W
15EBE:  ADDWFC x73,F
.................... 						aux_b1--;					/* faz minuto = minuto-1 */
15EC0:  DECF   xB1,F
.................... 						if (aux_b1 > 59)			/* se virou, recomeça em 59 */
15EC2:  MOVF   xB1,W
15EC4:  SUBLW  3B
15EC6:  BC    15ECC
.................... 							{
.................... 							aux_b1 = 59;
15EC8:  MOVLW  3B
15ECA:  MOVWF  xB1
.................... 							}
15ECC:  INCF   xB2,F
15ECE:  BRA    15E3E
.................... 						}
.................... 					aux_l1 = aux_l1 / 2;
15ED0:  BCF    FD8.0
15ED2:  RRCF   x73,F
15ED4:  RRCF   x72,F
15ED6:  RRCF   x71,F
15ED8:  RRCF   x70,F
.................... 					aux_l2 = aux_l2 / 2;
15EDA:  BCF    FD8.0
15EDC:  RRCF   x77,F
15EDE:  RRCF   x76,F
15EE0:  RRCF   x75,F
15EE2:  RRCF   x74,F
.................... 					dem_ativa_proj = aux_l1;
15EE4:  MOVFF  371,27F
15EE8:  MOVFF  370,27E
.................... 					aux_f1 = (float)(aux_l1);
15EEC:  MOVFF  373,A7C
15EF0:  MOVFF  372,A7B
15EF4:  MOVFF  371,A7A
15EF8:  MOVFF  370,A79
15EFC:  MOVLB  0
15EFE:  CALL   5438
15F02:  MOVFF  03,397
15F06:  MOVFF  02,396
15F0A:  MOVFF  01,395
15F0E:  MOVFF  00,394
.................... 					aux_f1 = (float)(aux_f1 * aux_f1);
15F12:  MOVFF  397,A80
15F16:  MOVFF  396,A7F
15F1A:  MOVFF  395,A7E
15F1E:  MOVFF  394,A7D
15F22:  MOVFF  397,A84
15F26:  MOVFF  396,A83
15F2A:  MOVFF  395,A82
15F2E:  MOVFF  394,A81
15F32:  CALL   5306
15F36:  MOVFF  03,397
15F3A:  MOVFF  02,396
15F3E:  MOVFF  01,395
15F42:  MOVFF  00,394
.................... 					aux_f2 = (float)(aux_l2);
15F46:  MOVFF  377,A7C
15F4A:  MOVFF  376,A7B
15F4E:  MOVFF  375,A7A
15F52:  MOVFF  374,A79
15F56:  CALL   5438
15F5A:  MOVFF  03,39B
15F5E:  MOVFF  02,39A
15F62:  MOVFF  01,399
15F66:  MOVFF  00,398
.................... 					aux_f2 = (float)(aux_f2 * aux_f2);
15F6A:  MOVFF  39B,A80
15F6E:  MOVFF  39A,A7F
15F72:  MOVFF  399,A7E
15F76:  MOVFF  398,A7D
15F7A:  MOVFF  39B,A84
15F7E:  MOVFF  39A,A83
15F82:  MOVFF  399,A82
15F86:  MOVFF  398,A81
15F8A:  CALL   5306
15F8E:  MOVFF  03,39B
15F92:  MOVFF  02,39A
15F96:  MOVFF  01,399
15F9A:  MOVFF  00,398
.................... 					dem_reativa_proj =(word)(sqrtx(aux_f2 - aux_f1));
15F9E:  BSF    FD8.1
15FA0:  MOVFF  39B,A83
15FA4:  MOVFF  39A,A82
15FA8:  MOVFF  399,A81
15FAC:  MOVFF  398,A80
15FB0:  MOVFF  397,A87
15FB4:  MOVFF  396,A86
15FB8:  MOVFF  395,A85
15FBC:  MOVFF  394,A84
15FC0:  CALL   14D0E
15FC4:  MOVFF  03,A4F
15FC8:  MOVFF  02,A4E
15FCC:  MOVFF  01,A4D
15FD0:  MOVFF  00,A4C
15FD4:  MOVFF  03,A75
15FD8:  MOVFF  02,A74
15FDC:  MOVFF  01,A73
15FE0:  MOVFF  00,A72
15FE4:  RCALL  158EC
15FE6:  MOVFF  03,A7C
15FEA:  MOVFF  02,A7B
15FEE:  MOVFF  01,A7A
15FF2:  MOVFF  00,A79
15FF6:  CALL   53FC
15FFA:  MOVFF  02,281
15FFE:  MOVFF  01,280
.................... 	
.................... 	//				fprintf(modbus,"%lu ;", dem_ativa_proj);
.................... 	
.................... 					// calculo do fator de carga  ==  demanda_media / demanda maxima.
.................... 					fator_carga = (dem_media_ativa * 1024) / dem_max_ativa_tmp;			//aux_l2 tem o maior valor de demanda.
16002:  MOVLB  2
16004:  RLCF   x64,W
16006:  MOVLB  A
16008:  MOVWF  x4D
1600A:  RLCF   x4D,F
1600C:  MOVLW  FC
1600E:  ANDWF  x4D,F
16010:  MOVFF  A4D,A6C
16014:  CLRF   x6B
16016:  MOVFF  A4B,A6E
1601A:  MOVFF  A4A,A6D
1601E:  MOVLB  0
16020:  CALL   4ECC
16024:  MOVFF  02,283
16028:  MOVFF  01,282
.................... 					// calculo do  fator de demanda.  = demanda maxima / carga instalada(carga_programada)
.................... 					fator_demanda = (word)((dem_max_ativa_tmp * 1024) /  carga_programada);
1602C:  MOVLB  A
1602E:  RLCF   x4A,W
16030:  MOVWF  x4D
16032:  RLCF   x4D,F
16034:  MOVLW  FC
16036:  ANDWF  x4D,F
16038:  MOVFF  A4D,A6C
1603C:  CLRF   x6B
1603E:  MOVFF  510,A6E
16042:  MOVFF  50F,A6D
16046:  MOVLB  0
16048:  CALL   4ECC
1604C:  MOVFF  02,285
16050:  MOVFF  01,284
.................... 	
.................... 	//			fprintf(modbus,"fc:%lu ; fd:%lu", fator_carga, fator_demanda);
.................... 	
.................... 	//			fprintf(modbus,"\r\n");
.................... 					
.................... 				#endif
.................... 			#endif
.................... 			#if (tc_fixo == true)
.................... 				#if (st8500c == true)
.................... 					if (dem_maxima_ativa_ant > (valor_tc_fixo * ten_nomi* 2))
16054:  MOVLW  01
16056:  MOVLB  A
16058:  MOVWF  x67
1605A:  MOVLW  F4
1605C:  MOVWF  x66
1605E:  MOVFF  4BE,A69
16062:  MOVFF  4BD,A68
16066:  MOVLB  0
16068:  CALL   473C
1606C:  MOVFF  02,A4D
16070:  MOVFF  01,A4C
16074:  BCF    FD8.0
16076:  MOVLB  A
16078:  RLCF   01,W
1607A:  MOVWF  02
1607C:  RLCF   x4D,W
1607E:  MOVWF  03
16080:  MOVFF  02,01
16084:  MOVF   03,W
16086:  MOVLB  2
16088:  SUBWF  x6F,W
1608A:  BNC   1609C
1608C:  BNZ   16094
1608E:  MOVF   x6E,W
16090:  SUBWF  01,W
16092:  BC    1609C
.................... 						{
.................... 						 dem_maxima_ativa_ant = dem_maxima_ativa;
16094:  MOVFF  26B,26F
16098:  MOVFF  26A,26E
.................... 						}
.................... 					if (dem_maxima_aparente_ant > (valor_tc_fixo * ten_nomi* 2))
1609C:  MOVLW  01
1609E:  MOVLB  A
160A0:  MOVWF  x67
160A2:  MOVLW  F4
160A4:  MOVWF  x66
160A6:  MOVFF  4BE,A69
160AA:  MOVFF  4BD,A68
160AE:  MOVLB  0
160B0:  CALL   473C
160B4:  MOVFF  02,A4D
160B8:  MOVFF  01,A4C
160BC:  BCF    FD8.0
160BE:  MOVLB  A
160C0:  RLCF   01,W
160C2:  MOVWF  02
160C4:  RLCF   x4D,W
160C6:  MOVWF  03
160C8:  MOVFF  02,01
160CC:  MOVF   03,W
160CE:  MOVLB  2
160D0:  SUBWF  x71,W
160D2:  BNC   160E4
160D4:  BNZ   160DC
160D6:  MOVF   x70,W
160D8:  SUBWF  01,W
160DA:  BC    160E4
.................... 						{
.................... 					 	dem_maxima_aparente_ant = dem_maxima_aparente;
160DC:  MOVFF  26D,271
160E0:  MOVFF  26C,270
160E4:  MOVLB  3
160E6:  MOVLB  4
.................... 						}
.................... 				#else
.................... 					if (dem_maxima_ativa_ant > (valor_tc_fixo * ten_nomi * valor_tp * 2))
.................... 						{
.................... 						 dem_maxima_ativa_ant = dem_maxima_ativa;
.................... 						}
.................... 					if (dem_maxima_aparente_ant > (valor_tc_fixo * ten_nomi * valor_tp * 2))
.................... 						{
.................... 					 	dem_maxima_aparente_ant = dem_maxima_aparente;
.................... 						}
.................... 				#endif
.................... 			#else
.................... 				if (dem_maxima_ativa_ant > (valor_tc * ten_nomi * valor_tp * 2))
.................... 					{
.................... 					 dem_maxima_ativa_ant = dem_maxima_ativa;
.................... 					}
.................... 				if (dem_maxima_aparente_ant > (valor_tc * ten_nomi * valor_tp * 2))
.................... 					{
.................... 				 	dem_maxima_aparente_ant = dem_maxima_aparente;
.................... 					}
.................... 			#endif
.................... 			}
160E8:  MOVLB  0
160EA:  RETURN 0
.................... 	}
.................... #endif
.................... 
.................... #endif
.................... #if (funcao_505 == true)
.................... 	#include "st_505.c"
.................... #endif
.................... #if (com_modbus == true)
.................... 	#include "st_modb.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS                                  *
.................... ; Modulo: ST_COMU                                                        *
.................... ; Funcao: MODULO gerencialde comunicacao rs232/485						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
....................   
.................... #include <st_func.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS                                  *
.................... ; Modulo: ST_FUNC                                                        *
.................... ; Funcao: MODULO gerencial funcoes de comunicacao modbus				 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
....................   
.................... #define comandos_teste	true
.................... 
.................... /* variaveis do protocolo modbus */
.................... #if (portatil == true)
.................... 	void busca_os_cor_pt_r(char);
.................... 	void busca_os_cor_pt_s(char);
.................... 	void busca_os_cor_pt_t(char);
.................... 	void busca_os_pot_pt_r(char);
.................... 	void busca_os_pot_pt_s(char);
.................... 	void busca_os_pot_pt_t(char);
.................... #endif
.................... 
.................... 
.................... 
.................... void poe_word_buftx(void)
.................... {
.................... 	buf_tx[ptrtx++] = data1_int >> 8;
*
06E7E:  MOVLB  5
06E80:  MOVF   x2F,W
06E82:  INCF   x2F,F
06E84:  ADDLW  48
06E86:  MOVWF  FE9
06E88:  MOVLW  09
06E8A:  MOVWF  FEA
06E8C:  BTFSC  FD8.0
06E8E:  INCF   FEA,F
06E90:  MOVLB  3
06E92:  MOVF   xF0,W
06E94:  MOVWF  FEF
.................... 	buf_tx[ptrtx++] = data1_int;
06E96:  MOVLB  5
06E98:  MOVF   x2F,W
06E9A:  INCF   x2F,F
06E9C:  ADDLW  48
06E9E:  MOVWF  FE9
06EA0:  MOVLW  09
06EA2:  MOVWF  FEA
06EA4:  BTFSC  FD8.0
06EA6:  INCF   FEA,F
06EA8:  MOVFF  3EF,FEF
06EAC:  MOVLB  0
06EAE:  RETURN 0
.................... }
.................... 
.................... void poe_byte_buftx(void)
.................... {
.................... 	buf_tx[ptrtx++] = data1;
*
06E62:  MOVLB  5
06E64:  MOVF   x2F,W
06E66:  INCF   x2F,F
06E68:  ADDLW  48
06E6A:  MOVWF  FE9
06E6C:  MOVLW  09
06E6E:  MOVWF  FEA
06E70:  BTFSC  FD8.0
06E72:  INCF   FEA,F
06E74:  MOVFF  3BE,FEF
06E78:  MOVLB  0
06E7A:  GOTO   7200 (RETURN)
.................... }
.................... 
.................... 
.................... word le_word_buf_modbus(void)
*
06DFC:  MOVLB  A
06DFE:  CLRF   x50
06E00:  CLRF   x51
.................... {
.................... 	char datal = 0;
.................... 	char datah = 0;
.................... 	if (retrx!=ptrrx)
06E02:  MOVLB  5
06E04:  MOVF   x30,W
06E06:  SUBWF  x31,W
06E08:  BZ    6E24
.................... 		{
.................... 		datah = ret_ser();
06E0A:  MOVLB  0
06E0C:  RCALL  6D22
06E0E:  MOVFF  01,A51
.................... 		if (retrx!=ptrrx)
06E12:  MOVLB  5
06E14:  MOVF   x30,W
06E16:  SUBWF  x31,W
06E18:  BZ    6E24
.................... 			{
.................... 			datal = ret_ser();
06E1A:  MOVLB  0
06E1C:  RCALL  6D22
06E1E:  MOVFF  01,A50
06E22:  MOVLB  5
.................... 			}
.................... 		}
.................... 	return(make16(datah, datal));
06E24:  MOVFF  A51,03
06E28:  MOVLB  A
06E2A:  MOVFF  A50,01
06E2E:  MOVFF  03,02
06E32:  MOVLB  0
06E34:  RETURN 0
.................... 
.................... }
.................... 
.................... void le_forcedata(void)
.................... {
.................... 	force_data_modbus = le_word_buf_modbus();
*
0A624:  CALL   6DFC
0A628:  MOVFF  02,524
0A62C:  MOVFF  01,523
0A630:  GOTO   B2BA (RETURN)
.................... }
.................... 
.................... void le_endereco(void)
.................... {
.................... 	addr_regs_modbus = le_word_buf_modbus();
*
06E36:  RCALL  6DFC
06E38:  MOVFF  02,52A
06E3C:  MOVFF  01,529
06E40:  RETURN 0
.................... }
.................... 
.................... void le_nro_regs(void)
.................... {
.................... 	nro_regs_modbus = le_word_buf_modbus();;
*
0DA9A:  CALL   6DFC
0DA9E:  MOVFF  02,522
0DAA2:  MOVFF  01,521
0DAA6:  GOTO   DAD0 (RETURN)
.................... }
.................... 
.................... void le_nro_pontos(void)
.................... {
.................... 	nro_pontos_modbus = le_word_buf_modbus();
*
06E42:  RCALL  6DFC
06E44:  MOVFF  02,528
06E48:  MOVFF  01,527
.................... 	if (nro_pontos_modbus > 124)
06E4C:  MOVLB  5
06E4E:  MOVF   x28,F
06E50:  BNZ   6E58
06E52:  MOVF   x27,W
06E54:  SUBLW  7C
06E56:  BC    6E5E
.................... 		{
.................... 		nro_pontos_modbus = 124;
06E58:  CLRF   x28
06E5A:  MOVLW  7C
06E5C:  MOVWF  x27
.................... 		}
06E5E:  MOVLB  0
06E60:  RETURN 0
.................... }
.................... 
.................... void le_byte_count(void)
.................... {
.................... 	data_count_modbus=0;
*
0DAAA:  MOVLB  5
0DAAC:  CLRF   x1C
.................... 	if (retrx!=ptrrx)
0DAAE:  MOVF   x30,W
0DAB0:  SUBWF  x31,W
0DAB2:  BZ    DAC0
.................... 		{
.................... 		addr_modbus = ret_ser();
0DAB4:  MOVLB  0
0DAB6:  CALL   6D22
0DABA:  MOVFF  01,51A
0DABE:  MOVLB  5
.................... 		}
.................... 	data_count_modbus = data1;
0DAC0:  MOVFF  3BE,51C
0DAC4:  MOVLB  0
0DAC6:  GOTO   DAD2 (RETURN)
.................... }
.................... 
.................... void le_data_mod(void)
.................... {
.................... 	data_modbus = le_word_buf_modbus();;
*
0BEC8:  CALL   6DFC
0BECC:  MOVFF  02,520
0BED0:  MOVFF  01,51F
0BED4:  RETURN 0
.................... }
.................... 
.................... 
.................... void le_byte_regs_modbus(void)
.................... {
.................... 	data1_int = 0;
*
073AE:  MOVLB  3
073B0:  CLRF   xF0
073B2:  CLRF   xEF
.................... 	 switch(addr_regs_modbus)
073B4:  MOVLB  5
073B6:  MOVF   x29,W
073B8:  MOVWF  00
073BA:  MOVF   x2A,W
073BC:  MOVWF  03
073BE:  MOVF   03,W
073C0:  BNZ   73D0
073C2:  MOVLW  01
073C4:  SUBWF  00,W
073C6:  MOVLB  0
073C8:  BTFSC  FD8.2
073CA:  GOTO   8716
073CE:  MOVLB  5
073D0:  MOVF   03,W
073D2:  BNZ   73E2
073D4:  MOVLW  02
073D6:  SUBWF  00,W
073D8:  MOVLB  0
073DA:  BTFSC  FD8.2
073DC:  GOTO   8722
073E0:  MOVLB  5
073E2:  MOVF   03,W
073E4:  BNZ   73F4
073E6:  MOVLW  03
073E8:  SUBWF  00,W
073EA:  MOVLB  0
073EC:  BTFSC  FD8.2
073EE:  GOTO   8732
073F2:  MOVLB  5
073F4:  MOVF   03,W
073F6:  BNZ   7406
073F8:  MOVLW  04
073FA:  SUBWF  00,W
073FC:  MOVLB  0
073FE:  BTFSC  FD8.2
07400:  GOTO   8740
07404:  MOVLB  5
07406:  MOVF   03,W
07408:  BNZ   7418
0740A:  MOVLW  05
0740C:  SUBWF  00,W
0740E:  MOVLB  0
07410:  BTFSC  FD8.2
07412:  GOTO   874E
07416:  MOVLB  5
07418:  MOVF   03,W
0741A:  BNZ   742A
0741C:  MOVLW  06
0741E:  SUBWF  00,W
07420:  MOVLB  0
07422:  BTFSC  FD8.2
07424:  GOTO   875A
07428:  MOVLB  5
0742A:  MOVF   03,W
0742C:  BNZ   743C
0742E:  MOVLW  07
07430:  SUBWF  00,W
07432:  MOVLB  0
07434:  BTFSC  FD8.2
07436:  GOTO   8768
0743A:  MOVLB  5
0743C:  MOVF   03,W
0743E:  BNZ   744E
07440:  MOVLW  08
07442:  SUBWF  00,W
07444:  MOVLB  0
07446:  BTFSC  FD8.2
07448:  GOTO   8776
0744C:  MOVLB  5
0744E:  MOVF   03,W
07450:  BNZ   7460
07452:  MOVLW  09
07454:  SUBWF  00,W
07456:  MOVLB  0
07458:  BTFSC  FD8.2
0745A:  GOTO   8784
0745E:  MOVLB  5
07460:  MOVF   03,W
07462:  BNZ   7472
07464:  MOVLW  0A
07466:  SUBWF  00,W
07468:  MOVLB  0
0746A:  BTFSC  FD8.2
0746C:  GOTO   8792
07470:  MOVLB  5
07472:  MOVF   03,W
07474:  BNZ   7484
07476:  MOVLW  0B
07478:  SUBWF  00,W
0747A:  MOVLB  0
0747C:  BTFSC  FD8.2
0747E:  GOTO   87A0
07482:  MOVLB  5
07484:  MOVF   03,W
07486:  BNZ   7496
07488:  MOVLW  0C
0748A:  SUBWF  00,W
0748C:  MOVLB  0
0748E:  BTFSC  FD8.2
07490:  GOTO   87AE
07494:  MOVLB  5
07496:  MOVF   03,W
07498:  BNZ   74A8
0749A:  MOVLW  0D
0749C:  SUBWF  00,W
0749E:  MOVLB  0
074A0:  BTFSC  FD8.2
074A2:  GOTO   87BC
074A6:  MOVLB  5
074A8:  MOVF   03,W
074AA:  BNZ   74BA
074AC:  MOVLW  0E
074AE:  SUBWF  00,W
074B0:  MOVLB  0
074B2:  BTFSC  FD8.2
074B4:  GOTO   87D4
074B8:  MOVLB  5
074BA:  MOVF   03,W
074BC:  BNZ   74CC
074BE:  MOVLW  0F
074C0:  SUBWF  00,W
074C2:  MOVLB  0
074C4:  BTFSC  FD8.2
074C6:  GOTO   87EC
074CA:  MOVLB  5
074CC:  MOVF   03,W
074CE:  BNZ   74DE
074D0:  MOVLW  10
074D2:  SUBWF  00,W
074D4:  MOVLB  0
074D6:  BTFSC  FD8.2
074D8:  GOTO   882E
074DC:  MOVLB  5
074DE:  MOVF   03,W
074E0:  BNZ   74F0
074E2:  MOVLW  11
074E4:  SUBWF  00,W
074E6:  MOVLB  0
074E8:  BTFSC  FD8.2
074EA:  GOTO   883A
074EE:  MOVLB  5
074F0:  MOVF   03,W
074F2:  BNZ   7502
074F4:  MOVLW  12
074F6:  SUBWF  00,W
074F8:  MOVLB  0
074FA:  BTFSC  FD8.2
074FC:  GOTO   8844
07500:  MOVLB  5
07502:  MOVF   03,W
07504:  BNZ   7514
07506:  MOVLW  13
07508:  SUBWF  00,W
0750A:  MOVLB  0
0750C:  BTFSC  FD8.2
0750E:  GOTO   884E
07512:  MOVLB  5
07514:  MOVF   03,W
07516:  BNZ   7526
07518:  MOVLW  14
0751A:  SUBWF  00,W
0751C:  MOVLB  0
0751E:  BTFSC  FD8.2
07520:  GOTO   885A
07524:  MOVLB  5
07526:  MOVF   03,W
07528:  BNZ   7538
0752A:  MOVLW  15
0752C:  SUBWF  00,W
0752E:  MOVLB  0
07530:  BTFSC  FD8.2
07532:  GOTO   8870
07536:  MOVLB  5
07538:  MOVF   03,W
0753A:  BNZ   754A
0753C:  MOVLW  16
0753E:  SUBWF  00,W
07540:  MOVLB  0
07542:  BTFSC  FD8.2
07544:  GOTO   8886
07548:  MOVLB  5
0754A:  MOVF   03,W
0754C:  BNZ   755C
0754E:  MOVLW  17
07550:  SUBWF  00,W
07552:  MOVLB  0
07554:  BTFSC  FD8.2
07556:  GOTO   8892
0755A:  MOVLB  5
0755C:  MOVF   03,W
0755E:  BNZ   756E
07560:  MOVLW  18
07562:  SUBWF  00,W
07564:  MOVLB  0
07566:  BTFSC  FD8.2
07568:  GOTO   889E
0756C:  MOVLB  5
0756E:  MOVF   03,W
07570:  BNZ   7580
07572:  MOVLW  19
07574:  SUBWF  00,W
07576:  MOVLB  0
07578:  BTFSC  FD8.2
0757A:  GOTO   88AA
0757E:  MOVLB  5
07580:  MOVF   03,W
07582:  BNZ   7592
07584:  MOVLW  1A
07586:  SUBWF  00,W
07588:  MOVLB  0
0758A:  BTFSC  FD8.2
0758C:  GOTO   88B6
07590:  MOVLB  5
07592:  MOVF   03,W
07594:  BNZ   75A4
07596:  MOVLW  1B
07598:  SUBWF  00,W
0759A:  MOVLB  0
0759C:  BTFSC  FD8.2
0759E:  GOTO   88C2
075A2:  MOVLB  5
075A4:  MOVF   03,W
075A6:  BNZ   75B6
075A8:  MOVLW  1C
075AA:  SUBWF  00,W
075AC:  MOVLB  0
075AE:  BTFSC  FD8.2
075B0:  GOTO   88CE
075B4:  MOVLB  5
075B6:  MOVF   03,W
075B8:  BNZ   75C8
075BA:  MOVLW  25
075BC:  SUBWF  00,W
075BE:  MOVLB  0
075C0:  BTFSC  FD8.2
075C2:  GOTO   88DA
075C6:  MOVLB  5
075C8:  MOVF   03,W
075CA:  BNZ   75DA
075CC:  MOVLW  26
075CE:  SUBWF  00,W
075D0:  MOVLB  0
075D2:  BTFSC  FD8.2
075D4:  GOTO   88E6
075D8:  MOVLB  5
075DA:  MOVF   03,W
075DC:  BNZ   75EC
075DE:  MOVLW  27
075E0:  SUBWF  00,W
075E2:  MOVLB  0
075E4:  BTFSC  FD8.2
075E6:  GOTO   88F2
075EA:  MOVLB  5
075EC:  MOVF   03,W
075EE:  BNZ   75FE
075F0:  MOVLW  28
075F2:  SUBWF  00,W
075F4:  MOVLB  0
075F6:  BTFSC  FD8.2
075F8:  GOTO   88FE
075FC:  MOVLB  5
075FE:  MOVF   03,W
07600:  BNZ   7610
07602:  MOVLW  29
07604:  SUBWF  00,W
07606:  MOVLB  0
07608:  BTFSC  FD8.2
0760A:  GOTO   890A
0760E:  MOVLB  5
07610:  MOVF   03,W
07612:  BNZ   7622
07614:  MOVLW  2A
07616:  SUBWF  00,W
07618:  MOVLB  0
0761A:  BTFSC  FD8.2
0761C:  GOTO   8916
07620:  MOVLB  5
07622:  MOVF   03,W
07624:  BNZ   7634
07626:  MOVLW  2B
07628:  SUBWF  00,W
0762A:  MOVLB  0
0762C:  BTFSC  FD8.2
0762E:  GOTO   8948
07632:  MOVLB  5
07634:  MOVF   03,W
07636:  BNZ   7646
07638:  MOVLW  2C
0763A:  SUBWF  00,W
0763C:  MOVLB  0
0763E:  BTFSC  FD8.2
07640:  GOTO   896C
07644:  MOVLB  5
07646:  MOVF   03,W
07648:  BNZ   7658
0764A:  MOVLW  2D
0764C:  SUBWF  00,W
0764E:  MOVLB  0
07650:  BTFSC  FD8.2
07652:  GOTO   8978
07656:  MOVLB  5
07658:  MOVF   03,W
0765A:  BNZ   766A
0765C:  MOVLW  2E
0765E:  SUBWF  00,W
07660:  MOVLB  0
07662:  BTFSC  FD8.2
07664:  GOTO   8984
07668:  MOVLB  5
0766A:  MOVF   03,W
0766C:  BNZ   767C
0766E:  MOVLW  2F
07670:  SUBWF  00,W
07672:  MOVLB  0
07674:  BTFSC  FD8.2
07676:  GOTO   89A0
0767A:  MOVLB  5
0767C:  MOVF   03,W
0767E:  BNZ   768E
07680:  MOVLW  30
07682:  SUBWF  00,W
07684:  MOVLB  0
07686:  BTFSC  FD8.2
07688:  GOTO   89AC
0768C:  MOVLB  5
0768E:  MOVF   03,W
07690:  BNZ   76A0
07692:  MOVLW  31
07694:  SUBWF  00,W
07696:  MOVLB  0
07698:  BTFSC  FD8.2
0769A:  GOTO   89B8
0769E:  MOVLB  5
076A0:  MOVF   03,W
076A2:  BNZ   76B2
076A4:  MOVLW  32
076A6:  SUBWF  00,W
076A8:  MOVLB  0
076AA:  BTFSC  FD8.2
076AC:  GOTO   89C4
076B0:  MOVLB  5
076B2:  MOVF   03,W
076B4:  BNZ   76C4
076B6:  MOVLW  33
076B8:  SUBWF  00,W
076BA:  MOVLB  0
076BC:  BTFSC  FD8.2
076BE:  GOTO   89D0
076C2:  MOVLB  5
076C4:  MOVF   03,W
076C6:  BNZ   76D6
076C8:  MOVLW  34
076CA:  SUBWF  00,W
076CC:  MOVLB  0
076CE:  BTFSC  FD8.2
076D0:  GOTO   89DA
076D4:  MOVLB  5
076D6:  MOVF   03,W
076D8:  BNZ   76E8
076DA:  MOVLW  35
076DC:  SUBWF  00,W
076DE:  MOVLB  0
076E0:  BTFSC  FD8.2
076E2:  GOTO   89E8
076E6:  MOVLB  5
076E8:  MOVF   03,W
076EA:  BNZ   76FA
076EC:  MOVLW  36
076EE:  SUBWF  00,W
076F0:  MOVLB  0
076F2:  BTFSC  FD8.2
076F4:  GOTO   89F6
076F8:  MOVLB  5
076FA:  MOVLW  07
076FC:  SUBWF  03,W
076FE:  BNZ   770E
07700:  MOVLW  D0
07702:  SUBWF  00,W
07704:  MOVLB  0
07706:  BTFSC  FD8.2
07708:  GOTO   8A00
0770C:  MOVLB  5
0770E:  MOVLW  07
07710:  SUBWF  03,W
07712:  BNZ   7722
07714:  MOVLW  D1
07716:  SUBWF  00,W
07718:  MOVLB  0
0771A:  BTFSC  FD8.2
0771C:  GOTO   8A0C
07720:  MOVLB  5
07722:  MOVLW  07
07724:  SUBWF  03,W
07726:  BNZ   7736
07728:  MOVLW  D2
0772A:  SUBWF  00,W
0772C:  MOVLB  0
0772E:  BTFSC  FD8.2
07730:  GOTO   8A18
07734:  MOVLB  5
07736:  MOVLW  07
07738:  SUBWF  03,W
0773A:  BNZ   774A
0773C:  MOVLW  D3
0773E:  SUBWF  00,W
07740:  MOVLB  0
07742:  BTFSC  FD8.2
07744:  GOTO   8A24
07748:  MOVLB  5
0774A:  MOVLW  07
0774C:  SUBWF  03,W
0774E:  BNZ   775E
07750:  MOVLW  D4
07752:  SUBWF  00,W
07754:  MOVLB  0
07756:  BTFSC  FD8.2
07758:  GOTO   8A3A
0775C:  MOVLB  5
0775E:  MOVLW  07
07760:  SUBWF  03,W
07762:  BNZ   7772
07764:  MOVLW  D5
07766:  SUBWF  00,W
07768:  MOVLB  0
0776A:  BTFSC  FD8.2
0776C:  GOTO   8A50
07770:  MOVLB  5
07772:  MOVLW  07
07774:  SUBWF  03,W
07776:  BNZ   7786
07778:  MOVLW  D6
0777A:  SUBWF  00,W
0777C:  MOVLB  0
0777E:  BTFSC  FD8.2
07780:  GOTO   8A66
07784:  MOVLB  5
07786:  MOVLW  07
07788:  SUBWF  03,W
0778A:  BNZ   779A
0778C:  MOVLW  D7
0778E:  SUBWF  00,W
07790:  MOVLB  0
07792:  BTFSC  FD8.2
07794:  GOTO   8A72
07798:  MOVLB  5
0779A:  MOVLW  07
0779C:  SUBWF  03,W
0779E:  BNZ   77AE
077A0:  MOVLW  D8
077A2:  SUBWF  00,W
077A4:  MOVLB  0
077A6:  BTFSC  FD8.2
077A8:  GOTO   8A7E
077AC:  MOVLB  5
077AE:  MOVLW  07
077B0:  SUBWF  03,W
077B2:  BNZ   77C2
077B4:  MOVLW  D9
077B6:  SUBWF  00,W
077B8:  MOVLB  0
077BA:  BTFSC  FD8.2
077BC:  GOTO   8A8A
077C0:  MOVLB  5
077C2:  MOVLW  07
077C4:  SUBWF  03,W
077C6:  BNZ   77D6
077C8:  MOVLW  DA
077CA:  SUBWF  00,W
077CC:  MOVLB  0
077CE:  BTFSC  FD8.2
077D0:  GOTO   8AA0
077D4:  MOVLB  5
077D6:  MOVLW  07
077D8:  SUBWF  03,W
077DA:  BNZ   77EA
077DC:  MOVLW  DB
077DE:  SUBWF  00,W
077E0:  MOVLB  0
077E2:  BTFSC  FD8.2
077E4:  GOTO   8AB6
077E8:  MOVLB  5
077EA:  MOVLW  08
077EC:  SUBWF  03,W
077EE:  BNZ   77FE
077F0:  MOVLW  02
077F2:  SUBWF  00,W
077F4:  MOVLB  0
077F6:  BTFSC  FD8.2
077F8:  GOTO   8ACC
077FC:  MOVLB  5
077FE:  MOVLW  08
07800:  SUBWF  03,W
07802:  BNZ   7812
07804:  MOVLW  03
07806:  SUBWF  00,W
07808:  MOVLB  0
0780A:  BTFSC  FD8.2
0780C:  GOTO   8AE2
07810:  MOVLB  5
07812:  MOVLW  08
07814:  SUBWF  03,W
07816:  BNZ   7826
07818:  MOVLW  04
0781A:  SUBWF  00,W
0781C:  MOVLB  0
0781E:  BTFSC  FD8.2
07820:  GOTO   8AF8
07824:  MOVLB  5
07826:  MOVLW  08
07828:  SUBWF  03,W
0782A:  BNZ   783A
0782C:  MOVLW  20
0782E:  SUBWF  00,W
07830:  MOVLB  0
07832:  BTFSC  FD8.2
07834:  GOTO   8B0E
07838:  MOVLB  5
0783A:  MOVLW  08
0783C:  SUBWF  03,W
0783E:  BNZ   784E
07840:  MOVLW  21
07842:  SUBWF  00,W
07844:  MOVLB  0
07846:  BTFSC  FD8.2
07848:  GOTO   8B10
0784C:  MOVLB  5
0784E:  MOVLW  08
07850:  SUBWF  03,W
07852:  BNZ   7862
07854:  MOVLW  22
07856:  SUBWF  00,W
07858:  MOVLB  0
0785A:  BTFSC  FD8.2
0785C:  GOTO   8B12
07860:  MOVLB  5
07862:  MOVLW  08
07864:  SUBWF  03,W
07866:  BNZ   7876
07868:  MOVLW  23
0786A:  SUBWF  00,W
0786C:  MOVLB  0
0786E:  BTFSC  FD8.2
07870:  GOTO   8B14
07874:  MOVLB  5
07876:  MOVLW  08
07878:  SUBWF  03,W
0787A:  BNZ   788A
0787C:  MOVLW  24
0787E:  SUBWF  00,W
07880:  MOVLB  0
07882:  BTFSC  FD8.2
07884:  GOTO   8B1E
07888:  MOVLB  5
0788A:  MOVLW  08
0788C:  SUBWF  03,W
0788E:  BNZ   789E
07890:  MOVLW  25
07892:  SUBWF  00,W
07894:  MOVLB  0
07896:  BTFSC  FD8.2
07898:  GOTO   8B28
0789C:  MOVLB  5
0789E:  MOVLW  08
078A0:  SUBWF  03,W
078A2:  BNZ   78B2
078A4:  MOVLW  26
078A6:  SUBWF  00,W
078A8:  MOVLB  0
078AA:  BTFSC  FD8.2
078AC:  GOTO   8B32
078B0:  MOVLB  5
078B2:  MOVLW  08
078B4:  SUBWF  03,W
078B6:  BNZ   78C6
078B8:  MOVLW  34
078BA:  SUBWF  00,W
078BC:  MOVLB  0
078BE:  BTFSC  FD8.2
078C0:  GOTO   8B3C
078C4:  MOVLB  5
078C6:  MOVLW  08
078C8:  SUBWF  03,W
078CA:  BNZ   78DA
078CC:  MOVLW  35
078CE:  SUBWF  00,W
078D0:  MOVLB  0
078D2:  BTFSC  FD8.2
078D4:  GOTO   8B48
078D8:  MOVLB  5
078DA:  MOVLW  08
078DC:  SUBWF  03,W
078DE:  BNZ   78EE
078E0:  MOVLW  36
078E2:  SUBWF  00,W
078E4:  MOVLB  0
078E6:  BTFSC  FD8.2
078E8:  GOTO   8B52
078EC:  MOVLB  5
078EE:  MOVLW  08
078F0:  SUBWF  03,W
078F2:  BNZ   7902
078F4:  MOVLW  37
078F6:  SUBWF  00,W
078F8:  MOVLB  0
078FA:  BTFSC  FD8.2
078FC:  GOTO   8B5E
07900:  MOVLB  5
07902:  MOVLW  08
07904:  SUBWF  03,W
07906:  BNZ   7916
07908:  MOVLW  38
0790A:  SUBWF  00,W
0790C:  MOVLB  0
0790E:  BTFSC  FD8.2
07910:  GOTO   8B6A
07914:  MOVLB  5
07916:  MOVLW  08
07918:  SUBWF  03,W
0791A:  BNZ   792A
0791C:  MOVLW  39
0791E:  SUBWF  00,W
07920:  MOVLB  0
07922:  BTFSC  FD8.2
07924:  GOTO   8B76
07928:  MOVLB  5
0792A:  MOVLW  08
0792C:  SUBWF  03,W
0792E:  BNZ   793E
07930:  MOVLW  3A
07932:  SUBWF  00,W
07934:  MOVLB  0
07936:  BTFSC  FD8.2
07938:  GOTO   8B82
0793C:  MOVLB  5
0793E:  MOVLW  08
07940:  SUBWF  03,W
07942:  BNZ   7952
07944:  MOVLW  3B
07946:  SUBWF  00,W
07948:  MOVLB  0
0794A:  BTFSC  FD8.2
0794C:  GOTO   8B8E
07950:  MOVLB  5
07952:  MOVLW  08
07954:  SUBWF  03,W
07956:  BNZ   7966
07958:  MOVLW  3C
0795A:  SUBWF  00,W
0795C:  MOVLB  0
0795E:  BTFSC  FD8.2
07960:  GOTO   8B9A
07964:  MOVLB  5
07966:  MOVLW  08
07968:  SUBWF  03,W
0796A:  BNZ   797A
0796C:  MOVLW  3D
0796E:  SUBWF  00,W
07970:  MOVLB  0
07972:  BTFSC  FD8.2
07974:  GOTO   8BA6
07978:  MOVLB  5
0797A:  MOVLW  08
0797C:  SUBWF  03,W
0797E:  BNZ   798E
07980:  MOVLW  3E
07982:  SUBWF  00,W
07984:  MOVLB  0
07986:  BTFSC  FD8.2
07988:  GOTO   8BB2
0798C:  MOVLB  5
0798E:  MOVLW  08
07990:  SUBWF  03,W
07992:  BNZ   79A2
07994:  MOVLW  3F
07996:  SUBWF  00,W
07998:  MOVLB  0
0799A:  BTFSC  FD8.2
0799C:  GOTO   8BB2
079A0:  MOVLB  5
079A2:  MOVLW  08
079A4:  SUBWF  03,W
079A6:  BNZ   79B6
079A8:  MOVLW  40
079AA:  SUBWF  00,W
079AC:  MOVLB  0
079AE:  BTFSC  FD8.2
079B0:  GOTO   8BB2
079B4:  MOVLB  5
079B6:  MOVLW  08
079B8:  SUBWF  03,W
079BA:  BNZ   79CA
079BC:  MOVLW  41
079BE:  SUBWF  00,W
079C0:  MOVLB  0
079C2:  BTFSC  FD8.2
079C4:  GOTO   8BB2
079C8:  MOVLB  5
079CA:  MOVLW  08
079CC:  SUBWF  03,W
079CE:  BNZ   79DE
079D0:  MOVLW  42
079D2:  SUBWF  00,W
079D4:  MOVLB  0
079D6:  BTFSC  FD8.2
079D8:  GOTO   8BB2
079DC:  MOVLB  5
079DE:  MOVLW  08
079E0:  SUBWF  03,W
079E2:  BNZ   79F2
079E4:  MOVLW  43
079E6:  SUBWF  00,W
079E8:  MOVLB  0
079EA:  BTFSC  FD8.2
079EC:  GOTO   8BB2
079F0:  MOVLB  5
079F2:  MOVLW  08
079F4:  SUBWF  03,W
079F6:  BNZ   7A06
079F8:  MOVLW  44
079FA:  SUBWF  00,W
079FC:  MOVLB  0
079FE:  BTFSC  FD8.2
07A00:  GOTO   8BB2
07A04:  MOVLB  5
07A06:  MOVLW  08
07A08:  SUBWF  03,W
07A0A:  BNZ   7A1A
07A0C:  MOVLW  45
07A0E:  SUBWF  00,W
07A10:  MOVLB  0
07A12:  BTFSC  FD8.2
07A14:  GOTO   8BB2
07A18:  MOVLB  5
07A1A:  MOVLW  08
07A1C:  SUBWF  03,W
07A1E:  BNZ   7A2E
07A20:  MOVLW  46
07A22:  SUBWF  00,W
07A24:  MOVLB  0
07A26:  BTFSC  FD8.2
07A28:  GOTO   8BB2
07A2C:  MOVLB  5
07A2E:  MOVLW  08
07A30:  SUBWF  03,W
07A32:  BNZ   7A42
07A34:  MOVLW  47
07A36:  SUBWF  00,W
07A38:  MOVLB  0
07A3A:  BTFSC  FD8.2
07A3C:  GOTO   8BB2
07A40:  MOVLB  5
07A42:  MOVLW  08
07A44:  SUBWF  03,W
07A46:  BNZ   7A56
07A48:  MOVLW  48
07A4A:  SUBWF  00,W
07A4C:  MOVLB  0
07A4E:  BTFSC  FD8.2
07A50:  GOTO   8BB2
07A54:  MOVLB  5
07A56:  MOVLW  08
07A58:  SUBWF  03,W
07A5A:  BNZ   7A6A
07A5C:  MOVLW  49
07A5E:  SUBWF  00,W
07A60:  MOVLB  0
07A62:  BTFSC  FD8.2
07A64:  GOTO   8BB2
07A68:  MOVLB  5
07A6A:  MOVLW  08
07A6C:  SUBWF  03,W
07A6E:  BNZ   7A7E
07A70:  MOVLW  4A
07A72:  SUBWF  00,W
07A74:  MOVLB  0
07A76:  BTFSC  FD8.2
07A78:  GOTO   8BB2
07A7C:  MOVLB  5
07A7E:  MOVLW  08
07A80:  SUBWF  03,W
07A82:  BNZ   7A92
07A84:  MOVLW  4B
07A86:  SUBWF  00,W
07A88:  MOVLB  0
07A8A:  BTFSC  FD8.2
07A8C:  GOTO   8BB2
07A90:  MOVLB  5
07A92:  MOVLW  08
07A94:  SUBWF  03,W
07A96:  BNZ   7AA6
07A98:  MOVLW  4C
07A9A:  SUBWF  00,W
07A9C:  MOVLB  0
07A9E:  BTFSC  FD8.2
07AA0:  GOTO   8BB2
07AA4:  MOVLB  5
07AA6:  MOVLW  08
07AA8:  SUBWF  03,W
07AAA:  BNZ   7ABA
07AAC:  MOVLW  4D
07AAE:  SUBWF  00,W
07AB0:  MOVLB  0
07AB2:  BTFSC  FD8.2
07AB4:  GOTO   8BB2
07AB8:  MOVLB  5
07ABA:  MOVLW  08
07ABC:  SUBWF  03,W
07ABE:  BNZ   7ACE
07AC0:  MOVLW  4E
07AC2:  SUBWF  00,W
07AC4:  MOVLB  0
07AC6:  BTFSC  FD8.2
07AC8:  GOTO   8BD4
07ACC:  MOVLB  5
07ACE:  MOVLW  08
07AD0:  SUBWF  03,W
07AD2:  BNZ   7AE2
07AD4:  MOVLW  4F
07AD6:  SUBWF  00,W
07AD8:  MOVLB  0
07ADA:  BTFSC  FD8.2
07ADC:  GOTO   8BD4
07AE0:  MOVLB  5
07AE2:  MOVLW  08
07AE4:  SUBWF  03,W
07AE6:  BNZ   7AF6
07AE8:  MOVLW  50
07AEA:  SUBWF  00,W
07AEC:  MOVLB  0
07AEE:  BTFSC  FD8.2
07AF0:  GOTO   8BD4
07AF4:  MOVLB  5
07AF6:  MOVLW  08
07AF8:  SUBWF  03,W
07AFA:  BNZ   7B0A
07AFC:  MOVLW  51
07AFE:  SUBWF  00,W
07B00:  MOVLB  0
07B02:  BTFSC  FD8.2
07B04:  GOTO   8BD4
07B08:  MOVLB  5
07B0A:  MOVLW  08
07B0C:  SUBWF  03,W
07B0E:  BNZ   7B1E
07B10:  MOVLW  52
07B12:  SUBWF  00,W
07B14:  MOVLB  0
07B16:  BTFSC  FD8.2
07B18:  GOTO   8BD4
07B1C:  MOVLB  5
07B1E:  MOVLW  08
07B20:  SUBWF  03,W
07B22:  BNZ   7B32
07B24:  MOVLW  53
07B26:  SUBWF  00,W
07B28:  MOVLB  0
07B2A:  BTFSC  FD8.2
07B2C:  GOTO   8BD4
07B30:  MOVLB  5
07B32:  MOVLW  08
07B34:  SUBWF  03,W
07B36:  BNZ   7B46
07B38:  MOVLW  54
07B3A:  SUBWF  00,W
07B3C:  MOVLB  0
07B3E:  BTFSC  FD8.2
07B40:  GOTO   8BD4
07B44:  MOVLB  5
07B46:  MOVLW  08
07B48:  SUBWF  03,W
07B4A:  BNZ   7B5A
07B4C:  MOVLW  55
07B4E:  SUBWF  00,W
07B50:  MOVLB  0
07B52:  BTFSC  FD8.2
07B54:  GOTO   8BD4
07B58:  MOVLB  5
07B5A:  MOVLW  08
07B5C:  SUBWF  03,W
07B5E:  BNZ   7B6E
07B60:  MOVLW  56
07B62:  SUBWF  00,W
07B64:  MOVLB  0
07B66:  BTFSC  FD8.2
07B68:  GOTO   8BD4
07B6C:  MOVLB  5
07B6E:  MOVLW  08
07B70:  SUBWF  03,W
07B72:  BNZ   7B82
07B74:  MOVLW  57
07B76:  SUBWF  00,W
07B78:  MOVLB  0
07B7A:  BTFSC  FD8.2
07B7C:  GOTO   8BD4
07B80:  MOVLB  5
07B82:  MOVLW  08
07B84:  SUBWF  03,W
07B86:  BNZ   7B96
07B88:  MOVLW  58
07B8A:  SUBWF  00,W
07B8C:  MOVLB  0
07B8E:  BTFSC  FD8.2
07B90:  GOTO   8BD4
07B94:  MOVLB  5
07B96:  MOVLW  08
07B98:  SUBWF  03,W
07B9A:  BNZ   7BAA
07B9C:  MOVLW  59
07B9E:  SUBWF  00,W
07BA0:  MOVLB  0
07BA2:  BTFSC  FD8.2
07BA4:  GOTO   8BD4
07BA8:  MOVLB  5
07BAA:  MOVLW  08
07BAC:  SUBWF  03,W
07BAE:  BNZ   7BBE
07BB0:  MOVLW  5A
07BB2:  SUBWF  00,W
07BB4:  MOVLB  0
07BB6:  BTFSC  FD8.2
07BB8:  GOTO   8BD4
07BBC:  MOVLB  5
07BBE:  MOVLW  08
07BC0:  SUBWF  03,W
07BC2:  BNZ   7BD2
07BC4:  MOVLW  5B
07BC6:  SUBWF  00,W
07BC8:  MOVLB  0
07BCA:  BTFSC  FD8.2
07BCC:  GOTO   8BD4
07BD0:  MOVLB  5
07BD2:  MOVLW  08
07BD4:  SUBWF  03,W
07BD6:  BNZ   7BE6
07BD8:  MOVLW  5C
07BDA:  SUBWF  00,W
07BDC:  MOVLB  0
07BDE:  BTFSC  FD8.2
07BE0:  GOTO   8BD4
07BE4:  MOVLB  5
07BE6:  MOVLW  08
07BE8:  SUBWF  03,W
07BEA:  BNZ   7BFA
07BEC:  MOVLW  5D
07BEE:  SUBWF  00,W
07BF0:  MOVLB  0
07BF2:  BTFSC  FD8.2
07BF4:  GOTO   8BD4
07BF8:  MOVLB  5
07BFA:  MOVLW  08
07BFC:  SUBWF  03,W
07BFE:  BNZ   7C0E
07C00:  MOVLW  5E
07C02:  SUBWF  00,W
07C04:  MOVLB  0
07C06:  BTFSC  FD8.2
07C08:  GOTO   8BF6
07C0C:  MOVLB  5
07C0E:  MOVLW  08
07C10:  SUBWF  03,W
07C12:  BNZ   7C22
07C14:  MOVLW  5F
07C16:  SUBWF  00,W
07C18:  MOVLB  0
07C1A:  BTFSC  FD8.2
07C1C:  GOTO   8C02
07C20:  MOVLB  5
07C22:  MOVLW  08
07C24:  SUBWF  03,W
07C26:  BNZ   7C36
07C28:  MOVLW  60
07C2A:  SUBWF  00,W
07C2C:  MOVLB  0
07C2E:  BTFSC  FD8.2
07C30:  GOTO   8C02
07C34:  MOVLB  5
07C36:  MOVLW  08
07C38:  SUBWF  03,W
07C3A:  BNZ   7C4A
07C3C:  MOVLW  61
07C3E:  SUBWF  00,W
07C40:  MOVLB  0
07C42:  BTFSC  FD8.2
07C44:  GOTO   8C0C
07C48:  MOVLB  5
07C4A:  MOVLW  08
07C4C:  SUBWF  03,W
07C4E:  BNZ   7C5E
07C50:  MOVLW  62
07C52:  SUBWF  00,W
07C54:  MOVLB  0
07C56:  BTFSC  FD8.2
07C58:  GOTO   8C16
07C5C:  MOVLB  5
07C5E:  MOVLW  08
07C60:  SUBWF  03,W
07C62:  BNZ   7C72
07C64:  MOVLW  66
07C66:  SUBWF  00,W
07C68:  MOVLB  0
07C6A:  BTFSC  FD8.2
07C6C:  GOTO   8C20
07C70:  MOVLB  5
07C72:  MOVLW  08
07C74:  SUBWF  03,W
07C76:  BNZ   7C86
07C78:  MOVLW  67
07C7A:  SUBWF  00,W
07C7C:  MOVLB  0
07C7E:  BTFSC  FD8.2
07C80:  GOTO   8C20
07C84:  MOVLB  5
07C86:  MOVLW  08
07C88:  SUBWF  03,W
07C8A:  BNZ   7C9A
07C8C:  MOVLW  68
07C8E:  SUBWF  00,W
07C90:  MOVLB  0
07C92:  BTFSC  FD8.2
07C94:  GOTO   8C20
07C98:  MOVLB  5
07C9A:  MOVLW  08
07C9C:  SUBWF  03,W
07C9E:  BNZ   7CAE
07CA0:  MOVLW  69
07CA2:  SUBWF  00,W
07CA4:  MOVLB  0
07CA6:  BTFSC  FD8.2
07CA8:  GOTO   8C20
07CAC:  MOVLB  5
07CAE:  MOVLW  08
07CB0:  SUBWF  03,W
07CB2:  BNZ   7CC2
07CB4:  MOVLW  6A
07CB6:  SUBWF  00,W
07CB8:  MOVLB  0
07CBA:  BTFSC  FD8.2
07CBC:  GOTO   8C20
07CC0:  MOVLB  5
07CC2:  MOVLW  08
07CC4:  SUBWF  03,W
07CC6:  BNZ   7CD6
07CC8:  MOVLW  6B
07CCA:  SUBWF  00,W
07CCC:  MOVLB  0
07CCE:  BTFSC  FD8.2
07CD0:  GOTO   8C20
07CD4:  MOVLB  5
07CD6:  MOVLW  08
07CD8:  SUBWF  03,W
07CDA:  BNZ   7CEA
07CDC:  MOVLW  6C
07CDE:  SUBWF  00,W
07CE0:  MOVLB  0
07CE2:  BTFSC  FD8.2
07CE4:  GOTO   8C20
07CE8:  MOVLB  5
07CEA:  MOVLW  08
07CEC:  SUBWF  03,W
07CEE:  BNZ   7CFE
07CF0:  MOVLW  6D
07CF2:  SUBWF  00,W
07CF4:  MOVLB  0
07CF6:  BTFSC  FD8.2
07CF8:  GOTO   8C20
07CFC:  MOVLB  5
07CFE:  MOVLW  08
07D00:  SUBWF  03,W
07D02:  BNZ   7D12
07D04:  MOVLW  6E
07D06:  SUBWF  00,W
07D08:  MOVLB  0
07D0A:  BTFSC  FD8.2
07D0C:  GOTO   8C20
07D10:  MOVLB  5
07D12:  MOVLW  08
07D14:  SUBWF  03,W
07D16:  BNZ   7D26
07D18:  MOVLW  6F
07D1A:  SUBWF  00,W
07D1C:  MOVLB  0
07D1E:  BTFSC  FD8.2
07D20:  GOTO   8C20
07D24:  MOVLB  5
07D26:  MOVLW  08
07D28:  SUBWF  03,W
07D2A:  BNZ   7D3A
07D2C:  MOVLW  70
07D2E:  SUBWF  00,W
07D30:  MOVLB  0
07D32:  BTFSC  FD8.2
07D34:  GOTO   8C20
07D38:  MOVLB  5
07D3A:  MOVLW  08
07D3C:  SUBWF  03,W
07D3E:  BNZ   7D4E
07D40:  MOVLW  71
07D42:  SUBWF  00,W
07D44:  MOVLB  0
07D46:  BTFSC  FD8.2
07D48:  GOTO   8C20
07D4C:  MOVLB  5
07D4E:  MOVLW  08
07D50:  SUBWF  03,W
07D52:  BNZ   7D62
07D54:  MOVLW  72
07D56:  SUBWF  00,W
07D58:  MOVLB  0
07D5A:  BTFSC  FD8.2
07D5C:  GOTO   8C20
07D60:  MOVLB  5
07D62:  MOVLW  08
07D64:  SUBWF  03,W
07D66:  BNZ   7D76
07D68:  MOVLW  73
07D6A:  SUBWF  00,W
07D6C:  MOVLB  0
07D6E:  BTFSC  FD8.2
07D70:  GOTO   8C20
07D74:  MOVLB  5
07D76:  MOVLW  08
07D78:  SUBWF  03,W
07D7A:  BNZ   7D8A
07D7C:  MOVLW  74
07D7E:  SUBWF  00,W
07D80:  MOVLB  0
07D82:  BTFSC  FD8.2
07D84:  GOTO   8C20
07D88:  MOVLB  5
07D8A:  MOVLW  08
07D8C:  SUBWF  03,W
07D8E:  BNZ   7D9E
07D90:  MOVLW  75
07D92:  SUBWF  00,W
07D94:  MOVLB  0
07D96:  BTFSC  FD8.2
07D98:  GOTO   8C20
07D9C:  MOVLB  5
07D9E:  MOVLW  08
07DA0:  SUBWF  03,W
07DA2:  BNZ   7DB2
07DA4:  MOVLW  7A
07DA6:  SUBWF  00,W
07DA8:  MOVLB  0
07DAA:  BTFSC  FD8.2
07DAC:  GOTO   8C42
07DB0:  MOVLB  5
07DB2:  MOVLW  08
07DB4:  SUBWF  03,W
07DB6:  BNZ   7DC6
07DB8:  MOVLW  7B
07DBA:  SUBWF  00,W
07DBC:  MOVLB  0
07DBE:  BTFSC  FD8.2
07DC0:  GOTO   8C42
07DC4:  MOVLB  5
07DC6:  MOVLW  08
07DC8:  SUBWF  03,W
07DCA:  BNZ   7DDA
07DCC:  MOVLW  7C
07DCE:  SUBWF  00,W
07DD0:  MOVLB  0
07DD2:  BTFSC  FD8.2
07DD4:  GOTO   8C42
07DD8:  MOVLB  5
07DDA:  MOVLW  08
07DDC:  SUBWF  03,W
07DDE:  BNZ   7DEE
07DE0:  MOVLW  7D
07DE2:  SUBWF  00,W
07DE4:  MOVLB  0
07DE6:  BTFSC  FD8.2
07DE8:  GOTO   8C42
07DEC:  MOVLB  5
07DEE:  MOVLW  08
07DF0:  SUBWF  03,W
07DF2:  BNZ   7E02
07DF4:  MOVLW  7E
07DF6:  SUBWF  00,W
07DF8:  MOVLB  0
07DFA:  BTFSC  FD8.2
07DFC:  GOTO   8C42
07E00:  MOVLB  5
07E02:  MOVLW  08
07E04:  SUBWF  03,W
07E06:  BNZ   7E16
07E08:  MOVLW  7F
07E0A:  SUBWF  00,W
07E0C:  MOVLB  0
07E0E:  BTFSC  FD8.2
07E10:  GOTO   8C42
07E14:  MOVLB  5
07E16:  MOVLW  08
07E18:  SUBWF  03,W
07E1A:  BNZ   7E2A
07E1C:  MOVLW  80
07E1E:  SUBWF  00,W
07E20:  MOVLB  0
07E22:  BTFSC  FD8.2
07E24:  GOTO   8C42
07E28:  MOVLB  5
07E2A:  MOVLW  08
07E2C:  SUBWF  03,W
07E2E:  BNZ   7E3E
07E30:  MOVLW  81
07E32:  SUBWF  00,W
07E34:  MOVLB  0
07E36:  BTFSC  FD8.2
07E38:  GOTO   8C42
07E3C:  MOVLB  5
07E3E:  MOVLW  08
07E40:  SUBWF  03,W
07E42:  BNZ   7E52
07E44:  MOVLW  82
07E46:  SUBWF  00,W
07E48:  MOVLB  0
07E4A:  BTFSC  FD8.2
07E4C:  GOTO   8C42
07E50:  MOVLB  5
07E52:  MOVLW  08
07E54:  SUBWF  03,W
07E56:  BNZ   7E66
07E58:  MOVLW  83
07E5A:  SUBWF  00,W
07E5C:  MOVLB  0
07E5E:  BTFSC  FD8.2
07E60:  GOTO   8C42
07E64:  MOVLB  5
07E66:  MOVLW  08
07E68:  SUBWF  03,W
07E6A:  BNZ   7E7A
07E6C:  MOVLW  84
07E6E:  SUBWF  00,W
07E70:  MOVLB  0
07E72:  BTFSC  FD8.2
07E74:  GOTO   8C42
07E78:  MOVLB  5
07E7A:  MOVLW  08
07E7C:  SUBWF  03,W
07E7E:  BNZ   7E8E
07E80:  MOVLW  85
07E82:  SUBWF  00,W
07E84:  MOVLB  0
07E86:  BTFSC  FD8.2
07E88:  GOTO   8C42
07E8C:  MOVLB  5
07E8E:  MOVLW  08
07E90:  SUBWF  03,W
07E92:  BNZ   7EA2
07E94:  MOVLW  86
07E96:  SUBWF  00,W
07E98:  MOVLB  0
07E9A:  BTFSC  FD8.2
07E9C:  GOTO   8C42
07EA0:  MOVLB  5
07EA2:  MOVLW  08
07EA4:  SUBWF  03,W
07EA6:  BNZ   7EB6
07EA8:  MOVLW  87
07EAA:  SUBWF  00,W
07EAC:  MOVLB  0
07EAE:  BTFSC  FD8.2
07EB0:  GOTO   8C42
07EB4:  MOVLB  5
07EB6:  MOVLW  08
07EB8:  SUBWF  03,W
07EBA:  BNZ   7ECA
07EBC:  MOVLW  88
07EBE:  SUBWF  00,W
07EC0:  MOVLB  0
07EC2:  BTFSC  FD8.2
07EC4:  GOTO   8C42
07EC8:  MOVLB  5
07ECA:  MOVLW  08
07ECC:  SUBWF  03,W
07ECE:  BNZ   7EDE
07ED0:  MOVLW  89
07ED2:  SUBWF  00,W
07ED4:  MOVLB  0
07ED6:  BTFSC  FD8.2
07ED8:  GOTO   8C42
07EDC:  MOVLB  5
07EDE:  MOVLW  08
07EE0:  SUBWF  03,W
07EE2:  BNZ   7EF2
07EE4:  MOVLW  8E
07EE6:  SUBWF  00,W
07EE8:  MOVLB  0
07EEA:  BTFSC  FD8.2
07EEC:  GOTO   8C64
07EF0:  MOVLB  5
07EF2:  MOVLW  08
07EF4:  SUBWF  03,W
07EF6:  BNZ   7F06
07EF8:  MOVLW  8F
07EFA:  SUBWF  00,W
07EFC:  MOVLB  0
07EFE:  BTFSC  FD8.2
07F00:  GOTO   8C64
07F04:  MOVLB  5
07F06:  MOVLW  08
07F08:  SUBWF  03,W
07F0A:  BNZ   7F1A
07F0C:  MOVLW  90
07F0E:  SUBWF  00,W
07F10:  MOVLB  0
07F12:  BTFSC  FD8.2
07F14:  GOTO   8C64
07F18:  MOVLB  5
07F1A:  MOVLW  08
07F1C:  SUBWF  03,W
07F1E:  BNZ   7F2E
07F20:  MOVLW  91
07F22:  SUBWF  00,W
07F24:  MOVLB  0
07F26:  BTFSC  FD8.2
07F28:  GOTO   8C64
07F2C:  MOVLB  5
07F2E:  MOVLW  08
07F30:  SUBWF  03,W
07F32:  BNZ   7F42
07F34:  MOVLW  92
07F36:  SUBWF  00,W
07F38:  MOVLB  0
07F3A:  BTFSC  FD8.2
07F3C:  GOTO   8C64
07F40:  MOVLB  5
07F42:  MOVLW  08
07F44:  SUBWF  03,W
07F46:  BNZ   7F56
07F48:  MOVLW  93
07F4A:  SUBWF  00,W
07F4C:  MOVLB  0
07F4E:  BTFSC  FD8.2
07F50:  GOTO   8C64
07F54:  MOVLB  5
07F56:  MOVLW  08
07F58:  SUBWF  03,W
07F5A:  BNZ   7F6A
07F5C:  MOVLW  94
07F5E:  SUBWF  00,W
07F60:  MOVLB  0
07F62:  BTFSC  FD8.2
07F64:  GOTO   8C64
07F68:  MOVLB  5
07F6A:  MOVLW  08
07F6C:  SUBWF  03,W
07F6E:  BNZ   7F7E
07F70:  MOVLW  95
07F72:  SUBWF  00,W
07F74:  MOVLB  0
07F76:  BTFSC  FD8.2
07F78:  GOTO   8C64
07F7C:  MOVLB  5
07F7E:  MOVLW  08
07F80:  SUBWF  03,W
07F82:  BNZ   7F92
07F84:  MOVLW  96
07F86:  SUBWF  00,W
07F88:  MOVLB  0
07F8A:  BTFSC  FD8.2
07F8C:  GOTO   8C64
07F90:  MOVLB  5
07F92:  MOVLW  08
07F94:  SUBWF  03,W
07F96:  BNZ   7FA6
07F98:  MOVLW  97
07F9A:  SUBWF  00,W
07F9C:  MOVLB  0
07F9E:  BTFSC  FD8.2
07FA0:  GOTO   8C64
07FA4:  MOVLB  5
07FA6:  MOVLW  08
07FA8:  SUBWF  03,W
07FAA:  BNZ   7FBA
07FAC:  MOVLW  98
07FAE:  SUBWF  00,W
07FB0:  MOVLB  0
07FB2:  BTFSC  FD8.2
07FB4:  GOTO   8C64
07FB8:  MOVLB  5
07FBA:  MOVLW  08
07FBC:  SUBWF  03,W
07FBE:  BNZ   7FCE
07FC0:  MOVLW  99
07FC2:  SUBWF  00,W
07FC4:  MOVLB  0
07FC6:  BTFSC  FD8.2
07FC8:  GOTO   8C64
07FCC:  MOVLB  5
07FCE:  MOVLW  08
07FD0:  SUBWF  03,W
07FD2:  BNZ   7FE2
07FD4:  MOVLW  9A
07FD6:  SUBWF  00,W
07FD8:  MOVLB  0
07FDA:  BTFSC  FD8.2
07FDC:  GOTO   8C64
07FE0:  MOVLB  5
07FE2:  MOVLW  08
07FE4:  SUBWF  03,W
07FE6:  BNZ   7FF6
07FE8:  MOVLW  9B
07FEA:  SUBWF  00,W
07FEC:  MOVLB  0
07FEE:  BTFSC  FD8.2
07FF0:  GOTO   8C64
07FF4:  MOVLB  5
07FF6:  MOVLW  08
07FF8:  SUBWF  03,W
07FFA:  BNZ   800A
07FFC:  MOVLW  9C
07FFE:  SUBWF  00,W
08000:  MOVLB  0
08002:  BTFSC  FD8.2
08004:  GOTO   8C64
08008:  MOVLB  5
0800A:  MOVLW  08
0800C:  SUBWF  03,W
0800E:  BNZ   801E
08010:  MOVLW  9D
08012:  SUBWF  00,W
08014:  MOVLB  0
08016:  BTFSC  FD8.2
08018:  GOTO   8C64
0801C:  MOVLB  5
0801E:  MOVLW  08
08020:  SUBWF  03,W
08022:  BNZ   8032
08024:  MOVLW  A2
08026:  SUBWF  00,W
08028:  MOVLB  0
0802A:  BTFSC  FD8.2
0802C:  GOTO   8C86
08030:  MOVLB  5
08032:  MOVLW  08
08034:  SUBWF  03,W
08036:  BNZ   8046
08038:  MOVLW  A3
0803A:  SUBWF  00,W
0803C:  MOVLB  0
0803E:  BTFSC  FD8.2
08040:  GOTO   8C86
08044:  MOVLB  5
08046:  MOVLW  08
08048:  SUBWF  03,W
0804A:  BNZ   805A
0804C:  MOVLW  A4
0804E:  SUBWF  00,W
08050:  MOVLB  0
08052:  BTFSC  FD8.2
08054:  GOTO   8C86
08058:  MOVLB  5
0805A:  MOVLW  08
0805C:  SUBWF  03,W
0805E:  BNZ   806E
08060:  MOVLW  A5
08062:  SUBWF  00,W
08064:  MOVLB  0
08066:  BTFSC  FD8.2
08068:  GOTO   8C86
0806C:  MOVLB  5
0806E:  MOVLW  08
08070:  SUBWF  03,W
08072:  BNZ   8082
08074:  MOVLW  A6
08076:  SUBWF  00,W
08078:  MOVLB  0
0807A:  BTFSC  FD8.2
0807C:  GOTO   8C86
08080:  MOVLB  5
08082:  MOVLW  08
08084:  SUBWF  03,W
08086:  BNZ   8096
08088:  MOVLW  A7
0808A:  SUBWF  00,W
0808C:  MOVLB  0
0808E:  BTFSC  FD8.2
08090:  GOTO   8C86
08094:  MOVLB  5
08096:  MOVLW  08
08098:  SUBWF  03,W
0809A:  BNZ   80AA
0809C:  MOVLW  A8
0809E:  SUBWF  00,W
080A0:  MOVLB  0
080A2:  BTFSC  FD8.2
080A4:  GOTO   8C86
080A8:  MOVLB  5
080AA:  MOVLW  08
080AC:  SUBWF  03,W
080AE:  BNZ   80BE
080B0:  MOVLW  A9
080B2:  SUBWF  00,W
080B4:  MOVLB  0
080B6:  BTFSC  FD8.2
080B8:  GOTO   8C86
080BC:  MOVLB  5
080BE:  MOVLW  08
080C0:  SUBWF  03,W
080C2:  BNZ   80D2
080C4:  MOVLW  AA
080C6:  SUBWF  00,W
080C8:  MOVLB  0
080CA:  BTFSC  FD8.2
080CC:  GOTO   8C86
080D0:  MOVLB  5
080D2:  MOVLW  08
080D4:  SUBWF  03,W
080D6:  BNZ   80E6
080D8:  MOVLW  AB
080DA:  SUBWF  00,W
080DC:  MOVLB  0
080DE:  BTFSC  FD8.2
080E0:  GOTO   8C86
080E4:  MOVLB  5
080E6:  MOVLW  08
080E8:  SUBWF  03,W
080EA:  BNZ   80FA
080EC:  MOVLW  AC
080EE:  SUBWF  00,W
080F0:  MOVLB  0
080F2:  BTFSC  FD8.2
080F4:  GOTO   8C86
080F8:  MOVLB  5
080FA:  MOVLW  08
080FC:  SUBWF  03,W
080FE:  BNZ   810E
08100:  MOVLW  AD
08102:  SUBWF  00,W
08104:  MOVLB  0
08106:  BTFSC  FD8.2
08108:  GOTO   8C86
0810C:  MOVLB  5
0810E:  MOVLW  08
08110:  SUBWF  03,W
08112:  BNZ   8122
08114:  MOVLW  AE
08116:  SUBWF  00,W
08118:  MOVLB  0
0811A:  BTFSC  FD8.2
0811C:  GOTO   8C86
08120:  MOVLB  5
08122:  MOVLW  08
08124:  SUBWF  03,W
08126:  BNZ   8136
08128:  MOVLW  AF
0812A:  SUBWF  00,W
0812C:  MOVLB  0
0812E:  BTFSC  FD8.2
08130:  GOTO   8C86
08134:  MOVLB  5
08136:  MOVLW  08
08138:  SUBWF  03,W
0813A:  BNZ   814A
0813C:  MOVLW  B0
0813E:  SUBWF  00,W
08140:  MOVLB  0
08142:  BTFSC  FD8.2
08144:  GOTO   8C86
08148:  MOVLB  5
0814A:  MOVLW  08
0814C:  SUBWF  03,W
0814E:  BNZ   815E
08150:  MOVLW  B1
08152:  SUBWF  00,W
08154:  MOVLB  0
08156:  BTFSC  FD8.2
08158:  GOTO   8C86
0815C:  MOVLB  5
0815E:  MOVLW  08
08160:  SUBWF  03,W
08162:  BNZ   8172
08164:  MOVLW  B6
08166:  SUBWF  00,W
08168:  MOVLB  0
0816A:  BTFSC  FD8.2
0816C:  GOTO   8CA8
08170:  MOVLB  5
08172:  MOVLW  08
08174:  SUBWF  03,W
08176:  BNZ   8186
08178:  MOVLW  B7
0817A:  SUBWF  00,W
0817C:  MOVLB  0
0817E:  BTFSC  FD8.2
08180:  GOTO   8CA8
08184:  MOVLB  5
08186:  MOVLW  08
08188:  SUBWF  03,W
0818A:  BNZ   819A
0818C:  MOVLW  B8
0818E:  SUBWF  00,W
08190:  MOVLB  0
08192:  BTFSC  FD8.2
08194:  GOTO   8CA8
08198:  MOVLB  5
0819A:  MOVLW  08
0819C:  SUBWF  03,W
0819E:  BNZ   81AE
081A0:  MOVLW  B9
081A2:  SUBWF  00,W
081A4:  MOVLB  0
081A6:  BTFSC  FD8.2
081A8:  GOTO   8CA8
081AC:  MOVLB  5
081AE:  MOVLW  08
081B0:  SUBWF  03,W
081B2:  BNZ   81C2
081B4:  MOVLW  BA
081B6:  SUBWF  00,W
081B8:  MOVLB  0
081BA:  BTFSC  FD8.2
081BC:  GOTO   8CA8
081C0:  MOVLB  5
081C2:  MOVLW  08
081C4:  SUBWF  03,W
081C6:  BNZ   81D6
081C8:  MOVLW  BB
081CA:  SUBWF  00,W
081CC:  MOVLB  0
081CE:  BTFSC  FD8.2
081D0:  GOTO   8CA8
081D4:  MOVLB  5
081D6:  MOVLW  08
081D8:  SUBWF  03,W
081DA:  BNZ   81EA
081DC:  MOVLW  BC
081DE:  SUBWF  00,W
081E0:  MOVLB  0
081E2:  BTFSC  FD8.2
081E4:  GOTO   8CA8
081E8:  MOVLB  5
081EA:  MOVLW  08
081EC:  SUBWF  03,W
081EE:  BNZ   81FE
081F0:  MOVLW  BD
081F2:  SUBWF  00,W
081F4:  MOVLB  0
081F6:  BTFSC  FD8.2
081F8:  GOTO   8CA8
081FC:  MOVLB  5
081FE:  MOVLW  08
08200:  SUBWF  03,W
08202:  BNZ   8212
08204:  MOVLW  BE
08206:  SUBWF  00,W
08208:  MOVLB  0
0820A:  BTFSC  FD8.2
0820C:  GOTO   8CA8
08210:  MOVLB  5
08212:  MOVLW  08
08214:  SUBWF  03,W
08216:  BNZ   8226
08218:  MOVLW  BF
0821A:  SUBWF  00,W
0821C:  MOVLB  0
0821E:  BTFSC  FD8.2
08220:  GOTO   8CA8
08224:  MOVLB  5
08226:  MOVLW  08
08228:  SUBWF  03,W
0822A:  BNZ   823A
0822C:  MOVLW  C0
0822E:  SUBWF  00,W
08230:  MOVLB  0
08232:  BTFSC  FD8.2
08234:  GOTO   8CA8
08238:  MOVLB  5
0823A:  MOVLW  08
0823C:  SUBWF  03,W
0823E:  BNZ   824E
08240:  MOVLW  C1
08242:  SUBWF  00,W
08244:  MOVLB  0
08246:  BTFSC  FD8.2
08248:  GOTO   8CA8
0824C:  MOVLB  5
0824E:  MOVLW  08
08250:  SUBWF  03,W
08252:  BNZ   8262
08254:  MOVLW  C2
08256:  SUBWF  00,W
08258:  MOVLB  0
0825A:  BTFSC  FD8.2
0825C:  GOTO   8CA8
08260:  MOVLB  5
08262:  MOVLW  08
08264:  SUBWF  03,W
08266:  BNZ   8276
08268:  MOVLW  C3
0826A:  SUBWF  00,W
0826C:  MOVLB  0
0826E:  BTFSC  FD8.2
08270:  GOTO   8CA8
08274:  MOVLB  5
08276:  MOVLW  08
08278:  SUBWF  03,W
0827A:  BNZ   828A
0827C:  MOVLW  C4
0827E:  SUBWF  00,W
08280:  MOVLB  0
08282:  BTFSC  FD8.2
08284:  GOTO   8CA8
08288:  MOVLB  5
0828A:  MOVLW  08
0828C:  SUBWF  03,W
0828E:  BNZ   829E
08290:  MOVLW  C5
08292:  SUBWF  00,W
08294:  MOVLB  0
08296:  BTFSC  FD8.2
08298:  GOTO   8CA8
0829C:  MOVLB  5
0829E:  MOVLW  08
082A0:  SUBWF  03,W
082A2:  BNZ   82B2
082A4:  MOVLW  CA
082A6:  SUBWF  00,W
082A8:  MOVLB  0
082AA:  BTFSC  FD8.2
082AC:  GOTO   8CCA
082B0:  MOVLB  5
082B2:  MOVLW  08
082B4:  SUBWF  03,W
082B6:  BNZ   82C6
082B8:  MOVLW  CB
082BA:  SUBWF  00,W
082BC:  MOVLB  0
082BE:  BTFSC  FD8.2
082C0:  GOTO   8CD6
082C4:  MOVLB  5
082C6:  MOVLW  08
082C8:  SUBWF  03,W
082CA:  BNZ   82DA
082CC:  MOVLW  CC
082CE:  SUBWF  00,W
082D0:  MOVLB  0
082D2:  BTFSC  FD8.2
082D4:  GOTO   8CFE
082D8:  MOVLB  5
082DA:  MOVLW  08
082DC:  SUBWF  03,W
082DE:  BNZ   82EE
082E0:  MOVLW  CD
082E2:  SUBWF  00,W
082E4:  MOVLB  0
082E6:  BTFSC  FD8.2
082E8:  GOTO   8D26
082EC:  MOVLB  5
082EE:  MOVLW  08
082F0:  SUBWF  03,W
082F2:  BNZ   8302
082F4:  MOVLW  CE
082F6:  SUBWF  00,W
082F8:  MOVLB  0
082FA:  BTFSC  FD8.2
082FC:  GOTO   8D30
08300:  MOVLB  5
08302:  MOVLW  08
08304:  SUBWF  03,W
08306:  BNZ   8316
08308:  MOVLW  CF
0830A:  SUBWF  00,W
0830C:  MOVLB  0
0830E:  BTFSC  FD8.2
08310:  GOTO   8D3A
08314:  MOVLB  5
08316:  MOVLW  08
08318:  SUBWF  03,W
0831A:  BNZ   832A
0831C:  MOVLW  D0
0831E:  SUBWF  00,W
08320:  MOVLB  0
08322:  BTFSC  FD8.2
08324:  GOTO   8D44
08328:  MOVLB  5
0832A:  MOVLW  08
0832C:  SUBWF  03,W
0832E:  BNZ   833E
08330:  MOVLW  D1
08332:  SUBWF  00,W
08334:  MOVLB  0
08336:  BTFSC  FD8.2
08338:  GOTO   8D50
0833C:  MOVLB  5
0833E:  MOVLW  08
08340:  SUBWF  03,W
08342:  BNZ   8352
08344:  MOVLW  D2
08346:  SUBWF  00,W
08348:  MOVLB  0
0834A:  BTFSC  FD8.2
0834C:  GOTO   8D5C
08350:  MOVLB  5
08352:  MOVLW  08
08354:  SUBWF  03,W
08356:  BNZ   8366
08358:  MOVLW  D3
0835A:  SUBWF  00,W
0835C:  MOVLB  0
0835E:  BTFSC  FD8.2
08360:  GOTO   8D68
08364:  MOVLB  5
08366:  MOVLW  08
08368:  SUBWF  03,W
0836A:  BNZ   837A
0836C:  MOVLW  D4
0836E:  SUBWF  00,W
08370:  MOVLB  0
08372:  BTFSC  FD8.2
08374:  GOTO   8D74
08378:  MOVLB  5
0837A:  MOVLW  08
0837C:  SUBWF  03,W
0837E:  BNZ   838E
08380:  MOVLW  D5
08382:  SUBWF  00,W
08384:  MOVLB  0
08386:  BTFSC  FD8.2
08388:  GOTO   8D74
0838C:  MOVLB  5
0838E:  MOVLW  08
08390:  SUBWF  03,W
08392:  BNZ   83A2
08394:  MOVLW  D6
08396:  SUBWF  00,W
08398:  MOVLB  0
0839A:  BTFSC  FD8.2
0839C:  GOTO   8D74
083A0:  MOVLB  5
083A2:  MOVLW  08
083A4:  SUBWF  03,W
083A6:  BNZ   83B6
083A8:  MOVLW  D7
083AA:  SUBWF  00,W
083AC:  MOVLB  0
083AE:  BTFSC  FD8.2
083B0:  GOTO   8D74
083B4:  MOVLB  5
083B6:  MOVLW  08
083B8:  SUBWF  03,W
083BA:  BNZ   83CA
083BC:  MOVLW  D8
083BE:  SUBWF  00,W
083C0:  MOVLB  0
083C2:  BTFSC  FD8.2
083C4:  GOTO   8D74
083C8:  MOVLB  5
083CA:  MOVLW  08
083CC:  SUBWF  03,W
083CE:  BNZ   83DE
083D0:  MOVLW  D9
083D2:  SUBWF  00,W
083D4:  MOVLB  0
083D6:  BTFSC  FD8.2
083D8:  GOTO   8D74
083DC:  MOVLB  5
083DE:  MOVLW  08
083E0:  SUBWF  03,W
083E2:  BNZ   83F2
083E4:  MOVLW  DA
083E6:  SUBWF  00,W
083E8:  MOVLB  0
083EA:  BTFSC  FD8.2
083EC:  GOTO   8D74
083F0:  MOVLB  5
083F2:  MOVLW  08
083F4:  SUBWF  03,W
083F6:  BNZ   8406
083F8:  MOVLW  DB
083FA:  SUBWF  00,W
083FC:  MOVLB  0
083FE:  BTFSC  FD8.2
08400:  GOTO   8D74
08404:  MOVLB  5
08406:  MOVLW  08
08408:  SUBWF  03,W
0840A:  BNZ   841A
0840C:  MOVLW  DC
0840E:  SUBWF  00,W
08410:  MOVLB  0
08412:  BTFSC  FD8.2
08414:  GOTO   8D74
08418:  MOVLB  5
0841A:  MOVLW  08
0841C:  SUBWF  03,W
0841E:  BNZ   842E
08420:  MOVLW  DD
08422:  SUBWF  00,W
08424:  MOVLB  0
08426:  BTFSC  FD8.2
08428:  GOTO   8D74
0842C:  MOVLB  5
0842E:  MOVLW  08
08430:  SUBWF  03,W
08432:  BNZ   8442
08434:  MOVLW  DE
08436:  SUBWF  00,W
08438:  MOVLB  0
0843A:  BTFSC  FD8.2
0843C:  GOTO   8D74
08440:  MOVLB  5
08442:  MOVLW  08
08444:  SUBWF  03,W
08446:  BNZ   8456
08448:  MOVLW  DF
0844A:  SUBWF  00,W
0844C:  MOVLB  0
0844E:  BTFSC  FD8.2
08450:  GOTO   8D74
08454:  MOVLB  5
08456:  MOVLW  08
08458:  SUBWF  03,W
0845A:  BNZ   846A
0845C:  MOVLW  E0
0845E:  SUBWF  00,W
08460:  MOVLB  0
08462:  BTFSC  FD8.2
08464:  GOTO   8D9C
08468:  MOVLB  5
0846A:  MOVLW  08
0846C:  SUBWF  03,W
0846E:  BNZ   847E
08470:  MOVLW  E1
08472:  SUBWF  00,W
08474:  MOVLB  0
08476:  BTFSC  FD8.2
08478:  GOTO   8D9C
0847C:  MOVLB  5
0847E:  MOVLW  08
08480:  SUBWF  03,W
08482:  BNZ   8492
08484:  MOVLW  E2
08486:  SUBWF  00,W
08488:  MOVLB  0
0848A:  BTFSC  FD8.2
0848C:  GOTO   8D9C
08490:  MOVLB  5
08492:  MOVLW  08
08494:  SUBWF  03,W
08496:  BNZ   84A6
08498:  MOVLW  E3
0849A:  SUBWF  00,W
0849C:  MOVLB  0
0849E:  BTFSC  FD8.2
084A0:  GOTO   8D9C
084A4:  MOVLB  5
084A6:  MOVLW  08
084A8:  SUBWF  03,W
084AA:  BNZ   84BA
084AC:  MOVLW  E4
084AE:  SUBWF  00,W
084B0:  MOVLB  0
084B2:  BTFSC  FD8.2
084B4:  GOTO   8D9C
084B8:  MOVLB  5
084BA:  MOVLW  08
084BC:  SUBWF  03,W
084BE:  BNZ   84CE
084C0:  MOVLW  E5
084C2:  SUBWF  00,W
084C4:  MOVLB  0
084C6:  BTFSC  FD8.2
084C8:  GOTO   8D9C
084CC:  MOVLB  5
084CE:  MOVLW  08
084D0:  SUBWF  03,W
084D2:  BNZ   84E2
084D4:  MOVLW  E6
084D6:  SUBWF  00,W
084D8:  MOVLB  0
084DA:  BTFSC  FD8.2
084DC:  GOTO   8D9C
084E0:  MOVLB  5
084E2:  MOVLW  08
084E4:  SUBWF  03,W
084E6:  BNZ   84F6
084E8:  MOVLW  E7
084EA:  SUBWF  00,W
084EC:  MOVLB  0
084EE:  BTFSC  FD8.2
084F0:  GOTO   8D9C
084F4:  MOVLB  5
084F6:  MOVLW  08
084F8:  SUBWF  03,W
084FA:  BNZ   850A
084FC:  MOVLW  E8
084FE:  SUBWF  00,W
08500:  MOVLB  0
08502:  BTFSC  FD8.2
08504:  GOTO   8D9C
08508:  MOVLB  5
0850A:  MOVLW  08
0850C:  SUBWF  03,W
0850E:  BNZ   851E
08510:  MOVLW  E9
08512:  SUBWF  00,W
08514:  MOVLB  0
08516:  BTFSC  FD8.2
08518:  GOTO   8D9C
0851C:  MOVLB  5
0851E:  MOVLW  08
08520:  SUBWF  03,W
08522:  BNZ   8532
08524:  MOVLW  EA
08526:  SUBWF  00,W
08528:  MOVLB  0
0852A:  BTFSC  FD8.2
0852C:  GOTO   8D9C
08530:  MOVLB  5
08532:  MOVLW  08
08534:  SUBWF  03,W
08536:  BNZ   8546
08538:  MOVLW  EB
0853A:  SUBWF  00,W
0853C:  MOVLB  0
0853E:  BTFSC  FD8.2
08540:  GOTO   8D9C
08544:  MOVLB  5
08546:  MOVLW  08
08548:  SUBWF  03,W
0854A:  BNZ   855A
0854C:  MOVLW  FC
0854E:  SUBWF  00,W
08550:  MOVLB  0
08552:  BTFSC  FD8.2
08554:  GOTO   8DC4
08558:  MOVLB  5
0855A:  MOVLW  0B
0855C:  SUBWF  03,W
0855E:  BNZ   856E
08560:  MOVLW  B6
08562:  SUBWF  00,W
08564:  MOVLB  0
08566:  BTFSC  FD8.2
08568:  GOTO   8DD0
0856C:  MOVLB  5
0856E:  MOVLW  0B
08570:  SUBWF  03,W
08572:  BNZ   8582
08574:  MOVLW  B7
08576:  SUBWF  00,W
08578:  MOVLB  0
0857A:  BTFSC  FD8.2
0857C:  GOTO   8DDC
08580:  MOVLB  5
08582:  MOVLW  0B
08584:  SUBWF  03,W
08586:  BNZ   8596
08588:  MOVLW  B8
0858A:  SUBWF  00,W
0858C:  MOVLB  0
0858E:  BTFSC  FD8.2
08590:  GOTO   8DE8
08594:  MOVLB  5
08596:  MOVLW  0B
08598:  SUBWF  03,W
0859A:  BNZ   85AA
0859C:  MOVLW  B9
0859E:  SUBWF  00,W
085A0:  MOVLB  0
085A2:  BTFSC  FD8.2
085A4:  GOTO   8DF2
085A8:  MOVLB  5
085AA:  MOVLW  0B
085AC:  SUBWF  03,W
085AE:  BNZ   85BE
085B0:  MOVLW  BA
085B2:  SUBWF  00,W
085B4:  MOVLB  0
085B6:  BTFSC  FD8.2
085B8:  GOTO   8DFE
085BC:  MOVLB  5
085BE:  MOVLW  0B
085C0:  SUBWF  03,W
085C2:  BNZ   85D2
085C4:  MOVLW  BB
085C6:  SUBWF  00,W
085C8:  MOVLB  0
085CA:  BTFSC  FD8.2
085CC:  GOTO   8E08
085D0:  MOVLB  5
085D2:  MOVLW  0B
085D4:  SUBWF  03,W
085D6:  BNZ   85E6
085D8:  MOVLW  BC
085DA:  SUBWF  00,W
085DC:  MOVLB  0
085DE:  BTFSC  FD8.2
085E0:  GOTO   8E14
085E4:  MOVLB  5
085E6:  MOVLW  0B
085E8:  SUBWF  03,W
085EA:  BNZ   85FA
085EC:  MOVLW  BD
085EE:  SUBWF  00,W
085F0:  MOVLB  0
085F2:  BTFSC  FD8.2
085F4:  GOTO   8E20
085F8:  MOVLB  5
085FA:  MOVLW  0B
085FC:  SUBWF  03,W
085FE:  BNZ   860E
08600:  MOVLW  BE
08602:  SUBWF  00,W
08604:  MOVLB  0
08606:  BTFSC  FD8.2
08608:  GOTO   8E2A
0860C:  MOVLB  5
0860E:  MOVLW  0B
08610:  SUBWF  03,W
08612:  BNZ   8622
08614:  MOVLW  BF
08616:  SUBWF  00,W
08618:  MOVLB  0
0861A:  BTFSC  FD8.2
0861C:  GOTO   8E36
08620:  MOVLB  5
08622:  MOVLW  0B
08624:  SUBWF  03,W
08626:  BNZ   8636
08628:  MOVLW  C0
0862A:  SUBWF  00,W
0862C:  MOVLB  0
0862E:  BTFSC  FD8.2
08630:  GOTO   8E40
08634:  MOVLB  5
08636:  MOVLW  0B
08638:  SUBWF  03,W
0863A:  BNZ   864A
0863C:  MOVLW  C1
0863E:  SUBWF  00,W
08640:  MOVLB  0
08642:  BTFSC  FD8.2
08644:  GOTO   8E4A
08648:  MOVLB  5
0864A:  MOVLW  0B
0864C:  SUBWF  03,W
0864E:  BNZ   865E
08650:  MOVLW  C2
08652:  SUBWF  00,W
08654:  MOVLB  0
08656:  BTFSC  FD8.2
08658:  GOTO   8E54
0865C:  MOVLB  5
0865E:  MOVLW  0B
08660:  SUBWF  03,W
08662:  BNZ   8672
08664:  MOVLW  C3
08666:  SUBWF  00,W
08668:  MOVLB  0
0866A:  BTFSC  FD8.2
0866C:  GOTO   8E70
08670:  MOVLB  5
08672:  MOVLW  0B
08674:  SUBWF  03,W
08676:  BNZ   8686
08678:  MOVLW  C4
0867A:  SUBWF  00,W
0867C:  MOVLB  0
0867E:  BTFSC  FD8.2
08680:  GOTO   8E8E
08684:  MOVLB  5
08686:  MOVLW  0B
08688:  SUBWF  03,W
0868A:  BNZ   869A
0868C:  MOVLW  C5
0868E:  SUBWF  00,W
08690:  MOVLB  0
08692:  BTFSC  FD8.2
08694:  GOTO   8EAE
08698:  MOVLB  5
0869A:  MOVLW  0B
0869C:  SUBWF  03,W
0869E:  BNZ   86AE
086A0:  MOVLW  C6
086A2:  SUBWF  00,W
086A4:  MOVLB  0
086A6:  BTFSC  FD8.2
086A8:  GOTO   8EB8
086AC:  MOVLB  5
086AE:  MOVLW  0B
086B0:  SUBWF  03,W
086B2:  BNZ   86C2
086B4:  MOVLW  C7
086B6:  SUBWF  00,W
086B8:  MOVLB  0
086BA:  BTFSC  FD8.2
086BC:  GOTO   8EC2
086C0:  MOVLB  5
086C2:  MOVLW  0B
086C4:  SUBWF  03,W
086C6:  BNZ   86D6
086C8:  MOVLW  C8
086CA:  SUBWF  00,W
086CC:  MOVLB  0
086CE:  BTFSC  FD8.2
086D0:  GOTO   8ECC
086D4:  MOVLB  5
086D6:  MOVLW  0B
086D8:  SUBWF  03,W
086DA:  BNZ   86EA
086DC:  MOVLW  C9
086DE:  SUBWF  00,W
086E0:  MOVLB  0
086E2:  BTFSC  FD8.2
086E4:  GOTO   8ED6
086E8:  MOVLB  5
086EA:  MOVLW  0B
086EC:  SUBWF  03,W
086EE:  BNZ   86FE
086F0:  MOVLW  CA
086F2:  SUBWF  00,W
086F4:  MOVLB  0
086F6:  BTFSC  FD8.2
086F8:  GOTO   8EE0
086FC:  MOVLB  5
086FE:  MOVLW  23
08700:  SUBWF  03,W
08702:  BNZ   8712
08704:  MOVLW  2D
08706:  SUBWF  00,W
08708:  MOVLB  0
0870A:  BTFSC  FD8.2
0870C:  GOTO   8EEA
08710:  MOVLB  5
08712:  GOTO   8F42
.................... 	 	{
.................... 	 	case 1:
.................... 	 		{
.................... 	 		 data1_int = ten_nomi;
08716:  MOVFF  4BE,3F0
0871A:  MOVFF  4BD,3EF
.................... 	 		 break;
0871E:  GOTO   8F48
.................... 	 		}
.................... 	 	case 2:
.................... 	 		{
.................... 			#if (tc_fixo == true)
.................... 				#if (st94 == false) || (st92 == false)
.................... 					busca_mul_tc();
08722:  CALL   7284
.................... 				#else
.................... 					calcula_mul_tc();
.................... 				#endif
.................... 			#endif
.................... 			#if (portatil == true)
.................... 				#if (se_com_flex == true)
.................... 			 		 data1_int = tipo_ponteira;
.................... 				#else
.................... 			 		 data1_int = valor_tc;
.................... 				#endif
.................... 			#else
.................... 		 		 data1_int = valor_tc;
08726:  MOVFF  4C0,3F0
0872A:  MOVFF  4BF,3EF
.................... 	 		 #endif
.................... 	 		 break;
0872E:  GOTO   8F48
.................... 	 		}
.................... 	 	case 3:
.................... 	 		{
.................... 	 		 data1_int = set_point;
08732:  MOVLB  3
08734:  CLRF   xF0
08736:  MOVFF  4CB,3EF
.................... 	 		 break;
0873A:  MOVLB  0
0873C:  GOTO   8F48
.................... 	 		}
.................... 	 	case 4:
.................... 	 		{
.................... 	 		 data1_int = endereco;
08740:  MOVLB  3
08742:  CLRF   xF0
08744:  MOVFF  4CE,3EF
.................... 	 		 break;
08748:  MOVLB  0
0874A:  GOTO   8F48
.................... 	 		}
.................... 	 	case 5:
.................... 	 		{
.................... 	 		 data1_int = intervalo_reg;
0874E:  MOVFF  4C6,3F0
08752:  MOVFF  4C5,3EF
.................... 	 		 break;
08756:  GOTO   8F48
.................... 	 		}
.................... 	 	case 6:
.................... 	 		{
.................... 	 		 data1_int = intervalo_integra;
0875A:  MOVLB  3
0875C:  CLRF   xF0
0875E:  MOVFF  4CF,3EF
.................... 	 		 break;
08762:  MOVLB  0
08764:  GOTO   8F48
.................... 	 		}
.................... 	 	case 7:
.................... 	 		{
.................... 	 		 data1_int = ala_fp_ind;
08768:  MOVLB  3
0876A:  CLRF   xF0
0876C:  MOVFF  4D0,3EF
.................... 	 		 break;
08770:  MOVLB  0
08772:  GOTO   8F48
.................... 	 		}
.................... 	 	case 8:
.................... 	 		{
.................... 	 		 data1_int = ala_fp_cap;
08776:  MOVLB  3
08778:  CLRF   xF0
0877A:  MOVFF  4D1,3EF
.................... 	 		 break;
0877E:  MOVLB  0
08780:  GOTO   8F48
.................... 	 		}
.................... 	 	case 9:
.................... 	 		{
.................... 	 		 data1_int = ala_ten_a;
08784:  MOVLB  3
08786:  CLRF   xF0
08788:  MOVFF  4D2,3EF
.................... 	 		 break;
0878C:  MOVLB  0
0878E:  GOTO   8F48
.................... 	 		}
.................... 	 	case 10:
.................... 	 		{
.................... 	 		 data1_int = ala_ten_b;
08792:  MOVLB  3
08794:  CLRF   xF0
08796:  MOVFF  4D3,3EF
.................... 	 		 break;
0879A:  MOVLB  0
0879C:  GOTO   8F48
.................... 	 		}
.................... 	 	case 11:
.................... 	 		{
.................... 	 		 data1_int = ala_sc;
087A0:  MOVLB  3
087A2:  CLRF   xF0
087A4:  MOVFF  4D4,3EF
.................... 	 		 break;
087A8:  MOVLB  0
087AA:  GOTO   8F48
.................... 	 		}
.................... 	 	case 12:
.................... 	 		{
.................... 	 		 data1_int = ala_chtt;
087AE:  MOVLB  3
087B0:  CLRF   xF0
087B2:  MOVFF  4D5,3EF
.................... 	 		 break;
087B6:  MOVLB  0
087B8:  GOTO   8F48
.................... 	 		}
.................... 		#if (com_regs == 1)
.................... 			case 13:
.................... 	 			{
.................... 				#if (com_relogio == false)
.................... 			 		data1_int = read_word(ee_ptr_regs);
.................... 					data1_int = (word)(data1_int -((word)(data1_int / nro_registros_por_banco)* nro_registros_por_banco));
.................... 				#else
.................... 			 		data1_int = read_word_nvr(ds_ptr_regs);
087BC:  MOVLW  0A
087BE:  MOVLB  A
087C0:  MOVWF  x79
087C2:  MOVLB  0
087C4:  CALL   54CA
087C8:  MOVFF  02,3F0
087CC:  MOVFF  01,3EF
.................... //					data1_int = (word)(data1_int -((word)(data1_int / nro_registros_por_banco)* nro_registros_por_banco));
.................... 				#endif
.................... 		 		 break;
087D0:  GOTO   8F48
.................... 	 			}
.................... 	 		case 14:
.................... 	 			{
.................... 				#if (com_relogio == false)
.................... 				 	data1_int = read_byte(ee_ptr_ocor);
.................... 			 	#else
.................... 				 	data1_int = read_word_nvr(ds_ptr_ocor);
087D4:  MOVLW  0E
087D6:  MOVLB  A
087D8:  MOVWF  x79
087DA:  MOVLB  0
087DC:  CALL   54CA
087E0:  MOVFF  02,3F0
087E4:  MOVFF  01,3EF
.................... 			 	#endif
.................... 		 		 break;
087E8:  GOTO   8F48
.................... 	 			}
....................  			case 15:
.................... 	 			{
.................... 				#if (com_relogio == false)
.................... 				 	data1_int = read_word(ee_ptr_cht);
.................... 			 	#else
.................... 				 	data1_int = read_word_nvr(ds_ptr_cht);
087EC:  MOVLW  10
087EE:  MOVLB  A
087F0:  MOVWF  x79
087F2:  MOVLB  0
087F4:  CALL   54CA
087F8:  MOVFF  02,3F0
087FC:  MOVFF  01,3EF
.................... 				#endif
.................... 				if (forma_reg_cht == 0)
08800:  MOVLB  4
08802:  MOVF   xCD,F
08804:  BNZ   8828
.................... 					{
.................... 					if (data1_int >  limite_chts)
08806:  MOVLB  3
08808:  MOVF   xEF,F
0880A:  BNZ   8810
0880C:  MOVF   xF0,F
0880E:  BZ    8826
.................... 						{
.................... 						data1_int = 0;
08810:  CLRF   xF0
08812:  CLRF   xEF
.................... 						#if (com_relogio == true)
.................... 							write_word_nvr(ds_ptr_cht, 0);
08814:  MOVLW  10
08816:  MOVLB  A
08818:  MOVWF  x79
0881A:  CLRF   x7B
0881C:  CLRF   x7A
0881E:  MOVLB  0
08820:  CALL   5802
08824:  MOVLB  3
08826:  MOVLB  4
.................... 						#else
.................... 							write_word(ee_ptr_cht, 0);
.................... 						#endif
.................... 						}
.................... 					}
.................... 		 		break;
08828:  MOVLB  0
0882A:  GOTO   8F48
.................... 	 			}
.................... 	 		case 16:
.................... 	 			{
.................... 	 			 data1_int = forma_reg_cht;
0882E:  MOVLB  3
08830:  CLRF   xF0
08832:  MOVFF  4CD,3EF
.................... 	 		 	break;
08836:  MOVLB  0
08838:  BRA    8F48
.................... 	 			}
.................... 	 	#endif
....................  		case 17:
.................... 	 		{
.................... 	 		 data1_int = valor_tp;
0883A:  MOVFF  4C2,3F0
0883E:  MOVFF  4C1,3EF
.................... 	 		 break;
08842:  BRA    8F48
.................... 	 		}
....................  		case 18:
.................... 	 		{
.................... 	 		 data1_int = baud_rate;
08844:  MOVFF  4C4,3F0
08848:  MOVFF  4C3,3EF
.................... 	 		 break;
0884C:  BRA    8F48
.................... 	 		}
....................  		case 19:
.................... 	 		{
.................... 	 		 data1_int = ala_chtc;
0884E:  MOVLB  3
08850:  CLRF   xF0
08852:  MOVFF  4D6,3EF
.................... 	 		 break;
08856:  MOVLB  0
08858:  BRA    8F48
.................... 	 		}
.................... 		#if (com_regs == true)
....................  			case 20:
.................... 	 			{
.................... 				#if (com_relogio == false)
.................... 		 		 	data1_int = read_byte(ee_banco_escrita);
.................... 		 		 #else
.................... 		 		 	data1_int = read_byte_nvr(ds_banco_escrita);
0885A:  MOVLW  14
0885C:  MOVLB  A
0885E:  MOVWF  x4F
08860:  MOVLB  0
08862:  CALL   731A
08866:  MOVFF  02,3F0
0886A:  MOVFF  01,3EF
.................... 		 		 #endif
.................... 		 		 break;
0886E:  BRA    8F48
.................... 	 			}
....................  			case 21:
.................... 	 			{
.................... 				#if (com_relogio == false)
.................... 			 		 data1_int = read_byte(ee_banco_leitura);
.................... 			 	#else
.................... 			 		 data1_int = read_byte_nvr(ds_banco_leitura);
08870:  MOVLW  13
08872:  MOVLB  A
08874:  MOVWF  x4F
08876:  MOVLB  0
08878:  CALL   731A
0887C:  MOVFF  02,3F0
08880:  MOVFF  01,3EF
.................... 			 	#endif
.................... 	 			 break;
08884:  BRA    8F48
.................... 	 			}
.................... 		#endif
.................... 	 	case 22:
.................... 	 		{
.................... 	 		 data1_int = dia;
08886:  MOVLB  3
08888:  CLRF   xF0
0888A:  MOVFF  3BF,3EF
.................... 	 		 break;
0888E:  MOVLB  0
08890:  BRA    8F48
.................... 	 		}
.................... 	 	case 23:
.................... 	 		{
.................... 	 		 data1_int = mes;
08892:  MOVLB  3
08894:  CLRF   xF0
08896:  MOVFF  3C0,3EF
.................... 	 		 break;
0889A:  MOVLB  0
0889C:  BRA    8F48
.................... 	 		}
.................... 	 	case 24:
.................... 	 		{
.................... 	 		 data1_int = ano;
0889E:  MOVLB  3
088A0:  CLRF   xF0
088A2:  MOVFF  3C1,3EF
.................... 	 		 break;
088A6:  MOVLB  0
088A8:  BRA    8F48
.................... 	 		}
.................... 	 	case 25:
.................... 	 		{
.................... 	 		 data1_int = hora;
088AA:  MOVLB  3
088AC:  CLRF   xF0
088AE:  MOVFF  3C2,3EF
.................... 	 		 break;
088B2:  MOVLB  0
088B4:  BRA    8F48
.................... 	 		}
.................... 	 	case 26:
.................... 	 		{
.................... 	 		 data1_int = minuto;
088B6:  MOVLB  3
088B8:  CLRF   xF0
088BA:  MOVFF  3C3,3EF
.................... 	 		 break;
088BE:  MOVLB  0
088C0:  BRA    8F48
.................... 	 		}
.................... 	 	case 27:
.................... 	 		{
.................... 	 		 data1_int = segundo;
088C2:  MOVLB  3
088C4:  CLRF   xF0
088C6:  MOVFF  3C4,3EF
.................... 	 		 break;
088CA:  MOVLB  0
088CC:  BRA    8F48
.................... 	 		}
.................... 		case 28:
.................... 			{
.................... 	 		 data1_int = ala_subc;
088CE:  MOVLB  3
088D0:  CLRF   xF0
088D2:  MOVFF  4D7,3EF
.................... 	 		 break;
088D6:  MOVLB  0
088D8:  BRA    8F48
.................... 	 		 }
.................... 		#if (portatil == true)
.................... 			case 29:
.................... 				{
.................... 				data1_int = dia_liga;
.................... 				break;
.................... 				}		 	
.................... 			case 30:
.................... 				{
.................... 				data1_int = hora_liga;
.................... 				break;
.................... 				}		 	
.................... 			case 31:
.................... 				{
.................... 				data1_int = minuto_liga;
.................... 				break;
.................... 				}		 	
.................... 			case 32:
.................... 				{
.................... 				data1_int = dia_desliga;
.................... 				break;
.................... 				}		 	
.................... 			case 33:
.................... 				{
.................... 				data1_int = hora_desliga;
.................... 				break;
.................... 				}		 	
.................... 			case 34:
.................... 				{
.................... 				data1_int = minuto_desliga;
.................... 				break;
.................... 				}
.................... 			case 35:
.................... 				{
.................... 				data1_int = prog_time;
.................... 				break;
.................... 				}		 	
.................... 			case 36:
.................... 				{
.................... 				data1_int = fila_circular;
.................... 				break;
.................... 				}
.................... 		#endif
.................... 			case 37:
.................... 				{
.................... 				data1_int = hora_ponta;
088DA:  MOVLB  3
088DC:  CLRF   xF0
088DE:  MOVFF  515,3EF
.................... 				break;
088E2:  MOVLB  0
088E4:  BRA    8F48
.................... 				}
.................... 			case 38:
.................... 				{
.................... 				data1_int = minuto_ponta;
088E6:  MOVLB  3
088E8:  CLRF   xF0
088EA:  MOVFF  516,3EF
.................... 				break;
088EE:  MOVLB  0
088F0:  BRA    8F48
.................... 				}
.................... 			case 39:
.................... 				{
.................... 				data1_int = hora_final_ponta;
088F2:  MOVLB  3
088F4:  CLRF   xF0
088F6:  MOVFF  517,3EF
.................... 				break;
088FA:  MOVLB  0
088FC:  BRA    8F48
.................... 				}
.................... 			case 40:
.................... 				{
.................... 				data1_int = minuto_final_ponta;
088FE:  MOVLB  3
08900:  CLRF   xF0
08902:  MOVFF  518,3EF
.................... 				break;
08906:  MOVLB  0
08908:  BRA    8F48
.................... 				}
.................... 		case 41:
.................... 			{
.................... 			data1_int = tipo_ligacao;
0890A:  MOVLB  3
0890C:  CLRF   xF0
0890E:  MOVFF  4C7,3EF
.................... 			break;
08912:  MOVLB  0
08914:  BRA    8F48
.................... 			}
.................... 		#if (com_regs == 1)
.................... 		 	case 42:
.................... 		 		{
....................  				if (modo_funca == 2)
08916:  MOVLB  4
08918:  MOVF   xA7,W
0891A:  SUBLW  02
0891C:  BNZ   892A
.................... 					{
.................... 			 		data1_int = nro_bancos_modo2;
0891E:  MOVLB  3
08920:  CLRF   xF0
08922:  MOVLW  04
08924:  MOVWF  xEF
.................... 					}	
08926:  BRA    8944
08928:  MOVLB  4
.................... 				else if (modo_funca == 3)
0892A:  MOVF   xA7,W
0892C:  SUBLW  03
0892E:  BNZ   893C
.................... 					{
.................... 	 				data1_int = nro_bancos_modo3;
08930:  MOVLB  3
08932:  CLRF   xF0
08934:  MOVLW  02
08936:  MOVWF  xEF
.................... 					}	
08938:  BRA    8944
0893A:  MOVLB  4
.................... 				else
.................... 					{
.................... 		 			data1_int = nro_bancos;
0893C:  MOVLB  3
0893E:  CLRF   xF0
08940:  MOVLW  01
08942:  MOVWF  xEF
.................... 					}
.................... 		 		break;
08944:  MOVLB  0
08946:  BRA    8F48
.................... 			 	}
.................... 		#endif
.................... 		#if (com_regs == 1)
.................... 		 	case 43:
.................... 	 			{
.................... 				if (modo_funca == 2)
08948:  MOVLB  4
0894A:  MOVF   xA7,W
0894C:  SUBLW  02
0894E:  BNZ   895E
.................... 					{
.................... 				 	data1_int = nro_registros_por_banco2;
08950:  MOVLW  18
08952:  MOVLB  3
08954:  MOVWF  xF0
08956:  MOVLW  20
08958:  MOVWF  xEF
.................... 					}
0895A:  BRA    8968
0895C:  MOVLB  4
.................... 				else
.................... 					{
.................... 			 		data1_int = nro_registros_por_banco;
0895E:  MOVLW  3A
08960:  MOVLB  3
08962:  MOVWF  xF0
08964:  MOVLW  98
08966:  MOVWF  xEF
.................... 					}
.................... 			 	break;
08968:  MOVLB  0
0896A:  BRA    8F48
.................... 			 	}
.................... 		#endif
.................... 		case 44:
.................... 			{
.................... 			#if (com_regs == true)
.................... 		 		data1_int = nro_modos;
0896C:  MOVLB  3
0896E:  CLRF   xF0
08970:  MOVLW  01
08972:  MOVWF  xEF
.................... 		 	#endif
.................... 	 		break;
08974:  MOVLB  0
08976:  BRA    8F48
.................... 		 	}
.................... 		case 45:
.................... 	 		{
.................... 			#if (ST8100C == true)
.................... 				data1_int = 1;
.................... 			#else
.................... 			 	data1_int = modo_funca;		
08978:  MOVLB  3
0897A:  CLRF   xF0
0897C:  MOVFF  4A7,3EF
.................... 			 #endif
.................... 		 	break;
08980:  MOVLB  0
08982:  BRA    8F48
.................... 		 	}
.................... 		case 46:
.................... 	 		{
.................... 		 	#if (com_regs == true)
.................... 				#if (ST8100C == true)
.................... 					data1_int = 1;
.................... 				#else
.................... 				 	if (registro == 1)
08984:  MOVLB  4
08986:  DECFSZ xCC,W
08988:  BRA    8996
.................... 						{
.................... 						data1_int = 1;
0898A:  MOVLB  3
0898C:  CLRF   xF0
0898E:  MOVLW  01
08990:  MOVWF  xEF
.................... 						}
08992:  BRA    899C
08994:  MOVLB  4
.................... 					else
.................... 						{
.................... 						data1_int = 0;
08996:  MOVLB  3
08998:  CLRF   xF0
0899A:  CLRF   xEF
.................... 						}
.................... 				#endif
.................... 			#else
.................... 				data1_int = 0;
.................... 			#endif
.................... 		 	break;
0899C:  MOVLB  0
0899E:  BRA    8F48
.................... 		 	}
.................... 		case 47:
.................... 			{
.................... 			#if (com_menu == true)
.................... 				data1_int = idioma;
089A0:  MOVLB  3
089A2:  CLRF   xF0
089A4:  MOVFF  2D,3EF
.................... 			#else
.................... 				data1_int = 0;
.................... 			#endif
.................... 			break;
089A8:  MOVLB  0
089AA:  BRA    8F48
.................... 			}
.................... 		case 48:
.................... 			{
.................... 	 		 data1_int = ala_skw;
089AC:  MOVLB  3
089AE:  CLRF   xF0
089B0:  MOVFF  4D8,3EF
.................... 	 		 break;
089B4:  MOVLB  0
089B6:  BRA    8F48
.................... 	 		 }
.................... 		#if (com_alarme_demanda == true)
.................... 		 	case 49:
.................... 		 		{
.................... 			 	data1_int = ala_demanda_ativa;
089B8:  MOVLB  3
089BA:  CLRF   xF0
089BC:  MOVFF  4DA,3EF
.................... 			 	break;
089C0:  MOVLB  0
089C2:  BRA    8F48
.................... 			 	}
.................... 		#endif
.................... 		#if (com_regs == true)
.................... 			case 50:
.................... 				{
.................... 				data1_int = limite_ocorrencias;
089C4:  MOVLB  3
089C6:  CLRF   xF0
089C8:  MOVLW  FA
089CA:  MOVWF  xEF
.................... 				break;
089CC:  MOVLB  0
089CE:  BRA    8F48
.................... 				}
.................... 			case 51:
.................... 				{
.................... 				data1_int = limite_chts;
089D0:  MOVLB  3
089D2:  CLRF   xF0
089D4:  CLRF   xEF
.................... 				break;
089D6:  MOVLB  0
089D8:  BRA    8F48
.................... 				}
.................... 			case 52:
.................... 				{
.................... 				data1_int = addr_inicio_coleta_regs;
089DA:  MOVLW  3A
089DC:  MOVLB  3
089DE:  MOVWF  xF0
089E0:  MOVLW  98
089E2:  MOVWF  xEF
.................... 				break;
089E4:  MOVLB  0
089E6:  BRA    8F48
.................... 				}
.................... 			case 53:
.................... 				{
.................... 				data1_int = addr_inicio_coleta_ocor;
089E8:  MOVLW  75
089EA:  MOVLB  3
089EC:  MOVWF  xF0
089EE:  MOVLW  94
089F0:  MOVWF  xEF
.................... 				break;
089F2:  MOVLB  0
089F4:  BRA    8F48
.................... 				}
.................... 			case 54:
.................... 				{
.................... 				data1_int = addr_inicio_coleta_cht;
089F6:  MOVLB  3
089F8:  CLRF   xF0
089FA:  CLRF   xEF
.................... 				break;
089FC:  MOVLB  0
089FE:  BRA    8F48
.................... 				}
.................... 		#endif
.................... 		#if (st5x==true)		
.................... 			#if (com_saida_pulsos == true)
.................... 				case 55:
.................... 					{
.................... 					data1_int = const_saida_kw;
.................... 					break;
.................... 					}
.................... 				case 56:
.................... 					{
.................... 					data1_int = const_saida_kvar;
.................... 					break;
.................... 					}
.................... 				case 57:
.................... 					{
.................... 					data1_int = qual_variavel_pulsa;
.................... 					break;
.................... 					}
.................... 			#endif
.................... 		#endif
.................... 		
.................... 		#if (protocolo_abb == true)
.................... 			case 58:
.................... 				{
.................... 				data1_int = 0;
.................... 				break;
.................... 				}
.................... 			case 80:
.................... 				{
.................... 				data1_int = 5000;	// Valor de Corrente Primario ou de Indicacao
.................... 				break;
.................... 				}
.................... 			case 81:
.................... 				{
.................... 				data1_int = 3;	// Numero de Casas decimais para Corrente (0,1,2,3)
.................... 				break;
.................... 				}
.................... 			case 82:
.................... 				{
.................... 				data1_int = 0;	// Grandeza de medicao de Corrente: (0)_ (3)k
.................... 				break;
.................... 				}
.................... 			case 83:
.................... 				{
.................... 				data1_int = 2540;	// Valor de Tensao Primario ou de Indicacao
.................... 				break;
.................... 				}
.................... 			case 84:
.................... 				{
.................... 				data1_int = 1;	// Numero de Casas decimais para Tensao (0,1,2,3)
.................... 				break;
.................... 				}
.................... 			case 85:
.................... 				{
.................... 				data1_int = 0;	// Grandeza de medicao de Tensao: (0)_ (3)k
.................... 				break;
.................... 				}
.................... 			case 86:
.................... 				{
.................... 				data1_int = 1269;	// Valor de Potencia Primario ou de Indicacao
.................... 				break;
.................... 				}
.................... 			case 87:
.................... 				{
.................... 				data1_int = 3;	// Numero de Casas decimais para Potencia (0,1,2,3)
.................... 				break;
.................... 				}
.................... 			case 88:
.................... 				{
.................... 				data1_int = 3;	// Grandeza de medicao de Potencia: 0(_) 3(k) 6(M)
.................... 				break;
.................... 				}
.................... 			case 89:
.................... 				{
.................... 				data1_int = 3;	// Tipo de Rede: 1(monofasico) 3(trifasico)
.................... 				break;
.................... 				}
.................... 			case 94:
.................... 				{
.................... 				data1_int = 0;	// Formato da Word: 00(bit de sinal), 01(complemento de 2)
.................... 				break;
.................... 				}
.................... 			case 97:
.................... 				{
.................... 				data1_int = 1;	//Campo de Energia: 1,2,3,4,5,6,7 e 8
.................... 				break;
.................... 				}
.................... 			case 100:
.................... 				{
.................... 				data1_int = converte_abb(tensao_r, 'T');
.................... 				break;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				case 101:
.................... 					{
.................... 					data1_int = converte_abb(tensao_s, 'T');
.................... 					break;
.................... 					}
.................... 				case 102:
.................... 					{
.................... 					data1_int = converte_abb(tensao_t, 'T');
.................... 					break;
.................... 					}
.................... 			#endif
.................... 			case 103:
.................... 				{
.................... 				data1_int = converte_abb(tensao_r, 'T');
.................... 				break;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				case 104:
.................... 					{
.................... 					data1_int = converte_abb(tensao_s, 'T');
.................... 					break;
.................... 					}
.................... 				case 105:
.................... 					{
.................... 					data1_int = converte_abb(tensao_t, 'T');
.................... 					break;
.................... 					}
.................... //									case 103:		//Enviamos apenas tensao de fase porque o aplicativo ABB multiplica por 1,73.
.................... //										{
.................... //										data1_int = converte_abb(tensao_rs, 'T');
.................... //										break;
.................... //										}
.................... //									#if (monofasico == false)
.................... ///										case 104:
.................... //											{
.................... //											data1_int = converte_abb(tensao_st, 'T');
.................... //											break;
.................... //											}
.................... //										case 105:
.................... //											{
.................... //											data1_int = converte_abb(tensao_rt, 'T');
.................... //											break;
.................... //											}
.................... 			#endif
.................... 			case 106:
.................... 				{
.................... 				data1_int = converte_abb(corrente_r, 'C');
.................... 				break;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				case 107:
.................... 					{
.................... 					data1_int = converte_abb(corrente_s, 'C');
.................... 					break;
.................... 					}
.................... 				case 108:
.................... 					{
.................... 					data1_int = converte_abb(corrente_t, 'C');
.................... 					break;
.................... 					}
.................... 			#endif
.................... 			case 109:
.................... 				{
.................... 				aux_l1 = corrente_r;
.................... 				#if (monofasico == false)
.................... 					aux_l1 += corrente_s;
.................... 					aux_l1 += corrente_t;
.................... 				#else
.................... 					aux_l1 += (aux_l1 * 3);
.................... 				#endif
.................... 				data1_int = converte_abb(aux_l1, 'C');
.................... 				break;
.................... 				}
.................... 			case 110:
.................... 				{
.................... 				data1_int = converte_abb(pot_ativa_r, 'P');
.................... 				break;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				case 111:
.................... 					{
.................... 					data1_int = converte_abb(pot_ativa_s, 'P');
.................... 					break;
.................... 					}
.................... 				case 112:
.................... 					{
.................... 					data1_int = converte_abb(pot_ativa_t, 'P');
.................... 					break;
.................... 					}
.................... 			#endif			
.................... 			case 113:
.................... 				{
.................... 				aux_l1 = pot_ativa_r;
.................... 				#if (monofasico == false)
.................... 					aux_l1 += pot_ativa_s;
.................... 					aux_l1 += pot_ativa_t;
.................... 					aux_l1 = (aux_l1 / 3);
.................... 				#endif
.................... 				data1_int = converte_abb(aux_l1, 'P');
.................... 				break;
.................... 				}
.................... 			case 114:
.................... 				{
.................... 				data1_int = converte_abb(pot_reativa_r, 'P');
.................... 				break;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				case 115:
.................... 					{
.................... 					data1_int = converte_abb(pot_reativa_s, 'P');
.................... 					break;
.................... 					}
.................... 				case 116:
.................... 					{
.................... 					data1_int = converte_abb(pot_reativa_t, 'P');
.................... 					break;
.................... 					}
.................... 			#endif			
.................... 			case 117:
.................... 				{
.................... 				aux_l1 = pot_reativa_r;
.................... 				#if (monofasico == false)
.................... 					aux_l1 += pot_reativa_s;
.................... 					aux_l1 += pot_reativa_t;
.................... 					aux_l1 = (aux_l1 / 3);
.................... 				#endif
.................... 				data1_int = converte_abb(aux_l1, 'P');
.................... 				break;
.................... 				}
.................... 			case 118:
.................... 				{
.................... 				data1_int = converte_abb(pot_aparente_r, 'P');
.................... 				break;
.................... 				}
.................... 			#if (monofasico == false)
.................... 				case 119:
.................... 					{
.................... 					data1_int = converte_abb(pot_aparente_s, 'P');
.................... 					break;
.................... 					}
.................... 				case 120:
.................... 					{
.................... 					data1_int = converte_abb(pot_aparente_t, 'P');
.................... 					break;
.................... 					}
.................... 			#endif			
.................... 				
.................... 			case 121:
.................... 				{
.................... 				aux_l1 = pot_aparente_r;
.................... 				#if (monofasico == false)
.................... 					aux_l1 += pot_aparente_s;
.................... 					aux_l1 += pot_aparente_t;
.................... 					aux_l1 = (aux_l1 / 3);
.................... 				#endif
.................... 				data1_int = converte_abb(aux_l1, 'P');
.................... 				break;
.................... 				}
.................... 			case 122:
.................... 				{
.................... 				data1_int = converte_abb(fator_pot_r, 'F');
.................... 				break;
.................... 				}
.................... 			case 123:
.................... 				{
.................... 				#if (monofasico == false)
.................... 					data1_int = converte_abb(fator_pot_s, 'F');
.................... 				#else
.................... 					data1_int = converte_abb(1024, 'F');
.................... 				#endif
.................... 				break;
.................... 				}
.................... 			case 124:
.................... 				{
.................... 				#if (monofasico == false)
.................... 					data1_int = converte_abb(fator_pot_t, 'F');
.................... 				#else
.................... 					data1_int = converte_abb(1024, 'F');
.................... 				#endif
.................... 				break;
.................... 				}
.................... 
.................... 			case 125:
.................... 				{
.................... 				#if (monofasico == true)
.................... 					fator_pot = fator_pot_r;
.................... 				#endif
.................... 					
.................... 				data1_int = converte_abb(fator_pot, 'F');
.................... 				break;
.................... 				}
.................... 			case 126:
.................... 				{
.................... 				data1_int = converte_abb(frequencia, 'B');
.................... 				break;
.................... 				}
.................... 			#if (com_consumo == true)
.................... 				case 127:
.................... 					{
.................... 					data1_int = consumo_ati / 1000;
.................... 					break;
.................... 					}
.................... 				case 128:
.................... 					{
.................... 					aux_l1 = consumo_ati / 1000;
.................... 					data1_int = consumo_ati - (aux_l1 * 1000);
.................... 					break;
.................... 					}
.................... 				case 129:
.................... 					{
.................... 					data1_int = 0;									// nao existe wh
.................... 					break;
.................... 					}
.................... 				case 130:
.................... 					{
.................... 					data1_int = consumo_reati / 1000;
.................... 					break;
.................... 					}
.................... 				case 131:
.................... 					{
.................... 					aux_l1 = consumo_reati / 1000;
.................... 					data1_int = consumo_reati - (aux_l1 * 1000);
.................... 					break;
.................... 					}
.................... 				case 132:
.................... 					{
.................... 					data1_int = 0;								// nao existe varh
.................... 					break;
.................... 					}
.................... 			#endif
.................... 			case 139:
.................... 				{
.................... 				data1_int = converte_abb(fator_pot_r, 'A');
.................... 				break;
.................... 				}
.................... 			case 140:
.................... 				{
.................... 				data1_int = converte_abb(fator_pot_s, 'A');
.................... 				break;
.................... 				}
.................... 			case 141:
.................... 				{
.................... 				data1_int = converte_abb(fator_pot_t, 'A');
.................... 				break;
.................... 				}
.................... 			case 142:
.................... 				{
.................... 				#if (monofasico == true)
.................... 					fator_pot = fator_pot_r;
.................... 				#endif
.................... 				data1_int = converte_abb(fator_pot, 'A');
.................... 				break;
.................... 				}
.................... 			case 146:
.................... 				{
.................... 				data1_int = converte_abb((dem_ativa / 3),'D');
.................... 				break;
.................... 				}
.................... 			case 147:
.................... 				{
.................... 				data1_int = converte_abb((dem_reativa / 3),'D');
.................... 				break;
.................... 				}
.................... 			case 148:
.................... 				{
.................... 				data1_int = converte_abb((dem_aparente / 3), 'D');
.................... 				break;
.................... 				}
.................... 		#endif
.................... 	 	case 2000:
.................... 	 		{
.................... 			#if (portatil == true)
.................... 				#if (se_com_flex == true)
.................... 					off_cor_r = off_set_fp[tipo_ponteira];
.................... 				#else
.................... 					for (aux_b4=0; aux_b4 < NRO_POSI_TC; aux_b4++)
.................... 						{
.................... 						if (valor_tc == tabela_tc[aux_b4])
.................... 							{
.................... 							break;
.................... 							}
.................... 						}
.................... 					off_cor_r = off_set_fp[aux_b4];
.................... 				#endif
.................... 			#endif
.................... 			#if (ade7754 == true)
.................... 				data1_int = fase_r;
.................... 			#else
.................... 	 			data1_int = off_cor_r;
08A00:  MOVLB  3
08A02:  CLRF   xF0
08A04:  MOVFF  4B7,3EF
.................... 			#endif
.................... 			break;
08A08:  MOVLB  0
08A0A:  BRA    8F48
.................... 	 		}
.................... 		 	case 2001:
.................... 	 			{
.................... 				#if (ade7754 == true)
.................... 					data1_int = 0;
.................... 				#else
.................... 	 				data1_int = off_cor_s;
08A0C:  MOVLB  3
08A0E:  CLRF   xF0
08A10:  MOVFF  4B8,3EF
.................... 				#endif
.................... 				break;
08A14:  MOVLB  0
08A16:  BRA    8F48
.................... 		 		}
.................... 	 	#if (monofasico == false)
.................... 	 		case 2002:
.................... 	 			{
.................... 				#if (ade7754 == true)
.................... 					data1_int = fase_t;
.................... 				#else
.................... 					data1_int = defasagem;
08A18:  MOVLB  3
08A1A:  CLRF   xF0
08A1C:  MOVFF  4BB,3EF
.................... 				#endif
.................... 				break;
08A20:  MOVLB  0
08A22:  BRA    8F48
.................... 	 			}
.................... 	 	#endif
.................... 	 	case 2003:
.................... 	 		{
.................... 	 		data1_int = os_ten_r1;
08A24:  CLRF   03
08A26:  MOVLB  4
08A28:  MOVF   xAB,W
08A2A:  BTFSC  FE8.7
08A2C:  DECF   03,F
08A2E:  MOVLB  3
08A30:  MOVWF  xEF
08A32:  MOVFF  03,3F0
.................... 			break;
08A36:  MOVLB  0
08A38:  BRA    8F48
.................... 	 		}
.................... 	 	#if (monofasico == false)
.................... 		 	case 2004:
.................... 	 			{
.................... 	 			data1_int = os_ten_s1;
08A3A:  CLRF   03
08A3C:  MOVLB  4
08A3E:  MOVF   xAC,W
08A40:  BTFSC  FE8.7
08A42:  DECF   03,F
08A44:  MOVLB  3
08A46:  MOVWF  xEF
08A48:  MOVFF  03,3F0
.................... 				break;
08A4C:  MOVLB  0
08A4E:  BRA    8F48
.................... 		 		}
.................... 	 		case 2005:
.................... 	 			{
.................... 	 			data1_int = os_ten_t1;
08A50:  CLRF   03
08A52:  MOVLB  4
08A54:  MOVF   xAD,W
08A56:  BTFSC  FE8.7
08A58:  DECF   03,F
08A5A:  MOVLB  3
08A5C:  MOVWF  xEF
08A5E:  MOVFF  03,3F0
.................... 				break;
08A62:  MOVLB  0
08A64:  BRA    8F48
.................... 	 			}
.................... 	 	#endif
.................... 	 	case 2006:
.................... 	 		{
.................... 	 		data1_int = os_ten_r2;
08A66:  MOVLB  3
08A68:  CLRF   xF0
08A6A:  MOVFF  4AE,3EF
.................... 			break;
08A6E:  MOVLB  0
08A70:  BRA    8F48
.................... 	 		}
.................... 	 	#if (monofasico == false)
.................... 		 	case 2007:
.................... 	 			{
.................... 	 			data1_int = os_ten_s2;
08A72:  MOVLB  3
08A74:  CLRF   xF0
08A76:  MOVFF  4AF,3EF
.................... 				break;
08A7A:  MOVLB  0
08A7C:  BRA    8F48
.................... 		 		}
.................... 		 	case 2008:
.................... 	 			{
.................... 	 			data1_int = os_ten_t2;
08A7E:  MOVLB  3
08A80:  CLRF   xF0
08A82:  MOVFF  4B0,3EF
.................... 				break;
08A86:  MOVLB  0
08A88:  BRA    8F48
.................... 	 			}
.................... 	 	#endif
.................... 	 	case 2009:
.................... 	 		{
.................... 	 		data1_int = os_cor_r;
08A8A:  CLRF   03
08A8C:  MOVLB  4
08A8E:  MOVF   xB1,W
08A90:  BTFSC  FE8.7
08A92:  DECF   03,F
08A94:  MOVLB  3
08A96:  MOVWF  xEF
08A98:  MOVFF  03,3F0
.................... 			break;
08A9C:  MOVLB  0
08A9E:  BRA    8F48
.................... 	 		}
.................... 	 	#if (monofasico == false)
.................... 		 	case 2010:
.................... 	 			{
.................... 	 			data1_int = os_cor_s;
08AA0:  CLRF   03
08AA2:  MOVLB  4
08AA4:  MOVF   xB2,W
08AA6:  BTFSC  FE8.7
08AA8:  DECF   03,F
08AAA:  MOVLB  3
08AAC:  MOVWF  xEF
08AAE:  MOVFF  03,3F0
.................... 				break;
08AB2:  MOVLB  0
08AB4:  BRA    8F48
.................... 		 		}
.................... 	 		case 2011:
.................... 	 			{
.................... 	 			data1_int = os_cor_t;
08AB6:  CLRF   03
08AB8:  MOVLB  4
08ABA:  MOVF   xB3,W
08ABC:  BTFSC  FE8.7
08ABE:  DECF   03,F
08AC0:  MOVLB  3
08AC2:  MOVWF  xEF
08AC4:  MOVFF  03,3F0
.................... 				break;
08AC8:  MOVLB  0
08ACA:  BRA    8F48
.................... 	 			}
.................... 	 	#endif
.................... 		#if (portatil == true)
.................... 			#if (se_com_flex == true)
.................... 			 	case 2012:
.................... 			 		{
.................... 					busca_os_cor_pt_r(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2013:
.................... 			 		{
.................... 					busca_os_cor_pt_s(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2014:
.................... 			 		{
.................... 					busca_os_cor_pt_t(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 #endif
.................... 		#endif	 		
.................... 
.................... 		case 2050:
.................... 			{
.................... 			#if (portatil == true)
.................... 				#if (se_com_flex == true)
.................... 					data1_int = os_pot_pt_r[tipo_ponteira];
.................... 				#else
.................... 					for (aux_b4=0; aux_b4 < NRO_POSI_TC; aux_b4++)
.................... 						{
.................... 						if (valor_tc == tabela_tc[aux_b4])
.................... 							{
.................... 							break;
.................... 							}
.................... 						}
.................... 					data1_int = os_pot_pt_r[aux_b4];
.................... 				#endif
.................... 			#else
.................... 	 			data1_int = os_pot_r;
08ACC:  CLRF   03
08ACE:  MOVLB  4
08AD0:  MOVF   xB4,W
08AD2:  BTFSC  FE8.7
08AD4:  DECF   03,F
08AD6:  MOVLB  3
08AD8:  MOVWF  xEF
08ADA:  MOVFF  03,3F0
.................... 			#endif
.................... 			break;
08ADE:  MOVLB  0
08AE0:  BRA    8F48
.................... 			}
.................... 
.................... 	 	#if (monofasico == false)
.................... 			case 2051:
.................... 				{
.................... 				#if (portatil == true)
.................... 					#if (se_com_flex == true)
.................... 						data1_int = os_pot_pt_s[tipo_ponteira];
.................... 					#else
.................... 						for (aux_b4=0; aux_b4 < NRO_POSI_TC; aux_b4++)
.................... 							{
.................... 							if (valor_tc == tabela_tc[aux_b4])
.................... 								{
.................... 								break;
.................... 								}
.................... 							}
.................... 						data1_int = os_pot_pt_s[aux_b4];
.................... 					#endif
.................... 				#else
.................... 		 			data1_int = os_pot_s;
08AE2:  CLRF   03
08AE4:  MOVLB  4
08AE6:  MOVF   xB5,W
08AE8:  BTFSC  FE8.7
08AEA:  DECF   03,F
08AEC:  MOVLB  3
08AEE:  MOVWF  xEF
08AF0:  MOVFF  03,3F0
.................... 				#endif
.................... 				break;
08AF4:  MOVLB  0
08AF6:  BRA    8F48
.................... 				}
.................... 			case 2052:
.................... 				{
.................... 				#if (portatil == true)
.................... 					#if (se_com_flex == true)
.................... 						data1_int = os_pot_pt_t[tipo_ponteira];
.................... 					#else
.................... 						for (aux_b4=0; aux_b4 < NRO_POSI_TC; aux_b4++)
.................... 							{
.................... 							if (valor_tc == tabela_tc[aux_b4])
.................... 								{
.................... 								break;
.................... 								}
.................... 							}
.................... 						data1_int = os_pot_pt_t[aux_b4];
.................... 					#endif
.................... 				#else
.................... 		 			data1_int = os_pot_t;
08AF8:  CLRF   03
08AFA:  MOVLB  4
08AFC:  MOVF   xB6,W
08AFE:  BTFSC  FE8.7
08B00:  DECF   03,F
08B02:  MOVLB  3
08B04:  MOVWF  xEF
08B06:  MOVFF  03,3F0
.................... 				#endif
.................... 				break;
08B0A:  MOVLB  0
08B0C:  BRA    8F48
.................... 				}
.................... 		#endif
.................... 
.................... 		#if (portatil == true)
.................... 			#if (se_com_flex == true)
.................... 			 	case 2053:
.................... 			 		{
.................... 					busca_os_pot_pt_r(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2054:
.................... 			 		{
.................... 					busca_os_pot_pt_s(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2055:
.................... 			 		{
.................... 					busca_os_pot_pt_t(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... /*			 	case 2056:
.................... 			 		{
.................... 					busca_os_pot_pt_r(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2057:
.................... 			 		{
.................... 					busca_os_pot_pt_s(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2058:
.................... 			 		{
.................... 					busca_os_pot_pt_t(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2059:
.................... 			 		{
.................... 					busca_os_pot_pt_r(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2060:
.................... 			 		{
.................... 					busca_os_pot_pt_s(tipo_ponteira);
.................... 					break;
.................... 			 		}
.................... 			 	case 2061:
.................... 			 		{
.................... 					busca_os_pot_pt_t(tipo_ponteira);
.................... 					break;
.................... 			 		}*/
.................... 			#else
.................... 				case 2053:
.................... 					{
.................... 					busca_os_pot_pt_r(0);
.................... 					break;
.................... 					}
.................... 				case 2054:
.................... 					{
.................... 					busca_os_pot_pt_s(0);
.................... 					break;
.................... 					}
.................... 				case 2055:
.................... 					{
.................... 					busca_os_pot_pt_t(0);
.................... 					break;
.................... 					}
.................... 				case 2056:
.................... 					{
.................... 					busca_os_pot_pt_r(1);
.................... 					break;
.................... 					}
.................... 				case 2057:
.................... 					{
.................... 					busca_os_pot_pt_s(1);
.................... 					break;
.................... 					}
.................... 				case 2058:
.................... 					{
.................... 					busca_os_pot_pt_t(1);
.................... 					break;
.................... 					}
.................... 				case 2059:
.................... 					{
.................... 					busca_os_pot_pt_r(2);
.................... 					break;
.................... 					}
.................... 				case 2060:
.................... 					{
.................... 					busca_os_pot_pt_s(2);
.................... 					break;
.................... 					}
.................... 				case 2061:
.................... 					{
.................... 					busca_os_pot_pt_t(2);
.................... 					break;
.................... 					}
.................... 		//
.................... 				case 2062:
.................... 					{
.................... 					busca_os_pot_pt_r(3);
.................... 					break;
.................... 					}
.................... 				case 2063:
.................... 					{
.................... 					busca_os_pot_pt_s(3);
.................... 					break;
.................... 					}
.................... 				case 2064:
.................... 					{
.................... 					busca_os_pot_pt_t(3);
.................... 					break;
.................... 					}
.................... 		//
.................... 				case 2065:
.................... 					{
.................... 					busca_os_pot_pt_r(4);
.................... 					break;
.................... 					}
.................... 				case 2066:
.................... 					{
.................... 					busca_os_pot_pt_s(4);
.................... 					break;
.................... 					}
.................... 				case 2067:
.................... 					{
.................... 					busca_os_pot_pt_t(4);
.................... 					break;
.................... 					}
.................... 		//
.................... 				case 2068:
.................... 					{
.................... 					busca_os_pot_pt_r(5);
.................... 					break;
.................... 					}
.................... 				case 2069:
.................... 					{
.................... 					busca_os_pot_pt_s(5);
.................... 					break;
.................... 					}
.................... 				case 2070:
.................... 					{
.................... 					busca_os_pot_pt_t(5);
.................... 					break;
.................... 					}
.................... 		//
.................... 				case 2071:
.................... 					{
.................... 					busca_os_pot_pt_r(6);
.................... 					break;
.................... 					}
.................... 				case 2072:
.................... 					{
.................... 					busca_os_pot_pt_s(6);
.................... 					break;
.................... 					}
.................... 				case 2073:
.................... 					{
.................... 					busca_os_pot_pt_t(6);
.................... 					break;
.................... 					}
.................... 		//
.................... 				case 2074:
.................... 					{
.................... 					busca_os_pot_pt_r(7);
.................... 					break;
.................... 					}
.................... 				case 2075:
.................... 					{
.................... 					busca_os_pot_pt_s(7);
.................... 					break;
.................... 					}
.................... 				case 2076:
.................... 					{
.................... 					busca_os_pot_pt_t(7);
.................... 					break;
.................... 					}
.................... 		//
.................... 				case 2077:
.................... 					{
.................... 					busca_os_pot_pt_r(8);
.................... 					break;
.................... 					}
.................... 				case 2078:
.................... 					{
.................... 					busca_os_pot_pt_s(8);
.................... 					break;
.................... 					}
.................... 				case 2079:
.................... 					{
.................... 					busca_os_pot_pt_t(8);
.................... 					break;
.................... 					}
.................... 			 #endif
.................... 		#endif
.................... 	 	case 2080:
.................... 	 		{
.................... //		 	calcula_vref_cr();
.................... 		 	break;
08B0E:  BRA    8F48
.................... 		 	}
.................... 		#if (monofasico == false)
.................... 		 	case 2081:
.................... 		 		{
.................... //		 		calcula_vref_cs();
.................... 			 	break;
08B10:  BRA    8F48
.................... 			 	}
.................... 		 	case 2082:
.................... 		 		{
.................... //		 		calcula_vref_ct();
.................... 			 	break;
08B12:  BRA    8F48
.................... 			 	}
.................... 		 #endif
.................... 		 case 2083:
.................... 		 	{
.................... 			 data1_int = vreftr;
08B14:  MOVFF  3E8,3F0
08B18:  MOVFF  3E7,3EF
.................... 			 break;
08B1C:  BRA    8F48
.................... 			 }
.................... 		 case 2084:
.................... 		 	{
.................... 			 data1_int = vrefcr;
08B1E:  MOVFF  3E2,3F0
08B22:  MOVFF  3E1,3EF
.................... 			 break;
08B26:  BRA    8F48
.................... 			 }
.................... 		#if (monofasico == false)
.................... 			 case 2085:
.................... 			 	{
.................... 				 data1_int = vrefcs;
08B28:  MOVFF  3E4,3F0
08B2C:  MOVFF  3E3,3EF
.................... 				 break;
08B30:  BRA    8F48
.................... 				 }
.................... 			 case 2086:
.................... 			 	{
.................... 				 data1_int = vrefct;
08B32:  MOVFF  3E6,3F0
08B36:  MOVFF  3E5,3EF
.................... 				 break;
08B3A:  BRA    8F48
.................... 				 }
.................... 		#endif
.................... 	
.................... 		#if (ade7754 == true)
.................... 		 	case 2080:
.................... 		 		{
.................... 		 		data1_int = CFNUM_R;
.................... 				break;
.................... 		 		}
.................... 		 	case 2081:
.................... 		 		{
.................... 		 		data1_int = CFNUM_S;
.................... 				break;
.................... 		 		}
.................... 		 	case 2082:
.................... 		 		{
.................... 		 		data1_int = CFNUM_T;
.................... 				break;
.................... 		 		}
.................... 		#endif
.................... 
.................... 
.................... //      reservado entre 2100 e 2300 para parametros dos controladores de fator de potencia(200 partametros)
.................... 		#if (controlador == true) || (st_prog == true)
.................... 			case 2100:
.................... 				{
.................... 				#if (st8500c == true)
.................... 					data1_int = nro_cargas;
08B3C:  MOVLB  3
08B3E:  CLRF   xF0
08B40:  MOVFF  6D,3EF
.................... 				#else
.................... 					data1_int = nro_bancos_capacitor;
.................... 				#endif
.................... 				break;
08B44:  MOVLB  0
08B46:  BRA    8F48
.................... 				}
.................... 			case 2101:
.................... 				{
.................... 				#if (st8500c == true)
.................... 					data1_int = max_kw;
08B48:  MOVFF  66,3F0
08B4C:  MOVFF  65,3EF
.................... 				#else
.................... 					data1_int = max_kvar;
.................... 				#endif
.................... 				break;
08B50:  BRA    8F48
.................... 				}
.................... 			case 2102:
.................... 				{
.................... 				#if (st8500c == true)
.................... 					data1_int = min_kw;
08B52:  MOVLB  3
08B54:  CLRF   xF0
08B56:  MOVFF  64,3EF
.................... 				#else
.................... 					data1_int = min_kvar;
.................... 				#endif
.................... 				break;
08B5A:  MOVLB  0
08B5C:  BRA    8F48
.................... 				}
.................... 			case 2103:
.................... 				{
.................... 				data1_int = sequencia;
08B5E:  MOVLB  3
08B60:  CLRF   xF0
08B62:  MOVFF  67,3EF
.................... 				break;
08B66:  MOVLB  0
08B68:  BRA    8F48
.................... 				}
.................... 			case 2104:
.................... 				{
.................... 				data1_int = tempo_aciona;
08B6A:  MOVLB  3
08B6C:  CLRF   xF0
08B6E:  MOVFF  6A,3EF
.................... 				break;
08B72:  MOVLB  0
08B74:  BRA    8F48
.................... 				}
.................... 			case 2105:
.................... 				{
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						data1_int = cor_minima_rep;
.................... 						}
.................... 					else
.................... 						{
.................... 						data1_int = cor_minima;
.................... 						}
.................... 				#else
.................... 					data1_int = cor_minima;
08B76:  MOVLB  3
08B78:  CLRF   xF0
08B7A:  MOVFF  4D9,3EF
.................... 				#endif
.................... 				break;
08B7E:  MOVLB  0
08B80:  BRA    8F48
.................... 				}
.................... 			case 2106:
.................... 				{
.................... 				data1_int = com_des_fp_ind_cap;
08B82:  MOVLB  3
08B84:  CLRF   xF0
08B86:  MOVFF  5D,3EF
.................... 				break;
08B8A:  MOVLB  0
08B8C:  BRA    8F48
.................... 				}
.................... 			case 2107:
.................... 				{
.................... 				data1_int = com_des_ten_a;
08B8E:  MOVLB  3
08B90:  CLRF   xF0
08B92:  MOVFF  59,3EF
.................... 				break;
08B96:  MOVLB  0
08B98:  BRA    8F48
.................... 				}
.................... 			case 2108:
.................... 				{
.................... 				data1_int = com_des_chtt;
08B9A:  MOVLB  3
08B9C:  CLRF   xF0
08B9E:  MOVFF  5B,3EF
.................... 				break;
08BA2:  MOVLB  0
08BA4:  BRA    8F48
.................... 				}
.................... 			case 2109:
.................... 				{
.................... 				data1_int = com_des_chtc;
08BA6:  MOVLB  3
08BA8:  CLRF   xF0
08BAA:  MOVFF  5C,3EF
.................... 				break;
08BAE:  MOVLB  0
08BB0:  BRA    8F48
.................... 				}
.................... 			case 2110:
.................... 			case 2111:
.................... 			case 2112:
.................... 			case 2113:
.................... 			case 2114:
.................... 			case 2115:
.................... 			case 2116:
.................... 			case 2117:
.................... 			case 2118:
.................... 			case 2119:
.................... 			case 2120:
.................... 			case 2121:
.................... 			case 2122:
.................... 			case 2123:
.................... 			case 2124:
.................... 			case 2125:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2110;
08BB2:  MOVLW  3E
08BB4:  MOVLB  5
08BB6:  SUBWF  x29,W
08BB8:  MOVLB  3
08BBA:  MOVWF  xB4
.................... 				#if (st8500c == true)
.................... 					data1_int = carga[aux_b4];
08BBC:  CLRF   03
08BBE:  MOVF   xB4,W
08BC0:  ADDLW  07
08BC2:  MOVWF  FE9
08BC4:  MOVLW  01
08BC6:  ADDWFC 03,W
08BC8:  MOVWF  FEA
08BCA:  CLRF   xF0
08BCC:  MOVFF  FEF,3EF
.................... 				#else
.................... 					data1_int = banco_capacitor[aux_b4];
.................... 				#endif
.................... 				break;	
08BD0:  MOVLB  0
08BD2:  BRA    8F48
.................... 				}
.................... 			case 2126:
.................... 			case 2127:
.................... 			case 2128:
.................... 			case 2129:
.................... 			case 2130:
.................... 			case 2131:
.................... 			case 2132:
.................... 			case 2133:
.................... 			case 2134:
.................... 			case 2135:
.................... 			case 2136:
.................... 			case 2137:
.................... 			case 2138:
.................... 			case 2139:
.................... 			case 2140:
.................... 			case 2141:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2126;
08BD4:  MOVLW  4E
08BD6:  MOVLB  5
08BD8:  SUBWF  x29,W
08BDA:  MOVLB  3
08BDC:  MOVWF  xB4
.................... 				data1_int = tempo_repouso[aux_b4];
08BDE:  CLRF   03
08BE0:  MOVF   xB4,W
08BE2:  ADDLW  E7
08BE4:  MOVWF  FE9
08BE6:  MOVLW  00
08BE8:  ADDWFC 03,W
08BEA:  MOVWF  FEA
08BEC:  CLRF   xF0
08BEE:  MOVFF  FEF,3EF
.................... 				break;	
08BF2:  MOVLB  0
08BF4:  BRA    8F48
.................... 				}
.................... 			case 2142:
.................... 				{
.................... 		 		 data1_int = tempo_desaciona;
08BF6:  MOVLB  3
08BF8:  CLRF   xF0
08BFA:  MOVFF  6B,3EF
.................... 	 			 break;
08BFE:  MOVLB  0
08C00:  BRA    8F48
.................... 				}
.................... 		#endif
.................... 		#if (st8500c == true)
.................... 			#if (com_tc == true)
.................... 				case 2143:
.................... 				case 2144:
.................... 					{
.................... 			 		 data1_int = 0;
08C02:  MOVLB  3
08C04:  CLRF   xF0
08C06:  CLRF   xEF
.................... 		 			 break;
08C08:  MOVLB  0
08C0A:  BRA    8F48
.................... 					}
.................... 				case 2145:
.................... 					{
.................... 					data1_int = valor_tc;
08C0C:  MOVFF  4C0,3F0
08C10:  MOVFF  4BF,3EF
.................... 					break;
08C14:  BRA    8F48
.................... 					}
.................... 				case 2146:
.................... 					{
.................... 					data1_int = valor_tp;
08C16:  MOVFF  4C2,3F0
08C1A:  MOVFF  4C1,3EF
.................... 					break;
08C1E:  BRA    8F48
.................... 					}
.................... 			#endif
.................... 		#endif
.................... 		#if (com_rep == true)
.................... 			case 2143:
.................... 				{
.................... 		 		 data1_int = NRO_MODOS_MEDICAO;
.................... 	 			 break;
.................... 				}
.................... 			case 2144:
.................... 				{
.................... 		 		 data1_int = modo_rep;
.................... 	 			 break;
.................... 				}
.................... 			case 2145:
.................... 				{
.................... 				data1_int = fat_conv_ativa;
.................... 				break;
.................... 				}
.................... 			case 2146:
.................... 				{
.................... 				data1_int = fat_conv_reativa;
.................... 				break;
.................... 				}
.................... 		#endif
.................... 		#if (st8500c == true)
.................... 			case 2150:
.................... 			case 2151:
.................... 			case 2152:
.................... 			case 2153:
.................... 			case 2154:
.................... 			case 2155:
.................... 			case 2156:
.................... 			case 2157:
.................... 			case 2158:
.................... 			case 2159:
.................... 			case 2160:
.................... 			case 2161:
.................... 			case 2162:
.................... 			case 2163:
.................... 			case 2164:
.................... 			case 2165:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2150;
08C20:  MOVLW  66
08C22:  MOVLB  5
08C24:  SUBWF  x29,W
08C26:  MOVLB  3
08C28:  MOVWF  xB4
.................... 				data1_int = forma_controle[aux_b4];
08C2A:  CLRF   03
08C2C:  MOVF   xB4,W
08C2E:  ADDLW  59
08C30:  MOVWF  FE9
08C32:  MOVLW  01
08C34:  ADDWFC 03,W
08C36:  MOVWF  FEA
08C38:  CLRF   xF0
08C3A:  MOVFF  FEF,3EF
.................... 				break;	
08C3E:  MOVLB  0
08C40:  BRA    8F48
.................... 				}
.................... 			case 2170:
.................... 			case 2171:
.................... 			case 2172:
.................... 			case 2173:
.................... 			case 2174:
.................... 			case 2175:
.................... 			case 2176:
.................... 			case 2177:
.................... 			case 2178:
.................... 			case 2179:
.................... 			case 2180:
.................... 			case 2181:
.................... 			case 2182:
.................... 			case 2183:
.................... 			case 2184:
.................... 			case 2185:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2170;
08C42:  MOVLW  7A
08C44:  MOVLB  5
08C46:  SUBWF  x29,W
08C48:  MOVLB  3
08C4A:  MOVWF  xB4
.................... 				data1_int = hora_liga_controle[aux_b4];
08C4C:  CLRF   03
08C4E:  MOVF   xB4,W
08C50:  ADDLW  6A
08C52:  MOVWF  FE9
08C54:  MOVLW  01
08C56:  ADDWFC 03,W
08C58:  MOVWF  FEA
08C5A:  CLRF   xF0
08C5C:  MOVFF  FEF,3EF
.................... 				break;	
08C60:  MOVLB  0
08C62:  BRA    8F48
.................... 				}
.................... 			case 2190:
.................... 			case 2191:
.................... 			case 2192:
.................... 			case 2193:
.................... 			case 2194:
.................... 			case 2195:
.................... 			case 2196:
.................... 			case 2197:
.................... 			case 2198:
.................... 			case 2199:
.................... 			case 2200:
.................... 			case 2201:
.................... 			case 2202:
.................... 			case 2203:
.................... 			case 2204:
.................... 			case 2205:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2190;
08C64:  MOVLW  8E
08C66:  MOVLB  5
08C68:  SUBWF  x29,W
08C6A:  MOVLB  3
08C6C:  MOVWF  xB4
.................... 				data1_int = minuto_liga_controle[aux_b4];
08C6E:  CLRF   03
08C70:  MOVF   xB4,W
08C72:  ADDLW  7B
08C74:  MOVWF  FE9
08C76:  MOVLW  01
08C78:  ADDWFC 03,W
08C7A:  MOVWF  FEA
08C7C:  CLRF   xF0
08C7E:  MOVFF  FEF,3EF
.................... 				break;	
08C82:  MOVLB  0
08C84:  BRA    8F48
.................... 				}
.................... 			case 2210:
.................... 			case 2211:
.................... 			case 2212:
.................... 			case 2213:
.................... 			case 2214:
.................... 			case 2215:
.................... 			case 2216:
.................... 			case 2217:
.................... 			case 2218:
.................... 			case 2219:
.................... 			case 2220:
.................... 			case 2221:
.................... 			case 2222:
.................... 			case 2223:			
.................... 			case 2224:
.................... 			case 2225:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2210;
08C86:  MOVLW  A2
08C88:  MOVLB  5
08C8A:  SUBWF  x29,W
08C8C:  MOVLB  3
08C8E:  MOVWF  xB4
.................... 				data1_int = hora_desliga_controle[aux_b4];
08C90:  CLRF   03
08C92:  MOVF   xB4,W
08C94:  ADDLW  8C
08C96:  MOVWF  FE9
08C98:  MOVLW  01
08C9A:  ADDWFC 03,W
08C9C:  MOVWF  FEA
08C9E:  CLRF   xF0
08CA0:  MOVFF  FEF,3EF
.................... 				break;	
08CA4:  MOVLB  0
08CA6:  BRA    8F48
.................... 				}
.................... 			case 2230:
.................... 			case 2231:
.................... 			case 2232:
.................... 			case 2233:
.................... 			case 2234:
.................... 			case 2235:
.................... 			case 2236:
.................... 			case 2237:
.................... 			case 2238:
.................... 			case 2239:
.................... 			case 2240:
.................... 			case 2241:
.................... 			case 2242:
.................... 			case 2243:			
.................... 			case 2244:
.................... 			case 2245:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2230;
08CA8:  MOVLW  B6
08CAA:  MOVLB  5
08CAC:  SUBWF  x29,W
08CAE:  MOVLB  3
08CB0:  MOVWF  xB4
.................... 				data1_int = minuto_desliga_controle[aux_b4];
08CB2:  CLRF   03
08CB4:  MOVF   xB4,W
08CB6:  ADDLW  9D
08CB8:  MOVWF  FE9
08CBA:  MOVLW  01
08CBC:  ADDWFC 03,W
08CBE:  MOVWF  FEA
08CC0:  CLRF   xF0
08CC2:  MOVFF  FEF,3EF
.................... 				break;	
08CC6:  MOVLB  0
08CC8:  BRA    8F48
.................... 				}
.................... 				
.................... 			case 2250:
.................... 				{
.................... 				data1_int = tipo_controle_demanda;
08CCA:  MOVLB  3
08CCC:  CLRF   xF0
08CCE:  MOVFF  84,3EF
.................... 				break;
08CD2:  MOVLB  0
08CD4:  BRA    8F48
.................... 				}
.................... 			case 2251:
.................... 				{
.................... 				data1_int = dem_cont_ponta[mes - 1];
08CD6:  MOVLW  01
08CD8:  MOVLB  3
08CDA:  SUBWF  xC0,W
08CDC:  MOVWF  00
08CDE:  BCF    FD8.0
08CE0:  RLCF   00,F
08CE2:  MOVF   00,W
08CE4:  CLRF   03
08CE6:  ADDLW  DB
08CE8:  MOVWF  FE9
08CEA:  MOVLW  04
08CEC:  ADDWFC 03,W
08CEE:  MOVWF  FEA
08CF0:  MOVFF  FEC,3F0
08CF4:  MOVF   FED,F
08CF6:  MOVFF  FEF,3EF
.................... 				break;
08CFA:  MOVLB  0
08CFC:  BRA    8F48
.................... 				}
.................... 			case 2252:
.................... 				{
.................... 				data1_int = dem_cont_fora_ponta[mes - 1];
08CFE:  MOVLW  01
08D00:  MOVLB  3
08D02:  SUBWF  xC0,W
08D04:  MOVWF  00
08D06:  BCF    FD8.0
08D08:  RLCF   00,F
08D0A:  MOVF   00,W
08D0C:  CLRF   03
08D0E:  ADDLW  F5
08D10:  MOVWF  FE9
08D12:  MOVLW  04
08D14:  ADDWFC 03,W
08D16:  MOVWF  FEA
08D18:  MOVFF  FEC,3F0
08D1C:  MOVF   FED,F
08D1E:  MOVFF  FEF,3EF
.................... 				break;
08D22:  MOVLB  0
08D24:  BRA    8F48
.................... 				}
.................... 			case 2253:
.................... 				{
.................... 				data1_int = 0;			//Area Livre
08D26:  MOVLB  3
08D28:  CLRF   xF0
08D2A:  CLRF   xEF
.................... 				break;
08D2C:  MOVLB  0
08D2E:  BRA    8F48
.................... 				}
.................... 			case 2254:
.................... 				{
.................... 				data1_int = 0;			// Area Livre
08D30:  MOVLB  3
08D32:  CLRF   xF0
08D34:  CLRF   xEF
.................... 				break;
08D36:  MOVLB  0
08D38:  BRA    8F48
.................... 				}
.................... 			case 2255:
.................... 				{
.................... 				data1_int = carga_programada;
08D3A:  MOVFF  510,3F0
08D3E:  MOVFF  50F,3EF
.................... 				break;
08D42:  BRA    8F48
.................... 				}
.................... 			case 2256:
.................... 				{
.................... 				data1_int = dia_inicio_pc;
08D44:  MOVLB  3
08D46:  CLRF   xF0
08D48:  MOVFF  511,3EF
.................... 				break;
08D4C:  MOVLB  0
08D4E:  BRA    8F48
.................... 				}
.................... 			case 2257:
.................... 				{
.................... 				data1_int = mes_inicio_pc;
08D50:  MOVLB  3
08D52:  CLRF   xF0
08D54:  MOVFF  512,3EF
.................... 				break;
08D58:  MOVLB  0
08D5A:  BRA    8F48
.................... 				}
.................... 			case 2258:
.................... 				{
.................... 				data1_int = dia_final_pc;
08D5C:  MOVLB  3
08D5E:  CLRF   xF0
08D60:  MOVFF  513,3EF
.................... 				break;
08D64:  MOVLB  0
08D66:  BRA    8F48
.................... 				}
.................... 			case 2259:
.................... 				{
.................... 				data1_int = mes_final_pc;
08D68:  MOVLB  3
08D6A:  CLRF   xF0
08D6C:  MOVFF  514,3EF
.................... 				break;
08D70:  MOVLB  0
08D72:  BRA    8F48
.................... 				}
.................... 			case 2260:
.................... 			case 2261:
.................... 			case 2262:
.................... 			case 2263:
.................... 			case 2264:
.................... 			case 2265:
.................... 			case 2266:
.................... 			case 2267:
.................... 			case 2268:
.................... 			case 2269:
.................... 			case 2270:
.................... 			case 2271:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2260;
08D74:  MOVLW  D4
08D76:  MOVLB  5
08D78:  SUBWF  x29,W
08D7A:  MOVLB  3
08D7C:  MOVWF  xB4
.................... 				data1_int = dem_cont_ponta[aux_b4];
08D7E:  BCF    FD8.0
08D80:  RLCF   xB4,W
08D82:  CLRF   03
08D84:  ADDLW  DB
08D86:  MOVWF  FE9
08D88:  MOVLW  04
08D8A:  ADDWFC 03,W
08D8C:  MOVWF  FEA
08D8E:  MOVFF  FEC,3F0
08D92:  MOVF   FED,F
08D94:  MOVFF  FEF,3EF
.................... 				break;
08D98:  MOVLB  0
08D9A:  BRA    8F48
.................... 				}
.................... 			case 2272:
.................... 			case 2273:
.................... 			case 2274:
.................... 			case 2275:
.................... 			case 2276:
.................... 			case 2277:
.................... 			case 2278:
.................... 			case 2279:
.................... 			case 2280:
.................... 			case 2281:
.................... 			case 2282:
.................... 			case 2283:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2272;
08D9C:  MOVLW  E0
08D9E:  MOVLB  5
08DA0:  SUBWF  x29,W
08DA2:  MOVLB  3
08DA4:  MOVWF  xB4
.................... 				data1_int = dem_cont_fora_ponta[aux_b4];
08DA6:  BCF    FD8.0
08DA8:  RLCF   xB4,W
08DAA:  CLRF   03
08DAC:  ADDLW  F5
08DAE:  MOVWF  FE9
08DB0:  MOVLW  04
08DB2:  ADDWFC 03,W
08DB4:  MOVWF  FEA
08DB6:  MOVFF  FEC,3F0
08DBA:  MOVF   FED,F
08DBC:  MOVFF  FEF,3EF
.................... 				break;
08DC0:  MOVLB  0
08DC2:  BRA    8F48
.................... 				}
.................... 				
.................... 		#endif				
.................... 
.................... 		case 2300:{
.................... 			data1_int = com_des_ten_b;
08DC4:  MOVLB  3
08DC6:  CLRF   xF0
08DC8:  MOVFF  5A,3EF
.................... 			break;
08DCC:  MOVLB  0
08DCE:  BRA    8F48
.................... 		}
.................... 		
.................... 		#if (comandos_teste == true)
.................... 			case 2998:
.................... 				{
.................... 				data1_int = cruza_ten;
08DD0:  MOVLB  3
08DD2:  CLRF   xF0
08DD4:  MOVFF  408,3EF
.................... 				break;
08DD8:  MOVLB  0
08DDA:  BRA    8F48
.................... 				}
.................... 			case 2999:
.................... 				{
.................... 				data1_int = cruza_cor;
08DDC:  MOVLB  3
08DDE:  CLRF   xF0
08DE0:  MOVFF  407,3EF
.................... 				break;
08DE4:  MOVLB  0
08DE6:  BRA    8F48
.................... 				}
.................... 		 	case 3000:
.................... 		 		{
.................... 			 	data1_int = freq_tmp1;
08DE8:  MOVFF  41F,3F0
08DEC:  MOVFF  41E,3EF
.................... 			 	break;
08DF0:  BRA    8F48
.................... 			 	}
.................... 		 	case 3001:
.................... 		 		{
.................... 			 	data1_int = nro_ints_old;
08DF2:  MOVLB  3
08DF4:  CLRF   xF0
08DF6:  MOVFF  421,3EF
.................... 			 	break;
08DFA:  MOVLB  0
08DFC:  BRA    8F48
.................... 			 	}
.................... 		 	case 3002:
.................... 		 		{
.................... 			 	data1_int = freq_tmp;
08DFE:  MOVFF  41D,3F0
08E02:  MOVFF  41C,3EF
.................... 			 	break;
08E06:  BRA    8F48
.................... 			 	}
.................... 		 	case 3003:
.................... 		 		{
.................... 			 	data1_int = distancia_fase;
08E08:  MOVLB  3
08E0A:  CLRF   xF0
08E0C:  MOVFF  3C5,3EF
.................... 			 	break;
08E10:  MOVLB  0
08E12:  BRA    8F48
.................... 			 	}
.................... 		 	case 3004:
.................... 		 		{
.................... 			 	data1_int = cont_fase;
08E14:  MOVLB  3
08E16:  CLRF   xF0
08E18:  MOVFF  3C6,3EF
.................... 		     	break;
08E1C:  MOVLB  0
08E1E:  BRA    8F48
.................... 			 	}
.................... 		 	case 3005:
.................... 		 		{
.................... 			 	data1_int = vreftr;
08E20:  MOVFF  3E8,3F0
08E24:  MOVFF  3E7,3EF
.................... 		     	break;
08E28:  BRA    8F48
.................... 			 	}
.................... 			case 3006:
.................... 				{
.................... 				data1_int = nro_soma_vref;
08E2A:  MOVLB  3
08E2C:  CLRF   xF0
08E2E:  MOVFF  41B,3EF
.................... 				break;
08E32:  MOVLB  0
08E34:  BRA    8F48
.................... 				}
.................... 			case 3007:
.................... 				{
.................... 				data1_int = soma_vref >> 16;
08E36:  MOVFF  411,3EF
08E3A:  MOVFF  412,3F0
.................... 				break;
08E3E:  BRA    8F48
.................... 				}
.................... 			case 3008:
.................... 				{
.................... 				data1_int = soma_vref;
08E40:  MOVFF  410,3F0
08E44:  MOVFF  40F,3EF
.................... 				break;
08E48:  BRA    8F48
.................... 				}
.................... 			case 3009:
.................... 				{
.................... 				data1_int = 0;
08E4A:  MOVLB  3
08E4C:  CLRF   xF0
08E4E:  CLRF   xEF
.................... 				break;
08E50:  MOVLB  0
08E52:  BRA    8F48
.................... 				}
.................... 			case 3010:
.................... 				{
.................... 				#if (com_regs == true)
.................... 					#if (ST8100C == true)
.................... 						data1_int = 0;
.................... 					#else	
.................... 						data1_int = Read_Status_Register(BANCO_0);
08E54:  MOVLB  A
08E56:  CLRF   x8A
08E58:  CLRF   x89
08E5A:  CLRF   x88
08E5C:  CLRF   x87
08E5E:  MOVLB  0
08E60:  CALL   556A
08E64:  MOVLB  3
08E66:  CLRF   xF0
08E68:  MOVFF  01,3EF
.................... 					#endif
.................... 				#else
.................... 					data1_int = 0;
.................... 				#endif			
.................... 				break;
08E6C:  MOVLB  0
08E6E:  BRA    8F48
.................... 				}
.................... 			case 3011:
.................... 				{
.................... 				#if (com_regs == true)
.................... 					#if (ST8100C == true)
.................... 						data1_int = 0;
.................... 					#else
.................... 						data1_int = Read_ID(BANCO_0, 0);
08E70:  MOVLB  A
08E72:  CLRF   x50
08E74:  CLRF   x4F
08E76:  CLRF   x4E
08E78:  CLRF   x4D
08E7A:  CLRF   x51
08E7C:  MOVLB  0
08E7E:  CALL   4DAE
08E82:  MOVLB  3
08E84:  CLRF   xF0
08E86:  MOVFF  01,3EF
.................... 					#endif
.................... 				#else
.................... 					data1_int = 0;
.................... 				#endif			
.................... 				break;
08E8A:  MOVLB  0
08E8C:  BRA    8F48
.................... 				}
.................... 			case 3012:
.................... 				{
.................... 				#if (com_regs == true)
.................... 					#if (ST8100C == true)
.................... 						data1_int = 0;
.................... 					#else
.................... 						data1_int = Read_ID(BANCO_0, 1);
08E8E:  MOVLB  A
08E90:  CLRF   x50
08E92:  CLRF   x4F
08E94:  CLRF   x4E
08E96:  CLRF   x4D
08E98:  MOVLW  01
08E9A:  MOVWF  x51
08E9C:  MOVLB  0
08E9E:  CALL   4DAE
08EA2:  MOVLB  3
08EA4:  CLRF   xF0
08EA6:  MOVFF  01,3EF
.................... 					#endif
.................... 				#else
.................... 					data1_int = 0;
.................... 				#endif			
.................... 				break;
08EAA:  MOVLB  0
08EAC:  BRA    8F48
.................... 				}
.................... 			case 3013:
.................... 				{
.................... 				data1_int = soma_efi_kvar_r >> 16;
08EAE:  MOVFF  238,3EF
08EB2:  MOVFF  239,3F0
.................... 				break;
08EB6:  BRA    8F48
.................... 				}
.................... 			case 3014:
.................... 				{
.................... 				data1_int = soma_efi_kvar_r;
08EB8:  MOVFF  237,3F0
08EBC:  MOVFF  236,3EF
.................... 				break;
08EC0:  BRA    8F48
.................... 				}
.................... 			case 3015:
.................... 				{
.................... 				data1_int = soma_efi_pr >> 16;
08EC2:  MOVFF  22C,3EF
08EC6:  MOVFF  22D,3F0
.................... 				break;
08ECA:  BRA    8F48
.................... 				}
.................... 			case 3016:
.................... 				{
.................... 				data1_int = soma_efi_pr;
08ECC:  MOVFF  22B,3F0
08ED0:  MOVFF  22A,3EF
.................... 				break;
08ED4:  BRA    8F48
.................... 				}
.................... 			case 3017:
.................... 				{
.................... 				data1_int = soma_efi_p_tmp >> 16;
08ED6:  MOVFF  240,3EF
08EDA:  MOVFF  241,3F0
.................... 				break;
08EDE:  BRA    8F48
.................... 				}
.................... 			case 3018:
.................... 				{
.................... 				data1_int = soma_efi_p_tmp;
08EE0:  MOVFF  23F,3F0
08EE4:  MOVFF  23E,3EF
.................... 				break;
08EE8:  BRA    8F48
.................... 				}
.................... 		#endif
.................... 		#if (chip_cs5460a == true)
.................... 			case 3014:
.................... 				{
.................... 	//			calcula_tensao_corrente();
.................... 				aux_ten_l = read_cs5460(V_rms,'R') ;
.................... 				data1_int = aux_ten_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3015:
.................... 				{
.................... 				data1_int = aux_ten_l;
.................... 				break;
.................... 				}
.................... 			case 3016:
.................... 				{
.................... 				aux_cor_l = read_cs5460(I_rms,'R');
.................... 				data1_int = aux_cor_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3017:
.................... 				{
.................... 				data1_int = aux_cor_l;
.................... 				break;
.................... 				}
.................... 			case 3018:
.................... 				{
.................... 				aux_pot_l = read_cs5460(E_register,'R');
.................... 				data1_int = aux_pot_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3019:
.................... 				{
.................... 				data1_int = aux_pot_l;
.................... 				break;
.................... 				}
.................... 
.................... 	
.................... 			case 3020:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(config_cs5460a,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3021:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3022:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(I_dc_offset,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3023:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3024:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(I_gain,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3025:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3026:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(V_dc_offset,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3027:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3028:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(V_gain,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3029:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3030:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(cycle_count,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3031:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3032:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(pulse_rate,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3033:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3034:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(TBC_register,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3035:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3036:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(P_offset,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3037:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3038:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(Status_cs5460a,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				status_cs5460h = datah;
.................... 				status_cs5460m = datam;
.................... 				status_cs5460l = datal;
.................... 				break;
.................... 				}
.................... 			case 3039:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3040:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(I_ac_offset,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3041:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3042:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(V_ac_offset,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3043:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3044:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(mask_cs5460a,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3045:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			case 3046:
.................... 				{
.................... 				aux_cs5460_l = read_cs5460(ctrl_cs5460a,'R');
.................... 				data1_int = aux_cs5460_l >> 16;
.................... 				break;
.................... 				}
.................... 			case 3047:
.................... 				{
.................... 				data1_int = aux_cs5460_l;
.................... 				break;
.................... 				}
.................... 			
.................... 		#endif
.................... 
.................... 
.................... 		case 9005:
.................... 			{
.................... 			buf_tmp[0] = read_byte(ee_nro_1);
08EEA:  MOVLW  03
08EEC:  MOVLB  A
08EEE:  MOVWF  x66
08EF0:  MOVLW  7C
08EF2:  MOVWF  x65
08EF4:  MOVLB  0
08EF6:  CALL   1C24
08EFA:  MOVFF  01,864
.................... 			buf_tmp[1] = read_byte(ee_nro_2);
08EFE:  MOVLW  03
08F00:  MOVLB  A
08F02:  MOVWF  x66
08F04:  MOVLW  7D
08F06:  MOVWF  x65
08F08:  MOVLB  0
08F0A:  CALL   1C24
08F0E:  MOVFF  01,865
.................... 			buf_tmp[2] = read_byte(ee_nro_3);
08F12:  MOVLW  03
08F14:  MOVLB  A
08F16:  MOVWF  x66
08F18:  MOVLW  7E
08F1A:  MOVWF  x65
08F1C:  MOVLB  0
08F1E:  CALL   1C24
08F22:  MOVFF  01,866
.................... 			buf_tmp[3] = read_byte(ee_nro_4);
08F26:  MOVLW  03
08F28:  MOVLB  A
08F2A:  MOVWF  x66
08F2C:  MOVLW  7F
08F2E:  MOVWF  x65
08F30:  MOVLB  0
08F32:  CALL   1C24
08F36:  MOVFF  01,867
.................... 			ascbin1();
08F3A:  GOTO   7326
.................... 			break;
08F3E:  BRA    8F48
08F40:  MOVLB  5
.................... 			}
.................... 
.................... 		#if (ade7754 == true)
.................... 	 	    case 9990:
.................... 	 	    	{
.................... 				data1_int = read_word(ee_reg_cfnum);
.................... 				break;
.................... 				}
.................... 	 	    case 9991:
.................... 	 	    	{
.................... 				data1_int = read_word(ee_reg_cfdem);
.................... 				break;
.................... 				}
.................... 	 	    case 9992:
.................... 	 	    	{
.................... 				data1_int = RAENERGY_R;
.................... 				break;
.................... 				}
.................... 	 	    case 9993:
.................... 	 	    	{
.................... 				data1_int = RAENERGY_S;
.................... 				break;
.................... 				}
.................... 	 	    case 9994:
.................... 	 	    	{
.................... 				data1_int = RAENERGY_T;
.................... 				break;
.................... 				}
.................... 		#endif
.................... 
.................... 
.................... 	 	 default:
.................... 	 		{
.................... 	 		data1_int = 0;
08F42:  MOVLB  3
08F44:  CLRF   xF0
08F46:  CLRF   xEF
08F48:  MOVLB  0
.................... 	 		}
.................... 	 	} 
08F4A:  GOTO   8FB4 (RETURN)
.................... }	 	
.................... 
.................... 
.................... 	 
.................... void le_word_vars_modbus(void)
.................... {   
.................... 	data1_int = 0;
*
098BA:  MOVLB  3
098BC:  CLRF   xF0
098BE:  CLRF   xEF
.................... 	 switch(addr_regs_modbus)
098C0:  MOVLB  5
098C2:  MOVF   x29,W
098C4:  MOVWF  00
098C6:  MOVF   x2A,W
098C8:  MOVWF  03
098CA:  MOVF   03,W
098CC:  BNZ   98DA
098CE:  MOVLW  01
098D0:  SUBWF  00,W
098D2:  MOVLB  0
098D4:  BTFSC  FD8.2
098D6:  BRA    9BEC
098D8:  MOVLB  5
098DA:  MOVF   03,W
098DC:  BNZ   98EA
098DE:  MOVLW  02
098E0:  SUBWF  00,W
098E2:  MOVLB  0
098E4:  BTFSC  FD8.2
098E6:  BRA    9C0E
098E8:  MOVLB  5
098EA:  MOVF   03,W
098EC:  BNZ   98FA
098EE:  MOVLW  03
098F0:  SUBWF  00,W
098F2:  MOVLB  0
098F4:  BTFSC  FD8.2
098F6:  BRA    9C30
098F8:  MOVLB  5
098FA:  MOVF   03,W
098FC:  BNZ   990A
098FE:  MOVLW  04
09900:  SUBWF  00,W
09902:  MOVLB  0
09904:  BTFSC  FD8.2
09906:  BRA    9C52
09908:  MOVLB  5
0990A:  MOVF   03,W
0990C:  BNZ   991A
0990E:  MOVLW  05
09910:  SUBWF  00,W
09912:  MOVLB  0
09914:  BTFSC  FD8.2
09916:  BRA    9C60
09918:  MOVLB  5
0991A:  MOVF   03,W
0991C:  BNZ   992A
0991E:  MOVLW  06
09920:  SUBWF  00,W
09922:  MOVLB  0
09924:  BTFSC  FD8.2
09926:  BRA    9C6E
09928:  MOVLB  5
0992A:  MOVF   03,W
0992C:  BNZ   993A
0992E:  MOVLW  07
09930:  SUBWF  00,W
09932:  MOVLB  0
09934:  BTFSC  FD8.2
09936:  BRA    9C7C
09938:  MOVLB  5
0993A:  MOVF   03,W
0993C:  BNZ   994A
0993E:  MOVLW  08
09940:  SUBWF  00,W
09942:  MOVLB  0
09944:  BTFSC  FD8.2
09946:  BRA    9C8A
09948:  MOVLB  5
0994A:  MOVF   03,W
0994C:  BNZ   995A
0994E:  MOVLW  09
09950:  SUBWF  00,W
09952:  MOVLB  0
09954:  BTFSC  FD8.2
09956:  BRA    9C98
09958:  MOVLB  5
0995A:  MOVF   03,W
0995C:  BNZ   996A
0995E:  MOVLW  0A
09960:  SUBWF  00,W
09962:  MOVLB  0
09964:  BTFSC  FD8.2
09966:  BRA    9CA6
09968:  MOVLB  5
0996A:  MOVF   03,W
0996C:  BNZ   997A
0996E:  MOVLW  0B
09970:  SUBWF  00,W
09972:  MOVLB  0
09974:  BTFSC  FD8.2
09976:  BRA    9CB4
09978:  MOVLB  5
0997A:  MOVF   03,W
0997C:  BNZ   998A
0997E:  MOVLW  0C
09980:  SUBWF  00,W
09982:  MOVLB  0
09984:  BTFSC  FD8.2
09986:  BRA    9CC2
09988:  MOVLB  5
0998A:  MOVF   03,W
0998C:  BNZ   999A
0998E:  MOVLW  0D
09990:  SUBWF  00,W
09992:  MOVLB  0
09994:  BTFSC  FD8.2
09996:  BRA    9CD0
09998:  MOVLB  5
0999A:  MOVF   03,W
0999C:  BNZ   99AA
0999E:  MOVLW  0E
099A0:  SUBWF  00,W
099A2:  MOVLB  0
099A4:  BTFSC  FD8.2
099A6:  BRA    9CDE
099A8:  MOVLB  5
099AA:  MOVF   03,W
099AC:  BNZ   99BA
099AE:  MOVLW  0F
099B0:  SUBWF  00,W
099B2:  MOVLB  0
099B4:  BTFSC  FD8.2
099B6:  BRA    9D62
099B8:  MOVLB  5
099BA:  MOVF   03,W
099BC:  BNZ   99CA
099BE:  MOVLW  10
099C0:  SUBWF  00,W
099C2:  MOVLB  0
099C4:  BTFSC  FD8.2
099C6:  BRA    9DD6
099C8:  MOVLB  5
099CA:  MOVF   03,W
099CC:  BNZ   99DA
099CE:  MOVLW  11
099D0:  SUBWF  00,W
099D2:  MOVLB  0
099D4:  BTFSC  FD8.2
099D6:  BRA    9DE4
099D8:  MOVLB  5
099DA:  MOVF   03,W
099DC:  BNZ   99EA
099DE:  MOVLW  12
099E0:  SUBWF  00,W
099E2:  MOVLB  0
099E4:  BTFSC  FD8.2
099E6:  BRA    9DF2
099E8:  MOVLB  5
099EA:  MOVF   03,W
099EC:  BNZ   99FA
099EE:  MOVLW  13
099F0:  SUBWF  00,W
099F2:  MOVLB  0
099F4:  BTFSC  FD8.2
099F6:  BRA    9E00
099F8:  MOVLB  5
099FA:  MOVF   03,W
099FC:  BNZ   9A0A
099FE:  MOVLW  14
09A00:  SUBWF  00,W
09A02:  MOVLB  0
09A04:  BTFSC  FD8.2
09A06:  BRA    9E84
09A08:  MOVLB  5
09A0A:  MOVF   03,W
09A0C:  BNZ   9A1A
09A0E:  MOVLW  15
09A10:  SUBWF  00,W
09A12:  MOVLB  0
09A14:  BTFSC  FD8.2
09A16:  BRA    9EF8
09A18:  MOVLB  5
09A1A:  MOVF   03,W
09A1C:  BNZ   9A2A
09A1E:  MOVLW  16
09A20:  SUBWF  00,W
09A22:  MOVLB  0
09A24:  BTFSC  FD8.2
09A26:  BRA    9F06
09A28:  MOVLB  5
09A2A:  MOVF   03,W
09A2C:  BNZ   9A3A
09A2E:  MOVLW  17
09A30:  SUBWF  00,W
09A32:  MOVLB  0
09A34:  BTFSC  FD8.2
09A36:  BRA    9F14
09A38:  MOVLB  5
09A3A:  MOVF   03,W
09A3C:  BNZ   9A4A
09A3E:  MOVLW  18
09A40:  SUBWF  00,W
09A42:  MOVLB  0
09A44:  BTFSC  FD8.2
09A46:  BRA    9F22
09A48:  MOVLB  5
09A4A:  MOVF   03,W
09A4C:  BNZ   9A5A
09A4E:  MOVLW  19
09A50:  SUBWF  00,W
09A52:  MOVLB  0
09A54:  BTFSC  FD8.2
09A56:  BRA    9FA6
09A58:  MOVLB  5
09A5A:  MOVF   03,W
09A5C:  BNZ   9A6A
09A5E:  MOVLW  1A
09A60:  SUBWF  00,W
09A62:  MOVLB  0
09A64:  BTFSC  FD8.2
09A66:  BRA    A01A
09A68:  MOVLB  5
09A6A:  MOVF   03,W
09A6C:  BNZ   9A7A
09A6E:  MOVLW  1B
09A70:  SUBWF  00,W
09A72:  MOVLB  0
09A74:  BTFSC  FD8.2
09A76:  BRA    A028
09A78:  MOVLB  5
09A7A:  MOVF   03,W
09A7C:  BNZ   9A8A
09A7E:  MOVLW  1C
09A80:  SUBWF  00,W
09A82:  MOVLB  0
09A84:  BTFSC  FD8.2
09A86:  BRA    A038
09A88:  MOVLB  5
09A8A:  MOVF   03,W
09A8C:  BNZ   9A9A
09A8E:  MOVLW  1D
09A90:  SUBWF  00,W
09A92:  MOVLB  0
09A94:  BTFSC  FD8.2
09A96:  BRA    A046
09A98:  MOVLB  5
09A9A:  MOVF   03,W
09A9C:  BNZ   9AAA
09A9E:  MOVLW  1E
09AA0:  SUBWF  00,W
09AA2:  MOVLB  0
09AA4:  BTFSC  FD8.2
09AA6:  BRA    A054
09AA8:  MOVLB  5
09AAA:  MOVF   03,W
09AAC:  BNZ   9ABA
09AAE:  MOVLW  1F
09AB0:  SUBWF  00,W
09AB2:  MOVLB  0
09AB4:  BTFSC  FD8.2
09AB6:  BRA    A064
09AB8:  MOVLB  5
09ABA:  MOVF   03,W
09ABC:  BNZ   9ACA
09ABE:  MOVLW  20
09AC0:  SUBWF  00,W
09AC2:  MOVLB  0
09AC4:  BTFSC  FD8.2
09AC6:  BRA    A072
09AC8:  MOVLB  5
09ACA:  MOVF   03,W
09ACC:  BNZ   9ADA
09ACE:  MOVLW  21
09AD0:  SUBWF  00,W
09AD2:  MOVLB  0
09AD4:  BTFSC  FD8.2
09AD6:  BRA    A080
09AD8:  MOVLB  5
09ADA:  MOVF   03,W
09ADC:  BNZ   9AEA
09ADE:  MOVLW  22
09AE0:  SUBWF  00,W
09AE2:  MOVLB  0
09AE4:  BTFSC  FD8.2
09AE6:  BRA    A08E
09AE8:  MOVLB  5
09AEA:  MOVF   03,W
09AEC:  BNZ   9AFA
09AEE:  MOVLW  23
09AF0:  SUBWF  00,W
09AF2:  MOVLB  0
09AF4:  BTFSC  FD8.2
09AF6:  BRA    A09C
09AF8:  MOVLB  5
09AFA:  MOVF   03,W
09AFC:  BNZ   9B0A
09AFE:  MOVLW  24
09B00:  SUBWF  00,W
09B02:  MOVLB  0
09B04:  BTFSC  FD8.2
09B06:  BRA    A0AA
09B08:  MOVLB  5
09B0A:  MOVF   03,W
09B0C:  BNZ   9B1A
09B0E:  MOVLW  25
09B10:  SUBWF  00,W
09B12:  MOVLB  0
09B14:  BTFSC  FD8.2
09B16:  BRA    A0B8
09B18:  MOVLB  5
09B1A:  MOVF   03,W
09B1C:  BNZ   9B2A
09B1E:  MOVLW  26
09B20:  SUBWF  00,W
09B22:  MOVLB  0
09B24:  BTFSC  FD8.2
09B26:  BRA    A128
09B28:  MOVLB  5
09B2A:  MOVF   03,W
09B2C:  BNZ   9B3A
09B2E:  MOVLW  27
09B30:  SUBWF  00,W
09B32:  MOVLB  0
09B34:  BTFSC  FD8.2
09B36:  BRA    A198
09B38:  MOVLB  5
09B3A:  MOVF   03,W
09B3C:  BNZ   9B4A
09B3E:  MOVLW  28
09B40:  SUBWF  00,W
09B42:  MOVLB  0
09B44:  BTFSC  FD8.2
09B46:  BRA    A1A6
09B48:  MOVLB  5
09B4A:  MOVF   03,W
09B4C:  BNZ   9B5A
09B4E:  MOVLW  29
09B50:  SUBWF  00,W
09B52:  MOVLB  0
09B54:  BTFSC  FD8.2
09B56:  BRA    A1B4
09B58:  MOVLB  5
09B5A:  MOVF   03,W
09B5C:  BNZ   9B6A
09B5E:  MOVLW  2A
09B60:  SUBWF  00,W
09B62:  MOVLB  0
09B64:  BTFSC  FD8.2
09B66:  BRA    A1C2
09B68:  MOVLB  5
09B6A:  MOVF   03,W
09B6C:  BNZ   9B7A
09B6E:  MOVLW  2B
09B70:  SUBWF  00,W
09B72:  MOVLB  0
09B74:  BTFSC  FD8.2
09B76:  BRA    A1D0
09B78:  MOVLB  5
09B7A:  MOVF   03,W
09B7C:  BNZ   9B8A
09B7E:  MOVLW  2C
09B80:  SUBWF  00,W
09B82:  MOVLB  0
09B84:  BTFSC  FD8.2
09B86:  BRA    A1DE
09B88:  MOVLB  5
09B8A:  MOVF   03,W
09B8C:  BNZ   9B9A
09B8E:  MOVLW  2D
09B90:  SUBWF  00,W
09B92:  MOVLB  0
09B94:  BTFSC  FD8.2
09B96:  BRA    A1EC
09B98:  MOVLB  5
09B9A:  MOVF   03,W
09B9C:  BNZ   9BAA
09B9E:  MOVLW  2E
09BA0:  SUBWF  00,W
09BA2:  MOVLB  0
09BA4:  BTFSC  FD8.2
09BA6:  BRA    A1FA
09BA8:  MOVLB  5
09BAA:  MOVF   03,W
09BAC:  BNZ   9BBA
09BAE:  MOVLW  2F
09BB0:  SUBWF  00,W
09BB2:  MOVLB  0
09BB4:  BTFSC  FD8.2
09BB6:  BRA    A208
09BB8:  MOVLB  5
09BBA:  MOVF   03,W
09BBC:  BNZ   9BCA
09BBE:  MOVLW  30
09BC0:  SUBWF  00,W
09BC2:  MOVLB  0
09BC4:  BTFSC  FD8.2
09BC6:  BRA    A216
09BC8:  MOVLB  5
09BCA:  MOVF   03,W
09BCC:  BNZ   9BDA
09BCE:  MOVLW  31
09BD0:  SUBWF  00,W
09BD2:  MOVLB  0
09BD4:  BTFSC  FD8.2
09BD6:  BRA    A224
09BD8:  MOVLB  5
09BDA:  MOVF   03,W
09BDC:  BNZ   9BEA
09BDE:  MOVLW  32
09BE0:  SUBWF  00,W
09BE2:  MOVLB  0
09BE4:  BTFSC  FD8.2
09BE6:  BRA    A232
09BE8:  MOVLB  5
09BEA:  BRA    A240
.................... 	 	{
.................... 	 	case 1:
.................... 	 		{
.................... 		 	#if (monofasico == true)
.................... 		 		 data1_int = tensao_r;
.................... 		 	#else
.................... 				if ((tipo_ligacao == 0) || (tipo_ligacao == 2))
09BEC:  MOVLB  4
09BEE:  MOVF   xC7,F
09BF0:  BZ    9BF8
09BF2:  MOVF   xC7,W
09BF4:  SUBLW  02
09BF6:  BNZ   9C02
.................... 					{
.................... 			 		 data1_int = tensao_r;
09BF8:  MOVFF  251,3F0
09BFC:  MOVFF  250,3EF
.................... 					}
09C00:  BRA    9C0A
.................... 				else
.................... 					{
.................... 			 		 data1_int = tensao_rs;
09C02:  MOVFF  273,3F0
09C06:  MOVFF  272,3EF
.................... 					}
.................... 			#endif
.................... 	 		 break;
09C0A:  BRA    A248
09C0C:  MOVLB  0
.................... 	 		}
.................... 		#if (monofasico == false)
.................... 			#if (padrao_referencia == true)
.................... 			 	case 2:
.................... 			 	case 3:{
.................... 					if ((tipo_ligacao == 0) || (tipo_ligacao == 2)){
.................... 				 		data1_int = tensao_r;
.................... 						}
.................... 					else{
.................... 				 		data1_int = tensao_rs;
.................... 						}
.................... 			 		break;
.................... 		 			}
.................... 			#else
.................... 			 	case 2:
.................... 		 			{
.................... 					if ((tipo_ligacao == 0) || (tipo_ligacao == 2))
09C0E:  MOVLB  4
09C10:  MOVF   xC7,F
09C12:  BZ    9C1A
09C14:  MOVF   xC7,W
09C16:  SUBLW  02
09C18:  BNZ   9C24
.................... 						{
.................... 				 		 data1_int = tensao_s;
09C1A:  MOVFF  2D5,3F0
09C1E:  MOVFF  2D4,3EF
.................... 						}
09C22:  BRA    9C2C
.................... 					else
.................... 						{
.................... 				 		 data1_int = tensao_st;
09C24:  MOVFF  2E5,3F0
09C28:  MOVFF  2E4,3EF
.................... 						}
.................... 			 		 break;
09C2C:  BRA    A248
09C2E:  MOVLB  0
.................... 		 		}
.................... 			 	case 3:
.................... 		 			{
.................... 					if ((tipo_ligacao == 0) || (tipo_ligacao == 2))
09C30:  MOVLB  4
09C32:  MOVF   xC7,F
09C34:  BZ    9C3C
09C36:  MOVF   xC7,W
09C38:  SUBLW  02
09C3A:  BNZ   9C46
.................... 						{
.................... 				 		 data1_int = tensao_t;
09C3C:  MOVFF  32C,3F0
09C40:  MOVFF  32B,3EF
.................... 						}
09C44:  BRA    9C4E
.................... 					else
.................... 						{
.................... 				 		 data1_int = tensao_rt;
09C46:  MOVFF  33C,3F0
09C4A:  MOVFF  33B,3EF
.................... 						}
.................... 			 		 break;
09C4E:  BRA    A248
09C50:  MOVLB  0
.................... 		 			}
.................... 		 	#endif
.................... 	 	#endif
.................... 	 	case 4:
.................... 	 		{
.................... 	 		 data1_int = corrente_r;
09C52:  MOVFF  253,3F0
09C56:  MOVFF  252,3EF
.................... 	 		 break;
09C5A:  MOVLB  4
09C5C:  BRA    A248
09C5E:  MOVLB  0
.................... 	 		}
.................... 		#if (monofasico == false)
.................... 			#if (padrao_referencia == true)
.................... 			 	case 5:
.................... 			 	case 6:{
.................... 					data1_int = corrente_r;
.................... 			 		break;
.................... 		 			}
.................... 			#else
.................... 				case 5:
.................... 		 			{
.................... 			 		data1_int = corrente_s;
09C60:  MOVFF  2D7,3F0
09C64:  MOVFF  2D6,3EF
.................... 			 		break;
09C68:  MOVLB  4
09C6A:  BRA    A248
09C6C:  MOVLB  0
.................... 		 			}
.................... 				case 6:
.................... 		 			{
.................... 			 		data1_int = corrente_t;
09C6E:  MOVFF  32E,3F0
09C72:  MOVFF  32D,3EF
.................... 			 		break;
09C76:  MOVLB  4
09C78:  BRA    A248
09C7A:  MOVLB  0
.................... 		 			}
.................... 		 	#endif
.................... 	 	#endif
.................... 	 	case 7:
.................... 	 		{
.................... 	 		 data1_int = fator_pot_r;
09C7C:  MOVFF  263,3F0
09C80:  MOVFF  262,3EF
.................... 	 		 break;
09C84:  MOVLB  4
09C86:  BRA    A248
09C88:  MOVLB  0
.................... 	 		}
.................... 		#if (monofasico == false)
.................... 			#if (padrao_referencia == true)
.................... 			 	case 8:
.................... 			 	case 9:
.................... 			 	case 10:{
.................... 					data1_int = fator_pot_r;
.................... 			 		break;
.................... 		 			}
.................... 			#else
.................... 				case 8:{
.................... 			 		data1_int = fator_pot_s;
09C8A:  MOVFF  2E3,3F0
09C8E:  MOVFF  2E2,3EF
.................... 			 		break;
09C92:  MOVLB  4
09C94:  BRA    A248
09C96:  MOVLB  0
.................... 		 			}
.................... 				case 9:{
.................... 			 		data1_int = fator_pot_t;
09C98:  MOVFF  33A,3F0
09C9C:  MOVFF  339,3EF
.................... 			 		break;
09CA0:  MOVLB  4
09CA2:  BRA    A248
09CA4:  MOVLB  0
.................... 		 			}
.................... 			 	case 10:{
.................... 					data1_int = fator_pot;
09CA6:  MOVFF  293,3F0
09CAA:  MOVFF  292,3EF
.................... 					break;
09CAE:  MOVLB  4
09CB0:  BRA    A248
09CB2:  MOVLB  0
.................... 		 			}
.................... 		 	#endif
.................... 	 	#endif
.................... 	 	case 11:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 				 		 data1_int = pot_ativa_tot;
.................... 		 				}
.................... 		 			else
.................... 		 				{
.................... 				 		 data1_int = pot_ativa_r;
.................... 			 			}
.................... 			 	#else
.................... 			 		 data1_int = pot_ativa_r;
.................... 			 	#endif
.................... 		 	#else
.................... 		 		 data1_int = pot_ativa_r;
09CB4:  MOVFF  259,3F0
09CB8:  MOVFF  258,3EF
.................... 		 	#endif
.................... 	 		 break;
09CBC:  MOVLB  4
09CBE:  BRA    A248
09CC0:  MOVLB  0
.................... 	 		}
.................... 		#if (monofasico == false)
.................... 			#if (padrao_referencia == true)
.................... 			 	case 12:
.................... 			 	case 13:
.................... 			 	case 14:
.................... 			 	case 15:{
.................... 					data1_int = pot_ativa_r;
.................... 			 		break;
.................... 		 			}
.................... 			#else
.................... 			 	case 12:{
.................... 					data1_int = pot_ativa_s;
09CC2:  MOVFF  2DD,3F0
09CC6:  MOVFF  2DC,3EF
.................... 					break;
09CCA:  MOVLB  4
09CCC:  BRA    A248
09CCE:  MOVLB  0
.................... 		 			}
.................... 			 	case 13:{
.................... 					data1_int = pot_ativa_t;
09CD0:  MOVFF  334,3F0
09CD4:  MOVFF  333,3EF
.................... 					break;
09CD8:  MOVLB  4
09CDA:  BRA    A248
09CDC:  MOVLB  0
.................... 		 			}
.................... 		 		case 14:{
.................... 					aux_l1 = pot_ativa_r;
09CDE:  MOVLB  3
09CE0:  CLRF   x73
09CE2:  CLRF   x72
09CE4:  MOVFF  259,371
09CE8:  MOVFF  258,370
.................... 					aux_l1 += pot_ativa_s;
09CEC:  MOVLB  2
09CEE:  MOVF   xDC,W
09CF0:  MOVLB  3
09CF2:  ADDWF  x70,F
09CF4:  MOVLB  2
09CF6:  MOVF   xDD,W
09CF8:  MOVLB  3
09CFA:  ADDWFC x71,F
09CFC:  MOVLW  00
09CFE:  ADDWFC x72,F
09D00:  ADDWFC x73,F
.................... 					aux_l1 += pot_ativa_t;
09D02:  MOVF   x33,W
09D04:  ADDWF  x70,F
09D06:  MOVF   x34,W
09D08:  ADDWFC x71,F
09D0A:  MOVLW  00
09D0C:  ADDWFC x72,F
09D0E:  ADDWFC x73,F
.................... 					data1_int = (word)((aux_l1 / 32) >> 16);
09D10:  RRCF   x73,W
09D12:  MOVLB  A
09D14:  MOVWF  x50
09D16:  MOVLB  3
09D18:  RRCF   x72,W
09D1A:  MOVLB  A
09D1C:  MOVWF  x4F
09D1E:  MOVLB  3
09D20:  RRCF   x71,W
09D22:  MOVLB  A
09D24:  MOVWF  x4E
09D26:  MOVLB  3
09D28:  RRCF   x70,W
09D2A:  MOVLB  A
09D2C:  MOVWF  x4D
09D2E:  RRCF   x50,F
09D30:  RRCF   x4F,F
09D32:  RRCF   x4E,F
09D34:  RRCF   x4D,F
09D36:  RRCF   x50,F
09D38:  RRCF   x4F,F
09D3A:  RRCF   x4E,F
09D3C:  RRCF   x4D,F
09D3E:  RRCF   x50,F
09D40:  RRCF   x4F,F
09D42:  RRCF   x4E,F
09D44:  RRCF   x4D,F
09D46:  RRCF   x50,F
09D48:  RRCF   x4F,F
09D4A:  RRCF   x4E,F
09D4C:  RRCF   x4D,F
09D4E:  MOVLW  07
09D50:  ANDWF  x50,F
09D52:  MOVFF  A4F,3EF
09D56:  MOVFF  A50,3F0
09D5A:  CLRF   03
.................... 					break;
09D5C:  MOVLB  4
09D5E:  BRA    A248
09D60:  MOVLB  0
.................... 		 			}
.................... 			 	case 15:{
.................... 					aux_l1 = pot_ativa_r;
09D62:  MOVLB  3
09D64:  CLRF   x73
09D66:  CLRF   x72
09D68:  MOVFF  259,371
09D6C:  MOVFF  258,370
.................... 					aux_l1 += pot_ativa_s;
09D70:  MOVLB  2
09D72:  MOVF   xDC,W
09D74:  MOVLB  3
09D76:  ADDWF  x70,F
09D78:  MOVLB  2
09D7A:  MOVF   xDD,W
09D7C:  MOVLB  3
09D7E:  ADDWFC x71,F
09D80:  MOVLW  00
09D82:  ADDWFC x72,F
09D84:  ADDWFC x73,F
.................... 					aux_l1 += pot_ativa_t;
09D86:  MOVF   x33,W
09D88:  ADDWF  x70,F
09D8A:  MOVF   x34,W
09D8C:  ADDWFC x71,F
09D8E:  MOVLW  00
09D90:  ADDWFC x72,F
09D92:  ADDWFC x73,F
.................... 					data1_int = (word)(aux_l1 / 32);
09D94:  RRCF   x73,W
09D96:  MOVWF  03
09D98:  RRCF   x72,W
09D9A:  MOVWF  02
09D9C:  RRCF   x71,W
09D9E:  MOVWF  01
09DA0:  RRCF   x70,W
09DA2:  MOVWF  00
09DA4:  RRCF   03,F
09DA6:  RRCF   02,F
09DA8:  RRCF   01,F
09DAA:  RRCF   00,F
09DAC:  RRCF   03,F
09DAE:  RRCF   02,F
09DB0:  RRCF   01,F
09DB2:  RRCF   00,F
09DB4:  RRCF   03,F
09DB6:  RRCF   02,F
09DB8:  RRCF   01,F
09DBA:  RRCF   00,F
09DBC:  RRCF   03,F
09DBE:  RRCF   02,F
09DC0:  RRCF   01,F
09DC2:  RRCF   00,F
09DC4:  MOVLW  07
09DC6:  ANDWF  03,F
09DC8:  MOVFF  01,3F0
09DCC:  MOVFF  00,3EF
.................... 					break;
09DD0:  MOVLB  4
09DD2:  BRA    A248
09DD4:  MOVLB  0
.................... 		 			}
.................... 		 	#endif
.................... 	 	#endif
.................... 	 	case 16:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 				 		 data1_int = pot_reativa_tot;
.................... 		 				}
.................... 		 			else
.................... 		 				{
.................... 				 		 data1_int = pot_reativa_r;
.................... 			 			}
.................... 			 	#else
.................... 			 		 data1_int = pot_reativa_r;
.................... 			 	#endif
.................... 		 	#else
.................... 		 		 data1_int = pot_reativa_r;
09DD6:  MOVFF  25D,3F0
09DDA:  MOVFF  25C,3EF
.................... 		 	#endif
.................... 	 		 break;
09DDE:  MOVLB  4
09DE0:  BRA    A248
09DE2:  MOVLB  0
.................... 	 		}
.................... 		#if (monofasico == false)
.................... 			#if (padrao_referencia == true)
.................... 			 	case 17:
.................... 			 	case 18:
.................... 			 	case 19:
.................... 			 	case 20:{
.................... 					data1_int = pot_reativa_r;
.................... 			 		break;
.................... 		 			}
.................... 			#else
.................... 			 	case 17:{
.................... 					data1_int = pot_reativa_s;
09DE4:  MOVFF  2E1,3F0
09DE8:  MOVFF  2E0,3EF
.................... 					break;
09DEC:  MOVLB  4
09DEE:  BRA    A248
09DF0:  MOVLB  0
.................... 					}
.................... 				case 18:{
.................... 			 		data1_int = pot_reativa_t;
09DF2:  MOVFF  338,3F0
09DF6:  MOVFF  337,3EF
.................... 			 		break;
09DFA:  MOVLB  4
09DFC:  BRA    A248
09DFE:  MOVLB  0
.................... 		 			}
.................... 			 	case 19:{
.................... 			 		aux_l1 = pot_reativa_r;
09E00:  MOVLB  3
09E02:  CLRF   x73
09E04:  CLRF   x72
09E06:  MOVFF  25D,371
09E0A:  MOVFF  25C,370
.................... 			 		aux_l1 += pot_reativa_s;
09E0E:  MOVLB  2
09E10:  MOVF   xE0,W
09E12:  MOVLB  3
09E14:  ADDWF  x70,F
09E16:  MOVLB  2
09E18:  MOVF   xE1,W
09E1A:  MOVLB  3
09E1C:  ADDWFC x71,F
09E1E:  MOVLW  00
09E20:  ADDWFC x72,F
09E22:  ADDWFC x73,F
.................... 			 		aux_l1 += pot_reativa_t;
09E24:  MOVF   x37,W
09E26:  ADDWF  x70,F
09E28:  MOVF   x38,W
09E2A:  ADDWFC x71,F
09E2C:  MOVLW  00
09E2E:  ADDWFC x72,F
09E30:  ADDWFC x73,F
.................... 			 		data1_int = (word)((aux_l1 / 32) >> 16);
09E32:  RRCF   x73,W
09E34:  MOVLB  A
09E36:  MOVWF  x50
09E38:  MOVLB  3
09E3A:  RRCF   x72,W
09E3C:  MOVLB  A
09E3E:  MOVWF  x4F
09E40:  MOVLB  3
09E42:  RRCF   x71,W
09E44:  MOVLB  A
09E46:  MOVWF  x4E
09E48:  MOVLB  3
09E4A:  RRCF   x70,W
09E4C:  MOVLB  A
09E4E:  MOVWF  x4D
09E50:  RRCF   x50,F
09E52:  RRCF   x4F,F
09E54:  RRCF   x4E,F
09E56:  RRCF   x4D,F
09E58:  RRCF   x50,F
09E5A:  RRCF   x4F,F
09E5C:  RRCF   x4E,F
09E5E:  RRCF   x4D,F
09E60:  RRCF   x50,F
09E62:  RRCF   x4F,F
09E64:  RRCF   x4E,F
09E66:  RRCF   x4D,F
09E68:  RRCF   x50,F
09E6A:  RRCF   x4F,F
09E6C:  RRCF   x4E,F
09E6E:  RRCF   x4D,F
09E70:  MOVLW  07
09E72:  ANDWF  x50,F
09E74:  MOVFF  A4F,3EF
09E78:  MOVFF  A50,3F0
09E7C:  CLRF   03
.................... 			 		break;
09E7E:  MOVLB  4
09E80:  BRA    A248
09E82:  MOVLB  0
.................... 			 		}
.................... 		 		case 20:{
.................... 			 		aux_l1 = pot_reativa_r;
09E84:  MOVLB  3
09E86:  CLRF   x73
09E88:  CLRF   x72
09E8A:  MOVFF  25D,371
09E8E:  MOVFF  25C,370
.................... 			 		aux_l1 += pot_reativa_s;
09E92:  MOVLB  2
09E94:  MOVF   xE0,W
09E96:  MOVLB  3
09E98:  ADDWF  x70,F
09E9A:  MOVLB  2
09E9C:  MOVF   xE1,W
09E9E:  MOVLB  3
09EA0:  ADDWFC x71,F
09EA2:  MOVLW  00
09EA4:  ADDWFC x72,F
09EA6:  ADDWFC x73,F
.................... 			 		aux_l1 += pot_reativa_t;
09EA8:  MOVF   x37,W
09EAA:  ADDWF  x70,F
09EAC:  MOVF   x38,W
09EAE:  ADDWFC x71,F
09EB0:  MOVLW  00
09EB2:  ADDWFC x72,F
09EB4:  ADDWFC x73,F
.................... 			 		data1_int = (word)(aux_l1 / 32);
09EB6:  RRCF   x73,W
09EB8:  MOVWF  03
09EBA:  RRCF   x72,W
09EBC:  MOVWF  02
09EBE:  RRCF   x71,W
09EC0:  MOVWF  01
09EC2:  RRCF   x70,W
09EC4:  MOVWF  00
09EC6:  RRCF   03,F
09EC8:  RRCF   02,F
09ECA:  RRCF   01,F
09ECC:  RRCF   00,F
09ECE:  RRCF   03,F
09ED0:  RRCF   02,F
09ED2:  RRCF   01,F
09ED4:  RRCF   00,F
09ED6:  RRCF   03,F
09ED8:  RRCF   02,F
09EDA:  RRCF   01,F
09EDC:  RRCF   00,F
09EDE:  RRCF   03,F
09EE0:  RRCF   02,F
09EE2:  RRCF   01,F
09EE4:  RRCF   00,F
09EE6:  MOVLW  07
09EE8:  ANDWF  03,F
09EEA:  MOVFF  01,3F0
09EEE:  MOVFF  00,3EF
.................... 					break;
09EF2:  MOVLB  4
09EF4:  BRA    A248
09EF6:  MOVLB  0
.................... 		 			}
.................... 		 	#endif
.................... 	 	#endif
.................... 	 	case 21:
.................... 			{
.................... 			#if (monofasico == true)
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 				 		 data1_int = pot_aparente_tot;
.................... 		 				}
.................... 		 			else
.................... 		 				{
.................... 				 		 data1_int = pot_aparente_r;
.................... 			 			}
.................... 			 	#else
.................... 			 		 data1_int = pot_aparente_r;
.................... 			 	#endif
.................... 		 	#else
.................... 		 		 data1_int =  pot_aparente_r;
09EF8:  MOVFF  25B,3F0
09EFC:  MOVFF  25A,3EF
.................... 		 	#endif
.................... 	 		 break;
09F00:  MOVLB  4
09F02:  BRA    A248
09F04:  MOVLB  0
.................... 	 		}
.................... 		#if (monofasico == false)
.................... 			#if (padrao_referencia == true)
.................... 			 	case 22:
.................... 			 	case 23:
.................... 			 	case 24:
.................... 			 	case 25:{
.................... 					data1_int = pot_aparente_r;
.................... 			 		break;
.................... 		 			}
.................... 			#else
.................... 			 	case 22:
.................... 		 			{
.................... 			 		 data1_int =  pot_aparente_s;
09F06:  MOVFF  2DF,3F0
09F0A:  MOVFF  2DE,3EF
.................... 			 		 break;
09F0E:  MOVLB  4
09F10:  BRA    A248
09F12:  MOVLB  0
.................... 		 			}
.................... 		 		case 23:
.................... 			 		{
.................... 			 		 data1_int =  pot_aparente_t;
09F14:  MOVFF  336,3F0
09F18:  MOVFF  335,3EF
.................... 					 break;
09F1C:  MOVLB  4
09F1E:  BRA    A248
09F20:  MOVLB  0
.................... 		 			}
.................... 			 	case 24:
.................... 			 		{
.................... 			 		aux_l1 = pot_aparente_r;
09F22:  MOVLB  3
09F24:  CLRF   x73
09F26:  CLRF   x72
09F28:  MOVFF  25B,371
09F2C:  MOVFF  25A,370
.................... 			 		aux_l1 += pot_aparente_s;
09F30:  MOVLB  2
09F32:  MOVF   xDE,W
09F34:  MOVLB  3
09F36:  ADDWF  x70,F
09F38:  MOVLB  2
09F3A:  MOVF   xDF,W
09F3C:  MOVLB  3
09F3E:  ADDWFC x71,F
09F40:  MOVLW  00
09F42:  ADDWFC x72,F
09F44:  ADDWFC x73,F
.................... 			 		aux_l1 += pot_aparente_t;
09F46:  MOVF   x35,W
09F48:  ADDWF  x70,F
09F4A:  MOVF   x36,W
09F4C:  ADDWFC x71,F
09F4E:  MOVLW  00
09F50:  ADDWFC x72,F
09F52:  ADDWFC x73,F
.................... 			 		 data1_int = (word)((aux_l1 / 32) >> 16);
09F54:  RRCF   x73,W
09F56:  MOVLB  A
09F58:  MOVWF  x50
09F5A:  MOVLB  3
09F5C:  RRCF   x72,W
09F5E:  MOVLB  A
09F60:  MOVWF  x4F
09F62:  MOVLB  3
09F64:  RRCF   x71,W
09F66:  MOVLB  A
09F68:  MOVWF  x4E
09F6A:  MOVLB  3
09F6C:  RRCF   x70,W
09F6E:  MOVLB  A
09F70:  MOVWF  x4D
09F72:  RRCF   x50,F
09F74:  RRCF   x4F,F
09F76:  RRCF   x4E,F
09F78:  RRCF   x4D,F
09F7A:  RRCF   x50,F
09F7C:  RRCF   x4F,F
09F7E:  RRCF   x4E,F
09F80:  RRCF   x4D,F
09F82:  RRCF   x50,F
09F84:  RRCF   x4F,F
09F86:  RRCF   x4E,F
09F88:  RRCF   x4D,F
09F8A:  RRCF   x50,F
09F8C:  RRCF   x4F,F
09F8E:  RRCF   x4E,F
09F90:  RRCF   x4D,F
09F92:  MOVLW  07
09F94:  ANDWF  x50,F
09F96:  MOVFF  A4F,3EF
09F9A:  MOVFF  A50,3F0
09F9E:  CLRF   03
.................... 			 		 break;
09FA0:  MOVLB  4
09FA2:  BRA    A248
09FA4:  MOVLB  0
.................... 		 			}
.................... 		 		case 25:
.................... 			 		{
.................... 			 		aux_l1 = pot_aparente_r;
09FA6:  MOVLB  3
09FA8:  CLRF   x73
09FAA:  CLRF   x72
09FAC:  MOVFF  25B,371
09FB0:  MOVFF  25A,370
.................... 			 		aux_l1 += pot_aparente_s;
09FB4:  MOVLB  2
09FB6:  MOVF   xDE,W
09FB8:  MOVLB  3
09FBA:  ADDWF  x70,F
09FBC:  MOVLB  2
09FBE:  MOVF   xDF,W
09FC0:  MOVLB  3
09FC2:  ADDWFC x71,F
09FC4:  MOVLW  00
09FC6:  ADDWFC x72,F
09FC8:  ADDWFC x73,F
.................... 			 		aux_l1 += pot_aparente_t;
09FCA:  MOVF   x35,W
09FCC:  ADDWF  x70,F
09FCE:  MOVF   x36,W
09FD0:  ADDWFC x71,F
09FD2:  MOVLW  00
09FD4:  ADDWFC x72,F
09FD6:  ADDWFC x73,F
.................... 					data1_int = (word)(aux_l1 / 32);
09FD8:  RRCF   x73,W
09FDA:  MOVWF  03
09FDC:  RRCF   x72,W
09FDE:  MOVWF  02
09FE0:  RRCF   x71,W
09FE2:  MOVWF  01
09FE4:  RRCF   x70,W
09FE6:  MOVWF  00
09FE8:  RRCF   03,F
09FEA:  RRCF   02,F
09FEC:  RRCF   01,F
09FEE:  RRCF   00,F
09FF0:  RRCF   03,F
09FF2:  RRCF   02,F
09FF4:  RRCF   01,F
09FF6:  RRCF   00,F
09FF8:  RRCF   03,F
09FFA:  RRCF   02,F
09FFC:  RRCF   01,F
09FFE:  RRCF   00,F
0A000:  RRCF   03,F
0A002:  RRCF   02,F
0A004:  RRCF   01,F
0A006:  RRCF   00,F
0A008:  MOVLW  07
0A00A:  ANDWF  03,F
0A00C:  MOVFF  01,3F0
0A010:  MOVFF  00,3EF
.................... 					break;
0A014:  MOVLB  4
0A016:  BRA    A248
0A018:  MOVLB  0
.................... 		 			}
.................... 		 		#endif
.................... 	 	#endif
.................... 	 	case 26:
.................... 	 		{
.................... 	 		 data1_int = frequencia;
0A01A:  MOVLB  3
0A01C:  CLRF   xF0
0A01E:  MOVFF  24E,3EF
.................... 	 		 break;
0A022:  MOVLB  4
0A024:  BRA    A248
0A026:  MOVLB  0
.................... 	 		}
.................... 		#if (com_consumo == true) 
.................... 		 	case 27:
.................... 	 			{
.................... 				#if (st5x == true)
.................... 		 			 data1_int = (int16)(consumo_ati >> 16);
.................... 				#elif (st92 == true)
.................... 		 			 data1_int = (int16)(consumo_ati >> 16);
.................... 				#elif (st94 == true)
.................... 		 			 data1_int = (int16)(consumo_ati >> 16);
.................... 				#else
.................... 		 			 data1_int = (int16)(consumo_ati >> 16);
0A028:  MOVFF  42E,3EF
0A02C:  MOVFF  42F,3F0
0A030:  CLRF   03
.................... 				#endif
.................... 		 		break;
0A032:  MOVLB  4
0A034:  BRA    A248
0A036:  MOVLB  0
.................... 	 			}
.................... 		 	case 28:
.................... 	 			{
.................... 				#if (st5x == true)
.................... 		 		 	data1_int =  consumo_ati;
.................... 				#elif (st92 == true)
.................... 		 		 	data1_int =  consumo_ati;
.................... 				#elif (st94 == true)
.................... 		 		 	data1_int =  consumo_ati;
.................... 				#else
.................... 		 		 	data1_int = consumo_ati;
0A038:  MOVFF  42D,3F0
0A03C:  MOVFF  42C,3EF
.................... 				#endif
.................... 		 		break;
0A040:  MOVLB  4
0A042:  BRA    A248
0A044:  MOVLB  0
.................... 	 			}
.................... 		 	case 29:
.................... 	 			{
.................... 	 			 data1_int =  dem_ativa;
0A046:  MOVFF  277,3F0
0A04A:  MOVFF  276,3EF
.................... 	 		 	break;
0A04E:  MOVLB  4
0A050:  BRA    A248
0A052:  MOVLB  0
.................... 		 		}
.................... 	 		case 30:
.................... 	 			{
.................... 	 			 data1_int = (int16)(consumo_reati >> 16);
0A054:  MOVFF  42A,3EF
0A058:  MOVFF  42B,3F0
0A05C:  CLRF   03
.................... 				break;
0A05E:  MOVLB  4
0A060:  BRA    A248
0A062:  MOVLB  0
.................... 	 			}
.................... 		 	case 31:
.................... 	 			{
.................... 	 			 data1_int = consumo_reati;
0A064:  MOVFF  429,3F0
0A068:  MOVFF  428,3EF
.................... 		 		break;
0A06C:  MOVLB  4
0A06E:  BRA    A248
0A070:  MOVLB  0
.................... 	 			}
.................... 		 	case 32:
.................... 	 			{
.................... 	 			 data1_int =  dem_reativa;
0A072:  MOVFF  279,3F0
0A076:  MOVFF  278,3EF
.................... 	 		 	break;
0A07A:  MOVLB  4
0A07C:  BRA    A248
0A07E:  MOVLB  0
.................... 		 		}
.................... 	 		case 33:
.................... 	 			{
.................... 	 		 	data1_int =  dem_media_ativa;
0A080:  MOVFF  265,3F0
0A084:  MOVFF  264,3EF
.................... 		 		break;
0A088:  MOVLB  4
0A08A:  BRA    A248
0A08C:  MOVLB  0
.................... 	 			}
.................... 	 		case 34:
.................... 		 		{
.................... 	 			 data1_int =  dem_maxima_ativa;
0A08E:  MOVFF  26B,3F0
0A092:  MOVFF  26A,3EF
.................... 	 			break;
0A096:  MOVLB  4
0A098:  BRA    A248
0A09A:  MOVLB  0
.................... 	 			}
.................... 		 	case 35:
.................... 	 			{
.................... 	 			 data1_int =  dem_media_aparente;
0A09C:  MOVFF  267,3F0
0A0A0:  MOVFF  266,3EF
.................... 		 		break;
0A0A4:  MOVLB  4
0A0A6:  BRA    A248
0A0A8:  MOVLB  0
.................... 	 			}
.................... 		 	case 36:
.................... 	 			{
.................... 	 			 data1_int =  dem_maxima_aparente;
0A0AA:  MOVFF  26D,3F0
0A0AE:  MOVFF  26C,3EF
.................... 		 		break;
0A0B2:  MOVLB  4
0A0B4:  BRA    A248
0A0B6:  MOVLB  0
.................... 	 			}
.................... 	 	#elif (st8500c == true)
.................... 		 	case 27:
.................... 	 			{
.................... 	 			data1_int = (int16)(consumo_ati >> 16);
.................... 		 		break;
.................... 	 			}
.................... 		 	case 28:
.................... 	 			{
.................... 	 		 	data1_int = consumo_ati;
.................... 		 		break;
.................... 	 			}
.................... 		 	case 29:
.................... 	 			{
.................... 	 			data1_int =  dem_ativa;
.................... 	 		 	break;
.................... 		 		}
.................... 	 		case 30:
.................... 	 			{
.................... 				data1_int = (int16)(consumo_reati >> 16);
.................... 				break;
.................... 	 			}
.................... 		 	case 31:
.................... 	 			{
.................... 	 			data1_int = consumo_reati;
.................... 		 		break;
.................... 	 			}
.................... 		 	case 32:
.................... 	 			{
.................... 	 			data1_int =  dem_reativa;
.................... 	 		 	break;
.................... 		 		}
.................... 	 		case 33:
.................... 	 			{
.................... 	 		 	data1_int =  dem_media_ativa;
.................... 		 		break;
.................... 	 			}
.................... 	 		case 34:
.................... 		 		{
.................... 	 			data1_int =  dem_maxima_ativa;
.................... 	 			break;
.................... 	 			}
.................... 		 	case 35:
.................... 	 			{
.................... 	 			data1_int =  dem_media_aparente;
.................... 		 		break;
.................... 	 			}
.................... 		 	case 36:
.................... 	 			{
.................... 	 			data1_int =  dem_maxima_aparente;
.................... 		 		break;
.................... 	 			}
.................... 	 	#endif
....................  		case 37:
....................  			{
.................... 			#if (monofasico == true)
.................... 				data1_int = pot_req_r;
.................... 			#else
.................... 				aux_l1 = pot_req_r;
0A0B8:  MOVLB  3
0A0BA:  CLRF   x73
0A0BC:  CLRF   x72
0A0BE:  MOVFF  289,371
0A0C2:  MOVFF  288,370
.................... 				aux_l1 += pot_req_s;
0A0C6:  MOVLB  2
0A0C8:  MOVF   xEA,W
0A0CA:  MOVLB  3
0A0CC:  ADDWF  x70,F
0A0CE:  MOVLB  2
0A0D0:  MOVF   xEB,W
0A0D2:  MOVLB  3
0A0D4:  ADDWFC x71,F
0A0D6:  MOVLW  00
0A0D8:  ADDWFC x72,F
0A0DA:  ADDWFC x73,F
.................... 				aux_l1 += pot_req_t;
0A0DC:  MOVF   x41,W
0A0DE:  ADDWF  x70,F
0A0E0:  MOVF   x42,W
0A0E2:  ADDWFC x71,F
0A0E4:  MOVLW  00
0A0E6:  ADDWFC x72,F
0A0E8:  ADDWFC x73,F
.................... 		 		data1_int =  aux_l1 / 32 ;
0A0EA:  RRCF   x73,W
0A0EC:  MOVWF  03
0A0EE:  RRCF   x72,W
0A0F0:  MOVWF  02
0A0F2:  RRCF   x71,W
0A0F4:  MOVWF  01
0A0F6:  RRCF   x70,W
0A0F8:  MOVWF  00
0A0FA:  RRCF   03,F
0A0FC:  RRCF   02,F
0A0FE:  RRCF   01,F
0A100:  RRCF   00,F
0A102:  RRCF   03,F
0A104:  RRCF   02,F
0A106:  RRCF   01,F
0A108:  RRCF   00,F
0A10A:  RRCF   03,F
0A10C:  RRCF   02,F
0A10E:  RRCF   01,F
0A110:  RRCF   00,F
0A112:  RRCF   03,F
0A114:  RRCF   02,F
0A116:  RRCF   01,F
0A118:  RRCF   00,F
0A11A:  MOVFF  00,3EF
0A11E:  MOVFF  01,3F0
.................... 			#endif
.................... 	 		break;
0A122:  MOVLB  4
0A124:  BRA    A248
0A126:  MOVLB  0
.................... 	 		}
.................... 	 	case 38:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = pot_exec_r;
.................... 			#else
.................... 				aux_l1 = pot_exec_r;
0A128:  MOVLB  3
0A12A:  CLRF   x73
0A12C:  CLRF   x72
0A12E:  MOVFF  287,371
0A132:  MOVFF  286,370
.................... 				aux_l1 += pot_exec_s;
0A136:  MOVLB  2
0A138:  MOVF   xE8,W
0A13A:  MOVLB  3
0A13C:  ADDWF  x70,F
0A13E:  MOVLB  2
0A140:  MOVF   xE9,W
0A142:  MOVLB  3
0A144:  ADDWFC x71,F
0A146:  MOVLW  00
0A148:  ADDWFC x72,F
0A14A:  ADDWFC x73,F
.................... 				aux_l1 += pot_exec_t;
0A14C:  MOVF   x3F,W
0A14E:  ADDWF  x70,F
0A150:  MOVF   x40,W
0A152:  ADDWFC x71,F
0A154:  MOVLW  00
0A156:  ADDWFC x72,F
0A158:  ADDWFC x73,F
.................... 		 		data1_int =  aux_l1 / 32;
0A15A:  RRCF   x73,W
0A15C:  MOVWF  03
0A15E:  RRCF   x72,W
0A160:  MOVWF  02
0A162:  RRCF   x71,W
0A164:  MOVWF  01
0A166:  RRCF   x70,W
0A168:  MOVWF  00
0A16A:  RRCF   03,F
0A16C:  RRCF   02,F
0A16E:  RRCF   01,F
0A170:  RRCF   00,F
0A172:  RRCF   03,F
0A174:  RRCF   02,F
0A176:  RRCF   01,F
0A178:  RRCF   00,F
0A17A:  RRCF   03,F
0A17C:  RRCF   02,F
0A17E:  RRCF   01,F
0A180:  RRCF   00,F
0A182:  RRCF   03,F
0A184:  RRCF   02,F
0A186:  RRCF   01,F
0A188:  RRCF   00,F
0A18A:  MOVFF  00,3EF
0A18E:  MOVFF  01,3F0
.................... 			#endif
.................... 	 		break;
0A192:  MOVLB  4
0A194:  BRA    A248
0A196:  MOVLB  0
.................... 	 		}
.................... 		#if (com_consumo == true)
.................... 		 	case 39:
.................... 	 			{
.................... 	 			data1_int =  dem_maxima_ativa_ant;
0A198:  MOVFF  26F,3F0
0A19C:  MOVFF  26E,3EF
.................... 	 		 	break;
0A1A0:  MOVLB  4
0A1A2:  BRA    A248
0A1A4:  MOVLB  0
.................... 		 		}
.................... 		 	case 40:
.................... 	 			{
.................... 	 			data1_int =  dem_maxima_aparente_ant;
0A1A6:  MOVFF  271,3F0
0A1AA:  MOVFF  270,3EF
.................... 	 		 	break;
0A1AE:  MOVLB  4
0A1B0:  BRA    A248
0A1B2:  MOVLB  0
.................... 		 		}
.................... 		#endif
.................... 	 	case 41:
.................... 	 		{
.................... 	 		data1_int = tensao_rs;
0A1B4:  MOVFF  273,3F0
0A1B8:  MOVFF  272,3EF
.................... 	 		break;
0A1BC:  MOVLB  4
0A1BE:  BRA    A248
0A1C0:  MOVLB  0
.................... 	 		}
.................... 		#if (monofasico == false)
.................... 		 	case 42:
.................... 	 			{
.................... 		 		data1_int = tensao_st;
0A1C2:  MOVFF  2E5,3F0
0A1C6:  MOVFF  2E4,3EF
.................... 		 		break;
0A1CA:  MOVLB  4
0A1CC:  BRA    A248
0A1CE:  MOVLB  0
.................... 	 			}
.................... 	 		case 43:
.................... 	 			{
.................... 		 		data1_int = tensao_rt;
0A1D0:  MOVFF  33C,3F0
0A1D4:  MOVFF  33B,3EF
.................... 		 		break;
0A1D8:  MOVLB  4
0A1DA:  BRA    A248
0A1DC:  MOVLB  0
.................... 	 			}
.................... 	 	#endif
.................... 	 	case 44:
.................... 	 		{
.................... 	 		data1_int = tensao_rs_na_alta;
0A1DE:  MOVFF  275,3F0
0A1E2:  MOVFF  274,3EF
.................... 	 		break;
0A1E6:  MOVLB  4
0A1E8:  BRA    A248
0A1EA:  MOVLB  0
.................... 	 		}
.................... 		#if (monofasico == false)
.................... 		 	case 45:
.................... 	 			{
.................... 		 		data1_int = tensao_st_na_alta;
0A1EC:  MOVFF  2E7,3F0
0A1F0:  MOVFF  2E6,3EF
.................... 		 		break;
0A1F4:  MOVLB  4
0A1F6:  BRA    A248
0A1F8:  MOVLB  0
.................... 	 			}
.................... 		 	case 46:
.................... 	 			{
.................... 		 		data1_int = tensao_rt_na_alta;
0A1FA:  MOVFF  33E,3F0
0A1FE:  MOVFF  33D,3EF
.................... 		 		break;
0A202:  MOVLB  4
0A204:  BRA    A248
0A206:  MOVLB  0
.................... 	 			}
.................... 	 		case 47:
.................... 	 			{
.................... 		 		data1_int = tensao_tri;
0A208:  MOVFF  28F,3F0
0A20C:  MOVFF  28E,3EF
.................... 		 		break;
0A210:  MOVLB  4
0A212:  BRA    A248
0A214:  MOVLB  0
.................... 	 			}
.................... 	 		case 48:
.................... 	 			{
.................... 		 		data1_int =  corrente_tri;
0A216:  MOVFF  291,3F0
0A21A:  MOVFF  290,3EF
.................... 		 		break;
0A21E:  MOVLB  4
0A220:  BRA    A248
0A222:  MOVLB  0
.................... 	 			}
.................... 	 	#endif
.................... 		case 49:
.................... 			{
.................... 			data1_int = status_equipamento_H;
0A224:  MOVFF  35C,3F0
0A228:  MOVFF  35B,3EF
.................... 			break;
0A22C:  MOVLB  4
0A22E:  BRA    A248
0A230:  MOVLB  0
.................... 			}
.................... 		case 50:
.................... 			{
.................... 			data1_int = status_equipamento_L;
0A232:  MOVFF  35E,3F0
0A236:  MOVFF  35D,3EF
.................... 			break;
0A23A:  MOVLB  4
0A23C:  BRA    A248
0A23E:  MOVLB  5
.................... 			}
.................... 		#if (ST92 == true)
.................... 		 	case 51:
.................... 		 		{
.................... 		 		 data1_int = cor_maxima_r;
.................... 		 		 break;
.................... 		 		}
.................... 		 	case 52:
.................... 		 		{
.................... 		 		 data1_int = cor_maxima_s;
.................... 		 		 break;
.................... 		 		}
.................... 		 	case 53:
.................... 		 		{
.................... 		 		 data1_int = cor_maxima_t;
.................... 		 		 break;
.................... 		 		}
.................... 		 	case 54:
.................... 		 		{
.................... 		 		 data1_int = pot_ativa_max_r;
.................... 		 		 break;
.................... 		 		}
.................... 		 	case 55:
.................... 		 		{
.................... 		 		 data1_int = pot_ativa_max_r;
.................... 		 		 break;
.................... 		 		}
.................... 		 	case 56:
.................... 		 		{
.................... 		 		 data1_int = pot_ativa_max_r;
.................... 		 		 break;
.................... 		 		}
.................... 		 #endif
.................... 	 		
.................... 	 		
.................... 
.................... 		#if (chip_cs5460a == true)
.................... 			case 70:
.................... 				{
.................... 		 		data1_int = nro_kw_r << 5;
.................... 				break;
.................... 				}
.................... 		#endif
.................... 	 		
.................... 	 	 default:
.................... 	 		{
.................... 	 		data1_int = 0;
0A240:  MOVLB  3
0A242:  CLRF   xF0
0A244:  CLRF   xEF
.................... 	 		break;
0A246:  MOVLB  4
.................... 	 		}
.................... 	 	}
0A248:  MOVLB  0
0A24A:  GOTO   A59C (RETURN)
.................... }	    
.................... 
.................... void wr_byte_regs_modbus(void)
.................... {   
.................... 	addr = 0;
*
0BFD8:  MOVLB  3
0BFDA:  CLRF   xEE
0BFDC:  CLRF   xED
.................... 	data1_int = data_modbus;
0BFDE:  MOVFF  520,3F0
0BFE2:  MOVFF  51F,3EF
.................... 	data1 = data_modbus;
0BFE6:  MOVFF  51F,3BE
.................... 	 switch(addr_regs_modbus)
0BFEA:  MOVLB  5
0BFEC:  MOVF   x29,W
0BFEE:  MOVWF  00
0BFF0:  MOVF   x2A,W
0BFF2:  MOVWF  03
0BFF4:  MOVF   03,W
0BFF6:  BNZ   C006
0BFF8:  MOVLW  01
0BFFA:  SUBWF  00,W
0BFFC:  MOVLB  0
0BFFE:  BTFSC  FD8.2
0C000:  GOTO   D0D2
0C004:  MOVLB  5
0C006:  MOVF   03,W
0C008:  BNZ   C018
0C00A:  MOVLW  02
0C00C:  SUBWF  00,W
0C00E:  MOVLB  0
0C010:  BTFSC  FD8.2
0C012:  GOTO   D0E8
0C016:  MOVLB  5
0C018:  MOVF   03,W
0C01A:  BNZ   C02A
0C01C:  MOVLW  03
0C01E:  SUBWF  00,W
0C020:  MOVLB  0
0C022:  BTFSC  FD8.2
0C024:  GOTO   D106
0C028:  MOVLB  5
0C02A:  MOVF   03,W
0C02C:  BNZ   C03C
0C02E:  MOVLW  04
0C030:  SUBWF  00,W
0C032:  MOVLB  0
0C034:  BTFSC  FD8.2
0C036:  GOTO   D11C
0C03A:  MOVLB  5
0C03C:  MOVF   03,W
0C03E:  BNZ   C04E
0C040:  MOVLW  05
0C042:  SUBWF  00,W
0C044:  MOVLB  0
0C046:  BTFSC  FD8.2
0C048:  GOTO   D132
0C04C:  MOVLB  5
0C04E:  MOVF   03,W
0C050:  BNZ   C060
0C052:  MOVLW  06
0C054:  SUBWF  00,W
0C056:  MOVLB  0
0C058:  BTFSC  FD8.2
0C05A:  GOTO   D148
0C05E:  MOVLB  5
0C060:  MOVF   03,W
0C062:  BNZ   C072
0C064:  MOVLW  07
0C066:  SUBWF  00,W
0C068:  MOVLB  0
0C06A:  BTFSC  FD8.2
0C06C:  GOTO   D15E
0C070:  MOVLB  5
0C072:  MOVF   03,W
0C074:  BNZ   C084
0C076:  MOVLW  08
0C078:  SUBWF  00,W
0C07A:  MOVLB  0
0C07C:  BTFSC  FD8.2
0C07E:  GOTO   D174
0C082:  MOVLB  5
0C084:  MOVF   03,W
0C086:  BNZ   C096
0C088:  MOVLW  09
0C08A:  SUBWF  00,W
0C08C:  MOVLB  0
0C08E:  BTFSC  FD8.2
0C090:  GOTO   D18A
0C094:  MOVLB  5
0C096:  MOVF   03,W
0C098:  BNZ   C0A8
0C09A:  MOVLW  0A
0C09C:  SUBWF  00,W
0C09E:  MOVLB  0
0C0A0:  BTFSC  FD8.2
0C0A2:  GOTO   D1A0
0C0A6:  MOVLB  5
0C0A8:  MOVF   03,W
0C0AA:  BNZ   C0BA
0C0AC:  MOVLW  0B
0C0AE:  SUBWF  00,W
0C0B0:  MOVLB  0
0C0B2:  BTFSC  FD8.2
0C0B4:  GOTO   D1B6
0C0B8:  MOVLB  5
0C0BA:  MOVF   03,W
0C0BC:  BNZ   C0CC
0C0BE:  MOVLW  0C
0C0C0:  SUBWF  00,W
0C0C2:  MOVLB  0
0C0C4:  BTFSC  FD8.2
0C0C6:  GOTO   D1CC
0C0CA:  MOVLB  5
0C0CC:  MOVF   03,W
0C0CE:  BNZ   C0DE
0C0D0:  MOVLW  0D
0C0D2:  SUBWF  00,W
0C0D4:  MOVLB  0
0C0D6:  BTFSC  FD8.2
0C0D8:  GOTO   D1E2
0C0DC:  MOVLB  5
0C0DE:  MOVF   03,W
0C0E0:  BNZ   C0F0
0C0E2:  MOVLW  0E
0C0E4:  SUBWF  00,W
0C0E6:  MOVLB  0
0C0E8:  BTFSC  FD8.2
0C0EA:  GOTO   D1F4
0C0EE:  MOVLB  5
0C0F0:  MOVF   03,W
0C0F2:  BNZ   C102
0C0F4:  MOVLW  0F
0C0F6:  SUBWF  00,W
0C0F8:  MOVLB  0
0C0FA:  BTFSC  FD8.2
0C0FC:  GOTO   D206
0C100:  MOVLB  5
0C102:  MOVF   03,W
0C104:  BNZ   C114
0C106:  MOVLW  10
0C108:  SUBWF  00,W
0C10A:  MOVLB  0
0C10C:  BTFSC  FD8.2
0C10E:  GOTO   D218
0C112:  MOVLB  5
0C114:  MOVF   03,W
0C116:  BNZ   C126
0C118:  MOVLW  11
0C11A:  SUBWF  00,W
0C11C:  MOVLB  0
0C11E:  BTFSC  FD8.2
0C120:  GOTO   D22E
0C124:  MOVLB  5
0C126:  MOVF   03,W
0C128:  BNZ   C138
0C12A:  MOVLW  12
0C12C:  SUBWF  00,W
0C12E:  MOVLB  0
0C130:  BTFSC  FD8.2
0C132:  GOTO   D242
0C136:  MOVLB  5
0C138:  MOVF   03,W
0C13A:  BNZ   C14A
0C13C:  MOVLW  13
0C13E:  SUBWF  00,W
0C140:  MOVLB  0
0C142:  BTFSC  FD8.2
0C144:  GOTO   D256
0C148:  MOVLB  5
0C14A:  MOVF   03,W
0C14C:  BNZ   C15C
0C14E:  MOVLW  14
0C150:  SUBWF  00,W
0C152:  MOVLB  0
0C154:  BTFSC  FD8.2
0C156:  GOTO   D26A
0C15A:  MOVLB  5
0C15C:  MOVF   03,W
0C15E:  BNZ   C16E
0C160:  MOVLW  15
0C162:  SUBWF  00,W
0C164:  MOVLB  0
0C166:  BTFSC  FD8.2
0C168:  GOTO   D27A
0C16C:  MOVLB  5
0C16E:  MOVF   03,W
0C170:  BNZ   C180
0C172:  MOVLW  16
0C174:  SUBWF  00,W
0C176:  MOVLB  0
0C178:  BTFSC  FD8.2
0C17A:  GOTO   D28A
0C17E:  MOVLB  5
0C180:  MOVF   03,W
0C182:  BNZ   C192
0C184:  MOVLW  17
0C186:  SUBWF  00,W
0C188:  MOVLB  0
0C18A:  BTFSC  FD8.2
0C18C:  GOTO   D298
0C190:  MOVLB  5
0C192:  MOVF   03,W
0C194:  BNZ   C1A4
0C196:  MOVLW  18
0C198:  SUBWF  00,W
0C19A:  MOVLB  0
0C19C:  BTFSC  FD8.2
0C19E:  GOTO   D2A6
0C1A2:  MOVLB  5
0C1A4:  MOVF   03,W
0C1A6:  BNZ   C1B6
0C1A8:  MOVLW  19
0C1AA:  SUBWF  00,W
0C1AC:  MOVLB  0
0C1AE:  BTFSC  FD8.2
0C1B0:  GOTO   D2B4
0C1B4:  MOVLB  5
0C1B6:  MOVF   03,W
0C1B8:  BNZ   C1C8
0C1BA:  MOVLW  1A
0C1BC:  SUBWF  00,W
0C1BE:  MOVLB  0
0C1C0:  BTFSC  FD8.2
0C1C2:  GOTO   D2C2
0C1C6:  MOVLB  5
0C1C8:  MOVF   03,W
0C1CA:  BNZ   C1DA
0C1CC:  MOVLW  1B
0C1CE:  SUBWF  00,W
0C1D0:  MOVLB  0
0C1D2:  BTFSC  FD8.2
0C1D4:  GOTO   D2D0
0C1D8:  MOVLB  5
0C1DA:  MOVF   03,W
0C1DC:  BNZ   C1EC
0C1DE:  MOVLW  1C
0C1E0:  SUBWF  00,W
0C1E2:  MOVLB  0
0C1E4:  BTFSC  FD8.2
0C1E6:  GOTO   D2DE
0C1EA:  MOVLB  5
0C1EC:  MOVF   03,W
0C1EE:  BNZ   C1FE
0C1F0:  MOVLW  25
0C1F2:  SUBWF  00,W
0C1F4:  MOVLB  0
0C1F6:  BTFSC  FD8.2
0C1F8:  GOTO   D2F0
0C1FC:  MOVLB  5
0C1FE:  MOVF   03,W
0C200:  BNZ   C210
0C202:  MOVLW  26
0C204:  SUBWF  00,W
0C206:  MOVLB  0
0C208:  BTFSC  FD8.2
0C20A:  GOTO   D302
0C20E:  MOVLB  5
0C210:  MOVF   03,W
0C212:  BNZ   C222
0C214:  MOVLW  27
0C216:  SUBWF  00,W
0C218:  MOVLB  0
0C21A:  BTFSC  FD8.2
0C21C:  GOTO   D314
0C220:  MOVLB  5
0C222:  MOVF   03,W
0C224:  BNZ   C234
0C226:  MOVLW  28
0C228:  SUBWF  00,W
0C22A:  MOVLB  0
0C22C:  BTFSC  FD8.2
0C22E:  GOTO   D326
0C232:  MOVLB  5
0C234:  MOVF   03,W
0C236:  BNZ   C246
0C238:  MOVLW  29
0C23A:  SUBWF  00,W
0C23C:  MOVLB  0
0C23E:  BTFSC  FD8.2
0C240:  GOTO   D338
0C244:  MOVLB  5
0C246:  MOVF   03,W
0C248:  BNZ   C258
0C24A:  MOVLW  2A
0C24C:  SUBWF  00,W
0C24E:  MOVLB  0
0C250:  BTFSC  FD8.2
0C252:  GOTO   D34A
0C256:  MOVLB  5
0C258:  MOVF   03,W
0C25A:  BNZ   C26A
0C25C:  MOVLW  2B
0C25E:  SUBWF  00,W
0C260:  MOVLB  0
0C262:  BTFSC  FD8.2
0C264:  GOTO   D350
0C268:  MOVLB  5
0C26A:  MOVF   03,W
0C26C:  BNZ   C27C
0C26E:  MOVLW  2C
0C270:  SUBWF  00,W
0C272:  MOVLB  0
0C274:  BTFSC  FD8.2
0C276:  GOTO   D356
0C27A:  MOVLB  5
0C27C:  MOVF   03,W
0C27E:  BNZ   C28E
0C280:  MOVLW  2D
0C282:  SUBWF  00,W
0C284:  MOVLB  0
0C286:  BTFSC  FD8.2
0C288:  GOTO   D35E
0C28C:  MOVLB  5
0C28E:  MOVF   03,W
0C290:  BNZ   C2A0
0C292:  MOVLW  2E
0C294:  SUBWF  00,W
0C296:  MOVLB  0
0C298:  BTFSC  FD8.2
0C29A:  GOTO   D37A
0C29E:  MOVLB  5
0C2A0:  MOVF   03,W
0C2A2:  BNZ   C2B2
0C2A4:  MOVLW  2F
0C2A6:  SUBWF  00,W
0C2A8:  MOVLB  0
0C2AA:  BTFSC  FD8.2
0C2AC:  GOTO   D382
0C2B0:  MOVLB  5
0C2B2:  MOVF   03,W
0C2B4:  BNZ   C2C4
0C2B6:  MOVLW  30
0C2B8:  SUBWF  00,W
0C2BA:  MOVLB  0
0C2BC:  BTFSC  FD8.2
0C2BE:  GOTO   D394
0C2C2:  MOVLB  5
0C2C4:  MOVF   03,W
0C2C6:  BNZ   C2D6
0C2C8:  MOVLW  31
0C2CA:  SUBWF  00,W
0C2CC:  MOVLB  0
0C2CE:  BTFSC  FD8.2
0C2D0:  GOTO   D3A6
0C2D4:  MOVLB  5
0C2D6:  MOVF   03,W
0C2D8:  BNZ   C2E8
0C2DA:  MOVLW  62
0C2DC:  SUBWF  00,W
0C2DE:  MOVLB  0
0C2E0:  BTFSC  FD8.2
0C2E2:  GOTO   D3B8
0C2E6:  MOVLB  5
0C2E8:  MOVF   03,W
0C2EA:  BNZ   C2FA
0C2EC:  MOVLW  63
0C2EE:  SUBWF  00,W
0C2F0:  MOVLB  0
0C2F2:  BTFSC  FD8.2
0C2F4:  GOTO   D3DE
0C2F8:  MOVLB  5
0C2FA:  MOVLW  07
0C2FC:  SUBWF  03,W
0C2FE:  BNZ   C30E
0C300:  MOVLW  D0
0C302:  SUBWF  00,W
0C304:  MOVLB  0
0C306:  BTFSC  FD8.2
0C308:  GOTO   D3F4
0C30C:  MOVLB  5
0C30E:  MOVLW  07
0C310:  SUBWF  03,W
0C312:  BNZ   C322
0C314:  MOVLW  D1
0C316:  SUBWF  00,W
0C318:  MOVLB  0
0C31A:  BTFSC  FD8.2
0C31C:  GOTO   D406
0C320:  MOVLB  5
0C322:  MOVLW  07
0C324:  SUBWF  03,W
0C326:  BNZ   C336
0C328:  MOVLW  D2
0C32A:  SUBWF  00,W
0C32C:  MOVLB  0
0C32E:  BTFSC  FD8.2
0C330:  GOTO   D418
0C334:  MOVLB  5
0C336:  MOVLW  07
0C338:  SUBWF  03,W
0C33A:  BNZ   C34A
0C33C:  MOVLW  D3
0C33E:  SUBWF  00,W
0C340:  MOVLB  0
0C342:  BTFSC  FD8.2
0C344:  GOTO   D42A
0C348:  MOVLB  5
0C34A:  MOVLW  07
0C34C:  SUBWF  03,W
0C34E:  BNZ   C35E
0C350:  MOVLW  D6
0C352:  SUBWF  00,W
0C354:  MOVLB  0
0C356:  BTFSC  FD8.2
0C358:  GOTO   D43C
0C35C:  MOVLB  5
0C35E:  MOVLW  07
0C360:  SUBWF  03,W
0C362:  BNZ   C372
0C364:  MOVLW  D4
0C366:  SUBWF  00,W
0C368:  MOVLB  0
0C36A:  BTFSC  FD8.2
0C36C:  GOTO   D44E
0C370:  MOVLB  5
0C372:  MOVLW  07
0C374:  SUBWF  03,W
0C376:  BNZ   C386
0C378:  MOVLW  D5
0C37A:  SUBWF  00,W
0C37C:  MOVLB  0
0C37E:  BTFSC  FD8.2
0C380:  GOTO   D460
0C384:  MOVLB  5
0C386:  MOVLW  07
0C388:  SUBWF  03,W
0C38A:  BNZ   C39A
0C38C:  MOVLW  D7
0C38E:  SUBWF  00,W
0C390:  MOVLB  0
0C392:  BTFSC  FD8.2
0C394:  GOTO   D472
0C398:  MOVLB  5
0C39A:  MOVLW  07
0C39C:  SUBWF  03,W
0C39E:  BNZ   C3AE
0C3A0:  MOVLW  D8
0C3A2:  SUBWF  00,W
0C3A4:  MOVLB  0
0C3A6:  BTFSC  FD8.2
0C3A8:  GOTO   D484
0C3AC:  MOVLB  5
0C3AE:  MOVLW  07
0C3B0:  SUBWF  03,W
0C3B2:  BNZ   C3C2
0C3B4:  MOVLW  D9
0C3B6:  SUBWF  00,W
0C3B8:  MOVLB  0
0C3BA:  BTFSC  FD8.2
0C3BC:  GOTO   D496
0C3C0:  MOVLB  5
0C3C2:  MOVLW  07
0C3C4:  SUBWF  03,W
0C3C6:  BNZ   C3D6
0C3C8:  MOVLW  DA
0C3CA:  SUBWF  00,W
0C3CC:  MOVLB  0
0C3CE:  BTFSC  FD8.2
0C3D0:  GOTO   D4A8
0C3D4:  MOVLB  5
0C3D6:  MOVLW  07
0C3D8:  SUBWF  03,W
0C3DA:  BNZ   C3EA
0C3DC:  MOVLW  DB
0C3DE:  SUBWF  00,W
0C3E0:  MOVLB  0
0C3E2:  BTFSC  FD8.2
0C3E4:  GOTO   D4BA
0C3E8:  MOVLB  5
0C3EA:  MOVLW  08
0C3EC:  SUBWF  03,W
0C3EE:  BNZ   C3FE
0C3F0:  MOVLW  02
0C3F2:  SUBWF  00,W
0C3F4:  MOVLB  0
0C3F6:  BTFSC  FD8.2
0C3F8:  GOTO   D4CC
0C3FC:  MOVLB  5
0C3FE:  MOVLW  08
0C400:  SUBWF  03,W
0C402:  BNZ   C412
0C404:  MOVLW  03
0C406:  SUBWF  00,W
0C408:  MOVLB  0
0C40A:  BTFSC  FD8.2
0C40C:  GOTO   D4DE
0C410:  MOVLB  5
0C412:  MOVLW  08
0C414:  SUBWF  03,W
0C416:  BNZ   C426
0C418:  MOVLW  04
0C41A:  SUBWF  00,W
0C41C:  MOVLB  0
0C41E:  BTFSC  FD8.2
0C420:  GOTO   D4F0
0C424:  MOVLB  5
0C426:  MOVLW  08
0C428:  SUBWF  03,W
0C42A:  BNZ   C43A
0C42C:  MOVLW  34
0C42E:  SUBWF  00,W
0C430:  MOVLB  0
0C432:  BTFSC  FD8.2
0C434:  GOTO   D502
0C438:  MOVLB  5
0C43A:  MOVLW  08
0C43C:  SUBWF  03,W
0C43E:  BNZ   C44E
0C440:  MOVLW  35
0C442:  SUBWF  00,W
0C444:  MOVLB  0
0C446:  BTFSC  FD8.2
0C448:  GOTO   D516
0C44C:  MOVLB  5
0C44E:  MOVLW  08
0C450:  SUBWF  03,W
0C452:  BNZ   C462
0C454:  MOVLW  36
0C456:  SUBWF  00,W
0C458:  MOVLB  0
0C45A:  BTFSC  FD8.2
0C45C:  GOTO   D52C
0C460:  MOVLB  5
0C462:  MOVLW  08
0C464:  SUBWF  03,W
0C466:  BNZ   C476
0C468:  MOVLW  37
0C46A:  SUBWF  00,W
0C46C:  MOVLB  0
0C46E:  BTFSC  FD8.2
0C470:  GOTO   D540
0C474:  MOVLB  5
0C476:  MOVLW  08
0C478:  SUBWF  03,W
0C47A:  BNZ   C48A
0C47C:  MOVLW  38
0C47E:  SUBWF  00,W
0C480:  MOVLB  0
0C482:  BTFSC  FD8.2
0C484:  GOTO   D556
0C488:  MOVLB  5
0C48A:  MOVLW  08
0C48C:  SUBWF  03,W
0C48E:  BNZ   C49E
0C490:  MOVLW  39
0C492:  SUBWF  00,W
0C494:  MOVLB  0
0C496:  BTFSC  FD8.2
0C498:  GOTO   D56A
0C49C:  MOVLB  5
0C49E:  MOVLW  08
0C4A0:  SUBWF  03,W
0C4A2:  BNZ   C4B2
0C4A4:  MOVLW  3A
0C4A6:  SUBWF  00,W
0C4A8:  MOVLB  0
0C4AA:  BTFSC  FD8.2
0C4AC:  GOTO   D57E
0C4B0:  MOVLB  5
0C4B2:  MOVLW  08
0C4B4:  SUBWF  03,W
0C4B6:  BNZ   C4C6
0C4B8:  MOVLW  3B
0C4BA:  SUBWF  00,W
0C4BC:  MOVLB  0
0C4BE:  BTFSC  FD8.2
0C4C0:  GOTO   D592
0C4C4:  MOVLB  5
0C4C6:  MOVLW  08
0C4C8:  SUBWF  03,W
0C4CA:  BNZ   C4DA
0C4CC:  MOVLW  3C
0C4CE:  SUBWF  00,W
0C4D0:  MOVLB  0
0C4D2:  BTFSC  FD8.2
0C4D4:  GOTO   D5A6
0C4D8:  MOVLB  5
0C4DA:  MOVLW  08
0C4DC:  SUBWF  03,W
0C4DE:  BNZ   C4EE
0C4E0:  MOVLW  3D
0C4E2:  SUBWF  00,W
0C4E4:  MOVLB  0
0C4E6:  BTFSC  FD8.2
0C4E8:  GOTO   D5BA
0C4EC:  MOVLB  5
0C4EE:  MOVLW  08
0C4F0:  SUBWF  03,W
0C4F2:  BNZ   C502
0C4F4:  MOVLW  3E
0C4F6:  SUBWF  00,W
0C4F8:  MOVLB  0
0C4FA:  BTFSC  FD8.2
0C4FC:  GOTO   D5CE
0C500:  MOVLB  5
0C502:  MOVLW  08
0C504:  SUBWF  03,W
0C506:  BNZ   C516
0C508:  MOVLW  3F
0C50A:  SUBWF  00,W
0C50C:  MOVLB  0
0C50E:  BTFSC  FD8.2
0C510:  GOTO   D5CE
0C514:  MOVLB  5
0C516:  MOVLW  08
0C518:  SUBWF  03,W
0C51A:  BNZ   C52A
0C51C:  MOVLW  40
0C51E:  SUBWF  00,W
0C520:  MOVLB  0
0C522:  BTFSC  FD8.2
0C524:  GOTO   D5CE
0C528:  MOVLB  5
0C52A:  MOVLW  08
0C52C:  SUBWF  03,W
0C52E:  BNZ   C53E
0C530:  MOVLW  41
0C532:  SUBWF  00,W
0C534:  MOVLB  0
0C536:  BTFSC  FD8.2
0C538:  GOTO   D5CE
0C53C:  MOVLB  5
0C53E:  MOVLW  08
0C540:  SUBWF  03,W
0C542:  BNZ   C552
0C544:  MOVLW  42
0C546:  SUBWF  00,W
0C548:  MOVLB  0
0C54A:  BTFSC  FD8.2
0C54C:  GOTO   D5CE
0C550:  MOVLB  5
0C552:  MOVLW  08
0C554:  SUBWF  03,W
0C556:  BNZ   C566
0C558:  MOVLW  43
0C55A:  SUBWF  00,W
0C55C:  MOVLB  0
0C55E:  BTFSC  FD8.2
0C560:  GOTO   D5CE
0C564:  MOVLB  5
0C566:  MOVLW  08
0C568:  SUBWF  03,W
0C56A:  BNZ   C57A
0C56C:  MOVLW  44
0C56E:  SUBWF  00,W
0C570:  MOVLB  0
0C572:  BTFSC  FD8.2
0C574:  GOTO   D5CE
0C578:  MOVLB  5
0C57A:  MOVLW  08
0C57C:  SUBWF  03,W
0C57E:  BNZ   C58E
0C580:  MOVLW  45
0C582:  SUBWF  00,W
0C584:  MOVLB  0
0C586:  BTFSC  FD8.2
0C588:  GOTO   D5CE
0C58C:  MOVLB  5
0C58E:  MOVLW  08
0C590:  SUBWF  03,W
0C592:  BNZ   C5A2
0C594:  MOVLW  46
0C596:  SUBWF  00,W
0C598:  MOVLB  0
0C59A:  BTFSC  FD8.2
0C59C:  GOTO   D5CE
0C5A0:  MOVLB  5
0C5A2:  MOVLW  08
0C5A4:  SUBWF  03,W
0C5A6:  BNZ   C5B6
0C5A8:  MOVLW  47
0C5AA:  SUBWF  00,W
0C5AC:  MOVLB  0
0C5AE:  BTFSC  FD8.2
0C5B0:  GOTO   D5CE
0C5B4:  MOVLB  5
0C5B6:  MOVLW  08
0C5B8:  SUBWF  03,W
0C5BA:  BNZ   C5CA
0C5BC:  MOVLW  48
0C5BE:  SUBWF  00,W
0C5C0:  MOVLB  0
0C5C2:  BTFSC  FD8.2
0C5C4:  GOTO   D5CE
0C5C8:  MOVLB  5
0C5CA:  MOVLW  08
0C5CC:  SUBWF  03,W
0C5CE:  BNZ   C5DE
0C5D0:  MOVLW  49
0C5D2:  SUBWF  00,W
0C5D4:  MOVLB  0
0C5D6:  BTFSC  FD8.2
0C5D8:  GOTO   D5CE
0C5DC:  MOVLB  5
0C5DE:  MOVLW  08
0C5E0:  SUBWF  03,W
0C5E2:  BNZ   C5F2
0C5E4:  MOVLW  4A
0C5E6:  SUBWF  00,W
0C5E8:  MOVLB  0
0C5EA:  BTFSC  FD8.2
0C5EC:  GOTO   D5CE
0C5F0:  MOVLB  5
0C5F2:  MOVLW  08
0C5F4:  SUBWF  03,W
0C5F6:  BNZ   C606
0C5F8:  MOVLW  4B
0C5FA:  SUBWF  00,W
0C5FC:  MOVLB  0
0C5FE:  BTFSC  FD8.2
0C600:  GOTO   D5CE
0C604:  MOVLB  5
0C606:  MOVLW  08
0C608:  SUBWF  03,W
0C60A:  BNZ   C61A
0C60C:  MOVLW  4C
0C60E:  SUBWF  00,W
0C610:  MOVLB  0
0C612:  BTFSC  FD8.2
0C614:  GOTO   D5CE
0C618:  MOVLB  5
0C61A:  MOVLW  08
0C61C:  SUBWF  03,W
0C61E:  BNZ   C62E
0C620:  MOVLW  4D
0C622:  SUBWF  00,W
0C624:  MOVLB  0
0C626:  BTFSC  FD8.2
0C628:  GOTO   D5CE
0C62C:  MOVLB  5
0C62E:  MOVLW  08
0C630:  SUBWF  03,W
0C632:  BNZ   C642
0C634:  MOVLW  4E
0C636:  SUBWF  00,W
0C638:  MOVLB  0
0C63A:  BTFSC  FD8.2
0C63C:  GOTO   D5FE
0C640:  MOVLB  5
0C642:  MOVLW  08
0C644:  SUBWF  03,W
0C646:  BNZ   C656
0C648:  MOVLW  4F
0C64A:  SUBWF  00,W
0C64C:  MOVLB  0
0C64E:  BTFSC  FD8.2
0C650:  GOTO   D5FE
0C654:  MOVLB  5
0C656:  MOVLW  08
0C658:  SUBWF  03,W
0C65A:  BNZ   C66A
0C65C:  MOVLW  50
0C65E:  SUBWF  00,W
0C660:  MOVLB  0
0C662:  BTFSC  FD8.2
0C664:  GOTO   D5FE
0C668:  MOVLB  5
0C66A:  MOVLW  08
0C66C:  SUBWF  03,W
0C66E:  BNZ   C67E
0C670:  MOVLW  51
0C672:  SUBWF  00,W
0C674:  MOVLB  0
0C676:  BTFSC  FD8.2
0C678:  GOTO   D5FE
0C67C:  MOVLB  5
0C67E:  MOVLW  08
0C680:  SUBWF  03,W
0C682:  BNZ   C692
0C684:  MOVLW  52
0C686:  SUBWF  00,W
0C688:  MOVLB  0
0C68A:  BTFSC  FD8.2
0C68C:  GOTO   D5FE
0C690:  MOVLB  5
0C692:  MOVLW  08
0C694:  SUBWF  03,W
0C696:  BNZ   C6A6
0C698:  MOVLW  53
0C69A:  SUBWF  00,W
0C69C:  MOVLB  0
0C69E:  BTFSC  FD8.2
0C6A0:  GOTO   D5FE
0C6A4:  MOVLB  5
0C6A6:  MOVLW  08
0C6A8:  SUBWF  03,W
0C6AA:  BNZ   C6BA
0C6AC:  MOVLW  54
0C6AE:  SUBWF  00,W
0C6B0:  MOVLB  0
0C6B2:  BTFSC  FD8.2
0C6B4:  GOTO   D5FE
0C6B8:  MOVLB  5
0C6BA:  MOVLW  08
0C6BC:  SUBWF  03,W
0C6BE:  BNZ   C6CE
0C6C0:  MOVLW  55
0C6C2:  SUBWF  00,W
0C6C4:  MOVLB  0
0C6C6:  BTFSC  FD8.2
0C6C8:  GOTO   D5FE
0C6CC:  MOVLB  5
0C6CE:  MOVLW  08
0C6D0:  SUBWF  03,W
0C6D2:  BNZ   C6E2
0C6D4:  MOVLW  56
0C6D6:  SUBWF  00,W
0C6D8:  MOVLB  0
0C6DA:  BTFSC  FD8.2
0C6DC:  GOTO   D5FE
0C6E0:  MOVLB  5
0C6E2:  MOVLW  08
0C6E4:  SUBWF  03,W
0C6E6:  BNZ   C6F6
0C6E8:  MOVLW  57
0C6EA:  SUBWF  00,W
0C6EC:  MOVLB  0
0C6EE:  BTFSC  FD8.2
0C6F0:  GOTO   D5FE
0C6F4:  MOVLB  5
0C6F6:  MOVLW  08
0C6F8:  SUBWF  03,W
0C6FA:  BNZ   C70A
0C6FC:  MOVLW  58
0C6FE:  SUBWF  00,W
0C700:  MOVLB  0
0C702:  BTFSC  FD8.2
0C704:  GOTO   D5FE
0C708:  MOVLB  5
0C70A:  MOVLW  08
0C70C:  SUBWF  03,W
0C70E:  BNZ   C71E
0C710:  MOVLW  59
0C712:  SUBWF  00,W
0C714:  MOVLB  0
0C716:  BTFSC  FD8.2
0C718:  GOTO   D5FE
0C71C:  MOVLB  5
0C71E:  MOVLW  08
0C720:  SUBWF  03,W
0C722:  BNZ   C732
0C724:  MOVLW  5A
0C726:  SUBWF  00,W
0C728:  MOVLB  0
0C72A:  BTFSC  FD8.2
0C72C:  GOTO   D5FE
0C730:  MOVLB  5
0C732:  MOVLW  08
0C734:  SUBWF  03,W
0C736:  BNZ   C746
0C738:  MOVLW  5B
0C73A:  SUBWF  00,W
0C73C:  MOVLB  0
0C73E:  BTFSC  FD8.2
0C740:  GOTO   D5FE
0C744:  MOVLB  5
0C746:  MOVLW  08
0C748:  SUBWF  03,W
0C74A:  BNZ   C75A
0C74C:  MOVLW  5C
0C74E:  SUBWF  00,W
0C750:  MOVLB  0
0C752:  BTFSC  FD8.2
0C754:  GOTO   D5FE
0C758:  MOVLB  5
0C75A:  MOVLW  08
0C75C:  SUBWF  03,W
0C75E:  BNZ   C76E
0C760:  MOVLW  5D
0C762:  SUBWF  00,W
0C764:  MOVLB  0
0C766:  BTFSC  FD8.2
0C768:  GOTO   D5FE
0C76C:  MOVLB  5
0C76E:  MOVLW  08
0C770:  SUBWF  03,W
0C772:  BNZ   C782
0C774:  MOVLW  5E
0C776:  SUBWF  00,W
0C778:  MOVLB  0
0C77A:  BTFSC  FD8.2
0C77C:  GOTO   D62E
0C780:  MOVLB  5
0C782:  MOVLW  08
0C784:  SUBWF  03,W
0C786:  BNZ   C796
0C788:  MOVLW  61
0C78A:  SUBWF  00,W
0C78C:  MOVLB  0
0C78E:  BTFSC  FD8.2
0C790:  GOTO   D642
0C794:  MOVLB  5
0C796:  MOVLW  08
0C798:  SUBWF  03,W
0C79A:  BNZ   C7AA
0C79C:  MOVLW  62
0C79E:  SUBWF  00,W
0C7A0:  MOVLB  0
0C7A2:  BTFSC  FD8.2
0C7A4:  GOTO   D656
0C7A8:  MOVLB  5
0C7AA:  MOVLW  08
0C7AC:  SUBWF  03,W
0C7AE:  BNZ   C7BE
0C7B0:  MOVLW  66
0C7B2:  SUBWF  00,W
0C7B4:  MOVLB  0
0C7B6:  BTFSC  FD8.2
0C7B8:  GOTO   D66A
0C7BC:  MOVLB  5
0C7BE:  MOVLW  08
0C7C0:  SUBWF  03,W
0C7C2:  BNZ   C7D2
0C7C4:  MOVLW  67
0C7C6:  SUBWF  00,W
0C7C8:  MOVLB  0
0C7CA:  BTFSC  FD8.2
0C7CC:  GOTO   D66A
0C7D0:  MOVLB  5
0C7D2:  MOVLW  08
0C7D4:  SUBWF  03,W
0C7D6:  BNZ   C7E6
0C7D8:  MOVLW  68
0C7DA:  SUBWF  00,W
0C7DC:  MOVLB  0
0C7DE:  BTFSC  FD8.2
0C7E0:  GOTO   D66A
0C7E4:  MOVLB  5
0C7E6:  MOVLW  08
0C7E8:  SUBWF  03,W
0C7EA:  BNZ   C7FA
0C7EC:  MOVLW  69
0C7EE:  SUBWF  00,W
0C7F0:  MOVLB  0
0C7F2:  BTFSC  FD8.2
0C7F4:  GOTO   D66A
0C7F8:  MOVLB  5
0C7FA:  MOVLW  08
0C7FC:  SUBWF  03,W
0C7FE:  BNZ   C80E
0C800:  MOVLW  6A
0C802:  SUBWF  00,W
0C804:  MOVLB  0
0C806:  BTFSC  FD8.2
0C808:  GOTO   D66A
0C80C:  MOVLB  5
0C80E:  MOVLW  08
0C810:  SUBWF  03,W
0C812:  BNZ   C822
0C814:  MOVLW  6B
0C816:  SUBWF  00,W
0C818:  MOVLB  0
0C81A:  BTFSC  FD8.2
0C81C:  GOTO   D66A
0C820:  MOVLB  5
0C822:  MOVLW  08
0C824:  SUBWF  03,W
0C826:  BNZ   C836
0C828:  MOVLW  6C
0C82A:  SUBWF  00,W
0C82C:  MOVLB  0
0C82E:  BTFSC  FD8.2
0C830:  GOTO   D66A
0C834:  MOVLB  5
0C836:  MOVLW  08
0C838:  SUBWF  03,W
0C83A:  BNZ   C84A
0C83C:  MOVLW  6D
0C83E:  SUBWF  00,W
0C840:  MOVLB  0
0C842:  BTFSC  FD8.2
0C844:  GOTO   D66A
0C848:  MOVLB  5
0C84A:  MOVLW  08
0C84C:  SUBWF  03,W
0C84E:  BNZ   C85E
0C850:  MOVLW  6E
0C852:  SUBWF  00,W
0C854:  MOVLB  0
0C856:  BTFSC  FD8.2
0C858:  GOTO   D66A
0C85C:  MOVLB  5
0C85E:  MOVLW  08
0C860:  SUBWF  03,W
0C862:  BNZ   C872
0C864:  MOVLW  6F
0C866:  SUBWF  00,W
0C868:  MOVLB  0
0C86A:  BTFSC  FD8.2
0C86C:  GOTO   D66A
0C870:  MOVLB  5
0C872:  MOVLW  08
0C874:  SUBWF  03,W
0C876:  BNZ   C886
0C878:  MOVLW  70
0C87A:  SUBWF  00,W
0C87C:  MOVLB  0
0C87E:  BTFSC  FD8.2
0C880:  GOTO   D66A
0C884:  MOVLB  5
0C886:  MOVLW  08
0C888:  SUBWF  03,W
0C88A:  BNZ   C89A
0C88C:  MOVLW  71
0C88E:  SUBWF  00,W
0C890:  MOVLB  0
0C892:  BTFSC  FD8.2
0C894:  GOTO   D66A
0C898:  MOVLB  5
0C89A:  MOVLW  08
0C89C:  SUBWF  03,W
0C89E:  BNZ   C8AE
0C8A0:  MOVLW  72
0C8A2:  SUBWF  00,W
0C8A4:  MOVLB  0
0C8A6:  BTFSC  FD8.2
0C8A8:  GOTO   D66A
0C8AC:  MOVLB  5
0C8AE:  MOVLW  08
0C8B0:  SUBWF  03,W
0C8B2:  BNZ   C8C2
0C8B4:  MOVLW  73
0C8B6:  SUBWF  00,W
0C8B8:  MOVLB  0
0C8BA:  BTFSC  FD8.2
0C8BC:  GOTO   D66A
0C8C0:  MOVLB  5
0C8C2:  MOVLW  08
0C8C4:  SUBWF  03,W
0C8C6:  BNZ   C8D6
0C8C8:  MOVLW  74
0C8CA:  SUBWF  00,W
0C8CC:  MOVLB  0
0C8CE:  BTFSC  FD8.2
0C8D0:  GOTO   D66A
0C8D4:  MOVLB  5
0C8D6:  MOVLW  08
0C8D8:  SUBWF  03,W
0C8DA:  BNZ   C8EA
0C8DC:  MOVLW  75
0C8DE:  SUBWF  00,W
0C8E0:  MOVLB  0
0C8E2:  BTFSC  FD8.2
0C8E4:  GOTO   D66A
0C8E8:  MOVLB  5
0C8EA:  MOVLW  08
0C8EC:  SUBWF  03,W
0C8EE:  BNZ   C8FE
0C8F0:  MOVLW  7A
0C8F2:  SUBWF  00,W
0C8F4:  MOVLB  0
0C8F6:  BTFSC  FD8.2
0C8F8:  GOTO   D694
0C8FC:  MOVLB  5
0C8FE:  MOVLW  08
0C900:  SUBWF  03,W
0C902:  BNZ   C912
0C904:  MOVLW  7B
0C906:  SUBWF  00,W
0C908:  MOVLB  0
0C90A:  BTFSC  FD8.2
0C90C:  GOTO   D694
0C910:  MOVLB  5
0C912:  MOVLW  08
0C914:  SUBWF  03,W
0C916:  BNZ   C926
0C918:  MOVLW  7C
0C91A:  SUBWF  00,W
0C91C:  MOVLB  0
0C91E:  BTFSC  FD8.2
0C920:  GOTO   D694
0C924:  MOVLB  5
0C926:  MOVLW  08
0C928:  SUBWF  03,W
0C92A:  BNZ   C93A
0C92C:  MOVLW  7D
0C92E:  SUBWF  00,W
0C930:  MOVLB  0
0C932:  BTFSC  FD8.2
0C934:  GOTO   D694
0C938:  MOVLB  5
0C93A:  MOVLW  08
0C93C:  SUBWF  03,W
0C93E:  BNZ   C94E
0C940:  MOVLW  7E
0C942:  SUBWF  00,W
0C944:  MOVLB  0
0C946:  BTFSC  FD8.2
0C948:  GOTO   D694
0C94C:  MOVLB  5
0C94E:  MOVLW  08
0C950:  SUBWF  03,W
0C952:  BNZ   C962
0C954:  MOVLW  7F
0C956:  SUBWF  00,W
0C958:  MOVLB  0
0C95A:  BTFSC  FD8.2
0C95C:  GOTO   D694
0C960:  MOVLB  5
0C962:  MOVLW  08
0C964:  SUBWF  03,W
0C966:  BNZ   C976
0C968:  MOVLW  80
0C96A:  SUBWF  00,W
0C96C:  MOVLB  0
0C96E:  BTFSC  FD8.2
0C970:  GOTO   D694
0C974:  MOVLB  5
0C976:  MOVLW  08
0C978:  SUBWF  03,W
0C97A:  BNZ   C98A
0C97C:  MOVLW  81
0C97E:  SUBWF  00,W
0C980:  MOVLB  0
0C982:  BTFSC  FD8.2
0C984:  GOTO   D694
0C988:  MOVLB  5
0C98A:  MOVLW  08
0C98C:  SUBWF  03,W
0C98E:  BNZ   C99E
0C990:  MOVLW  82
0C992:  SUBWF  00,W
0C994:  MOVLB  0
0C996:  BTFSC  FD8.2
0C998:  GOTO   D694
0C99C:  MOVLB  5
0C99E:  MOVLW  08
0C9A0:  SUBWF  03,W
0C9A2:  BNZ   C9B2
0C9A4:  MOVLW  83
0C9A6:  SUBWF  00,W
0C9A8:  MOVLB  0
0C9AA:  BTFSC  FD8.2
0C9AC:  GOTO   D694
0C9B0:  MOVLB  5
0C9B2:  MOVLW  08
0C9B4:  SUBWF  03,W
0C9B6:  BNZ   C9C6
0C9B8:  MOVLW  84
0C9BA:  SUBWF  00,W
0C9BC:  MOVLB  0
0C9BE:  BTFSC  FD8.2
0C9C0:  GOTO   D694
0C9C4:  MOVLB  5
0C9C6:  MOVLW  08
0C9C8:  SUBWF  03,W
0C9CA:  BNZ   C9DA
0C9CC:  MOVLW  85
0C9CE:  SUBWF  00,W
0C9D0:  MOVLB  0
0C9D2:  BTFSC  FD8.2
0C9D4:  GOTO   D694
0C9D8:  MOVLB  5
0C9DA:  MOVLW  08
0C9DC:  SUBWF  03,W
0C9DE:  BNZ   C9EE
0C9E0:  MOVLW  86
0C9E2:  SUBWF  00,W
0C9E4:  MOVLB  0
0C9E6:  BTFSC  FD8.2
0C9E8:  GOTO   D694
0C9EC:  MOVLB  5
0C9EE:  MOVLW  08
0C9F0:  SUBWF  03,W
0C9F2:  BNZ   CA02
0C9F4:  MOVLW  87
0C9F6:  SUBWF  00,W
0C9F8:  MOVLB  0
0C9FA:  BTFSC  FD8.2
0C9FC:  GOTO   D694
0CA00:  MOVLB  5
0CA02:  MOVLW  08
0CA04:  SUBWF  03,W
0CA06:  BNZ   CA16
0CA08:  MOVLW  88
0CA0A:  SUBWF  00,W
0CA0C:  MOVLB  0
0CA0E:  BTFSC  FD8.2
0CA10:  GOTO   D694
0CA14:  MOVLB  5
0CA16:  MOVLW  08
0CA18:  SUBWF  03,W
0CA1A:  BNZ   CA2A
0CA1C:  MOVLW  89
0CA1E:  SUBWF  00,W
0CA20:  MOVLB  0
0CA22:  BTFSC  FD8.2
0CA24:  GOTO   D694
0CA28:  MOVLB  5
0CA2A:  MOVLW  08
0CA2C:  SUBWF  03,W
0CA2E:  BNZ   CA3E
0CA30:  MOVLW  8E
0CA32:  SUBWF  00,W
0CA34:  MOVLB  0
0CA36:  BTFSC  FD8.2
0CA38:  GOTO   D6BE
0CA3C:  MOVLB  5
0CA3E:  MOVLW  08
0CA40:  SUBWF  03,W
0CA42:  BNZ   CA52
0CA44:  MOVLW  8F
0CA46:  SUBWF  00,W
0CA48:  MOVLB  0
0CA4A:  BTFSC  FD8.2
0CA4C:  GOTO   D6BE
0CA50:  MOVLB  5
0CA52:  MOVLW  08
0CA54:  SUBWF  03,W
0CA56:  BNZ   CA66
0CA58:  MOVLW  90
0CA5A:  SUBWF  00,W
0CA5C:  MOVLB  0
0CA5E:  BTFSC  FD8.2
0CA60:  GOTO   D6BE
0CA64:  MOVLB  5
0CA66:  MOVLW  08
0CA68:  SUBWF  03,W
0CA6A:  BNZ   CA7A
0CA6C:  MOVLW  91
0CA6E:  SUBWF  00,W
0CA70:  MOVLB  0
0CA72:  BTFSC  FD8.2
0CA74:  GOTO   D6BE
0CA78:  MOVLB  5
0CA7A:  MOVLW  08
0CA7C:  SUBWF  03,W
0CA7E:  BNZ   CA8E
0CA80:  MOVLW  92
0CA82:  SUBWF  00,W
0CA84:  MOVLB  0
0CA86:  BTFSC  FD8.2
0CA88:  GOTO   D6BE
0CA8C:  MOVLB  5
0CA8E:  MOVLW  08
0CA90:  SUBWF  03,W
0CA92:  BNZ   CAA2
0CA94:  MOVLW  93
0CA96:  SUBWF  00,W
0CA98:  MOVLB  0
0CA9A:  BTFSC  FD8.2
0CA9C:  GOTO   D6BE
0CAA0:  MOVLB  5
0CAA2:  MOVLW  08
0CAA4:  SUBWF  03,W
0CAA6:  BNZ   CAB6
0CAA8:  MOVLW  94
0CAAA:  SUBWF  00,W
0CAAC:  MOVLB  0
0CAAE:  BTFSC  FD8.2
0CAB0:  GOTO   D6BE
0CAB4:  MOVLB  5
0CAB6:  MOVLW  08
0CAB8:  SUBWF  03,W
0CABA:  BNZ   CACA
0CABC:  MOVLW  95
0CABE:  SUBWF  00,W
0CAC0:  MOVLB  0
0CAC2:  BTFSC  FD8.2
0CAC4:  GOTO   D6BE
0CAC8:  MOVLB  5
0CACA:  MOVLW  08
0CACC:  SUBWF  03,W
0CACE:  BNZ   CADE
0CAD0:  MOVLW  96
0CAD2:  SUBWF  00,W
0CAD4:  MOVLB  0
0CAD6:  BTFSC  FD8.2
0CAD8:  GOTO   D6BE
0CADC:  MOVLB  5
0CADE:  MOVLW  08
0CAE0:  SUBWF  03,W
0CAE2:  BNZ   CAF2
0CAE4:  MOVLW  97
0CAE6:  SUBWF  00,W
0CAE8:  MOVLB  0
0CAEA:  BTFSC  FD8.2
0CAEC:  GOTO   D6BE
0CAF0:  MOVLB  5
0CAF2:  MOVLW  08
0CAF4:  SUBWF  03,W
0CAF6:  BNZ   CB06
0CAF8:  MOVLW  98
0CAFA:  SUBWF  00,W
0CAFC:  MOVLB  0
0CAFE:  BTFSC  FD8.2
0CB00:  GOTO   D6BE
0CB04:  MOVLB  5
0CB06:  MOVLW  08
0CB08:  SUBWF  03,W
0CB0A:  BNZ   CB1A
0CB0C:  MOVLW  99
0CB0E:  SUBWF  00,W
0CB10:  MOVLB  0
0CB12:  BTFSC  FD8.2
0CB14:  GOTO   D6BE
0CB18:  MOVLB  5
0CB1A:  MOVLW  08
0CB1C:  SUBWF  03,W
0CB1E:  BNZ   CB2E
0CB20:  MOVLW  9A
0CB22:  SUBWF  00,W
0CB24:  MOVLB  0
0CB26:  BTFSC  FD8.2
0CB28:  GOTO   D6BE
0CB2C:  MOVLB  5
0CB2E:  MOVLW  08
0CB30:  SUBWF  03,W
0CB32:  BNZ   CB42
0CB34:  MOVLW  9B
0CB36:  SUBWF  00,W
0CB38:  MOVLB  0
0CB3A:  BTFSC  FD8.2
0CB3C:  GOTO   D6BE
0CB40:  MOVLB  5
0CB42:  MOVLW  08
0CB44:  SUBWF  03,W
0CB46:  BNZ   CB56
0CB48:  MOVLW  9C
0CB4A:  SUBWF  00,W
0CB4C:  MOVLB  0
0CB4E:  BTFSC  FD8.2
0CB50:  GOTO   D6BE
0CB54:  MOVLB  5
0CB56:  MOVLW  08
0CB58:  SUBWF  03,W
0CB5A:  BNZ   CB6A
0CB5C:  MOVLW  9D
0CB5E:  SUBWF  00,W
0CB60:  MOVLB  0
0CB62:  BTFSC  FD8.2
0CB64:  GOTO   D6BE
0CB68:  MOVLB  5
0CB6A:  MOVLW  08
0CB6C:  SUBWF  03,W
0CB6E:  BNZ   CB7E
0CB70:  MOVLW  A2
0CB72:  SUBWF  00,W
0CB74:  MOVLB  0
0CB76:  BTFSC  FD8.2
0CB78:  GOTO   D6E8
0CB7C:  MOVLB  5
0CB7E:  MOVLW  08
0CB80:  SUBWF  03,W
0CB82:  BNZ   CB92
0CB84:  MOVLW  A3
0CB86:  SUBWF  00,W
0CB88:  MOVLB  0
0CB8A:  BTFSC  FD8.2
0CB8C:  GOTO   D6E8
0CB90:  MOVLB  5
0CB92:  MOVLW  08
0CB94:  SUBWF  03,W
0CB96:  BNZ   CBA6
0CB98:  MOVLW  A4
0CB9A:  SUBWF  00,W
0CB9C:  MOVLB  0
0CB9E:  BTFSC  FD8.2
0CBA0:  GOTO   D6E8
0CBA4:  MOVLB  5
0CBA6:  MOVLW  08
0CBA8:  SUBWF  03,W
0CBAA:  BNZ   CBBA
0CBAC:  MOVLW  A5
0CBAE:  SUBWF  00,W
0CBB0:  MOVLB  0
0CBB2:  BTFSC  FD8.2
0CBB4:  GOTO   D6E8
0CBB8:  MOVLB  5
0CBBA:  MOVLW  08
0CBBC:  SUBWF  03,W
0CBBE:  BNZ   CBCE
0CBC0:  MOVLW  A6
0CBC2:  SUBWF  00,W
0CBC4:  MOVLB  0
0CBC6:  BTFSC  FD8.2
0CBC8:  GOTO   D6E8
0CBCC:  MOVLB  5
0CBCE:  MOVLW  08
0CBD0:  SUBWF  03,W
0CBD2:  BNZ   CBE2
0CBD4:  MOVLW  A7
0CBD6:  SUBWF  00,W
0CBD8:  MOVLB  0
0CBDA:  BTFSC  FD8.2
0CBDC:  GOTO   D6E8
0CBE0:  MOVLB  5
0CBE2:  MOVLW  08
0CBE4:  SUBWF  03,W
0CBE6:  BNZ   CBF6
0CBE8:  MOVLW  A8
0CBEA:  SUBWF  00,W
0CBEC:  MOVLB  0
0CBEE:  BTFSC  FD8.2
0CBF0:  GOTO   D6E8
0CBF4:  MOVLB  5
0CBF6:  MOVLW  08
0CBF8:  SUBWF  03,W
0CBFA:  BNZ   CC0A
0CBFC:  MOVLW  A9
0CBFE:  SUBWF  00,W
0CC00:  MOVLB  0
0CC02:  BTFSC  FD8.2
0CC04:  GOTO   D6E8
0CC08:  MOVLB  5
0CC0A:  MOVLW  08
0CC0C:  SUBWF  03,W
0CC0E:  BNZ   CC1E
0CC10:  MOVLW  AA
0CC12:  SUBWF  00,W
0CC14:  MOVLB  0
0CC16:  BTFSC  FD8.2
0CC18:  GOTO   D6E8
0CC1C:  MOVLB  5
0CC1E:  MOVLW  08
0CC20:  SUBWF  03,W
0CC22:  BNZ   CC32
0CC24:  MOVLW  AB
0CC26:  SUBWF  00,W
0CC28:  MOVLB  0
0CC2A:  BTFSC  FD8.2
0CC2C:  GOTO   D6E8
0CC30:  MOVLB  5
0CC32:  MOVLW  08
0CC34:  SUBWF  03,W
0CC36:  BNZ   CC46
0CC38:  MOVLW  AC
0CC3A:  SUBWF  00,W
0CC3C:  MOVLB  0
0CC3E:  BTFSC  FD8.2
0CC40:  GOTO   D6E8
0CC44:  MOVLB  5
0CC46:  MOVLW  08
0CC48:  SUBWF  03,W
0CC4A:  BNZ   CC5A
0CC4C:  MOVLW  AD
0CC4E:  SUBWF  00,W
0CC50:  MOVLB  0
0CC52:  BTFSC  FD8.2
0CC54:  GOTO   D6E8
0CC58:  MOVLB  5
0CC5A:  MOVLW  08
0CC5C:  SUBWF  03,W
0CC5E:  BNZ   CC6E
0CC60:  MOVLW  AE
0CC62:  SUBWF  00,W
0CC64:  MOVLB  0
0CC66:  BTFSC  FD8.2
0CC68:  GOTO   D6E8
0CC6C:  MOVLB  5
0CC6E:  MOVLW  08
0CC70:  SUBWF  03,W
0CC72:  BNZ   CC82
0CC74:  MOVLW  AF
0CC76:  SUBWF  00,W
0CC78:  MOVLB  0
0CC7A:  BTFSC  FD8.2
0CC7C:  GOTO   D6E8
0CC80:  MOVLB  5
0CC82:  MOVLW  08
0CC84:  SUBWF  03,W
0CC86:  BNZ   CC96
0CC88:  MOVLW  B0
0CC8A:  SUBWF  00,W
0CC8C:  MOVLB  0
0CC8E:  BTFSC  FD8.2
0CC90:  GOTO   D6E8
0CC94:  MOVLB  5
0CC96:  MOVLW  08
0CC98:  SUBWF  03,W
0CC9A:  BNZ   CCAA
0CC9C:  MOVLW  B1
0CC9E:  SUBWF  00,W
0CCA0:  MOVLB  0
0CCA2:  BTFSC  FD8.2
0CCA4:  GOTO   D6E8
0CCA8:  MOVLB  5
0CCAA:  MOVLW  08
0CCAC:  SUBWF  03,W
0CCAE:  BNZ   CCBE
0CCB0:  MOVLW  B6
0CCB2:  SUBWF  00,W
0CCB4:  MOVLB  0
0CCB6:  BTFSC  FD8.2
0CCB8:  GOTO   D712
0CCBC:  MOVLB  5
0CCBE:  MOVLW  08
0CCC0:  SUBWF  03,W
0CCC2:  BNZ   CCD2
0CCC4:  MOVLW  B7
0CCC6:  SUBWF  00,W
0CCC8:  MOVLB  0
0CCCA:  BTFSC  FD8.2
0CCCC:  GOTO   D712
0CCD0:  MOVLB  5
0CCD2:  MOVLW  08
0CCD4:  SUBWF  03,W
0CCD6:  BNZ   CCE6
0CCD8:  MOVLW  B8
0CCDA:  SUBWF  00,W
0CCDC:  MOVLB  0
0CCDE:  BTFSC  FD8.2
0CCE0:  GOTO   D712
0CCE4:  MOVLB  5
0CCE6:  MOVLW  08
0CCE8:  SUBWF  03,W
0CCEA:  BNZ   CCFA
0CCEC:  MOVLW  B9
0CCEE:  SUBWF  00,W
0CCF0:  MOVLB  0
0CCF2:  BTFSC  FD8.2
0CCF4:  GOTO   D712
0CCF8:  MOVLB  5
0CCFA:  MOVLW  08
0CCFC:  SUBWF  03,W
0CCFE:  BNZ   CD0E
0CD00:  MOVLW  BA
0CD02:  SUBWF  00,W
0CD04:  MOVLB  0
0CD06:  BTFSC  FD8.2
0CD08:  GOTO   D712
0CD0C:  MOVLB  5
0CD0E:  MOVLW  08
0CD10:  SUBWF  03,W
0CD12:  BNZ   CD22
0CD14:  MOVLW  BB
0CD16:  SUBWF  00,W
0CD18:  MOVLB  0
0CD1A:  BTFSC  FD8.2
0CD1C:  GOTO   D712
0CD20:  MOVLB  5
0CD22:  MOVLW  08
0CD24:  SUBWF  03,W
0CD26:  BNZ   CD36
0CD28:  MOVLW  BC
0CD2A:  SUBWF  00,W
0CD2C:  MOVLB  0
0CD2E:  BTFSC  FD8.2
0CD30:  GOTO   D712
0CD34:  MOVLB  5
0CD36:  MOVLW  08
0CD38:  SUBWF  03,W
0CD3A:  BNZ   CD4A
0CD3C:  MOVLW  BD
0CD3E:  SUBWF  00,W
0CD40:  MOVLB  0
0CD42:  BTFSC  FD8.2
0CD44:  GOTO   D712
0CD48:  MOVLB  5
0CD4A:  MOVLW  08
0CD4C:  SUBWF  03,W
0CD4E:  BNZ   CD5E
0CD50:  MOVLW  BE
0CD52:  SUBWF  00,W
0CD54:  MOVLB  0
0CD56:  BTFSC  FD8.2
0CD58:  GOTO   D712
0CD5C:  MOVLB  5
0CD5E:  MOVLW  08
0CD60:  SUBWF  03,W
0CD62:  BNZ   CD72
0CD64:  MOVLW  BF
0CD66:  SUBWF  00,W
0CD68:  MOVLB  0
0CD6A:  BTFSC  FD8.2
0CD6C:  GOTO   D712
0CD70:  MOVLB  5
0CD72:  MOVLW  08
0CD74:  SUBWF  03,W
0CD76:  BNZ   CD86
0CD78:  MOVLW  C0
0CD7A:  SUBWF  00,W
0CD7C:  MOVLB  0
0CD7E:  BTFSC  FD8.2
0CD80:  GOTO   D712
0CD84:  MOVLB  5
0CD86:  MOVLW  08
0CD88:  SUBWF  03,W
0CD8A:  BNZ   CD9A
0CD8C:  MOVLW  C1
0CD8E:  SUBWF  00,W
0CD90:  MOVLB  0
0CD92:  BTFSC  FD8.2
0CD94:  GOTO   D712
0CD98:  MOVLB  5
0CD9A:  MOVLW  08
0CD9C:  SUBWF  03,W
0CD9E:  BNZ   CDAE
0CDA0:  MOVLW  C2
0CDA2:  SUBWF  00,W
0CDA4:  MOVLB  0
0CDA6:  BTFSC  FD8.2
0CDA8:  GOTO   D712
0CDAC:  MOVLB  5
0CDAE:  MOVLW  08
0CDB0:  SUBWF  03,W
0CDB2:  BNZ   CDC2
0CDB4:  MOVLW  C3
0CDB6:  SUBWF  00,W
0CDB8:  MOVLB  0
0CDBA:  BTFSC  FD8.2
0CDBC:  GOTO   D712
0CDC0:  MOVLB  5
0CDC2:  MOVLW  08
0CDC4:  SUBWF  03,W
0CDC6:  BNZ   CDD6
0CDC8:  MOVLW  C4
0CDCA:  SUBWF  00,W
0CDCC:  MOVLB  0
0CDCE:  BTFSC  FD8.2
0CDD0:  GOTO   D712
0CDD4:  MOVLB  5
0CDD6:  MOVLW  08
0CDD8:  SUBWF  03,W
0CDDA:  BNZ   CDEA
0CDDC:  MOVLW  C5
0CDDE:  SUBWF  00,W
0CDE0:  MOVLB  0
0CDE2:  BTFSC  FD8.2
0CDE4:  GOTO   D712
0CDE8:  MOVLB  5
0CDEA:  MOVLW  08
0CDEC:  SUBWF  03,W
0CDEE:  BNZ   CDFE
0CDF0:  MOVLW  CA
0CDF2:  SUBWF  00,W
0CDF4:  MOVLB  0
0CDF6:  BTFSC  FD8.2
0CDF8:  GOTO   D73C
0CDFC:  MOVLB  5
0CDFE:  MOVLW  08
0CE00:  SUBWF  03,W
0CE02:  BNZ   CE12
0CE04:  MOVLW  CB
0CE06:  SUBWF  00,W
0CE08:  MOVLB  0
0CE0A:  BTFSC  FD8.2
0CE0C:  GOTO   D74E
0CE10:  MOVLB  5
0CE12:  MOVLW  08
0CE14:  SUBWF  03,W
0CE16:  BNZ   CE26
0CE18:  MOVLW  CC
0CE1A:  SUBWF  00,W
0CE1C:  MOVLB  0
0CE1E:  BTFSC  FD8.2
0CE20:  GOTO   D77E
0CE24:  MOVLB  5
0CE26:  MOVLW  08
0CE28:  SUBWF  03,W
0CE2A:  BNZ   CE3A
0CE2C:  MOVLW  CD
0CE2E:  SUBWF  00,W
0CE30:  MOVLB  0
0CE32:  BTFSC  FD8.2
0CE34:  GOTO   D7AE
0CE38:  MOVLB  5
0CE3A:  MOVLW  08
0CE3C:  SUBWF  03,W
0CE3E:  BNZ   CE4E
0CE40:  MOVLW  CE
0CE42:  SUBWF  00,W
0CE44:  MOVLB  0
0CE46:  BTFSC  FD8.2
0CE48:  GOTO   D7AE
0CE4C:  MOVLB  5
0CE4E:  MOVLW  08
0CE50:  SUBWF  03,W
0CE52:  BNZ   CE62
0CE54:  MOVLW  CF
0CE56:  SUBWF  00,W
0CE58:  MOVLB  0
0CE5A:  BTFSC  FD8.2
0CE5C:  GOTO   D7BA
0CE60:  MOVLB  5
0CE62:  MOVLW  08
0CE64:  SUBWF  03,W
0CE66:  BNZ   CE76
0CE68:  MOVLW  D0
0CE6A:  SUBWF  00,W
0CE6C:  MOVLB  0
0CE6E:  BTFSC  FD8.2
0CE70:  GOTO   D7D0
0CE74:  MOVLB  5
0CE76:  MOVLW  08
0CE78:  SUBWF  03,W
0CE7A:  BNZ   CE8A
0CE7C:  MOVLW  D1
0CE7E:  SUBWF  00,W
0CE80:  MOVLB  0
0CE82:  BTFSC  FD8.2
0CE84:  GOTO   D7E4
0CE88:  MOVLB  5
0CE8A:  MOVLW  08
0CE8C:  SUBWF  03,W
0CE8E:  BNZ   CE9E
0CE90:  MOVLW  D2
0CE92:  SUBWF  00,W
0CE94:  MOVLB  0
0CE96:  BTFSC  FD8.2
0CE98:  GOTO   D7F8
0CE9C:  MOVLB  5
0CE9E:  MOVLW  08
0CEA0:  SUBWF  03,W
0CEA2:  BNZ   CEB2
0CEA4:  MOVLW  D3
0CEA6:  SUBWF  00,W
0CEA8:  MOVLB  0
0CEAA:  BTFSC  FD8.2
0CEAC:  GOTO   D80C
0CEB0:  MOVLB  5
0CEB2:  MOVLW  08
0CEB4:  SUBWF  03,W
0CEB6:  BNZ   CEC6
0CEB8:  MOVLW  D4
0CEBA:  SUBWF  00,W
0CEBC:  MOVLB  0
0CEBE:  BTFSC  FD8.2
0CEC0:  GOTO   D820
0CEC4:  MOVLB  5
0CEC6:  MOVLW  08
0CEC8:  SUBWF  03,W
0CECA:  BNZ   CEDA
0CECC:  MOVLW  D5
0CECE:  SUBWF  00,W
0CED0:  MOVLB  0
0CED2:  BTFSC  FD8.2
0CED4:  GOTO   D820
0CED8:  MOVLB  5
0CEDA:  MOVLW  08
0CEDC:  SUBWF  03,W
0CEDE:  BNZ   CEEE
0CEE0:  MOVLW  D6
0CEE2:  SUBWF  00,W
0CEE4:  MOVLB  0
0CEE6:  BTFSC  FD8.2
0CEE8:  GOTO   D820
0CEEC:  MOVLB  5
0CEEE:  MOVLW  08
0CEF0:  SUBWF  03,W
0CEF2:  BNZ   CF02
0CEF4:  MOVLW  D7
0CEF6:  SUBWF  00,W
0CEF8:  MOVLB  0
0CEFA:  BTFSC  FD8.2
0CEFC:  GOTO   D820
0CF00:  MOVLB  5
0CF02:  MOVLW  08
0CF04:  SUBWF  03,W
0CF06:  BNZ   CF16
0CF08:  MOVLW  D8
0CF0A:  SUBWF  00,W
0CF0C:  MOVLB  0
0CF0E:  BTFSC  FD8.2
0CF10:  GOTO   D820
0CF14:  MOVLB  5
0CF16:  MOVLW  08
0CF18:  SUBWF  03,W
0CF1A:  BNZ   CF2A
0CF1C:  MOVLW  D9
0CF1E:  SUBWF  00,W
0CF20:  MOVLB  0
0CF22:  BTFSC  FD8.2
0CF24:  GOTO   D820
0CF28:  MOVLB  5
0CF2A:  MOVLW  08
0CF2C:  SUBWF  03,W
0CF2E:  BNZ   CF3E
0CF30:  MOVLW  DA
0CF32:  SUBWF  00,W
0CF34:  MOVLB  0
0CF36:  BTFSC  FD8.2
0CF38:  GOTO   D820
0CF3C:  MOVLB  5
0CF3E:  MOVLW  08
0CF40:  SUBWF  03,W
0CF42:  BNZ   CF52
0CF44:  MOVLW  DB
0CF46:  SUBWF  00,W
0CF48:  MOVLB  0
0CF4A:  BTFSC  FD8.2
0CF4C:  GOTO   D820
0CF50:  MOVLB  5
0CF52:  MOVLW  08
0CF54:  SUBWF  03,W
0CF56:  BNZ   CF66
0CF58:  MOVLW  DC
0CF5A:  SUBWF  00,W
0CF5C:  MOVLB  0
0CF5E:  BTFSC  FD8.2
0CF60:  GOTO   D820
0CF64:  MOVLB  5
0CF66:  MOVLW  08
0CF68:  SUBWF  03,W
0CF6A:  BNZ   CF7A
0CF6C:  MOVLW  DD
0CF6E:  SUBWF  00,W
0CF70:  MOVLB  0
0CF72:  BTFSC  FD8.2
0CF74:  GOTO   D820
0CF78:  MOVLB  5
0CF7A:  MOVLW  08
0CF7C:  SUBWF  03,W
0CF7E:  BNZ   CF8E
0CF80:  MOVLW  DE
0CF82:  SUBWF  00,W
0CF84:  MOVLB  0
0CF86:  BTFSC  FD8.2
0CF88:  GOTO   D820
0CF8C:  MOVLB  5
0CF8E:  MOVLW  08
0CF90:  SUBWF  03,W
0CF92:  BNZ   CFA2
0CF94:  MOVLW  DF
0CF96:  SUBWF  00,W
0CF98:  MOVLB  0
0CF9A:  BTFSC  FD8.2
0CF9C:  GOTO   D820
0CFA0:  MOVLB  5
0CFA2:  MOVLW  08
0CFA4:  SUBWF  03,W
0CFA6:  BNZ   CFB6
0CFA8:  MOVLW  E0
0CFAA:  SUBWF  00,W
0CFAC:  MOVLB  0
0CFAE:  BTFSC  FD8.2
0CFB0:  GOTO   D858
0CFB4:  MOVLB  5
0CFB6:  MOVLW  08
0CFB8:  SUBWF  03,W
0CFBA:  BNZ   CFCA
0CFBC:  MOVLW  E1
0CFBE:  SUBWF  00,W
0CFC0:  MOVLB  0
0CFC2:  BTFSC  FD8.2
0CFC4:  GOTO   D858
0CFC8:  MOVLB  5
0CFCA:  MOVLW  08
0CFCC:  SUBWF  03,W
0CFCE:  BNZ   CFDE
0CFD0:  MOVLW  E2
0CFD2:  SUBWF  00,W
0CFD4:  MOVLB  0
0CFD6:  BTFSC  FD8.2
0CFD8:  GOTO   D858
0CFDC:  MOVLB  5
0CFDE:  MOVLW  08
0CFE0:  SUBWF  03,W
0CFE2:  BNZ   CFF2
0CFE4:  MOVLW  E3
0CFE6:  SUBWF  00,W
0CFE8:  MOVLB  0
0CFEA:  BTFSC  FD8.2
0CFEC:  GOTO   D858
0CFF0:  MOVLB  5
0CFF2:  MOVLW  08
0CFF4:  SUBWF  03,W
0CFF6:  BNZ   D006
0CFF8:  MOVLW  E4
0CFFA:  SUBWF  00,W
0CFFC:  MOVLB  0
0CFFE:  BTFSC  FD8.2
0D000:  GOTO   D858
0D004:  MOVLB  5
0D006:  MOVLW  08
0D008:  SUBWF  03,W
0D00A:  BNZ   D01A
0D00C:  MOVLW  E5
0D00E:  SUBWF  00,W
0D010:  MOVLB  0
0D012:  BTFSC  FD8.2
0D014:  GOTO   D858
0D018:  MOVLB  5
0D01A:  MOVLW  08
0D01C:  SUBWF  03,W
0D01E:  BNZ   D02E
0D020:  MOVLW  E6
0D022:  SUBWF  00,W
0D024:  MOVLB  0
0D026:  BTFSC  FD8.2
0D028:  GOTO   D858
0D02C:  MOVLB  5
0D02E:  MOVLW  08
0D030:  SUBWF  03,W
0D032:  BNZ   D042
0D034:  MOVLW  E7
0D036:  SUBWF  00,W
0D038:  MOVLB  0
0D03A:  BTFSC  FD8.2
0D03C:  GOTO   D858
0D040:  MOVLB  5
0D042:  MOVLW  08
0D044:  SUBWF  03,W
0D046:  BNZ   D056
0D048:  MOVLW  E8
0D04A:  SUBWF  00,W
0D04C:  MOVLB  0
0D04E:  BTFSC  FD8.2
0D050:  GOTO   D858
0D054:  MOVLB  5
0D056:  MOVLW  08
0D058:  SUBWF  03,W
0D05A:  BNZ   D06A
0D05C:  MOVLW  E9
0D05E:  SUBWF  00,W
0D060:  MOVLB  0
0D062:  BTFSC  FD8.2
0D064:  GOTO   D858
0D068:  MOVLB  5
0D06A:  MOVLW  08
0D06C:  SUBWF  03,W
0D06E:  BNZ   D07E
0D070:  MOVLW  EA
0D072:  SUBWF  00,W
0D074:  MOVLB  0
0D076:  BTFSC  FD8.2
0D078:  GOTO   D858
0D07C:  MOVLB  5
0D07E:  MOVLW  08
0D080:  SUBWF  03,W
0D082:  BNZ   D092
0D084:  MOVLW  EB
0D086:  SUBWF  00,W
0D088:  MOVLB  0
0D08A:  BTFSC  FD8.2
0D08C:  GOTO   D858
0D090:  MOVLB  5
0D092:  MOVLW  08
0D094:  SUBWF  03,W
0D096:  BNZ   D0A6
0D098:  MOVLW  FC
0D09A:  SUBWF  00,W
0D09C:  MOVLB  0
0D09E:  BTFSC  FD8.2
0D0A0:  GOTO   D890
0D0A4:  MOVLB  5
0D0A6:  MOVLW  23
0D0A8:  SUBWF  03,W
0D0AA:  BNZ   D0BA
0D0AC:  MOVLW  28
0D0AE:  SUBWF  00,W
0D0B0:  MOVLB  0
0D0B2:  BTFSC  FD8.2
0D0B4:  GOTO   D8A4
0D0B8:  MOVLB  5
0D0BA:  MOVLW  23
0D0BC:  SUBWF  03,W
0D0BE:  BNZ   D0CE
0D0C0:  MOVLW  2D
0D0C2:  SUBWF  00,W
0D0C4:  MOVLB  0
0D0C6:  BTFSC  FD8.2
0D0C8:  GOTO   D8AC
0D0CC:  MOVLB  5
0D0CE:  GOTO   D918
.................... 	 	{
.................... 	 	case 1:
.................... 	 		{
.................... 	 		 addr = ee_ten_nomi;
0D0D2:  MOVLB  3
0D0D4:  CLRF   xEE
0D0D6:  MOVLW  11
0D0D8:  MOVWF  xED
.................... 	 		 ten_nomi = data1_int;
0D0DA:  MOVFF  3F0,4BE
0D0DE:  MOVFF  3EF,4BD
.................... 	 		 break;
0D0E2:  GOTO   D92A
0D0E6:  MOVLB  0
.................... 	 		}
.................... 	 	case 2:
.................... 	 		{
.................... 		 	#if (portatil == true)
.................... 			 	#if (se_com_flex == true)
.................... 					#if (versao_pci_st96 >= 6)
.................... 						time_out_troca_ponteira = 10;
.................... 					#endif
.................... 					recarrega_ponteira = true;
.................... 					addr = ee_tipo_ponteira;
.................... 					tipo_ponteira = data1;
.................... 					valor_tc = tabela_pt[tipo_ponteira];
.................... 					busca_mul_tc();
.................... 		 			goto salva_byte;
.................... 			 	#else
.................... 			 		addr = ee_valor_tc;
.................... 			 		valor_tc = data1_int;
.................... 		 		#endif
.................... 		 	#else
.................... 		 		addr = ee_valor_tc;
0D0E8:  MOVLB  3
0D0EA:  CLRF   xEE
0D0EC:  MOVLW  13
0D0EE:  MOVWF  xED
.................... 		 		valor_tc = data1_int;
0D0F0:  MOVFF  3F0,4C0
0D0F4:  MOVFF  3EF,4BF
.................... 				#if (tc_fixo == true)
.................... 					#if (st94 == false) || (st92 == false)
.................... 						busca_mul_tc();
0D0F8:  MOVLB  0
0D0FA:  CALL   7284
.................... 					#else
.................... 						calcula_mul_tc();
.................... 					#endif
.................... 				#endif
.................... 	 		#endif
.................... 	 		 break;
0D0FE:  MOVLB  3
0D100:  GOTO   D92A
0D104:  MOVLB  0
.................... 	 		}
.................... 	 	case 3:
.................... 	 		{
.................... 	 		 addr = ee_set_point;
0D106:  MOVLB  3
0D108:  CLRF   xEE
0D10A:  MOVLW  0A
0D10C:  MOVWF  xED
.................... 	 		 set_point = data1_int;
0D10E:  MOVFF  3EF,4CB
.................... 	 		 goto salva_byte;
0D112:  GOTO   D966
....................              break;
0D116:  GOTO   D92A
0D11A:  MOVLB  0
.................... 	 		}
.................... 	 	case 4:
.................... 	 		{
.................... 	 		 addr = ee_endereco;
0D11C:  MOVLB  3
0D11E:  CLRF   xEE
0D120:  MOVLW  26
0D122:  MOVWF  xED
.................... 	 		 endereco = data1_int;
0D124:  MOVFF  3EF,4CE
.................... 	 		 goto salva_byte;
0D128:  GOTO   D966
....................              break;
0D12C:  GOTO   D92A
0D130:  MOVLB  0
.................... 	 		}
.................... 	 	case 5:
.................... 	 		{
.................... 	 		 addr = ee_intervalo_reg;
0D132:  MOVLB  3
0D134:  CLRF   xEE
0D136:  MOVLW  27
0D138:  MOVWF  xED
.................... 	 		 intervalo_reg = data1_int;
0D13A:  MOVFF  3F0,4C6
0D13E:  MOVFF  3EF,4C5
.................... 	 		 break;
0D142:  GOTO   D92A
0D146:  MOVLB  0
.................... 	 		}
.................... 	 	case 6:
.................... 	 		{
.................... 	 		 addr = ee_intervalo_integra;
0D148:  MOVLB  3
0D14A:  CLRF   xEE
0D14C:  MOVLW  29
0D14E:  MOVWF  xED
.................... 	 		 intervalo_integra = data1_int;
0D150:  MOVFF  3EF,4CF
.................... 	 		 goto salva_byte;
0D154:  GOTO   D966
....................              break;
0D158:  GOTO   D92A
0D15C:  MOVLB  0
.................... 	 		}
.................... 	 	case 7:
.................... 	 		{
.................... 	 		 addr = ee_ala_fp_ind;
0D15E:  MOVLB  3
0D160:  CLRF   xEE
0D162:  MOVLW  1C
0D164:  MOVWF  xED
....................  	 		 ala_fp_ind = data1_int;
0D166:  MOVFF  3EF,4D0
.................... 	 		 goto salva_byte;
0D16A:  GOTO   D966
....................              break;
0D16E:  GOTO   D92A
0D172:  MOVLB  0
.................... 	 		}
.................... 	 	case 8:
.................... 	 		{
.................... 	 		 addr = ee_ala_fp_cap;
0D174:  MOVLB  3
0D176:  CLRF   xEE
0D178:  MOVLW  1D
0D17A:  MOVWF  xED
....................  	 		 ala_fp_cap = data1_int;
0D17C:  MOVFF  3EF,4D1
.................... 	 		 goto salva_byte;
0D180:  GOTO   D966
....................              break;
0D184:  GOTO   D92A
0D188:  MOVLB  0
.................... 	 		}
.................... 	 	case 9:
.................... 	 		{
.................... 	 		 addr = ee_ala_ten_a;
0D18A:  MOVLB  3
0D18C:  CLRF   xEE
0D18E:  MOVLW  1E
0D190:  MOVWF  xED
....................  	 		 ala_ten_a = data1_int;
0D192:  MOVFF  3EF,4D2
.................... 	 		 goto salva_byte;
0D196:  GOTO   D966
....................              break;
0D19A:  GOTO   D92A
0D19E:  MOVLB  0
.................... 	 		}
.................... 	 	case 10:
.................... 	 		{
.................... 	 		 addr = ee_ala_ten_b;
0D1A0:  MOVLB  3
0D1A2:  CLRF   xEE
0D1A4:  MOVLW  1F
0D1A6:  MOVWF  xED
....................  	 		 ala_ten_b = data1_int;
0D1A8:  MOVFF  3EF,4D3
.................... 	 		 goto salva_byte;
0D1AC:  GOTO   D966
....................              break;
0D1B0:  GOTO   D92A
0D1B4:  MOVLB  0
.................... 	 		}
.................... 	 	case 11:
.................... 	 		{
.................... 	 		 addr = ee_ala_sc;
0D1B6:  MOVLB  3
0D1B8:  CLRF   xEE
0D1BA:  MOVLW  20
0D1BC:  MOVWF  xED
....................  	 		 ala_sc = data1_int;
0D1BE:  MOVFF  3EF,4D4
.................... 	 		 goto salva_byte;
0D1C2:  GOTO   D966
....................              break;
0D1C6:  GOTO   D92A
0D1CA:  MOVLB  0
.................... 	 		}
.................... 	 	case 12:
.................... 	 		{
.................... 	 		 addr = ee_ala_chtt;
0D1CC:  MOVLB  3
0D1CE:  CLRF   xEE
0D1D0:  MOVLW  21
0D1D2:  MOVWF  xED
....................  	 		 ala_chtt = data1_int;
0D1D4:  MOVFF  3EF,4D5
.................... 	 		 goto salva_byte;
0D1D8:  GOTO   D966
....................              break;
0D1DC:  GOTO   D92A
0D1E0:  MOVLB  0
.................... 	 		}
.................... 		#if (com_regs == true)
.................... 	 		case 13:{
.................... 				#if (com_relogio == true)
.................... 	 		 		addr = ds_ptr_regs;
0D1E2:  MOVLB  3
0D1E4:  CLRF   xEE
0D1E6:  MOVLW  0A
0D1E8:  MOVWF  xED
.................... 					goto salva_word_nvr;
0D1EA:  GOTO   D9B2
....................                     break;
0D1EE:  GOTO   D92A
0D1F2:  MOVLB  0
.................... 				#else
.................... 	 		 		addr = ee_ptr_regs;
.................... 					break;
.................... 				#endif
.................... 	 		}
.................... 	 		case 14:{
.................... 				#if (com_relogio == true)
.................... 	 			 	addr = ds_ptr_ocor;
0D1F4:  MOVLB  3
0D1F6:  CLRF   xEE
0D1F8:  MOVLW  0E
0D1FA:  MOVWF  xED
.................... 					goto salva_byte_nvr;
0D1FC:  GOTO   D990
....................                     break;
0D200:  GOTO   D92A
0D204:  MOVLB  0
.................... 				#else
.................... 					addr = ee_ptr_rocor;
.................... 					break;
.................... 				#endif
.................... 	 		}
....................  			case 15:{
.................... 				#if (com_relogio == true)
.................... 	 			 	addr = ds_ptr_cht;
0D206:  MOVLB  3
0D208:  CLRF   xEE
0D20A:  MOVLW  10
0D20C:  MOVWF  xED
.................... 					goto salva_byte_nvr;
0D20E:  GOTO   D990
.................... 				#else
.................... 					addr = ee_ptr_cht;
.................... 				#endif
....................                     break;
0D212:  GOTO   D92A
0D216:  MOVLB  0
.................... 	 		}
.................... 	 		case 16:{
.................... 	 			addr = ee_forma_reg_cht;
0D218:  MOVLB  3
0D21A:  CLRF   xEE
0D21C:  MOVLW  2A
0D21E:  MOVWF  xED
....................  	 		 	forma_reg_cht = data1_int;
0D220:  MOVFF  3EF,4CD
.................... 	 	 		goto salva_byte;
0D224:  GOTO   D966
....................                 break;
0D228:  GOTO   D92A
0D22C:  MOVLB  0
.................... 	 		}
.................... 	 	#endif
....................  		case 17:
.................... 	 		{
.................... 	 		 addr = ee_valor_tp;
0D22E:  MOVLB  3
0D230:  CLRF   xEE
0D232:  MOVLW  2B
0D234:  MOVWF  xED
.................... 	 		 valor_tp = data1_int;
0D236:  MOVFF  3F0,4C2
0D23A:  MOVFF  3EF,4C1
.................... 	 		 break;
0D23E:  BRA    D92A
0D240:  MOVLB  0
.................... 	 		}
....................  		case 18:
.................... 	 		{
.................... 	 		 addr = ee_baud_rate;
0D242:  MOVLB  3
0D244:  CLRF   xEE
0D246:  MOVLW  2D
0D248:  MOVWF  xED
.................... 	 		 baud_rate = data1_int;
0D24A:  MOVFF  3F0,4C4
0D24E:  MOVFF  3EF,4C3
.................... 	 		 break;
0D252:  BRA    D92A
0D254:  MOVLB  0
.................... 	 		}
....................  		case 19:
.................... 	 		{
.................... 	 		 addr = ee_ala_chtc;
0D256:  MOVLB  3
0D258:  CLRF   xEE
0D25A:  MOVLW  22
0D25C:  MOVWF  xED
....................  	 		 ala_chtc = data1_int;
0D25E:  MOVFF  3EF,4D6
.................... 	 		 goto salva_byte;
0D262:  GOTO   D966
....................              break;
0D266:  BRA    D92A
0D268:  MOVLB  0
.................... 	 		}
.................... 		#if (com_regs == true)
.................... 	 		case 20:{
.................... 				#if (com_relogio == true)
.................... 	 				addr = ds_banco_escrita;
0D26A:  MOVLB  3
0D26C:  CLRF   xEE
0D26E:  MOVLW  14
0D270:  MOVWF  xED
.................... 		 		 	goto salva_byte_nvr;
0D272:  GOTO   D990
.................... 				#else
.................... 					addr = ee_banco_escrita;
.................... 			 		goto salva_byte;
.................... 				#endif
....................                     break;
0D276:  BRA    D92A
0D278:  MOVLB  0
.................... 	 		}
....................  			case 21:{
.................... 				#if (com_relogio == true)
.................... 	 			 	addr = ds_banco_leitura;
0D27A:  MOVLB  3
0D27C:  CLRF   xEE
0D27E:  MOVLW  13
0D280:  MOVWF  xED
.................... 	 				goto salva_byte_nvr;
0D282:  GOTO   D990
.................... 				#else
.................... 					addr = ee_banco_leitura;
.................... 			 		goto salva_byte;
.................... 				#endif
....................                     break;
0D286:  BRA    D92A
0D288:  MOVLB  0
.................... 			 	}
.................... 		#endif
.................... 	 	case 22:
.................... 	 		{
.................... 	 		 dia = data1;
0D28A:  MOVFF  3BE,3BF
.................... 	 		 goto salva_calend;
0D28E:  GOTO   D9DA
....................              break;
0D292:  MOVLB  3
0D294:  BRA    D92A
0D296:  MOVLB  0
.................... 	 		}
.................... 	 	case 23:
.................... 	 		{
.................... 	 		 mes = data1;
0D298:  MOVFF  3BE,3C0
.................... 	 		 goto salva_calend;
0D29C:  GOTO   D9DA
....................              break;
0D2A0:  MOVLB  3
0D2A2:  BRA    D92A
0D2A4:  MOVLB  0
.................... 	 		}
.................... 	 	case 24:
.................... 	 		{
.................... 	 		 ano = data1;
0D2A6:  MOVFF  3BE,3C1
.................... 	 		 goto salva_calend;
0D2AA:  GOTO   D9DA
....................              break;
0D2AE:  MOVLB  3
0D2B0:  BRA    D92A
0D2B2:  MOVLB  0
.................... 	 		}
.................... 	 	case 25:
.................... 	 		{
.................... 	 		 hora = data1;
0D2B4:  MOVFF  3BE,3C2
.................... 	 		 goto salva_calend;
0D2B8:  GOTO   D9DA
....................              break;
0D2BC:  MOVLB  3
0D2BE:  BRA    D92A
0D2C0:  MOVLB  0
.................... 	 		}
.................... 	 	case 26:
.................... 	 		{
.................... 	 		 minuto = data1;
0D2C2:  MOVFF  3BE,3C3
.................... 	 		 goto salva_calend;
0D2C6:  GOTO   D9DA
....................              break;
0D2CA:  MOVLB  3
0D2CC:  BRA    D92A
0D2CE:  MOVLB  0
.................... 	 		}
....................  		case 27:
.................... 	 		{
.................... 	 		 segundo = data1;
0D2D0:  MOVFF  3BE,3C4
.................... 	 		 goto salva_calend;
0D2D4:  GOTO   D9DA
....................              break;
0D2D8:  MOVLB  3
0D2DA:  BRA    D92A
0D2DC:  MOVLB  0
.................... 	 		}
.................... 	 	case 28:
.................... 	 		{
.................... 	 		 addr = ee_ala_subc;
0D2DE:  MOVLB  3
0D2E0:  CLRF   xEE
0D2E2:  MOVLW  3F
0D2E4:  MOVWF  xED
....................  	 		 ala_subc = data1_int;
0D2E6:  MOVFF  3EF,4D7
.................... 	 		 goto salva_byte;
0D2EA:  BRA    D966
....................              break;
0D2EC:  BRA    D92A
0D2EE:  MOVLB  0
.................... 		 	}
.................... 		#if (portatil == true)
.................... 			case 29:
.................... 				{
.................... 		 		 addr = ee_dia_liga;
.................... 		 		 dia_liga = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}		 	
.................... 			case 30:
.................... 				{
.................... 		 		 addr = ee_hora_liga;
.................... 		 		 hora_liga = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}		 	
.................... 			case 31:
.................... 				{
.................... 		 		 addr = ee_minuto_liga;
.................... 		 		 minuto_liga = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}		 	
.................... 			case 32:
.................... 				{
.................... 		 		 addr = ee_dia_desliga;
.................... 		 		 dia_desliga = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}		 	
.................... 			case 33:
.................... 				{
.................... 		 		 addr = ee_hora_desliga;
.................... 		 		 hora_desliga = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}		 	
.................... 			case 34:
.................... 				{
.................... 		 		 addr = ee_minuto_desliga;
.................... 		 		 minuto_desliga = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}
.................... 			case 35:
.................... 				{
.................... 		 		 addr = ee_prog_time;
.................... 		 		 prog_time = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}		 	
.................... 			case 36:
.................... 				{
.................... 		 		 addr = ee_fila_circular;
.................... 		 		 fila_circular = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}
.................... 		#endif
.................... 		case 37:
.................... 			{
.................... 	 		 addr = ee_hora_ponta;
0D2F0:  MOVLB  3
0D2F2:  CLRF   xEE
0D2F4:  MOVLW  3A
0D2F6:  MOVWF  xED
.................... 	 		 hora_ponta = data1;
0D2F8:  MOVFF  3BE,515
.................... 	 		 goto salva_byte;
0D2FC:  BRA    D966
....................              break;
0D2FE:  BRA    D92A
0D300:  MOVLB  0
.................... 			}
.................... 		case 38:
.................... 			{
.................... 			 addr = ee_minuto_ponta;
0D302:  MOVLB  3
0D304:  CLRF   xEE
0D306:  MOVLW  3B
0D308:  MOVWF  xED
.................... 	 		 minuto_ponta = data1;
0D30A:  MOVFF  3BE,516
.................... 	 		 goto salva_byte;
0D30E:  BRA    D966
....................              break;
0D310:  BRA    D92A
0D312:  MOVLB  0
.................... 			}
.................... 		case 39:
.................... 			{
.................... 	 		 addr = ee_hora_final_ponta;
0D314:  MOVLB  3
0D316:  CLRF   xEE
0D318:  MOVLW  3C
0D31A:  MOVWF  xED
.................... 	 		 hora_final_ponta = data1;
0D31C:  MOVFF  3BE,517
.................... 	 		 goto salva_byte;
0D320:  BRA    D966
....................              break;
0D322:  BRA    D92A
0D324:  MOVLB  0
.................... 			}
.................... 		case 40:
.................... 			{
.................... 	 		 addr = ee_minuto_final_ponta;
0D326:  MOVLB  3
0D328:  CLRF   xEE
0D32A:  MOVLW  3D
0D32C:  MOVWF  xED
.................... 	 		 minuto_final_ponta = data1;
0D32E:  MOVFF  3BE,518
.................... 	 		 goto salva_byte;
0D332:  BRA    D966
....................              break;
0D334:  BRA    D92A
0D336:  MOVLB  0
.................... 			}
.................... 		case 41:
.................... 			{
.................... 	 		 addr = ee_tipo_ligacao;
0D338:  MOVLB  3
0D33A:  CLRF   xEE
0D33C:  MOVLW  3E
0D33E:  MOVWF  xED
.................... 	 		 tipo_ligacao = data1;
0D340:  MOVFF  3BE,4C7
.................... 	 		 goto salva_byte;
0D344:  BRA    D966
....................              break;
0D346:  BRA    D92A
0D348:  MOVLB  0
.................... 			}
.................... 	 	case 42:
.................... 	 		{
.................... 				break;
0D34A:  MOVLB  3
0D34C:  BRA    D92A
0D34E:  MOVLB  0
.................... 		 	}
.................... 	 	case 43:
.................... 	 		{
.................... 				break;
0D350:  MOVLB  3
0D352:  BRA    D92A
0D354:  MOVLB  0
.................... 		 	}
.................... 		case 44:
.................... 	 		{
.................... 			goto salva_prog_flash;
0D356:  BRA    D95A
....................             break;
0D358:  MOVLB  3
0D35A:  BRA    D92A
0D35C:  MOVLB  0
.................... 		 	}
.................... 		case 45:
.................... 	 		{
.................... 			if (modo_funca != data1)
0D35E:  MOVLB  3
0D360:  MOVF   xBE,W
0D362:  MOVLB  4
0D364:  SUBWF  xA7,W
0D366:  BZ    D368
.................... 				{
.................... 				#if (funcao_505 == true)
.................... 					inic_tensoes_505();
.................... 				#endif
.................... 				}
.................... 	 		 addr = ee_modo_funca;
0D368:  MOVLB  3
0D36A:  CLRF   xEE
0D36C:  MOVLW  40
0D36E:  MOVWF  xED
.................... 	 		 modo_funca = data1;
0D370:  MOVFF  3BE,4A7
.................... 	 		 goto salva_byte;
0D374:  BRA    D966
....................              break;
0D376:  BRA    D92A
0D378:  MOVLB  0
.................... 		 	}
.................... 		case 46:
.................... 			{
.................... 			goto salva_prog_flash;
0D37A:  BRA    D95A
....................             break;
0D37C:  MOVLB  3
0D37E:  BRA    D92A
0D380:  MOVLB  0
.................... 			}
.................... 		case 47:
.................... 			{
.................... 			#if (com_menu == true)
.................... 	 		 	addr = ee_idioma;
0D382:  MOVLB  3
0D384:  CLRF   xEE
0D386:  MOVLW  41
0D388:  MOVWF  xED
.................... 		 		 idioma = data1;
0D38A:  MOVFF  3BE,2D
.................... 	 			 goto salva_byte;
0D38E:  BRA    D966
.................... 			#else
.................... 				goto salva_prog_flash;
.................... 			#endif
....................                 break;
0D390:  BRA    D92A
0D392:  MOVLB  0
.................... 			}
.................... 		case 48:
.................... 			{
.................... 	 		 addr = ee_ala_skw;
0D394:  MOVLB  3
0D396:  CLRF   xEE
0D398:  MOVLW  42
0D39A:  MOVWF  xED
.................... 	 		 ala_skw = data1;
0D39C:  MOVFF  3BE,4D8
.................... 	 		 goto salva_byte;
0D3A0:  BRA    D966
....................              break;
0D3A2:  BRA    D92A
0D3A4:  MOVLB  0
.................... 			}
.................... 		#if (com_alarme_demanda == true)
.................... 			case 49:
.................... 				{
.................... 				addr = ee_ala_demanda_ativa;
0D3A6:  MOVLB  3
0D3A8:  CLRF   xEE
0D3AA:  MOVLW  49
0D3AC:  MOVWF  xED
.................... 			 	ala_demanda_ativa = data1_int;
0D3AE:  MOVFF  3EF,4DA
.................... 			 	#if (st8500c == true)
.................... 		 		 	goto salva_byte;
0D3B2:  BRA    D966
.................... //			 	#else
.................... 			 	#endif
.................... 				break;
0D3B4:  BRA    D92A
0D3B6:  MOVLB  0
.................... 			 	}
.................... 		#endif
.................... /*		#if (st5x==true)		
.................... 			#if (com_saida_pulsos == true)
.................... 				case 55:
.................... 					{
.................... 					addr = ee_const_saida_kw;
.................... 					const_saida_kw = data1_int ;
.................... 					break;
.................... 					}
.................... 				case 56:
.................... 					{
.................... 					addr = ee_const_saida_kvar;
.................... 					const_saida_kvar = data1_int ;
.................... 					break;
.................... 					}
.................... 				case 57:
.................... 					{
.................... 					addr = ee_qual_variavel_pulsa;
.................... 					qual_variavel_pulsa = data1_int ;
.................... 		 		 	goto salva_byte;
....................                     break;
.................... 					}
.................... 			#endif					
.................... 		#endif												*/
.................... 
.................... 			
.................... //		#if (controlador == true)
.................... 			case 98:			
.................... 				{
.................... 		 		 addr = 0;
0D3B8:  MOVLB  3
0D3BA:  CLRF   xEE
0D3BC:  CLRF   xED
.................... 				aux_tempo_repouso[data1] = 0;
0D3BE:  CLRF   03
0D3C0:  MOVF   xBE,W
0D3C2:  ADDLW  F7
0D3C4:  MOVWF  FE9
0D3C6:  MOVLW  00
0D3C8:  ADDWFC 03,W
0D3CA:  MOVWF  FEA
0D3CC:  CLRF   FEF
.................... 				#if (st8500c == true)
.................... 					ligar_carga(data1);
0D3CE:  MOVFF  3BE,A65
0D3D2:  MOVLB  0
0D3D4:  CALL   A884
.................... 				#else
.................... 					ligar_banco(data1);
.................... 				#endif
.................... 				break;
0D3D8:  MOVLB  3
0D3DA:  BRA    D92A
0D3DC:  MOVLB  0
.................... 				}
.................... 			case 99:			
.................... 				{
.................... 		 		 addr = 0;
0D3DE:  MOVLB  3
0D3E0:  CLRF   xEE
0D3E2:  CLRF   xED
.................... 				#if (st8500c == true)
.................... 					desligar_carga(data1);
0D3E4:  MOVFF  3BE,A65
0D3E8:  MOVLB  0
0D3EA:  CALL   1CB6
.................... 				#else
.................... 					desligar_banco(data1);
.................... 				#endif
.................... 				break;
0D3EE:  MOVLB  3
0D3F0:  BRA    D92A
0D3F2:  MOVLB  0
.................... 				}
.................... //		#endif
.................... 	 	case 2000:
.................... 	 		{
.................... 			#if (portatil == 1)
.................... 				#if (se_com_flex == true)
.................... 					aux_w1 = ee_off_fp_9001g1;
.................... 					aux_w1 += tipo_ponteira;
.................... 		 			addr = aux_w1;
.................... 		 			off_cor_r = data1_int;
.................... 					off_set_fp[aux_b4] = data1_int;
.................... 					recarrega_ponteira = true;
.................... 				#else
.................... 					aux_w1 = ee_off_fp_20;
.................... 					for (aux_b4 = 0; aux_b4 < NRO_POSI_TC; aux_b4++)
.................... 						{
.................... 						if (valor_tc == tabela_tc[aux_b4])
.................... 							{
.................... 							break;
.................... 							}
.................... 						aux_w1++;
.................... 						}
.................... 		 			addr = aux_w1;
.................... 		 			off_cor_r = data1_int;
.................... 					off_set_fp[aux_b4] = data1_int;
.................... 				#endif
.................... 	 			goto salva_byte;
.................... 			#else
.................... 				#if (ade7754 == true)
.................... 		 			addr = ee_fase_r;
.................... 		 			fase_r = data1_int;
.................... 			 		goto salva_byte;
.................... 				#else
.................... 		 			addr = ee_off_cor_r;
0D3F4:  MOVLB  3
0D3F6:  CLRF   xEE
0D3F8:  MOVLW  06
0D3FA:  MOVWF  xED
.................... 			 		off_cor_r = data1_int;
0D3FC:  MOVFF  3EF,4B7
.................... 			 		goto salva_byte;
0D400:  BRA    D966
.................... 				#endif
....................                     break;
0D402:  BRA    D92A
0D404:  MOVLB  0
.................... 			#endif
.................... 	 		}
.................... 	 	case 2001:
.................... 	 		{
.................... 			#if (ade7754 == true)
.................... 	 			addr = ee_fase_s;
.................... 		 		fase_s = data1_int;
.................... 	 			goto salva_byte;
.................... 			#else
.................... 	 			addr = ee_off_cor_s;
0D406:  MOVLB  3
0D408:  CLRF   xEE
0D40A:  MOVLW  07
0D40C:  MOVWF  xED
.................... 		 		off_cor_s = data1_int;
0D40E:  MOVFF  3EF,4B8
.................... 	 			goto salva_byte;
0D412:  BRA    D966
.................... 			#endif
....................                 break;
0D414:  BRA    D92A
0D416:  MOVLB  0
.................... 	 		}
.................... 	 	case 2002:
.................... 	 		{
.................... 			#if (ade7754 == true)
.................... 	 			addr = ee_fase_t;
.................... 		 		fase_t = data1_int;
.................... 	 			goto salva_byte;
.................... 			#else
.................... 				#if (portatil == false)
.................... 		 			addr = ee_defasagem;
0D418:  MOVLB  3
0D41A:  CLRF   xEE
0D41C:  MOVLW  18
0D41E:  MOVWF  xED
.................... 			 		defasagem = data1_int;
0D420:  MOVFF  3EF,4BB
.................... 		 			goto salva_byte;
0D424:  BRA    D966
.................... 		 		#endif
.................... 			#endif
.................... 			break;
0D426:  BRA    D92A
0D428:  MOVLB  0
.................... 	 		}
.................... 	 	case 2003:
.................... 	 		{
.................... 	 		addr = ee_os_ten_r1;
0D42A:  MOVLB  3
0D42C:  CLRF   xEE
0D42E:  MOVLW  0E
0D430:  MOVWF  xED
.................... 	 		os_ten_r1 = data1_int;
0D432:  MOVFF  3EF,4AB
....................  			goto salva_byte;
0D436:  BRA    D966
....................             break;
0D438:  BRA    D92A
0D43A:  MOVLB  0
.................... 	 		}
.................... 	 	case 2006:
.................... 	 		{
.................... 	 		addr = ee_os_ten_r2;
0D43C:  MOVLB  3
0D43E:  CLRF   xEE
0D440:  MOVLW  15
0D442:  MOVWF  xED
.................... 	 		os_ten_r2 = data1_int;
0D444:  MOVFF  3EF,4AE
....................  			goto salva_byte;
0D448:  BRA    D966
....................             break;
0D44A:  BRA    D92A
0D44C:  MOVLB  0
.................... 	 		}
.................... 	 	#if (monofasico == false)
.................... 		 	case 2004:
.................... 	 			{
.................... 	 			addr = ee_os_ten_s1;
0D44E:  MOVLB  3
0D450:  CLRF   xEE
0D452:  MOVLW  0F
0D454:  MOVWF  xED
.................... 		 		os_ten_s1 = data1_int;
0D456:  MOVFF  3EF,4AC
....................  				goto salva_byte;
0D45A:  BRA    D966
....................                 break;
0D45C:  BRA    D92A
0D45E:  MOVLB  0
.................... 	 			}
.................... 		 	case 2005:
.................... 	 			{
.................... 	 			addr = ee_os_ten_t1;
0D460:  MOVLB  3
0D462:  CLRF   xEE
0D464:  MOVLW  10
0D466:  MOVWF  xED
.................... 		 		os_ten_t1 = data1_int;
0D468:  MOVFF  3EF,4AD
....................  				goto salva_byte;
0D46C:  BRA    D966
....................                 break;
0D46E:  BRA    D92A
0D470:  MOVLB  0
.................... 	 			}
.................... 	 		case 2007:
.................... 	 			{
.................... 	 			addr = ee_os_ten_s2;
0D472:  MOVLB  3
0D474:  CLRF   xEE
0D476:  MOVLW  16
0D478:  MOVWF  xED
.................... 		 		os_ten_s2 = data1_int;
0D47A:  MOVFF  3EF,4AF
....................  				goto salva_byte;
0D47E:  BRA    D966
....................                 break;
0D480:  BRA    D92A
0D482:  MOVLB  0
.................... 	 			}
.................... 	 		case 2008:
.................... 	 			{
.................... 	 			addr = ee_os_ten_t2;
0D484:  MOVLB  3
0D486:  CLRF   xEE
0D488:  MOVLW  17
0D48A:  MOVWF  xED
.................... 		 		os_ten_t2 = data1_int;
0D48C:  MOVFF  3EF,4B0
....................  				goto salva_byte;
0D490:  BRA    D966
....................                 break;
0D492:  BRA    D92A
0D494:  MOVLB  0
.................... 	 			}
.................... 	 	#else
.................... 		 	case 2004:
.................... 	 		case 2005:
.................... 	 		case 2007:
.................... 	 		case 2008:
.................... 	 			{
.................... 	 			addr = 0;
....................  				goto salva_byte;
....................                 break;
.................... 	 			}
.................... 	 	#endif
.................... 		#if (portatil == true)
.................... 			#if (se_com_flex == true)
.................... 				case 2009:
.................... 					{
.................... 					aux_w1 = ee_os_cor_r_9001g1;
.................... 					addr = aux_w1 + (tipo_ponteira * 3);
.................... 					data_modbus = data1_int;
.................... 					recarrega_ponteira = true;
.................... 		 			goto salva_byte;
....................                     break;
.................... 					}
.................... 				case 2010:
.................... 					{
.................... 					aux_w1 = ee_os_cor_s_9001g1;
.................... 					addr = aux_w1 + (tipo_ponteira * 3);
.................... 					data_modbus = data1_int;
.................... 					recarrega_ponteira = true;
.................... 		 			goto salva_byte;
....................                     break;
.................... 					}
.................... 				case 2011:
.................... 					{
.................... 					aux_w1 = ee_os_cor_t_9001g1;
.................... 					addr = aux_w1 + (tipo_ponteira * 3);
.................... 					data_modbus = data1_int;
.................... 					recarrega_ponteira = true;
.................... 		 			goto salva_byte;
....................                     break;
.................... 					}
.................... 			#else
.................... 				case 2009:
.................... 					{
.................... 					#if (se_com_flex == true)
.................... 						#error colocar tratamento por ponteira
.................... 					#else
.................... 						aux_w1 = ee_os_cor_r_20;
.................... 						for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 							{
.................... 							if (valor_tc == tabela_tc[aux_b1])
.................... 								{
.................... 								addr = aux_w1;
.................... 								os_cor_pt_r[aux_b1] = data1;
.................... 								write_byte(aux_w1, os_cor_pt_r[aux_b1]);
.................... 								break;
.................... 								}
.................... 							aux_w1 += 3;
.................... 							}
.................... 						data_modbus = data1_int;
.................... 						goto salva_prog_flash_10;
.................... 					#endif
....................                         break;
.................... 					}
.................... 				case 2010:
.................... 					{
.................... 					#if (se_com_flex == true)
.................... 						#error colocar tratamento por ponteira
.................... 					#else
.................... 						aux_w1 = ee_os_cor_s_20;
.................... 						for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 							{
.................... 							if (valor_tc == tabela_tc[aux_b1])
.................... 								{
.................... 								addr = aux_w1;
.................... 								os_cor_pt_s[aux_b1] = data1;
.................... 								write_byte(aux_w1, os_cor_pt_s[aux_b1]);
.................... 								break;
.................... 								}
.................... 							aux_w1 += 3;
.................... 							}
.................... 						data_modbus = data1_int;
.................... 						goto salva_prog_flash_10;
.................... 					#endif
....................                         break;
.................... 					}
.................... 				case 2011:
.................... 					{
.................... 					#if (se_com_flex == true)
.................... 						#error colocar tratamento por ponteira
.................... 					#else
.................... 						aux_w1 = ee_os_cor_t_20;
.................... 						for (aux_b1=0; aux_b1 < NRO_POSI_TC; aux_b1++)
.................... 							{
.................... 							if (valor_tc == tabela_tc[aux_b1])
.................... 								{
.................... 								addr = aux_w1;
.................... 								os_cor_pt_t[aux_b1] = data1;
.................... 								write_byte(aux_w1, os_cor_pt_t[aux_b1]);
.................... 								break;
.................... 								}
.................... 							aux_w1 += 3;
.................... 							}
.................... 						data_modbus = data1_int;
.................... 						goto salva_prog_flash_10;
.................... 					#endif
....................                         break;
.................... 					}
.................... 			#endif
.................... 		#else
.................... 		 	case 2009:
.................... 		 		{
.................... 		 		addr = ee_os_cor_r;
0D496:  MOVLB  3
0D498:  CLRF   xEE
0D49A:  MOVLW  0B
0D49C:  MOVWF  xED
.................... 	 			os_cor_r = data1_int;
0D49E:  MOVFF  3EF,4B1
.................... 	 			goto salva_byte;
0D4A2:  BRA    D966
....................                 break;
0D4A4:  BRA    D92A
0D4A6:  MOVLB  0
.................... 		 		}
.................... 		 	case 2010:
.................... 		 		{
.................... 		 		addr = ee_os_cor_s;
0D4A8:  MOVLB  3
0D4AA:  CLRF   xEE
0D4AC:  MOVLW  0C
0D4AE:  MOVWF  xED
.................... 	 			os_cor_s = data1_int;
0D4B0:  MOVFF  3EF,4B2
.................... 	 			goto salva_byte;
0D4B4:  BRA    D966
....................                 break;
0D4B6:  BRA    D92A
0D4B8:  MOVLB  0
.................... 		 		}
.................... 		 	case 2011:
.................... 		 		{
.................... 		 		addr = ee_os_cor_t;
0D4BA:  MOVLB  3
0D4BC:  CLRF   xEE
0D4BE:  MOVLW  0D
0D4C0:  MOVWF  xED
.................... 	 			os_cor_t = data1_int;
0D4C2:  MOVFF  3EF,4B3
.................... 	 			goto salva_byte;
0D4C6:  BRA    D966
....................                 break;
0D4C8:  BRA    D92A
0D4CA:  MOVLB  0
.................... 		 		}
.................... 		#endif
.................... 		#if (portatil == true)
.................... 			#if (se_com_flex == true)
.................... 			#else
.................... 				// 20
.................... 			 	case 2012:
.................... 			 		{
.................... 			 		addr = ee_os_cor_r_20;
.................... 			 		os_cor_pt_r[0] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	case 2013:
.................... 			 		{
.................... 			 		addr = ee_os_cor_s_20;
.................... 			 		os_cor_pt_s[0] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	case 2014:
.................... 			 		{
.................... 			 		addr = ee_os_cor_t_20;
.................... 			 		os_cor_pt_t[0] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 				// 200
.................... 			 	case 2015:
.................... 			 		{
.................... 			 		addr = ee_os_cor_r_200;
.................... 			 		os_cor_pt_r[1] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	case 2016:
.................... 			 		{
.................... 			 		addr = ee_os_cor_s_200;
.................... 			 		os_cor_pt_s[1] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	case 2017:
.................... 			 		{
.................... 			 		addr = ee_os_cor_t_200;
.................... 			 		os_cor_pt_t[1] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 		
.................... 				// 300
.................... 			 	case 2018:
.................... 			 		{
.................... 			 		addr = ee_os_cor_r_300;
.................... 			 		os_cor_pt_r[2] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	case 2019:
.................... 			 		{
.................... 			 		addr = ee_os_cor_s_300;
.................... 			 		os_cor_pt_s[2] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	case 2020:
.................... 			 		{
.................... 			 		addr = ee_os_cor_t_300;
.................... 			 		os_cor_pt_t[2] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 				// 600
.................... 				#if (viercon == true)
.................... 				#else
.................... 				 	case 2021:
.................... 				 		{
.................... 				 		addr = ee_os_cor_r_600;
.................... 				 		os_cor_pt_r[3] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 	case 2022:
.................... 				 		{
.................... 				 		addr = ee_os_cor_s_600;
.................... 				 		os_cor_pt_s[3] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 	case 2023:
.................... 				 		{
.................... 				 		addr = ee_os_cor_t_600;
.................... 				 		os_cor_pt_t[3] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 					// 1000
.................... 				 	case 2024:
.................... 				 		{
.................... 				 		addr = ee_os_cor_r_1000;
.................... 				 		os_cor_pt_r[4] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 	case 2025:
.................... 				 		{
.................... 				 		addr = ee_os_cor_s_1000;
.................... 				 		os_cor_pt_s[4] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 	case 2026:
.................... 				 		{
.................... 				 		addr = ee_os_cor_t_1000;
.................... 				 		os_cor_pt_t[4] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 					// 1500
.................... 				 	case 2027:
.................... 				 		{
.................... 				 		addr = ee_os_cor_r_1500;
.................... 				 		os_cor_pt_r[5] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 	case 2028:
.................... 				 		{
.................... 				 		addr = ee_os_cor_s_1500;
.................... 				 		os_cor_pt_s[5] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 	case 2029:
.................... 				 		{
.................... 				 		addr = ee_os_cor_t_1500;
.................... 				 		os_cor_pt_t[5] = data1_int;
.................... 			 			goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 #endif
.................... 				#if (ponteira_kyoritsu == true)
.................... 				#else
.................... 					#if (viercon == true)
.................... 					#else
.................... 						// 2000
.................... 					 	case 2030:
.................... 					 		{
.................... 					 		addr = ee_os_cor_r_2000;
.................... 					 		os_cor_pt_r[6] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 					 	case 2031:
.................... 					 		{
.................... 					 		addr = ee_os_cor_s_2000;
.................... 					 		os_cor_pt_s[6] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 					 	case 2032:
.................... 					 		{
.................... 					 		addr = ee_os_cor_t_2000;
.................... 					 		os_cor_pt_t[6] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 						// 3000
.................... 					 	case 2033:
.................... 					 		{
.................... 					 		addr = ee_os_cor_r_3000;
.................... 					 		os_cor_pt_r[7] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 					 	case 2034:
.................... 					 		{
.................... 					 		addr = ee_os_cor_s_3000;
.................... 					 		os_cor_pt_s[7] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 					 	case 2035:
.................... 					 		{
.................... 					 		addr = ee_os_cor_t_3000;
.................... 					 		os_cor_pt_t[7] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 						// 6000
.................... 					 	case 2036:
.................... 					 		{
.................... 					 		addr = ee_os_cor_r_6000;
.................... 					 		os_cor_pt_r[8] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 					 	case 2037:
.................... 					 		{
.................... 					 		addr = ee_os_cor_s_6000;
.................... 					 		os_cor_pt_s[8] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 					 	case 2038:
.................... 					 		{
.................... 					 		addr = ee_os_cor_t_6000;
.................... 					 		os_cor_pt_t[8] = data1_int;
.................... 				 			goto salva_byte;
....................                             break;
.................... 					 		}
.................... 					 #endif
.................... 				#endif
.................... 			 	case 2039:
.................... 			 		{
.................... 			 		addr = ee_off_fp_20;
.................... 			 		off_set_fp[0] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	case 2040:
.................... 			 		{
.................... 			 		addr = ee_off_fp_200;
.................... 			 		off_set_fp[1] = data1_int;
.................... 		 			goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	case 2041:
.................... 			 		{
.................... 			 		addr = ee_off_fp_300;
.................... 			 		off_set_fp[2] = data1_int;
.................... 			 		goto salva_byte;
....................                     break;
.................... 			 		}
.................... 			 	#if (viercon == true)
.................... 			 	#else
.................... 				 	case 2042:
.................... 				 		{
.................... 				 		addr = ee_off_fp_600;
.................... 				 		off_set_fp[3] = data1_int;
.................... 				 		goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 	case 2043:
.................... 				 		{
.................... 				 		addr = ee_off_fp_1000;
.................... 				 		off_set_fp[4] = data1_int;
.................... 				 		goto salva_byte;
....................                         break;
.................... 				 		}
.................... 				 	case 2044:
.................... 				 		{
.................... 				 		addr = ee_off_fp_1500;
.................... 				 		off_set_fp[5] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 #endif
.................... 				#if (ponteira_kyoritsu == true)
.................... 				#else
.................... 					#if (viercon == true)
.................... 					#else
.................... 					 	case 2045:
.................... 					 		{
.................... 					 		addr = ee_off_fp_2000;
.................... 					 		off_set_fp[6] = data1_int;
.................... 					 		goto salva_byte;
.................... 					 		}
.................... 					 	case 2046:
.................... 					 		{
.................... 					 		addr = ee_off_fp_3000;
.................... 					 		off_set_fp[7] = data1_int;
.................... 					 		goto salva_byte;
.................... 					 		}
.................... 					 	case 2047:
.................... 					 		{
.................... 					 		addr = ee_off_fp_6000;
.................... 					 		off_set_fp[8] = data1_int;
.................... 					 		goto salva_byte;
.................... 					 		}
.................... 					 #endif
.................... 				 #endif
.................... 			 #endif
.................... 		#endif
.................... 
.................... 	 	case 2050:
.................... 	 		{
.................... 			#if (portatil == true)
.................... 				#if (se_com_flex == true)
.................... 					addr = ee_os_pot_r_9001g1;
.................... 			 		addr += (tipo_ponteira * 3);	
.................... 			 		os_pot_r = data1_int;
.................... 					os_pot_pt_r[tipo_ponteira] = data1_int;
.................... 					recarrega_ponteira = true;
.................... 				#else
.................... 					aux_w1 = ee_os_pot_r_20;
.................... 					for (aux_b4=0; aux_b4 < NRO_POSI_TC; aux_b4++)
.................... 						{
.................... 						if (valor_tc == tabela_tc[aux_b4])
.................... 							{
.................... 							break;
.................... 							}
.................... 						aux_w1 += 3;
.................... 						}
.................... 			 		addr = aux_w1;
.................... 			 		os_pot_r = data1_int;
.................... 					os_pot_pt_r[aux_b4] = data1_int;
.................... 				#endif
.................... 			#else
.................... 		 		addr = ee_os_pot_r;
0D4CC:  MOVLB  3
0D4CE:  CLRF   xEE
0D4D0:  MOVLW  46
0D4D2:  MOVWF  xED
.................... 		 		os_pot_r = data1_int;
0D4D4:  MOVFF  3EF,4B4
.................... 			#endif
.................... 	 		goto salva_byte;
0D4D8:  BRA    D966
....................             break;
0D4DA:  BRA    D92A
0D4DC:  MOVLB  0
.................... 	 		}
.................... 	 	case 2051:
.................... 	 		{
.................... 			#if (portatil == true)
.................... 				#if (se_com_flex == true)
.................... 					addr = ee_os_pot_s_9001g1;
.................... 			 		addr += (tipo_ponteira * 3);	
.................... 			 		os_pot_s = data1_int;
.................... 					os_pot_pt_s[tipo_ponteira] = data1_int;
.................... 					recarrega_ponteira = true;
.................... 				#else
.................... 					aux_w1 = ee_os_pot_s_20;
.................... 					for (aux_b4=0; aux_b4 < NRO_POSI_TC; aux_b4++)
.................... 						{
.................... 						if (valor_tc == tabela_tc[aux_b4])
.................... 							{
.................... 							break;
.................... 							}
.................... 						aux_w1 += 3;
.................... 						}
.................... 			 		addr = aux_w1;
.................... 			 		os_pot_s = data1_int;
.................... 					os_pot_pt_s[aux_b4] = data1_int;
.................... 				#endif
.................... 			#else
.................... 		 		addr = ee_os_pot_s;
0D4DE:  MOVLB  3
0D4E0:  CLRF   xEE
0D4E2:  MOVLW  47
0D4E4:  MOVWF  xED
.................... 		 		os_pot_s = data1_int;
0D4E6:  MOVFF  3EF,4B5
.................... 			#endif
.................... 	 		goto salva_byte;
0D4EA:  BRA    D966
....................             break;
0D4EC:  BRA    D92A
0D4EE:  MOVLB  0
.................... 	 		}
.................... 	 	case 2052:
.................... 	 		{
.................... 			#if (portatil == true)
.................... 				#if (se_com_flex == true)
.................... 					addr = ee_os_pot_t_9001g1;
.................... 			 		addr += (tipo_ponteira * 3);	
.................... 			 		os_pot_t = data1_int;
.................... 					os_pot_pt_t[tipo_ponteira] = data1_int;
.................... 					recarrega_ponteira = true;
.................... 				#else
.................... 					aux_w1 = ee_os_pot_t_20;
.................... 					for (aux_b4=0; aux_b4 < NRO_POSI_TC; aux_b4++)
.................... 						{
.................... 						if (valor_tc == tabela_tc[aux_b4])
.................... 							{
.................... 							break;
.................... 							}
.................... 						aux_w1 += 3;
.................... 						}
.................... 			 		addr = aux_w1;
.................... 			 		os_pot_t = data1_int;
.................... 					os_pot_pt_t[aux_b4] = data1_int;
.................... 				#endif
.................... 			#else
.................... 		 		addr = ee_os_pot_t;
0D4F0:  MOVLB  3
0D4F2:  CLRF   xEE
0D4F4:  MOVLW  48
0D4F6:  MOVWF  xED
.................... 		 		os_pot_t = data1_int;
0D4F8:  MOVFF  3EF,4B6
.................... 			#endif
.................... 	 		goto salva_byte;
0D4FC:  BRA    D966
....................             break;
0D4FE:  BRA    D92A
0D500:  MOVLB  0
.................... 	 		}
.................... 
.................... 
.................... 		#if (portatil == true)
.................... 			#if (se_com_flex == true)
.................... 				case 2053:
.................... 				case 2054:
.................... 				case 2055:
.................... 				case 2056:
.................... 				case 2057:
.................... 				case 2058:
.................... 				case 2059:
.................... 				case 2060:
.................... 				case 2061:
.................... 				case 2062:
.................... 				case 2063:
.................... 				case 2064:
.................... 				case 2065:
.................... 				case 2066:
.................... 				case 2067:
.................... 				case 2068:
.................... 				case 2069:
.................... 				case 2070:
.................... 				case 2071:
.................... 				case 2072:
.................... 				case 2073:
.................... 				case 2074:
.................... 				case 2075:
.................... 				case 2076:
.................... 				case 2077:
.................... 				case 2078:
.................... 				case 2079:
.................... 				case 2080:
.................... 				case 2081:
.................... 				case 2082:
.................... 				case 2083:
.................... 				case 2084:
.................... 				case 2085:
.................... 				case 2086:
.................... 				case 2087:
.................... 				case 2088:
.................... 				case 2089:
.................... 				case 2090:
.................... 				case 2091:
.................... 				case 2092:
.................... 				case 2093:
.................... 				case 2094:
.................... 				case 2095:
.................... 				case 2096:
.................... 				case 2097:
.................... 				case 2098:
.................... 				case 2099:
.................... 				case 2100:
.................... 				case 2101:
.................... 				case 2102:
.................... 				case 2103:
.................... 				case 2104:
.................... 				case 2105:
.................... 				case 2106:
.................... 					{
.................... 					break;
.................... 					}
.................... 			#else
.................... 				// 20
.................... 			 	case 2053:
.................... 			 		{
.................... 			 		addr = ee_os_pot_r_20;
.................... 			 		os_pot_pt_r[0] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 			 	case 2054:
.................... 			 		{
.................... 			 		addr = ee_os_pot_s_20;
.................... 			 		os_pot_pt_s[0] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 			 	case 2055:
.................... 			 		{
.................... 			 		addr = ee_os_pot_t_20;
.................... 			 		os_pot_pt_t[0] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 				// 200
.................... 			 	case 2056:
.................... 			 		{
.................... 			 		addr = ee_os_pot_r_200;
.................... 			 		os_pot_pt_r[1] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 			 	case 2057:
.................... 			 		{
.................... 			 		addr = ee_os_pot_s_200;
.................... 			 		os_pot_pt_s[1] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 			 	case 2058:
.................... 			 		{
.................... 			 		addr = ee_os_pot_t_200;
.................... 			 		os_pot_pt_t[1] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 				// 300
.................... 			 	case 2059:
.................... 			 		{
.................... 			 		addr = ee_os_pot_r_300;
.................... 			 		os_pot_pt_r[2] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 			 	case 2060:
.................... 			 		{
.................... 			 		addr = ee_os_pot_s_300;
.................... 			 		os_pot_pt_s[2] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 			 	case 2061:
.................... 			 		{
.................... 			 		addr = ee_os_pot_t_300;
.................... 			 		os_pot_pt_t[2] = data1_int;
.................... 			 		goto salva_byte;
.................... 			 		}
.................... 				// 600
.................... 				#if (viercon == true)
.................... 				#else
.................... 				 	case 2062:
.................... 				 		{
.................... 				 		addr = ee_os_pot_r_600;
.................... 				 		os_pot_pt_r[3] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2063:
.................... 				 		{
.................... 				 		addr = ee_os_pot_s_600;
.................... 				 		os_pot_pt_s[3] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2064:
.................... 				 		{
.................... 				 		addr = ee_os_pot_t_600;
.................... 				 		os_pot_pt_t[3] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 					// 1000
.................... 				 	case 2065:
.................... 				 		{
.................... 				 		addr = ee_os_pot_r_1000;
.................... 				 		os_pot_pt_r[4] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2066:
.................... 				 		{
.................... 				 		addr = ee_os_pot_s_1000;
.................... 				 		os_pot_pt_s[4] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2067:
.................... 				 		{
.................... 				 		addr = ee_os_pot_t_1000;
.................... 				 		os_pot_pt_t[4] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 					// 1500
.................... 				 	case 2068:
.................... 				 		{
.................... 				 		addr = ee_os_pot_r_1500;
.................... 				 		os_pot_pt_r[5] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2069:
.................... 				 		{
.................... 				 		addr = ee_os_pot_s_1500;
.................... 				 		os_pot_pt_s[5] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2070:
.................... 				 		{
.................... 				 		addr = ee_os_pot_t_1500;
.................... 				 		os_pot_pt_t[5] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 #endif
.................... 				#if (ponteira_kyoritsu == true)
.................... 				#elif (viercon == true)
.................... 				#else
.................... 					// 2000
.................... 				 	case 2071:
.................... 				 		{
.................... 				 		addr = ee_os_pot_r_2000;
.................... 				 		os_pot_pt_r[6] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2072:
.................... 				 		{
.................... 				 		addr = ee_os_pot_s_2000;
.................... 				 		os_pot_pt_s[6] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2073:
.................... 				 		{
.................... 				 		addr = ee_os_pot_t_2000;
.................... 				 		os_pot_pt_t[6] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 					// 3000
.................... 				 	case 2074:
.................... 				 		{
.................... 				 		addr = ee_os_pot_r_3000;
.................... 				 		os_pot_pt_r[7] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2075:
.................... 				 		{
.................... 				 		addr = ee_os_pot_s_3000;
.................... 				 		os_pot_pt_s[7] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2076:
.................... 				 		{
.................... 				 		addr = ee_os_pot_t_3000;
.................... 				 		os_pot_pt_t[7] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 					// 6000
.................... 				 	case 2077:
.................... 				 		{
.................... 				 		addr = ee_os_pot_r_6000;
.................... 				 		os_pot_pt_r[8] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2078:
.................... 				 		{
.................... 				 		addr = ee_os_pot_s_6000;
.................... 				 		os_pot_pt_s[8] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 	case 2079:
.................... 				 		{
.................... 				 		addr = ee_os_pot_t_6000;
.................... 				 		os_pot_pt_t[8] = data1_int;
.................... 				 		goto salva_byte;
.................... 				 		}
.................... 				 #endif
.................... 			 #endif
.................... 		#endif
.................... 
.................... //      reservado entre 2100 e 2300 para parametros dos controladores de fator de potencia(200 partametros)
.................... 		#if (controlador == true)|| (st_prog == true)
.................... 			case 2100:
.................... 				{
.................... 				#if (st8500c == true)
.................... 					addr = ee_nro_cargas;
0D502:  MOVLW  03
0D504:  MOVLB  3
0D506:  MOVWF  xEE
0D508:  MOVLW  13
0D50A:  MOVWF  xED
.................... 					nro_cargas = data1_int;
0D50C:  MOVFF  3EF,6D
.................... 				#else
.................... 					addr = ee_nro_bancos_capacitor;
.................... 					nro_bancos_capacitor = data1_int;
.................... 				#endif
.................... 		 		goto salva_byte;
0D510:  BRA    D966
....................                 break;
0D512:  BRA    D92A
0D514:  MOVLB  0
.................... 				}
.................... 			case 2101:
.................... 				{
.................... 				#if (st8500c == true)
.................... 					addr = ee_max_kw;
0D516:  MOVLW  02
0D518:  MOVLB  3
0D51A:  MOVWF  xEE
0D51C:  MOVLW  81
0D51E:  MOVWF  xED
.................... 					max_kw = data1_int;
0D520:  MOVFF  3F0,66
0D524:  MOVFF  3EF,65
.................... 					break;
0D528:  BRA    D92A
0D52A:  MOVLB  0
.................... 				#else
.................... 					addr = ee_max_kvar;
.................... 					max_kvar = data1_int;
.................... 			 		goto salva_byte;
.................... 				#endif
.................... 				}
.................... 			case 2102:
.................... 				{
.................... 				#if (st8500c == true)
.................... 					addr = ee_min_kw;
0D52C:  MOVLW  02
0D52E:  MOVLB  3
0D530:  MOVWF  xEE
0D532:  MOVLW  82
0D534:  MOVWF  xED
.................... 					min_kw = data1_int;
0D536:  MOVFF  3EF,64
.................... 				#else
.................... 					addr = ee_min_kvar;
.................... 					min_kvar = data1_int;
.................... 				#endif
.................... 		 		goto salva_byte;
0D53A:  BRA    D966
....................                 break;
0D53C:  BRA    D92A
0D53E:  MOVLB  0
.................... 				}
.................... 			case 2103:
.................... 				{
.................... 				addr = ee_sequencia;
0D540:  MOVLW  02
0D542:  MOVLB  3
0D544:  MOVWF  xEE
0D546:  MOVLW  85
0D548:  MOVWF  xED
.................... 				sequencia = data1_int;
0D54A:  MOVFF  3EF,67
.................... 				calcular_bancos = 1;
0D54E:  BSF    27.1
.................... 		 		goto salva_byte;
0D550:  BRA    D966
....................                 break;
0D552:  BRA    D92A
0D554:  MOVLB  0
.................... 				}
.................... 				
.................... 			case 2104:
.................... 				{
.................... 				addr = ee_tempo_aciona;
0D556:  MOVLW  02
0D558:  MOVLB  3
0D55A:  MOVWF  xEE
0D55C:  MOVLW  83
0D55E:  MOVWF  xED
.................... 				tempo_aciona = data1_int;
0D560:  MOVFF  3EF,6A
.................... 		 		goto salva_byte;
0D564:  BRA    D966
....................                 break;
0D566:  BRA    D92A
0D568:  MOVLB  0
.................... 				}
.................... 			case 2105:
.................... 				{
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						addr = ee_cor_minima_rep;
.................... 						cor_minima_rep = data1_int;
.................... 						break;
.................... 						}
.................... 					else
.................... 						{
.................... 						addr = ee_cor_minima;
.................... 						cor_minima = data1_int;
.................... 				 		goto salva_byte;
....................                         break;
.................... 						}
.................... 				#else
.................... 					addr = ee_cor_minima;
0D56A:  MOVLW  02
0D56C:  MOVLB  3
0D56E:  MOVWF  xEE
0D570:  MOVLW  EE
0D572:  MOVWF  xED
.................... 					cor_minima = data1_int;
0D574:  MOVFF  3EF,4D9
.................... 			 		goto salva_byte;
0D578:  BRA    D966
.................... 			 	#endif
....................                     break;
0D57A:  BRA    D92A
0D57C:  MOVLB  0
.................... 				}
.................... 			case 2106:
.................... 				{
.................... 				addr = ee_com_des_fp_ind_cap;
0D57E:  MOVLW  02
0D580:  MOVLB  3
0D582:  MOVWF  xEE
0D584:  MOVLW  ED
0D586:  MOVWF  xED
.................... 				com_des_fp_ind_cap = data1_int;
0D588:  MOVFF  3EF,5D
.................... 		 		goto salva_byte;
0D58C:  BRA    D966
....................                 break;
0D58E:  BRA    D92A
0D590:  MOVLB  0
.................... 				}
.................... 			case 2107:
.................... 				{
.................... 				addr = ee_com_des_ten_a;
0D592:  MOVLW  02
0D594:  MOVLB  3
0D596:  MOVWF  xEE
0D598:  MOVLW  EA
0D59A:  MOVWF  xED
.................... 				com_des_ten_a = data1_int;
0D59C:  MOVFF  3EF,59
.................... 		 		goto salva_byte;
0D5A0:  BRA    D966
....................                 break;
0D5A2:  BRA    D92A
0D5A4:  MOVLB  0
.................... 				}
.................... 			case 2108:
.................... 				{
.................... 				addr = ee_com_des_chtt;
0D5A6:  MOVLW  02
0D5A8:  MOVLB  3
0D5AA:  MOVWF  xEE
0D5AC:  MOVLW  EB
0D5AE:  MOVWF  xED
.................... 				com_des_chtt = data1_int;
0D5B0:  MOVFF  3EF,5B
.................... 		 		goto salva_byte;
0D5B4:  BRA    D966
....................                 break;
0D5B6:  BRA    D92A
0D5B8:  MOVLB  0
.................... 				}
.................... 			case 2109:
.................... 				{
.................... 				addr = ee_com_des_chtc;
0D5BA:  MOVLW  02
0D5BC:  MOVLB  3
0D5BE:  MOVWF  xEE
0D5C0:  MOVLW  EC
0D5C2:  MOVWF  xED
.................... 				com_des_chtc = data1_int;
0D5C4:  MOVFF  3EF,5C
.................... 		 		goto salva_byte;
0D5C8:  BRA    D966
....................                 break;
0D5CA:  BRA    D92A
0D5CC:  MOVLB  0
.................... 				}
.................... 			case 2110:
.................... 			case 2111:
.................... 			case 2112:
.................... 			case 2113:
.................... 			case 2114:
.................... 			case 2115:
.................... 			case 2116:
.................... 			case 2117:
.................... 			case 2118:
.................... 			case 2119:
.................... 			case 2120:
.................... 			case 2121:
.................... 			case 2122:
.................... 			case 2123:
.................... 			case 2124:
.................... 			case 2125:
.................... 				{
.................... 				#if (st8500c == true)
.................... 					aux_b4 = addr_regs_modbus - 2110;
0D5CE:  MOVLW  3E
0D5D0:  MOVLB  5
0D5D2:  SUBWF  x29,W
0D5D4:  MOVLB  3
0D5D6:  MOVWF  xB4
.................... 					addr = ee_carga_1 + aux_b4;
0D5D8:  MOVLW  F3
0D5DA:  ADDWF  xB4,W
0D5DC:  MOVWF  xED
0D5DE:  MOVLW  02
0D5E0:  MOVWF  xEE
0D5E2:  BTFSC  FD8.0
0D5E4:  INCF   xEE,F
.................... 					carga[aux_b4] = data1_int;
0D5E6:  CLRF   03
0D5E8:  MOVF   xB4,W
0D5EA:  ADDLW  07
0D5EC:  MOVWF  FE9
0D5EE:  MOVLW  01
0D5F0:  ADDWFC 03,W
0D5F2:  MOVWF  FEA
0D5F4:  MOVFF  3EF,FEF
.................... 				#else
.................... 					calcular_bancos = 1;
.................... 					aux_b4 = addr_regs_modbus - 2110;
.................... 					addr = ee_banco_capacitor_1 + aux_b4;
.................... 					banco_capacitor[aux_b4] = data1_int;
.................... 				#endif					
.................... 		 		goto salva_byte;
0D5F8:  BRA    D966
....................                 break;
0D5FA:  BRA    D92A
0D5FC:  MOVLB  0
.................... 				}
.................... 			case 2126:
.................... 			case 2127:
.................... 			case 2128:
.................... 			case 2129:
.................... 			case 2130:
.................... 			case 2131:
.................... 			case 2132:
.................... 			case 2133:
.................... 			case 2134:
.................... 			case 2135:
.................... 			case 2136:
.................... 			case 2137:
.................... 			case 2138:
.................... 			case 2139:
.................... 			case 2140:
.................... 			case 2141:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2126;
0D5FE:  MOVLW  4E
0D600:  MOVLB  5
0D602:  SUBWF  x29,W
0D604:  MOVLB  3
0D606:  MOVWF  xB4
.................... 				addr = ee_tempo_repouso_1 + aux_b4;
0D608:  MOVLW  DA
0D60A:  ADDWF  xB4,W
0D60C:  MOVWF  xED
0D60E:  MOVLW  02
0D610:  MOVWF  xEE
0D612:  BTFSC  FD8.0
0D614:  INCF   xEE,F
.................... 				tempo_repouso[aux_b4] = data1_int;
0D616:  CLRF   03
0D618:  MOVF   xB4,W
0D61A:  ADDLW  E7
0D61C:  MOVWF  FE9
0D61E:  MOVLW  00
0D620:  ADDWFC 03,W
0D622:  MOVWF  FEA
0D624:  MOVFF  3EF,FEF
.................... 		 		goto salva_byte;
0D628:  BRA    D966
....................                 break;
0D62A:  BRA    D92A
0D62C:  MOVLB  0
.................... 				}
.................... 			case 2142:
.................... 				{
.................... 	 			 addr = ee_tempo_desaciona;
0D62E:  MOVLW  02
0D630:  MOVLB  3
0D632:  MOVWF  xEE
0D634:  MOVLW  84
0D636:  MOVWF  xED
.................... 	 		 	 tempo_desaciona = data1;
0D638:  MOVFF  3BE,6B
.................... 		 		 goto salva_byte;
0D63C:  BRA    D966
....................                  break;
0D63E:  BRA    D92A
0D640:  MOVLB  0
.................... 				}
.................... 		#endif
.................... 		#if (st8500c == true)
.................... 			#if (com_tc == true)
.................... 				case 2145:
.................... 					{
.................... 		 			 addr = ee_valor_tc;
0D642:  MOVLB  3
0D644:  CLRF   xEE
0D646:  MOVLW  13
0D648:  MOVWF  xED
.................... 		 		 	 valor_tc = data1_int;
0D64A:  MOVFF  3F0,4C0
0D64E:  MOVFF  3EF,4BF
.................... 		 		 	 break;
0D652:  BRA    D92A
0D654:  MOVLB  0
.................... 					}
.................... 				case 2146:
.................... 					{
.................... 		 			 addr = ee_valor_tp;
0D656:  MOVLB  3
0D658:  CLRF   xEE
0D65A:  MOVLW  2B
0D65C:  MOVWF  xED
.................... 		 		 	 valor_tp = data1_int;
0D65E:  MOVFF  3F0,4C2
0D662:  MOVFF  3EF,4C1
.................... 		 		 	 break;
0D666:  BRA    D92A
0D668:  MOVLB  0
.................... 					}
.................... 			#endif
.................... 		#endif
.................... 		#if (com_rep == true)
.................... 			case 2144:
.................... 				{
.................... 	 			 addr = ee_modo_rep;
.................... 	 		 	 modo_rep = data1;
.................... 		 		 goto salva_byte;
....................                  break;
.................... 				}
.................... 			case 2145:
.................... 				{
.................... 	 			 addr = ee_fat_conv_ativa;
.................... 	 		 	 fat_conv_ativa = data1_int;
.................... 	 		 	 break;
.................... 				}
.................... 			case 2146:
.................... 				{
.................... 	 			 addr = ee_fat_conv_reativa;
.................... 	 		 	 fat_conv_reativa = data1_int;
.................... 	 		 	 break;
.................... 				}
.................... 		#endif
.................... 
.................... 		#if (st8500c == true)
.................... 			case 2150:
.................... 			case 2151:
.................... 			case 2152:
.................... 			case 2153:
.................... 			case 2154:
.................... 			case 2155:
.................... 			case 2156:
.................... 			case 2157:
.................... 			case 2158:
.................... 			case 2159:
.................... 			case 2160:
.................... 			case 2161:
.................... 			case 2162:
.................... 			case 2163:
.................... 			case 2164:
.................... 			case 2165:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2150;
0D66A:  MOVLW  66
0D66C:  MOVLB  5
0D66E:  SUBWF  x29,W
0D670:  MOVLB  3
0D672:  MOVWF  xB4
.................... 				forma_controle[aux_b4] = data1_int;
0D674:  CLRF   03
0D676:  MOVF   xB4,W
0D678:  ADDLW  59
0D67A:  MOVWF  FE9
0D67C:  MOVLW  01
0D67E:  ADDWFC 03,W
0D680:  MOVWF  FEA
0D682:  MOVFF  3EF,FEF
.................... 				addr = ee_forma_controle + aux_b4;
0D686:  MOVLW  50
0D688:  ADDWF  xB4,W
0D68A:  MOVWF  xED
0D68C:  CLRF   xEE
.................... 		 		goto salva_byte;
0D68E:  BRA    D966
....................                 break;
0D690:  BRA    D92A
0D692:  MOVLB  0
.................... 				}
.................... 			case 2170:
.................... 			case 2171:
.................... 			case 2172:
.................... 			case 2173:
.................... 			case 2174:
.................... 			case 2175:
.................... 			case 2176:
.................... 			case 2177:
.................... 			case 2178:
.................... 			case 2179:
.................... 			case 2180:
.................... 			case 2181:
.................... 			case 2182:
.................... 			case 2183:
.................... 			case 2184:
.................... 			case 2185:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2170;
0D694:  MOVLW  7A
0D696:  MOVLB  5
0D698:  SUBWF  x29,W
0D69A:  MOVLB  3
0D69C:  MOVWF  xB4
.................... 				hora_liga_controle[aux_b4] = data1_int;
0D69E:  CLRF   03
0D6A0:  MOVF   xB4,W
0D6A2:  ADDLW  6A
0D6A4:  MOVWF  FE9
0D6A6:  MOVLW  01
0D6A8:  ADDWFC 03,W
0D6AA:  MOVWF  FEA
0D6AC:  MOVFF  3EF,FEF
.................... 				addr = ee_hora_liga_controle + aux_b4;
0D6B0:  MOVLW  60
0D6B2:  ADDWF  xB4,W
0D6B4:  MOVWF  xED
0D6B6:  CLRF   xEE
.................... 		 		goto salva_byte;
0D6B8:  BRA    D966
....................                 break;
0D6BA:  BRA    D92A
0D6BC:  MOVLB  0
.................... 				}
.................... 			case 2190:
.................... 			case 2191:
.................... 			case 2192:
.................... 			case 2193:
.................... 			case 2194:
.................... 			case 2195:
.................... 			case 2196:
.................... 			case 2197:
.................... 			case 2198:
.................... 			case 2199:
.................... 			case 2200:
.................... 			case 2201:
.................... 			case 2202:
.................... 			case 2203:
.................... 			case 2204:
.................... 			case 2205:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2190;
0D6BE:  MOVLW  8E
0D6C0:  MOVLB  5
0D6C2:  SUBWF  x29,W
0D6C4:  MOVLB  3
0D6C6:  MOVWF  xB4
.................... 				minuto_liga_controle[aux_b4] = data1_int;
0D6C8:  CLRF   03
0D6CA:  MOVF   xB4,W
0D6CC:  ADDLW  7B
0D6CE:  MOVWF  FE9
0D6D0:  MOVLW  01
0D6D2:  ADDWFC 03,W
0D6D4:  MOVWF  FEA
0D6D6:  MOVFF  3EF,FEF
.................... 				addr = ee_minuto_liga_controle + aux_b4;
0D6DA:  MOVLW  70
0D6DC:  ADDWF  xB4,W
0D6DE:  MOVWF  xED
0D6E0:  CLRF   xEE
.................... 		 		goto salva_byte;break;
0D6E2:  BRA    D966
0D6E4:  BRA    D92A
0D6E6:  MOVLB  0
.................... 				}
.................... 			case 2210:
.................... 			case 2211:
.................... 			case 2212:
.................... 			case 2213:
.................... 			case 2214:
.................... 			case 2215:
.................... 			case 2216:
.................... 			case 2217:
.................... 			case 2218:
.................... 			case 2219:
.................... 			case 2220:
.................... 			case 2221:
.................... 			case 2222:
.................... 			case 2223:			
.................... 			case 2224:
.................... 			case 2225:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2210;
0D6E8:  MOVLW  A2
0D6EA:  MOVLB  5
0D6EC:  SUBWF  x29,W
0D6EE:  MOVLB  3
0D6F0:  MOVWF  xB4
.................... 				hora_desliga_controle[aux_b4] = data1_int;
0D6F2:  CLRF   03
0D6F4:  MOVF   xB4,W
0D6F6:  ADDLW  8C
0D6F8:  MOVWF  FE9
0D6FA:  MOVLW  01
0D6FC:  ADDWFC 03,W
0D6FE:  MOVWF  FEA
0D700:  MOVFF  3EF,FEF
.................... 				addr = ee_hora_desliga_controle + aux_b4;
0D704:  MOVLW  80
0D706:  ADDWF  xB4,W
0D708:  MOVWF  xED
0D70A:  CLRF   xEE
.................... 		 		goto salva_byte;break;
0D70C:  BRA    D966
0D70E:  BRA    D92A
0D710:  MOVLB  0
.................... 				}
.................... 			case 2230:
.................... 			case 2231:
.................... 			case 2232:
.................... 			case 2233:
.................... 			case 2234:
.................... 			case 2235:
.................... 			case 2236:
.................... 			case 2237:
.................... 			case 2238:
.................... 			case 2239:
.................... 			case 2240:
.................... 			case 2241:
.................... 			case 2242:
.................... 			case 2243:			
.................... 			case 2244:
.................... 			case 2245:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2230;
0D712:  MOVLW  B6
0D714:  MOVLB  5
0D716:  SUBWF  x29,W
0D718:  MOVLB  3
0D71A:  MOVWF  xB4
.................... 				minuto_desliga_controle[aux_b4] = data1_int;
0D71C:  CLRF   03
0D71E:  MOVF   xB4,W
0D720:  ADDLW  9D
0D722:  MOVWF  FE9
0D724:  MOVLW  01
0D726:  ADDWFC 03,W
0D728:  MOVWF  FEA
0D72A:  MOVFF  3EF,FEF
.................... 				addr = ee_minuto_desliga_controle + aux_b4;
0D72E:  MOVLW  90
0D730:  ADDWF  xB4,W
0D732:  MOVWF  xED
0D734:  CLRF   xEE
.................... 		 		goto salva_byte;break;
0D736:  BRA    D966
0D738:  BRA    D92A
0D73A:  MOVLB  0
.................... 				}
.................... 			case 2250:
.................... 				{
.................... 				tipo_controle_demanda = data1_int;
0D73C:  MOVFF  3EF,84
.................... 				addr = ee_tipo_controle_demanda;
0D740:  MOVLB  3
0D742:  CLRF   xEE
0D744:  MOVLW  4F
0D746:  MOVWF  xED
.................... 				goto salva_byte;break;
0D748:  BRA    D966
0D74A:  BRA    D92A
0D74C:  MOVLB  0
.................... 				}
.................... 			case 2251:
.................... 				{
.................... 				dem_cont_ponta[mes - 1] = data1_int;
0D74E:  MOVLW  01
0D750:  MOVLB  3
0D752:  SUBWF  xC0,W
0D754:  MOVWF  00
0D756:  BCF    FD8.0
0D758:  RLCF   00,F
0D75A:  MOVF   00,W
0D75C:  CLRF   03
0D75E:  ADDLW  DB
0D760:  MOVWF  FE9
0D762:  MOVLW  04
0D764:  ADDWFC 03,W
0D766:  MOVWF  FEA
0D768:  MOVFF  3F0,FEC
0D76C:  MOVF   FED,F
0D76E:  MOVFF  3EF,FEF
.................... 				addr = ee_dem_cont_ponta;
0D772:  MOVLW  03
0D774:  MOVWF  xEE
0D776:  MOVLW  16
0D778:  MOVWF  xED
.................... 				break;
0D77A:  BRA    D92A
0D77C:  MOVLB  0
.................... 				}
.................... 			case 2252:
.................... 				{
.................... 				dem_cont_fora_ponta[mes - 1] = data1_int;
0D77E:  MOVLW  01
0D780:  MOVLB  3
0D782:  SUBWF  xC0,W
0D784:  MOVWF  00
0D786:  BCF    FD8.0
0D788:  RLCF   00,F
0D78A:  MOVF   00,W
0D78C:  CLRF   03
0D78E:  ADDLW  F5
0D790:  MOVWF  FE9
0D792:  MOVLW  04
0D794:  ADDWFC 03,W
0D796:  MOVWF  FEA
0D798:  MOVFF  3F0,FEC
0D79C:  MOVF   FED,F
0D79E:  MOVFF  3EF,FEF
.................... 				addr = ee_dem_cont_fora_ponta;
0D7A2:  MOVLW  03
0D7A4:  MOVWF  xEE
0D7A6:  MOVLW  2E
0D7A8:  MOVWF  xED
.................... 				break;
0D7AA:  BRA    D92A
0D7AC:  MOVLB  0
.................... 				}
.................... 			case 2253:
.................... 			case 2254:
.................... 				{
.................... 				addr = 0;
0D7AE:  MOVLB  3
0D7B0:  CLRF   xEE
0D7B2:  CLRF   xED
.................... 				goto salva_byte;break;
0D7B4:  BRA    D966
0D7B6:  BRA    D92A
0D7B8:  MOVLB  0
.................... 				}
.................... 			case 2255:
.................... 				{
.................... 				carga_programada = data1_int;
0D7BA:  MOVFF  3F0,510
0D7BE:  MOVFF  3EF,50F
.................... 				addr = ee_carga_programada;
0D7C2:  MOVLW  03
0D7C4:  MOVLB  3
0D7C6:  MOVWF  xEE
0D7C8:  MOVLW  DC
0D7CA:  MOVWF  xED
.................... 				break;
0D7CC:  BRA    D92A
0D7CE:  MOVLB  0
.................... 				}
.................... 			case 2256:
.................... 				{
.................... 				dia_inicio_pc = data1_int;
0D7D0:  MOVFF  3EF,511
.................... 				addr = ee_dia_inicio_pc;
0D7D4:  MOVLW  03
0D7D6:  MOVLB  3
0D7D8:  MOVWF  xEE
0D7DA:  MOVLW  DE
0D7DC:  MOVWF  xED
.................... 				goto salva_byte;break;
0D7DE:  BRA    D966
0D7E0:  BRA    D92A
0D7E2:  MOVLB  0
.................... 				}
.................... 			case 2257:
.................... 				{
.................... 				mes_inicio_pc = data1_int;
0D7E4:  MOVFF  3EF,512
.................... 				addr = ee_mes_inicio_pc;
0D7E8:  MOVLW  03
0D7EA:  MOVLB  3
0D7EC:  MOVWF  xEE
0D7EE:  MOVLW  DF
0D7F0:  MOVWF  xED
.................... 				goto salva_byte;break;
0D7F2:  BRA    D966
0D7F4:  BRA    D92A
0D7F6:  MOVLB  0
.................... 				}
.................... 			case 2258:
.................... 				{
.................... 				dia_final_pc = data1_int;
0D7F8:  MOVFF  3EF,513
.................... 				addr = ee_dia_final_pc;
0D7FC:  MOVLW  03
0D7FE:  MOVLB  3
0D800:  MOVWF  xEE
0D802:  MOVLW  E0
0D804:  MOVWF  xED
.................... 				goto salva_byte;break;
0D806:  BRA    D966
0D808:  BRA    D92A
0D80A:  MOVLB  0
.................... 				}
.................... 			case 2259:
.................... 				{
.................... 				mes_final_pc = data1_int;
0D80C:  MOVFF  3EF,514
.................... 				addr = ee_mes_final_pc;
0D810:  MOVLW  03
0D812:  MOVLB  3
0D814:  MOVWF  xEE
0D816:  MOVLW  E1
0D818:  MOVWF  xED
.................... 				goto salva_byte;break;
0D81A:  BRA    D966
0D81C:  BRA    D92A
0D81E:  MOVLB  0
.................... 				}
.................... 			
.................... 			case 2260:
.................... 			case 2261:
.................... 			case 2262:
.................... 			case 2263:
.................... 			case 2264:
.................... 			case 2265:
.................... 			case 2266:
.................... 			case 2267:
.................... 			case 2268:
.................... 			case 2269:
.................... 			case 2270:
.................... 			case 2271:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2260;
0D820:  MOVLW  D4
0D822:  MOVLB  5
0D824:  SUBWF  x29,W
0D826:  MOVLB  3
0D828:  MOVWF  xB4
.................... 				dem_cont_ponta[aux_b4] = data1_int;
0D82A:  BCF    FD8.0
0D82C:  RLCF   xB4,W
0D82E:  CLRF   03
0D830:  ADDLW  DB
0D832:  MOVWF  FE9
0D834:  MOVLW  04
0D836:  ADDWFC 03,W
0D838:  MOVWF  FEA
0D83A:  MOVFF  3F0,FEC
0D83E:  MOVF   FED,F
0D840:  MOVFF  3EF,FEF
.................... 				addr = ee_dem_cont_ponta + (aux_b4 * 2);
0D844:  BCF    FD8.0
0D846:  RLCF   xB4,W
0D848:  ADDLW  16
0D84A:  MOVWF  xED
0D84C:  MOVLW  03
0D84E:  MOVWF  xEE
0D850:  BTFSC  FD8.0
0D852:  INCF   xEE,F
.................... 				break;
0D854:  BRA    D92A
0D856:  MOVLB  0
.................... 				}
.................... 			case 2272:
.................... 			case 2273:
.................... 			case 2274:
.................... 			case 2275:
.................... 			case 2276:
.................... 			case 2277:
.................... 			case 2278:
.................... 			case 2279:
.................... 			case 2280:
.................... 			case 2281:
.................... 			case 2282:
.................... 			case 2283:
.................... 				{
.................... 				aux_b4 = addr_regs_modbus - 2272;
0D858:  MOVLW  E0
0D85A:  MOVLB  5
0D85C:  SUBWF  x29,W
0D85E:  MOVLB  3
0D860:  MOVWF  xB4
.................... 				dem_cont_fora_ponta[aux_b4] = data1_int;
0D862:  BCF    FD8.0
0D864:  RLCF   xB4,W
0D866:  CLRF   03
0D868:  ADDLW  F5
0D86A:  MOVWF  FE9
0D86C:  MOVLW  04
0D86E:  ADDWFC 03,W
0D870:  MOVWF  FEA
0D872:  MOVFF  3F0,FEC
0D876:  MOVF   FED,F
0D878:  MOVFF  3EF,FEF
.................... 				addr = ee_dem_cont_fora_ponta + (aux_b4 * 2);
0D87C:  BCF    FD8.0
0D87E:  RLCF   xB4,W
0D880:  ADDLW  2E
0D882:  MOVWF  xED
0D884:  MOVLW  03
0D886:  MOVWF  xEE
0D888:  BTFSC  FD8.0
0D88A:  INCF   xEE,F
.................... 				break;
0D88C:  BRA    D92A
0D88E:  MOVLB  0
.................... 				}
.................... 		#endif				
.................... 
.................... 		case 2300:{
.................... 			addr = ee_com_des_ten_a;
0D890:  MOVLW  02
0D892:  MOVLB  3
0D894:  MOVWF  xEE
0D896:  MOVLW  EA
0D898:  MOVWF  xED
.................... 			com_des_ten_a = data1_int;
0D89A:  MOVFF  3EF,59
.................... 	 		goto salva_byte;break;
0D89E:  BRA    D966
0D8A0:  BRA    D92A
0D8A2:  MOVLB  0
.................... 		}
.................... 
.................... 		#if (chip_cs5460a == true)
.................... 			case 3032:
.................... 				{
.................... 				aux_cs5460_l = 0x00014fb2;
.................... 				aux_cs5460_l = aux_cs5460_l * 2;
.................... 				write_cs5460(pulse_rate, aux_cs5460_l, 'R');
.................... 				aux_cs5460_l = read_cs5460(pulse_rate, 'R');
.................... 				write_byte(ee_pulse_rate_h, datah);
.................... 				write_byte(ee_pulse_rate_m, datam);
.................... 				write_byte(ee_pulse_rate_l, datal);
.................... 				goto salva_prog_flash;break;
.................... 				}
.................... 		#endif
.................... 
.................... 		case 9000:
.................... 			{
.................... 			goto salva_prog_flash;break;
0D8A4:  BRA    D95A
0D8A6:  MOVLB  3
0D8A8:  BRA    D92A
0D8AA:  MOVLB  0
.................... 			}
.................... 
.................... 		case 9005:
.................... 			{
.................... 			binasc2(data1_int);
0D8AC:  MOVFF  3F0,A63
0D8B0:  MOVFF  3EF,A62
0D8B4:  CALL   4F12
.................... 			write_byte(ee_nro_1, buf_tmp[1]);
0D8B8:  MOVLW  03
0D8BA:  MOVLB  A
0D8BC:  MOVWF  x68
0D8BE:  MOVLW  7C
0D8C0:  MOVWF  x67
0D8C2:  MOVFF  865,A69
0D8C6:  MOVLB  0
0D8C8:  CALL   1C46
.................... 			write_byte(ee_nro_2, buf_tmp[2]);
0D8CC:  MOVLW  03
0D8CE:  MOVLB  A
0D8D0:  MOVWF  x68
0D8D2:  MOVLW  7D
0D8D4:  MOVWF  x67
0D8D6:  MOVFF  866,A69
0D8DA:  MOVLB  0
0D8DC:  CALL   1C46
.................... 			write_byte(ee_nro_3, buf_tmp[3]);
0D8E0:  MOVLW  03
0D8E2:  MOVLB  A
0D8E4:  MOVWF  x68
0D8E6:  MOVLW  7E
0D8E8:  MOVWF  x67
0D8EA:  MOVFF  867,A69
0D8EE:  MOVLB  0
0D8F0:  CALL   1C46
.................... 			write_byte(ee_nro_4, buf_tmp[4]);
0D8F4:  MOVLW  03
0D8F6:  MOVLB  A
0D8F8:  MOVWF  x68
0D8FA:  MOVLW  7F
0D8FC:  MOVWF  x67
0D8FE:  MOVFF  868,A69
0D902:  MOVLB  0
0D904:  CALL   1C46
.................... 			data_modbus = data1_int;
0D908:  MOVFF  3F0,520
0D90C:  MOVFF  3EF,51F
.................... 			goto salva_prog_flash_10;break;
0D910:  BRA    D962
0D912:  MOVLB  3
0D914:  BRA    D92A
0D916:  MOVLB  5
.................... 			}
.................... 
.................... 		#if (ade7754 == true)
.................... 	 	    case 9990:
.................... 	 	    	{
.................... 		 		 addr = ee_reg_cfnum;
.................... 				 reg_cfnum = data1_int;
.................... 				 break;
.................... 				}
.................... 	 	    case 9991:
.................... 	 	    	{
.................... 		 		 addr = ee_reg_cfdem;
.................... 				 reg_cfdem = data1_int;
.................... 				break;
.................... 				}
.................... 		#endif
.................... 	 	default:
.................... 	 		{
.................... 	 	    erro_mod = 1;
0D918:  BSF    21.4
.................... 	 		qerro_mod = 2;
0D91A:  MOVLW  02
0D91C:  MOVWF  x1E
.................... 	 		data1_int = 0;
0D91E:  MOVLB  3
0D920:  CLRF   xF0
0D922:  CLRF   xEF
.................... 	 		addr = 0;
0D924:  CLRF   xEE
0D926:  CLRF   xED
.................... 	 		return;
0D928:  BRA    D9EC
.................... 	 		}
.................... 	 	} 
.................... 	write_word(addr, data1_int);
0D92A:  MOVFF  3EE,A5D
0D92E:  MOVFF  3ED,A5C
0D932:  MOVFF  3F0,A5F
0D936:  MOVFF  3EF,A5E
0D93A:  MOVLB  0
0D93C:  CALL   23AE
.................... 	data_modbus = read_word(addr);
0D940:  MOVFF  3EE,A5D
0D944:  MOVFF  3ED,A5C
0D948:  CALL   170A
0D94C:  MOVFF  02,520
0D950:  MOVFF  01,51F
.................... 	return;
0D954:  MOVLB  3
0D956:  BRA    D9EC
0D958:  MOVLB  0
.................... 	
.................... salva_prog_flash:
.................... 	data_modbus = 0;
0D95A:  MOVLB  5
0D95C:  CLRF   x20
0D95E:  CLRF   x1F
0D960:  MOVLB  0
.................... salva_prog_flash_10:
.................... 	return;
0D962:  MOVLB  3
0D964:  BRA    D9EC
.................... 	
.................... salva_byte:
.................... 	write_byte(addr, data1);
0D966:  MOVFF  3EE,A68
0D96A:  MOVFF  3ED,A67
0D96E:  MOVFF  3BE,A69
0D972:  MOVLB  0
0D974:  CALL   1C46
.................... 	data_modbus = read_byte(addr);
0D978:  MOVFF  3EE,A66
0D97C:  MOVFF  3ED,A65
0D980:  CALL   1C24
0D984:  MOVLB  5
0D986:  CLRF   x20
0D988:  MOVFF  01,51F
.................... 	return;
0D98C:  MOVLB  3
0D98E:  BRA    D9EC
.................... 
.................... salva_byte_nvr:
.................... #if (com_relogio == true)
.................... 	write_byte_nvr(addr, data1);
0D990:  MOVFF  3ED,A6B
0D994:  MOVFF  3BE,A6C
0D998:  MOVLB  0
0D99A:  CALL   5F64
.................... 	data_modbus = read_byte_nvr(addr);
0D99E:  MOVFF  3ED,A4F
0D9A2:  CALL   731A
0D9A6:  MOVFF  02,520
0D9AA:  MOVFF  01,51F
.................... #endif
.................... 	return;
0D9AE:  MOVLB  3
0D9B0:  BRA    D9EC
.................... salva_word_nvr:
.................... #if (com_relogio == true)
.................... 	write_word_nvr(addr, data1_int);
0D9B2:  MOVFF  3ED,A79
0D9B6:  MOVFF  3F0,A7B
0D9BA:  MOVFF  3EF,A7A
0D9BE:  MOVLB  0
0D9C0:  CALL   5802
.................... 	data_modbus = read_word_nvr(addr);
0D9C4:  MOVFF  3ED,A79
0D9C8:  CALL   54CA
0D9CC:  MOVFF  02,520
0D9D0:  MOVFF  01,51F
.................... #endif
.................... 	return;
0D9D4:  MOVLB  3
0D9D6:  BRA    D9EC
0D9D8:  MOVLB  0
.................... 	
.................... salva_calend:
.................... 	ajuste_relogio = 0;
0D9DA:  BCF    24.6
.................... #if (com_relogio == true)
.................... 	data_modbus = data1_int;
0D9DC:  MOVFF  3F0,520
0D9E0:  MOVFF  3EF,51F
.................... 	rtc_set_datetime();
0D9E4:  MOVLB  0
0D9E6:  CALL   BF3A
0D9EA:  MOVLB  3
.................... #else
.................... 	data_modbus = data1_int;
.................... 	rtc_wr_e2p();
.................... #endif
.................... 	return;
0D9EC:  MOVLB  0
0D9EE:  RETURN 0
.................... }	 	
.................... 
.................... 
.................... 
.................... void busca_os_cor_pt_r(char indice)
.................... {
.................... 	#if (portatil == TRUE)
.................... 		data1_int = os_cor_pt_r[indice];
.................... 	#else
.................... 		data1_int = os_cor_r;
.................... 	#endif	
.................... }
.................... void busca_os_cor_pt_s(char indice)
.................... {
.................... 	#if (portatil == TRUE)
.................... 		data1_int = os_cor_pt_s[indice];
.................... 	#else
.................... 		data1_int = os_cor_s;
.................... 	#endif	
.................... }
.................... void busca_os_cor_pt_t(char indice)
.................... {
.................... 	#if (portatil == TRUE)
.................... 		data1_int = os_cor_pt_t[indice];
.................... 	#else
.................... 		data1_int = os_cor_t;
.................... 	#endif	
.................... }
.................... 
.................... void busca_os_pot_pt_r(char indice)
.................... {
.................... 	#if (portatil == TRUE)
.................... 		data1_int = os_pot_pt_r[indice];
.................... 	#else
.................... 		data1_int = os_pot_r;
.................... 	#endif	
.................... }
.................... void busca_os_pot_pt_s(char indice)
.................... {
.................... 	#if (portatil == TRUE)
.................... 		data1_int = os_pot_pt_s[indice];
.................... 	#else
.................... 		data1_int = os_pot_s;
.................... 	#endif	
.................... }
.................... void busca_os_pot_pt_t(char indice)
.................... {
.................... 	#if (portatil == TRUE)
.................... 		data1_int = os_pot_pt_t[indice];
.................... 	#else
.................... 		data1_int = os_pot_t;
.................... 	#endif	
.................... }
.................... 	
.................... 
.................... #include <st_crc.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST92_CRC                                                       *
.................... ; Funcao: MODULO GERACAO DE CRC											 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... // High-Order Byte Table
.................... // Table of CRC values for high-order byte
.................... const char tab_crchi[256] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ;
.................... 
.................... // Low-Order Byte Table
.................... // Table of CRC values for low-order byte
.................... const char tab_crclo[256] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... int16 CRC16(char *msg, char tamanho, char formato){		// P(x) = x^16 + x^15 + x^2 + x^0
.................... 	char crchi;
.................... 	char crclo;
.................... 	word indice_crc;
.................... 	if(formato == 'R'){
*
06D6E:  MOVLB  A
06D70:  MOVF   x53,W
06D72:  SUBLW  52
06D74:  BNZ   6D7C
.................... 		crchi = 0x00;
06D76:  CLRF   x54
.................... 		crclo = 0x00;
06D78:  CLRF   x55
.................... 	}
06D7A:  BRA    6D80
.................... 	else{
.................... 		crchi = 0xFF;
06D7C:  SETF   x54
.................... 		crclo = 0xFF;
06D7E:  SETF   x55
.................... 	}
.................... 
.................... 	while (tamanho--){
06D80:  MOVF   x52,W
06D82:  DECF   x52,F
06D84:  XORLW  00
06D86:  BZ    6DD2
.................... 		pulsa_wdt();
06D88:  MOVLB  0
06D8A:  CALL   2428
.................... 	 	indice_crc = (char)(crchi ^ *msg++);
06D8E:  MOVLB  A
06D90:  MOVFF  A51,FEA
06D94:  MOVF   x50,W
06D96:  INCF   x50,F
06D98:  BTFSC  FD8.2
06D9A:  INCF   x51,F
06D9C:  MOVWF  FE9
06D9E:  MOVF   FEF,W
06DA0:  XORWF  x54,W
06DA2:  MOVWF  x56
06DA4:  CLRF   x57
.................... 	 	crchi = (char)(crclo ^ tab_crchi[indice_crc]);
06DA6:  MOVFF  A57,03
06DAA:  MOVF   x56,W
06DAC:  MOVLB  0
06DAE:  CALL   106A
06DB2:  MOVWF  01
06DB4:  MOVLB  A
06DB6:  MOVF   x55,W
06DB8:  XORWF  01,W
06DBA:  MOVWF  x54
.................... 	 	crclo = (char)(tab_crclo[indice_crc]);
06DBC:  MOVFF  A57,03
06DC0:  MOVF   x56,W
06DC2:  MOVLB  0
06DC4:  CALL   117E
06DC8:  MOVWF  01
06DCA:  MOVFF  FE8,A55
06DCE:  MOVLB  A
06DD0:  BRA    6D80
.................... 	}
.................... 	return (make16(crchi, crclo));
06DD2:  MOVFF  A54,03
06DD6:  MOVFF  A55,01
06DDA:  MOVFF  03,02
06DDE:  MOVLB  0
06DE0:  RETURN 0
.................... }                                 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /*
.................... #define CRC_POLY 0x8005 // (x^16) + x^15 + x^2 + x^0
.................... 
.................... word crcCalc(word int crc, unsigned char byte)
.................... {
....................   int count, carry;
....................   unsigned short int set_bit;
....................   unsigned char mask[]={0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
....................   
....................   for(count = 0; count < 8; count++)
....................     {
....................       set_bit = (byte & mask[count]) ? 0x0001 : 0x0000;
....................       carry = crc & 0x8000;
....................       crc = (crc << 1) | set_bit;
....................       if (carry)
.................... 	crc ^= CRC_POLY;
....................     }
....................   return crc;
.................... }
.................... 
.................... int xmain()
.................... {
....................   unsigned int crc, crc_final;
....................   crc = 0;
....................   crc=crcCalc(crc,0x12);
....................   crc=crcCalc(crc,0x23);
....................   crc=crcCalc(crc,0x34);
....................   crc=crcCalc(crc,0x45);
.................... 
....................   // augmented message is the message followed by 16 zero bits.
....................   crc=crcCalc(crc,0x00);
....................   crc=crcCalc(crc,0x00); 
.................... 
....................   crc_final = crc;
....................   printf("->final_crc: %04x \n",crc_final);
....................   
....................   crc=0;
....................   crc=crcCalc(crc,0x12);
....................   crc=crcCalc(crc,0x23);
....................   crc=crcCalc(crc,0x34);
....................   crc=crcCalc(crc,0x45);
.................... 
....................   // augmented part
....................   crc=crcCalc(crc,(unsigned char)(crc_final>>8));
....................   crc=crcCalc(crc,(unsigned char)(crc_final));
.................... 
....................   crc_final = crc;
....................   printf("<-final_crc: %04x \n",crc_final);
.................... 
....................   return 0;
.................... }
.................... 
.................... 
.................... */
.................... int16 crc16t(void)  
.................... {
.................... 	char crchi = 0xff;
.................... 	char crclo = 0xff;
.................... 	word indice_crc = 0;
.................... 	char aux_ind = 0;
.................... 	char aux_ind2 = 0;
.................... 	char aux_ind3 = 0;
.................... 
....................  	indice_crc = (char)(crchi ^ 0x01);
.................... 
....................  	aux_ind = (char)(tab_crchi[indice_crc]);
....................  	aux_ind2 = (char)(tab_crchi[crchi ^ 0x01]);
....................  	aux_ind3 = (char)(tab_crchi[0xfe]);
.................... 
....................  	crchi = (char)(crclo ^ aux_ind);
.................... 
.................... // 	crchi = (char)(crclo ^ tab_crchi[indice_crc]);
....................  	crclo = (char)(tab_crclo[indice_crc]);
.................... 
....................  	indice_crc = (char)(crchi ^ 0x11);
....................  	crchi = (char)(crclo ^ tab_crchi[indice_crc]);
....................  	crclo = (char)(tab_crclo[indice_crc]);
.................... 
.................... 	return (make16(crchi, crclo));
.................... 
.................... }                                 
.................... 
.................... /*
.................... int16 crc16(char *msg, char tamanho)  
.................... {
.................... 	char crchi = 0xff;
.................... 	char crclo = 0xff;
.................... 	word indice_crc;
.................... 
.................... 	while (tamanho--)
.................... 		{
.................... 		pulsa_wdt();
.................... 	 	indice_crc = (char)(crchi ^ *msg++);
.................... 	 	crchi = (char)(crclo ^ tab_crchi[indice_crc]);
.................... 	 	crclo = (char)(tab_crclo[indice_crc]);
.................... 		}
.................... 	indice_crc = crchi;
.................... 	indice_crc = indice_crc << 8;
.................... 	indice_crc = indice_crc | crclo;
.................... 	return (indice_crc);
.................... }                                 
.................... */
.................... /* fim st_crc */                                 
.................... 
.................... #include <st_fun01.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_COMU                                                        *
.................... ; Funcao: MODULO gerencialde comunicação rs232/485						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
....................   
.................... 
.................... //void le_endereco(void);
.................... //void le_nro_pontos(void);
.................... 
.................... void modbus_funcao01(void)
.................... {
.................... 	char ptrtx_old;
.................... 	char bits1, bits2, bits3, bits4, bits5 ;
.................... 
.................... 	bits1 = 0;
*
06F58:  MOVLB  A
06F5A:  CLRF   x4B
.................... 	bits2 = 0;
06F5C:  CLRF   x4C
.................... 	bits3 = 0;
06F5E:  CLRF   x4D
.................... 	bits4 = 0;
06F60:  CLRF   x4E
.................... 	bits5 = 0;
06F62:  CLRF   x4F
.................... 	if (tem_alarme == 1)
06F64:  BTFSS  22.4
06F66:  BRA    6F6C
.................... 		{
.................... 		bits1 = 0b00000100;
06F68:  MOVLW  04
06F6A:  MOVWF  x4B
.................... 		}
.................... 	shift_left(&bits2, 1, erro);				//0
06F6C:  BTFSC  22.2
06F6E:  BRA    6F74
06F70:  BCF    FD8.0
06F72:  BRA    6F76
06F74:  BSF    FD8.0
06F76:  RLCF   x4C,F
.................... 	shift_left(&bits2, 1, tem_ocor);			//1
06F78:  BTFSC  22.3
06F7A:  BRA    6F80
06F7C:  BCF    FD8.0
06F7E:  BRA    6F82
06F80:  BSF    FD8.0
06F82:  RLCF   x4C,F
.................... 	shift_left(&bits2, 1, tem_alarme);			//2
06F84:  BTFSC  22.4
06F86:  BRA    6F8C
06F88:  BCF    FD8.0
06F8A:  BRA    6F8E
06F8C:  BSF    FD8.0
06F8E:  RLCF   x4C,F
.................... 	shift_left(&bits2, 1, 0);					//3
06F90:  BCF    FD8.0
06F92:  RLCF   x4C,F
.................... 	shift_left(&bits2, 1, tem_erro);			//4
06F94:  BTFSC  24.3
06F96:  BRA    6F9C
06F98:  BCF    FD8.0
06F9A:  BRA    6F9E
06F9C:  BSF    FD8.0
06F9E:  RLCF   x4C,F
.................... #if (portatil == true)
.................... 	shift_left(&bits2, 1, existe_local);		//5
.................... 	shift_left(&bits2, 1, digitou_texto);		//6
.................... #else
.................... 	shift_left(&bits2, 1, 0);		//5
06FA0:  BCF    FD8.0
06FA2:  RLCF   x4C,F
.................... 	shift_left(&bits2, 1, 0);		//6
06FA4:  BCF    FD8.0
06FA6:  RLCF   x4C,F
.................... #endif
.................... 	shift_left(&bits2, 1, tem_comando_alarme);	//7
06FA8:  BTFSC  24.2
06FAA:  BRA    6FB0
06FAC:  BCF    FD8.0
06FAE:  BRA    6FB2
06FB0:  BSF    FD8.0
06FB2:  RLCF   x4C,F
.................... 
.................... 	shift_left(&bits3, 1, fp_ind);
06FB4:  BTFSC  22.7
06FB6:  BRA    6FBC
06FB8:  BCF    FD8.0
06FBA:  BRA    6FBE
06FBC:  BSF    FD8.0
06FBE:  RLCF   x4D,F
.................... 	shift_left(&bits3, 1, fp_cap);
06FC0:  BTFSC  23.0
06FC2:  BRA    6FC8
06FC4:  BCF    FD8.0
06FC6:  BRA    6FCA
06FC8:  BSF    FD8.0
06FCA:  RLCF   x4D,F
.................... 	#if (monofasico == true)
.................... 		shift_left(&bits3, 1, ten_a_r);
.................... 		shift_left(&bits3, 1, 0);
.................... 		shift_left(&bits3, 1, 0);
.................... 		shift_left(&bits3, 1, ten_b_r);
.................... 		shift_left(&bits3, 1, 0);
.................... 		shift_left(&bits3, 1, 0);
.................... 	#else
.................... 		shift_left(&bits3, 1, ten_a_r);
06FCC:  BTFSC  23.1
06FCE:  BRA    6FD4
06FD0:  BCF    FD8.0
06FD2:  BRA    6FD6
06FD4:  BSF    FD8.0
06FD6:  RLCF   x4D,F
.................... 		shift_left(&bits3, 1, ten_a_s);
06FD8:  BTFSC  27.5
06FDA:  BRA    6FE0
06FDC:  BCF    FD8.0
06FDE:  BRA    6FE2
06FE0:  BSF    FD8.0
06FE2:  RLCF   x4D,F
.................... 		shift_left(&bits3, 1, ten_a_t);
06FE4:  BTFSC  27.6
06FE6:  BRA    6FEC
06FE8:  BCF    FD8.0
06FEA:  BRA    6FEE
06FEC:  BSF    FD8.0
06FEE:  RLCF   x4D,F
.................... 		shift_left(&bits3, 1, ten_b_r);
06FF0:  BTFSC  23.2
06FF2:  BRA    6FF8
06FF4:  BCF    FD8.0
06FF6:  BRA    6FFA
06FF8:  BSF    FD8.0
06FFA:  RLCF   x4D,F
.................... 		shift_left(&bits3, 1, ten_b_s);
06FFC:  BTFSC  27.7
06FFE:  BRA    7004
07000:  BCF    FD8.0
07002:  BRA    7006
07004:  BSF    FD8.0
07006:  RLCF   x4D,F
.................... 		shift_left(&bits3, 1, ten_b_t);
07008:  BTFSC  28.0
0700A:  BRA    7010
0700C:  BCF    FD8.0
0700E:  BRA    7012
07010:  BSF    FD8.0
07012:  RLCF   x4D,F
.................... 	#endif
.................... 
.................... 	shift_left(&bits4, 1, chtt_a);
07014:  BTFSC  23.4
07016:  BRA    701C
07018:  BCF    FD8.0
0701A:  BRA    701E
0701C:  BSF    FD8.0
0701E:  RLCF   x4E,F
.................... 	shift_left(&bits4, 1, chtc_a);
07020:  BTFSC  23.5
07022:  BRA    7028
07024:  BCF    FD8.0
07026:  BRA    702A
07028:  BSF    FD8.0
0702A:  RLCF   x4E,F
.................... 	#if (monofasico == true)
.................... 		shift_left(&bits4, 1, cor_a_r);
.................... 		shift_left(&bits4, 1, 0);
.................... 		shift_left(&bits4, 1, 0);
.................... 		shift_left(&bits4, 1, cor_b_r);
.................... 		shift_left(&bits4, 1, 0);
.................... 		shift_left(&bits4, 1, 0);
.................... 	#else
.................... 		shift_left(&bits4, 1, cor_a_r);
0702C:  BTFSC  23.3
0702E:  BRA    7034
07030:  BCF    FD8.0
07032:  BRA    7036
07034:  BSF    FD8.0
07036:  RLCF   x4E,F
.................... 		shift_left(&bits4, 1, cor_a_s);
07038:  BTFSC  28.1
0703A:  BRA    7040
0703C:  BCF    FD8.0
0703E:  BRA    7042
07040:  BSF    FD8.0
07042:  RLCF   x4E,F
.................... 		shift_left(&bits4, 1, cor_a_t);
07044:  BTFSC  28.2
07046:  BRA    704C
07048:  BCF    FD8.0
0704A:  BRA    704E
0704C:  BSF    FD8.0
0704E:  RLCF   x4E,F
.................... 		shift_left(&bits4, 1, cor_b_r);
07050:  BTFSC  23.7
07052:  BRA    7058
07054:  BCF    FD8.0
07056:  BRA    705A
07058:  BSF    FD8.0
0705A:  RLCF   x4E,F
.................... 		shift_left(&bits4, 1, cor_b_s);
0705C:  BTFSC  28.5
0705E:  BRA    7064
07060:  BCF    FD8.0
07062:  BRA    7066
07064:  BSF    FD8.0
07066:  RLCF   x4E,F
.................... 		shift_left(&bits4, 1, cor_b_t);
07068:  BTFSC  28.6
0706A:  BRA    7070
0706C:  BCF    FD8.0
0706E:  BRA    7072
07070:  BSF    FD8.0
07072:  RLCF   x4E,F
.................... 	#endif
.................... 
.................... 	#if (monofasico == true)
.................... 		shift_left(&bits5, 1, sentido_r);
.................... 		shift_left(&bits5, 1, 0);
.................... 		shift_left(&bits5, 1, 0);
.................... 		shift_left(&bits5, 1, ffase_r);
.................... 		shift_left(&bits5, 1, 0);
.................... 		shift_left(&bits5, 1, 0);
.................... 		shift_left(&bits5, 1, 0);
.................... 		shift_left(&bits5, 1, 0);
.................... 	#else
.................... 		shift_left(&bits5, 1, sentido_r);
07074:  BTFSC  22.6
07076:  BRA    707C
07078:  BCF    FD8.0
0707A:  BRA    707E
0707C:  BSF    FD8.0
0707E:  RLCF   x4F,F
.................... 		shift_left(&bits5, 1, sentido_s);
07080:  BTFSC  27.3
07082:  BRA    7088
07084:  BCF    FD8.0
07086:  BRA    708A
07088:  BSF    FD8.0
0708A:  RLCF   x4F,F
.................... 		shift_left(&bits5, 1, sentido_t);
0708C:  BTFSC  27.4
0708E:  BRA    7094
07090:  BCF    FD8.0
07092:  BRA    7096
07094:  BSF    FD8.0
07096:  RLCF   x4F,F
.................... 		shift_left(&bits5, 1, ffase_r);
07098:  BTFSC  23.6
0709A:  BRA    70A0
0709C:  BCF    FD8.0
0709E:  BRA    70A2
070A0:  BSF    FD8.0
070A2:  RLCF   x4F,F
.................... 		shift_left(&bits5, 1, ffase_s);
070A4:  BTFSC  28.3
070A6:  BRA    70AC
070A8:  BCF    FD8.0
070AA:  BRA    70AE
070AC:  BSF    FD8.0
070AE:  RLCF   x4F,F
.................... 		shift_left(&bits5, 1, ffase_t);
070B0:  BTFSC  28.4
070B2:  BRA    70B8
070B4:  BCF    FD8.0
070B6:  BRA    70BA
070B8:  BSF    FD8.0
070BA:  RLCF   x4F,F
.................... 		shift_left(&bits5, 1, 0);
070BC:  BCF    FD8.0
070BE:  RLCF   x4F,F
.................... 		shift_left(&bits5, 1, 0);
070C0:  BCF    FD8.0
070C2:  RLCF   x4F,F
.................... 	#endif
.................... 
....................   	erro_mod = 0;
070C4:  BCF    21.4
.................... 	qerro_mod = 0;
070C6:  MOVLB  5
070C8:  CLRF   x1E
.................... 
.................... 	le_endereco();
070CA:  MOVLB  0
070CC:  RCALL  6E36
.................... 	le_nro_pontos();
070CE:  RCALL  6E42
....................                     
....................   	ptrtx_old = ptrtx;
070D0:  MOVFF  52F,A4A
....................   	ptrtx++;
070D4:  MOVLB  5
070D6:  INCF   x2F,F
.................... 
....................     aux_b2 = 1+(char)((nro_pontos_modbus / 8));
070D8:  RRCF   x28,W
070DA:  MOVWF  03
070DC:  RRCF   x27,W
070DE:  MOVWF  02
070E0:  RRCF   03,F
070E2:  RRCF   02,F
070E4:  RRCF   03,F
070E6:  RRCF   02,F
070E8:  MOVLW  1F
070EA:  ANDWF  03,F
070EC:  MOVF   02,W
070EE:  ADDLW  01
070F0:  MOVLB  3
070F2:  MOVWF  xB2
.................... 	if (addr_regs_modbus == 0)
070F4:  MOVLB  5
070F6:  MOVF   x29,F
070F8:  BNZ   7104
070FA:  MOVF   x2A,F
070FC:  BNZ   7104
.................... 		{
.................... 	    erro_mod = 1;
070FE:  BSF    21.4
.................... 		qerro_mod = 2;
07100:  MOVLW  02
07102:  MOVWF  x1E
.................... 		}
....................     aux_b4 = addr_regs_modbus - 1;
07104:  MOVLW  01
07106:  SUBWF  x29,W
07108:  MOVLB  3
0710A:  MOVWF  xB4
.................... 	aux_b3 = nro_pontos_modbus;
0710C:  MOVFF  527,3B3
.................... 	if (erro_mod == 0)
07110:  BTFSC  21.4
07112:  BRA    7218
.................... 		{
.................... 		existe = 0;			    
07114:  BCF    21.5
.................... 		for (aux_b1 = 0; aux_b1 < aux_b2; aux_b1++)
07116:  CLRF   xB1
07118:  MOVF   xB2,W
0711A:  SUBWF  xB1,W
0711C:  BTFSC  FD8.0
0711E:  BRA    7218
.................... 			{
.................... 			switch(addr_regs_modbus)
07120:  MOVLB  5
07122:  MOVF   x29,W
07124:  MOVWF  00
07126:  MOVF   x2A,W
07128:  MOVWF  03
0712A:  MOVF   03,W
0712C:  BNZ   7138
0712E:  MOVLW  01
07130:  SUBWF  00,W
07132:  MOVLB  0
07134:  BZ    718E
07136:  MOVLB  5
07138:  MOVF   03,W
0713A:  BNZ   7146
0713C:  MOVLW  02
0713E:  SUBWF  00,W
07140:  MOVLB  0
07142:  BZ    7196
07144:  MOVLB  5
07146:  MOVF   03,W
07148:  BNZ   7154
0714A:  MOVLW  03
0714C:  SUBWF  00,W
0714E:  MOVLB  0
07150:  BZ    719E
07152:  MOVLB  5
07154:  MOVF   03,W
07156:  BNZ   7162
07158:  MOVLW  04
0715A:  SUBWF  00,W
0715C:  MOVLB  0
0715E:  BZ    71A6
07160:  MOVLB  5
07162:  MOVF   03,W
07164:  BNZ   7170
07166:  MOVLW  05
07168:  SUBWF  00,W
0716A:  MOVLB  0
0716C:  BZ    71AE
0716E:  MOVLB  5
07170:  MOVF   03,W
07172:  BNZ   717E
07174:  MOVLW  06
07176:  SUBWF  00,W
07178:  MOVLB  0
0717A:  BZ    71B6
0717C:  MOVLB  5
0717E:  MOVF   03,W
07180:  BNZ   718C
07182:  MOVLW  07
07184:  SUBWF  00,W
07186:  MOVLB  0
07188:  BZ    71BE
0718A:  MOVLB  5
0718C:  BRA    71C8
.................... 				{
.................... 		 	    case 1:
.................... 		 	    	{
.................... 		 	    	existe = 1;
0718E:  BSF    21.5
.................... 					data1 = bits1;
07190:  MOVFF  A4B,3BE
.................... 					break;
07194:  BRA    71CE
.................... 		 	    	}
.................... 		 	    case 2:
.................... 		 	    	{
.................... 		 	    	existe = 1;
07196:  BSF    21.5
.................... 	 	    		data1 = bits2;	/* le byte */
07198:  MOVFF  A4C,3BE
.................... 					break;
0719C:  BRA    71CE
.................... 		 	    	}
.................... 		 	    case 3:
.................... 		 	    	{
.................... 		 	    	existe = 1;
0719E:  BSF    21.5
.................... 	 	    		data1 = bits3;		/* le byte */
071A0:  MOVFF  A4D,3BE
.................... 					break;
071A4:  BRA    71CE
.................... 		 	    	}
.................... 		 	    case 4:
.................... 		 	    	{
.................... 		 	    	existe = 1;
071A6:  BSF    21.5
.................... 	 	    		data1 = bits4;		/* le byte */
071A8:  MOVFF  A4E,3BE
.................... 					break;
071AC:  BRA    71CE
.................... 		 	    	}
.................... 		 	    case 5:
.................... 		 	    	{
.................... 		 	    	existe = 1;
071AE:  BSF    21.5
.................... 	 	    		data1 = bits5;		/* le byte */
071B0:  MOVFF  A4F,3BE
.................... 					break;
071B4:  BRA    71CE
.................... 		 	    	}
.................... 				#if (controlador == true)		 	    	
.................... 			 	    case 6:
.................... 			 	    	{
.................... 		 		    	existe = 1;
071B6:  BSF    21.5
.................... 	 	    			data1 = SAIDA2;		/* le byte */
071B8:  MOVFF  885,3BE
.................... 						break;
071BC:  BRA    71CE
.................... 			 	    	}
.................... 			 	    case 7:
.................... 		 		    	{
.................... 			 	 	   	existe = 1;
071BE:  BSF    21.5
.................... 	 	    			data1 = SAIDA3;		/* le byte */
071C0:  MOVFF  886,3BE
.................... 						break;
071C4:  BRA    71CE
071C6:  MOVLB  5
.................... 		 		    	}
.................... 		 		#endif
.................... 			 	default:
.................... 			 		{
.................... 	 				data1 = 0;
071C8:  MOVLB  3
071CA:  CLRF   xBE
071CC:  MOVLB  0
.................... 			 		}
.................... 			 	}
.................... 			if (existe == 1)
071CE:  BTFSS  21.5
071D0:  BRA    71F8
.................... 				{	
....................  	    		if ( aux_b3 > 8 )			
071D2:  MOVLB  3
071D4:  MOVF   xB3,W
071D6:  SUBLW  08
071D8:  BC    71E0
....................  	    			{                   /* se tem mais de 8 bits a serem transmitidos,*/
....................  	    			 aux_b3 = aux_b3 - 8;			/* apenas tira 8 de aux_b3 */
071DA:  MOVLW  08
071DC:  SUBWF  xB3,F
....................  	    			}
071DE:  BRA    71F4
....................  	    		else
....................  	    			{
....................  	    			 data1 = data1 >> (8 - aux_b3);		/* se são menos de 8 bits , volta para mantar aux_b3 bits */
071E0:  MOVLW  08
071E2:  BSF    FD8.0
071E4:  SUBFWB xB3,W
071E6:  MOVWF  01
071E8:  MOVF   01,F
071EA:  BZ    71F4
071EC:  BCF    FD8.0
071EE:  RRCF   xBE,F
071F0:  DECFSZ 01,F
071F2:  BRA    71EC
....................  	    			}
.................... 				}			
071F4:  BRA    71FC
071F6:  MOVLB  0
.................... 			else
.................... 				{
.................... 				data1 = 0;
071F8:  MOVLB  3
071FA:  CLRF   xBE
.................... 				}
.................... 
.................... 			poe_byte_buftx();
071FC:  MOVLB  0
071FE:  BRA    6E62
.................... 			addr_regs_modbus++;
07200:  MOVLB  5
07202:  INCF   x29,F
07204:  BTFSC  FD8.2
07206:  INCF   x2A,F
.................... 			
.................... 			if (erro_mod == 1)
07208:  BTFSS  21.4
0720A:  BRA    7212
.................... 				{
.................... 				break;
0720C:  MOVLB  3
0720E:  BRA    7218
07210:  MOVLB  5
.................... 				}
07212:  MOVLB  3
07214:  INCF   xB1,F
07216:  BRA    7118
.................... 			}    
....................     	}
.................... 	buf_tx[ptrtx_old] = 1+(char)((nro_pontos_modbus / 8));  /* monta nro de pontos */
07218:  MOVLW  48
0721A:  MOVLB  A
0721C:  ADDWF  x4A,W
0721E:  MOVWF  FE9
07220:  MOVLW  09
07222:  MOVWF  FEA
07224:  BTFSC  FD8.0
07226:  INCF   FEA,F
07228:  MOVLB  5
0722A:  RRCF   x28,W
0722C:  MOVWF  03
0722E:  RRCF   x27,W
07230:  MOVWF  02
07232:  RRCF   03,F
07234:  RRCF   02,F
07236:  RRCF   03,F
07238:  RRCF   02,F
0723A:  MOVLW  1F
0723C:  ANDWF  03,F
0723E:  MOVF   02,W
07240:  ADDLW  01
07242:  MOVWF  FEF
.................... 
....................  	if (erro_mod == 1)
07244:  BTFSS  21.4
07246:  BRA    7256
....................  		{
.................... 		buf_tx[1] = buf_tx[1] | 0x80;
07248:  MOVLB  9
0724A:  BSF    x49.7
.................... 		buf_tx[2] = qerro_mod;
0724C:  MOVFF  51E,94A
.................... 		ptrtx = 3;
07250:  MOVLW  03
07252:  MOVLB  5
07254:  MOVWF  x2F
....................  		}
....................  		
.................... 	crc_modbus =  crc16(buf_tx, ptrtx, 'M');
07256:  MOVLW  09
07258:  MOVLB  A
0725A:  MOVWF  x51
0725C:  MOVLW  48
0725E:  MOVWF  x50
07260:  MOVFF  52F,A52
07264:  MOVLW  4D
07266:  MOVWF  x53
07268:  MOVLB  0
0726A:  RCALL  6D6E
0726C:  MOVFF  02,526
07270:  MOVFF  01,525
.................... 	data1_int = crc_modbus;
07274:  MOVFF  526,3F0
07278:  MOVFF  525,3EF
.................... 	poe_word_buftx();
0727C:  RCALL  6E7E
.................... 	dispara_tx();
0727E:  RCALL  6EE4
07280:  GOTO   E05E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #include <st_fun03.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS                                  *
.................... ; Modulo: ST_COMU                                                        *
.................... ; Funcao: MODULO gerencialde comunicacao rs232/485						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
....................   
.................... void filtra_corrente_r_new(void);
.................... 
.................... short tx_buffer;
.................... 
.................... void modbus_funcao03(void)
.................... {
.................... 	erro_mod = 0;
*
08F4E:  BCF    21.4
.................... 	qerro_mod = 0;
08F50:  MOVLB  5
08F52:  CLRF   x1E
.................... 	le_endereco();
08F54:  MOVLB  0
08F56:  CALL   6E36
.................... 	le_nro_pontos();
08F5A:  CALL   6E42
.................... 	buf_tx[ptrtx++] = nro_pontos_modbus * 2;	/* monta nro de pontos */;
08F5E:  MOVLB  5
08F60:  MOVF   x2F,W
08F62:  INCF   x2F,F
08F64:  ADDLW  48
08F66:  MOVWF  FE9
08F68:  MOVLW  09
08F6A:  MOVWF  FEA
08F6C:  BTFSC  FD8.0
08F6E:  INCF   FEA,F
08F70:  BCF    FD8.0
08F72:  RLCF   x27,W
08F74:  MOVWF  02
08F76:  RLCF   x28,W
08F78:  MOVFF  02,FEF
.................... 
.................... 	if (addr_regs_modbus == 0)
08F7C:  MOVF   x29,F
08F7E:  BNZ   8F8A
08F80:  MOVF   x2A,F
08F82:  BNZ   8F8A
.................... 		{
.................... 		erro_mod = 1;
08F84:  BSF    21.4
.................... 		qerro_mod = 2;
08F86:  MOVLW  02
08F88:  MOVWF  x1E
.................... 		}
.................... 	if (erro_mod == 0)
08F8A:  BTFSC  21.4
08F8C:  BRA    8FCA
.................... 		{
.................... 		existe = 0;
08F8E:  BCF    21.5
.................... 		for (aux_b1 = 0; aux_b1 < nro_pontos_modbus; aux_b1++)
08F90:  MOVLB  3
08F92:  CLRF   xB1
08F94:  MOVLB  5
08F96:  MOVF   x28,F
08F98:  BNZ   8FA4
08F9A:  MOVF   x27,W
08F9C:  MOVLB  3
08F9E:  SUBWF  xB1,W
08FA0:  BC    8FC8
08FA2:  MOVLB  5
....................  			{
.................... 	 		if (erro_mod == 1)
08FA4:  BTFSS  21.4
08FA6:  BRA    8FAE
.................... 	 			{
.................... 		 		break;
08FA8:  MOVLB  3
08FAA:  BRA    8FC8
08FAC:  MOVLB  5
.................... 		 		}
.................... //			if ((addr_regs_modbus >= 4000) && (addr_regs_modbus < 4064))
.................... //			 	{
.................... //				#if (teste_off_set == 1)
.................... //		 		 	aux_b3 = addr_regs_modbus - 4000;
.................... //					if (aux_b3 == 0)
.................... //						{
.................... //						tx_buffer = 1;
.................... //						#if (chip_cs5460a == false)
.................... //							#if (ade7754 == false)
.................... //								memcpy(buf_ten_tmp, buf_tensao_r, NRO_AMOSTRAS);
.................... //								memcpy(buf_cor_tmp, buf_corrente_r, NRO_AMOSTRAS);
.................... //							#endif
.................... //						#endif
.................... //						tx_buffer = 0;
.................... //						}
.................... //					data1_int = buf_ten_tmp[aux_b3];
.................... //				#else
.................... //		 		 	aux_b3 = addr_regs_modbus - 4000;
.................... //		 		 	if (aux_b3 == 0)
.................... //		 		 		{
.................... ////						filtra_corrente_r_new();
.................... //			 		 	}
.................... ////					data1_int = buf_tensao_r[aux_b3];
.................... //					if (aux_b3 < (NRO_AMOSTRAS/4))
.................... //						{
.................... //						data1_int = buf_tensao[aux_b3]-vref;
.................... //						}
.................... //					else
.................... //						{
.................... //						data1_int = buf_corrente[aux_b3 - (NRO_AMOSTRAS/4)]- vref;
.................... //						}
.................... //				#endif
.................... //				}
.................... //			else if ((addr_regs_modbus >= 4064) && (addr_regs_modbus < 4128))
.................... //			 	{
.................... //				#if (teste_off_set == 1)
.................... //		 		 	aux_b3 = addr_regs_modbus - 4064;
.................... //					data1_int = buf_cor_tmp[aux_b3];
.................... //				#else
.................... //		 		 	aux_b3 = addr_regs_modbus - 4064;
.................... ////					data1_int = buf_tensao_r[aux_b3];
.................... //					data1_int = buf_corrente_r[aux_b3];
.................... //				#endif
.................... //				}
.................... //			else
.................... //				{
.................... 			 	le_byte_regs_modbus();
08FAE:  MOVLB  0
08FB0:  GOTO   73AE
.................... //				}
.................... 		 	addr_regs_modbus++; 
08FB4:  MOVLB  5
08FB6:  INCF   x29,F
08FB8:  BTFSC  FD8.2
08FBA:  INCF   x2A,F
.................... 			poe_word_buftx();
08FBC:  MOVLB  0
08FBE:  CALL   6E7E
08FC2:  MOVLB  3
08FC4:  INCF   xB1,F
08FC6:  BRA    8F94
08FC8:  MOVLB  5
....................  			}
.................... 	 	}
....................  	if (erro_mod == 1)
08FCA:  BTFSS  21.4
08FCC:  BRA    8FDC
....................  		{
.................... 		buf_tx[1] = buf_tx[1] | 0x80;
08FCE:  MOVLB  9
08FD0:  BSF    x49.7
.................... 		buf_tx[2] = qerro_mod;
08FD2:  MOVFF  51E,94A
.................... 		ptrtx = 3;
08FD6:  MOVLW  03
08FD8:  MOVLB  5
08FDA:  MOVWF  x2F
....................  		}
....................  	
.................... 	crc_modbus =  crc16(buf_tx, ptrtx, 'M');
08FDC:  MOVLW  09
08FDE:  MOVLB  A
08FE0:  MOVWF  x51
08FE2:  MOVLW  48
08FE4:  MOVWF  x50
08FE6:  MOVFF  52F,A52
08FEA:  MOVLW  4D
08FEC:  MOVWF  x53
08FEE:  MOVLB  0
08FF0:  CALL   6D6E
08FF4:  MOVFF  02,526
08FF8:  MOVFF  01,525
.................... 	data1_int = crc_modbus;
08FFC:  MOVFF  526,3F0
09000:  MOVFF  525,3EF
.................... 	poe_word_buftx();
09004:  CALL   6E7E
.................... 	dispara_tx();
09008:  CALL   6EE4
0900C:  GOTO   E05E (RETURN)
.................... }
.................... 
.................... 	 
.................... 
.................... #include <st_fun04.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_COMU                                                        *
.................... ; Funcao: MODULO gerencialde comunicação rs232/485						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... //void tx_cht_mdb(void);
.................... 
.................... //void le_senoide_cht_timer(void);
.................... 
.................... #if (com_gestal == true)
.................... 	#include "gestal.c"  
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_COMU                                                        *
.................... ; Funcao: MODULO gerencialde comunicação rs232/485						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
....................   
.................... 
.................... void busca_qcht(void);
.................... 
.................... 
.................... /* alteracao versao 1.03 solicitado pela Gestal */ 		 	 
.................... /*
....................  		 else if ((addr_regs_modbus >= 900) && (addr_regs_modbus <= 999))
.................... */
.................... void tx_regs_gestal(void)
.................... {
.................... 	 switch(addr_regs_modbus)
09010:  MOVLB  5
09012:  MOVF   x29,W
09014:  MOVWF  00
09016:  MOVF   x2A,W
09018:  MOVWF  03
0901A:  MOVLW  03
0901C:  SUBWF  03,W
0901E:  BNZ   902C
09020:  MOVLW  85
09022:  SUBWF  00,W
09024:  MOVLB  0
09026:  BTFSC  FD8.2
09028:  BRA    9292
0902A:  MOVLB  5
0902C:  MOVLW  03
0902E:  SUBWF  03,W
09030:  BNZ   903E
09032:  MOVLW  86
09034:  SUBWF  00,W
09036:  MOVLB  0
09038:  BTFSC  FD8.2
0903A:  BRA    929C
0903C:  MOVLB  5
0903E:  MOVLW  03
09040:  SUBWF  03,W
09042:  BNZ   9050
09044:  MOVLW  87
09046:  SUBWF  00,W
09048:  MOVLB  0
0904A:  BTFSC  FD8.2
0904C:  BRA    92A6
0904E:  MOVLB  5
09050:  MOVLW  03
09052:  SUBWF  03,W
09054:  BNZ   9062
09056:  MOVLW  88
09058:  SUBWF  00,W
0905A:  MOVLB  0
0905C:  BTFSC  FD8.2
0905E:  BRA    92B0
09060:  MOVLB  5
09062:  MOVLW  03
09064:  SUBWF  03,W
09066:  BNZ   9074
09068:  MOVLW  89
0906A:  SUBWF  00,W
0906C:  MOVLB  0
0906E:  BTFSC  FD8.2
09070:  BRA    92BA
09072:  MOVLB  5
09074:  MOVLW  03
09076:  SUBWF  03,W
09078:  BNZ   9086
0907A:  MOVLW  8A
0907C:  SUBWF  00,W
0907E:  MOVLB  0
09080:  BTFSC  FD8.2
09082:  BRA    92C4
09084:  MOVLB  5
09086:  MOVLW  03
09088:  SUBWF  03,W
0908A:  BNZ   9098
0908C:  MOVLW  8B
0908E:  SUBWF  00,W
09090:  MOVLB  0
09092:  BTFSC  FD8.2
09094:  BRA    92CE
09096:  MOVLB  5
09098:  MOVLW  03
0909A:  SUBWF  03,W
0909C:  BNZ   90AA
0909E:  MOVLW  8C
090A0:  SUBWF  00,W
090A2:  MOVLB  0
090A4:  BTFSC  FD8.2
090A6:  BRA    92D8
090A8:  MOVLB  5
090AA:  MOVLW  03
090AC:  SUBWF  03,W
090AE:  BNZ   90BC
090B0:  MOVLW  8D
090B2:  SUBWF  00,W
090B4:  MOVLB  0
090B6:  BTFSC  FD8.2
090B8:  BRA    92E2
090BA:  MOVLB  5
090BC:  MOVLW  03
090BE:  SUBWF  03,W
090C0:  BNZ   90CE
090C2:  MOVLW  8E
090C4:  SUBWF  00,W
090C6:  MOVLB  0
090C8:  BTFSC  FD8.2
090CA:  BRA    92EC
090CC:  MOVLB  5
090CE:  MOVLW  03
090D0:  SUBWF  03,W
090D2:  BNZ   90E0
090D4:  MOVLW  8F
090D6:  SUBWF  00,W
090D8:  MOVLB  0
090DA:  BTFSC  FD8.2
090DC:  BRA    92F6
090DE:  MOVLB  5
090E0:  MOVLW  03
090E2:  SUBWF  03,W
090E4:  BNZ   90F2
090E6:  MOVLW  90
090E8:  SUBWF  00,W
090EA:  MOVLB  0
090EC:  BTFSC  FD8.2
090EE:  BRA    9300
090F0:  MOVLB  5
090F2:  MOVLW  03
090F4:  SUBWF  03,W
090F6:  BNZ   9104
090F8:  MOVLW  91
090FA:  SUBWF  00,W
090FC:  MOVLB  0
090FE:  BTFSC  FD8.2
09100:  BRA    930A
09102:  MOVLB  5
09104:  MOVLW  03
09106:  SUBWF  03,W
09108:  BNZ   9116
0910A:  MOVLW  92
0910C:  SUBWF  00,W
0910E:  MOVLB  0
09110:  BTFSC  FD8.2
09112:  BRA    9314
09114:  MOVLB  5
09116:  MOVLW  03
09118:  SUBWF  03,W
0911A:  BNZ   9128
0911C:  MOVLW  93
0911E:  SUBWF  00,W
09120:  MOVLB  0
09122:  BTFSC  FD8.2
09124:  BRA    935A
09126:  MOVLB  5
09128:  MOVLW  03
0912A:  SUBWF  03,W
0912C:  BNZ   913A
0912E:  MOVLW  94
09130:  SUBWF  00,W
09132:  MOVLB  0
09134:  BTFSC  FD8.2
09136:  BRA    93A4
09138:  MOVLB  5
0913A:  MOVLW  03
0913C:  SUBWF  03,W
0913E:  BNZ   914C
09140:  MOVLW  95
09142:  SUBWF  00,W
09144:  MOVLB  0
09146:  BTFSC  FD8.2
09148:  BRA    93AE
0914A:  MOVLB  5
0914C:  MOVLW  03
0914E:  SUBWF  03,W
09150:  BNZ   915E
09152:  MOVLW  96
09154:  SUBWF  00,W
09156:  MOVLB  0
09158:  BTFSC  FD8.2
0915A:  BRA    93B8
0915C:  MOVLB  5
0915E:  MOVLW  03
09160:  SUBWF  03,W
09162:  BNZ   9170
09164:  MOVLW  97
09166:  SUBWF  00,W
09168:  MOVLB  0
0916A:  BTFSC  FD8.2
0916C:  BRA    93C2
0916E:  MOVLB  5
09170:  MOVLW  03
09172:  SUBWF  03,W
09174:  BNZ   9182
09176:  MOVLW  98
09178:  SUBWF  00,W
0917A:  MOVLB  0
0917C:  BTFSC  FD8.2
0917E:  BRA    9408
09180:  MOVLB  5
09182:  MOVLW  03
09184:  SUBWF  03,W
09186:  BNZ   9194
09188:  MOVLW  99
0918A:  SUBWF  00,W
0918C:  MOVLB  0
0918E:  BTFSC  FD8.2
09190:  BRA    9452
09192:  MOVLB  5
09194:  MOVLW  03
09196:  SUBWF  03,W
09198:  BNZ   91A6
0919A:  MOVLW  9A
0919C:  SUBWF  00,W
0919E:  MOVLB  0
091A0:  BTFSC  FD8.2
091A2:  BRA    945C
091A4:  MOVLB  5
091A6:  MOVLW  03
091A8:  SUBWF  03,W
091AA:  BNZ   91B8
091AC:  MOVLW  9B
091AE:  SUBWF  00,W
091B0:  MOVLB  0
091B2:  BTFSC  FD8.2
091B4:  BRA    9466
091B6:  MOVLB  5
091B8:  MOVLW  03
091BA:  SUBWF  03,W
091BC:  BNZ   91CA
091BE:  MOVLW  9C
091C0:  SUBWF  00,W
091C2:  MOVLB  0
091C4:  BTFSC  FD8.2
091C6:  BRA    9470
091C8:  MOVLB  5
091CA:  MOVLW  03
091CC:  SUBWF  03,W
091CE:  BNZ   91DC
091D0:  MOVLW  9D
091D2:  SUBWF  00,W
091D4:  MOVLB  0
091D6:  BTFSC  FD8.2
091D8:  BRA    94B6
091DA:  MOVLB  5
091DC:  MOVLW  03
091DE:  SUBWF  03,W
091E0:  BNZ   91EE
091E2:  MOVLW  9E
091E4:  SUBWF  00,W
091E6:  MOVLB  0
091E8:  BTFSC  FD8.2
091EA:  BRA    9500
091EC:  MOVLB  5
091EE:  MOVLW  03
091F0:  SUBWF  03,W
091F2:  BNZ   9200
091F4:  MOVLW  9F
091F6:  SUBWF  00,W
091F8:  MOVLB  0
091FA:  BTFSC  FD8.2
091FC:  BRA    950C
091FE:  MOVLB  5
09200:  MOVLW  03
09202:  SUBWF  03,W
09204:  BNZ   9212
09206:  MOVLW  A0
09208:  SUBWF  00,W
0920A:  MOVLB  0
0920C:  BTFSC  FD8.2
0920E:  BRA    9516
09210:  MOVLB  5
09212:  MOVLW  03
09214:  SUBWF  03,W
09216:  BNZ   9224
09218:  MOVLW  A1
0921A:  SUBWF  00,W
0921C:  MOVLB  0
0921E:  BTFSC  FD8.2
09220:  BRA    9520
09222:  MOVLB  5
09224:  MOVLW  03
09226:  SUBWF  03,W
09228:  BNZ   9236
0922A:  MOVLW  DE
0922C:  SUBWF  00,W
0922E:  MOVLB  0
09230:  BTFSC  FD8.2
09232:  BRA    952A
09234:  MOVLB  5
09236:  MOVLW  03
09238:  SUBWF  03,W
0923A:  BNZ   9248
0923C:  MOVLW  DF
0923E:  SUBWF  00,W
09240:  MOVLB  0
09242:  BTFSC  FD8.2
09244:  BRA    9534
09246:  MOVLB  5
09248:  MOVLW  03
0924A:  SUBWF  03,W
0924C:  BNZ   925A
0924E:  MOVLW  E0
09250:  SUBWF  00,W
09252:  MOVLB  0
09254:  BTFSC  FD8.2
09256:  BRA    953E
09258:  MOVLB  5
0925A:  MOVLW  03
0925C:  SUBWF  03,W
0925E:  BNZ   926C
09260:  MOVLW  E1
09262:  SUBWF  00,W
09264:  MOVLB  0
09266:  BTFSC  FD8.2
09268:  BRA    9548
0926A:  MOVLB  5
0926C:  MOVLW  03
0926E:  SUBWF  03,W
09270:  BNZ   927E
09272:  MOVLW  E2
09274:  SUBWF  00,W
09276:  MOVLB  0
09278:  BTFSC  FD8.2
0927A:  BRA    9552
0927C:  MOVLB  5
0927E:  MOVLW  03
09280:  SUBWF  03,W
09282:  BNZ   9290
09284:  MOVLW  E3
09286:  SUBWF  00,W
09288:  MOVLB  0
0928A:  BTFSC  FD8.2
0928C:  BRA    955C
0928E:  MOVLB  5
09290:  BRA    9568
.................... 	 	{
.................... 	 	case 901:
.................... 	 		{
.................... 	 		 data1_int = tensao_r;
09292:  MOVFF  251,3F0
09296:  MOVFF  250,3EF
.................... 	 		 break;
0929A:  BRA    9664
.................... 	 		}
.................... 	 	case 902:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = tensao_s;
0929C:  MOVFF  2D5,3F0
092A0:  MOVFF  2D4,3EF
.................... 			#endif
.................... 	 		 break;
092A4:  BRA    9664
.................... 	 		}
.................... 	 	case 903:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = tensao_t;
092A6:  MOVFF  32C,3F0
092AA:  MOVFF  32B,3EF
.................... 			#endif
.................... 	 		 break;
092AE:  BRA    9664
.................... 	 		}
.................... 	 	case 904:
.................... 	 		{
.................... 	 		 data1_int = corrente_r;
092B0:  MOVFF  253,3F0
092B4:  MOVFF  252,3EF
.................... 	 		 break;
092B8:  BRA    9664
.................... 	 		}
.................... 	 	case 905:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = corrente_s;
092BA:  MOVFF  2D7,3F0
092BE:  MOVFF  2D6,3EF
.................... 			#endif
.................... 	 		 break;
092C2:  BRA    9664
.................... 	 		}
.................... 	 	case 906:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = corrente_t;
092C4:  MOVFF  32E,3F0
092C8:  MOVFF  32D,3EF
.................... 			#endif
.................... 	 		 break;
092CC:  BRA    9664
.................... 	 		}
.................... 	 	case 907:
.................... 	 		{
.................... 	 		 data1_int = fator_pot_r;
092CE:  MOVFF  263,3F0
092D2:  MOVFF  262,3EF
.................... 	 		 break;
092D6:  BRA    9664
.................... 	 		}
.................... 	 	case 908:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = fator_pot_s;
092D8:  MOVFF  2E3,3F0
092DC:  MOVFF  2E2,3EF
.................... 			#endif
.................... 	 		 break;
092E0:  BRA    9664
.................... 	 		}
.................... 	 	case 909:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = fator_pot_t;
092E2:  MOVFF  33A,3F0
092E6:  MOVFF  339,3EF
.................... 			#endif
.................... 	 		 break;
092EA:  BRA    9664
.................... 	 		}
.................... 	 	case 910:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = fator_pot;
092EC:  MOVFF  293,3F0
092F0:  MOVFF  292,3EF
.................... 			#endif
.................... 	 		 break;
092F4:  BRA    9664
.................... 	 		}
.................... 	 	case 911:
.................... 	 		{
.................... 	 		 data1_int = pot_ativa_r;
092F6:  MOVFF  259,3F0
092FA:  MOVFF  258,3EF
.................... 	 		 break;
092FE:  BRA    9664
.................... 	 		}
.................... 	 	case 912:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = pot_ativa_s;
09300:  MOVFF  2DD,3F0
09304:  MOVFF  2DC,3EF
.................... 			#endif
.................... 	 		 break;
09308:  BRA    9664
.................... 	 		}
.................... 	 	case 913:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = pot_ativa_t;
0930A:  MOVFF  334,3F0
0930E:  MOVFF  333,3EF
.................... 			#endif
.................... 	 		 break;
09312:  BRA    9664
.................... 	 		}
.................... 	 	case 914:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = (word)(((pot_ativa_r + pot_ativa_s + pot_ativa_t) / 32 ) >> 16);
09314:  MOVLB  2
09316:  MOVF   xDC,W
09318:  ADDWF  x58,W
0931A:  MOVLB  A
0931C:  MOVWF  x4D
0931E:  MOVLB  2
09320:  MOVF   xDD,W
09322:  ADDWFC x59,W
09324:  MOVLB  A
09326:  MOVWF  x4E
09328:  MOVLB  3
0932A:  MOVF   x33,W
0932C:  MOVLB  A
0932E:  ADDWF  x4D,F
09330:  MOVLB  3
09332:  MOVF   x34,W
09334:  MOVLB  A
09336:  ADDWFC x4E,F
09338:  RRCF   x4E,F
0933A:  RRCF   x4D,F
0933C:  RRCF   x4E,F
0933E:  RRCF   x4D,F
09340:  RRCF   x4E,F
09342:  RRCF   x4D,F
09344:  RRCF   x4E,F
09346:  RRCF   x4D,F
09348:  RRCF   x4E,F
0934A:  RRCF   x4D,F
0934C:  MOVLW  07
0934E:  ANDWF  x4E,F
09350:  MOVLB  3
09352:  CLRF   xEF
09354:  CLRF   xF0
.................... 			#endif
.................... 	 		 break;
09356:  MOVLB  0
09358:  BRA    9664
.................... 	 		}
.................... 	 	case 915:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = (word)((pot_ativa_r + pot_ativa_s + pot_ativa_t) / 32 );
0935A:  MOVLB  2
0935C:  MOVF   xDC,W
0935E:  ADDWF  x58,W
09360:  MOVLB  A
09362:  MOVWF  x4D
09364:  MOVLB  2
09366:  MOVF   xDD,W
09368:  ADDWFC x59,W
0936A:  MOVLB  A
0936C:  MOVWF  x4E
0936E:  MOVLB  3
09370:  MOVF   x33,W
09372:  MOVLB  A
09374:  ADDWF  x4D,F
09376:  MOVLB  3
09378:  MOVF   x34,W
0937A:  MOVLB  A
0937C:  ADDWFC x4E,F
0937E:  RRCF   x4E,W
09380:  MOVLB  3
09382:  MOVWF  xF0
09384:  MOVLB  A
09386:  RRCF   x4D,W
09388:  MOVLB  3
0938A:  MOVWF  xEF
0938C:  RRCF   xF0,F
0938E:  RRCF   xEF,F
09390:  RRCF   xF0,F
09392:  RRCF   xEF,F
09394:  RRCF   xF0,F
09396:  RRCF   xEF,F
09398:  RRCF   xF0,F
0939A:  RRCF   xEF,F
0939C:  MOVLW  07
0939E:  ANDWF  xF0,F
.................... 			#endif
.................... 	 		 break;
093A0:  MOVLB  0
093A2:  BRA    9664
.................... 	 		}
.................... 	 	case 916:
.................... 	 		{
.................... 	 		 data1_int = pot_reativa_r;
093A4:  MOVFF  25D,3F0
093A8:  MOVFF  25C,3EF
.................... 	 		 break;
093AC:  BRA    9664
.................... 	 		}
.................... 	 	case 917:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int =  pot_reativa_s;
093AE:  MOVFF  2E1,3F0
093B2:  MOVFF  2E0,3EF
.................... 			#endif
.................... 	 		 break;
093B6:  BRA    9664
.................... 	 		}
.................... 	 	case 918:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = pot_reativa_t;
093B8:  MOVFF  338,3F0
093BC:  MOVFF  337,3EF
.................... 			#endif
.................... 	 		 break;
093C0:  BRA    9664
.................... 	 		}
.................... 	 	case 919:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = (word)(((pot_reativa_r + pot_reativa_s + pot_reativa_t) / 32) >> 16);
093C2:  MOVLB  2
093C4:  MOVF   xE0,W
093C6:  ADDWF  x5C,W
093C8:  MOVLB  A
093CA:  MOVWF  x4D
093CC:  MOVLB  2
093CE:  MOVF   xE1,W
093D0:  ADDWFC x5D,W
093D2:  MOVLB  A
093D4:  MOVWF  x4E
093D6:  MOVLB  3
093D8:  MOVF   x37,W
093DA:  MOVLB  A
093DC:  ADDWF  x4D,F
093DE:  MOVLB  3
093E0:  MOVF   x38,W
093E2:  MOVLB  A
093E4:  ADDWFC x4E,F
093E6:  RRCF   x4E,F
093E8:  RRCF   x4D,F
093EA:  RRCF   x4E,F
093EC:  RRCF   x4D,F
093EE:  RRCF   x4E,F
093F0:  RRCF   x4D,F
093F2:  RRCF   x4E,F
093F4:  RRCF   x4D,F
093F6:  RRCF   x4E,F
093F8:  RRCF   x4D,F
093FA:  MOVLW  07
093FC:  ANDWF  x4E,F
093FE:  MOVLB  3
09400:  CLRF   xEF
09402:  CLRF   xF0
.................... 			#endif
.................... 	 		 break;
09404:  MOVLB  0
09406:  BRA    9664
.................... 	 		}
.................... 	 	case 920:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = (word)((pot_reativa_r + pot_reativa_s + pot_reativa_t) / 32);
09408:  MOVLB  2
0940A:  MOVF   xE0,W
0940C:  ADDWF  x5C,W
0940E:  MOVLB  A
09410:  MOVWF  x4D
09412:  MOVLB  2
09414:  MOVF   xE1,W
09416:  ADDWFC x5D,W
09418:  MOVLB  A
0941A:  MOVWF  x4E
0941C:  MOVLB  3
0941E:  MOVF   x37,W
09420:  MOVLB  A
09422:  ADDWF  x4D,F
09424:  MOVLB  3
09426:  MOVF   x38,W
09428:  MOVLB  A
0942A:  ADDWFC x4E,F
0942C:  RRCF   x4E,W
0942E:  MOVLB  3
09430:  MOVWF  xF0
09432:  MOVLB  A
09434:  RRCF   x4D,W
09436:  MOVLB  3
09438:  MOVWF  xEF
0943A:  RRCF   xF0,F
0943C:  RRCF   xEF,F
0943E:  RRCF   xF0,F
09440:  RRCF   xEF,F
09442:  RRCF   xF0,F
09444:  RRCF   xEF,F
09446:  RRCF   xF0,F
09448:  RRCF   xEF,F
0944A:  MOVLW  07
0944C:  ANDWF  xF0,F
.................... 			#endif
.................... 	 		 break;
0944E:  MOVLB  0
09450:  BRA    9664
.................... 	 		}
.................... 	 	case 921:
.................... 	 		{
.................... 	 		 data1_int = pot_aparente_r;
09452:  MOVFF  25B,3F0
09456:  MOVFF  25A,3EF
.................... 	 		 break;
0945A:  BRA    9664
.................... 	 		}
.................... 	 	case 922:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = pot_aparente_s;
0945C:  MOVFF  2DF,3F0
09460:  MOVFF  2DE,3EF
.................... 			#endif
.................... 	 		 break;
09464:  BRA    9664
.................... 	 		}
.................... 	 	case 923:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = pot_aparente_t;
09466:  MOVFF  336,3F0
0946A:  MOVFF  335,3EF
.................... 			#endif
.................... 	 		 break;
0946E:  BRA    9664
.................... 	 		}
.................... 	 	case 924:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = (word)(((pot_aparente_r + pot_aparente_s + pot_aparente_t) / 32) >> 16);
09470:  MOVLB  2
09472:  MOVF   xDE,W
09474:  ADDWF  x5A,W
09476:  MOVLB  A
09478:  MOVWF  x4D
0947A:  MOVLB  2
0947C:  MOVF   xDF,W
0947E:  ADDWFC x5B,W
09480:  MOVLB  A
09482:  MOVWF  x4E
09484:  MOVLB  3
09486:  MOVF   x35,W
09488:  MOVLB  A
0948A:  ADDWF  x4D,F
0948C:  MOVLB  3
0948E:  MOVF   x36,W
09490:  MOVLB  A
09492:  ADDWFC x4E,F
09494:  RRCF   x4E,F
09496:  RRCF   x4D,F
09498:  RRCF   x4E,F
0949A:  RRCF   x4D,F
0949C:  RRCF   x4E,F
0949E:  RRCF   x4D,F
094A0:  RRCF   x4E,F
094A2:  RRCF   x4D,F
094A4:  RRCF   x4E,F
094A6:  RRCF   x4D,F
094A8:  MOVLW  07
094AA:  ANDWF  x4E,F
094AC:  MOVLB  3
094AE:  CLRF   xEF
094B0:  CLRF   xF0
.................... 			#endif
.................... 	 		 break;
094B2:  MOVLB  0
094B4:  BRA    9664
.................... 	 		}
.................... 	 	case 925:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = (word)((pot_aparente_r + pot_aparente_s + pot_aparente_t) / 32);
094B6:  MOVLB  2
094B8:  MOVF   xDE,W
094BA:  ADDWF  x5A,W
094BC:  MOVLB  A
094BE:  MOVWF  x4D
094C0:  MOVLB  2
094C2:  MOVF   xDF,W
094C4:  ADDWFC x5B,W
094C6:  MOVLB  A
094C8:  MOVWF  x4E
094CA:  MOVLB  3
094CC:  MOVF   x35,W
094CE:  MOVLB  A
094D0:  ADDWF  x4D,F
094D2:  MOVLB  3
094D4:  MOVF   x36,W
094D6:  MOVLB  A
094D8:  ADDWFC x4E,F
094DA:  RRCF   x4E,W
094DC:  MOVLB  3
094DE:  MOVWF  xF0
094E0:  MOVLB  A
094E2:  RRCF   x4D,W
094E4:  MOVLB  3
094E6:  MOVWF  xEF
094E8:  RRCF   xF0,F
094EA:  RRCF   xEF,F
094EC:  RRCF   xF0,F
094EE:  RRCF   xEF,F
094F0:  RRCF   xF0,F
094F2:  RRCF   xEF,F
094F4:  RRCF   xF0,F
094F6:  RRCF   xEF,F
094F8:  MOVLW  07
094FA:  ANDWF  xF0,F
.................... 			#endif
.................... 	 		 break;
094FC:  MOVLB  0
094FE:  BRA    9664
.................... 	 		}
.................... 	 	case 926:
.................... 	 		{
.................... 	 		 data1_int = frequencia;
09500:  MOVLB  3
09502:  CLRF   xF0
09504:  MOVFF  24E,3EF
.................... 	 		 break;
09508:  MOVLB  0
0950A:  BRA    9664
.................... 	 		}
.................... 	 	case 927:
.................... 	 		{
.................... 	 		 data1_int = tensao_rs;
0950C:  MOVFF  273,3F0
09510:  MOVFF  272,3EF
.................... 	 		 break;
09514:  BRA    9664
.................... 	 		}
.................... 	 	case 928:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = tensao_st;
09516:  MOVFF  2E5,3F0
0951A:  MOVFF  2E4,3EF
.................... 			#endif
.................... 	 		 break;
0951E:  BRA    9664
.................... 	 		}
.................... 	 	case 929:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		 data1_int = tensao_rt;
09520:  MOVFF  33C,3F0
09524:  MOVFF  33B,3EF
.................... 			#endif
.................... 	 		 break;
09528:  BRA    9664
.................... 	 		}
.................... //      de 930 a 989  transmite conteudos harmonicos
.................... 	 	case 990:
.................... 	 		{
.................... 	 		 data1_int = valor_tp;
0952A:  MOVFF  4C2,3F0
0952E:  MOVFF  4C1,3EF
.................... 	 		 break;
09532:  BRA    9664
.................... 	 		}
.................... 	 	case 991:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		data1_int = tensao_tri;
09534:  MOVFF  28F,3F0
09538:  MOVFF  28E,3EF
.................... 			#endif
.................... 	 		break;
0953C:  BRA    9664
.................... 	 		}
.................... 	 	case 992:
.................... 	 		{
.................... 			#if (monofasico == true)
.................... 				data1_int = 0;
.................... 			#else
.................... 		 		data1_int = corrente_tri;
0953E:  MOVFF  291,3F0
09542:  MOVFF  290,3EF
.................... 			#endif
.................... 	 		break;
09546:  BRA    9664
.................... 	 		}
.................... 	 	case 993:
.................... 	 		{
.................... 	 		data1_int = valor_tc;		//temperatura;
09548:  MOVFF  4C0,3F0
0954C:  MOVFF  4BF,3EF
.................... 	 		break;
09550:  BRA    9664
.................... 	 		}
.................... 	 	case 994:
.................... 	 		{
.................... #if (com_cht == true)
.................... 	 		data1_int = passo_cht;		//temperatura;
.................... #else
.................... 			data1_int = 0;
09552:  MOVLB  3
09554:  CLRF   xF0
09556:  CLRF   xEF
.................... #endif
.................... 	 		break;
09558:  MOVLB  0
0955A:  BRA    9664
.................... 	 		}
.................... 	 	case 995:
.................... 	 		{
.................... #if (com_cht == true)
.................... 	 		data1_int = qcht;		//temperatura;
.................... #else
.................... 			data1_int = 0;
0955C:  MOVLB  3
0955E:  CLRF   xF0
09560:  CLRF   xEF
.................... #endif
.................... 	 		break;
09562:  MOVLB  0
09564:  BRA    9664
09566:  MOVLB  5
.................... 	 		}
.................... 	 	
.................... 	 	 default:
.................... 	 		{   
.................... 	 		if ((addr_regs_modbus >= 930) && (addr_regs_modbus <= 939))
09568:  MOVF   x2A,W
0956A:  SUBLW  02
0956C:  BC    9590
0956E:  XORLW  FF
09570:  BNZ   9578
09572:  MOVF   x29,W
09574:  SUBLW  A1
09576:  BC    9590
09578:  MOVF   x2A,W
0957A:  SUBLW  03
0957C:  BNC   9590
0957E:  BNZ   9586
09580:  MOVF   x29,W
09582:  SUBLW  AB
09584:  BNC   9590
.................... 	 		 	{
.................... 				#if (com_cht == true)
.................... 		 		 	 aux_b4 = addr_regs_modbus - 930;   
.................... 		 		 	 busca_qcht();		/* entrada e saida  em i	*/
.................... 	 		 	 	data1_int = CHT_tr[aux_b4];
.................... 				#else
.................... 					data1_int = 0;
09586:  MOVLB  3
09588:  CLRF   xF0
0958A:  CLRF   xEF
.................... 				#endif
.................... 				}
0958C:  BRA    9664
0958E:  MOVLB  5
.................... 	 		else if ((addr_regs_modbus >= 940) && (addr_regs_modbus <= 949))
09590:  MOVF   x2A,W
09592:  SUBLW  02
09594:  BC    95B8
09596:  XORLW  FF
09598:  BNZ   95A0
0959A:  MOVF   x29,W
0959C:  SUBLW  AB
0959E:  BC    95B8
095A0:  MOVF   x2A,W
095A2:  SUBLW  03
095A4:  BNC   95B8
095A6:  BNZ   95AE
095A8:  MOVF   x29,W
095AA:  SUBLW  B5
095AC:  BNC   95B8
.................... 	 		 	{
.................... 				#if (com_cht == true)
.................... 					#if (monofasico == false)				 
.................... 			 		 	 aux_b4 = addr_regs_modbus - 940;
.................... 		 			 	 busca_qcht();		/* entrada e saida em i	*/
.................... 		 			 	 data1_int = CHT_ts[aux_b4];
.................... 					#else
.................... 						data1_int = 0;
.................... 					#endif
.................... 				#else
.................... 					data1_int = 0;
095AE:  MOVLB  3
095B0:  CLRF   xF0
095B2:  CLRF   xEF
.................... 				#endif
.................... 				}
095B4:  BRA    9664
095B6:  MOVLB  5
.................... 	 		else if ((addr_regs_modbus >= 950) && (addr_regs_modbus <= 959))
095B8:  MOVF   x2A,W
095BA:  SUBLW  02
095BC:  BC    95E0
095BE:  XORLW  FF
095C0:  BNZ   95C8
095C2:  MOVF   x29,W
095C4:  SUBLW  B5
095C6:  BC    95E0
095C8:  MOVF   x2A,W
095CA:  SUBLW  03
095CC:  BNC   95E0
095CE:  BNZ   95D6
095D0:  MOVF   x29,W
095D2:  SUBLW  BF
095D4:  BNC   95E0
.................... 	 		 	{
.................... 				#if (com_cht == true)
.................... 					#if (monofasico == false)
.................... 			 		 	 aux_b4 = addr_regs_modbus - 950;
.................... 		 			 	 busca_qcht();		/* entrada e saida em i	*/
.................... 		 			 	 data1_int = CHT_tt[aux_b4];
.................... 					#else
.................... 						data1_int = 0;
.................... 					#endif
.................... 				#else
.................... 					data1_int = 0;
095D6:  MOVLB  3
095D8:  CLRF   xF0
095DA:  CLRF   xEF
.................... 				#endif
.................... 				}
095DC:  BRA    9664
095DE:  MOVLB  5
.................... 	 		else if ((addr_regs_modbus >= 960) && (addr_regs_modbus <= 969))
095E0:  MOVF   x2A,W
095E2:  SUBLW  02
095E4:  BC    9608
095E6:  XORLW  FF
095E8:  BNZ   95F0
095EA:  MOVF   x29,W
095EC:  SUBLW  BF
095EE:  BC    9608
095F0:  MOVF   x2A,W
095F2:  SUBLW  03
095F4:  BNC   9608
095F6:  BNZ   95FE
095F8:  MOVF   x29,W
095FA:  SUBLW  C9
095FC:  BNC   9608
.................... 	 		 	{
.................... 				#if (com_cht == true)
.................... 	 		 	 	aux_b4 = addr_regs_modbus - 960;
.................... 	 		 	 	busca_qcht();		/* entrada e saida em i	*/
.................... 	 		 	 	data1_int = CHT_cr[aux_b4];
.................... 				#else
.................... 					data1_int = 0;
095FE:  MOVLB  3
09600:  CLRF   xF0
09602:  CLRF   xEF
.................... 				#endif
.................... 				}
09604:  BRA    9664
09606:  MOVLB  5
.................... 	 		else if ((addr_regs_modbus >= 970) && (addr_regs_modbus <= 979))
09608:  MOVF   x2A,W
0960A:  SUBLW  02
0960C:  BC    9630
0960E:  XORLW  FF
09610:  BNZ   9618
09612:  MOVF   x29,W
09614:  SUBLW  C9
09616:  BC    9630
09618:  MOVF   x2A,W
0961A:  SUBLW  03
0961C:  BNC   9630
0961E:  BNZ   9626
09620:  MOVF   x29,W
09622:  SUBLW  D3
09624:  BNC   9630
.................... 	 		 	{
.................... 				#if (com_cht == true)
.................... 					#if (monofasico == false)
.................... 		 		 		aux_b4 = addr_regs_modbus - 970;
.................... 	 			 	 	busca_qcht();		/* entrada e saida em i	*/
.................... 	 			 	 	data1_int = CHT_cs[aux_b4];
.................... 					#else
.................... 					 	data1_int = 0;
.................... 					#endif
.................... 				#else
.................... 					data1_int = 0;
09626:  MOVLB  3
09628:  CLRF   xF0
0962A:  CLRF   xEF
.................... 				#endif
.................... 				}
0962C:  BRA    9664
0962E:  MOVLB  5
.................... 	 		else if ((addr_regs_modbus >= 980) && (addr_regs_modbus <= 989))
09630:  MOVF   x2A,W
09632:  SUBLW  02
09634:  BC    9658
09636:  XORLW  FF
09638:  BNZ   9640
0963A:  MOVF   x29,W
0963C:  SUBLW  D3
0963E:  BC    9658
09640:  MOVF   x2A,W
09642:  SUBLW  03
09644:  BNC   9658
09646:  BNZ   964E
09648:  MOVF   x29,W
0964A:  SUBLW  DD
0964C:  BNC   9658
.................... 	 		 	{
.................... 				#if (com_cht == true)
.................... 					#if (monofasico == false)
.................... 			 		 	 aux_b4 = addr_regs_modbus - 980;
.................... 		 			 	 busca_qcht();		/* entrada e saida em i	*/
.................... 		 			 	 data1_int = CHT_ct[aux_b4];
.................... 					#else
.................... 						data1_int = 0;
.................... 					#endif
.................... 				#else
.................... 					data1_int = 0;
0964E:  MOVLB  3
09650:  CLRF   xF0
09652:  CLRF   xEF
.................... 				#endif
.................... 				}
09654:  BRA    9664
09656:  MOVLB  5
.................... 	 	 	else
.................... 	 	 		{
.................... 	 	    	erro_mod = 1;
09658:  BSF    21.4
.................... 	 			qerro_mod = 2;
0965A:  MOVLW  02
0965C:  MOVWF  x1E
.................... 	 			data1_int = 0;
0965E:  MOVLB  3
09660:  CLRF   xF0
09662:  CLRF   xEF
09664:  MOVLB  0
.................... 	 			}
.................... 	 		}
.................... 	 	}
09666:  GOTO   A476 (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void busca_qcht(void)
.................... {	 		 	 
....................  	 if (aux_b4 == 0)
....................  	 	{
....................  	 	aux_b4 = 0;
....................  	 	}
....................  	 else if (aux_b4 == 1)
....................  	 	{
....................  	 	aux_b4 = 3;
....................  	 	}
....................  	 else if (aux_b4 == 2)
....................  	 	{
....................  	 	aux_b4 = 5;
....................  	 	}
....................  	 else if (aux_b4 == 3)
....................  	 	{
....................  	 	aux_b4 = 7;
....................  	 	}
....................  	 else if (aux_b4 == 4)
....................  	 	{
....................  	 	aux_b4 = 9;
....................  	 	}
....................  	 else if (aux_b4 == 5)
....................  	 	{
....................  	 	aux_b4 = 11;
....................  	 	}
....................  	 else if (aux_b4 == 6)
....................  	 	{
....................  	 	aux_b4 = 13;
....................  	 	}
....................  	 else if (aux_b4 == 7)
....................  	 	{
....................  	 	aux_b4  = 15;
....................  	 	}
....................  	 else if (aux_b4 == 8)
....................  	 	{
....................  	 	aux_b4 = 17;
....................  	 	}
....................  	 else
....................  	 	{
....................  	 	aux_b4 = 19;
....................  	 	}
.................... }	 		 	 
.................... 	 		 	 
.................... 
.................... #endif
.................... 
.................... 
.................... #if (chip_cs5460a == true)
.................... 	void aguarda_cruzar_zero(char);
.................... 	void le_seno(char fase);
.................... #endif
.................... 
.................... 
.................... void modbus_funcao04(void)
.................... {
.................... 	char ptrtx_old, ptrtx_regs;
.................... 	char x;
.................... 	
....................     erro_mod = 0;
*
0A24E:  BCF    21.4
.................... 	qerro_mod = 0;
0A250:  MOVLB  5
0A252:  CLRF   x1E
.................... 
.................... 	le_endereco();
0A254:  MOVLB  0
0A256:  CALL   6E36
.................... 	le_nro_pontos();
0A25A:  CALL   6E42
....................                     
.................... 	ptrtx_old = ptrtx;
0A25E:  MOVFF  52F,A4A
.................... 
....................     ptrtx++;
0A262:  MOVLB  5
0A264:  INCF   x2F,F
....................     
....................     ptrtx_regs = ptrtx;
0A266:  MOVFF  52F,A4B
.................... 
.................... 	if (addr_regs_modbus == 0)
0A26A:  MOVF   x29,F
0A26C:  BNZ   A278
0A26E:  MOVF   x2A,F
0A270:  BNZ   A278
.................... 		{
....................         erro_mod = 1;
0A272:  BSF    21.4
.................... 		qerro_mod = 2;
0A274:  MOVLW  02
0A276:  MOVWF  x1E
.................... 		}
.................... 	if (erro_mod == 0)
0A278:  BTFSC  21.4
0A27A:  BRA    A5C0
.................... 		{
.................... 		existe = 0;			    
0A27C:  BCF    21.5
.................... 		aux_b2 = addr_regs_modbus - 1;
0A27E:  MOVLW  01
0A280:  SUBWF  x29,W
0A282:  MOVLB  3
0A284:  MOVWF  xB2
.................... 		for (aux_b1 = 0; aux_b1 < nro_pontos_modbus; aux_b1++)
0A286:  CLRF   xB1
0A288:  MOVLB  5
0A28A:  MOVF   x28,F
0A28C:  BNZ   A29A
0A28E:  MOVF   x27,W
0A290:  MOVLB  3
0A292:  SUBWF  xB1,W
0A294:  BTFSC  FD8.0
0A296:  BRA    A5BE
0A298:  MOVLB  5
.................... 			{
.................... 			 if ((addr_regs_modbus >= 100) && (addr_regs_modbus <= 224))
0A29A:  MOVF   x2A,F
0A29C:  BNZ   A2A4
0A29E:  MOVF   x29,W
0A2A0:  SUBLW  63
0A2A2:  BC    A2DC
0A2A4:  MOVF   x2A,F
0A2A6:  BNZ   A2DC
0A2A8:  MOVF   x29,W
0A2AA:  SUBLW  E0
0A2AC:  BNC   A2DC
.................... 			 	 {
.................... 	 		 	aux_b3 = addr_regs_modbus - 100;	
0A2AE:  MOVLW  64
0A2B0:  SUBWF  x29,W
0A2B2:  MOVLB  3
0A2B4:  MOVWF  xB3
.................... 				#if (com_cht == true)
.................... 					#if (ade7754 == true)
.................... 						if (aux_b3 >= NRO_AMOSTRAS_CHT)
.................... 							{
.................... 							 aux_sw1 = (signed word)(buf_corrente_r[aux_b3 - NRO_AMOSTRAS_CHT]);
.................... 							 aux_sw1 = (signed word)(aux_sw1 / 8);
.................... 							data1_int = 2048 + aux_sw1;
.................... 							}
.................... 						else
.................... 							{
.................... 							aux_sw1 = (signed word)(buf_tensao_r[aux_b3]);
.................... 							aux_sw1 = (signed word)(aux_sw1 / 8);
.................... 							data1_int = 2048 + aux_sw1;
.................... 							}
.................... 					#else
.................... 						if (aux_b3 == 0)
.................... 							{
.................... 							passo_fase_cht = 0;
.................... 							#if (chip_cs5460a == true)
.................... 								lendo_cht_cs5460 = 1;
.................... 								aguarda_cruzar_zero('R');
.................... 								le_seno('R');
.................... 							#else
.................... 								le_senoide_cht_timer();
.................... 							#endif
.................... 							}
.................... 						#if (chip_cs5460a == true)
.................... 					 		aux_sw1 = (signed word)(buffer_cht_t[aux_b3]);
.................... 					 		aux_sw1 = (signed word)(aux_sw1 / 16);
.................... 							data1_int = 2048 + aux_sw1;
.................... 						#else
.................... 							#if (teste_off_set == 1)
.................... 								if (aux_b3 >= NRO_AMOSTRAS)
.................... 									{
.................... 		 					 		data1_int = buf_cor_tmp[aux_b3 - NRO_AMOSTRAS] - vref;
.................... 									}
.................... 								else
.................... 									{
.................... 		 					 		data1_int = buf_ten_tmp[aux_b3] - vref;
.................... 		 					 		}
.................... 							#else
.................... 								#if (CONTROLADOR == true)
.................... 	 						 		data1_int = buffer_cht[aux_b3];
.................... 								#else
....................  						 			data1_int = buffer_cht[aux_b3];
....................  						 		#endif
....................  						 	#endif
.................... 						#endif
.................... 					#endif
.................... 				#else
.................... //					data1_int = vref;
.................... 					#if (teste_off_set == 1)
.................... 				 		data1_int = buf_ten_tmp[aux_b3/2];
.................... 					#else
.................... 						data1_int = buf_tensao_r[aux_b3/2];
0A2B6:  BCF    FD8.0
0A2B8:  RRCF   xB3,W
0A2BA:  MOVWF  00
0A2BC:  BCF    FD8.0
0A2BE:  RLCF   00,F
0A2C0:  MOVF   00,W
0A2C2:  CLRF   03
0A2C4:  ADDLW  34
0A2C6:  MOVWF  FE9
0A2C8:  MOVLW  05
0A2CA:  ADDWFC 03,W
0A2CC:  MOVWF  FEA
0A2CE:  MOVFF  FEC,3F0
0A2D2:  MOVF   FED,F
0A2D4:  MOVFF  FEF,3EF
.................... 					#endif
.................... 				#endif
.................... 			 	 }
0A2D8:  BRA    A59E
0A2DA:  MOVLB  5
.................... 			 else if ((addr_regs_modbus >= 225) && (addr_regs_modbus <= 349))
0A2DC:  MOVF   x2A,F
0A2DE:  BNZ   A2E6
0A2E0:  MOVF   x29,W
0A2E2:  SUBLW  E0
0A2E4:  BC    A322
0A2E6:  MOVF   x2A,W
0A2E8:  SUBLW  01
0A2EA:  BNC   A322
0A2EC:  BNZ   A2F4
0A2EE:  MOVF   x29,W
0A2F0:  SUBLW  5D
0A2F2:  BNC   A322
.................... 			 	 {
....................  		 		aux_b3 = addr_regs_modbus - 225;	
0A2F4:  MOVLW  E1
0A2F6:  SUBWF  x29,W
0A2F8:  MOVLB  3
0A2FA:  MOVWF  xB3
.................... 				#if (com_cht == true)
.................... 					#if (ade7754 == true)
.................... 			 			aux_sw1 = (signed word)(buf_tensao_s[aux_b3]);
.................... 			 			aux_sw1 = (signed word)(aux_sw1 / 8);
.................... 						data1_int = 2048 + aux_sw1;
.................... 					#else
.................... 						if (aux_b3 == 0)
.................... 							{
.................... 							passo_fase_cht = 1;
.................... 							#if (chip_cs5460a == true)
.................... 								lendo_cht_cs5460 = 1;
.................... 								aguarda_cruzar_zero('S');
.................... 								le_seno('S');
.................... 							#else
.................... 								le_senoide_cht_timer();
.................... 							#endif
.................... 							}
.................... 						#if (chip_cs5460a == true)
.................... 					 		aux_sw1 = (signed word)(buffer_cht_t[aux_b3]);
.................... 					 		aux_sw1 = (signed word)(aux_sw1 / 16);
.................... 							data1_int = 2048 + aux_sw1;
.................... 						#else
.................... 							aux_b3 += (NRO_AMOSTRAS_CHT * 120 / 360);
.................... 							if (aux_b3 >= NRO_AMOSTRAS_CHT)
.................... 								{
.................... 								aux_b3 = aux_b3 - NRO_AMOSTRAS_CHT;
.................... 								}
.................... 					 		data1_int = buffer_cht[aux_b3];
.................... 						#endif
.................... 					#endif
.................... 				#else
.................... //					data1_int = vref;
.................... 					data1_int = buf_tensao_s[aux_b3/2];
0A2FC:  BCF    FD8.0
0A2FE:  RRCF   xB3,W
0A300:  MOVWF  00
0A302:  BCF    FD8.0
0A304:  RLCF   00,F
0A306:  MOVF   00,W
0A308:  CLRF   03
0A30A:  ADDLW  38
0A30C:  MOVWF  FE9
0A30E:  MOVLW  06
0A310:  ADDWFC 03,W
0A312:  MOVWF  FEA
0A314:  MOVFF  FEC,3F0
0A318:  MOVF   FED,F
0A31A:  MOVFF  FEF,3EF
.................... 				#endif
.................... 	 		 	 }
0A31E:  BRA    A59E
0A320:  MOVLB  5
.................... 	 		 else if ((addr_regs_modbus >= 350) && (addr_regs_modbus <= 474))
0A322:  MOVF   x2A,W
0A324:  SUBLW  00
0A326:  BC    A36E
0A328:  XORLW  FF
0A32A:  BNZ   A332
0A32C:  MOVF   x29,W
0A32E:  SUBLW  5D
0A330:  BC    A36E
0A332:  MOVF   x2A,W
0A334:  SUBLW  01
0A336:  BNC   A36E
0A338:  BNZ   A340
0A33A:  MOVF   x29,W
0A33C:  SUBLW  DA
0A33E:  BNC   A36E
.................... 	 		 	 {
....................  		 		aux_b3 = addr_regs_modbus - 350;	
0A340:  MOVLW  5E
0A342:  SUBWF  x29,W
0A344:  MOVLB  3
0A346:  MOVWF  xB3
.................... 				#if (com_cht == true)
.................... 					#if (ade7754 == true)
.................... 				 		aux_sw1 = (signed word)(buf_tensao_t[aux_b3]);
.................... 				 		aux_sw1 = (signed word)(aux_sw1 / 8);
.................... 						data1_int = 2048 + aux_sw1;
.................... 					#else
.................... 						if (aux_b3 == 0)
.................... 							{
.................... 							passo_fase_cht = 2;
.................... 							#if (chip_cs5460a == true)
.................... 								lendo_cht_cs5460 = 1;
.................... 								aguarda_cruzar_zero('T');
.................... 								le_seno('T');
.................... 							#else
.................... 								le_senoide_cht_timer();
.................... 							#endif
.................... 							}
.................... 						#if (chip_cs5460a == true)
.................... 					 		aux_sw1 = (signed word)(buffer_cht_t[aux_b3]);
.................... 		 					aux_sw1 = (signed word)(aux_sw1 / 16);
.................... 							data1_int = 2048 + aux_sw1;
.................... 						#else
.................... 							aux_b3 += ((NRO_AMOSTRAS_CHT * 120 / 360) * 2);
.................... 							if (aux_b3 >= NRO_AMOSTRAS_CHT)
.................... 								{
.................... 								aux_b3 = aux_b3 - NRO_AMOSTRAS_CHT;
.................... 								}
.................... 					 		data1_int = buffer_cht[aux_b3];
.................... 						#endif
.................... 					#endif
.................... 				#else
.................... //					data1_int = vref;
.................... 					data1_int = buf_tensao_t[aux_b3/2];
0A348:  BCF    FD8.0
0A34A:  RRCF   xB3,W
0A34C:  MOVWF  00
0A34E:  BCF    FD8.0
0A350:  RLCF   00,F
0A352:  MOVF   00,W
0A354:  CLRF   03
0A356:  ADDLW  BA
0A358:  MOVWF  FE9
0A35A:  MOVLW  06
0A35C:  ADDWFC 03,W
0A35E:  MOVWF  FEA
0A360:  MOVFF  FEC,3F0
0A364:  MOVF   FED,F
0A366:  MOVFF  FEF,3EF
.................... 				#endif	
.................... 	 		 	 }
0A36A:  BRA    A59E
0A36C:  MOVLB  5
.................... 	 		 else if ((addr_regs_modbus >= 475) && (addr_regs_modbus <= 599))
0A36E:  MOVF   x2A,W
0A370:  SUBLW  00
0A372:  BC    A3BA
0A374:  XORLW  FF
0A376:  BNZ   A37E
0A378:  MOVF   x29,W
0A37A:  SUBLW  DA
0A37C:  BC    A3BA
0A37E:  MOVF   x2A,W
0A380:  SUBLW  02
0A382:  BNC   A3BA
0A384:  BNZ   A38C
0A386:  MOVF   x29,W
0A388:  SUBLW  57
0A38A:  BNC   A3BA
.................... 	 		 	 {
....................  		 		aux_b3 = addr_regs_modbus - 475;	
0A38C:  MOVLW  DB
0A38E:  SUBWF  x29,W
0A390:  MOVLB  3
0A392:  MOVWF  xB3
.................... 				#if (com_cht == true)
.................... 					#if (ade7754 == true)
.................... 			 			aux_sw1 = (signed word)(buf_corrente_r[aux_b3]);
.................... 			 			aux_sw1 = (signed word)(aux_sw1 / 8);
.................... 						data1_int = 2048 + aux_sw1;
.................... 					#else
.................... 						if (aux_b3 == 0)
.................... 							{
.................... 							passo_fase_cht = 3;
.................... 							#if (chip_cs5460a == true)
.................... 								lendo_cht_cs5460 = 1;
.................... 								aguarda_cruzar_zero('R');
.................... 								le_seno('R');
.................... 							#else
.................... 								le_senoide_cht_timer();
.................... 							#endif
.................... 							}
.................... 						#if (chip_cs5460a == true)
.................... 					 		aux_sw1 = (signed word)(buffer_cht_c[aux_b3]);
.................... 					 		aux_sw1 = (signed word)(aux_sw1 / 16);
.................... 							data1_int = 2048 + aux_sw1;
.................... 						#else
.................... 					 		data1_int = buffer_cht[aux_b3];
.................... 						#endif
.................... 					#endif
.................... 				#else
.................... //					data1_int = vref;
.................... 					#if (teste_off_set == 1)
.................... 				 		data1_int = buf_cor_tmp[aux_b3/2];
.................... 					#else
.................... 						data1_int = buf_corrente_r[aux_b3/2];
0A394:  BCF    FD8.0
0A396:  RRCF   xB3,W
0A398:  MOVWF  00
0A39A:  BCF    FD8.0
0A39C:  RLCF   00,F
0A39E:  MOVF   00,W
0A3A0:  CLRF   03
0A3A2:  ADDLW  B6
0A3A4:  MOVWF  FE9
0A3A6:  MOVLW  05
0A3A8:  ADDWFC 03,W
0A3AA:  MOVWF  FEA
0A3AC:  MOVFF  FEC,3F0
0A3B0:  MOVF   FED,F
0A3B2:  MOVFF  FEF,3EF
.................... 					#endif
.................... 				#endif	
.................... 	 		 	 }
0A3B6:  BRA    A59E
0A3B8:  MOVLB  5
.................... 	 		 else if ((addr_regs_modbus >= 600) && (addr_regs_modbus <= 724))
0A3BA:  MOVF   x2A,W
0A3BC:  SUBLW  01
0A3BE:  BC    A406
0A3C0:  XORLW  FF
0A3C2:  BNZ   A3CA
0A3C4:  MOVF   x29,W
0A3C6:  SUBLW  57
0A3C8:  BC    A406
0A3CA:  MOVF   x2A,W
0A3CC:  SUBLW  02
0A3CE:  BNC   A406
0A3D0:  BNZ   A3D8
0A3D2:  MOVF   x29,W
0A3D4:  SUBLW  D4
0A3D6:  BNC   A406
.................... 	 		 	 {
.................... 	 		 		aux_b3 = addr_regs_modbus - 600;	
0A3D8:  MOVLW  58
0A3DA:  SUBWF  x29,W
0A3DC:  MOVLB  3
0A3DE:  MOVWF  xB3
.................... 				#if (com_cht == true)
.................... 					#if (ade7754 == true)
.................... 			 			aux_sw1 = (signed word)(buf_corrente_s[aux_b3]);
.................... 			 			aux_sw1 = (signed word)(aux_sw1 / 8);
.................... 						data1_int = 2048 + aux_sw1;
.................... 					#else
.................... 						if (aux_b3 == 0)
.................... 							{
.................... 							passo_fase_cht = 4;
.................... 							#if (chip_cs5460a == true)
.................... 								lendo_cht_cs5460 = 1;
.................... 								aguarda_cruzar_zero('S');
.................... 								le_seno('S');
.................... 							#else
.................... 								le_senoide_cht_timer();
.................... 							#endif
.................... 							}
.................... 						#if (chip_cs5460a == true)
.................... 					 		aux_sw1 = (signed word)(buffer_cht_c[aux_b3]);
.................... 					 		aux_sw1 = (signed word)(aux_sw1 / 16);
.................... 							data1_int = 2048 + aux_sw1;
.................... 						#else
.................... 							aux_b3 = (NRO_AMOSTRAS_CHT * 120 / 360)  + aux_b3;
.................... 							if (aux_b3 >= NRO_AMOSTRAS_CHT)
.................... 								{
.................... 								aux_b3 = aux_b3 - NRO_AMOSTRAS_CHT;
.................... 								}
.................... 					 		data1_int = buffer_cht[aux_b3];
.................... 						#endif
.................... 					#endif
.................... 				#else
.................... 					data1_int = buf_corrente_s[aux_b3/2];
0A3E0:  BCF    FD8.0
0A3E2:  RRCF   xB3,W
0A3E4:  MOVWF  00
0A3E6:  BCF    FD8.0
0A3E8:  RLCF   00,F
0A3EA:  MOVF   00,W
0A3EC:  CLRF   03
0A3EE:  ADDLW  3C
0A3F0:  MOVWF  FE9
0A3F2:  MOVLW  07
0A3F4:  ADDWFC 03,W
0A3F6:  MOVWF  FEA
0A3F8:  MOVFF  FEC,3F0
0A3FC:  MOVF   FED,F
0A3FE:  MOVFF  FEF,3EF
.................... 				#endif	
.................... 	 		 	 }
0A402:  BRA    A59E
0A404:  MOVLB  5
.................... 	 		 else if ((addr_regs_modbus >= 725) && (addr_regs_modbus <= 849))
0A406:  MOVF   x2A,W
0A408:  SUBLW  01
0A40A:  BC    A452
0A40C:  XORLW  FF
0A40E:  BNZ   A416
0A410:  MOVF   x29,W
0A412:  SUBLW  D4
0A414:  BC    A452
0A416:  MOVF   x2A,W
0A418:  SUBLW  03
0A41A:  BNC   A452
0A41C:  BNZ   A424
0A41E:  MOVF   x29,W
0A420:  SUBLW  51
0A422:  BNC   A452
.................... 	 		 	 {
.................... 	 		 	aux_b3 = addr_regs_modbus - 725;	
0A424:  MOVLW  D5
0A426:  SUBWF  x29,W
0A428:  MOVLB  3
0A42A:  MOVWF  xB3
.................... 				#if (com_cht == true)
.................... 					#if (ade7754 == true)
.................... 						aux_sw1 = (signed word)(buf_corrente_t[aux_b3]);
.................... 						aux_sw1 = (signed word)(aux_sw1 / 8);
.................... 						data1_int = 2048 + aux_sw1;
.................... 					#else
.................... 						if (aux_b3 == 0)
.................... 							{
.................... 							passo_fase_cht = 5;
.................... 							#if (chip_cs5460a == true)
.................... 								lendo_cht_cs5460 = 1;
.................... 								aguarda_cruzar_zero('T');
.................... 								le_seno('T');
.................... 							#else
.................... 								le_senoide_cht_timer();
.................... 							#endif
.................... 							}
.................... 						#if (chip_cs5460a == true)
.................... 					 		aux_sw1 = (signed word)(buffer_cht_c[aux_b3]);
.................... 					 		aux_sw1 = (signed word)(aux_sw1 / 16);
.................... 							data1_int = 2048 + aux_sw1;
.................... 						#else
.................... 							aux_b3 = ((NRO_AMOSTRAS_CHT * 120 / 360) * 2)  + aux_b3;
.................... 							if (aux_b3 >= NRO_AMOSTRAS_CHT)
.................... 								{
.................... 								aux_b3 = aux_b3 - NRO_AMOSTRAS_CHT;
.................... 								}
.................... 					 		data1_int = buffer_cht[aux_b3];
.................... 						#endif
.................... 					#endif
.................... 				#else
.................... 					data1_int = buf_corrente_t[aux_b3/2];
0A42C:  BCF    FD8.0
0A42E:  RRCF   xB3,W
0A430:  MOVWF  00
0A432:  BCF    FD8.0
0A434:  RLCF   00,F
0A436:  MOVF   00,W
0A438:  CLRF   03
0A43A:  ADDLW  BE
0A43C:  MOVWF  FE9
0A43E:  MOVLW  07
0A440:  ADDWFC 03,W
0A442:  MOVWF  FEA
0A444:  MOVFF  FEC,3F0
0A448:  MOVF   FED,F
0A44A:  MOVFF  FEF,3EF
.................... 				#endif	
.................... 	 		 	 }
.................... 			#if (com_gestal == true)
0A44E:  BRA    A59E
0A450:  MOVLB  5
....................  		 		else if ((addr_regs_modbus >= 900) && (addr_regs_modbus <= 999))
0A452:  MOVF   x2A,W
0A454:  SUBLW  02
0A456:  BC    A47A
0A458:  XORLW  FF
0A45A:  BNZ   A462
0A45C:  MOVF   x29,W
0A45E:  SUBLW  83
0A460:  BC    A47A
0A462:  MOVF   x2A,W
0A464:  SUBLW  03
0A466:  BNC   A47A
0A468:  BNZ   A470
0A46A:  MOVF   x29,W
0A46C:  SUBLW  E7
0A46E:  BNC   A47A
....................  		 			{
.................... 					tx_regs_gestal();
0A470:  MOVLB  0
0A472:  GOTO   9010
.................... 	 		 		}
.................... 	 		 #endif
.................... 			#if (com_regs == true)
0A476:  BRA    A59C
0A478:  MOVLB  5
.................... 		 		 else if ((addr_regs_modbus >= addr_inicio_coleta_regs) && (addr_regs_modbus <= (addr_inicio_coleta_regs + nro_registros_por_banco)))
0A47A:  MOVF   x2A,W
0A47C:  SUBLW  39
0A47E:  BC    A4B8
0A480:  XORLW  FF
0A482:  BNZ   A48A
0A484:  MOVF   x29,W
0A486:  SUBLW  97
0A488:  BC    A4B8
0A48A:  MOVF   x2A,W
0A48C:  SUBLW  75
0A48E:  BNC   A4B8
0A490:  BNZ   A498
0A492:  MOVF   x29,W
0A494:  SUBLW  30
0A496:  BNC   A4B8
.................... 		 		 	{
.................... 				    ptrtx = ptrtx_regs;
0A498:  MOVFF  A4B,52F
.................... 			 		 	
.................... 					tx_reg_mdb();
0A49C:  MOVLB  0
0A49E:  GOTO   966A
.................... 					aux_b1 += (nro_pontos_modbus * 2);
0A4A2:  BCF    FD8.0
0A4A4:  MOVLB  5
0A4A6:  RLCF   x27,W
0A4A8:  MOVWF  02
0A4AA:  RLCF   x28,W
0A4AC:  MOVF   02,W
0A4AE:  MOVLB  3
0A4B0:  ADDWF  xB1,F
.................... 					goto modbus_funcao04_00;
0A4B2:  BRA    A5A6
.................... 					}
0A4B4:  BRA    A59E
0A4B6:  MOVLB  5
.................... 		 		 else if ((addr_regs_modbus >= addr_inicio_coleta_ocor) && (addr_regs_modbus <= (addr_inicio_coleta_ocor + limite_ocorrencias)))
0A4B8:  MOVF   x2A,W
0A4BA:  SUBLW  74
0A4BC:  BC    A4F6
0A4BE:  XORLW  FF
0A4C0:  BNZ   A4C8
0A4C2:  MOVF   x29,W
0A4C4:  SUBLW  93
0A4C6:  BC    A4F6
0A4C8:  MOVF   x2A,W
0A4CA:  SUBLW  76
0A4CC:  BNC   A4F6
0A4CE:  BNZ   A4D6
0A4D0:  MOVF   x29,W
0A4D2:  SUBLW  8E
0A4D4:  BNC   A4F6
.................... 		 		 	{
.................... 				    ptrtx = ptrtx_regs;
0A4D6:  MOVFF  A4B,52F
.................... 				    
.................... 					tx_ocor_mdb();
0A4DA:  MOVLB  0
0A4DC:  GOTO   97BA
.................... 					aux_b1 +=  (nro_pontos_modbus * 2);
0A4E0:  BCF    FD8.0
0A4E2:  MOVLB  5
0A4E4:  RLCF   x27,W
0A4E6:  MOVWF  02
0A4E8:  RLCF   x28,W
0A4EA:  MOVF   02,W
0A4EC:  MOVLB  3
0A4EE:  ADDWF  xB1,F
.................... 					goto modbus_funcao04_00;
0A4F0:  BRA    A5A6
.................... 		 	 		}
.................... 	 	 	#endif
.................... 	 	 	#if (com_cht == true)
.................... 		 		 else if ((addr_regs_modbus >= 8000) && (addr_regs_modbus <= (8000 + limite_chts)))
.................... 		 		 	{
.................... 					#if (com_regs == true)
.................... 						tx_cht_mdb();
.................... 						aux_b1 += (nro_pontos_modbus * 2);
.................... 						goto modbus_funcao04_00;
.................... 					#else
.................... 						data1_int = 0;
.................... 					#endif				
.................... 					}
.................... 		 		else if ((addr_regs_modbus >= 9700) && (addr_regs_modbus <= 9749))
.................... 		 		 	{
.................... 		 		 	 aux_b3 = addr_regs_modbus - 9700;
.................... 		 		 	 x = 1;
.................... 		 		 	 goto cht_modb;
.................... 					}
.................... 		 		else if ((addr_regs_modbus >= 9750) && (addr_regs_modbus <= 9799))
.................... 		 		 	{
.................... 		 		 	 aux_b3 = addr_regs_modbus - 9750;
.................... 		 		 	 x = 2;
.................... 		 		 	 goto cht_modb;
.................... 					}
.................... 		 		else if ((addr_regs_modbus >= 9800) && (addr_regs_modbus <= 9849))
.................... 		 		 	{
.................... 		 		 	 aux_b3 = addr_regs_modbus - 9800;
.................... 		 		 	 x = 3;
.................... 		 		 	 goto cht_modb;
.................... 					}
.................... 		 		else if ((addr_regs_modbus >= 9850) && (addr_regs_modbus <= 9899))
.................... 		 		 	{
.................... 		 		 	 aux_b3 = addr_regs_modbus - 9850;
.................... 		 		 	 x = 4;
.................... 		 		 	 goto cht_modb;
.................... 					}
.................... 		 		else if ((addr_regs_modbus >= 9900) && (addr_regs_modbus <= 9949))
.................... 		 		 	{
.................... 		 		 	 aux_b3 = addr_regs_modbus - 9900;
.................... 		 		 	 x = 5;
.................... 		 		 	 goto cht_modb;
.................... 					}
.................... 		 		else if ((addr_regs_modbus >= 9950) && (addr_regs_modbus <= 9999))
.................... 		 		 	{
.................... 		 		 	 aux_b3 = addr_regs_modbus - 9950;
.................... 		 		 	 x = 6;
.................... 	cht_modb: 		
.................... 					switch(x)
.................... 						{
.................... 						case 1:
.................... 							{
.................... 			 		 	 	data1_int =  CHT_tr[aux_b3];
.................... 				 		 	 break;
.................... 							}
.................... 						case 2:
.................... 							{
.................... 							#if (monofasico == false)
.................... 			 		 	 		data1_int =  CHT_ts[aux_b3];
.................... 			 		 	 	#else
.................... 			 		 	 		data1_int = 0;
.................... 			 		 	 	#endif
.................... 			 		 	 	
.................... 				 		 	 break;
.................... 							}
.................... 						case 3:
.................... 							{
.................... 							#if (monofasico == false)
.................... 					 		 	 data1_int =  CHT_tt[aux_b3];
.................... 							#else
.................... 							 	data1_int = 0;
.................... 							#endif
.................... 				 		 	 break;
.................... 							}
.................... 						case 4:
.................... 							{
.................... 			 		 	 	data1_int =  CHT_cr[aux_b3];
.................... 				 		 	 break;
.................... 							}
.................... 						case 5:
.................... 							{
.................... 							#if (monofasico == false)
.................... 					 		 	 data1_int =  CHT_cs[aux_b3];
.................... 							#else
.................... 							 	data1_int = 0;
.................... 							#endif
.................... 				 		 	 break;
.................... 							}
.................... 						case 6:
.................... 							{
.................... 							#if (monofasico == false)
.................... 				 		 	 	data1_int =  CHT_ct[aux_b3];
.................... 							#else
.................... 							 	data1_int = 0;
.................... 							#endif
.................... 				 		 	 break;
.................... 							}
.................... 						} 	 
.................... 					}
.................... 			#endif
.................... 			#if (controlador == true)
.................... 				#if (st8500c == false)
0A4F2:  BRA    A59E
0A4F4:  MOVLB  5
.................... 			 		else if ((addr_regs_modbus >= 10000) && (addr_regs_modbus <= 10100))
.................... 		 			 	{
.................... 		 			 	 aux_b3 = addr_regs_modbus - 10000;
.................... 		 			 	 addr =  ee_ptr_ocor + aux_b3;
.................... 			 			 data1_int = read_byte(addr);
.................... 			 			 if (aux_b3 == 0)
.................... 							{
.................... 							if (data1_int == 0xff)
.................... 								{
.................... 								data1_int = 0;
.................... 								}
.................... 				 			 }
.................... 						}
.................... 				#endif
.................... 			 		else if ((addr_regs_modbus >= 10101) && (addr_regs_modbus <= 10116))
0A4F6:  MOVF   x2A,W
0A4F8:  SUBLW  26
0A4FA:  BC    A546
0A4FC:  XORLW  FF
0A4FE:  BNZ   A506
0A500:  MOVF   x29,W
0A502:  SUBLW  74
0A504:  BC    A546
0A506:  MOVF   x2A,W
0A508:  SUBLW  27
0A50A:  BNC   A546
0A50C:  BNZ   A514
0A50E:  MOVF   x29,W
0A510:  SUBLW  84
0A512:  BNC   A546
.................... 		 			 	{
.................... 		 			 	 aux_b3 = addr_regs_modbus - 10101;
0A514:  MOVLW  75
0A516:  SUBWF  x29,W
0A518:  MOVLB  3
0A51A:  MOVWF  xB3
.................... 			 			 addr =  ee_acionamentos + (aux_b3 * 2);
0A51C:  BCF    FD8.0
0A51E:  RLCF   xB3,W
0A520:  ADDLW  BA
0A522:  MOVWF  xED
0A524:  MOVLW  02
0A526:  MOVWF  xEE
0A528:  BTFSC  FD8.0
0A52A:  INCF   xEE,F
.................... 			 			 data1_int = read_word(addr);
0A52C:  MOVFF  3EE,A5D
0A530:  MOVFF  3ED,A5C
0A534:  MOVLB  0
0A536:  CALL   170A
0A53A:  MOVFF  02,3F0
0A53E:  MOVFF  01,3EF
.................... 						}
0A542:  BRA    A59C
0A544:  MOVLB  5
.................... 			 		else if ((addr_regs_modbus >= 10117) && (addr_regs_modbus <= 10132))
0A546:  MOVF   x2A,W
0A548:  SUBLW  26
0A54A:  BC    A596
0A54C:  XORLW  FF
0A54E:  BNZ   A556
0A550:  MOVF   x29,W
0A552:  SUBLW  84
0A554:  BC    A596
0A556:  MOVF   x2A,W
0A558:  SUBLW  27
0A55A:  BNC   A596
0A55C:  BNZ   A564
0A55E:  MOVF   x29,W
0A560:  SUBLW  94
0A562:  BNC   A596
.................... 		 			 	{
.................... 		 			 	 aux_b3 = addr_regs_modbus - 10117;
0A564:  MOVLW  85
0A566:  SUBWF  x29,W
0A568:  MOVLB  3
0A56A:  MOVWF  xB3
.................... 			 			 addr =  ee_horimetro + (aux_b3 * 2);
0A56C:  BCF    FD8.0
0A56E:  RLCF   xB3,W
0A570:  ADDLW  9A
0A572:  MOVWF  xED
0A574:  MOVLW  02
0A576:  MOVWF  xEE
0A578:  BTFSC  FD8.0
0A57A:  INCF   xEE,F
.................... 			 			 data1_int = read_word(addr);
0A57C:  MOVFF  3EE,A5D
0A580:  MOVFF  3ED,A5C
0A584:  MOVLB  0
0A586:  CALL   170A
0A58A:  MOVFF  02,3F0
0A58E:  MOVFF  01,3EF
.................... 						}
.................... 			#endif
0A592:  BRA    A59C
0A594:  MOVLB  5
.................... 	 	 	else
.................... 				{
.................... 				le_word_vars_modbus();
0A596:  MOVLB  0
0A598:  GOTO   98BA
0A59C:  MOVLB  3
.................... 				}
.................... 			poe_word_buftx();
0A59E:  MOVLB  0
0A5A0:  CALL   6E7E
0A5A4:  MOVLB  3
.................... modbus_funcao04_00:
.................... 			addr_regs_modbus++;
0A5A6:  MOVLB  5
0A5A8:  INCF   x29,F
0A5AA:  BTFSC  FD8.2
0A5AC:  INCF   x2A,F
.................... 			if (erro_mod == 1)
0A5AE:  BTFSS  21.4
0A5B0:  BRA    A5B8
.................... 				{
.................... 				break;
0A5B2:  MOVLB  3
0A5B4:  BRA    A5BE
0A5B6:  MOVLB  5
.................... 				}
0A5B8:  MOVLB  3
0A5BA:  INCF   xB1,F
0A5BC:  BRA    A288
0A5BE:  MOVLB  5
.................... 			}    
.................... 		}
.................... 	buf_tx[ptrtx_old] = nro_pontos_modbus * 2;  /* monta nro de pontos */
0A5C0:  MOVLW  48
0A5C2:  MOVLB  A
0A5C4:  ADDWF  x4A,W
0A5C6:  MOVWF  FE9
0A5C8:  MOVLW  09
0A5CA:  MOVWF  FEA
0A5CC:  BTFSC  FD8.0
0A5CE:  INCF   FEA,F
0A5D0:  BCF    FD8.0
0A5D2:  MOVLB  5
0A5D4:  RLCF   x27,W
0A5D6:  MOVWF  02
0A5D8:  RLCF   x28,W
0A5DA:  MOVFF  02,FEF
.................... 
....................  	if (erro_mod == 1)
0A5DE:  BTFSS  21.4
0A5E0:  BRA    A5F0
....................  		{
.................... 		buf_tx[1] = buf_tx[1] | 0x80;
0A5E2:  MOVLB  9
0A5E4:  BSF    x49.7
.................... 		buf_tx[2] = qerro_mod;
0A5E6:  MOVFF  51E,94A
.................... 		ptrtx = 3;
0A5EA:  MOVLW  03
0A5EC:  MOVLB  5
0A5EE:  MOVWF  x2F
....................  		}
....................  		
.................... 	crc_modbus =  crc16(buf_tx, ptrtx, 'M');
0A5F0:  MOVLW  09
0A5F2:  MOVLB  A
0A5F4:  MOVWF  x51
0A5F6:  MOVLW  48
0A5F8:  MOVWF  x50
0A5FA:  MOVFF  52F,A52
0A5FE:  MOVLW  4D
0A600:  MOVWF  x53
0A602:  MOVLB  0
0A604:  CALL   6D6E
0A608:  MOVFF  02,526
0A60C:  MOVFF  01,525
.................... 	data1_int = crc_modbus;
0A610:  MOVFF  526,3F0
0A614:  MOVFF  525,3EF
.................... 	poe_word_buftx();
0A618:  CALL   6E7E
.................... 	dispara_tx();
0A61C:  CALL   6EE4
0A620:  GOTO   E05E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 	 
.................... 
.................... #include <st_fun05.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_fun05                                                        *
.................... ; Funcao: MODULO gerencial de funções 05 modbus					 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... void modbus_funcao05(void)
.................... {
.................... 	le_endereco();
*
0B2B2:  CALL   6E36
.................... 	le_forcedata();
0B2B6:  GOTO   A624
.................... 
....................     erro_mod = 0;
0B2BA:  BCF    21.4
.................... 	qerro_mod = 0;
0B2BC:  MOVLB  5
0B2BE:  CLRF   x1E
.................... 
.................... 	data1_int = addr_regs_modbus;
0B2C0:  MOVFF  52A,3F0
0B2C4:  MOVFF  529,3EF
....................  	poe_word_buftx();
0B2C8:  MOVLB  0
0B2CA:  CALL   6E7E
.................... 				 	
.................... 	data1_int = force_data_modbus;
0B2CE:  MOVFF  524,3F0
0B2D2:  MOVFF  523,3EF
....................  	poe_word_buftx();
0B2D6:  CALL   6E7E
.................... 
.................... 	#if (st5x == true)
.................... 		if (force_data_modbus == 0x1010)
.................... 			{
.................... 			switch(addr_regs_modbus)
.................... 				{
.................... 		 	    case 0:
.................... 		 	    	{
.................... 					if (bloqueio_gravacao == 67)
.................... 						{
.................... 						bloqueio_gravacao = 0;
.................... 						}
.................... 					else
.................... 						{
.................... 						bloqueio_gravacao = 67;
.................... 						}
.................... 					write_byte(ee_bloqueio_gravacao, bloqueio_gravacao);
.................... 					break;
.................... 					}
.................... 			 	default:
.................... 			 		{
.................... 		 		    erro_mod = 1;
.................... 		 			qerro_mod = 2;
.................... 			 		}
.................... 				}
.................... 			}
.................... 		else if (force_data_modbus == 0xff00)
.................... 	#else
.................... 		if (force_data_modbus == 0xff00)
0B2DA:  MOVLB  5
0B2DC:  MOVF   x23,F
0B2DE:  BTFSS  FD8.2
0B2E0:  GOTO   B9FC
0B2E4:  INCFSZ x24,W
0B2E6:  GOTO   B9FC
.................... 	#endif
.................... 		{
.................... 		switch(addr_regs_modbus)
0B2EA:  MOVF   x29,W
0B2EC:  MOVWF  00
0B2EE:  MOVF   x2A,W
0B2F0:  MOVWF  03
0B2F2:  MOVF   03,W
0B2F4:  BNZ   B300
0B2F6:  MOVF   00,F
0B2F8:  MOVLB  0
0B2FA:  BTFSC  FD8.2
0B2FC:  BRA    B752
0B2FE:  MOVLB  5
0B300:  MOVF   03,W
0B302:  BNZ   B310
0B304:  MOVLW  01
0B306:  SUBWF  00,W
0B308:  MOVLB  0
0B30A:  BTFSC  FD8.2
0B30C:  BRA    B78C
0B30E:  MOVLB  5
0B310:  MOVF   03,W
0B312:  BNZ   B320
0B314:  MOVLW  02
0B316:  SUBWF  00,W
0B318:  MOVLB  0
0B31A:  BTFSC  FD8.2
0B31C:  BRA    B7BC
0B31E:  MOVLB  5
0B320:  MOVF   03,W
0B322:  BNZ   B330
0B324:  MOVLW  09
0B326:  SUBWF  00,W
0B328:  MOVLB  0
0B32A:  BTFSC  FD8.2
0B32C:  BRA    B7EC
0B32E:  MOVLB  5
0B330:  MOVF   03,W
0B332:  BNZ   B340
0B334:  MOVLW  0A
0B336:  SUBWF  00,W
0B338:  MOVLB  0
0B33A:  BTFSC  FD8.2
0B33C:  BRA    B82C
0B33E:  MOVLB  5
0B340:  MOVF   03,W
0B342:  BNZ   B350
0B344:  MOVLW  64
0B346:  SUBWF  00,W
0B348:  MOVLB  0
0B34A:  BTFSC  FD8.2
0B34C:  BRA    B836
0B34E:  MOVLB  5
0B350:  MOVLW  03
0B352:  SUBWF  03,W
0B354:  BNZ   B362
0B356:  MOVLW  E8
0B358:  SUBWF  00,W
0B35A:  MOVLB  0
0B35C:  BTFSC  FD8.2
0B35E:  BRA    B840
0B360:  MOVLB  5
0B362:  MOVLW  03
0B364:  SUBWF  03,W
0B366:  BNZ   B374
0B368:  MOVLW  E9
0B36A:  SUBWF  00,W
0B36C:  MOVLB  0
0B36E:  BTFSC  FD8.2
0B370:  BRA    B846
0B372:  MOVLB  5
0B374:  MOVLW  03
0B376:  SUBWF  03,W
0B378:  BNZ   B386
0B37A:  MOVLW  E7
0B37C:  SUBWF  00,W
0B37E:  MOVLB  0
0B380:  BTFSC  FD8.2
0B382:  BRA    B850
0B384:  MOVLB  5
0B386:  MOVLW  03
0B388:  SUBWF  03,W
0B38A:  BNZ   B398
0B38C:  MOVLW  F2
0B38E:  SUBWF  00,W
0B390:  MOVLB  0
0B392:  BTFSC  FD8.2
0B394:  BRA    B85A
0B396:  MOVLB  5
0B398:  MOVLW  03
0B39A:  SUBWF  03,W
0B39C:  BNZ   B3AA
0B39E:  MOVLW  F3
0B3A0:  SUBWF  00,W
0B3A2:  MOVLB  0
0B3A4:  BTFSC  FD8.2
0B3A6:  BRA    B868
0B3A8:  MOVLB  5
0B3AA:  MOVLW  03
0B3AC:  SUBWF  03,W
0B3AE:  BNZ   B3BC
0B3B0:  MOVLW  F4
0B3B2:  SUBWF  00,W
0B3B4:  MOVLB  0
0B3B6:  BTFSC  FD8.2
0B3B8:  BRA    B868
0B3BA:  MOVLB  5
0B3BC:  MOVLW  03
0B3BE:  SUBWF  03,W
0B3C0:  BNZ   B3CE
0B3C2:  MOVLW  F5
0B3C4:  SUBWF  00,W
0B3C6:  MOVLB  0
0B3C8:  BTFSC  FD8.2
0B3CA:  BRA    B868
0B3CC:  MOVLB  5
0B3CE:  MOVLW  03
0B3D0:  SUBWF  03,W
0B3D2:  BNZ   B3E0
0B3D4:  MOVLW  F6
0B3D6:  SUBWF  00,W
0B3D8:  MOVLB  0
0B3DA:  BTFSC  FD8.2
0B3DC:  BRA    B868
0B3DE:  MOVLB  5
0B3E0:  MOVLW  03
0B3E2:  SUBWF  03,W
0B3E4:  BNZ   B3F2
0B3E6:  MOVLW  F7
0B3E8:  SUBWF  00,W
0B3EA:  MOVLB  0
0B3EC:  BTFSC  FD8.2
0B3EE:  BRA    B868
0B3F0:  MOVLB  5
0B3F2:  MOVLW  03
0B3F4:  SUBWF  03,W
0B3F6:  BNZ   B404
0B3F8:  MOVLW  F8
0B3FA:  SUBWF  00,W
0B3FC:  MOVLB  0
0B3FE:  BTFSC  FD8.2
0B400:  BRA    B868
0B402:  MOVLB  5
0B404:  MOVLW  03
0B406:  SUBWF  03,W
0B408:  BNZ   B416
0B40A:  MOVLW  F9
0B40C:  SUBWF  00,W
0B40E:  MOVLB  0
0B410:  BTFSC  FD8.2
0B412:  BRA    B868
0B414:  MOVLB  5
0B416:  MOVLW  03
0B418:  SUBWF  03,W
0B41A:  BNZ   B428
0B41C:  MOVLW  FA
0B41E:  SUBWF  00,W
0B420:  MOVLB  0
0B422:  BTFSC  FD8.2
0B424:  BRA    B868
0B426:  MOVLB  5
0B428:  MOVLW  03
0B42A:  SUBWF  03,W
0B42C:  BNZ   B43A
0B42E:  MOVLW  FB
0B430:  SUBWF  00,W
0B432:  MOVLB  0
0B434:  BTFSC  FD8.2
0B436:  BRA    B868
0B438:  MOVLB  5
0B43A:  MOVLW  03
0B43C:  SUBWF  03,W
0B43E:  BNZ   B44C
0B440:  MOVLW  FC
0B442:  SUBWF  00,W
0B444:  MOVLB  0
0B446:  BTFSC  FD8.2
0B448:  BRA    B868
0B44A:  MOVLB  5
0B44C:  MOVLW  03
0B44E:  SUBWF  03,W
0B450:  BNZ   B45E
0B452:  MOVLW  FD
0B454:  SUBWF  00,W
0B456:  MOVLB  0
0B458:  BTFSC  FD8.2
0B45A:  BRA    B868
0B45C:  MOVLB  5
0B45E:  MOVLW  03
0B460:  SUBWF  03,W
0B462:  BNZ   B470
0B464:  MOVLW  FE
0B466:  SUBWF  00,W
0B468:  MOVLB  0
0B46A:  BTFSC  FD8.2
0B46C:  BRA    B868
0B46E:  MOVLB  5
0B470:  MOVLW  03
0B472:  SUBWF  03,W
0B474:  BNZ   B482
0B476:  MOVLW  FF
0B478:  SUBWF  00,W
0B47A:  MOVLB  0
0B47C:  BTFSC  FD8.2
0B47E:  BRA    B868
0B480:  MOVLB  5
0B482:  MOVLW  04
0B484:  SUBWF  03,W
0B486:  BNZ   B492
0B488:  MOVF   00,F
0B48A:  MOVLB  0
0B48C:  BTFSC  FD8.2
0B48E:  BRA    B868
0B490:  MOVLB  5
0B492:  MOVLW  04
0B494:  SUBWF  03,W
0B496:  BNZ   B4A4
0B498:  MOVLW  01
0B49A:  SUBWF  00,W
0B49C:  MOVLB  0
0B49E:  BTFSC  FD8.2
0B4A0:  BRA    B868
0B4A2:  MOVLB  5
0B4A4:  MOVLW  04
0B4A6:  SUBWF  03,W
0B4A8:  BNZ   B4B6
0B4AA:  MOVLW  02
0B4AC:  SUBWF  00,W
0B4AE:  MOVLB  0
0B4B0:  BTFSC  FD8.2
0B4B2:  BRA    B868
0B4B4:  MOVLB  5
0B4B6:  MOVLW  04
0B4B8:  SUBWF  03,W
0B4BA:  BNZ   B4C8
0B4BC:  MOVLW  07
0B4BE:  SUBWF  00,W
0B4C0:  MOVLB  0
0B4C2:  BTFSC  FD8.2
0B4C4:  BRA    B892
0B4C6:  MOVLB  5
0B4C8:  MOVLW  04
0B4CA:  SUBWF  03,W
0B4CC:  BNZ   B4DA
0B4CE:  MOVLW  08
0B4D0:  SUBWF  00,W
0B4D2:  MOVLB  0
0B4D4:  BTFSC  FD8.2
0B4D6:  BRA    B892
0B4D8:  MOVLB  5
0B4DA:  MOVLW  04
0B4DC:  SUBWF  03,W
0B4DE:  BNZ   B4EC
0B4E0:  MOVLW  09
0B4E2:  SUBWF  00,W
0B4E4:  MOVLB  0
0B4E6:  BTFSC  FD8.2
0B4E8:  BRA    B892
0B4EA:  MOVLB  5
0B4EC:  MOVLW  04
0B4EE:  SUBWF  03,W
0B4F0:  BNZ   B4FE
0B4F2:  MOVLW  0A
0B4F4:  SUBWF  00,W
0B4F6:  MOVLB  0
0B4F8:  BTFSC  FD8.2
0B4FA:  BRA    B892
0B4FC:  MOVLB  5
0B4FE:  MOVLW  04
0B500:  SUBWF  03,W
0B502:  BNZ   B510
0B504:  MOVLW  0B
0B506:  SUBWF  00,W
0B508:  MOVLB  0
0B50A:  BTFSC  FD8.2
0B50C:  BRA    B892
0B50E:  MOVLB  5
0B510:  MOVLW  04
0B512:  SUBWF  03,W
0B514:  BNZ   B522
0B516:  MOVLW  0C
0B518:  SUBWF  00,W
0B51A:  MOVLB  0
0B51C:  BTFSC  FD8.2
0B51E:  BRA    B892
0B520:  MOVLB  5
0B522:  MOVLW  04
0B524:  SUBWF  03,W
0B526:  BNZ   B534
0B528:  MOVLW  0D
0B52A:  SUBWF  00,W
0B52C:  MOVLB  0
0B52E:  BTFSC  FD8.2
0B530:  BRA    B892
0B532:  MOVLB  5
0B534:  MOVLW  04
0B536:  SUBWF  03,W
0B538:  BNZ   B546
0B53A:  MOVLW  0E
0B53C:  SUBWF  00,W
0B53E:  MOVLB  0
0B540:  BTFSC  FD8.2
0B542:  BRA    B892
0B544:  MOVLB  5
0B546:  MOVLW  04
0B548:  SUBWF  03,W
0B54A:  BNZ   B558
0B54C:  MOVLW  0F
0B54E:  SUBWF  00,W
0B550:  MOVLB  0
0B552:  BTFSC  FD8.2
0B554:  BRA    B892
0B556:  MOVLB  5
0B558:  MOVLW  04
0B55A:  SUBWF  03,W
0B55C:  BNZ   B56A
0B55E:  MOVLW  10
0B560:  SUBWF  00,W
0B562:  MOVLB  0
0B564:  BTFSC  FD8.2
0B566:  BRA    B892
0B568:  MOVLB  5
0B56A:  MOVLW  04
0B56C:  SUBWF  03,W
0B56E:  BNZ   B57C
0B570:  MOVLW  11
0B572:  SUBWF  00,W
0B574:  MOVLB  0
0B576:  BTFSC  FD8.2
0B578:  BRA    B892
0B57A:  MOVLB  5
0B57C:  MOVLW  04
0B57E:  SUBWF  03,W
0B580:  BNZ   B58E
0B582:  MOVLW  12
0B584:  SUBWF  00,W
0B586:  MOVLB  0
0B588:  BTFSC  FD8.2
0B58A:  BRA    B892
0B58C:  MOVLB  5
0B58E:  MOVLW  04
0B590:  SUBWF  03,W
0B592:  BNZ   B5A0
0B594:  MOVLW  13
0B596:  SUBWF  00,W
0B598:  MOVLB  0
0B59A:  BTFSC  FD8.2
0B59C:  BRA    B892
0B59E:  MOVLB  5
0B5A0:  MOVLW  04
0B5A2:  SUBWF  03,W
0B5A4:  BNZ   B5B2
0B5A6:  MOVLW  14
0B5A8:  SUBWF  00,W
0B5AA:  MOVLB  0
0B5AC:  BTFSC  FD8.2
0B5AE:  BRA    B892
0B5B0:  MOVLB  5
0B5B2:  MOVLW  04
0B5B4:  SUBWF  03,W
0B5B6:  BNZ   B5C4
0B5B8:  MOVLW  15
0B5BA:  SUBWF  00,W
0B5BC:  MOVLB  0
0B5BE:  BTFSC  FD8.2
0B5C0:  BRA    B892
0B5C2:  MOVLB  5
0B5C4:  MOVLW  04
0B5C6:  SUBWF  03,W
0B5C8:  BNZ   B5D6
0B5CA:  MOVLW  16
0B5CC:  SUBWF  00,W
0B5CE:  MOVLB  0
0B5D0:  BTFSC  FD8.2
0B5D2:  BRA    B892
0B5D4:  MOVLB  5
0B5D6:  MOVLW  04
0B5D8:  SUBWF  03,W
0B5DA:  BNZ   B5E8
0B5DC:  MOVLW  4D
0B5DE:  SUBWF  00,W
0B5E0:  MOVLB  0
0B5E2:  BTFSC  FD8.2
0B5E4:  BRA    B8AC
0B5E6:  MOVLB  5
0B5E8:  MOVLW  04
0B5EA:  SUBWF  03,W
0B5EC:  BNZ   B5FA
0B5EE:  MOVLW  56
0B5F0:  SUBWF  00,W
0B5F2:  MOVLB  0
0B5F4:  BTFSC  FD8.2
0B5F6:  BRA    B8AC
0B5F8:  MOVLB  5
0B5FA:  MOVLW  04
0B5FC:  SUBWF  03,W
0B5FE:  BNZ   B60C
0B600:  MOVLW  57
0B602:  SUBWF  00,W
0B604:  MOVLB  0
0B606:  BTFSC  FD8.2
0B608:  BRA    B8AC
0B60A:  MOVLB  5
0B60C:  MOVLW  07
0B60E:  SUBWF  03,W
0B610:  BNZ   B61E
0B612:  MOVLW  D1
0B614:  SUBWF  00,W
0B616:  MOVLB  0
0B618:  BTFSC  FD8.2
0B61A:  BRA    B8AC
0B61C:  MOVLB  5
0B61E:  MOVLW  07
0B620:  SUBWF  03,W
0B622:  BNZ   B630
0B624:  MOVLW  D2
0B626:  SUBWF  00,W
0B628:  MOVLB  0
0B62A:  BTFSC  FD8.2
0B62C:  BRA    B8AC
0B62E:  MOVLB  5
0B630:  MOVLW  07
0B632:  SUBWF  03,W
0B634:  BNZ   B642
0B636:  MOVLW  D0
0B638:  SUBWF  00,W
0B63A:  MOVLB  0
0B63C:  BTFSC  FD8.2
0B63E:  BRA    B8B2
0B640:  MOVLB  5
0B642:  MOVLW  07
0B644:  SUBWF  03,W
0B646:  BNZ   B654
0B648:  MOVLW  D3
0B64A:  SUBWF  00,W
0B64C:  MOVLB  0
0B64E:  BTFSC  FD8.2
0B650:  BRA    B8D8
0B652:  MOVLB  5
0B654:  MOVLW  07
0B656:  SUBWF  03,W
0B658:  BNZ   B666
0B65A:  MOVLW  D6
0B65C:  SUBWF  00,W
0B65E:  MOVLB  0
0B660:  BTFSC  FD8.2
0B662:  BRA    B8D8
0B664:  MOVLB  5
0B666:  MOVLW  07
0B668:  SUBWF  03,W
0B66A:  BNZ   B678
0B66C:  MOVLW  D4
0B66E:  SUBWF  00,W
0B670:  MOVLB  0
0B672:  BTFSC  FD8.2
0B674:  BRA    B8F4
0B676:  MOVLB  5
0B678:  MOVLW  07
0B67A:  SUBWF  03,W
0B67C:  BNZ   B68A
0B67E:  MOVLW  D7
0B680:  SUBWF  00,W
0B682:  MOVLB  0
0B684:  BTFSC  FD8.2
0B686:  BRA    B8F4
0B688:  MOVLB  5
0B68A:  MOVLW  07
0B68C:  SUBWF  03,W
0B68E:  BNZ   B69C
0B690:  MOVLW  D5
0B692:  SUBWF  00,W
0B694:  MOVLB  0
0B696:  BTFSC  FD8.2
0B698:  BRA    B910
0B69A:  MOVLB  5
0B69C:  MOVLW  07
0B69E:  SUBWF  03,W
0B6A0:  BNZ   B6AE
0B6A2:  MOVLW  D8
0B6A4:  SUBWF  00,W
0B6A6:  MOVLB  0
0B6A8:  BTFSC  FD8.2
0B6AA:  BRA    B910
0B6AC:  MOVLB  5
0B6AE:  MOVLW  07
0B6B0:  SUBWF  03,W
0B6B2:  BNZ   B6C0
0B6B4:  MOVLW  D9
0B6B6:  SUBWF  00,W
0B6B8:  MOVLB  0
0B6BA:  BTFSC  FD8.2
0B6BC:  BRA    B92C
0B6BE:  MOVLB  5
0B6C0:  MOVLW  07
0B6C2:  SUBWF  03,W
0B6C4:  BNZ   B6D2
0B6C6:  MOVLW  DA
0B6C8:  SUBWF  00,W
0B6CA:  MOVLB  0
0B6CC:  BTFSC  FD8.2
0B6CE:  BRA    B948
0B6D0:  MOVLB  5
0B6D2:  MOVLW  07
0B6D4:  SUBWF  03,W
0B6D6:  BNZ   B6E4
0B6D8:  MOVLW  DB
0B6DA:  SUBWF  00,W
0B6DC:  MOVLB  0
0B6DE:  BTFSC  FD8.2
0B6E0:  BRA    B964
0B6E2:  MOVLB  5
0B6E4:  MOVLW  08
0B6E6:  SUBWF  03,W
0B6E8:  BNZ   B6F6
0B6EA:  MOVLW  02
0B6EC:  SUBWF  00,W
0B6EE:  MOVLB  0
0B6F0:  BTFSC  FD8.2
0B6F2:  BRA    B980
0B6F4:  MOVLB  5
0B6F6:  MOVLW  08
0B6F8:  SUBWF  03,W
0B6FA:  BNZ   B708
0B6FC:  MOVLW  03
0B6FE:  SUBWF  00,W
0B700:  MOVLB  0
0B702:  BTFSC  FD8.2
0B704:  BRA    B99C
0B706:  MOVLB  5
0B708:  MOVLW  08
0B70A:  SUBWF  03,W
0B70C:  BNZ   B71A
0B70E:  MOVLW  04
0B710:  SUBWF  00,W
0B712:  MOVLB  0
0B714:  BTFSC  FD8.2
0B716:  BRA    B9B8
0B718:  MOVLB  5
0B71A:  MOVLW  1F
0B71C:  SUBWF  03,W
0B71E:  BNZ   B72C
0B720:  MOVLW  40
0B722:  SUBWF  00,W
0B724:  MOVLB  0
0B726:  BTFSC  FD8.2
0B728:  BRA    B9D4
0B72A:  MOVLB  5
0B72C:  MOVLW  23
0B72E:  SUBWF  03,W
0B730:  BNZ   B73E
0B732:  MOVLW  28
0B734:  SUBWF  00,W
0B736:  MOVLB  0
0B738:  BTFSC  FD8.2
0B73A:  BRA    B9DE
0B73C:  MOVLB  5
0B73E:  MOVLW  27
0B740:  SUBWF  03,W
0B742:  BNZ   B750
0B744:  MOVLW  0F
0B746:  SUBWF  00,W
0B748:  MOVLB  0
0B74A:  BTFSC  FD8.2
0B74C:  BRA    B9E6
0B74E:  MOVLB  5
0B750:  BRA    B9F0
.................... 			{
.................... 	 	    case 0:  		/* reset equipamento */
.................... 	 	    	{
.................... 				crc_modbus =  crc16(buf_tx, ptrtx, 'M');
0B752:  MOVLW  09
0B754:  MOVLB  A
0B756:  MOVWF  x51
0B758:  MOVLW  48
0B75A:  MOVWF  x50
0B75C:  MOVFF  52F,A52
0B760:  MOVLW  4D
0B762:  MOVWF  x53
0B764:  MOVLB  0
0B766:  CALL   6D6E
0B76A:  MOVFF  02,526
0B76E:  MOVFF  01,525
.................... 				data1_int = crc_modbus;
0B772:  MOVFF  526,3F0
0B776:  MOVFF  525,3EF
.................... 				poe_word_buftx();
0B77A:  CALL   6E7E
.................... 				dispara_tx();
0B77E:  CALL   6EE4
.................... 				var_mem = 0;
0B782:  MOVLB  3
0B784:  CLRF   xB6
.................... 				while(1)
.................... 					{
.................... 					reset_cpu();
0B786:  RESET
0B788:  BRA    B786
.................... 					}
.................... 	 	    	}
....................                 break;
0B78A:  BRA    B9F8
.................... 	 	    case 1:
.................... 	 	    	{
.................... 				#if (com_regs == true)
.................... 		 	    	if (registro == 0)
0B78C:  MOVLB  4
0B78E:  MOVF   xCC,F
0B790:  BNZ   B7B6
.................... 		 	    		{
.................... 						registro = 1;
0B792:  MOVLW  01
0B794:  MOVWF  xCC
.................... 						write_byte(ee_registro, registro);
0B796:  MOVLB  A
0B798:  CLRF   x68
0B79A:  MOVLW  2F
0B79C:  MOVWF  x67
0B79E:  MOVFF  4CC,A69
0B7A2:  MOVLB  0
0B7A4:  CALL   1C46
.................... 						grava_registros(reg_inicio);
0B7A8:  MOVLW  1A
0B7AA:  MOVLB  A
0B7AC:  MOVWF  x4A
0B7AE:  MOVLB  0
0B7B0:  CALL   5F70
0B7B4:  MOVLB  4
.................... 						#if (portatil == true)
.................... 							calcula_autonomia();
.................... 							encerra_menus();
.................... 						#endif
.................... 			 	 	   }
.................... 				#endif			 	    
.................... 			 	break;
0B7B6:  MOVLB  3
0B7B8:  BRA    B9F8
0B7BA:  MOVLB  0
.................... 		 	    }
.................... 	 	    case 2:
.................... 	 	    	{
.................... 				#if (com_regs == true)
.................... 		 	    	if (registro == 1)
0B7BC:  MOVLB  4
0B7BE:  DECFSZ xCC,W
0B7C0:  BRA    B7E6
.................... 		 	    		{
.................... 						grava_registros(reg_final);
0B7C2:  MOVLW  1B
0B7C4:  MOVLB  A
0B7C6:  MOVWF  x4A
0B7C8:  MOVLB  0
0B7CA:  CALL   5F70
.................... 						registro = 0;
0B7CE:  MOVLB  4
0B7D0:  CLRF   xCC
.................... 						write_byte(ee_registro, registro);
0B7D2:  MOVLB  A
0B7D4:  CLRF   x68
0B7D6:  MOVLW  2F
0B7D8:  MOVWF  x67
0B7DA:  MOVFF  4CC,A69
0B7DE:  MOVLB  0
0B7E0:  CALL   1C46
0B7E4:  MOVLB  4
.................... 						#if (portatil == true)
.................... 							calcula_autonomia();
.................... 							encerra_menus();
.................... 						#endif
.................... 			 	    	}
.................... 				#endif			 	    
.................... 			 	break;
0B7E6:  MOVLB  3
0B7E8:  BRA    B9F8
0B7EA:  MOVLB  0
.................... 		 	    }
.................... 		 	#if (st8500c == true)
.................... 		 		case 9:
.................... 		 			{
.................... 			 		if (fprintar == true)
0B7EC:  BTFSS  26.5
0B7EE:  BRA    B7F4
.................... 			 			{
.................... 				 		fprintar = false;
0B7F0:  BCF    26.5
.................... 				 		}
0B7F2:  BRA    B826
.................... 				 	else
.................... 				 		{
.................... 					 	fprintar = true;
0B7F4:  BSF    26.5
.................... 						output_high(direcao);
0B7F6:  BCF    F98.3
0B7F8:  BSF    F8F.3
.................... 						delay_ms(1);
0B7FA:  MOVLW  01
0B7FC:  MOVLB  A
0B7FE:  MOVWF  x67
0B800:  MOVLB  0
0B802:  CALL   1834
.................... 						printf("Printar REP TRUE!!!\r\n");
0B806:  MOVLW  D8
0B808:  MOVWF  FF6
0B80A:  MOVLW  12
0B80C:  MOVWF  FF7
0B80E:  MOVLW  00
0B810:  MOVWF  FF8
0B812:  GOTO   A634
.................... 						delay_ms(1);
0B816:  MOVLW  01
0B818:  MOVLB  A
0B81A:  MOVWF  x67
0B81C:  MOVLB  0
0B81E:  CALL   1834
.................... 						output_low(direcao);
0B822:  BCF    F98.3
0B824:  BCF    F8F.3
.................... 					 	}
.................... 					 break;
0B826:  MOVLB  3
0B828:  BRA    B9F8
0B82A:  MOVLB  0
.................... 			 		}
.................... 		 	#endif
.................... 	 	    case 10:
.................... 	 	    	{
.................... 				#if (com_regs == true)
.................... 	 	    		apaga_registros();
0B82C:  GOTO   A660
.................... 				#endif	 	    	
.................... 	            break;
0B830:  MOVLB  3
0B832:  BRA    B9F8
0B834:  MOVLB  0
.................... 	 	    	}
.................... 	 	    case 100:
.................... 	 	    	{
.................... 				#if (com_regs == true)
.................... 					apaga_ocorrencias();
0B836:  CALL   A6FC
.................... 				#endif				
.................... 	 	    	break;
0B83A:  MOVLB  3
0B83C:  BRA    B9F8
0B83E:  MOVLB  0
.................... 	 	    	}
.................... 	 	    case 1000:
.................... 		    	{
.................... 				#if (com_regs == true)
.................... 					#if (com_cht == true)
.................... 		 	    		apaga_cht();
.................... 					#endif
.................... 				#endif
.................... 	 	    	break;
0B840:  MOVLB  3
0B842:  BRA    B9F8
0B844:  MOVLB  0
.................... 	 	    	}
.................... 	 	    case 1001:
.................... 	 	    	{
.................... 				#if (com_consumo == true) && (st8500c == false)
.................... 	 	    		zera_consumo();
.................... 				#elif (st8500c == true)
.................... 					#if (com_tc == true)
.................... 						#if (com_rep == true)
.................... 							if (modo_rep == true)
.................... 								{
.................... 				 	    		zera_consumo_rep();
.................... 								}
.................... 							else
.................... 								{
.................... 				 	    		zera_consumo();
.................... 								}
.................... 						#else
.................... 			 	    		zera_consumo();
0B846:  GOTO   A7AA
.................... 						#endif
.................... 					#else
.................... 	 	    			zera_consumo_rep();
.................... 	 	    		#endif
.................... 				#endif	 	    	
.................... 	 	    	break;
0B84A:  MOVLB  3
0B84C:  BRA    B9F8
0B84E:  MOVLB  0
.................... 	 	    	}
.................... 	 	    case 999:
.................... 	 	    	{
....................     	 	    assume_defaults();	
0B850:  CALL   2B4A
.................... 	 	    	break;
0B854:  MOVLB  3
0B856:  BRA    B9F8
0B858:  MOVLB  0
.................... 	 	    	}
.................... 	 	    case 1010:
.................... 	 	    	{
.................... 	 	    	output_high(alarme);
0B85A:  BCF    F98.0
0B85C:  BSF    F8F.0
.................... 	 	    	tem_alarme = 1;
0B85E:  BSF    22.4
.................... 				tem_comando_alarme = 1;
0B860:  BSF    24.2
.................... 				#if (st5x == true)
.................... 					fled_alarme = 0;
.................... 					status_flags = 13;
.................... 				#endif		
.................... 	 	    	break;
0B862:  MOVLB  3
0B864:  BRA    B9F8
0B866:  MOVLB  0
.................... 	 	    	}
.................... 	 	    #if (controlador == true)
.................... 				#if (DESLIGA_F5 == true)
.................... 			 	    case 1011:		//1
.................... 			 	    case 1012:		//2
.................... 			 	    case 1013:		//3
.................... 			 	    case 1014:		//4
.................... 			 	    case 1015:		//5
.................... 			 	    case 1016:		//6
.................... 			 	    case 1017:		//7
.................... 			 	    case 1018:		//8
.................... 			 	    case 1019:		//9
.................... 			 	    case 1020:		//10
.................... 			 	    case 1021:		//11
.................... 			 	    case 1022:		//12
.................... 			 	    case 1023:		//13
.................... 			 	    case 1024:		//14
.................... 			 	    case 1025:		//15
.................... 			 	    case 1026:		//16
.................... 			 	    	{
.................... 				 	    aux_b1 = addr_regs_modbus - 1011;
0B868:  MOVLW  F3
0B86A:  MOVLB  5
0B86C:  SUBWF  x29,W
0B86E:  MOVLB  3
0B870:  MOVWF  xB1
.................... 				 	    #if (st8500c == true)
.................... 				 	    	aux_tempo_repouso[aux_b1] = 0;
0B872:  CLRF   03
0B874:  MOVF   xB1,W
0B876:  ADDLW  F7
0B878:  MOVWF  FE9
0B87A:  MOVLW  00
0B87C:  ADDWFC 03,W
0B87E:  MOVWF  FEA
0B880:  CLRF   FEF
.................... 							ligar_carga(aux_b1);		
0B882:  MOVFF  3B1,A65
0B886:  MOVLB  0
0B888:  CALL   A884
.................... 				 	    #else
.................... 							banco_disponivel[aux_b1]= true;
.................... 							if (aux_b1 >= nro_bancos_capacitor)
.................... 								{
.................... 								aux_tempo_repouso[aux_b1] = 0;
.................... 								}
.................... 							ligar_banco(aux_b1);		
.................... 						#endif
.................... 						break;
0B88C:  MOVLB  3
0B88E:  BRA    B9F8
0B890:  MOVLB  0
.................... 				 	    }
.................... 			 	    case 1031:		//1
.................... 			 	    case 1032:		//2
.................... 			 	    case 1033:		//3
.................... 			 	    case 1034:		//4
.................... 			 	    case 1035:		//5
.................... 			 	    case 1036:		//6
.................... 			 	    case 1037:		//7
.................... 			 	    case 1038:		//8
.................... 			 	    case 1039:		//9
.................... 			 	    case 1040:		//10
.................... 			 	    case 1041:		//11
.................... 			 	    case 1042:		//12
.................... 			 	    case 1043:		//13
.................... 			 	    case 1044:		//14
.................... 			 	    case 1045:		//15
.................... 			 	    case 1046:		//16
.................... 			 	    	{
.................... 				 	    aux_b1 = addr_regs_modbus - 1031;
0B892:  MOVLW  07
0B894:  MOVLB  5
0B896:  SUBWF  x29,W
0B898:  MOVLB  3
0B89A:  MOVWF  xB1
.................... 				 	    #if (st8500c == true)
.................... 							desligar_carga(aux_b1);		
0B89C:  MOVFF  3B1,A65
0B8A0:  MOVLB  0
0B8A2:  CALL   1CB6
.................... 				 	    #else
.................... 							desligar_banco(aux_b1);		
.................... 						#endif
.................... 						break;
0B8A6:  MOVLB  3
0B8A8:  BRA    B9F8
0B8AA:  MOVLB  0
.................... 				 	    }
.................... 				#endif
.................... 			#endif
.................... 	 	    case 1101:
.................... 	 	    case 1110:
.................... 	 	    case 1111:
.................... 	 	    case 2001:
.................... 	 	    case 2002:
.................... 	 	    	{
.................... 	 	    	break;
0B8AC:  MOVLB  3
0B8AE:  BRA    B9F8
0B8B0:  MOVLB  0
.................... 	 	    	}
.................... 	 	    case 2000:
.................... 	 	    	{
.................... 				#if (chip_cs5460a == true)
.................... 					inc_off_set_fp_cs5460a('R');
.................... 				#elif (ade7754 == true)
.................... 					inc_fase_fp_7754('R');
.................... 				#else
.................... 					#if (portatil == TRUE)
.................... 						ajusta_off_set_fp();
.................... 					#else
.................... 						if (distancia_fase == NRO_AMOSTRAS)
0B8B2:  MOVLB  3
0B8B4:  MOVF   xC5,W
0B8B6:  SUBLW  40
0B8B8:  BNZ   B8BC
.................... 							{
.................... 							distancia_fase = 0;
0B8BA:  CLRF   xC5
.................... 							}
.................... 						off_cor_r = distancia_fase;
0B8BC:  MOVFF  3C5,4B7
.................... 						write_byte(ee_off_cor_r, off_cor_r);
0B8C0:  MOVLB  A
0B8C2:  CLRF   x68
0B8C4:  MOVLW  06
0B8C6:  MOVWF  x67
0B8C8:  MOVFF  4B7,A69
0B8CC:  MOVLB  0
0B8CE:  CALL   1C46
.................... 					#endif
.................... 				#endif
.................... 	 	    	break;
0B8D2:  MOVLB  3
0B8D4:  BRA    B9F8
0B8D6:  MOVLB  0
.................... 	 	    	}
.................... 			#if (chip_cs5460a == true)
.................... 		 	    case 2001:
.................... 		 	    	{
.................... 					inc_off_set_fp_cs5460a('S');
.................... 	 	    		break;
.................... 					}
.................... 	 	    	case 2002:
.................... 	 	    		{
.................... 					inc_off_set_fp_cs5460a('T');
.................... 	 	    		break;
.................... 					}
.................... 			#endif
.................... 	 	    case 2003:
.................... 	 	    case 2006:
.................... 	 	    	{
.................... 				#if (chip_cs5460a == true)
.................... 					inc_ganho_v_cs5460a('R');
.................... 				#else
.................... 					#if (portatil == true)
.................... 						if (tipo_ligacao == 0)
.................... 							{
.................... 							os_ten_r1++;
.................... 							write_byte(ee_os_ten_r1, os_ten_r1);
.................... 							}
.................... 						else
.................... 							{
.................... 							os_ten_r1++;
.................... 							write_byte(ee_os_ten_r1, os_ten_r1);
.................... 							}
.................... 					#else
.................... 						os_ten_r1++;
0B8D8:  MOVLB  4
0B8DA:  INCF   xAB,F
.................... 						write_byte(ee_os_ten_r1, os_ten_r1);
0B8DC:  MOVLB  A
0B8DE:  CLRF   x68
0B8E0:  MOVLW  0E
0B8E2:  MOVWF  x67
0B8E4:  MOVFF  4AB,A69
0B8E8:  MOVLB  0
0B8EA:  CALL   1C46
.................... 					#endif
.................... 				#endif
.................... 	 	    	break;
0B8EE:  MOVLB  3
0B8F0:  BRA    B9F8
0B8F2:  MOVLB  0
.................... 				}
.................... 	 	    case 2004:
.................... 	 	    case 2007:
.................... 	 	    	{
.................... 				#if (chip_cs5460a == true)
.................... 					inc_ganho_v_cs5460a('S');
.................... 				#else
.................... 					#if (portatil == true)
.................... 						if (tipo_ligacao == 0)
.................... 							{
.................... 							os_ten_s1++;
.................... 							write_byte(ee_os_ten_s1, os_ten_s1);
.................... 							}
.................... 						else
.................... 							{
.................... 							os_ten_s1++;
.................... 							write_byte(ee_os_ten_s1, os_ten_s1);
.................... 							}
.................... 					#else
.................... 						os_ten_s1++;
0B8F4:  MOVLB  4
0B8F6:  INCF   xAC,F
.................... 						write_byte(ee_os_ten_s1, os_ten_s1);
0B8F8:  MOVLB  A
0B8FA:  CLRF   x68
0B8FC:  MOVLW  0F
0B8FE:  MOVWF  x67
0B900:  MOVFF  4AC,A69
0B904:  MOVLB  0
0B906:  CALL   1C46
.................... 					#endif
.................... 				#endif
.................... 	 	    	break;
0B90A:  MOVLB  3
0B90C:  BRA    B9F8
0B90E:  MOVLB  0
.................... 				}
.................... 	 	    case 2005:
.................... 	 	    case 2008:
.................... 	 	    	{
.................... 				#if (chip_cs5460a == true)
.................... 					inc_ganho_v_cs5460a('T');
.................... 				#else
.................... 					#if (portatil == true)
.................... 						if (tipo_ligacao == 0)
.................... 							{
.................... 							os_ten_t1++;
.................... 							write_byte(ee_os_ten_t1, os_ten_t1);
.................... 							}
.................... 						else
.................... 							{
.................... 							os_ten_r1++;
.................... 							write_byte(ee_os_ten_t1, os_ten_t1);
.................... 							}
.................... 					#else
.................... 						os_ten_r1++;
0B910:  MOVLB  4
0B912:  INCF   xAB,F
.................... 						write_byte(ee_os_ten_t1, os_ten_t1);
0B914:  MOVLB  A
0B916:  CLRF   x68
0B918:  MOVLW  10
0B91A:  MOVWF  x67
0B91C:  MOVFF  4AD,A69
0B920:  MOVLB  0
0B922:  CALL   1C46
.................... 					#endif
.................... 				#endif
.................... 	 	    	break;
0B926:  MOVLB  3
0B928:  BRA    B9F8
0B92A:  MOVLB  0
.................... 				}
.................... 	 	    case 2009:
.................... 	 	    	{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_cor_r(1);
.................... 				#else		 	    	
.................... 					#if (chip_cs5460a == true)
.................... 						inc_ganho_i_cs5460a('R');
.................... 					#else
.................... 						os_cor_r++;
0B92C:  MOVLB  4
0B92E:  INCF   xB1,F
.................... 						write_byte(ee_os_cor_r, os_cor_r);
0B930:  MOVLB  A
0B932:  CLRF   x68
0B934:  MOVLW  0B
0B936:  MOVWF  x67
0B938:  MOVFF  4B1,A69
0B93C:  MOVLB  0
0B93E:  CALL   1C46
.................... 					#endif
.................... 				#endif				
.................... 
.................... 	 	    	break;
0B942:  MOVLB  3
0B944:  BRA    B9F8
0B946:  MOVLB  0
.................... 				}
.................... 	 	    case 2010:
.................... 	 	    	{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_cor_s(1);
.................... 				#else		 	    	
.................... 					#if (chip_cs5460a == true)
.................... 						inc_ganho_i_cs5460a('S');
.................... 					#else
.................... 						os_cor_s++;
0B948:  MOVLB  4
0B94A:  INCF   xB2,F
.................... 						write_byte(ee_os_cor_s, os_cor_s);
0B94C:  MOVLB  A
0B94E:  CLRF   x68
0B950:  MOVLW  0C
0B952:  MOVWF  x67
0B954:  MOVFF  4B2,A69
0B958:  MOVLB  0
0B95A:  CALL   1C46
.................... 					#endif
.................... 				#endif				
.................... 	 	    	break;
0B95E:  MOVLB  3
0B960:  BRA    B9F8
0B962:  MOVLB  0
.................... 				}
.................... 	 	    case 2011:
.................... 	 	    	{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_cor_t(1);
.................... 				#else		 	    	
.................... 					#if (chip_cs5460a == true)
.................... 						inc_ganho_i_cs5460a('T');
.................... 					#else
.................... 						os_cor_t++;
0B964:  MOVLB  4
0B966:  INCF   xB3,F
.................... 						write_byte(ee_os_cor_t, os_cor_t);
0B968:  MOVLB  A
0B96A:  CLRF   x68
0B96C:  MOVLW  0D
0B96E:  MOVWF  x67
0B970:  MOVFF  4B3,A69
0B974:  MOVLB  0
0B976:  CALL   1C46
.................... 					#endif
.................... 				#endif				
.................... 	 	    	break;
0B97A:  MOVLB  3
0B97C:  BRA    B9F8
0B97E:  MOVLB  0
.................... 				}
.................... 			#if (chip_cs5460a == true)
.................... 				case 2012:
.................... 					{
.................... 					inc_tbc_register('R');
.................... 		 	    	break;
.................... 					}
.................... 				case 2013:
.................... 					{
.................... 					inc_tbc_register('S');
.................... 		 	    	break;
.................... 					}
.................... 				case 2014:
.................... 					{
.................... 					inc_tbc_register('T');
.................... 		 	    	break;
.................... 					}
.................... 		 	    case 2015:
.................... 		 	    	{
.................... 					inc_pulse_rate_cs5460a('R');
.................... 		 	    	break;
.................... 					}
.................... 		 	    case 2016:
.................... 		 	    	{
.................... 					inc_pulse_rate_cs5460a('S');
.................... 		 	    	break;
.................... 					}
.................... 		 	    case 2017:
.................... 		 	    	{
.................... 					inc_pulse_rate_cs5460a('T');
.................... 		 	    	break;
.................... 					}
.................... 			#endif
.................... 			case 2050:
.................... 				{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_pot_r(1);
.................... 				#else		 	    	
.................... 					os_pot_r++;
0B980:  MOVLB  4
0B982:  INCF   xB4,F
.................... 					write_byte(ee_os_pot_r, os_pot_r);
0B984:  MOVLB  A
0B986:  CLRF   x68
0B988:  MOVLW  46
0B98A:  MOVWF  x67
0B98C:  MOVFF  4B4,A69
0B990:  MOVLB  0
0B992:  CALL   1C46
.................... 				#endif
.................... 				break;
0B996:  MOVLB  3
0B998:  BRA    B9F8
0B99A:  MOVLB  0
.................... 				}
.................... 			case 2051:
.................... 				{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_pot_s(1);
.................... 				#else		 	    	
.................... 					os_pot_s++;
0B99C:  MOVLB  4
0B99E:  INCF   xB5,F
.................... 					write_byte(ee_os_pot_s, os_pot_s);
0B9A0:  MOVLB  A
0B9A2:  CLRF   x68
0B9A4:  MOVLW  47
0B9A6:  MOVWF  x67
0B9A8:  MOVFF  4B5,A69
0B9AC:  MOVLB  0
0B9AE:  CALL   1C46
.................... 				#endif
.................... 				break;
0B9B2:  MOVLB  3
0B9B4:  BRA    B9F8
0B9B6:  MOVLB  0
.................... 				}
.................... 			case 2052:
.................... 				{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_pot_t(1);
.................... 				#else		 	    	
.................... 					os_pot_t++;
0B9B8:  MOVLB  4
0B9BA:  INCF   xB6,F
.................... 					write_byte(ee_os_pot_t, os_pot_t);
0B9BC:  MOVLB  A
0B9BE:  CLRF   x68
0B9C0:  MOVLW  48
0B9C2:  MOVWF  x67
0B9C4:  MOVFF  4B6,A69
0B9C8:  MOVLB  0
0B9CA:  CALL   1C46
.................... 				#endif
.................... 				break;
0B9CE:  MOVLB  3
0B9D0:  BRA    B9F8
0B9D2:  MOVLB  0
.................... 				}
.................... 				
.................... 			#if (chip_cs5460a == true)
.................... 				case 3000:				// calibra off_set DC e AC de tensao corrente   
.................... 				write_word(ee_reg_cfnum, reg_cfnum);				{
.................... 
.................... 				output_low(CS5460A_CS_R);
.................... 				output_low(CS5460A_CS_S);
.................... 				output_low(CS5460A_CS_T);
.................... 				write_cs5460_byte(I_dc_calibra_offset);
.................... 				output_high(CS5460A_CS_R);
.................... 				output_high(CS5460A_CS_S);
.................... 				output_high(CS5460A_CS_T);
.................... 
.................... 				time_out = 1;
.................... 				while(1)
.................... 					{
.................... 					aux_cs5460_l = read_cs5460(status_cs5460a,'R');	
.................... 					if (bit_test(datah,7))
.................... 						{
.................... 						break;
.................... 						}
.................... 					if (time_out == 0)
.................... 						{
.................... 						break;
.................... 						}
.................... 					}
.................... 
.................... 				output_low(CS5460A_CS_R);
.................... 				output_low(CS5460A_CS_S);
.................... 				output_low(CS5460A_CS_T);
.................... 				write_cs5460_byte(V_dc_calibra_offset);
.................... 				output_high(CS5460A_CS_R);
.................... 				output_high(CS5460A_CS_S);
.................... 				output_high(CS5460A_CS_T);
.................... 
.................... 				time_out = 1;
.................... 				while(1)
.................... 					{
.................... 					aux_cs5460_l = read_cs5460(status_cs5460a,'R');	
.................... 					if (bit_test(datah,7))
.................... 						{
.................... 						break;
.................... 						}
.................... 					if (time_out == 0)
.................... 						{
.................... 						break;
.................... 						}
.................... 					}
.................... 
.................... 				output_low(CS5460A_CS_R);
.................... 				output_low(CS5460A_CS_S);
.................... 				output_low(CS5460A_CS_T);
.................... 				write_cs5460_byte(start_conversions);
.................... 				output_high(CS5460A_CS_R);
.................... 				output_high(CS5460A_CS_S);
.................... 				output_high(CS5460A_CS_T);
.................... 				delay_ms(1000);
.................... 
.................... 				aux_cs5460_l = read_cs5460(I_dc_offset,'R');
.................... 				write_byte(ee_I_dc_offset_h, datah);
.................... 				write_byte(ee_I_dc_offset_m, datam);
.................... 				write_byte(ee_I_dc_offset_l, datal);
.................... 
.................... 				aux_cs5460_l = read_cs5460(V_dc_offset,'R');
.................... 				write_byte(ee_V_dc_offset_h, datah);
.................... 				write_byte(ee_V_dc_offset_m, datam);
.................... 				write_byte(ee_V_dc_offset_l, datal);
.................... 
.................... 
.................... 				break;
.................... 				}
.................... 			case 3001:				// calibra ganho DC de tensao
.................... 				{
.................... 
.................... 				output_low(CS5460A_CS_R);
.................... 				output_low(CS5460A_CS_S);
.................... 				output_low(CS5460A_CS_T);
.................... 				write_cs5460_byte(I_ac_calibra_offset);
.................... 				output_high(CS5460A_CS_R);
.................... 				output_high(CS5460A_CS_S);
.................... 				output_high(CS5460A_CS_T);
.................... 
.................... 				time_out = 1;
.................... 				while(1)
.................... 					{
.................... 					aux_cs5460_l = read_cs5460(status_cs5460a,'R');	
.................... 					if (bit_test(datah,7))
.................... 						{
.................... 						break;
.................... 						}
.................... 					if (time_out == 0)
.................... 						{
.................... 						break;
.................... 						}
.................... 					}
.................... 
.................... 				output_low(CS5460A_CS_R);
.................... 				output_low(CS5460A_CS_S);
.................... 				output_low(CS5460A_CS_T);
.................... 				write_cs5460_byte(V_ac_calibra_offset);
.................... 				output_high(CS5460A_CS_R);
.................... 				output_high(CS5460A_CS_S);
.................... 				output_high(CS5460A_CS_T);
.................... 
.................... 				time_out = 1;
.................... 				while(1)
.................... 					{
.................... 					aux_cs5460_l = read_cs5460(status_cs5460a,'R');	
.................... 					if (bit_test(datah,7))
.................... 						{
.................... 						break;
.................... 						}
.................... 					if (time_out == 0)
.................... 						{
.................... 						break;
.................... 						}
.................... 					}
.................... 
.................... 				output_low(CS5460A_CS_R);
.................... 				output_low(CS5460A_CS_S);
.................... 				output_low(CS5460A_CS_T);
.................... 				write_cs5460_byte(start_conversions);
.................... 				output_high(CS5460A_CS_R);
.................... 				output_high(CS5460A_CS_S);
.................... 				output_high(CS5460A_CS_T);
.................... 				delay_ms(1000);
.................... 
.................... 				aux_cs5460_l = read_cs5460(I_ac_offset,'R');
.................... 				write_byte(ee_I_ac_offset_h, datah);
.................... 				write_byte(ee_I_ac_offset_m, datam);
.................... 				write_byte(ee_I_ac_offset_l, datal);
.................... 
.................... 				aux_cs5460_l = read_cs5460(V_ac_offset,'R');
.................... 				write_byte(ee_V_ac_offset_h, datah);
.................... 				write_byte(ee_V_ac_offset_m, datam);
.................... 				write_byte(ee_V_ac_offset_l, datal);
.................... 
.................... 
.................... 				break;
.................... 				}
.................... 
.................... 			case 3002:				// calibra ganho DC de corrente   
.................... 				{
.................... 				break;
.................... 				}
.................... 
.................... 			case 3003:
.................... 				{
.................... 				break;
.................... 				}
.................... 			case 3004:
.................... 				{
.................... 				break;
.................... 				}
.................... 
.................... 			case 3005:				// calibra off_set DC e AC de tensao  
.................... 				{
.................... 				
.................... 				write_cs5460(V_ac_offset, 0, 'R');
.................... 				for (aux_b4 = 0; aux_b4< 250; aux_b4++)
.................... 					{
.................... 					aux_ten_l = read_cs5460(V_rms,'R');
.................... 					aux_l1 = aux_ten_l >> 8;
.................... 					if (aux_l1 > 10)
.................... 						{
.................... 						aux_cs5460_l = read_cs5460(V_ac_offset,'R');	
.................... 						aux_cs5460_l = aux_cs5460_l - 10;
.................... 						}
.................... 					else
.................... 						{
.................... 						break;
.................... 						}
.................... 					write_cs5460(V_ac_offset, aux_cs5460_l, 'R');
.................... 
.................... 					output_low(CS5460A_CS_R);
.................... 					write_cs5460_byte(start_conversions);
.................... 					output_high(CS5460A_CS_R);
.................... 					delay_ms(1000);
.................... 
.................... 					output_high(direcao);
.................... 					delay_ms(1);
.................... 					aux_cs5460_l = read_cs5460(V_ac_offset,'R');	
.................... 					printf(" Tensao=%lu,; AC_Off_set_V=%lu", (aux_ten_l >> 8), aux_cs5460_l);
.................... 					printf("\r\n");
.................... 					delay_ms(2);
.................... 					output_low(direcao);
.................... 					}
.................... 
.................... 				aux_cs5460_l = read_cs5460(V_dc_offset,'R');
.................... 				write_byte(ee_V_dc_offset_h, datah);
.................... 				write_byte(ee_V_dc_offset_m, datam);
.................... 				write_byte(ee_V_dc_offset_l, datal);
.................... 
.................... 				aux_cs5460_l = read_cs5460(V_ac_offset,'R');
.................... 				write_byte(ee_V_ac_offset_h, datah);
.................... 				write_byte(ee_V_ac_offset_m, datam);
.................... 				write_byte(ee_V_ac_offset_l, datal);
.................... 
.................... 				break;
.................... 				}
.................... 
.................... 			case 3006:				// calibra off_set DC e AC de corrente
.................... 				{
.................... 				
.................... 				write_cs5460(I_ac_offset, 0, 'R');
.................... 				for (aux_b4 = 0; aux_b4< 250; aux_b4++)
.................... 					{
.................... 					aux_cor_l = read_cs5460(I_rms,'R');
.................... 					aux_l1 = aux_cor_l >> 8;
.................... 					if (aux_l1 > 10)
.................... 						{
.................... 						aux_cs5460_l = read_cs5460(I_ac_offset,'R');	
.................... 						aux_cs5460_l = aux_cs5460_l - 10;
.................... 						}
.................... 					else
.................... 						{
.................... 						break;
.................... 						}
.................... 					write_cs5460(I_ac_offset, aux_cs5460_l, 'R');
.................... 
.................... 					output_low(CS5460A_CS_R);
.................... 					write_cs5460_byte(start_conversions);
.................... 					output_high(CS5460A_CS_R);
.................... 					delay_ms(1000);
.................... 
.................... 					output_high(direcao);
.................... 					delay_ms(1);
.................... 					aux_cs5460_l = read_cs5460(I_ac_offset,'R');	
.................... 					printf(" Corrente=%lu,; AC_Off_set_I=%lu", (aux_cor_l >> 8), aux_cs5460_l);
.................... 					printf("\r\n");
.................... 					delay_ms(2);
.................... 					output_low(direcao);
.................... 					}
.................... 
.................... 				aux_cs5460_l = read_cs5460(I_dc_offset,'R');
.................... 				write_byte(ee_I_dc_offset_h, datah);
.................... 				write_byte(ee_I_dc_offset_m, datam);
.................... 				write_byte(ee_I_dc_offset_l, datal);
.................... 
.................... 				aux_cs5460_l = read_cs5460(I_ac_offset,'R');
.................... 				write_byte(ee_I_ac_offset_h, datah);
.................... 				write_byte(ee_I_ac_offset_m, datam);
.................... 				write_byte(ee_I_ac_offset_l, datal);
.................... 
.................... 				break;
.................... 				}
.................... 
.................... 			case 3007:				// calibra off_set DC e AC de corrente
.................... 				{
.................... 				for (aux_b4 = 0; aux_b4< 5; aux_b4++)
.................... 					{
.................... 					aux_ener_l = read_cs5460(E_register, 'R');
.................... 					if (aux_ener_l != 0)
.................... 						{
.................... 						if (datah & 0x80)
.................... 							{
.................... 							aux_cs5460_l = read_cs5460(P_offset, 'R');	
.................... 							aux_cs5460_l = aux_cs5460_l + 100;
.................... 							aux_cs5460_l++;
.................... 							write_cs5460(P_offset, aux_cs5460_l, 'R');
.................... 							}
.................... 						else
.................... 							{
.................... 							aux_cs5460_l = read_cs5460(P_offset, 'R');	
.................... 							aux_cs5460_l = aux_cs5460_l - 100;
.................... 							aux_cs5460_l--;
.................... 							write_cs5460(P_offset, aux_cs5460_l, 'R');
.................... 							}
.................... 						}
.................... 					else
.................... 						{
.................... 						break;
.................... 						}
.................... 					output_low(CS5460A_CS_R);
.................... 					write_cs5460_byte(start_conversions);
.................... 					output_high(CS5460A_CS_R);
.................... 					delay_ms(1000);
.................... 
.................... 					output_high(direcao);
.................... 					delay_ms(1);
.................... 					printf(" E_register=%lu,; P_Off_set=%lu",  read_cs5460(E_register,'R'),  read_cs5460(P_offset,'R'));
.................... 					printf("\r\n");
.................... 					delay_ms(2);
.................... 					output_low(direcao);
.................... 					}
.................... 
.................... 				aux_cs5460_l = read_cs5460(P_offset,'R');
.................... 				write_byte(ee_P_offset_h, datah);
.................... 				write_byte(ee_P_offset_m, datam);
.................... 				write_byte(ee_P_offset_l, datal);
.................... 
.................... 				break;
.................... 				}
.................... 
.................... 			case 3008:
.................... 				{
.................... 				inc_off_set_fp_cs5460a('R');
.................... 				break;
.................... 				}
.................... 
.................... 			case 3009:
.................... 				{
.................... 				dec_off_set_fp_cs5460a('R');
.................... 				break;
.................... 				}
.................... 
.................... 			case 3900:
.................... 				{
.................... 				tx_config_cs55460('R');
.................... 				break;
.................... 				}
.................... 			case 3901:
.................... 				{
.................... 				tx_config_cs55460('S');
.................... 				break;
.................... 				}
.................... 			case 3902:
.................... 				{
.................... 				tx_config_cs55460('T');
.................... 				break;
.................... 				}
.................... 			case 3903:
.................... 				{
.................... 				output_high(direcao);
.................... 				delay_ms(1);
.................... 				for (aux_b4 = 0;aux_b4 <= NRO_AMOSTRAS_CHT; aux_b4++)
.................... 					{
.................... 					printf("%lu", read_word_cs5460(V_register,'R'));
.................... 					printf("\r\n");
.................... 					delay_us(130);
.................... 					}
.................... 				printf("\r\n");
.................... 				delay_ms(2);
.................... 				output_low(direcao);
.................... 				break;
.................... 				}
.................... 			case 3999:
.................... 				{
.................... 				
.................... 				output_high(direcao);
.................... 				delay_ms(1);
.................... 				aux_cs5460_l = read_cs5460(V_dc_offset,'R');	
.................... 				printf(" Vdc_Off_set_V=%lu", aux_cs5460_l);
.................... 				aux_cs5460_l = read_cs5460(V_ac_offset,'R');	
.................... 				printf("; Vac_Off_set_V=%lu", aux_cs5460_l);
.................... 				aux_cs5460_l = read_cs5460(V_gain,'R');	
.................... 				printf("; V_Ganho=%lu", aux_cs5460_l);
.................... 				printf("\r\n");
.................... 				delay_ms(2);
.................... 				output_low(direcao);
.................... 				break;
.................... 				}
.................... 			#endif
.................... 
.................... 			#if (st5x == true)
.................... 		 	    case 6779:
.................... 		 	    	{
.................... 					if (bloqueio_gravacao == 67)
.................... 						{
.................... 						bloqueio_gravacao = 0;
.................... 						}
.................... 					else
.................... 						{
.................... 						bloqueio_gravacao = 67;
.................... 						}
.................... 					write_byte(ee_bloqueio_gravacao, bloqueio_gravacao);
.................... 					break;
.................... 					}
.................... 			#endif
.................... 			
.................... 			case 8000:{
.................... //				GravarRegistrosTest();
.................... 				teste_memoria();
0B9D4:  CALL   B008
.................... 			 	break;
0B9D8:  MOVLB  3
0B9DA:  BRA    B9F8
0B9DC:  MOVLB  0
.................... 			}			
.................... 
.................... 			#if (controlador == true)
.................... 				case 9000:
.................... 					{
.................... 					apaga_tempos();
0B9DE:  RCALL  B1F6
.................... 					break;
0B9E0:  MOVLB  3
0B9E2:  BRA    B9F8
0B9E4:  MOVLB  0
.................... 					}
.................... 			#endif
.................... 
.................... 			#if (ade7754 == true)
.................... 		 	    case 9990:
.................... 		 	    	{
.................... 					reg_cfnum = read_word(ee_reg_cfnum);
.................... 					reg_cfnum++;
.................... 					write_word(ee_reg_cfnum, reg_cfnum);
.................... 					break;
.................... 					}
.................... 		 	    case 9991:
.................... 		 	    	{
.................... 					reg_cfdem = read_word(ee_reg_cfdem);
.................... 					reg_cfdem++;
.................... 					write_word(ee_reg_cfdem, reg_cfdem);
.................... 					break;
.................... 					}
.................... 		 	    case 9992:
.................... 		 	    	{
.................... 					os_pot_r = read_byte(xee_os_pot_r);
.................... 					os_pot_r++;
.................... 					write_byte(xee_os_pot_r, os_pot_r);
.................... 					acao_ade7754 = 0;
.................... 					break;
.................... 					}
.................... 		 	    case 9993:
.................... 		 	    	{
.................... 					os_pot_s = read_byte(xee_os_pot_s);
.................... 					os_pot_s++;
.................... 					write_byte(xee_os_pot_s, os_pot_s);
.................... 					acao_ade7754 = 0;
.................... 					break;
.................... 					}
.................... 		 	    case 9994:
.................... 		 	    	{
.................... 					os_pot_t = read_byte(xee_os_pot_t);
.................... 					os_pot_t++;
.................... 					write_byte(xee_os_pot_r, os_pot_t);
.................... 					acao_ade7754 = 0;
.................... 					break;
.................... 					}
.................... 			#endif
.................... 	 	    case 9999:
.................... 	 	    	{
.................... 				#if (com_regs == true)
.................... 					apaga_memoria();
0B9E6:  CALL   AAA6
.................... 				#endif
.................... 			 	break;
0B9EA:  MOVLB  3
0B9EC:  BRA    B9F8
0B9EE:  MOVLB  5
.................... 		 	    }
.................... 		 	 default:
.................... 		 		{
.................... 	 		    erro_mod = 1;
0B9F0:  BSF    21.4
.................... 	 			qerro_mod = 2;
0B9F2:  MOVLW  02
0B9F4:  MOVWF  x1E
0B9F6:  MOVLB  3
.................... 		 		}
.................... 	 		}
.................... 	 	}
0B9F8:  BRA    BE80
0B9FA:  MOVLB  5
.................... 	else if (force_data_modbus == 0x00ff)
0B9FC:  INCFSZ x23,W
0B9FE:  BRA    BE7C
0BA00:  MOVF   x24,F
0BA02:  BTFSS  FD8.2
0BA04:  BRA    BE7C
.................... 		{
.................... 		switch(addr_regs_modbus)
0BA06:  MOVF   x29,W
0BA08:  MOVWF  00
0BA0A:  MOVF   x2A,W
0BA0C:  MOVWF  03
0BA0E:  MOVF   03,W
0BA10:  BNZ   BA1E
0BA12:  MOVLW  01
0BA14:  SUBWF  00,W
0BA16:  MOVLB  0
0BA18:  BTFSC  FD8.2
0BA1A:  BRA    BCB6
0BA1C:  MOVLB  5
0BA1E:  MOVF   03,W
0BA20:  BNZ   BA2E
0BA22:  MOVLW  02
0BA24:  SUBWF  00,W
0BA26:  MOVLB  0
0BA28:  BTFSC  FD8.2
0BA2A:  BRA    BCE4
0BA2C:  MOVLB  5
0BA2E:  MOVLW  03
0BA30:  SUBWF  03,W
0BA32:  BNZ   BA40
0BA34:  MOVLW  F2
0BA36:  SUBWF  00,W
0BA38:  MOVLB  0
0BA3A:  BTFSC  FD8.2
0BA3C:  BRA    BD12
0BA3E:  MOVLB  5
0BA40:  MOVLW  03
0BA42:  SUBWF  03,W
0BA44:  BNZ   BA52
0BA46:  MOVLW  F3
0BA48:  SUBWF  00,W
0BA4A:  MOVLB  0
0BA4C:  BTFSC  FD8.2
0BA4E:  BRA    BD20
0BA50:  MOVLB  5
0BA52:  MOVLW  03
0BA54:  SUBWF  03,W
0BA56:  BNZ   BA64
0BA58:  MOVLW  F4
0BA5A:  SUBWF  00,W
0BA5C:  MOVLB  0
0BA5E:  BTFSC  FD8.2
0BA60:  BRA    BD20
0BA62:  MOVLB  5
0BA64:  MOVLW  03
0BA66:  SUBWF  03,W
0BA68:  BNZ   BA76
0BA6A:  MOVLW  F5
0BA6C:  SUBWF  00,W
0BA6E:  MOVLB  0
0BA70:  BTFSC  FD8.2
0BA72:  BRA    BD20
0BA74:  MOVLB  5
0BA76:  MOVLW  03
0BA78:  SUBWF  03,W
0BA7A:  BNZ   BA88
0BA7C:  MOVLW  F6
0BA7E:  SUBWF  00,W
0BA80:  MOVLB  0
0BA82:  BTFSC  FD8.2
0BA84:  BRA    BD20
0BA86:  MOVLB  5
0BA88:  MOVLW  03
0BA8A:  SUBWF  03,W
0BA8C:  BNZ   BA9A
0BA8E:  MOVLW  F7
0BA90:  SUBWF  00,W
0BA92:  MOVLB  0
0BA94:  BTFSC  FD8.2
0BA96:  BRA    BD20
0BA98:  MOVLB  5
0BA9A:  MOVLW  03
0BA9C:  SUBWF  03,W
0BA9E:  BNZ   BAAC
0BAA0:  MOVLW  F8
0BAA2:  SUBWF  00,W
0BAA4:  MOVLB  0
0BAA6:  BTFSC  FD8.2
0BAA8:  BRA    BD20
0BAAA:  MOVLB  5
0BAAC:  MOVLW  03
0BAAE:  SUBWF  03,W
0BAB0:  BNZ   BABE
0BAB2:  MOVLW  F9
0BAB4:  SUBWF  00,W
0BAB6:  MOVLB  0
0BAB8:  BTFSC  FD8.2
0BABA:  BRA    BD20
0BABC:  MOVLB  5
0BABE:  MOVLW  03
0BAC0:  SUBWF  03,W
0BAC2:  BNZ   BAD0
0BAC4:  MOVLW  FA
0BAC6:  SUBWF  00,W
0BAC8:  MOVLB  0
0BACA:  BTFSC  FD8.2
0BACC:  BRA    BD20
0BACE:  MOVLB  5
0BAD0:  MOVLW  03
0BAD2:  SUBWF  03,W
0BAD4:  BNZ   BAE2
0BAD6:  MOVLW  FB
0BAD8:  SUBWF  00,W
0BADA:  MOVLB  0
0BADC:  BTFSC  FD8.2
0BADE:  BRA    BD20
0BAE0:  MOVLB  5
0BAE2:  MOVLW  03
0BAE4:  SUBWF  03,W
0BAE6:  BNZ   BAF4
0BAE8:  MOVLW  FC
0BAEA:  SUBWF  00,W
0BAEC:  MOVLB  0
0BAEE:  BTFSC  FD8.2
0BAF0:  BRA    BD20
0BAF2:  MOVLB  5
0BAF4:  MOVLW  03
0BAF6:  SUBWF  03,W
0BAF8:  BNZ   BB06
0BAFA:  MOVLW  FD
0BAFC:  SUBWF  00,W
0BAFE:  MOVLB  0
0BB00:  BTFSC  FD8.2
0BB02:  BRA    BD20
0BB04:  MOVLB  5
0BB06:  MOVLW  03
0BB08:  SUBWF  03,W
0BB0A:  BNZ   BB18
0BB0C:  MOVLW  FE
0BB0E:  SUBWF  00,W
0BB10:  MOVLB  0
0BB12:  BTFSC  FD8.2
0BB14:  BRA    BD20
0BB16:  MOVLB  5
0BB18:  MOVLW  03
0BB1A:  SUBWF  03,W
0BB1C:  BNZ   BB2A
0BB1E:  MOVLW  FF
0BB20:  SUBWF  00,W
0BB22:  MOVLB  0
0BB24:  BTFSC  FD8.2
0BB26:  BRA    BD20
0BB28:  MOVLB  5
0BB2A:  MOVLW  04
0BB2C:  SUBWF  03,W
0BB2E:  BNZ   BB3A
0BB30:  MOVF   00,F
0BB32:  MOVLB  0
0BB34:  BTFSC  FD8.2
0BB36:  BRA    BD20
0BB38:  MOVLB  5
0BB3A:  MOVLW  04
0BB3C:  SUBWF  03,W
0BB3E:  BNZ   BB4C
0BB40:  MOVLW  01
0BB42:  SUBWF  00,W
0BB44:  MOVLB  0
0BB46:  BTFSC  FD8.2
0BB48:  BRA    BD20
0BB4A:  MOVLB  5
0BB4C:  MOVLW  04
0BB4E:  SUBWF  03,W
0BB50:  BNZ   BB5E
0BB52:  MOVLW  02
0BB54:  SUBWF  00,W
0BB56:  MOVLB  0
0BB58:  BTFSC  FD8.2
0BB5A:  BRA    BD20
0BB5C:  MOVLB  5
0BB5E:  MOVLW  07
0BB60:  SUBWF  03,W
0BB62:  BNZ   BB70
0BB64:  MOVLW  D0
0BB66:  SUBWF  00,W
0BB68:  MOVLB  0
0BB6A:  BTFSC  FD8.2
0BB6C:  BRA    BD3A
0BB6E:  MOVLB  5
0BB70:  MOVLW  07
0BB72:  SUBWF  03,W
0BB74:  BNZ   BB82
0BB76:  MOVLW  D1
0BB78:  SUBWF  00,W
0BB7A:  MOVLB  0
0BB7C:  BTFSC  FD8.2
0BB7E:  BRA    BD56
0BB80:  MOVLB  5
0BB82:  MOVLW  07
0BB84:  SUBWF  03,W
0BB86:  BNZ   BB94
0BB88:  MOVLW  D2
0BB8A:  SUBWF  00,W
0BB8C:  MOVLB  0
0BB8E:  BTFSC  FD8.2
0BB90:  BRA    BD56
0BB92:  MOVLB  5
0BB94:  MOVLW  07
0BB96:  SUBWF  03,W
0BB98:  BNZ   BBA6
0BB9A:  MOVLW  D3
0BB9C:  SUBWF  00,W
0BB9E:  MOVLB  0
0BBA0:  BTFSC  FD8.2
0BBA2:  BRA    BD5C
0BBA4:  MOVLB  5
0BBA6:  MOVLW  07
0BBA8:  SUBWF  03,W
0BBAA:  BNZ   BBB8
0BBAC:  MOVLW  D6
0BBAE:  SUBWF  00,W
0BBB0:  MOVLB  0
0BBB2:  BTFSC  FD8.2
0BBB4:  BRA    BD5C
0BBB6:  MOVLB  5
0BBB8:  MOVLW  07
0BBBA:  SUBWF  03,W
0BBBC:  BNZ   BBCA
0BBBE:  MOVLW  D4
0BBC0:  SUBWF  00,W
0BBC2:  MOVLB  0
0BBC4:  BTFSC  FD8.2
0BBC6:  BRA    BD78
0BBC8:  MOVLB  5
0BBCA:  MOVLW  07
0BBCC:  SUBWF  03,W
0BBCE:  BNZ   BBDC
0BBD0:  MOVLW  D7
0BBD2:  SUBWF  00,W
0BBD4:  MOVLB  0
0BBD6:  BTFSC  FD8.2
0BBD8:  BRA    BD78
0BBDA:  MOVLB  5
0BBDC:  MOVLW  07
0BBDE:  SUBWF  03,W
0BBE0:  BNZ   BBEE
0BBE2:  MOVLW  D5
0BBE4:  SUBWF  00,W
0BBE6:  MOVLB  0
0BBE8:  BTFSC  FD8.2
0BBEA:  BRA    BD94
0BBEC:  MOVLB  5
0BBEE:  MOVLW  07
0BBF0:  SUBWF  03,W
0BBF2:  BNZ   BC00
0BBF4:  MOVLW  D8
0BBF6:  SUBWF  00,W
0BBF8:  MOVLB  0
0BBFA:  BTFSC  FD8.2
0BBFC:  BRA    BD94
0BBFE:  MOVLB  5
0BC00:  MOVLW  07
0BC02:  SUBWF  03,W
0BC04:  BNZ   BC12
0BC06:  MOVLW  D9
0BC08:  SUBWF  00,W
0BC0A:  MOVLB  0
0BC0C:  BTFSC  FD8.2
0BC0E:  BRA    BDB0
0BC10:  MOVLB  5
0BC12:  MOVLW  07
0BC14:  SUBWF  03,W
0BC16:  BNZ   BC24
0BC18:  MOVLW  DA
0BC1A:  SUBWF  00,W
0BC1C:  MOVLB  0
0BC1E:  BTFSC  FD8.2
0BC20:  BRA    BDCC
0BC22:  MOVLB  5
0BC24:  MOVLW  07
0BC26:  SUBWF  03,W
0BC28:  BNZ   BC36
0BC2A:  MOVLW  DB
0BC2C:  SUBWF  00,W
0BC2E:  MOVLB  0
0BC30:  BTFSC  FD8.2
0BC32:  BRA    BDE8
0BC34:  MOVLB  5
0BC36:  MOVLW  07
0BC38:  SUBWF  03,W
0BC3A:  BNZ   BC48
0BC3C:  MOVLW  DC
0BC3E:  SUBWF  00,W
0BC40:  MOVLB  0
0BC42:  BTFSC  FD8.2
0BC44:  BRA    BE04
0BC46:  MOVLB  5
0BC48:  MOVLW  08
0BC4A:  SUBWF  03,W
0BC4C:  BNZ   BC5A
0BC4E:  MOVLW  02
0BC50:  SUBWF  00,W
0BC52:  MOVLB  0
0BC54:  BTFSC  FD8.2
0BC56:  BRA    BE04
0BC58:  MOVLB  5
0BC5A:  MOVLW  08
0BC5C:  SUBWF  03,W
0BC5E:  BNZ   BC6C
0BC60:  MOVLW  03
0BC62:  SUBWF  00,W
0BC64:  MOVLB  0
0BC66:  BTFSC  FD8.2
0BC68:  BRA    BE20
0BC6A:  MOVLB  5
0BC6C:  MOVLW  08
0BC6E:  SUBWF  03,W
0BC70:  BNZ   BC7E
0BC72:  MOVLW  04
0BC74:  SUBWF  00,W
0BC76:  MOVLB  0
0BC78:  BTFSC  FD8.2
0BC7A:  BRA    BE3C
0BC7C:  MOVLB  5
0BC7E:  MOVLW  1F
0BC80:  SUBWF  03,W
0BC82:  BNZ   BC90
0BC84:  MOVLW  40
0BC86:  SUBWF  00,W
0BC88:  MOVLB  0
0BC8A:  BTFSC  FD8.2
0BC8C:  BRA    BE58
0BC8E:  MOVLB  5
0BC90:  MOVLW  23
0BC92:  SUBWF  03,W
0BC94:  BNZ   BCA2
0BC96:  MOVLW  28
0BC98:  SUBWF  00,W
0BC9A:  MOVLB  0
0BC9C:  BTFSC  FD8.2
0BC9E:  BRA    BE62
0BCA0:  MOVLB  5
0BCA2:  MOVLW  27
0BCA4:  SUBWF  03,W
0BCA6:  BNZ   BCB4
0BCA8:  MOVLW  0F
0BCAA:  SUBWF  00,W
0BCAC:  MOVLB  0
0BCAE:  BTFSC  FD8.2
0BCB0:  BRA    BE6C
0BCB2:  MOVLB  5
0BCB4:  BRA    BE76
.................... 			{
.................... 	 	    case 1:
.................... 	 	    	{
.................... 				#if (com_regs == true)
.................... 		 	    	if (registro == 0)
0BCB6:  MOVLB  4
0BCB8:  MOVF   xCC,F
0BCBA:  BNZ   BCE0
.................... 		 	    		{
.................... 						registro = 1;
0BCBC:  MOVLW  01
0BCBE:  MOVWF  xCC
.................... 						write_byte(ee_registro, registro);
0BCC0:  MOVLB  A
0BCC2:  CLRF   x68
0BCC4:  MOVLW  2F
0BCC6:  MOVWF  x67
0BCC8:  MOVFF  4CC,A69
0BCCC:  MOVLB  0
0BCCE:  CALL   1C46
.................... 						grava_registros(reg_inicio);
0BCD2:  MOVLW  1A
0BCD4:  MOVLB  A
0BCD6:  MOVWF  x4A
0BCD8:  MOVLB  0
0BCDA:  CALL   5F70
0BCDE:  MOVLB  4
.................... 						#if (portatil == true)
.................... 							calcula_autonomia();
.................... 							encerra_menus();
.................... 						#endif
.................... 				 	    }
.................... 				#endif
.................... 			 	break;
0BCE0:  BRA    BE7E
0BCE2:  MOVLB  0
.................... 		 	    }
.................... 	 	    case 2:
.................... 	 	    	{
.................... 				#if (com_regs == true)
.................... 			 	    if (registro == 1)
0BCE4:  MOVLB  4
0BCE6:  DECFSZ xCC,W
0BCE8:  BRA    BD0E
.................... 			 	    	{
.................... 						grava_registros(reg_final);
0BCEA:  MOVLW  1B
0BCEC:  MOVLB  A
0BCEE:  MOVWF  x4A
0BCF0:  MOVLB  0
0BCF2:  CALL   5F70
.................... 						registro = 0;
0BCF6:  MOVLB  4
0BCF8:  CLRF   xCC
.................... 						write_byte(ee_registro, registro);
0BCFA:  MOVLB  A
0BCFC:  CLRF   x68
0BCFE:  MOVLW  2F
0BD00:  MOVWF  x67
0BD02:  MOVFF  4CC,A69
0BD06:  MOVLB  0
0BD08:  CALL   1C46
0BD0C:  MOVLB  4
.................... 						#if (portatil == true)
.................... 							calcula_autonomia();
.................... 							encerra_menus();
.................... 						#endif
.................... 				 	    }
.................... 				#endif
.................... 			 	break;
0BD0E:  BRA    BE7E
0BD10:  MOVLB  0
.................... 		 	    }
.................... 	 	    case 1010:
.................... 	 	    	{
.................... 	 	    	output_low(alarme);
0BD12:  BCF    F98.0
0BD14:  BCF    F8F.0
.................... 	 	    	tem_alarme = 0;
0BD16:  BCF    22.4
.................... 				tem_comando_alarme = 1;
0BD18:  BSF    24.2
.................... 				#if (st5x == true)
.................... 					fled_alarme = 1;
.................... 				#endif		
.................... 	 	    	break;
0BD1A:  MOVLB  4
0BD1C:  BRA    BE7E
0BD1E:  MOVLB  0
.................... 	 	    	}
.................... 	 	    #if (controlador == true)
.................... 				#if (DESLIGA_F5 == true)
.................... 			 	    case 1011:		//1
.................... 			 	    case 1012:		//2
.................... 			 	    case 1013:		//3
.................... 			 	    case 1014:		//4
.................... 			 	    case 1015:		//5
.................... 			 	    case 1016:		//6
.................... 			 	    case 1017:		//7
.................... 			 	    case 1018:		//8
.................... 			 	    case 1019:		//9
.................... 			 	    case 1020:		//10
.................... 			 	    case 1021:		//11
.................... 			 	    case 1022:		//12
.................... 			 	    case 1023:		//13
.................... 			 	    case 1024:		//14
.................... 			 	    case 1025:		//15
.................... 			 	    case 1026:		//16
.................... 			 	    	{
.................... 				 	    aux_b1 = addr_regs_modbus - 1011;
0BD20:  MOVLW  F3
0BD22:  MOVLB  5
0BD24:  SUBWF  x29,W
0BD26:  MOVLB  3
0BD28:  MOVWF  xB1
.................... 				 	    #if (st8500c == true)
.................... 							desligar_carga(aux_b1);		
0BD2A:  MOVFF  3B1,A65
0BD2E:  MOVLB  0
0BD30:  CALL   1CB6
.................... 				 	    #else
.................... 							desligar_banco(aux_b1);		
.................... 						#endif
.................... 						break;
0BD34:  MOVLB  4
0BD36:  BRA    BE7E
0BD38:  MOVLB  0
.................... 				 	    }
.................... 				#endif
.................... 			#endif
.................... 	 	    	
.................... 	 	    case 2000:
.................... 	 	    	{
.................... 				#if (chip_cs5460a == true)
.................... 						dec_off_set_fp_cs5460a('R');
.................... 				#elif (ade7754 == true)
.................... 						dec_fase_fp_7754('R');
.................... 				#else
.................... 					#if (portatil == TRUE)
.................... 						ajusta_off_set_fp();
.................... 					#else
.................... 						off_cor_r = distancia_fase;
0BD3A:  MOVFF  3C5,4B7
.................... 						write_byte(ee_off_cor_r, off_cor_r);
0BD3E:  MOVLB  A
0BD40:  CLRF   x68
0BD42:  MOVLW  06
0BD44:  MOVWF  x67
0BD46:  MOVFF  4B7,A69
0BD4A:  MOVLB  0
0BD4C:  CALL   1C46
.................... 					#endif
.................... 				#endif
.................... 	 	    	break;
0BD50:  MOVLB  4
0BD52:  BRA    BE7E
0BD54:  MOVLB  0
.................... 	 	    	}
.................... 			#if (chip_cs5460a == true)
.................... 		 	    case 2001:
.................... 		 	    	{
.................... 					dec_off_set_fp_cs5460a('S');
.................... 	 		    	break;
.................... 					}
.................... 		 	    case 2002:
.................... 		 	    	{
.................... 					dec_off_set_fp_cs5460a('T');
.................... 		 	    	break;
.................... 					}
.................... 			#else
.................... 		 	    case 2001:
.................... 		 	    case 2002:
.................... 		 	    	{
.................... 		 	    	break;
0BD56:  MOVLB  4
0BD58:  BRA    BE7E
0BD5A:  MOVLB  0
.................... 					}
.................... 			#endif
.................... 	 	    case 2003:
.................... 	 	    case 2006:
.................... 	 	    	{
.................... 				#if (chip_cs5460a == true)
.................... 					dec_ganho_v_cs5460a('R');
.................... 				#else
.................... 					os_ten_r1--;
0BD5C:  MOVLB  4
0BD5E:  DECF   xAB,F
.................... 					write_byte(ee_os_ten_r1, os_ten_r1);
0BD60:  MOVLB  A
0BD62:  CLRF   x68
0BD64:  MOVLW  0E
0BD66:  MOVWF  x67
0BD68:  MOVFF  4AB,A69
0BD6C:  MOVLB  0
0BD6E:  CALL   1C46
.................... 				#endif
.................... 	 	    	break;
0BD72:  MOVLB  4
0BD74:  BRA    BE7E
0BD76:  MOVLB  0
.................... 				}
.................... 	 	    case 2004:
.................... 	 	    case 2007:
.................... 	 	    	{
.................... 				#if (chip_cs5460a == true)
.................... 					dec_ganho_v_cs5460a('S');
.................... 				#else
.................... 					os_ten_s1--;
0BD78:  MOVLB  4
0BD7A:  DECF   xAC,F
.................... 					write_byte(ee_os_ten_s1, os_ten_s1);
0BD7C:  MOVLB  A
0BD7E:  CLRF   x68
0BD80:  MOVLW  0F
0BD82:  MOVWF  x67
0BD84:  MOVFF  4AC,A69
0BD88:  MOVLB  0
0BD8A:  CALL   1C46
.................... 				#endif
.................... 	 	    	break;
0BD8E:  MOVLB  4
0BD90:  BRA    BE7E
0BD92:  MOVLB  0
.................... 				}
.................... 	 	    case 2005:
.................... 	 	    case 2008:
.................... 	 	    	{
.................... 				#if (chip_cs5460a == true)
.................... 					dec_ganho_v_cs5460a('T');
.................... 				#else
.................... 					os_ten_t1--;
0BD94:  MOVLB  4
0BD96:  DECF   xAD,F
.................... 					write_byte(ee_os_ten_t1, os_ten_t1);
0BD98:  MOVLB  A
0BD9A:  CLRF   x68
0BD9C:  MOVLW  10
0BD9E:  MOVWF  x67
0BDA0:  MOVFF  4AD,A69
0BDA4:  MOVLB  0
0BDA6:  CALL   1C46
.................... 				#endif
.................... 	 	    	break;
0BDAA:  MOVLB  4
0BDAC:  BRA    BE7E
0BDAE:  MOVLB  0
.................... 				}
.................... 	 	    case 2009:
.................... 	 	    	{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_cor_r(-1);
.................... 				#else		 	    	
.................... 					#if (chip_cs5460a == true)
.................... 						dec_ganho_i_cs5460a('R');
.................... 					#else
.................... 						os_cor_r--;
0BDB0:  MOVLB  4
0BDB2:  DECF   xB1,F
.................... 						write_byte(ee_os_cor_r, os_cor_r);
0BDB4:  MOVLB  A
0BDB6:  CLRF   x68
0BDB8:  MOVLW  0B
0BDBA:  MOVWF  x67
0BDBC:  MOVFF  4B1,A69
0BDC0:  MOVLB  0
0BDC2:  CALL   1C46
.................... 					#endif
.................... 				#endif				
.................... 	 	    	break;
0BDC6:  MOVLB  4
0BDC8:  BRA    BE7E
0BDCA:  MOVLB  0
.................... 				}
.................... 	 	    case 2010:
.................... 	 	    	{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_cor_s(-1);
.................... 				#else		 	    	
.................... 					#if (chip_cs5460a == true)
.................... 						dec_ganho_i_cs5460a('S');
.................... 					#else
.................... 						os_cor_s--;
0BDCC:  MOVLB  4
0BDCE:  DECF   xB2,F
.................... 						write_byte(ee_os_cor_s, os_cor_s);
0BDD0:  MOVLB  A
0BDD2:  CLRF   x68
0BDD4:  MOVLW  0C
0BDD6:  MOVWF  x67
0BDD8:  MOVFF  4B2,A69
0BDDC:  MOVLB  0
0BDDE:  CALL   1C46
.................... 					#endif
.................... 				#endif				
.................... 	 	    	break;
0BDE2:  MOVLB  4
0BDE4:  BRA    BE7E
0BDE6:  MOVLB  0
.................... 				}
.................... 	 	    case 2011:
.................... 	 	    	{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_cor_t(-1);
.................... 				#else		 	    	
.................... 					#if (chip_cs5460a == true)
.................... 						dec_ganho_i_cs5460a('T');
.................... 					#else
.................... 						os_cor_t--;
0BDE8:  MOVLB  4
0BDEA:  DECF   xB3,F
.................... 						write_byte(ee_os_cor_t, os_cor_t);
0BDEC:  MOVLB  A
0BDEE:  CLRF   x68
0BDF0:  MOVLW  0D
0BDF2:  MOVWF  x67
0BDF4:  MOVFF  4B3,A69
0BDF8:  MOVLB  0
0BDFA:  CALL   1C46
.................... 					#endif
.................... 				#endif				
.................... 	 	    	break;
0BDFE:  MOVLB  4
0BE00:  BRA    BE7E
0BE02:  MOVLB  0
.................... 				}
.................... 			case 2012:
.................... 				#if (chip_cs5460a == true)
.................... 					{
.................... 					dec_tbc_register('R');
.................... 		 	    	break;
.................... 					}
.................... 				case 2013:
.................... 					{
.................... 					dec_tbc_register('S');
.................... 		 	    	break;
.................... 					}
.................... 				case 2014:
.................... 					{
.................... 					dec_tbc_register('T');
.................... 		 	    	break;
.................... 					}
.................... 		 	    case 2015:
.................... 		 	    	{
.................... 					dec_pulse_rate_cs5460a('R');
.................... 		 	    	break;
.................... 					}
.................... 		 	    case 2016:
.................... 		 	    	{
.................... 					dec_pulse_rate_cs5460a('S');
.................... 		 	    	break;
.................... 					}
.................... 		 	    case 2017:
.................... 		 	    	{
.................... 					dec_pulse_rate_cs5460a('T');
.................... 		 	    	break;
.................... 					}
.................... 	
.................... 			#endif
.................... 
.................... 			case 2050:
.................... 				{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_pot_r(-1);
.................... 				#else		 	    	
.................... 					os_pot_r--;
0BE04:  MOVLB  4
0BE06:  DECF   xB4,F
.................... 					write_byte(ee_os_pot_r, os_pot_r);
0BE08:  MOVLB  A
0BE0A:  CLRF   x68
0BE0C:  MOVLW  46
0BE0E:  MOVWF  x67
0BE10:  MOVFF  4B4,A69
0BE14:  MOVLB  0
0BE16:  CALL   1C46
.................... 				#endif
.................... 				
.................... 				#if (ade7754 == true)
.................... 					acao_ade7754 = 0;
.................... 				#endif
.................... 				break;
0BE1A:  MOVLB  4
0BE1C:  BRA    BE7E
0BE1E:  MOVLB  0
.................... 				}
.................... 			case 2051:
.................... 				{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_pot_s(-1);
.................... 				#else		 	    	
.................... 					os_pot_s--;
0BE20:  MOVLB  4
0BE22:  DECF   xB5,F
.................... 					write_byte(ee_os_pot_s, os_pot_s);
0BE24:  MOVLB  A
0BE26:  CLRF   x68
0BE28:  MOVLW  47
0BE2A:  MOVWF  x67
0BE2C:  MOVFF  4B5,A69
0BE30:  MOVLB  0
0BE32:  CALL   1C46
.................... 				#endif
.................... 
.................... 				#if (ade7754 == true)
.................... 					acao_ade7754 = 0;
.................... 				#endif
.................... 				break;
0BE36:  MOVLB  4
0BE38:  BRA    BE7E
0BE3A:  MOVLB  0
.................... 				}
.................... 			case 2052:
.................... 				{
.................... 				#if (portatil == true)
.................... 					ajusta_off_set_pot_t(-1);
.................... 				#else		 	    	
.................... 					os_pot_t--;
0BE3C:  MOVLB  4
0BE3E:  DECF   xB6,F
.................... 					write_byte(ee_os_pot_t, os_pot_t);
0BE40:  MOVLB  A
0BE42:  CLRF   x68
0BE44:  MOVLW  48
0BE46:  MOVWF  x67
0BE48:  MOVFF  4B6,A69
0BE4C:  MOVLB  0
0BE4E:  CALL   1C46
.................... 				#endif
.................... 
.................... 				#if (ade7754 == true)
.................... 					acao_ade7754 = 0;
.................... 				#endif
.................... 				break;
0BE52:  MOVLB  4
0BE54:  BRA    BE7E
0BE56:  MOVLB  0
.................... 				}
.................... 			#if (st5x == true)
.................... 		 	    case 6779:
.................... 		 	    	{
.................... 					if (bloqueio_gravacao == 67)
.................... 						{
.................... 						bloqueio_gravacao = 0;
.................... 						}
.................... 					else
.................... 						{
.................... 						bloqueio_gravacao = 67;
.................... 						}
.................... 					write_byte(ee_bloqueio_gravacao, bloqueio_gravacao);
.................... 					break;
.................... 					}
.................... 			#endif
.................... 
.................... 			case 8000:{
.................... //				GravarRegistrosTest();
.................... 				teste_memoria();
0BE58:  CALL   B008
.................... 			 	break;
0BE5C:  MOVLB  4
0BE5E:  BRA    BE7E
0BE60:  MOVLB  0
.................... 			}
.................... 
.................... 			#if (controlador == true)
.................... 				case 9000:
.................... 					{
.................... 					apaga_tempos();
0BE62:  CALL   B1F6
.................... 					break;
0BE66:  MOVLB  4
0BE68:  BRA    BE7E
0BE6A:  MOVLB  0
.................... 					}
.................... 			#endif
.................... 
.................... 
.................... 			#if (ade7754 == true)
.................... 		 	    case 9990:
.................... 		 	    	{
.................... 					reg_cfnum = read_word(ee_reg_cfnum);
.................... 					reg_cfnum--;
.................... 					write_word(ee_reg_cfnum, reg_cfnum);
.................... 					break;
.................... 					}
.................... 		 	    case 9991:
.................... 		 	    	{
.................... 					reg_cfdem = read_word(ee_reg_cfdem);
.................... 					reg_cfdem--;
.................... 					write_word(ee_reg_cfdem, reg_cfdem);
.................... 					break;
.................... 					}
.................... 			#endif
.................... 			#if (com_regs == true)
.................... 	 	    	case 9999:
.................... 	 	    		{
.................... 					apaga_memoria();
0BE6C:  CALL   AAA6
.................... 				 	break;
0BE70:  MOVLB  4
0BE72:  BRA    BE7E
0BE74:  MOVLB  5
.................... 		 		    }
.................... 			#endif
.................... 		 	 default:
.................... 		 		{
.................... 	 		    erro_mod = 1;
0BE76:  BSF    21.4
.................... 	 			qerro_mod = 2;
0BE78:  MOVLW  02
0BE7A:  MOVWF  x1E
0BE7C:  MOVLB  4
0BE7E:  MOVLB  3
.................... 		 		}
.................... 	 		}
.................... 		}
.................... 
....................  	if (erro_mod == 1)
0BE80:  BTFSS  21.4
0BE82:  BRA    BE94
....................  		{
.................... 		buf_tx[1] = buf_tx[1] | 0x80;
0BE84:  MOVLB  9
0BE86:  BSF    x49.7
.................... 		buf_tx[2] = qerro_mod;
0BE88:  MOVFF  51E,94A
.................... 		ptrtx = 3;
0BE8C:  MOVLW  03
0BE8E:  MOVLB  5
0BE90:  MOVWF  x2F
0BE92:  MOVLB  3
....................  		}
.................... 		
.................... 	crc_modbus =  crc16(buf_tx, ptrtx, 'M');
0BE94:  MOVLW  09
0BE96:  MOVLB  A
0BE98:  MOVWF  x51
0BE9A:  MOVLW  48
0BE9C:  MOVWF  x50
0BE9E:  MOVFF  52F,A52
0BEA2:  MOVLW  4D
0BEA4:  MOVWF  x53
0BEA6:  MOVLB  0
0BEA8:  CALL   6D6E
0BEAC:  MOVFF  02,526
0BEB0:  MOVFF  01,525
.................... 	data1_int = crc_modbus;
0BEB4:  MOVFF  526,3F0
0BEB8:  MOVFF  525,3EF
.................... 	poe_word_buftx();
0BEBC:  CALL   6E7E
.................... 	dispara_tx();
0BEC0:  CALL   6EE4
0BEC4:  GOTO   E05E (RETURN)
.................... }
.................... 
.................... 
.................... #include <st_fun06.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_COMU                                                        *
.................... ; Funcao: MODULO gerencialde comunicação rs232/485						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... void modbus_funcao06(void)
.................... {
.................... 	erro_mod = 0;
*
0D9F0:  BCF    21.4
.................... 	qerro_mod = 0;
0D9F2:  MOVLB  5
0D9F4:  CLRF   x1E
.................... 	le_endereco();
0D9F6:  MOVLB  0
0D9F8:  CALL   6E36
.................... 	if (addr_regs_modbus == 0)
0D9FC:  MOVLB  5
0D9FE:  MOVF   x29,F
0DA00:  BNZ   DA0C
0DA02:  MOVF   x2A,F
0DA04:  BNZ   DA0C
.................... 		{
.................... 	    erro_mod = 1;
0DA06:  BSF    21.4
.................... 		qerro_mod = 2;
0DA08:  MOVLW  02
0DA0A:  MOVWF  x1E
.................... 		}
.................... 	if (bloqueio_gravacao == 67)
0DA0C:  MOVF   4E,W
0DA0E:  SUBLW  43
0DA10:  BNZ   DA18
.................... 		{
.................... 	    erro_mod = 1;
0DA12:  BSF    21.4
.................... 		qerro_mod = 2;
0DA14:  MOVLW  02
0DA16:  MOVWF  x1E
.................... 		}
.................... 
.................... 	if (erro_mod == 0)
0DA18:  BTFSC  21.4
0DA1A:  BRA    DA50
.................... 		{
.................... 		buf_tx[ptrtx++] = 2;		// monta nro de pontos 
0DA1C:  MOVF   x2F,W
0DA1E:  INCF   x2F,F
0DA20:  ADDLW  48
0DA22:  MOVWF  FE9
0DA24:  MOVLW  09
0DA26:  MOVWF  FEA
0DA28:  BTFSC  FD8.0
0DA2A:  INCF   FEA,F
0DA2C:  MOVLW  02
0DA2E:  MOVWF  FEF
....................  		le_data_mod();				// le dado a ser escrito 
0DA30:  MOVLB  0
0DA32:  CALL   BEC8
.................... 		wr_byte_regs_modbus();		// escreve dado na e2prom ou na ram
0DA36:  CALL   BFD8
.................... 		data1_int = data_modbus;
0DA3A:  MOVFF  520,3F0
0DA3E:  MOVFF  51F,3EF
.................... 		if (erro_mod==0)
0DA42:  BTFSC  21.4
0DA44:  BRA    DA4A
.................... 			{
.................... 			poe_word_buftx();             			 				/* poe dado no buffer */
0DA46:  CALL   6E7E
.................... 			}
.................... 		valida_programa();
0DA4A:  CALL   36FE
0DA4E:  MOVLB  5
.................... 		}
.................... 		
....................  	if (erro_mod == 1)
0DA50:  BTFSS  21.4
0DA52:  BRA    DA62
....................  		{
.................... 		buf_tx[1] = buf_tx[1] | 0x80;
0DA54:  MOVLB  9
0DA56:  BSF    x49.7
.................... 		buf_tx[2] = qerro_mod;
0DA58:  MOVFF  51E,94A
.................... 		ptrtx = 3;
0DA5C:  MOVLW  03
0DA5E:  MOVLB  5
0DA60:  MOVWF  x2F
....................  		}
.................... //	else
.................... //		{
.................... //		ptrtx =0;
.................... //		buf_tx[ptrtx++] = addr_modbus;
.................... //		buf_tx[ptrtx++] = 6;
.................... //		buf_tx[ptrtx++] = addr_regs_modbus >> 8;
.................... //		buf_tx[ptrtx++] = addr_regs_modbus;
.................... //		buf_tx[ptrtx++] = data1_int >> 8;
.................... //		buf_tx[ptrtx++] = data1_int;
.................... //		}
.................... 
.................... 					
.................... 	crc_modbus = crc16(buf_tx, ptrtx, 'M');
0DA62:  MOVLW  09
0DA64:  MOVLB  A
0DA66:  MOVWF  x51
0DA68:  MOVLW  48
0DA6A:  MOVWF  x50
0DA6C:  MOVFF  52F,A52
0DA70:  MOVLW  4D
0DA72:  MOVWF  x53
0DA74:  MOVLB  0
0DA76:  CALL   6D6E
0DA7A:  MOVFF  02,526
0DA7E:  MOVFF  01,525
.................... 	data1_int = crc_modbus;
0DA82:  MOVFF  526,3F0
0DA86:  MOVFF  525,3EF
.................... 	poe_word_buftx();
0DA8A:  CALL   6E7E
.................... 	dispara_tx();
0DA8E:  CALL   6EE4
.................... 	
.................... 	calcula_checksum_vars() ;
0DA92:  CALL   1A42
0DA96:  GOTO   E05E (RETURN)
.................... 
.................... }
.................... 
.................... 	 
.................... 
.................... #include <st_fun17.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_COMU                                                        *
.................... ; Funcao: MODULO gerencialde comunicação rs232/485						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
....................   
.................... 
.................... void modbus_funcao17(void)
.................... {
.................... 	char ptrtx_old;
.................... 	char aux1;
.................... 	char buf_nro[4];
.................... 
.................... 	#if (controlador == true)
.................... 		salva_contadores();
*
0DC46:  RCALL  DB90
.................... 	#endif
.................... 
.................... 	buf_nro[0] = read_byte(ee_nro_1);
0DC48:  MOVLW  03
0DC4A:  MOVLB  A
0DC4C:  MOVWF  x66
0DC4E:  MOVLW  7C
0DC50:  MOVWF  x65
0DC52:  MOVLB  0
0DC54:  CALL   1C24
0DC58:  MOVFF  01,A4C
.................... 	buf_nro[1] = read_byte(ee_nro_2);
0DC5C:  MOVLW  03
0DC5E:  MOVLB  A
0DC60:  MOVWF  x66
0DC62:  MOVLW  7D
0DC64:  MOVWF  x65
0DC66:  MOVLB  0
0DC68:  CALL   1C24
0DC6C:  MOVFF  01,A4D
.................... 	buf_nro[2] = read_byte(ee_nro_3);
0DC70:  MOVLW  03
0DC72:  MOVLB  A
0DC74:  MOVWF  x66
0DC76:  MOVLW  7E
0DC78:  MOVWF  x65
0DC7A:  MOVLB  0
0DC7C:  CALL   1C24
0DC80:  MOVFF  01,A4E
.................... 	buf_nro[3] = read_byte(ee_nro_4);
0DC84:  MOVLW  03
0DC86:  MOVLB  A
0DC88:  MOVWF  x66
0DC8A:  MOVLW  7F
0DC8C:  MOVWF  x65
0DC8E:  MOVLB  0
0DC90:  CALL   1C24
0DC94:  MOVFF  01,A4F
.................... 	
.................... 	ptrtx_old = ptrtx;
0DC98:  MOVFF  52F,A4A
....................   	ptrtx = ptrtx + 1;
0DC9C:  MOVLW  01
0DC9E:  MOVLB  5
0DCA0:  ADDWF  x2F,F
....................     nro_pontos_modbus = 0;
0DCA2:  CLRF   x28
0DCA4:  CLRF   x27
.................... //								  012345678901234567890
.................... //								  0         10  14
.................... //		const char cequipo[22] = "ST5000T-V3.16-0001.C";
....................          
.................... 	existe = false;     
0DCA6:  BCF    21.5
....................     while(TRUE)
....................        	{
....................        	data1 = cequipo[nro_pontos_modbus];
0DCA8:  MOVFF  528,03
0DCAC:  MOVF   x27,W
0DCAE:  MOVLB  0
0DCB0:  CALL   01C2
0DCB4:  MOVFF  FE8,3BE
....................        	if (data1 == '@') 
0DCB8:  MOVLB  3
0DCBA:  MOVF   xBE,W
0DCBC:  SUBLW  40
0DCBE:  BTFSS  FD8.2
0DCC0:  BRA    DDC2
....................        		{
.................... 			if ((buf_nro[0] > ('0'- 1)) && (buf_nro[0] < ('9' + 1)))
0DCC2:  MOVLB  A
0DCC4:  MOVF   x4C,W
0DCC6:  SUBLW  2F
0DCC8:  BC    DD60
0DCCA:  MOVF   x4C,W
0DCCC:  SUBLW  39
0DCCE:  BNC   DD60
.................... 				{
.................... 				if ((buf_nro[1] > ('0'- 1)) && (buf_nro[1] < ('9' + 1)))
0DCD0:  MOVF   x4D,W
0DCD2:  SUBLW  2F
0DCD4:  BC    DD60
0DCD6:  MOVF   x4D,W
0DCD8:  SUBLW  39
0DCDA:  BNC   DD60
.................... 					{
.................... 					if ((buf_nro[2] > ('0'- 1)) && (buf_nro[2] < ('9' + 1)))
0DCDC:  MOVF   x4E,W
0DCDE:  SUBLW  2F
0DCE0:  BC    DD60
0DCE2:  MOVF   x4E,W
0DCE4:  SUBLW  39
0DCE6:  BNC   DD60
.................... 						{
.................... 						if ((buf_nro[3] > ('0'- 1)) && (buf_nro[3] < ('9' + 1)))
0DCE8:  MOVF   x4F,W
0DCEA:  SUBLW  2F
0DCEC:  BC    DD60
0DCEE:  MOVF   x4F,W
0DCF0:  SUBLW  39
0DCF2:  BNC   DD60
.................... 							{
.................... 							buf_tx[ptrtx++] = '-';
0DCF4:  MOVLB  5
0DCF6:  MOVF   x2F,W
0DCF8:  INCF   x2F,F
0DCFA:  ADDLW  48
0DCFC:  MOVWF  FE9
0DCFE:  MOVLW  09
0DD00:  MOVWF  FEA
0DD02:  BTFSC  FD8.0
0DD04:  INCF   FEA,F
0DD06:  MOVLW  2D
0DD08:  MOVWF  FEF
.................... 							nro_pontos_modbus++;
0DD0A:  INCF   x27,F
0DD0C:  BTFSC  FD8.2
0DD0E:  INCF   x28,F
.................... 							existe = true;
0DD10:  BSF    21.5
.................... 						    for (aux1 = 0; aux1 < 4; aux1++)
0DD12:  MOVLB  A
0DD14:  CLRF   x4B
0DD16:  MOVF   x4B,W
0DD18:  SUBLW  03
0DD1A:  BNC   DD60
....................        							{
.................... 								buf_tx[ptrtx++] = buf_nro[aux1];
0DD1C:  MOVLB  5
0DD1E:  MOVF   x2F,W
0DD20:  INCF   x2F,F
0DD22:  ADDLW  48
0DD24:  MOVWF  01
0DD26:  MOVLW  09
0DD28:  MOVWF  03
0DD2A:  BTFSC  FD8.0
0DD2C:  INCF   03,F
0DD2E:  MOVLB  A
0DD30:  MOVFF  03,A51
0DD34:  CLRF   03
0DD36:  MOVF   x4B,W
0DD38:  ADDLW  4C
0DD3A:  MOVWF  FE9
0DD3C:  MOVLW  0A
0DD3E:  ADDWFC 03,W
0DD40:  MOVWF  FEA
0DD42:  MOVFF  FEF,A52
0DD46:  MOVFF  A51,FEA
0DD4A:  MOVFF  01,FE9
0DD4E:  MOVFF  A52,FEF
.................... 								nro_pontos_modbus++;
0DD52:  MOVLB  5
0DD54:  INCF   x27,F
0DD56:  BTFSC  FD8.2
0DD58:  INCF   x28,F
0DD5A:  MOVLB  A
0DD5C:  INCF   x4B,F
0DD5E:  BRA    DD16
....................        							}
.................... 							}
.................... 						}
.................... 					}
.................... 				}
.................... 			if (existe == false)
0DD60:  BTFSC  21.5
0DD62:  BRA    DDBE
.................... 				{
.................... 				buf_tx[ptrtx++] = '-';
0DD64:  MOVLB  5
0DD66:  MOVF   x2F,W
0DD68:  INCF   x2F,F
0DD6A:  ADDLW  48
0DD6C:  MOVWF  FE9
0DD6E:  MOVLW  09
0DD70:  MOVWF  FEA
0DD72:  BTFSC  FD8.0
0DD74:  INCF   FEA,F
0DD76:  MOVLW  2D
0DD78:  MOVWF  FEF
.................... 				nro_pontos_modbus++;
0DD7A:  INCF   x27,F
0DD7C:  BTFSC  FD8.2
0DD7E:  INCF   x28,F
.................... 			    for (aux1 = 0; aux1 < 4; aux1++)
0DD80:  MOVLB  A
0DD82:  CLRF   x4B
0DD84:  MOVF   x4B,W
0DD86:  SUBLW  03
0DD88:  BNC   DDBE
.................... 					{
.................... 			       	data1 = cequipo[nro_pontos_modbus];
0DD8A:  MOVFF  528,03
0DD8E:  MOVLB  5
0DD90:  MOVF   x27,W
0DD92:  MOVLB  0
0DD94:  CALL   01C2
0DD98:  MOVFF  FE8,3BE
.................... 					buf_tx[ptrtx++] = data1;
0DD9C:  MOVLB  5
0DD9E:  MOVF   x2F,W
0DDA0:  INCF   x2F,F
0DDA2:  ADDLW  48
0DDA4:  MOVWF  FE9
0DDA6:  MOVLW  09
0DDA8:  MOVWF  FEA
0DDAA:  BTFSC  FD8.0
0DDAC:  INCF   FEA,F
0DDAE:  MOVFF  3BE,FEF
.................... 					nro_pontos_modbus++;
0DDB2:  INCF   x27,F
0DDB4:  BTFSC  FD8.2
0DDB6:  INCF   x28,F
0DDB8:  MOVLB  A
0DDBA:  INCF   x4B,F
0DDBC:  BRA    DD84
.................... 					}
.................... 
.................... 				}
....................        		}
0DDBE:  BRA    DDE4
0DDC0:  MOVLB  3
.................... 		else
.................... 			{
.................... 	       	if (data1 == 0) 
0DDC2:  MOVF   xBE,F
0DDC4:  BNZ   DDC8
....................     	   		{
.................... 				break;
0DDC6:  BRA    DDEA
.................... 				}
.................... 			buf_tx[ptrtx++] = data1;
0DDC8:  MOVLB  5
0DDCA:  MOVF   x2F,W
0DDCC:  INCF   x2F,F
0DDCE:  ADDLW  48
0DDD0:  MOVWF  FE9
0DDD2:  MOVLW  09
0DDD4:  MOVWF  FEA
0DDD6:  BTFSC  FD8.0
0DDD8:  INCF   FEA,F
0DDDA:  MOVFF  3BE,FEF
.................... 			nro_pontos_modbus++;
0DDDE:  INCF   x27,F
0DDE0:  BTFSC  FD8.2
0DDE2:  INCF   x28,F
.................... 			}
0DDE4:  MOVLB  5
0DDE6:  BRA    DCA8
0DDE8:  MOVLB  3
....................        	}
.................... 
....................     for (aux1 = 0; aux1 < 9; aux1++)
0DDEA:  MOVLB  A
0DDEC:  CLRF   x4B
0DDEE:  MOVF   x4B,W
0DDF0:  SUBLW  08
0DDF2:  BNC   DE22
....................        	{
.................... 		buf_tx[ptrtx++] = cdata[aux1];
0DDF4:  MOVLB  5
0DDF6:  MOVF   x2F,W
0DDF8:  INCF   x2F,F
0DDFA:  ADDLW  48
0DDFC:  MOVWF  FE9
0DDFE:  MOVLW  09
0DE00:  MOVWF  FEA
0DE02:  BTFSC  FD8.0
0DE04:  INCF   FEA,F
0DE06:  CLRF   03
0DE08:  MOVLB  A
0DE0A:  MOVF   x4B,W
0DE0C:  MOVLB  0
0DE0E:  CALL   0186
0DE12:  MOVWF  FEF
.................... 		nro_pontos_modbus++;
0DE14:  MOVLB  5
0DE16:  INCF   x27,F
0DE18:  BTFSC  FD8.2
0DE1A:  INCF   x28,F
0DE1C:  MOVLB  A
0DE1E:  INCF   x4B,F
0DE20:  BRA    DDEE
....................        	}
....................     for (aux1 = 0; aux1 < 8; aux1++)
0DE22:  CLRF   x4B
0DE24:  MOVF   x4B,W
0DE26:  SUBLW  07
0DE28:  BNC   DE58
....................        	{
.................... 		buf_tx[ptrtx++] = ctime[aux1];
0DE2A:  MOVLB  5
0DE2C:  MOVF   x2F,W
0DE2E:  INCF   x2F,F
0DE30:  ADDLW  48
0DE32:  MOVWF  FE9
0DE34:  MOVLW  09
0DE36:  MOVWF  FEA
0DE38:  BTFSC  FD8.0
0DE3A:  INCF   FEA,F
0DE3C:  CLRF   03
0DE3E:  MOVLB  A
0DE40:  MOVF   x4B,W
0DE42:  MOVLB  0
0DE44:  CALL   01A4
0DE48:  MOVWF  FEF
.................... 		nro_pontos_modbus++;
0DE4A:  MOVLB  5
0DE4C:  INCF   x27,F
0DE4E:  BTFSC  FD8.2
0DE50:  INCF   x28,F
0DE52:  MOVLB  A
0DE54:  INCF   x4B,F
0DE56:  BRA    DE24
....................        	}
.................... 
....................     	
....................     data1_int = ptrtx;
0DE58:  MOVLB  3
0DE5A:  CLRF   xF0
0DE5C:  MOVFF  52F,3EF
....................     ptrtx = ptrtx_old;
0DE60:  MOVFF  A4A,52F
....................     ptrtx_old = data1_int;
0DE64:  MOVFF  3EF,A4A
.................... 	data1 = nro_pontos_modbus;		/* monta nro de pontos */
0DE68:  MOVFF  527,3BE
.................... 	buf_tx[ptrtx++] = data1;
0DE6C:  MOVLB  5
0DE6E:  MOVF   x2F,W
0DE70:  INCF   x2F,F
0DE72:  ADDLW  48
0DE74:  MOVWF  FE9
0DE76:  MOVLW  09
0DE78:  MOVWF  FEA
0DE7A:  BTFSC  FD8.0
0DE7C:  INCF   FEA,F
0DE7E:  MOVFF  3BE,FEF
....................     ptrtx = ptrtx_old;
0DE82:  MOVFF  A4A,52F
....................                     
.................... 	crc_modbus =  crc16(buf_tx, ptrtx, 'M');
0DE86:  MOVLW  09
0DE88:  MOVLB  A
0DE8A:  MOVWF  x51
0DE8C:  MOVLW  48
0DE8E:  MOVWF  x50
0DE90:  MOVFF  52F,A52
0DE94:  MOVLW  4D
0DE96:  MOVWF  x53
0DE98:  MOVLB  0
0DE9A:  CALL   6D6E
0DE9E:  MOVFF  02,526
0DEA2:  MOVFF  01,525
.................... 	data1_int = crc_modbus;
0DEA6:  MOVFF  526,3F0
0DEAA:  MOVFF  525,3EF
.................... 	poe_word_buftx();
0DEAE:  CALL   6E7E
.................... 	dispara_tx();
0DEB2:  CALL   6EE4
0DEB6:  GOTO   E05E (RETURN)
.................... 					
.................... }
.................... 
.................... 
.................... 	 
.................... 
.................... #include <st_fun16.c>
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_COMU                                                        *
.................... ; Funcao: MODULO gerencialde comunicação rs232/485						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
....................   
.................... 
.................... 
.................... void modbus_funcao16(void)
.................... {
.................... 	char aux_b3;
.................... 	le_endereco();
*
0DACA:  CALL   6E36
.................... 	le_nro_regs();
0DACE:  BRA    DA9A
.................... 	le_byte_count();
0DAD0:  BRA    DAAA
.................... 
.................... 	erro_mod = 0;
0DAD2:  BCF    21.4
.................... 	qerro_mod = 0;
0DAD4:  MOVLB  5
0DAD6:  CLRF   x1E
.................... 	if (addr_regs_modbus == 0)
0DAD8:  MOVF   x29,F
0DADA:  BNZ   DAE6
0DADC:  MOVF   x2A,F
0DADE:  BNZ   DAE6
.................... 		{
.................... 	    erro_mod = 1;
0DAE0:  BSF    21.4
.................... 		qerro_mod = 2;
0DAE2:  MOVLW  02
0DAE4:  MOVWF  x1E
.................... 		}
.................... 	if (bloqueio_gravacao == 67)
0DAE6:  MOVF   4E,W
0DAE8:  SUBLW  43
0DAEA:  BNZ   DAF2
.................... 		{
.................... 	    erro_mod = 1;
0DAEC:  BSF    21.4
.................... 		qerro_mod = 2;
0DAEE:  MOVLW  02
0DAF0:  MOVWF  x1E
.................... 		}
.................... 
.................... 	data1_int = addr_regs_modbus;
0DAF2:  MOVFF  52A,3F0
0DAF6:  MOVFF  529,3EF
....................  	poe_word_buftx();
0DAFA:  MOVLB  0
0DAFC:  CALL   6E7E
.................... 
.................... 	data1_int = nro_regs_modbus;
0DB00:  MOVFF  522,3F0
0DB04:  MOVFF  521,3EF
....................  	poe_word_buftx();
0DB08:  CALL   6E7E
.................... 
.................... 	for (aux_b3 = 0; aux_b3 < nro_regs_modbus; aux_b3++)
0DB0C:  MOVLB  A
0DB0E:  CLRF   x4A
0DB10:  MOVLB  5
0DB12:  MOVF   x22,F
0DB14:  BNZ   DB20
0DB16:  MOVF   x21,W
0DB18:  MOVLB  A
0DB1A:  SUBWF  x4A,W
0DB1C:  BC    DB42
0DB1E:  MOVLB  5
.................... 		{
....................  		le_data_mod();								// le dado a ser escrito 
0DB20:  MOVLB  0
0DB22:  CALL   BEC8
.................... 	 	wr_byte_regs_modbus();
0DB26:  CALL   BFD8
.................... 		addr_regs_modbus++;
0DB2A:  MOVLB  5
0DB2C:  INCF   x29,F
0DB2E:  BTFSC  FD8.2
0DB30:  INCF   x2A,F
.................... 	 	if (erro_mod == 1)
0DB32:  BTFSS  21.4
0DB34:  BRA    DB3C
.................... 	 		{
.................... 	 		break;
0DB36:  MOVLB  A
0DB38:  BRA    DB42
0DB3A:  MOVLB  5
.................... 		  }
0DB3C:  MOVLB  A
0DB3E:  INCF   x4A,F
0DB40:  BRA    DB10
.................... 		}
.................... 		
.................... 	valida_programa();
0DB42:  MOVLB  0
0DB44:  CALL   36FE
.................... 
....................  	if (erro_mod == 1)
0DB48:  BTFSS  21.4
0DB4A:  BRA    DB5C
....................  		{
.................... 		buf_tx[1] = buf_tx[1] | 0x80;
0DB4C:  MOVLB  9
0DB4E:  BSF    x49.7
.................... 		buf_tx[2] = qerro_mod;
0DB50:  MOVFF  51E,94A
.................... 		ptrtx = 3;
0DB54:  MOVLW  03
0DB56:  MOVLB  5
0DB58:  MOVWF  x2F
0DB5A:  MOVLB  0
....................  		}
.................... 	crc_modbus =  crc16(buf_tx, ptrtx, 'M');
0DB5C:  MOVLW  09
0DB5E:  MOVLB  A
0DB60:  MOVWF  x51
0DB62:  MOVLW  48
0DB64:  MOVWF  x50
0DB66:  MOVFF  52F,A52
0DB6A:  MOVLW  4D
0DB6C:  MOVWF  x53
0DB6E:  MOVLB  0
0DB70:  CALL   6D6E
0DB74:  MOVFF  02,526
0DB78:  MOVFF  01,525
.................... 	data1_int = crc_modbus;
0DB7C:  MOVFF  526,3F0
0DB80:  MOVFF  525,3EF
.................... 	poe_word_buftx();
0DB84:  CALL   6E7E
.................... 	dispara_tx();
0DB88:  CALL   6EE4
0DB8C:  GOTO   E05E (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... 
.................... #if (protocolo_abb == true)
.................... 	#include <st_fun67.c>
.................... #endif
.................... 
.................... 
.................... void le_slave_addresss(void)
.................... {
.................... 	addr_modbus = 255;
*
06D54:  MOVLB  5
06D56:  SETF   x1A
.................... 	if (retrx != ptrrx)
06D58:  MOVF   x30,W
06D5A:  SUBWF  x31,W
06D5C:  BZ    6D68
.................... 		{
.................... 		addr_modbus = ret_ser();
06D5E:  MOVLB  0
06D60:  RCALL  6D22
06D62:  MOVFF  01,51A
06D66:  MOVLB  5
.................... 		}
06D68:  MOVLB  0
06D6A:  GOTO   DED8 (RETURN)
.................... }
.................... 
.................... void le_function(void)
.................... {
.................... 	funcao_modbus=0;
*
06DE2:  MOVLB  5
06DE4:  CLRF   x1B
.................... 	if (retrx!=ptrrx)
06DE6:  MOVF   x30,W
06DE8:  SUBWF  x31,W
06DEA:  BZ    6DF6
.................... 		{
.................... 		funcao_modbus = ret_ser();
06DEC:  MOVLB  0
06DEE:  RCALL  6D22
06DF0:  MOVFF  01,51B
06DF4:  MOVLB  5
.................... 		}
06DF6:  MOVLB  0
06DF8:  GOTO   DFC4 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void trata_modbus(void)
.................... {
.................... 
.................... 	if (retrx == ptrrx)
*
0DEBA:  MOVLB  5
0DEBC:  MOVF   x30,W
0DEBE:  SUBWF  x31,W
0DEC0:  BNZ   DEC4
.................... 		{
.................... 		return;
0DEC2:  BRA    E074
.................... 		}
.................... 	
.................... 	if (time_out_modbus == 0)
0DEC4:  MOVF   x1D,F
0DEC6:  BNZ   DED0
.................... 		{
.................... 		if (numbrx == 0)
0DEC8:  MOVF   x32,F
0DECA:  BNZ   DECE
.................... 			{
.................... 			return;
0DECC:  BRA    E074
.................... 			}
.................... 		}
0DECE:  BRA    DED2
.................... 	else
.................... 		{
.................... 		return;
0DED0:  BRA    E074
.................... 		}
.................... 	
.................... 	#if (protocolo_abb == true)
.................... 		#if (teste_protocolo_abb == true)
.................... 			tensao_r = 127 * 64;
.................... 			corrente_r = 250 * 8;
.................... 			pot_ativa_r = (127 * 200 * 32) / 1000;
.................... 			pot_reativa_r = (127 * 100 * 32) / 1000;
.................... 			pot_aparente_r = (127 * 250 * 32) / 1000;
.................... 			aux_l1 = pot_ativa_r;
.................... 			aux_l1 = aux_l1 * 1024;
.................... 			fator_pot_r = aux_l1 / pot_aparente_r;
.................... 			tensao_rs = 127 * 1.73 * 64;
.................... 			#if (monofasico == false)
.................... 				tensao_s = 128 * 64;
.................... 				tensao_t = 129 * 64;
.................... 				corrente_s = 101 * 8;
.................... 				corrente_t = 102 * 8;
.................... 				
.................... 				pot_ativa_s = (128 * 100 * 32) / 1000;
.................... 				pot_reativa_s = (128 * 10 * 32) / 1000;
.................... 				pot_aparente_s = (128 * 110 * 32) / 1000;
.................... 				aux_l1 = pot_ativa_s;
.................... 				aux_l1 = aux_l1 * 1024;
.................... 				fator_pot_s = aux_l1 / pot_aparente_s;
.................... 
.................... 				pot_ativa_t = (129 * 100 * 32) / 1000;
.................... 				pot_reativa_t = (129 * 10 * 32) / 1000;
.................... 				pot_aparente_t = (129 * 110 * 32) / 1000;
.................... 				aux_l1 = pot_ativa_t;
.................... 				aux_l1 = aux_l1 * 1024;
.................... 				fator_pot_t = aux_l1 / pot_aparente_t;
.................... 
.................... 				tensao_st = 128 * 1.73 * 64;
.................... 				tensao_rt = 129 * 1.73 * 64;
.................... 
.................... 				
.................... 			#endif
.................... 			#if com_consumo == true)
.................... 				consumo_ati++;
.................... 				consumo_reati++;
.................... 			#endif
.................... 			
.................... 		#endif
.................... 	#endif
.................... 	
.................... //	disable_interrupts(INT_RDA);
.................... 
.................... 	le_slave_addresss();
0DED2:  MOVLB  0
0DED4:  GOTO   6D54
.................... //
.................... #if (portatil == TRUE)
.................... 	{
.................... 	if (addr_modbus != 187)
.................... 		{
.................... 		endereco = addr_modbus;
.................... 		}
.................... 	}
.................... #elif (st_prog == true)
.................... 	{
.................... 	if (addr_modbus != 187)
.................... 		{
.................... 		endereco = addr_modbus;
.................... 		}
.................... 	#if (simula_rep == true)
.................... 		endereco = 247;
.................... 	#endif		
.................... 	
.................... 	}
.................... #else
.................... 	{
.................... 	//  SOMENTE DURANTE OS TESTES DE BANCADA 
.................... 	//		
.................... 	#if (st5x == true)
.................... 		#if (endereco_padrao == true)
.................... 			endereco = 187;	
.................... 		#else
.................... 			#if (TECNOFLUX == TRUE)
.................... 				endereco = 100 + endereco_nro_serie;
.................... 			#else
.................... 				#if (endereco_via_serial == true)
.................... 					dip_addr = 1;
.................... 					endereco = 1;
.................... 				#else
.................... 					endereco = dip_addr;	
.................... 				#endif
.................... 			#endif
.................... 		#endif
.................... 	#endif
.................... 	}
.................... #endif
.................... //		
.................... 	#if (st5x == true)
.................... 		#if (endereco_padrao == false)			// implementado a partir de 19/11/07 - vagner
.................... 			if (addr_modbus == 0)
.................... 				{
.................... 				addr_modbus = endereco;
.................... 				}
.................... 		#endif
.................... 	#else
.................... 		if (addr_modbus == 0)
0DED8:  MOVLB  5
0DEDA:  MOVF   x1A,F
0DEDC:  BNZ   DEE2
.................... 			{
.................... 			addr_modbus = endereco;
0DEDE:  MOVFF  4CE,51A
.................... 			}
.................... 	#endif
.................... 		
.................... 		aux_b1 = buf_rx[0];
0DEE2:  MOVFF  840,3B1
.................... 		aux_b2 = buf_rx[1];
0DEE6:  MOVFF  841,3B2
.................... 		aux_b3 = buf_rx[2];
0DEEA:  MOVFF  842,3B3
.................... 		aux_b4 = buf_rx[3];
0DEEE:  MOVFF  843,3B4
.................... 		aux_b1 = buf_rx[4];
0DEF2:  MOVFF  844,3B1
.................... 		aux_b2 = buf_rx[5];
0DEF6:  MOVFF  845,3B2
.................... 		aux_b3 = buf_rx[6];
0DEFA:  MOVFF  846,3B3
.................... 		aux_b4 = buf_rx[7];
0DEFE:  MOVFF  847,3B4
.................... 		aux_b1 = buf_rx[8];
0DF02:  MOVFF  848,3B1
.................... 		aux_b2 = buf_rx[9];
0DF06:  MOVFF  849,3B2
.................... 		aux_b3 = buf_rx[10];
0DF0A:  MOVFF  84A,3B3
.................... 		aux_b4 = buf_rx[11];
0DF0E:  MOVFF  84B,3B4
.................... //[001,003,000,001,000,003,084,011,]		
.................... 		
.................... 	if (addr_modbus == endereco)
0DF12:  MOVLB  4
0DF14:  MOVF   xCE,W
0DF16:  MOVLB  5
0DF18:  SUBWF  x1A,W
0DF1A:  BTFSS  FD8.2
0DF1C:  BRA    E06C
.................... 		{
.................... 		crc_modbus =  crc16(buf_rx, (numbrx - 2), 'M');
0DF1E:  MOVLW  02
0DF20:  SUBWF  x32,W
0DF22:  MOVLB  A
0DF24:  MOVWF  x4A
0DF26:  MOVLW  08
0DF28:  MOVWF  x51
0DF2A:  MOVLW  40
0DF2C:  MOVWF  x50
0DF2E:  MOVFF  A4A,A52
0DF32:  MOVLW  4D
0DF34:  MOVWF  x53
0DF36:  MOVLB  0
0DF38:  CALL   6D6E
0DF3C:  MOVFF  02,526
0DF40:  MOVFF  01,525
.................... 		data1_int = buf_rx[numbrx-2];
0DF44:  MOVLW  02
0DF46:  MOVLB  5
0DF48:  SUBWF  x32,W
0DF4A:  CLRF   03
0DF4C:  ADDLW  40
0DF4E:  MOVWF  FE9
0DF50:  MOVLW  08
0DF52:  ADDWFC 03,W
0DF54:  MOVWF  FEA
0DF56:  MOVLB  3
0DF58:  CLRF   xF0
0DF5A:  MOVFF  FEF,3EF
.................... 		data1_int = data1_int << 8;
0DF5E:  MOVFF  3EF,3F0
0DF62:  CLRF   xEF
.................... 		data1 = buf_rx[numbrx-1];
0DF64:  MOVLW  01
0DF66:  MOVLB  5
0DF68:  SUBWF  x32,W
0DF6A:  CLRF   03
0DF6C:  ADDLW  40
0DF6E:  MOVWF  FE9
0DF70:  MOVLW  08
0DF72:  ADDWFC 03,W
0DF74:  MOVWF  FEA
0DF76:  MOVFF  FEF,3BE
.................... 		data1_int = data1_int | data1;
0DF7A:  MOVLB  3
0DF7C:  MOVF   xBE,W
0DF7E:  IORWF  xEF,F
.................... 		/* ************************************ */								
.................... 		/* nao testa check s check = 0xffff */
.................... 		#if (portatil == TRUE)
.................... 			//		data1_int = crc_modbus;
.................... 		#endif
.................... 		if (data1_int == 0xffff)
0DF80:  INCFSZ xEF,W
0DF82:  BRA    DF90
0DF84:  INCFSZ xF0,W
0DF86:  BRA    DF90
.................... 			{
.................... 			data1_int = crc_modbus;
0DF88:  MOVFF  526,3F0
0DF8C:  MOVFF  525,3EF
.................... 			}
.................... /* ************************************ */
.................... 		if (data1_int == crc_modbus)
0DF90:  MOVLB  5
0DF92:  MOVF   x25,W
0DF94:  MOVLB  3
0DF96:  SUBWF  xEF,W
0DF98:  BTFSS  FD8.2
0DF9A:  BRA    E062
0DF9C:  MOVLB  5
0DF9E:  MOVF   x26,W
0DFA0:  MOVLB  3
0DFA2:  SUBWF  xF0,W
0DFA4:  BNZ   E062
.................... 			{
.................... 			ptrtx =0;
0DFA6:  MOVLB  5
0DFA8:  CLRF   x2F
.................... 			buf_tx[ptrtx++] = addr_modbus;		/* monta resposta com endereco */
0DFAA:  MOVF   x2F,W
0DFAC:  INCF   x2F,F
0DFAE:  ADDLW  48
0DFB0:  MOVWF  FE9
0DFB2:  MOVLW  09
0DFB4:  MOVWF  FEA
0DFB6:  BTFSC  FD8.0
0DFB8:  INCF   FEA,F
0DFBA:  MOVFF  51A,FEF
.................... 			le_function();
0DFBE:  MOVLB  0
0DFC0:  GOTO   6DE2
.................... 			buf_tx[ptrtx++] = funcao_modbus;		/* monta resposta com funcao */
0DFC4:  MOVLB  5
0DFC6:  MOVF   x2F,W
0DFC8:  INCF   x2F,F
0DFCA:  ADDLW  48
0DFCC:  MOVWF  FE9
0DFCE:  MOVLW  09
0DFD0:  MOVWF  FEA
0DFD2:  BTFSC  FD8.0
0DFD4:  INCF   FEA,F
0DFD6:  MOVFF  51B,FEF
.................... 			switch(funcao_modbus)
0DFDA:  MOVF   x1B,W
0DFDC:  XORLW  01
0DFDE:  MOVLB  0
0DFE0:  BZ    DFFC
0DFE2:  XORLW  02
0DFE4:  BZ    E002
0DFE6:  XORLW  07
0DFE8:  BZ    E008
0DFEA:  XORLW  01
0DFEC:  BZ    E00E
0DFEE:  XORLW  03
0DFF0:  BZ    E014
0DFF2:  XORLW  16
0DFF4:  BZ    E018
0DFF6:  XORLW  01
0DFF8:  BZ    E01C
0DFFA:  BRA    E020
.................... 				{
.................... 	            case 1:
....................        		    	{
.................... 					modbus_funcao01();
0DFFC:  GOTO   6F58
.................... 					break;
0E000:  BRA    E05E
.................... 					}
....................            		case 3:
....................            			{
.................... 					modbus_funcao03();
0E002:  GOTO   8F4E
.................... 					break;
0E006:  BRA    E05E
.................... 					}
....................            		case 4:
....................            			{
.................... 					modbus_funcao04();
0E008:  GOTO   A24E
.................... 					break;
0E00C:  BRA    E05E
.................... 					}
.................... 				#if (st5x == true)
.................... 					#if (padrao_referencia == false)
.................... 						 case 5:
.................... 							{
.................... 							modbus_funcao05();
.................... 							break;
.................... 							}
.................... 						case 6:
.................... 							{
.................... 							modbus_funcao06();
.................... 							break;
.................... 							}
.................... 						case 16:
.................... 						{
.................... 						modbus_funcao16();
.................... 						break;
.................... 						}
.................... 					#endif
.................... 				#else
.................... 					 case 5:
.................... 						{
.................... 						modbus_funcao05();
0E00E:  GOTO   B2B2
.................... 						break;
0E012:  BRA    E05E
.................... 						}
.................... 					case 6:
.................... 						{
.................... 						modbus_funcao06();
0E014:  BRA    D9F0
.................... 						break;
0E016:  BRA    E05E
.................... 						}     
.................... 					case 16:
.................... 						{
.................... 						modbus_funcao16();
0E018:  BRA    DACA
.................... 						break;
0E01A:  BRA    E05E
.................... 						}
.................... 				#endif
.................... 				case 17:
.................... 					{
.................... 					modbus_funcao17();
0E01C:  BRA    DC46
.................... 					break;
0E01E:  BRA    E05E
.................... 					}
.................... 				#if (protocolo_abb == true)
.................... 					case 67:
.................... 						{
.................... 						modbus_funcao67();
.................... 						break;
.................... 						}
.................... 					case 66:
.................... 						{
.................... 						modbus_funcao66();
.................... 						break;
.................... 						}
.................... 				#endif
.................... 				default:
.................... 					{
.................... 					buf_tx[1] = buf_tx[1] | 0x80;
0E020:  MOVLB  9
0E022:  BSF    x49.7
.................... 					buf_tx[2] = 1;
0E024:  MOVLW  01
0E026:  MOVWF  x4A
.................... 					ptrtx = 3;
0E028:  MOVLW  03
0E02A:  MOVLB  5
0E02C:  MOVWF  x2F
.................... 					crc_modbus =  crc16(buf_tx, ptrtx, 'M');
0E02E:  MOVLW  09
0E030:  MOVLB  A
0E032:  MOVWF  x51
0E034:  MOVLW  48
0E036:  MOVWF  x50
0E038:  MOVFF  52F,A52
0E03C:  MOVLW  4D
0E03E:  MOVWF  x53
0E040:  MOVLB  0
0E042:  CALL   6D6E
0E046:  MOVFF  02,526
0E04A:  MOVFF  01,525
.................... 					data1_int = crc_modbus;
0E04E:  MOVFF  526,3F0
0E052:  MOVFF  525,3EF
.................... 					poe_word_buftx();   	
0E056:  CALL   6E7E
.................... 					dispara_tx();
0E05A:  CALL   6EE4
.................... 					}
.................... 				}
.................... 			}
0E05E:  BRA    E068
0E060:  MOVLB  3
.................... 		else
.................... 			{
.................... /* INCLUIR TRATAMENTO DE ERRO DE CHECKSUM */
.................... 			inic_rx();
0E062:  MOVLB  0
0E064:  CALL   6A08
.................... 			}
.................... 		}
0E068:  BRA    E072
0E06A:  MOVLB  5
.................... 	else
.................... 		{
.................... 		inic_rx();			// Se o endereço não é o mesmo.
0E06C:  MOVLB  0
0E06E:  CALL   6A08
0E072:  MOVLB  5
.................... 		}
0E074:  MOVLB  0
0E076:  RETURN 0
.................... 		
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif	
.................... 
.................... 
.................... #include "st8X00_menu.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610_MENU                                                    *
.................... ; Funcao: TRATAMENTO DO MENU PRINCIPAL									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... 
....................   
.................... #define MAX_TIME_TECLA	25
.................... 
.................... char aux_menu1;
.................... 
.................... void teclado(void);
.................... void trata_menu(void);
.................... void exibe_menu(void);
.................... void trata_senha(void);
.................... void trata_time_out_menus(void);
.................... #if (disp_7seg == true)
.................... 	void exibe_off(void);
.................... #endif
.................... #if (ST8100C == true)
.................... 	void display(char, word,  char,  char);
.................... #endif	
.................... 
.................... void display_n(char, word, char);
.................... void fim_menu1(void);
.................... word inkey(char);
.................... 
.................... void exibe_data_hora(void);
.................... 
.................... 
.................... void reinicializa_menus(void);
.................... void salva_menus(void);
.................... 
.................... void reset_rolar(void)
.................... {
.................... 	ja_rolou = false;
*
0E704:  BCF    2C.1
.................... 	rolando = false;
0E706:  BCF    2C.0
0E708:  RETURN 0
.................... }
.................... 
.................... void pisca_pontos(void)	
.................... {
.................... 	if (programando == 1)
.................... 		{
.................... 		if (ponto_segundo == 1)
.................... 			{
.................... 			#if (disp_7seg == true)
.................... 				buf_display[0] = buf_display[0] | 0x80;
.................... 				buf_display[1] = buf_display[1] | 0x80;
.................... 				buf_display[2] = buf_display[2] | 0x80;
.................... 				buf_display[3] = buf_display[3] | 0x80;
.................... 			#endif
.................... 			}
.................... 		}
.................... }		
.................... 
.................... 
.................... #if (disp_7seg == true)
.................... 	#include "st94leds.c"
.................... #endif	
.................... #include "st_erros.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_ERROS                                                       *
.................... ; Funcao: MODULO PRINCIPAL DE CONTROLE									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... void exibe_erro(void);
.................... 
.................... 
.................... void exibe_erro_tmp(void)
.................... {
.................... 	exibe_erro();
.................... }
.................... 
.................... void exibe_status(void)
.................... {	
.................... 	if (programando == true)
*
06A30:  BTFSS  29.5
06A32:  BRA    6A34
.................... 		{
.................... 		return;
.................... 		}
.................... 
.................... 	#if (portatil == true)	
06A34:  RETURN 0
.................... 		if (registro == 1)
.................... 			{
.................... 			mensagem(1,17);
.................... 			}
.................... 		else
.................... 			{
.................... 			if (prog_time == 1)
.................... 				{
.................... 				mensagem(1,76);
.................... 				}
.................... 			else
.................... 				{
.................... 				mensagem(1,18);
.................... 				}
.................... 			}
.................... 		mensagem(2,68);
.................... 	//  1234567890123456
.................... 	//	07-set 19:20:00
.................... 	//   ___d,__:__:__
.................... 		lcd_gotoxy(1,3);
.................... 		wr_lcd(1,' ');
.................... 		displayp(34,nro_dias,3,0,0);
.................... 		wr_lcd(1,'d');
.................... 		wr_lcd(1,',');
.................... 		displayp(39,nro_horas,2,0,0);
.................... 		wr_lcd(1,'h');
.................... 		displayp(42,nro_minutos,2,0,0);
.................... 		wr_lcd(1,'m');
.................... 		displayp(45,nro_segundos,2,0,0);
.................... 		wr_lcd(1,'s');
.................... 	
.................... 		if (ponto_segundo == 1)
.................... 			{
.................... 			if (exibiu_erro == 1)
.................... 				{
.................... 				exibiu_erro = 0;
.................... 				mensagem(4,0);
.................... 				}
.................... 			exibe_data_hora();
.................... 			}
.................... 		else
.................... 			{
.................... 			exibe_erro();
.................... 			}
.................... 	#endif
.................... 
.................... }
.................... 
.................... void verifica_status(void)
.................... {
.................... 	#if (portatil == true)
.................... 		if (valor_tc < 61)
.................... 			{
.................... 			aux_w1 = 8;
.................... 			}
.................... 		if (valor_tc < 201)
.................... 			{
.................... 			aux_w1 = 40;
.................... 			}
.................... 		else
.................... 			{
.................... 			aux_w1 = 80;
.................... 			}
.................... 	#else
.................... 		aux_w1 = 120;
*
1AEC2:  MOVLB  3
1AEC4:  CLRF   x63
1AEC6:  MOVLW  78
1AEC8:  MOVWF  x62
.................... 	#endif
.................... 
.................... 	#if (st8500c == true)
.................... 		cor_min_r = 0;
1AECA:  BCF    26.0
.................... 		cor_min_s = 0;
1AECC:  BCF    29.1
.................... 		cor_min_t = 0;
1AECE:  BCF    29.2
.................... 		erro_freq = 0;
1AED0:  BCF    24.4
.................... 	#endif
.................... 
.................... //	status = 0;
.................... 	
.................... 	#if (com_relogio == false)
.................... 		#if (com_regs == false)
.................... 			ajuste_relogio = 0;
.................... 		#endif
.................... 		if (ajuste_relogio == 1)
.................... 			{
.................... ////			status = 1;
.................... 			goto status_erro;
.................... 			}
.................... 	#endif
.................... 		
.................... 	#if (controlador == true)
.................... 		#if (AUTOSET == true)
.................... 			if (em_autoset == true)
.................... 				{
.................... //				status = 2;
.................... 				goto status_erro;
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 	#if (monofasico == true)
.................... 		#if (controlador == false)
.................... 			if (corrente_r < aux_w1)
.................... 				{
.................... //				status = 3;
.................... 				goto status_erro;
.................... 				}
.................... 			else if (tensao_r < (TENSAO_FALTA))
.................... 		#else
.................... 			if (tensao_r < (TENSAO_FALTA))
.................... 		#endif
.................... 			{
.................... //			status = 4;
.................... 			goto status_erro;
.................... 			}
.................... 		else if ((ten_a_r == 1) || (ten_b_r == 1) || (cor_a_r == 1) || (cor_b_r == 1) || (sentido_r == 1))
.................... 			{
.................... //			status = 5;
.................... 			goto status_erro;
.................... 			}
.................... 	#else
.................... 		#if (controlador == false)
.................... 			if ((corrente_r < aux_w1) || (corrente_s < aux_w1) || (corrente_t < aux_w1)) // 3%
.................... 				{
.................... 	//			status = 6;
.................... 				goto status_erro;
.................... 				}
.................... 			else if ((tensao_r < (TENSAO_FALTA)) || (tensao_s < (TENSAO_FALTA)) || (tensao_t < (TENSAO_FALTA))) 
.................... 		#else
.................... 			if ((tensao_r < (TENSAO_FALTA)) || (tensao_s < (TENSAO_FALTA)) || (tensao_t < (TENSAO_FALTA))) 
1AED2:  MOVLB  2
1AED4:  MOVF   x51,W
1AED6:  SUBLW  0C
1AED8:  BNC   1AEE2
1AEDA:  BNZ   1AF08
1AEDC:  MOVF   x50,W
1AEDE:  SUBLW  7F
1AEE0:  BC    1AF08
1AEE2:  MOVF   xD5,W
1AEE4:  SUBLW  0C
1AEE6:  BNC   1AEF0
1AEE8:  BNZ   1AF08
1AEEA:  MOVF   xD4,W
1AEEC:  SUBLW  7F
1AEEE:  BC    1AF08
1AEF0:  MOVLB  3
1AEF2:  MOVF   x2C,W
1AEF4:  SUBLW  0C
1AEF6:  BNC   1AF0E
1AEF8:  BTFSC  FD8.2
1AEFA:  BRA    1AF00
1AEFC:  MOVLB  2
1AEFE:  BRA    1AF08
1AF00:  MOVF   x2B,W
1AF02:  SUBLW  7F
1AF04:  BNC   1AF0E
1AF06:  MOVLB  2
.................... 		#endif
.................... 			{
.................... //			status = 7;
.................... 			goto status_erro;
1AF08:  BRA    1AFD0
.................... 			}
1AF0A:  BRA    1AFD0
1AF0C:  MOVLB  3
.................... 			
.................... 		else if ((ten_a_r == 1) || (ten_a_s == 1) || (ten_a_t == 1))
1AF0E:  BTFSC  23.1
1AF10:  BRA    1AF1A
1AF12:  BTFSC  27.5
1AF14:  BRA    1AF1A
1AF16:  BTFSS  27.6
1AF18:  BRA    1AF22
.................... 			{
.................... //			status = 8;
.................... 			goto status_erro;
1AF1A:  MOVLB  2
1AF1C:  BRA    1AFD0
.................... 			}
1AF1E:  BRA    1AFD0
1AF20:  MOVLB  3
.................... 		else if ((ten_b_r == 1) || (ten_b_s == 1) || (ten_b_t == 1))
1AF22:  BTFSC  23.2
1AF24:  BRA    1AF2E
1AF26:  BTFSC  27.7
1AF28:  BRA    1AF2E
1AF2A:  BTFSS  28.0
1AF2C:  BRA    1AF36
.................... 			{
.................... //			status = 9;
.................... 			goto status_erro;
1AF2E:  MOVLB  2
1AF30:  BRA    1AFD0
.................... 			}
1AF32:  BRA    1AFD0
1AF34:  MOVLB  3
.................... 		else if ((cor_a_r == 1) || (cor_a_s == 1) || (cor_a_t == 1))
1AF36:  BTFSC  23.3
1AF38:  BRA    1AF42
1AF3A:  BTFSC  28.1
1AF3C:  BRA    1AF42
1AF3E:  BTFSS  28.2
1AF40:  BRA    1AF4A
.................... 			{
.................... //			status = 10;
.................... 			goto status_erro;
1AF42:  MOVLB  2
1AF44:  BRA    1AFD0
.................... 			}
1AF46:  BRA    1AFD0
1AF48:  MOVLB  3
.................... 		else if ((cor_b_r == 1) || (cor_b_s == 1) || (cor_b_t == 1))
1AF4A:  BTFSC  23.7
1AF4C:  BRA    1AF56
1AF4E:  BTFSC  28.5
1AF50:  BRA    1AF56
1AF52:  BTFSS  28.6
1AF54:  BRA    1AF5E
.................... 			{
.................... //			status = 11;
.................... 			goto status_erro;
1AF56:  MOVLB  2
1AF58:  BRA    1AFD0
.................... 			}
1AF5A:  BRA    1AFD0
1AF5C:  MOVLB  3
.................... 		else if ((sentido_r == 1)||(sentido_s == 1) || (sentido_t == 1))
1AF5E:  BTFSC  22.6
1AF60:  BRA    1AF6A
1AF62:  BTFSC  27.3
1AF64:  BRA    1AF6A
1AF66:  BTFSS  27.4
1AF68:  BRA    1AF72
.................... 			{
.................... //			status = 12;
.................... 			goto status_erro;
1AF6A:  MOVLB  2
1AF6C:  BRA    1AFD0
.................... 			}
.................... 			
.................... 	#endif
.................... 	#if (controlador == true)
1AF6E:  BRA    1AFD0
1AF70:  MOVLB  3
.................... 		else if (em_repouso == true)
1AF72:  BTFSS  2C.4
1AF74:  BRA    1AF7E
.................... 			{
.................... //			status = 13;
.................... 			goto status_erro;
1AF76:  MOVLB  2
1AF78:  BRA    1AFD0
.................... 			}
1AF7A:  BRA    1AFD0
1AF7C:  MOVLB  3
.................... 		else if ((des_ten_a == true) || (fp_ind == true) || (fp_cap == true) || (falta_capacitor == true) || (des_chtt == true) || (des_chtc == true))
1AF7E:  BTFSC  25.3
1AF80:  BRA    1AF96
1AF82:  BTFSC  22.7
1AF84:  BRA    1AF96
1AF86:  BTFSC  23.0
1AF88:  BRA    1AF96
1AF8A:  BTFSC  27.2
1AF8C:  BRA    1AF96
1AF8E:  BTFSC  25.5
1AF90:  BRA    1AF96
1AF92:  BTFSS  25.6
1AF94:  BRA    1AF9E
.................... 			{
.................... //			status = 14;
.................... 			goto status_erro;
1AF96:  MOVLB  2
1AF98:  BRA    1AFD0
.................... 			}
.................... 		#if (monofasico == true)
1AF9A:  BRA    1AFD0
1AF9C:  MOVLB  3
.................... 			else if (cor_min_r == true)
.................... 				{
.................... 	//			status = 15;
.................... 				goto status_erro;
.................... 				}
.................... 		#else
.................... 			else if ((cor_min_r == true) || (cor_min_s == true) ||(cor_min_t == true))
1AF9E:  BTFSC  26.0
1AFA0:  BRA    1AFAA
1AFA2:  BTFSC  29.1
1AFA4:  BRA    1AFAA
1AFA6:  BTFSS  29.2
1AFA8:  BRA    1AFB2
.................... 				{
.................... 	//			status = 16;
.................... 				goto status_erro;
1AFAA:  MOVLB  2
1AFAC:  BRA    1AFD0
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 	#if (com_regs == true)
.................... 		#if (portatil == true)
.................... 			else if (memoria_full == 1)
.................... 				{
.................... 	//			status = 17;
.................... 				goto status_erro;
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 	#if (com_alarme_demanda == true)
1AFAE:  BRA    1AFD0
1AFB0:  MOVLB  3
.................... 		else if (dem_ati == true)
1AFB2:  BTFSS  24.0
1AFB4:  BRA    1AFBE
.................... 			{
.................... //			status = 18;
.................... 			goto status_erro;
1AFB6:  MOVLB  2
1AFB8:  BRA    1AFD0
.................... 			}
.................... 	#endif
1AFBA:  BRA    1AFD0
1AFBC:  MOVLB  3
.................... 		else if (erro_freq == 1)
1AFBE:  BTFSS  24.4
1AFC0:  BRA    1AFCA
.................... 			{
.................... //			status = 19;
.................... 			goto status_erro;
1AFC2:  MOVLB  2
1AFC4:  BRA    1AFD0
.................... 			}
.................... 	#if (com_rep == true)
.................... 		else if ((saturou_kw == true) || (saturou_kvar == true))
.................... 			{
.................... //			status = 21;
.................... 			goto status_erro;
.................... 			}
.................... 		else if (modo_rep == 1)
.................... 			{
.................... //			status = 23;
.................... 			goto status_erro;
.................... 			}
.................... 	#endif
.................... 	#if (st8500c == true)
.................... 		#if (com_tc == false)
.................... 			else if (time_out_modo_rep == 0)
.................... 				{
.................... 	//			status = 2;
.................... 				goto status_erro;
.................... 				}
.................... 		#endif
.................... 	#endif
1AFC6:  BRA    1AFD0
1AFC8:  MOVLB  3
.................... 		else
.................... 			{
.................... 			tem_erro = 0;
1AFCA:  BCF    24.3
.................... 			return;
1AFCC:  BRA    1AFD4
1AFCE:  MOVLB  2
.................... 			}
.................... status_erro:
.................... 	tem_erro = 1;
1AFD0:  BSF    24.3
1AFD2:  MOVLB  3
1AFD4:  MOVLB  0
1AFD6:  GOTO   1C0DC (RETURN)
.................... 
.................... }
.................... 
.................... void exibe_erro(void)
.................... {
.................... 
.................... 	#if (controlador == true)
.................... 		#if (AUTOSET == true)
.................... 			if (em_autoset == true)
.................... 				{
.................... 				#if (ST8200C == true)
.................... 					mensagem(2,149);
.................... 					return;
.................... 				#else
.................... 					#error falta mensagem
.................... 					return;
.................... 				#endif
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 	
.................... 	if (programando == true)
*
0E10C:  BTFSS  29.5
0E10E:  BRA    E112
.................... 		{
.................... 		return;
0E110:  BRA    E636
.................... 		}
.................... 
.................... 
.................... 	#if (ST8100C == true)
.................... 		if (em_status == false)
.................... 			{
.................... 			return;
.................... 			}
.................... 	#endif
.................... 	
.................... 	passo_exibe_erro++;
0E112:  INCF   30,F
.................... 	
.................... 	switch(passo_exibe_erro)
0E114:  MOVF   30,W
0E116:  XORLW  01
0E118:  BTFSC  FD8.2
0E11A:  BRA    E1F0
0E11C:  XORLW  03
0E11E:  BTFSC  FD8.2
0E120:  BRA    E1F4
0E122:  XORLW  01
0E124:  BTFSC  FD8.2
0E126:  BRA    E246
0E128:  XORLW  07
0E12A:  BTFSC  FD8.2
0E12C:  BRA    E24A
0E12E:  XORLW  01
0E130:  BTFSC  FD8.2
0E132:  BRA    E24E
0E134:  XORLW  03
0E136:  BTFSC  FD8.2
0E138:  BRA    E2B6
0E13A:  XORLW  01
0E13C:  BTFSC  FD8.2
0E13E:  BRA    E2BA
0E140:  XORLW  0F
0E142:  BTFSC  FD8.2
0E144:  BRA    E2DE
0E146:  XORLW  01
0E148:  BTFSC  FD8.2
0E14A:  BRA    E302
0E14C:  XORLW  03
0E14E:  BTFSC  FD8.2
0E150:  BRA    E306
0E152:  XORLW  01
0E154:  BTFSC  FD8.2
0E156:  BRA    E30A
0E158:  XORLW  07
0E15A:  BTFSC  FD8.2
0E15C:  BRA    E33C
0E15E:  XORLW  01
0E160:  BTFSC  FD8.2
0E162:  BRA    E36E
0E164:  XORLW  03
0E166:  BTFSC  FD8.2
0E168:  BRA    E3A0
0E16A:  XORLW  01
0E16C:  BTFSC  FD8.2
0E16E:  BRA    E3A4
0E170:  XORLW  1F
0E172:  BTFSC  FD8.2
0E174:  BRA    E3A8
0E176:  XORLW  01
0E178:  BTFSC  FD8.2
0E17A:  BRA    E3AC
0E17C:  XORLW  03
0E17E:  BTFSC  FD8.2
0E180:  BRA    E3B0
0E182:  XORLW  01
0E184:  BTFSC  FD8.2
0E186:  BRA    E3B4
0E188:  XORLW  07
0E18A:  BTFSC  FD8.2
0E18C:  BRA    E3B8
0E18E:  XORLW  01
0E190:  BTFSC  FD8.2
0E192:  BRA    E3BC
0E194:  XORLW  03
0E196:  BTFSC  FD8.2
0E198:  BRA    E3DC
0E19A:  XORLW  01
0E19C:  BTFSC  FD8.2
0E19E:  BRA    E3F8
0E1A0:  XORLW  0F
0E1A2:  BTFSC  FD8.2
0E1A4:  BRA    E3FC
0E1A6:  XORLW  01
0E1A8:  BTFSC  FD8.2
0E1AA:  BRA    E400
0E1AC:  XORLW  03
0E1AE:  BTFSC  FD8.2
0E1B0:  BRA    E404
0E1B2:  XORLW  01
0E1B4:  BTFSC  FD8.2
0E1B6:  BRA    E408
0E1B8:  XORLW  07
0E1BA:  BTFSC  FD8.2
0E1BC:  BRA    E40C
0E1BE:  XORLW  01
0E1C0:  BTFSC  FD8.2
0E1C2:  BRA    E456
0E1C4:  XORLW  03
0E1C6:  BTFSC  FD8.2
0E1C8:  BRA    E472
0E1CA:  XORLW  01
0E1CC:  BTFSC  FD8.2
0E1CE:  BRA    E47A
0E1D0:  XORLW  3F
0E1D2:  BTFSC  FD8.2
0E1D4:  BRA    E486
0E1D6:  XORLW  01
0E1D8:  BTFSC  FD8.2
0E1DA:  BRA    E48A
0E1DC:  XORLW  03
0E1DE:  BTFSC  FD8.2
0E1E0:  BRA    E4BA
0E1E2:  XORLW  01
0E1E4:  BTFSC  FD8.2
0E1E6:  BRA    E4BE
0E1E8:  XORLW  07
0E1EA:  BTFSC  FD8.2
0E1EC:  BRA    E4EE
0E1EE:  BRA    E60C
.................... 		{
.................... 		case 1:		//Corrente Crítica
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E1F0:  INCF   30,F
.................... 			#else
.................... 				#if (controlador == false)
.................... 					if (valor_tc < 61)
.................... 						{
.................... 						aux_w1 = 8;
.................... 						}
.................... 					if (valor_tc < 201)
.................... 						{
.................... 						aux_w1 = 40;
.................... 						}
.................... 					else
.................... 						{
.................... 						aux_w1 = 80;
.................... 						}
.................... 					#if (monofasico == true)
.................... 						if (corrente_r < aux_w1)
.................... 					#else
.................... 						if ((corrente_r < aux_w1) || (corrente_s < aux_w1) || (corrente_t < aux_w1)) // 3%
.................... 					#endif
.................... 							{
.................... 							#if (st94 == true)
.................... 								#if (disp_lcd == false)
.................... 									mensagem(1,0);
.................... 								#else
.................... 									mensagem(2,32);
.................... 								#endif
.................... 							#else
.................... 								mensagem(4,77);
.................... 							#endif
.................... 							exibiu_erro = 1;
.................... 							break;
.................... 							}
.................... 						else
.................... 							{
.................... 							passo_exibe_erro++;
.................... 							}
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#endif
....................             break;
0E1F2:  BRA    E612
.................... 			}
.................... 		case 2:		//Tensão Crítica
.................... 			{
.................... 			#if (st8500c == true)
.................... 				#if (com_tc == true)
.................... 					if ((tensao_r < (TENSAO_FALTA)) || (tensao_s < (TENSAO_FALTA)) || (tensao_t < (TENSAO_FALTA))) 
0E1F4:  MOVLB  2
0E1F6:  MOVF   x51,W
0E1F8:  SUBLW  0C
0E1FA:  BNC   E204
0E1FC:  BNZ   E22A
0E1FE:  MOVF   x50,W
0E200:  SUBLW  7F
0E202:  BC    E22A
0E204:  MOVF   xD5,W
0E206:  SUBLW  0C
0E208:  BNC   E212
0E20A:  BNZ   E22A
0E20C:  MOVF   xD4,W
0E20E:  SUBLW  7F
0E210:  BC    E22A
0E212:  MOVLB  3
0E214:  MOVF   x2C,W
0E216:  SUBLW  0C
0E218:  BNC   E242
0E21A:  BTFSC  FD8.2
0E21C:  BRA    E222
0E21E:  MOVLB  2
0E220:  BRA    E22A
0E222:  MOVF   x2B,W
0E224:  SUBLW  7F
0E226:  BNC   E242
0E228:  MOVLB  2
.................... 						{
.................... 						mensagem(2,126);
0E22A:  MOVLW  02
0E22C:  MOVLB  A
0E22E:  MOVWF  x4D
0E230:  MOVLW  7E
0E232:  MOVWF  x4E
0E234:  MOVLB  0
0E236:  CALL   47E8
.................... 						exibiu_erro = 1;
0E23A:  BSF    2B.3
.................... 						break;
0E23C:  BRA    E612
.................... 						}	
0E23E:  BRA    E246
0E240:  MOVLB  3
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
0E242:  INCF   30,F
0E244:  MOVLB  0
.................... 						}
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#else
.................... 				#if (monofasico == true)
.................... 					if (tensao_r < (TENSAO_FALTA))
.................... 				#else
.................... 					if ((tensao_r < (TENSAO_FALTA)) || (tensao_s < (TENSAO_FALTA)) || (tensao_t < (TENSAO_FALTA))) 
.................... 				#endif
.................... 						{
.................... 						#if (st94 == true)
.................... 							#if (disp_lcd == false)
.................... 								mensagem(2,0);
.................... 							#else
.................... 								mensagem(2,33);
.................... 							#endif
.................... 						#elif (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								mensagem_rola(1,5);
.................... 								}
.................... 						#elif (ST8200C == true) || (ST8300C == true)
.................... 							mensagem(2,126);
.................... 						#else
.................... 							mensagem(4,78);
.................... 						#endif
.................... 						exibiu_erro = 1;
.................... 						break;
.................... 						}	
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 			#endif
.................... 			}
.................... 		case 3:		//Valor do TC ou da Ponteira
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E246:  INCF   30,F
.................... 			#else
.................... 				#if (portatil == true)
.................... 					if (registro == 1)
.................... 						{
.................... 						mensagem(4,41);
.................... 						displayp(60,valor_tc,4,0,0);
.................... 						exibiu_erro = 1;
.................... 						break;
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#endif
....................                     break;
0E248:  BRA    E612
.................... 			}
.................... 		case 4:		//Tempo entre Registros
.................... 			{
.................... 			#if (portatil == true)
.................... 				if (registro == 1)
.................... 					{
.................... 					exibiu_erro = 1;
.................... 					mensagem(4,44);
.................... 					displayp(60,intervalo_reg,4,0,0);
.................... 					break;
.................... 					}
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
0E24A:  INCF   30,F
.................... 			#endif
....................             break;
0E24C:  BRA    E612
.................... 			}
.................... 		case 5:		//Tipo de Ligação
.................... 			{
.................... 			#if (st8500c == true) 
.................... 				#if (com_tc == false)
.................... 					passo_exibe_erro++;
.................... 				#else
.................... 					exibiu_erro = 1;
0E24E:  BSF    2B.3
.................... 					mensagem(2,38);
0E250:  MOVLW  02
0E252:  MOVLB  A
0E254:  MOVWF  x4D
0E256:  MOVLW  26
0E258:  MOVWF  x4E
0E25A:  MOVLB  0
0E25C:  CALL   47E8
.................... 					lcd_gotoxy(15,2);
0E260:  MOVLW  0F
0E262:  MOVLB  A
0E264:  MOVWF  x62
0E266:  MOVLW  02
0E268:  MOVWF  x63
0E26A:  MOVLB  0
0E26C:  CALL   46C4
.................... 					if (tipo_ligacao == 0)
0E270:  MOVLB  4
0E272:  MOVF   xC7,F
0E274:  BNZ   E286
.................... 						{
.................... 						display('Y');
0E276:  MOVLW  59
0E278:  MOVLB  A
0E27A:  MOVWF  x4F
0E27C:  MOVLB  0
0E27E:  CALL   4770
.................... 						}
0E282:  BRA    E2B4
0E284:  MOVLB  4
.................... 					else if (tipo_ligacao == 2)
0E286:  MOVF   xC7,W
0E288:  SUBLW  02
0E28A:  BNZ   E2A8
.................... 						{
.................... 						display('D');
0E28C:  MOVLW  44
0E28E:  MOVLB  A
0E290:  MOVWF  x4F
0E292:  MOVLB  0
0E294:  CALL   4770
.................... 						display('A');
0E298:  MOVLW  41
0E29A:  MOVLB  A
0E29C:  MOVWF  x4F
0E29E:  MOVLB  0
0E2A0:  CALL   4770
.................... 						}
0E2A4:  BRA    E2B4
0E2A6:  MOVLB  4
.................... 					else
.................... 						{
.................... 						display('D');
0E2A8:  MOVLW  44
0E2AA:  MOVLB  A
0E2AC:  MOVWF  x4F
0E2AE:  MOVLB  0
0E2B0:  CALL   4770
.................... 						}
.................... 					break;
0E2B4:  BRA    E612
.................... 				#endif
.................... 			#else
.................... 				if (tipo_ligacao == 0)
.................... 					{
.................... 					#if (st94 == true)
.................... 						#if (disp_lcd == false)
.................... 							passo_exibe_erro++;
.................... 						#else
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,19);
.................... 							lcd_gotoxy(15,2);
.................... 							display('Y');
.................... 							break;
.................... 						#endif
.................... 					#elif (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(2,5);
.................... 							}
.................... 	
.................... 					#elif ((ST8200C == true) || (ST8300C == true))
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,38);
.................... 						lcd_gotoxy(15,2);
.................... 						#if (ST8200C == true)
.................... 							display('F');
.................... 							display('N');
.................... 						#else
.................... 							display('Y');
.................... 						#endif
.................... 					break;
.................... 					#else
.................... 						#if (portatil == true)
.................... 							if (registro == 1)
.................... 								{
.................... 								exibiu_erro = 1;
.................... 								mensagem(4,80);
.................... 								break;
.................... 								}
.................... 						#else
.................... 							passo_exibe_erro++;
.................... 						#endif
.................... 					#endif
.................... 					}
.................... 				else if (tipo_ligacao == 2)
.................... 					{
.................... 					#if (st94 == true)
.................... 						#if (disp_lcd == false)
.................... 							passo_exibe_erro++;
.................... 						#else
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,19);
.................... 							lcd_gotoxy(15,2);
.................... 							display('D');
.................... 							display('A');
.................... 							break;
.................... 						#endif
.................... 					#elif (st8300c == true)
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,38);
.................... 						lcd_gotoxy(15,2);
.................... 						display('D');
.................... 						display('A');
.................... 						break;
.................... 					#else
.................... 						passo_exibe_erro++;
.................... 					#endif
.................... 					}
.................... 				else
.................... 					{
.................... 					#if (st94 == true)
.................... 						#if (disp_lcd == false)
.................... 							passo_exibe_erro++;
.................... 						#else
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,19);
.................... 							lcd_gotoxy(15,2);
.................... 							display('D');
.................... 							break;
.................... 						#endif
.................... 					#elif (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(3,5);
.................... 							}
.................... 					#elif ((ST8200C == true) || (ST8300C == true))
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,38);
.................... 						lcd_gotoxy(15,2);
.................... 						#if (ST8200C == true)
.................... 							display('F');
.................... 							display('F');
.................... 						#else
.................... 							display('D');
.................... 						#endif
.................... 						break;
.................... 					#else
.................... 						#if (portatil == true)
.................... 							if (registro == 1)
.................... 								{
.................... 								exibiu_erro = 1;
.................... 								mensagem(4,79);
.................... 								break;
.................... 								}
.................... 						#else
.................... 							passo_exibe_erro++;
.................... 						#endif
.................... 					#endif
.................... 					}
.................... 			#endif
.................... 			}
.................... 		case 6:		//Memória Cheia
.................... 			{
.................... 			#if (portatil == true)
.................... 				if (memoria_full == 1)
.................... 					{
.................... 					exibiu_erro = 1;
.................... 					mensagem(4,73);
.................... 					break;
.................... 					}
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
0E2B6:  INCF   30,F
.................... 			#endif
....................             break;
0E2B8:  BRA    E612
.................... 			}
.................... 		case 7:		//Tensão Alta
.................... 			{
.................... 			#if (monofasico == true)
.................... 				if (ten_a_r == 1) 
.................... 			#else
.................... 				if ((ten_a_r == 1) || (ten_a_s == 1) || (ten_a_t == 1))
0E2BA:  BTFSC  23.1
0E2BC:  BRA    E2C6
0E2BE:  BTFSC  27.5
0E2C0:  BRA    E2C6
0E2C2:  BTFSS  27.6
0E2C4:  BRA    E2DC
.................... 			#endif
.................... 					{
.................... 					exibiu_erro = 1;
0E2C6:  BSF    2B.3
.................... 					#if (st94 == true)
.................... 						#if (disp_lcd == false)
.................... 							mensagem(3,0);
.................... 						#else
.................... 							mensagem(2,35);
.................... 						#endif
.................... 					#elif (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(4,5);
.................... 							}
.................... 					#elif ((ST8200C == true) || (ST8300C == true) || (st8500c == true))
.................... 						mensagem(2,104);
0E2C8:  MOVLW  02
0E2CA:  MOVLB  A
0E2CC:  MOVWF  x4D
0E2CE:  MOVLW  68
0E2D0:  MOVWF  x4E
0E2D2:  MOVLB  0
0E2D4:  CALL   47E8
.................... 					#else
.................... 						mensagem(4,82);
.................... 					#endif
.................... 					break;
0E2D8:  BRA    E612
.................... 					}
0E2DA:  BRA    E2DE
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
0E2DC:  INCF   30,F
.................... 					}
.................... 			}
.................... 		case 8:		//Tensão Baixa
.................... 			{
.................... 			#if (monofasico == true)
.................... 				if (ten_b_r == 1) 
.................... 			#else
.................... 				if ((ten_b_r == 1) || (ten_b_s == 1) || (ten_b_t == 1))
0E2DE:  BTFSC  23.2
0E2E0:  BRA    E2EA
0E2E2:  BTFSC  27.7
0E2E4:  BRA    E2EA
0E2E6:  BTFSS  28.0
0E2E8:  BRA    E300
.................... 			#endif
.................... 					{
.................... 					exibiu_erro = 1;
0E2EA:  BSF    2B.3
.................... 					#if (st94 == true)
.................... 						#if (disp_lcd == false)
.................... 							mensagem(4,0);
.................... 						#else
.................... 							mensagem(2,34);
.................... 						#endif
.................... 					#elif (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(5,5);
.................... 							}
.................... 					#elif ((ST8200C == true) || (ST8300C == true) || (st8500c == true))
.................... 						mensagem(2,105);
0E2EC:  MOVLW  02
0E2EE:  MOVLB  A
0E2F0:  MOVWF  x4D
0E2F2:  MOVLW  69
0E2F4:  MOVWF  x4E
0E2F6:  MOVLB  0
0E2F8:  CALL   47E8
.................... 					#else
.................... 						mensagem(4,81);
.................... 					#endif
.................... 					break;
0E2FC:  BRA    E612
.................... 					}
0E2FE:  BRA    E302
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
0E300:  INCF   30,F
.................... 					}
.................... 			}
.................... 		case 9:		//Corrente Alta
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E302:  INCF   30,F
.................... 			#else
.................... 				#if (monofasico == true)
.................... 					if (cor_a_r == 1)
.................... 				#else
.................... 					if ((cor_a_r == 1) || (cor_a_s == 1) || (cor_a_t == 1))
.................... 				#endif
.................... 						{
.................... 						exibiu_erro = 1;
.................... 						#if (st94 == true)
.................... 							#if (disp_lcd == false)
.................... 								mensagem(5,0);
.................... 							#else
.................... 								mensagem(2,37);
.................... 							#endif
.................... 						#elif (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								mensagem_rola(6,5);
.................... 								}
.................... 						#elif (ST8200C == true) || (ST8300C == true)
.................... 							mensagem(2,106);
.................... 						#else
.................... 							mensagem(4,84);
.................... 						#endif
.................... 						break;
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 			#endif
....................             break;
0E304:  BRA    E612
.................... 			}
.................... 		case 10:		//Corrente Baixa
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E306:  INCF   30,F
.................... 			#else
.................... 				#if (monofasico == true)
.................... 					if (cor_b_r == 1) 
.................... 				#else
.................... 					if ((cor_b_r == 1) || (cor_b_s == 1) || (cor_b_t == 1))
.................... 				#endif
.................... 						{
.................... 						exibiu_erro = 1;
.................... 						#if (st94 == true)
.................... 							#if (disp_lcd == false)
.................... 								mensagem(6,0);
.................... 							#else
.................... 								mensagem(2,36);
.................... 							#endif
.................... 						#elif (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								mensagem_rola(7,5);
.................... 								}
.................... 						#elif (ST8200C == true) || (ST8300C == true)
.................... 							mensagem(2,114);
.................... 						#else		
.................... 							mensagem(4,83);
.................... 						#endif
.................... 						break;
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 			#endif
....................             break;
0E308:  BRA    E612
.................... 			}
.................... 		case 11:		//KW Fornecido - TC invertido
.................... 			{
.................... 			if (sentido_r == 1)
0E30A:  BTFSS  22.6
0E30C:  BRA    E33A
.................... 				{
.................... 				exibiu_erro = 1;
0E30E:  BSF    2B.3
.................... 				if (pisca_minuto == 1)
0E310:  BTFSS  21.0
0E312:  BRA    E326
.................... 					{
.................... 					#if (st94 == true)
.................... 						#if (disp_lcd == false)
.................... 							mensagem(7,0);
.................... 						#else
.................... 							mensagem(2,38);
.................... 						#endif
.................... 					#elif (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(8,5);
.................... 							}
.................... 					#elif ((ST8200C == true) || (ST8300C == true) || (st8500c == true))
.................... 						mensagem(2,83);
0E314:  MOVLW  02
0E316:  MOVLB  A
0E318:  MOVWF  x4D
0E31A:  MOVLW  53
0E31C:  MOVWF  x4E
0E31E:  MOVLB  0
0E320:  CALL   47E8
.................... 					#elif (portatil == true)
.................... 						mensagem(4,85);
.................... 					#else
.................... //						#erro Que equipamento????
.................... 					#endif
.................... 					}
0E324:  BRA    E336
.................... 				else
.................... 					{
.................... 					#if (st94 == true)
.................... 						#if (disp_lcd == false)
.................... 							mensagem(11,0);
.................... 						#else
.................... 							mensagem(2,41);
.................... 						#endif
.................... 					#elif (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(8,5);
.................... 							}
.................... 					#elif ((ST8200C == true) || (ST8300C == true) || (st8500c == true))
.................... 						mensagem(2,83);
0E326:  MOVLW  02
0E328:  MOVLB  A
0E32A:  MOVWF  x4D
0E32C:  MOVLW  53
0E32E:  MOVWF  x4E
0E330:  MOVLB  0
0E332:  CALL   47E8
.................... 					#elif (portatil == true)
.................... 						mensagem(4,88);
.................... 					#else
.................... //						#erro Que equipamento????
.................... 					#endif
.................... 					}
.................... 				break;
0E336:  BRA    E612
.................... 				}
0E338:  BRA    E33C
.................... 			else
.................... 				{
.................... 				passo_exibe_erro++;
0E33A:  INCF   30,F
.................... 				}
.................... 			}
.................... 		case 12:		//KW Fornecido Fase S ou Ponteira/TC invertido
.................... 			{
.................... 			#if (monofasico == false)
.................... 				if (sentido_s == 1)
0E33C:  BTFSS  27.3
0E33E:  BRA    E36C
.................... 					{
.................... 					exibiu_erro = 1;
0E340:  BSF    2B.3
.................... 					if (pisca_minuto == 1)
0E342:  BTFSS  21.0
0E344:  BRA    E358
.................... 						{
.................... 						#if (st94 == true)
.................... 							#if (disp_lcd == false)
.................... 								mensagem(8,0);
.................... 							#else
.................... 								mensagem(2,39);
.................... 							#endif
.................... 						#elif ((ST8300C == true) || (st8500c == true))
.................... 							mensagem(2,84);
0E346:  MOVLW  02
0E348:  MOVLB  A
0E34A:  MOVWF  x4D
0E34C:  MOVLW  54
0E34E:  MOVWF  x4E
0E350:  MOVLB  0
0E352:  CALL   47E8
.................... 						#else
.................... 							mensagem(4,86);
.................... 						#endif
.................... 						}
0E356:  BRA    E368
.................... 					else
.................... 						{
.................... 						#if (st94 == true)
.................... 							#if (disp_lcd == false)
.................... 								mensagem(12,0);
.................... 							#else
.................... 								mensagem(2,42);
.................... 							#endif
.................... 						#elif ((ST8300C == true) || (st8500c == true))
.................... 							mensagem(2,84);
0E358:  MOVLW  02
0E35A:  MOVLB  A
0E35C:  MOVWF  x4D
0E35E:  MOVLW  54
0E360:  MOVWF  x4E
0E362:  MOVLB  0
0E364:  CALL   47E8
.................... 						#else
.................... 							mensagem(4,89);
.................... 						#endif
.................... 						}
.................... 					break;
0E368:  BRA    E612
.................... 					}
0E36A:  BRA    E36E
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
0E36C:  INCF   30,F
.................... 					}
.................... 			#endif
.................... 			}
.................... 		case 13:		//KW Fornecido Fase T ou Ponteira/TC invertido
.................... 			{
.................... 			#if (monofasico == false)
.................... 				if (sentido_t == 1)
0E36E:  BTFSS  27.4
0E370:  BRA    E39E
.................... 					{
.................... 					exibiu_erro = 1;
0E372:  BSF    2B.3
.................... 					if (pisca_minuto == 1)
0E374:  BTFSS  21.0
0E376:  BRA    E38A
.................... 						{
.................... 						#if (st94 == true)
.................... 							#if (disp_lcd == false)
.................... 								mensagem(9,0);
.................... 							#else
.................... 								mensagem(2,40);
.................... 							#endif
.................... 						#elif ((ST8300C == true) || (st8500c == true))
.................... 							mensagem(2,85);
0E378:  MOVLW  02
0E37A:  MOVLB  A
0E37C:  MOVWF  x4D
0E37E:  MOVLW  55
0E380:  MOVWF  x4E
0E382:  MOVLB  0
0E384:  CALL   47E8
.................... 						#else
.................... 							mensagem(4,87);
.................... 						#endif
.................... 						}
0E388:  BRA    E39A
.................... 					else
.................... 						{
.................... 						#if (st94 == true)
.................... 							#if (disp_lcd == false)
.................... 								mensagem(13,0);
.................... 							#else
.................... 								mensagem(2,43);
.................... 							#endif
.................... 						#elif ((ST8300C == true) || (st8500c == true))
.................... 							mensagem(2,85);
0E38A:  MOVLW  02
0E38C:  MOVLB  A
0E38E:  MOVWF  x4D
0E390:  MOVLW  55
0E392:  MOVWF  x4E
0E394:  MOVLB  0
0E396:  CALL   47E8
.................... 						#else
.................... 							mensagem(4,90);
.................... 						#endif
.................... 						}
.................... 					break;
0E39A:  BRA    E612
.................... 					}
0E39C:  BRA    E3A0
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
0E39E:  INCF   30,F
.................... 					}
.................... 			#endif
.................... 			}
.................... 		case 14:		//Modo de Funcionamento
.................... 			{
.................... 			#if (portatil == true)
.................... 				exibiu_erro = 1;
.................... 				mensagem(4,95);
.................... 				lcd_gotoxy(15, 4);
.................... 				if (modo_funca == 1)
.................... 					{
.................... 					display('1');
.................... 					}
.................... 				else
.................... 					{
.................... 					display('2');
.................... 					}
.................... 				break;
.................... 			#else
.................... 				passo_exibe_erro++;
0E3A0:  INCF   30,F
.................... 			#endif
....................                 break;
0E3A2:  BRA    E612
.................... 			}
.................... 
.................... 		case 15:	//Número de Registros
.................... 			{
.................... 			#if (portatil == true)
.................... 				if (registro == 1)
.................... 					{
.................... 					exibiu_erro = 1;
.................... 	// exibe quantos registros possiveis e disponíveis.
.................... 					lcd_gotoxy(1,4);
.................... 					wr_lcd(1,'R');
.................... 					wr_lcd(1,'e');
.................... 					wr_lcd(1,'g');
.................... 					wr_lcd(1,'s');
.................... 					wr_lcd(1,':');
.................... 					displayp(54,read_word_nvr(ds_ptr_regs),5,0,0);
.................... 					if (modo_funca == 2)
.................... 						{
.................... 						aux_w1 = limite_registros_modo2;
.................... 						}
.................... 					else
.................... 						{
.................... 						aux_w1 = limite_registros;
.................... 						}
.................... 					wr_lcd(1,'/');
.................... 					displayp(60,aux_w1,5,0,0);
.................... 					break;
.................... 					}
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
0E3A4:  INCF   30,F
.................... 			#endif
....................                 break;
0E3A6:  BRA    E612
.................... 			}
.................... 		case 16:		//Demanda
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E3A8:  INCF   30,F
.................... 			#else
.................... 				if (erro_freq == 1)
.................... 					{
.................... 					exibiu_erro = 1;
.................... 					#if (st94 == true)
.................... 						passo_exibe_erro++;
.................... 					#elif (controlador == true)
.................... 						passo_exibe_erro++;
.................... 					#else
.................... 						mensagem(4,98);
.................... 					#endif
.................... 					break;
.................... 					}
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
.................... 					}
.................... 			#endif
....................                 break;
0E3AA:  BRA    E612
.................... 			}
.................... 		case 17:		//Nome do Local da Coleta de Dados
.................... 			{
.................... 			#if (tratar_localizacao == true)
.................... 				if (existe_local == true)
.................... 					{
.................... 					exibiu_erro = 1;
.................... 					mensagem(4,200);
.................... 					break;
.................... 					}
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
0E3AC:  INCF   30,F
.................... 			#endif
....................                 break;
0E3AE:  BRA    E612
.................... 			}
.................... 		case 18:		// LIVRE
.................... 			{
.................... 			passo_exibe_erro++;
0E3B0:  INCF   30,F
....................             break;
0E3B2:  BRA    E612
.................... 			}
.................... 		case 19:		//Exibição do Alerta de data e hora para equipamentos sem relógio em tempo real.
.................... 			{
.................... 			#if (com_relogio == false)
.................... 				if (ajuste_relogio == 1)
.................... 					{
.................... 					#if (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(9,5);
.................... 							}
.................... 					#elif ((ST8200C == true) || (ST8300C == true) || (st8500c == true))
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,58);
.................... 					#endif
.................... 					break;
.................... 					}
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
0E3B4:  INCF   30,F
.................... 			#endif
....................                 break;
0E3B6:  BRA    E612
.................... 			}
.................... 		case 20:		//Desligamento por Tensão
.................... 			{
.................... 			#if (controlador == true)
.................... 				#if (st8500c == true)
.................... 					passo_exibe_erro++;
0E3B8:  INCF   30,F
.................... 				#else
.................... 					if (des_ten_a == true)
.................... 						{
.................... 						#if (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								mensagem_rola(10,5);
.................... 								}
.................... 						#elif ((ST8200C == true) || (ST8300C == true))
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,130);
.................... 							break;
.................... 						#endif
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 				#endif
.................... 			#else
.................... 				passo_exibe_erro++;
.................... 			#endif
....................                 break;
0E3BA:  BRA    E612
.................... 			}
.................... 		case 21:		//Fator de Potência Indutivo
.................... 			{
.................... 			#if (controlador == true)
.................... 				if ((fp_ind == true) || (falta_capacitor == true))
0E3BC:  BTFSC  22.7
0E3BE:  BRA    E3C4
0E3C0:  BTFSS  27.2
0E3C2:  BRA    E3DA
.................... 					{
.................... 					#if (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(11,5);
.................... 							}
.................... 					#elif ((ST8200C == true) || (ST8300C == true))
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,82);
.................... 						break;
.................... 					#elif (ST8500C == true)
.................... 						exibiu_erro = 1;
0E3C4:  BSF    2B.3
.................... 						mensagem(2,80);
0E3C6:  MOVLW  02
0E3C8:  MOVLB  A
0E3CA:  MOVWF  x4D
0E3CC:  MOVLW  50
0E3CE:  MOVWF  x4E
0E3D0:  MOVLB  0
0E3D2:  CALL   47E8
.................... 						break;
0E3D6:  BRA    E612
.................... 					
.................... 					#endif
.................... 					}
0E3D8:  BRA    E3DC
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
0E3DA:  INCF   30,F
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
.................... 			#endif
.................... 			}
.................... 		case 22:		//Fator de Potência Capacitivo
.................... 			{
.................... 			#if (controlador == true)
.................... 				if (fp_cap == true)
0E3DC:  BTFSS  23.0
0E3DE:  BRA    E3F6
.................... 					{
.................... 					#if (ST8100C == true)
.................... 						if (rolando == false)
.................... 							{
.................... 							mensagem_rola(12,5);
.................... 							}
.................... 					#elif ((ST8200C == true) || (ST8300C == true))
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,81);
.................... 						break;
.................... 					#elif (ST8500C == true)
.................... 						exibiu_erro = 1;
0E3E0:  BSF    2B.3
.................... 						mensagem(2,81);
0E3E2:  MOVLW  02
0E3E4:  MOVLB  A
0E3E6:  MOVWF  x4D
0E3E8:  MOVLW  51
0E3EA:  MOVWF  x4E
0E3EC:  MOVLB  0
0E3EE:  CALL   47E8
.................... 						break;
0E3F2:  BRA    E612
.................... 					#endif
.................... 					}
0E3F4:  BRA    E3F8
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
0E3F6:  INCF   30,F
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
.................... 			#endif
.................... 			}
.................... 		case 23:		//Corrente Crítica em Controladores
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E3F8:  INCF   30,F
.................... 			#else
.................... 				#if (controlador == true)
.................... 					#if (monofasico == true)
.................... 						if (cor_min_r == true)
.................... 					#else
.................... 						if ((cor_min_r == true) && (cor_min_s == true) && (cor_min_t == true))
.................... 					#endif					
.................... 							{
.................... 							#if (ST8100C == true)
.................... 								if (rolando == false)
.................... 									{
.................... 									mensagem_rola(13,5);
.................... 									}
.................... 							#elif ((ST8200C == true) || (ST8300C == true))
.................... 								exibiu_erro = 1;
.................... 								mensagem(2,134);
.................... 								break;
.................... 							#endif
.................... 							}
.................... 						else
.................... 							{
.................... 							passo_exibe_erro++;
.................... 							}
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#endif
....................                     break;
0E3FA:  BRA    E612
.................... 			}
.................... 		case 24:		//Em Banco Mínimo
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E3FC:  INCF   30,F
.................... 			#else
.................... 				#if (controlador == true)
.................... 					#if (monofasico == true)
.................... 						if ((cor_min_r == true) && (status_banco_minimo == 2))
.................... 					#else
.................... 						if (((cor_min_r == true) && (cor_min_s == true) && (cor_min_t == true)) && (status_banco_minimo == 2))
.................... 					#endif					
.................... 						{
.................... 						#if (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								mensagem_rola(14,5);
.................... 								}
.................... 						#elif ((ST8200C == true) || (ST8300C == true))
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,136);
.................... 							break;
.................... 						#else
.................... 							passo_exibe_erro++;
.................... 						#endif
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#endif
....................                     break;
0E3FE:  BRA    E612
.................... 			}
.................... 
.................... 		case 25:		//Desligamento por CHT DE TENSAO ALTO
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E400:  INCF   30,F
.................... 			#else
.................... 				#if (controlador == true)
.................... 					if (des_chtt == true)
.................... 						{
.................... 						#if (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								mensagem_rola(15,5);
.................... 								}
.................... 						#elif ((ST8200C == true) || (ST8300C == true))
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,101);
.................... 							break;
.................... 						#endif
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#endif
....................                     break;
0E402:  BRA    E612
.................... 			}
.................... 		case 26:		//Desligamento por CHT DE CORRENTE ALTO
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E404:  INCF   30,F
.................... 			#else
.................... 				#if (controlador == true)
.................... 					if (des_chtc == true)
.................... 						{
.................... 						#if (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								mensagem_rola(16,5);
.................... 								}
.................... 						#elif ((ST8200C == true) || (ST8300C == true))
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,102);
.................... 							break;
.................... 						#endif
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#endif
....................                     break;
0E406:  BRA    E612
.................... 			}
.................... 		case 27:		//Exibe se está em modo REP
.................... 			{
.................... 			#if (st8500c == true)
.................... 				passo_exibe_erro++;
0E408:  INCF   30,F
.................... 			#else
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						#if (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								if (modo_rep == 0)
.................... 									{
.................... 									mensagem_rola(65,1);
.................... 									}
.................... 								else
.................... 									{
.................... 									mensagem_rola(66,1);
.................... 									}
.................... 								}
.................... 							break;
.................... 						#elif (ST8200C == true)
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,140);
.................... 							break;
.................... 						#elif (ST8300C == true)
.................... 							exibiu_erro = 1;
.................... 							mensagem(2,141);
.................... 							break;
.................... 						#endif
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#endif
....................                     break;
0E40A:  BRA    E612
.................... 			}
.................... 		case 28:
.................... 			{
.................... 			#if (controlador == true)
.................... 				#if (st8500c == true)
.................... 					em_repouso = false;
0E40C:  BCF    2C.4
.................... 					for (aux_b1 = 0; aux_b1 < nro_cargas ; aux_b1++)
0E40E:  MOVLB  3
0E410:  CLRF   xB1
0E412:  MOVLB  0
0E414:  MOVF   x6D,W
0E416:  MOVLB  3
0E418:  SUBWF  xB1,W
0E41A:  BC    E436
.................... 						{
.................... 						if (aux_tempo_repouso[aux_b1] != 0)
0E41C:  CLRF   03
0E41E:  MOVF   xB1,W
0E420:  ADDLW  F7
0E422:  MOVWF  FE9
0E424:  MOVLW  00
0E426:  ADDWFC 03,W
0E428:  MOVWF  FEA
0E42A:  MOVF   FEF,F
0E42C:  BZ    E432
.................... 							{
.................... 							em_repouso = true;
0E42E:  BSF    2C.4
.................... 							break;
0E430:  BRA    E436
.................... 							}
0E432:  INCF   xB1,F
0E434:  BRA    E412
.................... 						}
.................... 					if (em_repouso == true)
0E436:  BTFSS  2C.4
0E438:  BRA    E452
.................... 						{
.................... 						exibiu_erro = 1;
0E43A:  BSF    2B.3
.................... 						mensagem(2,150);			
0E43C:  MOVLW  02
0E43E:  MOVLB  A
0E440:  MOVWF  x4D
0E442:  MOVLW  96
0E444:  MOVWF  x4E
0E446:  MOVLB  0
0E448:  CALL   47E8
.................... 						break;
0E44C:  BRA    E612
.................... 						}
0E44E:  BRA    E456
0E450:  MOVLB  3
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
0E452:  INCF   30,F
0E454:  MOVLB  0
.................... 						}
.................... 				#else
.................... 					em_repouso = false;
.................... 					if (que_banco_repouso >= nro_bancos_capacitor)
.................... 						{
.................... 						que_banco_repouso = 0;
.................... 						}
.................... 					for (aux_b1 = 0; aux_b1 < nro_bancos_capacitor ; aux_b1++)
.................... 						{
.................... 						if (aux_tempo_repouso[aux_b1] != 0)
.................... 							{
.................... 							em_repouso = true;
.................... 							break;
.................... 							}
.................... 						}
.................... 					if (em_repouso == true)
.................... 						{
.................... 						exibiu_erro = 1;
.................... 						for (aux_b1 = 0; aux_b1 < nro_bancos_capacitor ; aux_b1++)
.................... 							{
.................... 							if (aux_tempo_repouso[aux_b1] != 0)
.................... 								{
.................... 								if (que_banco_repouso == aux_b1)
.................... 									{
.................... 									break;
.................... 									}
.................... 								}
.................... 							else
.................... 								{
.................... 								if (que_banco_repouso == aux_b1)
.................... 									{
.................... 									que_banco_repouso++;
.................... 									if (que_banco_repouso >= nro_bancos_capacitor)
.................... 										{
.................... 										return;
.................... 										}
.................... 									}
.................... 								}
.................... 							}
.................... 						#if (st8200c == true)
.................... 							mensagem(2,148);
.................... 							displayp(23+3,(que_banco_repouso + 1),2,0,0);
.................... 							displayp(29,aux_tempo_repouso[que_banco_repouso],3,0,0);
.................... //							 "Banco @@ repouso",	//148
.................... 							que_banco_repouso++;
.................... 							break;
.................... 						#elif (ST8100C == true)
.................... 							if (rolando == false)
.................... 								{
.................... 								mensagem_rola(68,1);
.................... 								}
.................... 							break;
.................... 						#else
.................... 							mensagem(2,150);			// somente apartir da vx.48
.................... 							displayp(23+3,(que_banco_repouso + 1),2,0,0);
.................... 							displayp(29,aux_tempo_repouso[que_banco_repouso],3,0,0);
.................... //							 "Banco @@ repouso",	//148
.................... 							que_banco_repouso++;
.................... 							break;
.................... 						#endif
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 						
.................... 				#endif
.................... 			#else
.................... 				passo_exibe_erro++;
.................... 			#endif
.................... 			}
.................... 		case 29:
.................... 			{
.................... 			#if (com_alarme_demanda == true)
.................... 				if (dem_ati == true)
0E456:  BTFSS  24.0
0E458:  BRA    E470
.................... 					{
.................... 					#if (st94 == true)
.................... 						exibiu_erro = 1;
.................... 						#if (disp_lcd == false)
.................... 							mensagem(46,0);
.................... 						#else
.................... 							mensagem(2,83);
.................... 						#endif
.................... 						break;
.................... 					#elif (ST8500C == true)
.................... 						exibiu_erro = 1;
0E45A:  BSF    2B.3
.................... 						mensagem(2,82);
0E45C:  MOVLW  02
0E45E:  MOVLB  A
0E460:  MOVWF  x4D
0E462:  MOVLW  52
0E464:  MOVWF  x4E
0E466:  MOVLB  0
0E468:  CALL   47E8
.................... 						break;
0E46C:  BRA    E612
.................... 					#else
.................... 						passo_exibe_erro++;
.................... 					#endif
.................... 					}
0E46E:  BRA    E472
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
0E470:  INCF   30,F
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
.................... 			#endif
.................... 			}
.................... 		case 30:
.................... 			{
.................... 			exibiu_erro = 1;
0E472:  BSF    2B.3
.................... 			#if (ST8100C == true)
.................... 				passo_exibe_erro++;
.................... 			#elif ((ST8200C == true) || (ST8300C == true) || (ST8500C == true))
.................... 				exibe_equip_nro_serie();
0E474:  CALL   48D4
.................... 				break;
0E478:  BRA    E612
.................... 			#elif (st94 == true)
.................... 				#if (disp_lcd == true)
.................... 					exibe_equip_nro_serie();
.................... 					break;
.................... 				#else
.................... 					passo_exibe_erro++;
.................... 				#endif
.................... 			#elif (st9600r == true)
.................... 				exibe_equip_nro_serie();
.................... 				break;			
.................... 			#else
.................... 				passo_exibe_erro++;
.................... 			#endif
.................... 			}
.................... 		
.................... 		case  31:
.................... 			{
.................... 			#if (controlador == true)
.................... 				if (aux_tempo_aciona != 0)
0E47A:  MOVF   x68,F
0E47C:  BZ    E482
.................... 					{
.................... 					#if (st8200c == true)
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,153);
.................... 						displayp(29,aux_tempo_aciona,3,0,0);
.................... 						break;
.................... 					#elif (st8300c == true)
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,154);
.................... 						displayp(29,aux_tempo_aciona,3,0,0);
.................... 						break;
.................... 					#else
.................... 						passo_exibe_erro++;
0E47E:  INCF   30,F
.................... 					#endif
.................... 					}
0E480:  BRA    E484
.................... 				else
.................... 					{
.................... 					passo_exibe_erro++;
0E482:  INCF   30,F
.................... 					}
.................... 			#else
.................... 				passo_exibe_erro++;
.................... 			#endif
....................                 break;
0E484:  BRA    E612
.................... 			}
.................... 		#if (st8500c == true)
.................... 			case 32:
.................... 				{
.................... 				#if (com_tc == true)
.................... 					passo_exibe_erro++;
0E486:  INCF   30,F
.................... 				#else
.................... 					if (time_out_modo_rep == 0)
.................... 						{
.................... 						if (ferro_rep == false)
.................... 							{
.................... 							grava_ocorrencias(reg_falta_pulso_rep);
.................... 							ferro_rep = true;
.................... 							}
.................... 						exibiu_erro = 1;
.................... 						mensagem(1,4);
.................... 						mensagem(2,5);
.................... 						break;
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						if (ferro_rep == true)
.................... 							{
.................... 							grava_ocorrencias(reg_volta_pulso_rep);
.................... 							ferro_rep = false;
.................... 							}
.................... 						}
.................... 				#endif
....................                     break;
0E488:  BRA    E612
.................... 				}
.................... 			case 33:
.................... 				{
.................... 				exibiu_erro = 1;
0E48A:  BSF    2B.3
.................... 				if (periodo_fatura == PERIODO_PONTA)
0E48C:  MOVLB  3
0E48E:  DECFSZ x5F,W
0E490:  BRA    E4A8
.................... 					{
.................... 					mensagem(2,153);
0E492:  MOVLW  02
0E494:  MOVLB  A
0E496:  MOVWF  x4D
0E498:  MOVLW  99
0E49A:  MOVWF  x4E
0E49C:  MOVLB  0
0E49E:  CALL   47E8
.................... 					break;
0E4A2:  BRA    E612
.................... 					} 
0E4A4:  BRA    E4BA
0E4A6:  MOVLB  3
.................... 				else
.................... 					{
.................... 					mensagem(2,154);
0E4A8:  MOVLW  02
0E4AA:  MOVLB  A
0E4AC:  MOVWF  x4D
0E4AE:  MOVLW  9A
0E4B0:  MOVWF  x4E
0E4B2:  MOVLB  0
0E4B4:  CALL   47E8
.................... 					break;
0E4B8:  BRA    E612
.................... 					} 
.................... 				}
.................... 			case 34:
.................... 				{
.................... 				#if (com_tc == true)
.................... 					passo_exibe_erro++;
0E4BA:  INCF   30,F
.................... 				#else
.................... 					if (saturou_kw == true) 
.................... 						{
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,168);
.................... 						break;
.................... 						}
.................... 					else if(saturou_kvar == true)
.................... 						{
.................... 						exibiu_erro = 1;
.................... 						mensagem(2,169);
.................... 						break;
.................... 						}
.................... 					else
.................... 						{
.................... 						passo_exibe_erro++;
.................... 						}
.................... 				#endif
....................                     break;
0E4BC:  BRA    E612
.................... 				}
.................... 			case 35:
.................... 				{
.................... 				exibiu_erro = 1;
0E4BE:  BSF    2B.3
.................... 				mensagem(2,17);
0E4C0:  MOVLW  02
0E4C2:  MOVLB  A
0E4C4:  MOVWF  x4D
0E4C6:  MOVLW  11
0E4C8:  MOVWF  x4E
0E4CA:  MOVLB  0
0E4CC:  CALL   47E8
.................... 				displayp(27,dem_contratada,4,0,0);
0E4D0:  MOVLW  1B
0E4D2:  MOVLB  A
0E4D4:  MOVWF  x4E
0E4D6:  MOVFF  27B,A50
0E4DA:  MOVFF  27A,A4F
0E4DE:  MOVLW  04
0E4E0:  MOVWF  x51
0E4E2:  CLRF   x52
0E4E4:  CLRF   x53
0E4E6:  MOVLB  0
0E4E8:  CALL   5038
.................... 				break;
0E4EC:  BRA    E612
.................... 				}
.................... 			case 36:
.................... 				{
.................... 				exibiu_erro = 1;
0E4EE:  BSF    2B.3
.................... 				output_01 = saida2;
0E4F0:  MOVFF  885,72
.................... 				if (modo_saidas == MODO_INVERTIDO)
0E4F4:  MOVF   x6C,F
0E4F6:  BNZ   E50C
.................... 					{
.................... 					mensagem(1,173);
0E4F8:  MOVLW  01
0E4FA:  MOVLB  A
0E4FC:  MOVWF  x4D
0E4FE:  MOVLW  AD
0E500:  MOVWF  x4E
0E502:  MOVLB  0
0E504:  CALL   47E8
.................... 					output_01 = ~output_01;
0E508:  COMF   x72,F
.................... 					}
0E50A:  BRA    E51C
.................... 				else
.................... 					{
.................... 					mensagem(1,174);
0E50C:  MOVLW  01
0E50E:  MOVLB  A
0E510:  MOVWF  x4D
0E512:  MOVLW  AE
0E514:  MOVWF  x4E
0E516:  MOVLB  0
0E518:  CALL   47E8
.................... 					}
.................... 				lcd_gotoxy(1,2);
0E51C:  MOVLW  01
0E51E:  MOVLB  A
0E520:  MOVWF  x62
0E522:  MOVLW  02
0E524:  MOVWF  x63
0E526:  MOVLB  0
0E528:  CALL   46C4
.................... 				for (aux_b1 = 0; aux_b1 < 8; aux_b1++)
0E52C:  MOVLB  3
0E52E:  CLRF   xB1
0E530:  MOVF   xB1,W
0E532:  SUBLW  07
0E534:  BNC   E594
.................... 					{
.................... 					if (modo_saidas == MODO_INVERTIDO)
0E536:  MOVLB  0
0E538:  MOVF   x6C,F
0E53A:  BNZ   E564
.................... 						{
.................... 						if  (bit_test(output_01, 0) == true)
0E53C:  BTFSS  x72.0
0E53E:  BRA    E552
.................... 							{
.................... 							wr_lcd(1,'0');
0E540:  MOVLW  01
0E542:  MOVLB  A
0E544:  MOVWF  x65
0E546:  MOVLW  30
0E548:  MOVWF  x66
0E54A:  MOVLB  0
0E54C:  CALL   1864
.................... 							}
0E550:  BRA    E562
.................... 						else
.................... 							{
.................... 							wr_lcd(1,'1');
0E552:  MOVLW  01
0E554:  MOVLB  A
0E556:  MOVWF  x65
0E558:  MOVLW  31
0E55A:  MOVWF  x66
0E55C:  MOVLB  0
0E55E:  CALL   1864
.................... 							}
.................... 						}
0E562:  BRA    E58A
.................... 					else
.................... 						{
.................... 						if  (bit_test(output_01, 0) == true)
0E564:  BTFSS  x72.0
0E566:  BRA    E57A
.................... 							{
.................... 							wr_lcd(1,'1');
0E568:  MOVLW  01
0E56A:  MOVLB  A
0E56C:  MOVWF  x65
0E56E:  MOVLW  31
0E570:  MOVWF  x66
0E572:  MOVLB  0
0E574:  CALL   1864
.................... 							}
0E578:  BRA    E58A
.................... 						else
.................... 							{
.................... 							wr_lcd(1,'0');
0E57A:  MOVLW  01
0E57C:  MOVLB  A
0E57E:  MOVWF  x65
0E580:  MOVLW  30
0E582:  MOVWF  x66
0E584:  MOVLB  0
0E586:  CALL   1864
.................... 							}
.................... 						}
.................... 					output_01 = output_01 >> 1;
0E58A:  BCF    FD8.0
0E58C:  RRCF   x72,F
0E58E:  MOVLB  3
0E590:  INCF   xB1,F
0E592:  BRA    E530
.................... 					}
.................... 				output_01 = saida3;
0E594:  MOVFF  886,72
.................... 				if (modo_saidas == MODO_INVERTIDO)
0E598:  MOVLB  0
0E59A:  MOVF   x6C,F
0E59C:  BNZ   E5A0
.................... 					{
.................... 					output_01 = ~output_01;
0E59E:  COMF   x72,F
.................... 					}
.................... 				for (aux_b1 = 0; aux_b1 < 8; aux_b1++)
0E5A0:  MOVLB  3
0E5A2:  CLRF   xB1
0E5A4:  MOVF   xB1,W
0E5A6:  SUBLW  07
0E5A8:  BNC   E608
.................... 					{
.................... 					if (modo_saidas == MODO_INVERTIDO)
0E5AA:  MOVLB  0
0E5AC:  MOVF   x6C,F
0E5AE:  BNZ   E5D8
.................... 						{
.................... 						if  (bit_test(output_01, 0) == true)
0E5B0:  BTFSS  x72.0
0E5B2:  BRA    E5C6
.................... 							{
.................... 							wr_lcd(1,'0');
0E5B4:  MOVLW  01
0E5B6:  MOVLB  A
0E5B8:  MOVWF  x65
0E5BA:  MOVLW  30
0E5BC:  MOVWF  x66
0E5BE:  MOVLB  0
0E5C0:  CALL   1864
.................... 							}
0E5C4:  BRA    E5D6
.................... 						else
.................... 							{
.................... 							wr_lcd(1,'1');
0E5C6:  MOVLW  01
0E5C8:  MOVLB  A
0E5CA:  MOVWF  x65
0E5CC:  MOVLW  31
0E5CE:  MOVWF  x66
0E5D0:  MOVLB  0
0E5D2:  CALL   1864
.................... 							}
.................... 						}
0E5D6:  BRA    E5FE
.................... 					else
.................... 						{
.................... 						if  (bit_test(output_01, 0) == true)
0E5D8:  BTFSS  x72.0
0E5DA:  BRA    E5EE
.................... 							{
.................... 							wr_lcd(1,'1');
0E5DC:  MOVLW  01
0E5DE:  MOVLB  A
0E5E0:  MOVWF  x65
0E5E2:  MOVLW  31
0E5E4:  MOVWF  x66
0E5E6:  MOVLB  0
0E5E8:  CALL   1864
.................... 							}
0E5EC:  BRA    E5FE
.................... 						else
.................... 							{
.................... 							wr_lcd(1,'0');
0E5EE:  MOVLW  01
0E5F0:  MOVLB  A
0E5F2:  MOVWF  x65
0E5F4:  MOVLW  30
0E5F6:  MOVWF  x66
0E5F8:  MOVLB  0
0E5FA:  CALL   1864
.................... 							}
.................... 						}
.................... 					output_01 = output_01 >> 1;
0E5FE:  BCF    FD8.0
0E600:  RRCF   x72,F
0E602:  MOVLB  3
0E604:  INCF   xB1,F
0E606:  BRA    E5A4
.................... 					}
.................... 				break;
0E608:  MOVLB  0
0E60A:  BRA    E612
.................... 				}
.................... 			#endif	
.................... 
.................... 
.................... 
.................... 		default:		//Exibe Data e Hora
.................... 			{
.................... 			passo_exibe_erro = 0;
0E60C:  CLRF   30
.................... //			if (exibiu_erro_menu == 0);
.................... //				{
.................... 				exibiu_erro = 1;
0E60E:  BSF    2B.3
.................... 				#if (st94 == true)
.................... 					#if (com_regs == true)
.................... 						#if (disp_lcd == true)
.................... 							exibe_data_hora();
.................... 						#else
.................... 							if (M1_C6 == 1)
.................... 								{
.................... 								exibe_data_hora();
.................... 								}
.................... 						#endif
.................... 					#else
.................... 						exibiu_erro = 0;
.................... 						passo_exibe_erro = 1;
.................... 					#endif
.................... 				#elif (ST8100C == true)
.................... 				#elif ((ST8200C == true) || (ST8300C == true) || (ST8500C == true))
.................... 					exibe_data_hora();
0E610:  RCALL  E078
.................... 				#else
.................... 					exibe_data_hora();
.................... 				#endif
.................... //				}
.................... 			}
.................... 		}
.................... 	if (exibiu_erro == 1)
0E612:  BTFSS  2B.3
0E614:  BRA    E636
.................... 		{
.................... 		exibiu = 0 ;
0E616:  BCF    29.6
.................... 		exibiu_erro = 0;
0E618:  BCF    2B.3
.................... 		#if ((st8200c == true) || (st8300c == true))
.................... 			mensagem(1,135);
.................... //			displayp(14,passo_exibe_erro,2,0,0);
.................... 		#elif ((st8500c == true))
.................... 			if ((passo_exibe_erro != 31) && (passo_exibe_erro != 36))
0E61A:  MOVF   30,W
0E61C:  SUBLW  1F
0E61E:  BZ    E636
0E620:  MOVF   30,W
0E622:  SUBLW  24
0E624:  BZ    E636
.................... 				{
.................... 				mensagem(1,135);
0E626:  MOVLW  01
0E628:  MOVLB  A
0E62A:  MOVWF  x4D
0E62C:  MOVLW  87
0E62E:  MOVWF  x4E
0E630:  MOVLB  0
0E632:  CALL   47E8
.................... //				displayp(12,status,2,0,0);
.................... //				wr_lcd(1,'/');
.................... //				displayp(15,passo_exibe_erro,2,0,0);
.................... 				}
.................... 		#elif (ST8100C == true)
.................... 		#elif (st92 == true)
.................... 			mensagem(1,9);
.................... //			displayp(14,passo_exibe_erro,2,0,0);
.................... 		#endif
.................... 		}
0E636:  RETURN 0
.................... }	
.................... 
.................... 
.................... #include "st8x00_exmd.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: EXMD                                                           *
.................... ; Funcao: MODULO EXIBIÇÃO DE VALORES DA LINHA ST8XXXc					 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... void exibe_tensao_fn(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (ja_rolou == true)
.................... 			{
.................... 			print_display(1,tensao_r,6,1);
.................... 			rolando = false;
.................... 			}
.................... 		else
.................... 			{
.................... 			mensagem_rola(34, 1);
.................... 			}
.................... 		led_v = 1;
.................... 		led_a = 0;
.................... 		led_r = 0;
.................... 		led_w = 0;
.................... 	#else
.................... 		if (exibiu == 0)
*
0F694:  BTFSC  29.6
0F696:  BRA    F6B8
.................... 			{
.................... 			mensagem (1,23);
0F698:  MOVLW  01
0F69A:  MOVLB  A
0F69C:  MOVWF  x4D
0F69E:  MOVLW  17
0F6A0:  MOVWF  x4E
0F6A2:  MOVLB  0
0F6A4:  CALL   47E8
.................... 			mensagem (2,0);
0F6A8:  MOVLW  02
0F6AA:  MOVLB  A
0F6AC:  MOVWF  x4D
0F6AE:  CLRF   x4E
0F6B0:  MOVLB  0
0F6B2:  CALL   47E8
.................... 			exibiu = 1;
0F6B6:  BSF    29.6
.................... 			}
.................... 		#if (monofasico == true)
.................... 			print_display(21,tensao_r,3,2,6,'T', 5);	/* exibe tensao RS no display1 com 1 casa decimal entrada em q6)*/
.................... 			lcd_gotoxy(12,2);
.................... 		    wr_lcd(1,'V');
.................... 		    wr_lcd(1,'a');
.................... 		    wr_lcd(1,'c');
.................... 		#else
.................... 			if (time_out2 == 0)
0F6B8:  MOVLB  3
0F6BA:  MOVF   xB8,F
0F6BC:  BNZ   F6E6
.................... 				{
.................... 				mensagem (1,138);
0F6BE:  MOVLW  01
0F6C0:  MOVLB  A
0F6C2:  MOVWF  x4D
0F6C4:  MOVLW  8A
0F6C6:  MOVWF  x4E
0F6C8:  MOVLB  0
0F6CA:  CALL   47E8
.................... 				mensagem (2,139);
0F6CE:  MOVLW  02
0F6D0:  MOVLB  A
0F6D2:  MOVWF  x4D
0F6D4:  MOVLW  8B
0F6D6:  MOVWF  x4E
0F6D8:  MOVLB  0
0F6DA:  CALL   47E8
.................... 				time_out2 = 10;
0F6DE:  MOVLW  0A
0F6E0:  MOVLB  3
0F6E2:  MOVWF  xB8
.................... 				}
0F6E4:  BRA    F75A
.................... 			else
.................... 				{
.................... 				print_display(11,tensao_r,3,1,6,'T', 255);	/* exibe tensao R no display1 com 1 casa decimal entrada em q6)*/
0F6E6:  MOVLW  0B
0F6E8:  MOVLB  A
0F6EA:  MOVWF  x4C
0F6EC:  MOVFF  251,A4E
0F6F0:  MOVFF  250,A4D
0F6F4:  MOVLW  03
0F6F6:  MOVWF  x4F
0F6F8:  MOVLW  01
0F6FA:  MOVWF  x50
0F6FC:  MOVLW  06
0F6FE:  MOVWF  x51
0F700:  MOVLW  54
0F702:  MOVWF  x52
0F704:  SETF   x53
0F706:  MOVLB  0
0F708:  CALL   EB54
.................... 				print_display(18,tensao_s,3,1,6,'T', 255);	/* exibe tensao S no display1 com 1 casa decimal entrada em q6)*/
0F70C:  MOVLW  12
0F70E:  MOVLB  A
0F710:  MOVWF  x4C
0F712:  MOVFF  2D5,A4E
0F716:  MOVFF  2D4,A4D
0F71A:  MOVLW  03
0F71C:  MOVWF  x4F
0F71E:  MOVLW  01
0F720:  MOVWF  x50
0F722:  MOVLW  06
0F724:  MOVWF  x51
0F726:  MOVLW  54
0F728:  MOVWF  x52
0F72A:  SETF   x53
0F72C:  MOVLB  0
0F72E:  CALL   EB54
.................... 				print_display(27,tensao_t,3,1,6,'T', 255);	/* exibe tensao T no display1 com 1 casa decimal entrada em q6)*/
0F732:  MOVLW  1B
0F734:  MOVLB  A
0F736:  MOVWF  x4C
0F738:  MOVFF  32C,A4E
0F73C:  MOVFF  32B,A4D
0F740:  MOVLW  03
0F742:  MOVWF  x4F
0F744:  MOVLW  01
0F746:  MOVWF  x50
0F748:  MOVLW  06
0F74A:  MOVWF  x51
0F74C:  MOVLW  54
0F74E:  MOVWF  x52
0F750:  SETF   x53
0F752:  MOVLB  0
0F754:  CALL   EB54
0F758:  MOVLB  3
.................... 				}
.................... 		#endif
.................... 	#endif
0F75A:  MOVLB  0
0F75C:  GOTO   10C2A (RETURN)
.................... 	
.................... }
.................... 
.................... 
.................... void exibe_tensao_ff(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (ja_rolou == true)
.................... 			{
.................... 			#if (monofasico == true)
.................... 				print_display(1,tensao_r,6,1);
.................... 				rolando = false;
.................... 			#else
.................... 				print_display(1,tensao_rs,6,1);
.................... 				rolando = false;
.................... 			#endif
.................... 			}
.................... 		else
.................... 			{
.................... 			mensagem_rola(35, 1);
.................... 			}
.................... 		if (piscar == 1)
.................... 			{
.................... 			led_v = 1;
.................... 			}
.................... 		else
.................... 			{
.................... 			led_v = 0;
.................... 			}
.................... 		led_a = 0;
.................... 		led_r = 0;
.................... 		led_w = 0;
.................... 	#else
.................... 		if (exibiu == 0)
.................... 			{
.................... 			mensagem (1,23);
.................... 			mensagem (2,0);
.................... 			exibiu = 1;
.................... 			}
.................... 		#if (monofasico == true)
.................... 			print_display(21,tensao_r,3,2,6,'T',5);	/* exibe tensao RS no display1 com 1 casa decimal entrada em q6)*/
.................... 			lcd_gotoxy(12,2);
.................... 		    wr_lcd(1,'V');
.................... 		    wr_lcd(1,'a');
.................... 		    wr_lcd(1,'c');
.................... 		#else
.................... 			if (time_out2 == 0)
.................... 				{
.................... 				mensagem (1,138);
.................... 				mensagem (2,139);
.................... 				time_out2 = 10;
.................... 				}
.................... 			else
.................... 				{
.................... 				print_display(11,tensao_rs,3,1,6,'T',255);	/* exibe tensao RS no display1 com 1 casa decimal entrada em q6)*/
.................... 				print_display(18,tensao_st,3,1,6,'T',255);	/* exibe tensao ST no display1 com 1 casa decimal entrada em q6)*/
.................... 				print_display(27,tensao_rt,3,1,6,'T',255);	/* exibe tensao RT no display1 com 1 casa decimal entrada em q6)*/
.................... 				}
.................... 		#endif
.................... 	#endif
.................... 
.................... }
.................... 
.................... 
.................... void exibe_tensao_alta(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (ja_rolou == true)
.................... 			{
.................... 			print_display(1,tensao_rs_na_alta,6,1);
.................... 			rolando = false;
.................... 			}
.................... 		else
.................... 			{
.................... 			mensagem_rola(36, 1);
.................... 			}
.................... 		if (piscar == 1)
.................... 			{
.................... 			led_v = 1;
.................... 			}
.................... 		else
.................... 			{
.................... 			led_v = 0;
.................... 			}
.................... 		led_a = 0;
.................... 		led_r = 0;
.................... 		led_w = 0;
.................... 	#else
.................... 		if (exibiu == 0)
0F760:  BTFSC  29.6
0F762:  BRA    F7B4
.................... 			{
.................... 			mensagem (1,23);
0F764:  MOVLW  01
0F766:  MOVLB  A
0F768:  MOVWF  x4D
0F76A:  MOVLW  17
0F76C:  MOVWF  x4E
0F76E:  MOVLB  0
0F770:  CALL   47E8
.................... 			#if (monofasico == false)
.................... 				lcd_gotoxy(5,1);
0F774:  MOVLW  05
0F776:  MOVLB  A
0F778:  MOVWF  x62
0F77A:  MOVLW  01
0F77C:  MOVWF  x63
0F77E:  MOVLB  0
0F780:  CALL   46C4
.................... 			    wr_lcd(1,'(');
0F784:  MOVLW  01
0F786:  MOVLB  A
0F788:  MOVWF  x65
0F78A:  MOVLW  28
0F78C:  MOVWF  x66
0F78E:  MOVLB  0
0F790:  CALL   1864
.................... 			    wr_lcd(1,'k');
0F794:  MOVLW  01
0F796:  MOVLB  A
0F798:  MOVWF  x65
0F79A:  MOVLW  6B
0F79C:  MOVWF  x66
0F79E:  MOVLB  0
0F7A0:  CALL   1864
.................... 			#endif
.................... 			mensagem (2,0);
0F7A4:  MOVLW  02
0F7A6:  MOVLB  A
0F7A8:  MOVWF  x4D
0F7AA:  CLRF   x4E
0F7AC:  MOVLB  0
0F7AE:  CALL   47E8
.................... 			exibiu = 1;
0F7B2:  BSF    29.6
.................... 			}
.................... 		#if (monofasico == true)
.................... 			print_display(17,tensao_rs_na_alta,3,1,6,'T', 255);
.................... 			lcd_gotoxy(7,2);
.................... 		    wr_lcd(1,'k');
.................... 		    wr_lcd(1,'V');
.................... 		    wr_lcd(1,'a');
.................... 		    wr_lcd(1,'c');
.................... 		    wr_lcd(1,'/');
.................... 		    wr_lcd(1,'A');
.................... 		    wr_lcd(1,'l');
.................... 		    wr_lcd(1,'t');
.................... 		    wr_lcd(1,'a');
.................... 		#else
.................... 			if (time_out2 == 0)
0F7B4:  MOVLB  3
0F7B6:  MOVF   xB8,F
0F7B8:  BNZ   F7E2
.................... 				{
.................... 				mensagem (1,138);
0F7BA:  MOVLW  01
0F7BC:  MOVLB  A
0F7BE:  MOVWF  x4D
0F7C0:  MOVLW  8A
0F7C2:  MOVWF  x4E
0F7C4:  MOVLB  0
0F7C6:  CALL   47E8
.................... 				mensagem (2,139);
0F7CA:  MOVLW  02
0F7CC:  MOVLB  A
0F7CE:  MOVWF  x4D
0F7D0:  MOVLW  8B
0F7D2:  MOVWF  x4E
0F7D4:  MOVLB  0
0F7D6:  CALL   47E8
.................... 				time_out2 = 10;
0F7DA:  MOVLW  0A
0F7DC:  MOVLB  3
0F7DE:  MOVWF  xB8
.................... 				}
0F7E0:  BRA    F856
.................... 			else
.................... 				{
.................... 				print_display(11,tensao_rs_na_alta,3,1,6,'T', 255);
0F7E2:  MOVLW  0B
0F7E4:  MOVLB  A
0F7E6:  MOVWF  x4C
0F7E8:  MOVFF  275,A4E
0F7EC:  MOVFF  274,A4D
0F7F0:  MOVLW  03
0F7F2:  MOVWF  x4F
0F7F4:  MOVLW  01
0F7F6:  MOVWF  x50
0F7F8:  MOVLW  06
0F7FA:  MOVWF  x51
0F7FC:  MOVLW  54
0F7FE:  MOVWF  x52
0F800:  SETF   x53
0F802:  MOVLB  0
0F804:  CALL   EB54
.................... 				print_display(18,tensao_st_na_alta,3,1,6,'T', 255);
0F808:  MOVLW  12
0F80A:  MOVLB  A
0F80C:  MOVWF  x4C
0F80E:  MOVFF  2E7,A4E
0F812:  MOVFF  2E6,A4D
0F816:  MOVLW  03
0F818:  MOVWF  x4F
0F81A:  MOVLW  01
0F81C:  MOVWF  x50
0F81E:  MOVLW  06
0F820:  MOVWF  x51
0F822:  MOVLW  54
0F824:  MOVWF  x52
0F826:  SETF   x53
0F828:  MOVLB  0
0F82A:  CALL   EB54
.................... 				print_display(27,tensao_rt_na_alta,3,1,6,'T', 255);
0F82E:  MOVLW  1B
0F830:  MOVLB  A
0F832:  MOVWF  x4C
0F834:  MOVFF  33E,A4E
0F838:  MOVFF  33D,A4D
0F83C:  MOVLW  03
0F83E:  MOVWF  x4F
0F840:  MOVLW  01
0F842:  MOVWF  x50
0F844:  MOVLW  06
0F846:  MOVWF  x51
0F848:  MOVLW  54
0F84A:  MOVWF  x52
0F84C:  SETF   x53
0F84E:  MOVLB  0
0F850:  CALL   EB54
0F854:  MOVLB  3
.................... 				}
.................... 		#endif
.................... 	#endif
0F856:  MOVLB  0
0F858:  GOTO   10C2A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void exibe_corrente(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (ja_rolou == true)
.................... 			{
.................... 			print_display(1,corrente_r,3,0);
.................... 			rolando = false;
.................... 			}
.................... 		else
.................... 			{
.................... 			mensagem_rola(37, 1);
.................... 			}
.................... 		led_v = 0;
.................... 		led_a = 1;
.................... 		led_r = 0;
.................... 		led_w = 0;
.................... 	#else
.................... 		if (exibiu == 0)
0F85C:  BTFSC  29.6
0F85E:  BRA    F880
.................... 			{
.................... 			mensagem (1,24);
0F860:  MOVLW  01
0F862:  MOVLB  A
0F864:  MOVWF  x4D
0F866:  MOVLW  18
0F868:  MOVWF  x4E
0F86A:  MOVLB  0
0F86C:  CALL   47E8
.................... 			mensagem (2,0);
0F870:  MOVLW  02
0F872:  MOVLB  A
0F874:  MOVWF  x4D
0F876:  CLRF   x4E
0F878:  MOVLB  0
0F87A:  CALL   47E8
.................... 			exibiu = 1;
0F87E:  BSF    29.6
.................... 			}
.................... 		#if (monofasico == true)
.................... 			if (corrente_r == 0)
.................... 				{
.................... 				mensagem (2,0);
.................... 				}
.................... 			print_display(21,corrente_r,4,1,3,'C', 0);
.................... 		#else
.................... 			if (time_out2 == 0)
0F880:  MOVLB  3
0F882:  MOVF   xB8,F
0F884:  BNZ   F8AE
.................... 				{
.................... 				mensagem (1,138);
0F886:  MOVLW  01
0F888:  MOVLB  A
0F88A:  MOVWF  x4D
0F88C:  MOVLW  8A
0F88E:  MOVWF  x4E
0F890:  MOVLB  0
0F892:  CALL   47E8
.................... 				mensagem (2,139);
0F896:  MOVLW  02
0F898:  MOVLB  A
0F89A:  MOVWF  x4D
0F89C:  MOVLW  8B
0F89E:  MOVWF  x4E
0F8A0:  MOVLB  0
0F8A2:  CALL   47E8
.................... 				time_out2 = 10;
0F8A6:  MOVLW  0A
0F8A8:  MOVLB  3
0F8AA:  MOVWF  xB8
.................... 				}
0F8AC:  BRA    F922
.................... 			else
.................... 				{
.................... 				print_display(11,corrente_r,4,1,3,'C', 255);
0F8AE:  MOVLW  0B
0F8B0:  MOVLB  A
0F8B2:  MOVWF  x4C
0F8B4:  MOVFF  253,A4E
0F8B8:  MOVFF  252,A4D
0F8BC:  MOVLW  04
0F8BE:  MOVWF  x4F
0F8C0:  MOVLW  01
0F8C2:  MOVWF  x50
0F8C4:  MOVLW  03
0F8C6:  MOVWF  x51
0F8C8:  MOVLW  43
0F8CA:  MOVWF  x52
0F8CC:  SETF   x53
0F8CE:  MOVLB  0
0F8D0:  CALL   EB54
.................... 				print_display(18,corrente_s,4,1,3,'C', 255);
0F8D4:  MOVLW  12
0F8D6:  MOVLB  A
0F8D8:  MOVWF  x4C
0F8DA:  MOVFF  2D7,A4E
0F8DE:  MOVFF  2D6,A4D
0F8E2:  MOVLW  04
0F8E4:  MOVWF  x4F
0F8E6:  MOVLW  01
0F8E8:  MOVWF  x50
0F8EA:  MOVLW  03
0F8EC:  MOVWF  x51
0F8EE:  MOVLW  43
0F8F0:  MOVWF  x52
0F8F2:  SETF   x53
0F8F4:  MOVLB  0
0F8F6:  CALL   EB54
.................... 				print_display(27,corrente_t,4,1,3,'C', 255);
0F8FA:  MOVLW  1B
0F8FC:  MOVLB  A
0F8FE:  MOVWF  x4C
0F900:  MOVFF  32E,A4E
0F904:  MOVFF  32D,A4D
0F908:  MOVLW  04
0F90A:  MOVWF  x4F
0F90C:  MOVLW  01
0F90E:  MOVWF  x50
0F910:  MOVLW  03
0F912:  MOVWF  x51
0F914:  MOVLW  43
0F916:  MOVWF  x52
0F918:  SETF   x53
0F91A:  MOVLB  0
0F91C:  CALL   EB54
0F920:  MOVLB  3
.................... 				}
.................... 		#endif
.................... 	#endif
0F922:  MOVLB  0
0F924:  GOTO   10C2A (RETURN)
.................... }
.................... 
.................... 
.................... void exibe_frequencia(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (ja_rolou == true)
.................... 			{
.................... 			print_display(1,frequencia,2,1);
.................... 			rolando = false;
.................... 			}
.................... 		else
.................... 			{
.................... 			mensagem_rola(m_menu1_16, 1);
.................... 			}
.................... 		led_v = 0;
.................... 		led_a = 0;
.................... 		led_r = 0;
.................... 		led_w = 0;
.................... 	#else
.................... 		if (exibiu == 0)
0F928:  BTFSC  29.6
0F92A:  BRA    F94E
.................... 			{
.................... 			mensagem (1,25);
0F92C:  MOVLW  01
0F92E:  MOVLB  A
0F930:  MOVWF  x4D
0F932:  MOVLW  19
0F934:  MOVWF  x4E
0F936:  MOVLB  0
0F938:  CALL   47E8
.................... 			mensagem (2,33);
0F93C:  MOVLW  02
0F93E:  MOVLB  A
0F940:  MOVWF  x4D
0F942:  MOVLW  21
0F944:  MOVWF  x4E
0F946:  MOVLB  0
0F948:  CALL   47E8
.................... 			exibiu = 1;
0F94C:  BSF    29.6
.................... 			}
.................... 		print_display(22,frequencia,2,1,2,'F', 4);
0F94E:  MOVLW  16
0F950:  MOVLB  A
0F952:  MOVWF  x4C
0F954:  CLRF   x4E
0F956:  MOVFF  24E,A4D
0F95A:  MOVLW  02
0F95C:  MOVWF  x4F
0F95E:  MOVLW  01
0F960:  MOVWF  x50
0F962:  MOVLW  02
0F964:  MOVWF  x51
0F966:  MOVLW  46
0F968:  MOVWF  x52
0F96A:  MOVLW  04
0F96C:  MOVWF  x53
0F96E:  MOVLB  0
0F970:  CALL   EB54
.................... 	#endif
0F974:  GOTO   10C2A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #if (st8500c == true)
.................... 	void exibe_kw_kvar(void)
.................... 		{
.................... 		if (exibiu == 0)
0F978:  BTFSC  29.6
0F97A:  BRA    F99E
.................... 			{
.................... 			mensagem(1,26);
0F97C:  MOVLW  01
0F97E:  MOVLB  A
0F980:  MOVWF  x4D
0F982:  MOVLW  1A
0F984:  MOVWF  x4E
0F986:  MOVLB  0
0F988:  CALL   47E8
.................... 			mensagem(2,28);
0F98C:  MOVLW  02
0F98E:  MOVLB  A
0F990:  MOVWF  x4D
0F992:  MOVLW  1C
0F994:  MOVWF  x4E
0F996:  MOVLB  0
0F998:  CALL   47E8
.................... 			exibiu = 1;
0F99C:  BSF    29.6
.................... 			}
.................... 		#if (com_tc == true)
.................... 			aux_wexibe1 = pot_ativa_tot;
0F99E:  MOVFF  243,369
0F9A2:  MOVFF  242,368
.................... 			aux_wexibe2 = pot_reativa_tot;
0F9A6:  MOVFF  247,36B
0F9AA:  MOVFF  246,36A
.................... 			if (valor_tc != 1)
0F9AE:  MOVLB  4
0F9B0:  DECFSZ xBF,W
0F9B2:  BRA    F9B8
0F9B4:  MOVF   xC0,F
0F9B6:  BZ    F9F4
.................... 				{
.................... 				aux_wexibe1 = aux_wexibe1 * valor_tp;
0F9B8:  MOVFF  369,A67
0F9BC:  MOVFF  368,A66
0F9C0:  MOVFF  4C2,A69
0F9C4:  MOVFF  4C1,A68
0F9C8:  MOVLB  0
0F9CA:  CALL   473C
0F9CE:  MOVFF  02,369
0F9D2:  MOVFF  01,368
.................... 				aux_wexibe2 = aux_wexibe2 * valor_tp;
0F9D6:  MOVFF  36B,A67
0F9DA:  MOVFF  36A,A66
0F9DE:  MOVFF  4C2,A69
0F9E2:  MOVFF  4C1,A68
0F9E6:  CALL   473C
0F9EA:  MOVFF  02,36B
0F9EE:  MOVFF  01,36A
0F9F2:  MOVLB  4
.................... 				}
.................... 			print_display(10,aux_wexibe1,4,1,5,'C', 255);
0F9F4:  MOVLW  0A
0F9F6:  MOVLB  A
0F9F8:  MOVWF  x4C
0F9FA:  MOVFF  369,A4E
0F9FE:  MOVFF  368,A4D
0FA02:  MOVLW  04
0FA04:  MOVWF  x4F
0FA06:  MOVLW  01
0FA08:  MOVWF  x50
0FA0A:  MOVLW  05
0FA0C:  MOVWF  x51
0FA0E:  MOVLW  43
0FA10:  MOVWF  x52
0FA12:  SETF   x53
0FA14:  MOVLB  0
0FA16:  CALL   EB54
.................... 			print_display(26,aux_wexibe2,4,1,5,'C', 255);
0FA1A:  MOVLW  1A
0FA1C:  MOVLB  A
0FA1E:  MOVWF  x4C
0FA20:  MOVFF  36B,A4E
0FA24:  MOVFF  36A,A4D
0FA28:  MOVLW  04
0FA2A:  MOVWF  x4F
0FA2C:  MOVLW  01
0FA2E:  MOVWF  x50
0FA30:  MOVLW  05
0FA32:  MOVWF  x51
0FA34:  MOVLW  43
0FA36:  MOVWF  x52
0FA38:  SETF   x53
0FA3A:  MOVLB  0
0FA3C:  CALL   EB54
.................... 		#else
0FA40:  GOTO   10C2A (RETURN)
.................... 			displayp(10,pot_ativa_tot,5,0,0);
.................... 			displayp(26,pot_reativa_tot,5,0,0);
.................... 		#endif
.................... 			
.................... 		}
.................... #else		
.................... 	void exibe_pot_ativa(void)
.................... 	{
.................... 		#if (ST8100C == true)
.................... 			if (ja_rolou == true)
.................... 				{
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						print_display(1,pot_ativa_tot,5,0);
.................... 						rolando = false;
.................... 						led_w = 1;
.................... 						goto exibe_pot_ativa_10;
.................... 						}
.................... 				#endif
.................... 				if (valor_tp != 1)
.................... 					{
.................... 					aux_l1 = pot_ativa_r;
.................... 					data1_int = aux_l1 / 32;
.................... 					print_display(1,(data1_int),0,0);
.................... 					rolando = false;
.................... 					if (piscar == 1)
.................... 						{
.................... 						led_w = 1;
.................... 						}
.................... 					else
.................... 						{
.................... 						led_w = 0;
.................... 						}
.................... 					}
.................... 				 else
.................... 			 		{
.................... 					print_display(1,pot_ativa_r,5,0);
.................... 					rolando = false;
.................... 					led_w = 1;
.................... 					}
.................... 				}
.................... 			else
.................... 				{
.................... 				mensagem_rola(12, 1);
.................... 				led_w = 1;
.................... 				}
.................... exibe_pot_ativa_10:			
.................... 			led_v = 0;
.................... 			led_a = 0;
.................... 			led_r = 0;
.................... 		#else
.................... 			#if (monofasico == true)
.................... 				if (exibiu == 0)
.................... 					{
.................... 					mensagem(1,26);
.................... 					mensagem(2,0);
.................... 					exibiu = 1;
.................... 					}
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						print_display(21,pot_ativa_tot,4,1,5,'C', 1);
.................... 					    wr_lcd(1,' ');
.................... 					    return;
.................... 						}
.................... 				#endif
.................... 				if (valor_tp != 1)
.................... 					{
.................... 					aux_l1 = pot_ativa_r;
.................... 					aux_l1 = aux_l1 * valor_tp;
.................... 					data1_int = aux_l1 / 32;
.................... 					print_display(21,data1_int,6,1,0,'C', 1);
.................... 					}
.................... 				else
.................... 					{
.................... 					if (sentido_r == 1)
.................... 						{
.................... 						lcd_gotoxy(4,2);
.................... 					    wr_lcd(1,'-');
.................... 						print_display(21,pot_ativa_r,4,1,5,'C', 1);
.................... 						}
.................... 					else
.................... 						{
.................... 						print_display(21,pot_ativa_r,4,1,5,'C', 1);
.................... 					    wr_lcd(1,' ');
.................... 						}
.................... 					}
.................... 			#else
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						if (exibiu == 0)
.................... 							{
.................... 							mensagem(1,26);
.................... 							mensagem(2,28);
.................... 							exibiu = 1;
.................... 							}
.................... 						print_display(10,pot_ativa_tot,4,1,0,'C', 255);
.................... 					    wr_lcd(1,' ');
.................... 						print_display(26,pot_reativa_tot,4,1,0,'C', 255);
.................... 					    return;
.................... 						}
.................... 					else
.................... 						{
.................... 						if (exibiu == 0)
.................... 							{
.................... 							mensagem(1,26);
.................... 							mensagem(2,0);
.................... 							exibiu = 1;
.................... 							}
.................... 						}
.................... 				#else
.................... 					if (exibiu == 0)
.................... 						{
.................... 						mensagem(1,26);
.................... 						mensagem(2,0);
.................... 						exibiu = 1;
.................... 						}
.................... 				#endif
.................... 				if (time_out2 == 0)
.................... 					{
.................... 					mensagem (1,138);
.................... 					mensagem (2,139);
.................... 					time_out2 = 10;
.................... 					}
.................... 				else
.................... 					{
.................... 					if (valor_tp != 1)
.................... 						{
.................... 						aux_l1 = pot_ativa_r;
.................... 						aux_l1 = aux_l1 * valor_tp;
.................... 						data1_int = aux_l1 / 32;
.................... 						print_display(10,data1_int,6,1,0,'C', 255);
.................... 										
.................... 						aux_l1 = pot_ativa_s;
.................... 						aux_l1 = aux_l1 * valor_tp;
.................... 						data1_int = aux_l1 / 32;
.................... 						print_display(18,data1_int,6,1,0,'C', 255);
.................... 					
.................... 						aux_l1 = pot_ativa_t;
.................... 						aux_l1 = aux_l1 * valor_tp;
.................... 						data1_int = aux_l1 / 32;
.................... 						print_display(26,data1_int,6,1,0,'C', 255);
.................... 					 	}
.................... 					 else
.................... 					 	{
.................... 						if (sentido_r == 1)
.................... 							{
.................... 							lcd_gotoxy(10,1);
.................... 						    wr_lcd(1,'-');
.................... 							print_display(11,pot_ativa_r,4,1,5,'C', 255);
.................... 							}
.................... 						else
.................... 							{
.................... 							print_display(10,pot_ativa_r,4,1,5,'C', 255);
.................... 						    wr_lcd(1,' ');
.................... 							}
.................... 						if (sentido_s == 1)
.................... 							{
.................... 							lcd_gotoxy(1,2);
.................... 						    wr_lcd(1,'-');
.................... 							print_display(18,pot_ativa_s,4,1,5,'C', 255);
.................... 							}
.................... 						else
.................... 							{
.................... 							print_display(18,pot_ativa_s,4,1,5,'C', 255);
.................... 						    wr_lcd(1,' ');
.................... 							}
.................... 						if (sentido_t == 1)
.................... 							{
.................... 							lcd_gotoxy(10,2);
.................... 						    wr_lcd(1,'-');
.................... 							print_display(27,pot_ativa_t,4,1,5,'C', 255);
.................... 							}
.................... 						else
.................... 							{
.................... 							print_display(26,pot_ativa_t,4,1,5,'C', 255);
.................... 						    wr_lcd(1,' ');
.................... 							}
.................... 						}
.................... 					}
.................... 			#endif
.................... 		#endif
.................... 	}
.................... #endif
.................... 
.................... 
.................... void exibe_pot_aparente(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (ja_rolou == true)
.................... 			{
.................... 			led_r = 0;
.................... 			led_w = 0;
.................... 			#if (com_rep == true)
.................... 				if (modo_rep == 1)
.................... 					{
.................... 					print_display(1,pot_aparente_tot,5,0);
.................... 					rolando = false;
.................... 					led_v = 1;
.................... 					led_a = 1;
.................... 					return;
.................... 					}
.................... 			#endif
.................... 			if (valor_tp != 1)
.................... 				{
.................... 				aux_l1 = pot_aparente_r;
.................... 				aux_l1 = aux_l1 * valor_tp;
.................... 				data1_int = aux_l1 / 32;
.................... 					
.................... 				print_display(1,(data1_int ),0,0);
.................... 				rolando = false;
.................... 				if (piscar == 1)
.................... 					{
.................... 					led_v = 1;
.................... 					led_a = 1;
.................... 					}
.................... 				else
.................... 					{
.................... 					led_v = 0;
.................... 					led_a = 0;
.................... 					}
.................... 				}
.................... 			 else
.................... 		 		{
.................... 				print_display(1,pot_aparente_r,5,0);
.................... 				rolando = false;
.................... 				led_v = 1;
.................... 				led_a = 1;
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			mensagem_rola(13, 1);
.................... 			led_v = 1;
.................... 			led_a = 1;
.................... 			}
.................... 	#else
.................... 		#if (monofasico == true)
.................... 			if (exibiu == 0)
.................... 				{
.................... 				mensagem(1,27);
.................... 				mensagem(2,0);
.................... 				exibiu = 1;
.................... 				}
.................... 			#if (com_rep == true)
.................... 				if (modo_rep == 1)
.................... 					{
.................... 					print_display(20,pot_aparente_tot,4,1,5,'C', 2);
.................... 				    return;
.................... 					}
.................... 			#endif
.................... 			if (valor_tp != 1)
.................... 				{
.................... 				aux_l1 = pot_aparente_r;
.................... 				aux_l1 = aux_l1 * valor_tp;
.................... 				data1_int = aux_l1 / 32;
.................... 				print_display(20,data1_int,6,1,0,'C', 2);
.................... 				}
.................... 			 else
.................... 			 	{
.................... 				print_display(20,pot_aparente_r,4,1,5,'C', 2);
.................... 				}
.................... 		#else
.................... 			#if (com_rep == true)
.................... 				if (modo_rep == 1)
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						mensagem(1,28);
.................... 						mensagem(2,27);
.................... 						exibiu = 1;
.................... 						}
.................... 					print_display(10,pot_reativa_tot,4,1,0,'C', 255);
.................... 				    wr_lcd(1,' ');
.................... 					print_display(26,pot_aparente_tot,4,1,0,'C', 255);
.................... 				    return;
.................... 					}
.................... 				else
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						mensagem(1,27);
.................... 						mensagem(2,0);
.................... 						exibiu = 1;
.................... 						}
.................... 					}
.................... 			#else
.................... 				if (exibiu == 0)
.................... 					{
.................... 					mensagem(1,27);
.................... 					mensagem(2,0);
.................... 					exibiu = 1;
.................... 					}
.................... 			#endif
.................... 			if (time_out2 == 0)
.................... 				{
.................... 				mensagem (1,138);
.................... 				mensagem (2,139);
.................... 				time_out2 = 10;
.................... 				}
.................... 			else
.................... 				{
.................... 				if (valor_tp != 1)
.................... 					{
.................... 					aux_l1 = pot_aparente_r;
.................... 					aux_l1 = aux_l1 * valor_tp;
.................... 					data1_int = aux_l1 / 32;
.................... 					print_display(10,data1_int,6,1,0,'C', 255);
.................... 								
.................... 					aux_l1 = pot_aparente_s;
.................... 					aux_l1 = aux_l1 * valor_tp;
.................... 					data1_int = aux_l1 / 32;
.................... 					print_display(18,data1_int,6,1,0,'C', 255);
.................... 			
.................... 					aux_l1 = pot_aparente_t;
.................... 					aux_l1 = aux_l1 * valor_tp;
.................... 					data1_int = aux_l1 / 32;
.................... 					print_display(26,data1_int,6,1,0,'C', 255);
.................... 				 	}
.................... 				 else
.................... 				 	{
.................... 					print_display(10,pot_aparente_r,4,1,5,'C', 255);
.................... 					print_display(18,pot_aparente_s,4,1,5,'C', 255);
.................... 					print_display(26,pot_aparente_t,4,1,5,'C', 255);
.................... 					}
.................... 				}
.................... 		#endif
.................... 	#endif
.................... }
.................... 
.................... 
.................... 
.................... void exibe_pot_reativa(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		led_w = 0;
.................... 		if (ja_rolou == true)
.................... 			{
.................... 			#if (com_rep == true)
.................... 				if (modo_rep == 1)
.................... 					{
.................... 					print_display(1,pot_reativa_tot,5,0);
.................... 					rolando = false;
.................... 					led_v = 1;
.................... 					led_a = 1;
.................... 					led_r = 1;
.................... 					return;
.................... 					}
.................... 			#endif
.................... 			if (valor_tp != 1)
.................... 				{
.................... 				aux_l1 = pot_reativa_r;
.................... 				aux_l1 = aux_l1 * valor_tp;
.................... 				data1_int = aux_l1 / 32;
.................... 				print_display(1,(data1_int),0,0);
.................... 				rolando = false;
.................... 				if (piscar == 1)
.................... 					{
.................... 					led_v = 1;
.................... 					led_a = 1;
.................... 					led_r = 1;
.................... 					}
.................... 				else
.................... 					{
.................... 					led_v = 0;
.................... 					led_a = 0;
.................... 					led_r = 0;
.................... 					}
.................... 				}
.................... 			 else
.................... 		 		{
.................... 				print_display(1,pot_reativa_r,5,0);
.................... 				rolando = false;
.................... 				led_v = 1;
.................... 				led_a = 1;
.................... 				led_r = 1;
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			mensagem_rola(14, 1);
.................... 			led_v = 1;
.................... 			led_a = 1;
.................... 			led_r = 1;
.................... 			}
.................... 	#else
.................... 		#if (monofasico == true)
.................... 			if (exibiu == 0)
.................... 				{
.................... 				mensagem(1,28);
.................... 				mensagem(2,0);
.................... 				exibiu = 1;
.................... 				}
.................... 			#if (com_rep == true)
.................... 				if (modo_rep == 1)
.................... 					{
.................... 					print_display(20,pot_reativa_tot,4,1,5,'C', 3);
.................... 				    return;
.................... 					}
.................... 			#endif
.................... 			if (valor_tp != 1)
.................... 				{
.................... 				aux_l1 = pot_reativa_r;
.................... 				aux_l1 = aux_l1 * valor_tp;
.................... 				data1_int = aux_l1 / 32;
.................... 				print_display(20,data1_int,6,1,0,'C', 3);
.................... 				}
.................... 			else
.................... 				{
.................... 				print_display(20,pot_reativa_r,4,1,5,'C', 3);
.................... 				}
.................... 		#else
.................... 			#if (com_rep == true)
.................... 				if (modo_rep == 1)
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						mensagem(1,28);
.................... 						mensagem(2,146);
.................... 						exibiu = 1;
.................... 						}
.................... 					print_display(10,pot_reativa_tot,4,1,0,'C',255);
.................... 					displayfp(26,fator_pot_t,0);
.................... 					return;
.................... 					}
.................... 				else
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						mensagem(1,28);
.................... 						mensagem(2,0);
.................... 						exibiu = 1;
.................... 						}
.................... 					}
.................... 			#else
.................... 				if (exibiu == 0)
.................... 					{
.................... 					mensagem(1,28);
.................... 					mensagem(2,0);
.................... 					exibiu = 1;
.................... 					}
.................... 			#endif
.................... 			if (time_out2 == 0)
.................... 				{
.................... 				mensagem (1,138);
.................... 				mensagem (2,139);
.................... 				time_out2 = 10;
.................... 				}
.................... 			else
.................... 				{
.................... 				if (valor_tp != 1)
.................... 					{
.................... 					aux_l1 = pot_reativa_r;
.................... 					aux_l1 = aux_l1 * valor_tp;
.................... 					data1_int = aux_l1 / 32;
.................... 					print_display(10,data1_int,6,1,0,'C', 255);
.................... 			
.................... 					aux_l1 = pot_reativa_s;
.................... 					aux_l1 = aux_l1 * valor_tp;
.................... 					data1_int = aux_l1 / 32;
.................... 					print_display(18,data1_int,6,1,0,'C', 255);
.................... 			
.................... 					aux_l1 = pot_reativa_t;
.................... 					aux_l1 = aux_l1 * valor_tp;
.................... 					data1_int = aux_l1 / 32;
.................... 					print_display(26,data1_int,6,1,0,'C', 255);
.................... 					}
.................... 				else
.................... 					{
.................... 					print_display(10,pot_reativa_r,4,1,5,'C', 255);
.................... 					print_display(18,pot_reativa_s,4,1,5,'C', 255);
.................... 					print_display(26,pot_reativa_t,4,1,5,'C', 255);
.................... 					}
.................... 				}
.................... 		#endif
.................... 	#endif
.................... }
.................... 
.................... 
.................... 
.................... #if (st8500c == true)
.................... 	void exibe_fp_kva(void)
.................... 		{
.................... 		if (exibiu == 0)
*
0FE66:  BTFSC  29.6
0FE68:  BRA    FE8C
.................... 			{
.................... 			mensagem(1,27);
0FE6A:  MOVLW  01
0FE6C:  MOVLB  A
0FE6E:  MOVWF  x4D
0FE70:  MOVLW  1B
0FE72:  MOVWF  x4E
0FE74:  MOVLB  0
0FE76:  CALL   47E8
.................... 			mensagem(2,56);
0FE7A:  MOVLW  02
0FE7C:  MOVLB  A
0FE7E:  MOVWF  x4D
0FE80:  MOVLW  38
0FE82:  MOVWF  x4E
0FE84:  MOVLB  0
0FE86:  CALL   47E8
.................... 			exibiu = 1;
0FE8A:  BSF    29.6
.................... 			}
.................... 		#if (com_tc == true)
.................... 			aux_wexibe1 = pot_aparente_tot;
0FE8C:  MOVFF  24B,369
0FE90:  MOVFF  24A,368
.................... 			if (valor_tc != 1)
0FE94:  MOVLB  4
0FE96:  DECFSZ xBF,W
0FE98:  BRA    FE9E
0FE9A:  MOVF   xC0,F
0FE9C:  BZ    FEBE
.................... 				{
.................... 				aux_wexibe1 = aux_wexibe1 * valor_tp;
0FE9E:  MOVFF  369,A67
0FEA2:  MOVFF  368,A66
0FEA6:  MOVFF  4C2,A69
0FEAA:  MOVFF  4C1,A68
0FEAE:  MOVLB  0
0FEB0:  CALL   473C
0FEB4:  MOVFF  02,369
0FEB8:  MOVFF  01,368
0FEBC:  MOVLB  4
.................... 				}
.................... 			print_display(10,aux_wexibe1,4,1,5,'C', 255);
0FEBE:  MOVLW  0A
0FEC0:  MOVLB  A
0FEC2:  MOVWF  x4C
0FEC4:  MOVFF  369,A4E
0FEC8:  MOVFF  368,A4D
0FECC:  MOVLW  04
0FECE:  MOVWF  x4F
0FED0:  MOVLW  01
0FED2:  MOVWF  x50
0FED4:  MOVLW  05
0FED6:  MOVWF  x51
0FED8:  MOVLW  43
0FEDA:  MOVWF  x52
0FEDC:  SETF   x53
0FEDE:  MOVLB  0
0FEE0:  CALL   EB54
.................... 			displayfp(22,fator_pot,0);
0FEE4:  MOVLW  16
0FEE6:  MOVLB  A
0FEE8:  MOVWF  x4A
0FEEA:  MOVFF  293,A4C
0FEEE:  MOVFF  292,A4B
0FEF2:  CLRF   x4D
0FEF4:  MOVLB  0
0FEF6:  BRA    10000
.................... 		#else
0FEF8:  GOTO   10C2A (RETURN)
.................... 			displayp(10,pot_aparente_tot,5,0,0);
.................... 			displayfp(25,fator_pot,0);
.................... 		#endif
.................... 		
.................... 		}
.................... 		
.................... #else
.................... 	void exibe_fator_potencia(void)
.................... 	{
.................... 		#if (ST8100C == true)
.................... 			if (ja_rolou == true)
.................... 				{
.................... 				displayfp(1,fator_pot_r);
.................... 				rolando = false;
.................... 				}
.................... 			else
.................... 				{
.................... 				mensagem_rola(16, 1);
.................... 				}
.................... 			led_v = 0;
.................... 			led_a = 0;
.................... 			led_r = 0;
.................... 			led_w = 0;
.................... 		#else
.................... 			#if (monofasico == true)
.................... 				if (teclando == 0)
.................... 					{
.................... 					displayfp(22,fator_pot_r,1);
.................... 					}
.................... 				else
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						mensagem (1,29);
.................... 						mensagem (2,0);
.................... 						exibiu = 1;
.................... 						}
.................... 					displayfp(21,fator_pot_r,0);
.................... 					}
.................... 			#else
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1){
.................... 						exibe_pot_reativa();
.................... 						return;
.................... 						}
.................... 				#endif
.................... 				if (teclou_enter){
.................... 					displayfp(22,fator_pot,1);
.................... 				}
.................... 				else{
.................... 					if (exibiu == 0){
.................... 						mensagem (1,29);
.................... 						mensagem (2,0);
.................... 						mensagem (2,30);
.................... 						exibiu = 1;
.................... 					}
.................... 					displayfp(11,fator_pot_r,0);
.................... 					displayfp(19,fator_pot_s,0);
.................... 					displayfp(27,fator_pot_t,0);
.................... 				}
.................... 			#endif
.................... 		#endif
.................... 	}
.................... #endif
.................... 
.................... 
.................... #if (ST8100C == false)
.................... 	#if (st8500c == true)
.................... 		void exibe_pot_requerida_excedente(void)
.................... 		{
.................... 			if (exibiu == 0)
*
1041E:  BTFSC  29.6
10420:  BRA    10444
.................... 				{
.................... 				mensagem(1,31);
10422:  MOVLW  01
10424:  MOVLB  A
10426:  MOVWF  x4D
10428:  MOVLW  1F
1042A:  MOVWF  x4E
1042C:  MOVLB  0
1042E:  CALL   47E8
.................... 				mensagem(2,32);
10432:  MOVLW  02
10434:  MOVLB  A
10436:  MOVWF  x4D
10438:  MOVLW  20
1043A:  MOVWF  x4E
1043C:  MOVLB  0
1043E:  CALL   47E8
.................... 				exibiu = 1;
10442:  BSF    29.6
.................... 				}
.................... 			aux_l1 = pot_req_r;
10444:  MOVLB  3
10446:  CLRF   x73
10448:  CLRF   x72
1044A:  MOVFF  289,371
1044E:  MOVFF  288,370
.................... 			aux_l1 = aux_l1 + pot_req_s + pot_req_t;
10452:  MOVLB  2
10454:  MOVF   xEA,W
10456:  MOVLB  3
10458:  ADDWF  x70,W
1045A:  MOVLB  A
1045C:  MOVWF  x4A
1045E:  MOVLB  2
10460:  MOVF   xEB,W
10462:  MOVLB  3
10464:  ADDWFC x71,W
10466:  MOVLB  A
10468:  MOVWF  x4B
1046A:  MOVLW  00
1046C:  MOVLB  3
1046E:  ADDWFC x72,W
10470:  MOVLB  A
10472:  MOVWF  x4C
10474:  MOVLW  00
10476:  MOVLB  3
10478:  ADDWFC x73,W
1047A:  MOVLB  A
1047C:  MOVWF  x4D
1047E:  MOVLB  3
10480:  MOVF   x41,W
10482:  MOVLB  A
10484:  ADDWF  x4A,W
10486:  MOVLB  3
10488:  MOVWF  x70
1048A:  MOVF   x42,W
1048C:  MOVLB  A
1048E:  ADDWFC x4B,W
10490:  MOVLB  3
10492:  MOVWF  x71
10494:  MOVLW  00
10496:  MOVLB  A
10498:  ADDWFC x4C,W
1049A:  MOVLB  3
1049C:  MOVWF  x72
1049E:  MOVLW  00
104A0:  MOVLB  A
104A2:  ADDWFC x4D,W
104A4:  MOVLB  3
104A6:  MOVWF  x73
.................... 			print_display(11,aux_l1,4,1,5,'C', 255);
104A8:  MOVFF  371,A4B
104AC:  MOVFF  370,A4A
104B0:  MOVLW  0B
104B2:  MOVLB  A
104B4:  MOVWF  x4C
104B6:  MOVFF  A4B,A4E
104BA:  MOVFF  A4A,A4D
104BE:  MOVLW  04
104C0:  MOVWF  x4F
104C2:  MOVLW  01
104C4:  MOVWF  x50
104C6:  MOVLW  05
104C8:  MOVWF  x51
104CA:  MOVLW  43
104CC:  MOVWF  x52
104CE:  SETF   x53
104D0:  MOVLB  0
104D2:  CALL   EB54
.................... 			aux_l1 = pot_exec_r;
104D6:  MOVLB  3
104D8:  CLRF   x73
104DA:  CLRF   x72
104DC:  MOVFF  287,371
104E0:  MOVFF  286,370
.................... 			aux_l1 = aux_l1 + pot_exec_s + pot_exec_t;
104E4:  MOVLB  2
104E6:  MOVF   xE8,W
104E8:  MOVLB  3
104EA:  ADDWF  x70,W
104EC:  MOVLB  A
104EE:  MOVWF  x4A
104F0:  MOVLB  2
104F2:  MOVF   xE9,W
104F4:  MOVLB  3
104F6:  ADDWFC x71,W
104F8:  MOVLB  A
104FA:  MOVWF  x4B
104FC:  MOVLW  00
104FE:  MOVLB  3
10500:  ADDWFC x72,W
10502:  MOVLB  A
10504:  MOVWF  x4C
10506:  MOVLW  00
10508:  MOVLB  3
1050A:  ADDWFC x73,W
1050C:  MOVLB  A
1050E:  MOVWF  x4D
10510:  MOVLB  3
10512:  MOVF   x3F,W
10514:  MOVLB  A
10516:  ADDWF  x4A,W
10518:  MOVLB  3
1051A:  MOVWF  x70
1051C:  MOVF   x40,W
1051E:  MOVLB  A
10520:  ADDWFC x4B,W
10522:  MOVLB  3
10524:  MOVWF  x71
10526:  MOVLW  00
10528:  MOVLB  A
1052A:  ADDWFC x4C,W
1052C:  MOVLB  3
1052E:  MOVWF  x72
10530:  MOVLW  00
10532:  MOVLB  A
10534:  ADDWFC x4D,W
10536:  MOVLB  3
10538:  MOVWF  x73
.................... 			print_display(27,aux_l1,4,1,5,'C', 255);
1053A:  MOVFF  371,A4B
1053E:  MOVFF  370,A4A
10542:  MOVLW  1B
10544:  MOVLB  A
10546:  MOVWF  x4C
10548:  MOVFF  A4B,A4E
1054C:  MOVFF  A4A,A4D
10550:  MOVLW  04
10552:  MOVWF  x4F
10554:  MOVLW  01
10556:  MOVWF  x50
10558:  MOVLW  05
1055A:  MOVWF  x51
1055C:  MOVLW  43
1055E:  MOVWF  x52
10560:  SETF   x53
10562:  MOVLB  0
10564:  CALL   EB54
10568:  GOTO   10C2A (RETURN)
.................... 		}
.................... 	#else
.................... 		void exibe_pot_requerida_excedente(void)
.................... 		{
.................... 			if (exibiu == 0)
.................... 				{
.................... 				mensagem (1,31);
.................... 				mensagem (2,0);
.................... 				exibiu = 1;
.................... 				}
.................... 			lcd_gotoxy(1,2);
.................... 			if (pot_req_r != 0)
.................... 				{
.................... 			    wr_lcd(1,'I');
.................... 			    wr_lcd(1,'n');
.................... 			    wr_lcd(1,'d');
.................... 			    data1_int = pot_req_r;
.................... 			    }
.................... 			else if (pot_exec_r != 0)
.................... 				{
.................... 			    wr_lcd(1,'C');
.................... 			    wr_lcd(1,'a');
.................... 			    wr_lcd(1,'p');
.................... 			    data1_int = pot_exec_r;
.................... 			    }
.................... 			else
.................... 				{
.................... 			    wr_lcd(1,' ');
.................... 			    wr_lcd(1,' ');
.................... 			    wr_lcd(1,' ');
.................... 			    data1_int = 0;
.................... 			    }
.................... 		    wr_lcd(1,':');
.................... 			print_display(23,data1_int,4,1,5,'C', 3);
.................... 		}
.................... 	#endif
.................... #endif
.................... 
.................... 
.................... #if (st8500c == false)
.................... 	void exibe_pot_requerida(void)
.................... 	{
.................... 		#if (ST8100C == true)
.................... 			if (ja_rolou == true)
.................... 				{
.................... 				print_display(1,pot_req_r,5,0);
.................... 				rolando = false;
.................... 				}
.................... 			else
.................... 				{
.................... 				mensagem_rola(15, 1);
.................... 				}
.................... 			led_v = 1;
.................... 			led_a = 1;
.................... 			led_r = 1;
.................... 			led_w = 0;
.................... 		#else
.................... 			if (exibiu == 0)
.................... 				{
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						mensagem(1,31);
.................... 						mensagem(2,32);
.................... 						}
.................... 					else
.................... 						{
.................... 						mensagem(1,31);
.................... 						mensagem(2,0);
.................... 						}
.................... 				#else
.................... 					mensagem(1,31);
.................... 					mensagem(2,0);
.................... 				#endif
.................... 				exibiu = 1;
.................... 				}
.................... 			#if (monofasico == true)
.................... 				print_display(20,pot_req_r,4,1,5,'C', 3);
.................... 			#else
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						aux_l1 = pot_req_r;
.................... 						aux_l1 = aux_l1 + pot_req_s + pot_req_t;
.................... 						print_display(11,aux_l1,4,1,5,'C', 255);
.................... 						aux_l1 = pot_exec_r;
.................... 						aux_l1 = aux_l1 + pot_exec_s + pot_exec_t;
.................... 						print_display(27,aux_l1,4,1,5,'C', 255);
.................... 						return;
.................... 						}
.................... 				#endif
.................... 				if (time_out2 == 0)
.................... 					{
.................... 					mensagem (1,138);
.................... 					mensagem (2,139);
.................... 					time_out2 = 10;
.................... 					}
.................... 				else
.................... 					{
.................... 					print_display(11,pot_req_r,4,1,5,'C', 255);
.................... 					print_display(18,pot_req_s,4,1,5,'C', 255);
.................... 					print_display(27,pot_req_t,4,1,5,'C', 255);
.................... 					}
.................... 			#endif
.................... 		#endif
.................... 	}
.................... 	
.................... 	
.................... 	void exibe_pot_excedente(void)
.................... 	{
.................... 		#if (ST8100C == true)
.................... 			if (ja_rolou == true)
.................... 				{
.................... 				print_display(1,pot_exec_r,5,0);
.................... 				rolando = false;
.................... 				}
.................... 			else
.................... 				{
.................... 				mensagem_rola(49, 1);
.................... 				}
.................... 			led_v = 1;
.................... 			led_a = 1;
.................... 			led_r = 1;
.................... 			led_w = 0;
.................... 		#else
.................... 			if (exibiu == 0)
.................... 				{
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						#if (st8300c == true)
.................... 							if (aux_menu1 == 0)
.................... 								{
.................... 								mensagem (1,147);
.................... 								mensagem (2,148);
.................... 								}
.................... 							else
.................... 								{
.................... 								mensagem (1,152);
.................... 								mensagem (2,153);
.................... 								}
.................... 						#else
.................... 							if (aux_menu1 == 0)
.................... 								{
.................... 								mensagem (1,147);
.................... 								mensagem (2,148);
.................... 								}
.................... 							else
.................... 								{
.................... 								mensagem (1,150);
.................... 								mensagem (2,151);
.................... 								}
.................... 						#endif
.................... 						}
.................... 					else
.................... 						{
.................... 						mensagem (1,32);
.................... 						mensagem (2,0);
.................... 						}
.................... 				#else
.................... 					mensagem (1,32);
.................... 					mensagem (2,0);
.................... 				#endif
.................... 				exibiu = 1;
.................... 				}
.................... 			#if (monofasico == true)
.................... 				print_display(20,pot_exec_r,4,1,5,'C', 3);
.................... 			#else
.................... 				#if (com_rep == true)
.................... 					if (modo_rep == 1)
.................... 						{
.................... 						if (aux_menu1 == 0)
.................... 							{
.................... 							displayp(12, ultimo_pulso_at,5,0,0);
.................... 							displayp(28, ultimo_pulso_reat,5,0,0);
.................... 							}
.................... 						else
.................... 							{
.................... 							displayp(12, (ultima_pot_at),5,0,0);
.................... 							displayp(28, (ultima_pot_reat),5,0,0);
.................... 							}
.................... 						return;
.................... 						}
.................... 				#endif
.................... 				if (time_out2 == 0)
.................... 					{
.................... 					mensagem (1,138);
.................... 					mensagem (2,139);
.................... 					time_out2 = 10;
.................... 					}
.................... 				else
.................... 					{
.................... 					print_display(11,pot_exec_r,4,1,5,'C', 255);
.................... 					print_display(18,pot_exec_s,4,1,5,'C', 255);
.................... 					print_display(27,pot_exec_t,4,1,5,'C', 255);
.................... 					}
.................... 			#endif
.................... 		#endif
.................... 	}
.................... #endif	
.................... 
.................... 
.................... #if (com_rep == true)
.................... 	void exibe_status_rep(void)
.................... 		{
.................... 		#if (ST8100C == true)
.................... 			switch(menu_aux)
.................... 				{
.................... 				case 11:
.................... 					{
.................... 					if (ja_rolou == true)
.................... 						{
.................... 						if (tarif_cap_rep == 1)
.................... 							{
.................... 							buf_display[0] = tabela_caracteres[MC];
.................... 							buf_display[1] = tabela_caracteres[MA];
.................... 							buf_display[2] = tabela_caracteres[MP];
.................... 							buf_display[3] = tabela_caracteres[MESPACO];
.................... 							}
.................... 						else
.................... 							{
.................... 							buf_display[0] = tabela_caracteres[MI];
.................... 							buf_display[1] = tabela_caracteres[MN];
.................... 							buf_display[2] = tabela_caracteres[MD];
.................... 							buf_display[3] = tabela_caracteres[MESPACO];
.................... 							}
.................... 						rolando = false;
.................... 						}
.................... 					else
.................... 						{
.................... 						mensagem_rola(58, 1);
.................... 						}
.................... 					led_v = 1;
.................... 					led_a = 1;
.................... 					led_r = 1;
.................... 					led_w = 0;
.................... 					break;
.................... 					}
.................... 				case 12:
.................... 					{
.................... 					if (ja_rolou == true)
.................... 						{
.................... 						print_display(1,seg_falt_rep,0,1);
.................... 						rolando = false;
.................... 						}
.................... 					else
.................... 						{
.................... 						mensagem_rola(59, 1);
.................... 						}
.................... 					led_v = 0;
.................... 					led_a = 0;
.................... 					led_r = 0;
.................... 					led_w = 0;
.................... 					break;
.................... 					}
.................... 				case 13:
.................... 					{
.................... 					if (ja_rolou == true)
.................... 						{
.................... 						print_display(1,puls_c1_rep,0,1);
.................... 						rolando = false;
.................... 						}
.................... 					else
.................... 						{
.................... 						mensagem_rola(60, 1);
.................... 						}
.................... 					led_v = 0;
.................... 					led_a = 0;
.................... 					led_r = 0;
.................... 					led_w = 1;
.................... 					break;
.................... 					}
.................... 				case 14:
.................... 					{
.................... 					if (ja_rolou == true)
.................... 						{
.................... 						print_display(1,puls_c2_rep,0,1);
.................... 						rolando = false;
.................... 						}
.................... 					else
.................... 						{
.................... 						mensagem_rola(61, 1);
.................... 						}
.................... 					led_v = 1;
.................... 					led_a = 1;
.................... 					led_r = 1;
.................... 					led_w = 0;
.................... 					break;
.................... 					}
.................... 				}
.................... 		#else
.................... 			if (exibiu == 0)
.................... 				{
.................... 				#if (st8300c == true)
.................... 					mensagem (1,144);
.................... 					mensagem (2,145);
.................... 				#elif (st8500c == true)
.................... 					mensagem (1,144);
.................... 					mensagem (2,145);
.................... 				#else
.................... 					mensagem (1,143);
.................... 					mensagem (2,144);
.................... 				#endif
.................... 				exibiu = 1;
.................... 				}
.................... 	
.................... 	//		  01234567890123456
.................... 	//		  67890123456789012
.................... 	//		 "Tar:   Tempo:   ",	//144
.................... 	//		 "P:      /       "		//145
.................... 			lcd_gotoxy(5,1);
.................... 			if (tarif_cap_rep == 1)
.................... 				{
.................... 			    wr_lcd(1,'C');
.................... 				}
.................... 			else
.................... 				{
.................... 			    wr_lcd(1,'I');
.................... 				}
.................... 			displayp (14,seg_falt_rep,3,0,0);
.................... 			displayp (19,puls_c1_rep,5,0,0);
.................... 			displayp (27,puls_c2_rep,5,0,0);
.................... 		#endif
.................... 		}
.................... 
.................... 
.................... 		#if (ST8100C == true)
.................... 			void exibe_status_rep_ant(void)
.................... 			{
.................... 				switch(menu_aux)
.................... 					{
.................... 					case 15:
.................... 						{
.................... 						if (ja_rolou == true)
.................... 							{
.................... 							print_display(1,ultimo_pulso_at,0,1);
.................... 							rolando = false;
.................... 							}
.................... 						else
.................... 							{
.................... 							mensagem_rola(69, 1);
.................... 							}
.................... 						led_v = 0;
.................... 						led_a = 0;
.................... 						led_r = 0;
.................... 						led_w = 1;
.................... 						break;
.................... 						}
.................... 					case 16:
.................... 						{
.................... 						if (ja_rolou == true)
.................... 							{
.................... 							print_display(1,ultimo_pulso_reat,0,1);
.................... 							rolando = false;
.................... 							}
.................... 						else
.................... 							{
.................... 							mensagem_rola(70, 1);
.................... 							}
.................... 						led_v = 1;
.................... 						led_a = 1;
.................... 						led_r = 1;
.................... 						led_w = 0;
.................... 						break;
.................... 						}
.................... 					case 17:
.................... 						{
.................... 						if (ja_rolou == true)
.................... 							{
.................... 							print_display(1,ultima_pot_at,5,0);
.................... 							rolando = false;
.................... 							}
.................... 						else
.................... 							{
.................... 							mensagem_rola(71, 1);
.................... 							}
.................... 						led_v = 0;
.................... 						led_a = 0;
.................... 						led_r = 0;
.................... 						led_w = 1;
.................... 						break;
.................... 						}
.................... 					case 18:
.................... 						{
.................... 						if (ja_rolou == true)
.................... 							{
.................... 							print_display(1,ultima_pot_reat,5,0);
.................... 							rolando = false;
.................... 							}
.................... 						else
.................... 							{
.................... 							mensagem_rola(72, 1);
.................... 							}
.................... 						led_v = 1;
.................... 						led_a = 1;
.................... 						led_r = 1;
.................... 						led_w = 0;
.................... 						break;
.................... 						}
.................... 					}
.................... 			}
.................... 		#else
.................... 			#if ((st8200c == true) || st8300c == true))
.................... 				void exibe_status_rep_ant(void)
.................... 				{
.................... 			 		if (aux_menu1 == 0)
.................... 			 			{
.................... 						if (exibiu == 0)
.................... 							{
.................... 							mensagem (1,145);
.................... 							mensagem (2,146);
.................... 							exibiu = 1;
.................... 							}
.................... 						displayp(12, ultimo_pulso_at,5,0,0);
.................... 						displayp(28, ultimo_pulso_reat,5,0,0);
.................... 						}
.................... 					else
.................... 						{
.................... 						if (exibiu == 0)
.................... 							{
.................... 							mensagem (1,150);
.................... 							mensagem (2,151);
.................... 							exibiu = 1;
.................... 							}
.................... 						displayp(10,ultima_pot_at,4,0,0);
.................... 						displayp(26,ultima_pot_reat,4,0,0);
.................... 						
.................... 						}
.................... 				}
.................... 			#endif
.................... 		#endif
.................... 		
.................... 
.................... 		
.................... #endif
.................... 
.................... #if (st8300c == true)
.................... 	#if (com_consumo == true)
.................... 		void exibe_consumo(void)
.................... 		{
.................... 		if (exibiu == 0)
.................... 			{
.................... 			mensagem (1,156);
.................... 			mensagem (2,157);
.................... 			exibiu = 1;
.................... 			}
.................... 			aux_f1 = consumo_ati;
.................... 			aux_l1 = (int32)(aux_f1 * mul_tc * valor_tp);
.................... 			displaypl(8,aux_l1,8);
.................... 			aux_f1 = consumo_reati;
.................... 			aux_l1 = (int32)(aux_f1 * mul_tc * valor_tp);
.................... 			displaypl(24,aux_l1,8);
.................... 		}
.................... 	#endif
.................... #endif
.................... 
.................... #if (st8500c == true)
.................... 	void exibe_consumo(void)
.................... 	{
.................... 	if (exibiu == 0)
*
10708:  BTFSC  29.6
1070A:  BRA    1072E
.................... 		{
.................... 		mensagem (1,140);
1070C:  MOVLW  01
1070E:  MOVLB  A
10710:  MOVWF  x4D
10712:  MOVLW  8C
10714:  MOVWF  x4E
10716:  MOVLB  0
10718:  CALL   47E8
.................... 		mensagem (2,141);
1071C:  MOVLW  02
1071E:  MOVLB  A
10720:  MOVWF  x4D
10722:  MOVLW  8D
10724:  MOVWF  x4E
10726:  MOVLB  0
10728:  CALL   47E8
.................... 		exibiu = 1;
1072C:  BSF    29.6
.................... 		}
.................... 	#if (com_tc == true)
.................... 		aux_f1 = consumo_ati;
1072E:  MOVFF  42F,A7C
10732:  MOVFF  42E,A7B
10736:  MOVFF  42D,A7A
1073A:  MOVFF  42C,A79
1073E:  CALL   5438
10742:  MOVFF  03,397
10746:  MOVFF  02,396
1074A:  MOVFF  01,395
1074E:  MOVFF  00,394
.................... 		aux_l1 = (int32)(aux_f1 * mul_tc * valor_tp);
10752:  MOVFF  397,A80
10756:  MOVFF  396,A7F
1075A:  MOVFF  395,A7E
1075E:  MOVFF  394,A7D
10762:  MOVFF  351,A84
10766:  MOVFF  350,A83
1076A:  MOVFF  34F,A82
1076E:  MOVFF  34E,A81
10772:  CALL   5306
10776:  MOVFF  03,A4D
1077A:  MOVFF  02,A4C
1077E:  MOVFF  01,A4B
10782:  MOVFF  00,A4A
10786:  MOVFF  4C2,A7E
1078A:  MOVFF  4C1,A7D
1078E:  CALL   2924
10792:  MOVFF  A4D,A80
10796:  MOVFF  A4C,A7F
1079A:  MOVFF  A4B,A7E
1079E:  MOVFF  A4A,A7D
107A2:  MOVFF  03,A84
107A6:  MOVFF  02,A83
107AA:  MOVFF  01,A82
107AE:  MOVFF  00,A81
107B2:  CALL   5306
107B6:  MOVFF  03,A7C
107BA:  MOVFF  02,A7B
107BE:  MOVFF  01,A7A
107C2:  MOVFF  00,A79
107C6:  CALL   5470
107CA:  MOVFF  03,373
107CE:  MOVFF  02,372
107D2:  MOVFF  01,371
107D6:  MOVFF  00,370
.................... 		displaypl(7,aux_l1,10);
107DA:  MOVLW  07
107DC:  MOVLB  A
107DE:  MOVWF  x4A
107E0:  MOVFF  373,A4E
107E4:  MOVFF  372,A4D
107E8:  MOVFF  371,A4C
107EC:  MOVFF  370,A4B
107F0:  MOVLW  0A
107F2:  MOVWF  x4F
107F4:  MOVLB  0
107F6:  CALL   AFBA
.................... 		aux_f1 = consumo_reati;
107FA:  MOVFF  42B,A7C
107FE:  MOVFF  42A,A7B
10802:  MOVFF  429,A7A
10806:  MOVFF  428,A79
1080A:  CALL   5438
1080E:  MOVFF  03,397
10812:  MOVFF  02,396
10816:  MOVFF  01,395
1081A:  MOVFF  00,394
.................... 		aux_l1 = (int32)(aux_f1 * mul_tc * valor_tp);
1081E:  MOVFF  397,A80
10822:  MOVFF  396,A7F
10826:  MOVFF  395,A7E
1082A:  MOVFF  394,A7D
1082E:  MOVFF  351,A84
10832:  MOVFF  350,A83
10836:  MOVFF  34F,A82
1083A:  MOVFF  34E,A81
1083E:  CALL   5306
10842:  MOVFF  03,A4D
10846:  MOVFF  02,A4C
1084A:  MOVFF  01,A4B
1084E:  MOVFF  00,A4A
10852:  MOVFF  4C2,A7E
10856:  MOVFF  4C1,A7D
1085A:  CALL   2924
1085E:  MOVFF  A4D,A80
10862:  MOVFF  A4C,A7F
10866:  MOVFF  A4B,A7E
1086A:  MOVFF  A4A,A7D
1086E:  MOVFF  03,A84
10872:  MOVFF  02,A83
10876:  MOVFF  01,A82
1087A:  MOVFF  00,A81
1087E:  CALL   5306
10882:  MOVFF  03,A7C
10886:  MOVFF  02,A7B
1088A:  MOVFF  01,A7A
1088E:  MOVFF  00,A79
10892:  CALL   5470
10896:  MOVFF  03,373
1089A:  MOVFF  02,372
1089E:  MOVFF  01,371
108A2:  MOVFF  00,370
.................... 		displaypl(23,aux_l1,10);
108A6:  MOVLW  17
108A8:  MOVLB  A
108AA:  MOVWF  x4A
108AC:  MOVFF  373,A4E
108B0:  MOVFF  372,A4D
108B4:  MOVFF  371,A4C
108B8:  MOVFF  370,A4B
108BC:  MOVLW  0A
108BE:  MOVWF  x4F
108C0:  MOVLB  0
108C2:  CALL   AFBA
.................... 	#endif
.................... 	#if (com_rep == true)
108C6:  GOTO   10C2A (RETURN)
.................... 		displaypl(7,consumo_ati,10);
.................... 		displaypl(23,consumo_reati,10);
.................... 	#endif
.................... 	}
.................... 	void exibe_consumo_mes_ant(void)
.................... 	{
.................... 	if (exibiu == 0)
108CA:  BTFSC  29.6
108CC:  BRA    108F0
.................... 		{
.................... 		mensagem (1,140);
108CE:  MOVLW  01
108D0:  MOVLB  A
108D2:  MOVWF  x4D
108D4:  MOVLW  8C
108D6:  MOVWF  x4E
108D8:  MOVLB  0
108DA:  CALL   47E8
.................... 		mensagem (2,141);
108DE:  MOVLW  02
108E0:  MOVLB  A
108E2:  MOVWF  x4D
108E4:  MOVLW  8D
108E6:  MOVWF  x4E
108E8:  MOVLB  0
108EA:  CALL   47E8
.................... 		exibiu = 1;
108EE:  BSF    29.6
.................... 		}
.................... 	#if (com_tc == true)
.................... 		aux_f1 = read_long(ee_consumo_ati_ant);
108F0:  MOVLW  01
108F2:  MOVLB  A
108F4:  MOVWF  x7A
108F6:  MOVLW  0C
108F8:  MOVWF  x79
108FA:  MOVLB  0
108FC:  CALL   1A4E
10900:  MOVFF  03,A7C
10904:  MOVFF  02,A7B
10908:  MOVFF  01,A7A
1090C:  MOVFF  00,A79
10910:  CALL   5438
10914:  MOVFF  03,397
10918:  MOVFF  02,396
1091C:  MOVFF  01,395
10920:  MOVFF  00,394
.................... 		aux_l1 = (int32)(aux_f1 * mul_tc * valor_tp);
10924:  MOVFF  397,A80
10928:  MOVFF  396,A7F
1092C:  MOVFF  395,A7E
10930:  MOVFF  394,A7D
10934:  MOVFF  351,A84
10938:  MOVFF  350,A83
1093C:  MOVFF  34F,A82
10940:  MOVFF  34E,A81
10944:  CALL   5306
10948:  MOVFF  03,A4D
1094C:  MOVFF  02,A4C
10950:  MOVFF  01,A4B
10954:  MOVFF  00,A4A
10958:  MOVFF  4C2,A7E
1095C:  MOVFF  4C1,A7D
10960:  CALL   2924
10964:  MOVFF  A4D,A80
10968:  MOVFF  A4C,A7F
1096C:  MOVFF  A4B,A7E
10970:  MOVFF  A4A,A7D
10974:  MOVFF  03,A84
10978:  MOVFF  02,A83
1097C:  MOVFF  01,A82
10980:  MOVFF  00,A81
10984:  CALL   5306
10988:  MOVFF  03,A7C
1098C:  MOVFF  02,A7B
10990:  MOVFF  01,A7A
10994:  MOVFF  00,A79
10998:  CALL   5470
1099C:  MOVFF  03,373
109A0:  MOVFF  02,372
109A4:  MOVFF  01,371
109A8:  MOVFF  00,370
.................... 		displaypl(7,aux_l1,10);
109AC:  MOVLW  07
109AE:  MOVLB  A
109B0:  MOVWF  x4A
109B2:  MOVFF  373,A4E
109B6:  MOVFF  372,A4D
109BA:  MOVFF  371,A4C
109BE:  MOVFF  370,A4B
109C2:  MOVLW  0A
109C4:  MOVWF  x4F
109C6:  MOVLB  0
109C8:  CALL   AFBA
.................... 		aux_f1 = read_long(ee_consumo_reati_ant);
109CC:  MOVLW  01
109CE:  MOVLB  A
109D0:  MOVWF  x7A
109D2:  MOVLW  10
109D4:  MOVWF  x79
109D6:  MOVLB  0
109D8:  CALL   1A4E
109DC:  MOVFF  03,A7C
109E0:  MOVFF  02,A7B
109E4:  MOVFF  01,A7A
109E8:  MOVFF  00,A79
109EC:  CALL   5438
109F0:  MOVFF  03,397
109F4:  MOVFF  02,396
109F8:  MOVFF  01,395
109FC:  MOVFF  00,394
.................... 		aux_l1 = (int32)(aux_f1 * mul_tc * valor_tp);
10A00:  MOVFF  397,A80
10A04:  MOVFF  396,A7F
10A08:  MOVFF  395,A7E
10A0C:  MOVFF  394,A7D
10A10:  MOVFF  351,A84
10A14:  MOVFF  350,A83
10A18:  MOVFF  34F,A82
10A1C:  MOVFF  34E,A81
10A20:  CALL   5306
10A24:  MOVFF  03,A4D
10A28:  MOVFF  02,A4C
10A2C:  MOVFF  01,A4B
10A30:  MOVFF  00,A4A
10A34:  MOVFF  4C2,A7E
10A38:  MOVFF  4C1,A7D
10A3C:  CALL   2924
10A40:  MOVFF  A4D,A80
10A44:  MOVFF  A4C,A7F
10A48:  MOVFF  A4B,A7E
10A4C:  MOVFF  A4A,A7D
10A50:  MOVFF  03,A84
10A54:  MOVFF  02,A83
10A58:  MOVFF  01,A82
10A5C:  MOVFF  00,A81
10A60:  CALL   5306
10A64:  MOVFF  03,A7C
10A68:  MOVFF  02,A7B
10A6C:  MOVFF  01,A7A
10A70:  MOVFF  00,A79
10A74:  CALL   5470
10A78:  MOVFF  03,373
10A7C:  MOVFF  02,372
10A80:  MOVFF  01,371
10A84:  MOVFF  00,370
.................... 		displaypl(23,aux_l1,10);
10A88:  MOVLW  17
10A8A:  MOVLB  A
10A8C:  MOVWF  x4A
10A8E:  MOVFF  373,A4E
10A92:  MOVFF  372,A4D
10A96:  MOVFF  371,A4C
10A9A:  MOVFF  370,A4B
10A9E:  MOVLW  0A
10AA0:  MOVWF  x4F
10AA2:  MOVLB  0
10AA4:  CALL   AFBA
.................... 	#endif
.................... 	#if (com_rep == true)
10AA8:  GOTO   10C2A (RETURN)
.................... 		displaypl(7,read_long(ee_consumo_ati_ant),10);
.................... 		displaypl(23,read_long(ee_consumo_reati_ant),10);
.................... 	#endif
.................... 	}
.................... 	#if (com_rep == true)
.................... 		void exibe_status_rep_pul_ant(void)
.................... 		{
.................... 			if (exibiu == 0)
.................... 				{
.................... 				mensagem (1,147);
.................... 				mensagem (2,148);
.................... 				exibiu = 1;
.................... 				}
.................... 			displayp(12, ultimo_pulso_at,5,0,0);
.................... 			displayp(28, ultimo_pulso_reat,5,0,0);
.................... 			}
.................... 		void exibe_status_rep_pot_ant(void)
.................... 			{
.................... 			if (exibiu == 0)
.................... 				{
.................... 				mensagem (1,151);
.................... 				mensagem (2,152);
.................... 				exibiu = 1;
.................... 				}
.................... 	//				print_display(10,ultima_pot_at,4,2,5,'C', 255);
.................... 	//				print_display(26,ultima_pot_reat,4,2,5,'C', 255);
.................... 	
.................... 			displayp(12,ultima_pot_at,5,0,0);
.................... 			displayp(28,ultima_pot_reat,5,0,0);
.................... 			}
.................... 	#endif
.................... 		
.................... 	void exibe_demanda_ativa(void)
.................... 		{
.................... 		if (exibiu == 0)
*
0FEFC:  BTFSC  29.6
0FEFE:  BRA    FF22
.................... 			{
.................... 			mensagem(1,47);
0FF00:  MOVLW  01
0FF02:  MOVLB  A
0FF04:  MOVWF  x4D
0FF06:  MOVLW  2F
0FF08:  MOVWF  x4E
0FF0A:  MOVLB  0
0FF0C:  CALL   47E8
.................... 			mensagem(2,48);
0FF10:  MOVLW  02
0FF12:  MOVLB  A
0FF14:  MOVWF  x4D
0FF16:  MOVLW  30
0FF18:  MOVWF  x4E
0FF1A:  MOVLB  0
0FF1C:  CALL   47E8
.................... 			exibiu = 1;
0FF20:  BSF    29.6
.................... 			}
.................... 		#if (com_tc == true)
.................... 			aux_wexibe1 = dem_media_ativa;
0FF22:  MOVFF  265,369
0FF26:  MOVFF  264,368
.................... 			aux_wexibe2 = dem_ativa_proj;
0FF2A:  MOVFF  27F,36B
0FF2E:  MOVFF  27E,36A
.................... 			if (valor_tc != 1)
0FF32:  MOVLB  4
0FF34:  DECFSZ xBF,W
0FF36:  BRA    FF3C
0FF38:  MOVF   xC0,F
0FF3A:  BZ    FF78
.................... 				{
.................... 				aux_wexibe1 = aux_wexibe1 * valor_tp;
0FF3C:  MOVFF  369,A67
0FF40:  MOVFF  368,A66
0FF44:  MOVFF  4C2,A69
0FF48:  MOVFF  4C1,A68
0FF4C:  MOVLB  0
0FF4E:  CALL   473C
0FF52:  MOVFF  02,369
0FF56:  MOVFF  01,368
.................... 				aux_wexibe2 = aux_wexibe2 * valor_tp;
0FF5A:  MOVFF  36B,A67
0FF5E:  MOVFF  36A,A66
0FF62:  MOVFF  4C2,A69
0FF66:  MOVFF  4C1,A68
0FF6A:  CALL   473C
0FF6E:  MOVFF  02,36B
0FF72:  MOVFF  01,36A
0FF76:  MOVLB  4
.................... 				}
.................... 			print_display(12,aux_wexibe1,5,0,0,'C', 255);
0FF78:  MOVLW  0C
0FF7A:  MOVLB  A
0FF7C:  MOVWF  x4C
0FF7E:  MOVFF  369,A4E
0FF82:  MOVFF  368,A4D
0FF86:  MOVLW  05
0FF88:  MOVWF  x4F
0FF8A:  CLRF   x50
0FF8C:  CLRF   x51
0FF8E:  MOVLW  43
0FF90:  MOVWF  x52
0FF92:  SETF   x53
0FF94:  MOVLB  0
0FF96:  CALL   EB54
.................... 			print_display(28,aux_wexibe2,5,0,0,'C', 255);
0FF9A:  MOVLW  1C
0FF9C:  MOVLB  A
0FF9E:  MOVWF  x4C
0FFA0:  MOVFF  36B,A4E
0FFA4:  MOVFF  36A,A4D
0FFA8:  MOVLW  05
0FFAA:  MOVWF  x4F
0FFAC:  CLRF   x50
0FFAE:  CLRF   x51
0FFB0:  MOVLW  43
0FFB2:  MOVWF  x52
0FFB4:  SETF   x53
0FFB6:  MOVLB  0
0FFB8:  CALL   EB54
.................... 		#else
0FFBC:  GOTO   10C2A (RETURN)
.................... 			displayp(12,dem_ativa,5,0,0);
.................... 			displayp(28,dem_ativa_proj,5,0,0);
.................... 		#endif
.................... 			
.................... 		}
.................... 	void exibe_demanda_reativa(void){
.................... 		if (exibiu == 0){
*
105CE:  BTFSC  29.6
105D0:  BRA    105F4
.................... 			mensagem(1,54);
105D2:  MOVLW  01
105D4:  MOVLB  A
105D6:  MOVWF  x4D
105D8:  MOVLW  36
105DA:  MOVWF  x4E
105DC:  MOVLB  0
105DE:  CALL   47E8
.................... 			mensagem(2,55);
105E2:  MOVLW  02
105E4:  MOVLB  A
105E6:  MOVWF  x4D
105E8:  MOVLW  37
105EA:  MOVWF  x4E
105EC:  MOVLB  0
105EE:  CALL   47E8
.................... 			exibiu = 1;
105F2:  BSF    29.6
.................... 		}
.................... 		#if (com_tc == true)
.................... 			aux_wexibe1 = dem_media_reativa;
105F4:  MOVFF  269,369
105F8:  MOVFF  268,368
.................... 			aux_wexibe2 = dem_reativa_proj;
105FC:  MOVFF  281,36B
10600:  MOVFF  280,36A
.................... 			if (valor_tc != 1)
10604:  MOVLB  4
10606:  DECFSZ xBF,W
10608:  BRA    1060E
1060A:  MOVF   xC0,F
1060C:  BZ    1064A
.................... 				{
.................... 				aux_wexibe1 = aux_wexibe1 * valor_tp;
1060E:  MOVFF  369,A67
10612:  MOVFF  368,A66
10616:  MOVFF  4C2,A69
1061A:  MOVFF  4C1,A68
1061E:  MOVLB  0
10620:  CALL   473C
10624:  MOVFF  02,369
10628:  MOVFF  01,368
.................... 				aux_wexibe2 = aux_wexibe2 * valor_tp;
1062C:  MOVFF  36B,A67
10630:  MOVFF  36A,A66
10634:  MOVFF  4C2,A69
10638:  MOVFF  4C1,A68
1063C:  CALL   473C
10640:  MOVFF  02,36B
10644:  MOVFF  01,36A
10648:  MOVLB  4
.................... 				}
.................... 			print_display(12,aux_wexibe1,5,0,0,'C', 255);
1064A:  MOVLW  0C
1064C:  MOVLB  A
1064E:  MOVWF  x4C
10650:  MOVFF  369,A4E
10654:  MOVFF  368,A4D
10658:  MOVLW  05
1065A:  MOVWF  x4F
1065C:  CLRF   x50
1065E:  CLRF   x51
10660:  MOVLW  43
10662:  MOVWF  x52
10664:  SETF   x53
10666:  MOVLB  0
10668:  CALL   EB54
.................... 			print_display(28,aux_wexibe2,5,0,0,'C', 255);
1066C:  MOVLW  1C
1066E:  MOVLB  A
10670:  MOVWF  x4C
10672:  MOVFF  36B,A4E
10676:  MOVFF  36A,A4D
1067A:  MOVLW  05
1067C:  MOVWF  x4F
1067E:  CLRF   x50
10680:  CLRF   x51
10682:  MOVLW  43
10684:  MOVWF  x52
10686:  SETF   x53
10688:  MOVLB  0
1068A:  CALL   EB54
.................... 		#else
1068E:  GOTO   10C2A (RETURN)
.................... 			displayp(12,dem_reativa,5,0,0);
.................... 			displayp(28,dem_reativa_proj,5,0,0);
.................... 		#endif
.................... 	}
.................... 	void exibe_fator_carga_demanda(void)
.................... 		{
.................... 		if (exibiu == 0)
10692:  BTFSC  29.6
10694:  BRA    106B8
.................... 			{
.................... 			mensagem(1,29);
10696:  MOVLW  01
10698:  MOVLB  A
1069A:  MOVWF  x4D
1069C:  MOVLW  1D
1069E:  MOVWF  x4E
106A0:  MOVLB  0
106A2:  CALL   47E8
.................... 			mensagem(2,30);
106A6:  MOVLW  02
106A8:  MOVLB  A
106AA:  MOVWF  x4D
106AC:  MOVLW  1E
106AE:  MOVWF  x4E
106B0:  MOVLB  0
106B2:  CALL   47E8
.................... 			exibiu = 1;
106B6:  BSF    29.6
.................... 			}
.................... //		print_display(12,fator_carga,1,3,10,'C', 255);
.................... //		print_display(28,fator_demanda,1,3,10,'C', 255);
.................... 		print_display(10,fator_carga,3,1,6,'C', 255);
106B8:  MOVLW  0A
106BA:  MOVLB  A
106BC:  MOVWF  x4C
106BE:  MOVFF  283,A4E
106C2:  MOVFF  282,A4D
106C6:  MOVLW  03
106C8:  MOVWF  x4F
106CA:  MOVLW  01
106CC:  MOVWF  x50
106CE:  MOVLW  06
106D0:  MOVWF  x51
106D2:  MOVLW  43
106D4:  MOVWF  x52
106D6:  SETF   x53
106D8:  MOVLB  0
106DA:  CALL   EB54
.................... 		print_display(26,fator_demanda,3,1,6,'C', 255);
106DE:  MOVLW  1A
106E0:  MOVLB  A
106E2:  MOVWF  x4C
106E4:  MOVFF  285,A4E
106E8:  MOVFF  284,A4D
106EC:  MOVLW  03
106EE:  MOVWF  x4F
106F0:  MOVLW  01
106F2:  MOVWF  x50
106F4:  MOVLW  06
106F6:  MOVWF  x51
106F8:  MOVLW  43
106FA:  MOVWF  x52
106FC:  SETF   x53
106FE:  MOVLB  0
10700:  CALL   EB54
10704:  GOTO   10C2A (RETURN)
.................... 		}
.................... 
.................... 	void exibe_set_point_demanda(void)
.................... 		{
.................... 		if (exibiu == 0)
*
1056C:  BTFSC  29.6
1056E:  BRA    10592
.................... 			{
.................... 			mensagem(1,17);
10570:  MOVLW  01
10572:  MOVLB  A
10574:  MOVWF  x4D
10576:  MOVLW  11
10578:  MOVWF  x4E
1057A:  MOVLB  0
1057C:  CALL   47E8
.................... 			mensagem(2,22);
10580:  MOVLW  02
10582:  MOVLB  A
10584:  MOVWF  x4D
10586:  MOVLW  16
10588:  MOVWF  x4E
1058A:  MOVLB  0
1058C:  CALL   47E8
.................... 			exibiu = 1;
10590:  BSF    29.6
.................... 			}
.................... 		displayp(11,dem_contratada,4,0,0);
10592:  MOVLW  0B
10594:  MOVLB  A
10596:  MOVWF  x4E
10598:  MOVFF  27B,A50
1059C:  MOVFF  27A,A4F
105A0:  MOVLW  04
105A2:  MOVWF  x51
105A4:  CLRF   x52
105A6:  CLRF   x53
105A8:  MOVLB  0
105AA:  CALL   5038
.................... 		displayp(27,dem_acionada,4,0,0);
105AE:  MOVLW  1B
105B0:  MOVLB  A
105B2:  MOVWF  x4E
105B4:  MOVFF  27D,A50
105B8:  MOVFF  27C,A4F
105BC:  MOVLW  04
105BE:  MOVWF  x51
105C0:  CLRF   x52
105C2:  CLRF   x53
105C4:  MOVLB  0
105C6:  CALL   5038
105CA:  GOTO   10C2A (RETURN)
.................... 		}
.................... #endif
.................... 
.................... 
.................... #if (st8500c == true)
.................... 
.................... 	#define nro_medidas	17
.................... 	const char tabela_msg_medidas[nro_medidas]={
.................... 												26,			//0		
.................... 												28,			//1
.................... 												27,			//2
.................... 												31,			//3
.................... 												32,			//4
.................... 												47,			//5
.................... 												48,			//6
.................... 												54,			//7
.................... 												55,			//8
.................... 												29,			//9
.................... 												30,			//10
.................... 												144,		//11
.................... 												145,		//12
.................... 												147,		//13
.................... 												148,		//14
.................... 												151,		//15
.................... 												152			//16
.................... 												};									 
.................... 												
.................... 
.................... 	void rola_medidas(void)
.................... 		{
.................... 		char aux_tab;
.................... 		aux_tab = menu_aux - 6; 
.................... 		if (exibiu == 0)
.................... 			{
.................... 			mensagem(1,tabela_msg_medidas[aux_tab]);
.................... 			mensagem(2,tabela_msg_medidas[aux_tab+1]);
.................... 			exibiu = 1;
.................... 			}
.................... 		switch(aux_tab)
.................... 			{
.................... 			case 0:
.................... 				{
.................... 				print_display(10,pot_ativa_tot,4,1,5,'C', 255);
.................... 				print_display(26,pot_reativa_tot,4,1,5,'C', 255);
.................... 				break;
.................... 				}
.................... 			case 1:
.................... 				{
.................... 				print_display(10,pot_reativa_tot,4,1,5,'C', 255);
.................... 				print_display(26,pot_aparente_tot,4,1,5,'C', 255);
.................... 				break;
.................... 				}
.................... 			case 2:
.................... 				{
.................... 				print_display(10,pot_aparente_tot,4,1,5,'C', 255);
.................... 				aux_l1 = pot_req_r;
.................... 				aux_l1 = aux_l1 + pot_req_s + pot_req_t;
.................... 				print_display(27,aux_l1,4,1,5,'C', 255);
.................... 				break;
.................... 				}
.................... 			case 3:
.................... 				{
.................... 				aux_l1 = pot_req_r;
.................... 				aux_l1 = aux_l1 + pot_req_s + pot_req_t;
.................... 				print_display(11,aux_l1,4,1,5,'C', 255);
.................... 				aux_l1 = pot_exec_r;
.................... 				aux_l1 = aux_l1 + pot_exec_s + pot_exec_t;
.................... 				print_display(27,aux_l1,4,1,5,'C', 255);
.................... 				break;
.................... 				}
.................... 			case 4:
.................... 				{
.................... 				aux_l1 = pot_exec_r;
.................... 				aux_l1 = aux_l1 + pot_exec_s + pot_exec_t;
.................... 				print_display(11,aux_l1,4,1,5,'C', 255);
.................... 				displayp(28,dem_ativa,4,0,0);
.................... 				break;	
.................... 				}
.................... 			case 5:
.................... 				{
.................... 				displayp(12,dem_ativa,4,0,0);
.................... 				displayp(28,dem_ativa_proj,4,0,0);
.................... 				break;
.................... 				}
.................... 			case 6:
.................... 				{
.................... 				displayp(12,dem_ativa_proj,4,0,0);
.................... 				displayp(28,dem_reativa,4,0,0);
.................... 				break;
.................... 				}
.................... 			case 7:
.................... 				{
.................... 				displayp(12,dem_reativa,4,0,0);
.................... 				displayp(28,dem_reativa_proj,4,0,0);
.................... 				break;
.................... 				}
.................... 			case 8:
.................... 				{
.................... 				displayp(12,dem_reativa_proj,4,0,0);
.................... 				displayp(28,fator_carga,3,0,0);
.................... 				break;
.................... 				}
.................... 			case 9:
.................... 				{
.................... 				displayp(12,fator_carga,3,0,0);
.................... 				displayp(28,fator_demanda,3,0,0);
.................... 				break;
.................... 				}
.................... 			case 10:
.................... 				{
.................... 				#if (com_rep == true)
.................... 					displayp(12,fator_demanda,3,0,0);
.................... 					lcd_gotoxy(5,2);
.................... 					if (tarif_cap_rep == 1)
.................... 						{
.................... 					    wr_lcd(1,'C');
.................... 						}
.................... 					else
.................... 						{
.................... 					    wr_lcd(1,'I');
.................... 						}
.................... 					displayp (30,seg_falt_rep,3,0,0);
.................... 					break;					
.................... 				#endif
....................                     break;
.................... 				}
.................... 			case 11:
.................... 				{
.................... 				#if (com_rep == true)
.................... 		//		  	  01234567890123456
.................... 		//		  	  67890123456789012
.................... 		//			 "Tar:   Tempo:   ",	//144
.................... 		//			 "P:      /       "		//145
.................... 					lcd_gotoxy(5,1);
.................... 					if (tarif_cap_rep == 1)
.................... 						{
.................... 					    wr_lcd(1,'C');
.................... 						}
.................... 					else
.................... 						{
.................... 					    wr_lcd(1,'I');
.................... 						}
.................... 					displayp(14,seg_falt_rep,3,0,0);
.................... 					displayp(19,puls_c1_rep,5,0,0);
.................... 					displayp(27,puls_c2_rep,5,0,0);
.................... 					break;
.................... 				#endif
....................                     break;
.................... 				}
.................... 			case 12:
.................... 				{
.................... 				#if (com_rep == true)
.................... 					displayp(3,puls_c1_rep,5,0,0);
.................... 					displayp(11,puls_c2_rep,5,0,0);
.................... 					displayp(28, ultimo_pulso_at,5,0,0);
.................... 					break;
.................... 				#endif
....................                     break;
.................... 				}
.................... 			case 13:
.................... 				{
.................... 				#if (com_rep == true)
.................... 					displayp(12, ultimo_pulso_at,5,0,0);
.................... 					displayp(28, ultimo_pulso_reat,5,0,0);
.................... 					break;
.................... 				#endif
....................                     break;
.................... 				}
.................... 			case 14:
.................... 				{
.................... 				#if (com_rep == true)
.................... 					displayp(12, ultimo_pulso_reat,5,0,0);
.................... 					print_display(26,ultima_pot_at,4,2,5,'C', 255);
.................... 					break;
.................... 				#endif
....................                     break;
.................... 				}
.................... 			case 15:
.................... 				{
.................... 				#if (com_rep == true)
.................... 					print_display(10,ultima_pot_at,4,2,5,'C', 255);
.................... 					print_display(26,ultima_pot_reat,4,2,5,'C', 255);
.................... 					break;					
.................... 				#endif
.................... 				}
.................... 			}
.................... 		}
.................... 		
.................... #endif
.................... 
.................... 	
.................... #include "st8x00_men1.c"
.................... //***********************************************************************
.................... // Empresa: Sultech Sistemas Eletrônicos								*
.................... // Modulo: Menu Medidas Elétricas										*
.................... // Função: Exibir as Grandezas Medidas									*
.................... // Responsável: Edison Valério Nunes Junior								*
.................... // Inicio: 30/08/2000													*
.................... //***********************************************************************
.................... 
.................... void trata_menu1(void){
.................... 	if (qmenu != 1){		
*
10AAC:  DECFSZ 3A,W
10AAE:  BRA    10AB2
10AB0:  BRA    10AD6
.................... 		qmenu = 1;
10AB2:  MOVLW  01
10AB4:  MOVWF  3A
.................... 		exibiu = 0;
10AB6:  BCF    29.6
.................... 		menu_aux = 1;
10AB8:  MOVWF  36
.................... 		time_out_menus = 60;
10ABA:  MOVLW  3C
10ABC:  MOVWF  31
.................... 		salva_menus();
10ABE:  CALL   E6BE
.................... 		calcula_mul_tc();
10AC2:  CALL   2AB8
.................... 		reset_rolar();
10AC6:  CALL   E704
.................... 		limpa_display();
10ACA:  CALL   1A2A
.................... 		aux_menu1 = 0;
10ACE:  MOVLB  8
10AD0:  CLRF   x9C
.................... 	}
10AD2:  BRA    10B5E
10AD4:  MOVLB  0
.................... 	else if (tecla_up){
10AD6:  BTFSS  2A.5
10AD8:  BRA    10AF8
.................... 		aux_menu1 = 0;
10ADA:  MOVLB  8
10ADC:  CLRF   x9C
.................... 		exibir_menu = 1;
10ADE:  BSF    2B.6
.................... 		exibiu = 0;
10AE0:  BCF    29.6
.................... 		MENU_FIXO = 0;
10AE2:  BCF    26.6
.................... 	 	if (menu_aux > 1){
10AE4:  MOVF   36,W
10AE6:  SUBLW  01
10AE8:  BC    10AF4
.................... 	 		menu_aux--;
10AEA:  DECF   36,F
.................... 			reset_rolar();
10AEC:  MOVLB  0
10AEE:  CALL   E704
10AF2:  MOVLB  8
.................... 	 	}
.................... 	}
10AF4:  BRA    10B5E
10AF6:  MOVLB  0
.................... 	else if (tecla_down){
10AF8:  BTFSS  2A.6
10AFA:  BRA    10B1A
.................... 		aux_menu1 = 0;
10AFC:  MOVLB  8
10AFE:  CLRF   x9C
.................... 		exibir_menu = 1;
10B00:  BSF    2B.6
.................... 		exibiu = 0;
10B02:  BCF    29.6
.................... 		MENU_FIXO = 0;
10B04:  BCF    26.6
.................... 		 if (menu_aux < nro_menus1){
10B06:  MOVF   36,W
10B08:  SUBLW  0C
10B0A:  BNC   10B16
.................... 	 		menu_aux++;
10B0C:  INCF   36,F
.................... 			reset_rolar();
10B0E:  MOVLB  0
10B10:  CALL   E704
10B14:  MOVLB  8
....................  		}
.................... 	}
10B16:  BRA    10B5E
10B18:  MOVLB  0
.................... 	else if (tecla_enter){
10B1A:  BTFSS  2B.0
10B1C:  BRA    10B40
.................... 	 	tecla_enter = 0;
10B1E:  BCF    2B.0
.................... 		exibiu = 0;
10B20:  BCF    29.6
.................... 		MENU_FIXO = 1;
10B22:  BSF    26.6
.................... 		salva_menus();
10B24:  CALL   E6BE
.................... 		exibir_menu = 1;
10B28:  BSF    2B.6
.................... 		rolando = false;
10B2A:  BCF    2C.0
.................... 		ja_rolou = true;
10B2C:  BSF    2C.1
....................  		if (aux_menu1 == 0){
10B2E:  MOVLB  8
10B30:  MOVF   x9C,F
10B32:  BNZ   10B3A
....................  			aux_menu1 = 1;
10B34:  MOVLW  01
10B36:  MOVWF  x9C
....................  		}
10B38:  BRA    10B3C
....................  		else{
....................  			aux_menu1 = 0;
10B3A:  CLRF   x9C
....................  		}
.................... 	}		
10B3C:  BRA    10B5E
10B3E:  MOVLB  0
.................... 	else if (tecla_reset){
10B40:  BTFSS  2B.1
10B42:  BRA    10B5C
.................... 		menu_aux = 0;
10B44:  CLRF   36
.................... 		reset_rolar();
10B46:  CALL   E704
.................... 		tecla_reset = 0;
10B4A:  BCF    2B.1
.................... 		qmenu = 0;
10B4C:  CLRF   3A
.................... 		MENU_FIXO = 0;
10B4E:  BCF    26.6
.................... 		salva_menus();
10B50:  CALL   E6BE
.................... 		menu1 = 1;
10B54:  MOVLW  01
10B56:  MOVWF  35
.................... 		exibe_menu();
10B58:  CALL   E70A
10B5C:  MOVLB  8
.................... 	}
.................... 
.................... re_exibe_medidas:
.................... 	if (exibir_menu == 1){
10B5E:  BTFSS  2B.6
10B60:  BRA    10C2A
.................... 		exibir_menu = 0;
10B62:  BCF    2B.6
.................... 		piscar = ~piscar;
10B64:  BTG    29.7
.................... 		modo_rep = 1;
10B66:  MOVLW  01
10B68:  MOVLB  4
10B6A:  MOVWF  xC8
.................... 		switch(menu_aux){
10B6C:  MOVF   36,W
10B6E:  XORLW  00
10B70:  MOVLB  0
10B72:  BZ    10BB6
10B74:  XORLW  01
10B76:  BZ    10BB6
10B78:  XORLW  03
10B7A:  BZ    10BBC
10B7C:  XORLW  01
10B7E:  BZ    10BE4
10B80:  XORLW  07
10B82:  BZ    10BEA
10B84:  XORLW  01
10B86:  BZ    10BF0
10B88:  XORLW  03
10B8A:  BZ    10BF6
10B8C:  XORLW  01
10B8E:  BZ    10BFC
10B90:  XORLW  0F
10B92:  BZ    10C00
10B94:  XORLW  01
10B96:  BZ    10C06
10B98:  XORLW  03
10B9A:  BZ    10C0A
10B9C:  XORLW  01
10B9E:  BZ    10C0E
10BA0:  XORLW  07
10BA2:  BZ    10C12
10BA4:  XORLW  01
10BA6:  BZ    10C14
10BA8:  XORLW  03
10BAA:  BZ    10C16
10BAC:  XORLW  01
10BAE:  BZ    10C18
10BB0:  XORLW  1F
10BB2:  BZ    10C1C
10BB4:  BRA    10C20
.................... 	 		case 0:
.................... 	 		case 1:{
....................  				exibe_tensao_fn();
10BB6:  GOTO   F694
.................... 				break;
10BBA:  BRA    10C2A
.................... 			}
.................... 	 		case 2:{
.................... 	 			if (valor_tp != 1){
10BBC:  MOVLB  4
10BBE:  DECFSZ xC1,W
10BC0:  BRA    10BC6
10BC2:  MOVF   xC2,F
10BC4:  BZ    10BD2
.................... 	 				exibe_tensao_alta();
10BC6:  MOVLB  0
10BC8:  GOTO   F760
.................... 					break;
10BCC:  BRA    10C2A
.................... 				}
10BCE:  BRA    10BE4
10BD0:  MOVLB  4
.................... 				else{
.................... 					exibiu = 0;
10BD2:  BCF    29.6
.................... 					if (tecla_up){
10BD4:  BTFSS  2A.5
10BD6:  BRA    10BDA
.................... 						menu_aux--;
10BD8:  DECF   36,F
.................... 					}
.................... 					if (tecla_down){
10BDA:  BTFSS  2A.6
10BDC:  BRA    10BE0
.................... 						menu_aux++;
10BDE:  INCF   36,F
.................... 					}
.................... 					break;
10BE0:  MOVLB  0
10BE2:  BRA    10C2A
.................... 				}
.................... 			}
.................... 	 		case 3:{
.................... 				exibe_corrente();
10BE4:  GOTO   F85C
.................... 				break;
10BE8:  BRA    10C2A
.................... 			}
.................... 	 		case 4:{
.................... 				exibe_frequencia();
10BEA:  GOTO   F928
.................... 				break;
10BEE:  BRA    10C2A
.................... 			}
.................... 	 	    case 5:{
.................... 	 			exibe_kw_kvar();
10BF0:  GOTO   F978
.................... 				break;
10BF4:  BRA    10C2A
.................... 			}
.................... 			case 6:{
.................... 				exibe_fp_kva();
10BF6:  GOTO   FE66
.................... 				break;
10BFA:  BRA    10C2A
.................... 			}
.................... 	 		case 7:{
.................... 	 			exibe_pot_requerida_excedente();
10BFC:  BRA    1041E
.................... 				break;
10BFE:  BRA    10C2A
.................... 			}
.................... 			case 8:{
.................... 				exibe_demanda_ativa();
10C00:  GOTO   FEFC
.................... 				break;
10C04:  BRA    10C2A
.................... 			}
.................... 			case 9:{
.................... 				exibe_set_point_demanda();
10C06:  BRA    1056C
.................... 				break;
10C08:  BRA    10C2A
.................... 			}
.................... 			case 10:{
.................... 				exibe_demanda_reativa();
10C0A:  BRA    105CE
.................... 				break;
10C0C:  BRA    10C2A
.................... 			}
.................... 			case 11:{
.................... 				exibe_fator_carga_demanda();
10C0E:  BRA    10692
.................... 				break;
10C10:  BRA    10C2A
.................... 			}
.................... 			case 12:{
.................... 				#if (com_rep == true)						
.................... 					exibe_status_rep();
.................... 					break;
.................... 				#endif
....................                     break;
10C12:  BRA    10C2A
.................... 			}
.................... 			case 13:{
.................... 				#if (com_rep == true)						
.................... 					exibe_status_rep_pul_ant();
.................... 					break;
.................... 				#endif
....................                     break;
10C14:  BRA    10C2A
.................... 			}
.................... 			case 14:{
.................... 				#if (com_rep == true)						
.................... 					exibe_status_rep_pot_ant();
.................... 					break;
.................... 				#endif
....................                     break;
10C16:  BRA    10C2A
.................... 			}
.................... 			case 15:{
.................... 				exibe_consumo();
10C18:  BRA    10708
.................... 				break;
10C1A:  BRA    10C2A
.................... 			}
.................... 			case 16:{
.................... 				exibe_consumo_mes_ant();
10C1C:  BRA    108CA
.................... 				break;
10C1E:  BRA    10C2A
.................... 			}
.................... 	 		default:{
.................... 				menu_aux = 1;
10C20:  MOVLW  01
10C22:  MOVWF  36
.................... 				goto re_exibe_medidas;
10C24:  MOVLB  8
10C26:  BRA    10B5E
10C28:  MOVLB  0
.................... 			}
.................... 		}
.................... 	}
.................... 	tecla_up = 0;
10C2A:  BCF    2A.5
....................    	tecla_down = 0;
10C2C:  BCF    2A.6
10C2E:  MOVLB  0
10C30:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... #if (com_cht == true)
.................... 	#include "st8x00_men2.c"
.................... #endif
.................... 
.................... 
.................... #if ((ST8200C == true) || (st8300c == true))
.................... 	#include "exibe_sequencia.c"
.................... #endif
.................... 
.................... 
.................... #include "st8x00_men4.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610_MEN4                                                    *
.................... ; Funcao: TRATAMENTO DO MENU DE PROGRAMAÇAO GERAL						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... void le_programa_st8500c(void){
.................... 	char x;
.................... 	tabela_programa[1] = dem_cont_ponta[mes - 1];
10C32:  MOVLW  01
10C34:  MOVLB  3
10C36:  SUBWF  xC0,W
10C38:  MOVWF  00
10C3A:  BCF    FD8.0
10C3C:  RLCF   00,F
10C3E:  MOVF   00,W
10C40:  CLRF   03
10C42:  ADDLW  DB
10C44:  MOVWF  FE9
10C46:  MOVLW  04
10C48:  ADDWFC 03,W
10C4A:  MOVWF  FEA
10C4C:  MOVFF  FEC,1DA
10C50:  MOVF   FED,F
10C52:  MOVFF  FEF,1D9
.................... 	tabela_programa[2] = dem_cont_fora_ponta[mes - 1];
10C56:  MOVLW  01
10C58:  SUBWF  xC0,W
10C5A:  MOVWF  00
10C5C:  BCF    FD8.0
10C5E:  RLCF   00,F
10C60:  MOVF   00,W
10C62:  CLRF   03
10C64:  ADDLW  F5
10C66:  MOVWF  FE9
10C68:  MOVLW  04
10C6A:  ADDWFC 03,W
10C6C:  MOVWF  FEA
10C6E:  MOVFF  FEC,1DC
10C72:  MOVF   FED,F
10C74:  MOVFF  FEF,1DB
.................... 	tabela_programa[3] = carga_programada;
10C78:  MOVFF  510,1DE
10C7C:  MOVFF  50F,1DD
.................... 	tabela_programa[4] = dia_inicio_pc;
10C80:  MOVLB  1
10C82:  CLRF   xE0
10C84:  MOVFF  511,1DF
.................... 	tabela_programa[5] = mes_inicio_pc;
10C88:  CLRF   xE2
10C8A:  MOVFF  512,1E1
.................... 	tabela_programa[6] = dia_final_pc;
10C8E:  CLRF   xE4
10C90:  MOVFF  513,1E3
.................... 	tabela_programa[7] = mes_final_pc;
10C94:  CLRF   xE6
10C96:  MOVFF  514,1E5
.................... 	tabela_programa[8] = hora_ponta;
10C9A:  CLRF   xE8
10C9C:  MOVFF  515,1E7
.................... 	tabela_programa[9] = minuto_ponta;
10CA0:  CLRF   xEA
10CA2:  MOVFF  516,1E9
.................... 	tabela_programa[10] = hora_final_ponta;
10CA6:  CLRF   xEC
10CA8:  MOVFF  517,1EB
.................... 	tabela_programa[11] = minuto_final_ponta;
10CAC:  CLRF   xEE
10CAE:  MOVFF  518,1ED
.................... 	#if (com_rep == true)
.................... 		tabela_programa[12] = fat_conv_ativa;
.................... 		tabela_programa[13] = fat_conv_reativa;
.................... 	#endif
.................... 	#if (com_tc == true)
.................... 		tabela_programa[12] = valor_tc;
10CB2:  MOVFF  4C0,1F0
10CB6:  MOVFF  4BF,1EF
.................... 		tabela_programa[13] = valor_tp;
10CBA:  MOVFF  4C2,1F2
10CBE:  MOVFF  4C1,1F1
.................... 	#endif
.................... 	tabela_programa[14] = endereco;
10CC2:  CLRF   xF4
10CC4:  MOVFF  4CE,1F3
.................... 	tabela_programa[15] = 0;
10CC8:  CLRF   xF6
10CCA:  CLRF   xF5
.................... 	for (x = 0; x < (NRO_POSI_BAUD); x++){
10CCC:  MOVLB  A
10CCE:  CLRF   x4B
10CD0:  MOVF   x4B,W
10CD2:  SUBLW  05
10CD4:  BNC   10D04
.................... 		if (baud_rate == tabela_baud[x]){
10CD6:  BCF    FD8.0
10CD8:  RLCF   x4B,W
10CDA:  CLRF   03
10CDC:  MOVLB  0
10CDE:  CALL   0108
10CE2:  TBLRD*+
10CE4:  MOVFF  FF5,03
10CE8:  MOVLB  4
10CEA:  SUBWF  xC3,W
10CEC:  BNZ   10CFE
10CEE:  MOVF   03,W
10CF0:  SUBWF  xC4,W
10CF2:  BNZ   10CFE
.................... 			tabela_programa[15] = x;
10CF4:  MOVLB  1
10CF6:  CLRF   xF6
10CF8:  MOVFF  A4B,1F5
10CFC:  MOVLB  4
.................... 		}
10CFE:  MOVLB  A
10D00:  INCF   x4B,F
10D02:  BRA    10CD0
.................... 	}
.................... 	aux_tab = mes - 1;
10D04:  MOVLW  01
10D06:  MOVLB  3
10D08:  SUBWF  xC0,W
10D0A:  MOVLB  0
10D0C:  MOVWF  x80
.................... 	tabela_programa[16] = modo_saidas;
10D0E:  MOVLB  1
10D10:  CLRF   xF8
10D12:  MOVFF  6C,1F7
.................... 	#if(com_rep)
10D16:  MOVLB  0
10D18:  RETURN 0
.................... 		tabela_programa[17] = protocolo_REP;
.................... 	#endif
.................... }
.................... 	
.................... void trata_up4_st8500c(void){
.................... 	switch(menu_aux){
10D1A:  MOVLW  01
10D1C:  SUBWF  36,W
10D1E:  ADDLW  EF
10D20:  BTFSC  FD8.0
10D22:  BRA    10F18
10D24:  ADDLW  11
10D26:  GOTO   10F1C
.................... 		case 1:										//demanda contratada ponta
.................... 		case 2:										//demanda contratada fora ponta
.................... 		case 3:{									// carga instalada
.................... 			if (tabela_programa[menu_aux] < CARGA_INSTALADA_MAX){
10D2A:  BCF    FD8.0
10D2C:  RLCF   36,W
10D2E:  CLRF   03
10D30:  ADDLW  D7
10D32:  MOVWF  FE9
10D34:  MOVLW  01
10D36:  ADDWFC 03,W
10D38:  MOVWF  FEA
10D3A:  MOVFF  FEC,A4C
10D3E:  MOVF   FED,F
10D40:  MOVFF  FEF,A4B
10D44:  MOVLB  A
10D46:  MOVF   x4C,W
10D48:  SUBLW  FD
10D4A:  BNC   10D6C
10D4C:  BNZ   10D54
10D4E:  MOVF   x4B,W
10D50:  SUBLW  E7
10D52:  BNC   10D6C
.................... 				tabela_programa[menu_aux]++;
10D54:  BCF    FD8.0
10D56:  RLCF   36,W
10D58:  CLRF   03
10D5A:  ADDLW  D7
10D5C:  MOVWF  FE9
10D5E:  MOVLW  01
10D60:  ADDWFC 03,W
10D62:  MOVWF  FEA
10D64:  MOVLW  01
10D66:  ADDWF  FEE,F
10D68:  BNC   10D6C
10D6A:  INCF   FEF,F
.................... 			}
.................... 			break;
10D6C:  MOVLB  0
10D6E:  BRA    10F18
.................... 		}
.................... 		case 4:{									//dia inico periodo seco
.................... 			if (tabela_programa[4] < 31){
10D70:  MOVLB  1
10D72:  MOVF   xE0,F
10D74:  BNZ   10D82
10D76:  MOVF   xDF,W
10D78:  SUBLW  1E
10D7A:  BNC   10D82
.................... 				tabela_programa[4]++;
10D7C:  INCF   xDF,F
10D7E:  BTFSC  FD8.2
10D80:  INCF   xE0,F
.................... 			}
.................... 			break;
10D82:  MOVLB  0
10D84:  BRA    10F18
.................... 		}
.................... 		case 5:{									// mes inicio periodo seco
.................... 			if (tabela_programa[5] < 11){			// faz teste no mes final, que não pode ficar menor ou igual 
10D86:  MOVLB  1
10D88:  MOVF   xE2,F
10D8A:  BNZ   10DAE
10D8C:  MOVF   xE1,W
10D8E:  SUBLW  0A
10D90:  BNC   10DAE
.................... 				tabela_programa[5]++;				// que o mes inicial, então só pode ir até mes 11.
10D92:  INCF   xE1,F
10D94:  BTFSC  FD8.2
10D96:  INCF   xE2,F
.................... 				if (tabela_programa[5] < 11){
10D98:  MOVF   xE2,F
10D9A:  BNZ   10DAE
10D9C:  MOVF   xE1,W
10D9E:  SUBLW  0A
10DA0:  BNC   10DAE
.................... 					tabela_programa[7] = tabela_programa[5] + 1;
10DA2:  MOVLW  01
10DA4:  ADDWF  xE1,W
10DA6:  MOVWF  xE5
10DA8:  MOVLW  00
10DAA:  ADDWFC xE2,W
10DAC:  MOVWF  xE6
.................... 				}
.................... 			}
.................... 			if (tabela_programa[5] >= tabela_programa[7]){
10DAE:  MOVF   xE6,W
10DB0:  SUBWF  xE2,W
10DB2:  BNC   10DC8
10DB4:  BNZ   10DBC
10DB6:  MOVF   xE5,W
10DB8:  SUBWF  xE1,W
10DBA:  BNC   10DC8
.................... 				tabela_programa[7] = tabela_programa[5] + 1;
10DBC:  MOVLW  01
10DBE:  ADDWF  xE1,W
10DC0:  MOVWF  xE5
10DC2:  MOVLW  00
10DC4:  ADDWFC xE2,W
10DC6:  MOVWF  xE6
.................... 			}
.................... 			break;
10DC8:  MOVLB  0
10DCA:  BRA    10F18
.................... 		}
.................... 		case 6:{									//dia fim periodo seco
.................... 			if (tabela_programa[6] < 31){
10DCC:  MOVLB  1
10DCE:  MOVF   xE4,F
10DD0:  BNZ   10DDE
10DD2:  MOVF   xE3,W
10DD4:  SUBLW  1E
10DD6:  BNC   10DDE
.................... 				tabela_programa[6]++;
10DD8:  INCF   xE3,F
10DDA:  BTFSC  FD8.2
10DDC:  INCF   xE4,F
.................... 			}
.................... 			break;
10DDE:  MOVLB  0
10DE0:  BRA    10F18
.................... 		}
.................... 		case 7:{									// mes fim periodo seco
.................... 			if (tabela_programa[7] < 12){
10DE2:  MOVLB  1
10DE4:  MOVF   xE6,F
10DE6:  BNZ   10DF4
10DE8:  MOVF   xE5,W
10DEA:  SUBLW  0B
10DEC:  BNC   10DF4
.................... 				tabela_programa[7]++;
10DEE:  INCF   xE5,F
10DF0:  BTFSC  FD8.2
10DF2:  INCF   xE6,F
.................... 			}
.................... 			break;
10DF4:  MOVLB  0
10DF6:  BRA    10F18
.................... 		}
.................... 		case 8:{
.................... 			if (tabela_programa[8] < 22){			// horariode inico ponta
10DF8:  MOVLB  1
10DFA:  MOVF   xE8,F
10DFC:  BNZ   10E20
10DFE:  MOVF   xE7,W
10E00:  SUBLW  15
10E02:  BNC   10E20
.................... 				tabela_programa[8]++;
10E04:  INCF   xE7,F
10E06:  BTFSC  FD8.2
10E08:  INCF   xE8,F
.................... 				if (tabela_programa[8] < 22){
10E0A:  MOVF   xE8,F
10E0C:  BNZ   10E20
10E0E:  MOVF   xE7,W
10E10:  SUBLW  15
10E12:  BNC   10E20
.................... 					tabela_programa[10] = tabela_programa[8] + 1;
10E14:  MOVLW  01
10E16:  ADDWF  xE7,W
10E18:  MOVWF  xEB
10E1A:  MOVLW  00
10E1C:  ADDWFC xE8,W
10E1E:  MOVWF  xEC
.................... 				}
.................... 			}
.................... 			if (tabela_programa[8] >= tabela_programa[10]){
10E20:  MOVF   xEC,W
10E22:  SUBWF  xE8,W
10E24:  BNC   10E3A
10E26:  BNZ   10E2E
10E28:  MOVF   xEB,W
10E2A:  SUBWF  xE7,W
10E2C:  BNC   10E3A
.................... 				tabela_programa[10] = tabela_programa[8] + 1;
10E2E:  MOVLW  01
10E30:  ADDWF  xE7,W
10E32:  MOVWF  xEB
10E34:  MOVLW  00
10E36:  ADDWFC xE8,W
10E38:  MOVWF  xEC
.................... 			}
.................... 			break;
10E3A:  MOVLB  0
10E3C:  BRA    10F18
.................... 		}
.................... 		case 9:{									// minuto inicio
.................... 			if (tabela_programa[9] < 59){
10E3E:  MOVLB  1
10E40:  MOVF   xEA,F
10E42:  BNZ   10E50
10E44:  MOVF   xE9,W
10E46:  SUBLW  3A
10E48:  BNC   10E50
.................... 				tabela_programa[9]++;
10E4A:  INCF   xE9,F
10E4C:  BTFSC  FD8.2
10E4E:  INCF   xEA,F
.................... 			}
.................... 			break;
10E50:  MOVLB  0
10E52:  BRA    10F18
.................... 		}				
.................... 		case 10:{									// hora final
.................... 			if (tabela_programa[10] < 23){
10E54:  MOVLB  1
10E56:  MOVF   xEC,F
10E58:  BNZ   10E66
10E5A:  MOVF   xEB,W
10E5C:  SUBLW  16
10E5E:  BNC   10E66
.................... 				tabela_programa[10]++;
10E60:  INCF   xEB,F
10E62:  BTFSC  FD8.2
10E64:  INCF   xEC,F
.................... 			}
.................... 			break;
10E66:  MOVLB  0
10E68:  BRA    10F18
.................... 		}				
.................... 		case 11:{									// minimo final
.................... 			if (tabela_programa[11] < 59){
10E6A:  MOVLB  1
10E6C:  MOVF   xEE,F
10E6E:  BNZ   10E7C
10E70:  MOVF   xED,W
10E72:  SUBLW  3A
10E74:  BNC   10E7C
.................... 				tabela_programa[11]++;
10E76:  INCF   xED,F
10E78:  BTFSC  FD8.2
10E7A:  INCF   xEE,F
.................... 			}
.................... 			break;
10E7C:  MOVLB  0
10E7E:  BRA    10F18
.................... 		}				
.................... 		#if (com_tc == true)
.................... 		 	case 12:{								// incrementa valor tc
.................... 				if (aux_tab < (NRO_POSI_TC-1)){
10E80:  MOVF   x80,W
10E82:  SUBLW  23
10E84:  BNC   10E88
.................... 					aux_tab++;
10E86:  INCF   x80,F
.................... 				}
.................... 				if (aux_tab > (NRO_POSI_TC-1)){
10E88:  MOVF   x80,W
10E8A:  SUBLW  24
10E8C:  BC    10E90
.................... 		 			aux_tab = 0;
10E8E:  CLRF   x80
.................... 		 		}
.................... 				tabela_programa[12] = tabela_tc[aux_tab];
10E90:  BCF    FD8.0
10E92:  RLCF   x80,W
10E94:  CLRF   03
10E96:  CALL   0128
10E9A:  TBLRD*+
10E9C:  MOVFF  FF5,03
10EA0:  MOVLB  1
10EA2:  MOVWF  xEF
10EA4:  MOVFF  03,1F0
.................... 				break;
10EA8:  MOVLB  0
10EAA:  BRA    10F18
.................... 		 	}
.................... 			case 13:{								// incrementa valor valor_tp
.................... 				if (tabela_programa[13] < 500){
10EAC:  MOVLB  1
10EAE:  MOVF   xF2,W
10EB0:  SUBLW  01
10EB2:  BNC   10EC2
10EB4:  BNZ   10EBC
10EB6:  MOVF   xF1,W
10EB8:  SUBLW  F3
10EBA:  BNC   10EC2
.................... 					tabela_programa[13]++;
10EBC:  INCF   xF1,F
10EBE:  BTFSC  FD8.2
10EC0:  INCF   xF2,F
.................... 				}
.................... 				break;
10EC2:  MOVLB  0
10EC4:  BRA    10F18
.................... 			}
.................... 		#elif (com_rep == true)
.................... 		 	case 12:								// incrementa fat_conv_ativa e fat_conv_reativa
.................... 		 	case 13:{                   
.................... 			 	if (tabela_programa[menu_aux] < 9999){
.................... 					tabela_programa[menu_aux]++;
.................... 				}
.................... 				break;
....................  			}
....................  		#endif
.................... 	 	case 14:{									// incrementa valor endereco do modbus
.................... 	 		if (tabela_programa[14] < 247){
10EC6:  MOVLB  1
10EC8:  MOVF   xF4,F
10ECA:  BNZ   10ED8
10ECC:  MOVF   xF3,W
10ECE:  SUBLW  F6
10ED0:  BNC   10ED8
.................... 				tabela_programa[14]++;
10ED2:  INCF   xF3,F
10ED4:  BTFSC  FD8.2
10ED6:  INCF   xF4,F
.................... 			}
.................... 			break;
10ED8:  MOVLB  0
10EDA:  BRA    10F18
....................  		}
.................... 	 	case 15:{									// incrementa valor de baudrate
.................... 	 		if (tabela_programa[15] < (NRO_POSI_BAUD - 1)){
10EDC:  MOVLB  1
10EDE:  MOVF   xF6,F
10EE0:  BNZ   10EEE
10EE2:  MOVF   xF5,W
10EE4:  SUBLW  04
10EE6:  BNC   10EEE
.................... 				tabela_programa[15]++;
10EE8:  INCF   xF5,F
10EEA:  BTFSC  FD8.2
10EEC:  INCF   xF6,F
.................... 			}
.................... 			if (tabela_programa[15] > (NRO_POSI_BAUD - 1)){
10EEE:  MOVF   xF6,F
10EF0:  BNZ   10EF8
10EF2:  MOVF   xF5,W
10EF4:  SUBLW  05
10EF6:  BC    10EFC
.................... 				tabela_programa[15] = 0;
10EF8:  CLRF   xF6
10EFA:  CLRF   xF5
.................... 			}
.................... 			break;
10EFC:  MOVLB  0
10EFE:  BRA    10F18
....................  		}
....................  		case 16:{
.................... 	 		if (tabela_programa[16] == MODO_INVERTIDO){
10F00:  MOVLB  1
10F02:  MOVF   xF7,F
10F04:  BNZ   10F12
10F06:  MOVF   xF8,F
10F08:  BNZ   10F12
....................  				tabela_programa[16] = MODO_NORMAL;
10F0A:  CLRF   xF8
10F0C:  MOVLW  01
10F0E:  MOVWF  xF7
.................... 		 	}
10F10:  BRA    10F16
.................... 		 	else{
.................... 				tabela_programa[16] = MODO_INVERTIDO;
10F12:  CLRF   xF8
10F14:  CLRF   xF7
.................... 			}
.................... 	 		break;
10F16:  MOVLB  0
.................... 	 	}
....................  		case 17:{
.................... 	 		#if(com_rep)
.................... 		 		if(tabela_programa[17] < (NRO_PROTO_REP - 1)){
.................... 			 		tabela_programa[17]++;
.................... 		 		}
.................... 		 		else{
.................... 			 		tabela_programa[17] = 0;
.................... 		 		}
.................... 		 		break;
.................... 		 	#endif
....................  		}
....................  	}
10F18:  GOTO   120E2 (RETURN)
.................... }
.................... 
.................... void trata_down4_st8500c(void){							//decrementa parâmetros no teclado
.................... 	switch(menu_aux){
*
10F5E:  MOVLW  01
10F60:  SUBWF  36,W
10F62:  ADDLW  EF
10F64:  BTFSC  FD8.0
10F66:  BRA    1119C
10F68:  ADDLW  11
10F6A:  GOTO   111A0
.................... 		case 1:											// demanda contratada ponta
.................... 		case 2:{										// demandas contratadas fora da ponta 
.................... 			if (tabela_programa[menu_aux] > 0){
10F6E:  BCF    FD8.0
10F70:  RLCF   36,W
10F72:  CLRF   03
10F74:  ADDLW  D7
10F76:  MOVWF  FE9
10F78:  MOVLW  01
10F7A:  ADDWFC 03,W
10F7C:  MOVWF  FEA
10F7E:  MOVFF  FEC,A4C
10F82:  MOVF   FED,F
10F84:  MOVFF  FEF,A4B
10F88:  MOVLB  A
10F8A:  MOVF   x4B,F
10F8C:  BNZ   10F92
10F8E:  MOVF   x4C,F
10F90:  BZ    10FAC
.................... 				tabela_programa[menu_aux]--;
10F92:  BCF    FD8.0
10F94:  RLCF   36,W
10F96:  CLRF   03
10F98:  ADDLW  D7
10F9A:  MOVWF  FE9
10F9C:  MOVLW  01
10F9E:  ADDWFC 03,W
10FA0:  MOVWF  FEA
10FA2:  MOVLW  FF
10FA4:  ADDWF  FEF,F
10FA6:  BC    10FAC
10FA8:  MOVF   FEE,F
10FAA:  DECF   FED,F
.................... 			}
.................... 			break;
10FAC:  MOVLB  0
10FAE:  BRA    1119C
.................... 		}
.................... 		case 3:{										// carga instalada
.................... 			aux_w1 = 0;
10FB0:  MOVLB  3
10FB2:  CLRF   x63
10FB4:  CLRF   x62
.................... 			if (aux_w1 < tabela_programa[1]){
10FB6:  MOVF   x63,W
10FB8:  MOVLB  1
10FBA:  SUBWF  xDA,W
10FBC:  BNC   10FD8
10FBE:  BNZ   10FD0
10FC0:  MOVF   xD9,W
10FC2:  MOVLB  3
10FC4:  SUBWF  x62,W
10FC6:  BTFSS  FD8.0
10FC8:  BRA    10FCE
10FCA:  MOVLB  1
10FCC:  BRA    10FD8
10FCE:  MOVLB  1
.................... 				aux_w1 = tabela_programa[1];
10FD0:  MOVFF  1DA,363
10FD4:  MOVFF  1D9,362
.................... 			}
.................... 			if (aux_w1 < tabela_programa[2]){
10FD8:  MOVLB  3
10FDA:  MOVF   x63,W
10FDC:  MOVLB  1
10FDE:  SUBWF  xDC,W
10FE0:  BNC   10FFC
10FE2:  BNZ   10FF4
10FE4:  MOVF   xDB,W
10FE6:  MOVLB  3
10FE8:  SUBWF  x62,W
10FEA:  BTFSS  FD8.0
10FEC:  BRA    10FF2
10FEE:  MOVLB  1
10FF0:  BRA    10FFC
10FF2:  MOVLB  1
.................... 				aux_w1 = tabela_programa[2];
10FF4:  MOVFF  1DC,363
10FF8:  MOVFF  1DB,362
.................... 			}
.................... 			if (tabela_programa[3] > aux_w1){
10FFC:  MOVLB  3
10FFE:  MOVF   x63,W
11000:  MOVLB  1
11002:  SUBWF  xDE,W
11004:  BNC   11022
11006:  BNZ   11018
11008:  MOVF   xDD,W
1100A:  MOVLB  3
1100C:  SUBWF  x62,W
1100E:  BTFSS  FD8.0
11010:  BRA    11016
11012:  MOVLB  1
11014:  BRA    11022
11016:  MOVLB  1
.................... 				tabela_programa[3]--;					//
11018:  MOVF   xDD,W
1101A:  BTFSC  FD8.2
1101C:  DECF   xDE,F
1101E:  DECF   xDD,F
.................... 			}
11020:  BRA    1102A
.................... 			else{
.................... 				tabela_programa[3] = aux_w1;
11022:  MOVFF  363,1DE
11026:  MOVFF  362,1DD
.................... 			}
.................... 			break;
1102A:  MOVLB  0
1102C:  BRA    1119C
.................... 		}
.................... 		case 4:{										//dia inico periodo seco
.................... 			if (tabela_programa[4] > 1){
1102E:  MOVLB  1
11030:  MOVF   xE0,F
11032:  BNZ   1103A
11034:  MOVF   xDF,W
11036:  SUBLW  01
11038:  BC    11042
.................... 				tabela_programa[4]--;
1103A:  MOVF   xDF,W
1103C:  BTFSC  FD8.2
1103E:  DECF   xE0,F
11040:  DECF   xDF,F
.................... 			}
.................... 			break;
11042:  MOVLB  0
11044:  BRA    1119C
.................... 		}
.................... 		case 5:{										// mes inicio periodo seco
.................... 			if (tabela_programa[5] > 1){				// faz teste no mes final, que não pode ficar menor ou igual 
11046:  MOVLB  1
11048:  MOVF   xE2,F
1104A:  BNZ   11052
1104C:  MOVF   xE1,W
1104E:  SUBLW  01
11050:  BC    1105A
.................... 				tabela_programa[5]--;					// que o mes inicial, então só pode ir até mes 11.
11052:  MOVF   xE1,W
11054:  BTFSC  FD8.2
11056:  DECF   xE2,F
11058:  DECF   xE1,F
.................... 			}
.................... 			if (tabela_programa[5] >= tabela_programa[7]){
1105A:  MOVF   xE6,W
1105C:  SUBWF  xE2,W
1105E:  BNC   11074
11060:  BNZ   11068
11062:  MOVF   xE5,W
11064:  SUBWF  xE1,W
11066:  BNC   11074
.................... 				tabela_programa[7] = tabela_programa[5] + 1;
11068:  MOVLW  01
1106A:  ADDWF  xE1,W
1106C:  MOVWF  xE5
1106E:  MOVLW  00
11070:  ADDWFC xE2,W
11072:  MOVWF  xE6
.................... 			}
.................... 			break;
11074:  MOVLB  0
11076:  BRA    1119C
.................... 		}
.................... 		case 6:{										//dia fim periodo seco
.................... 			if (tabela_programa[6] > 1){
11078:  MOVLB  1
1107A:  MOVF   xE4,F
1107C:  BNZ   11084
1107E:  MOVF   xE3,W
11080:  SUBLW  01
11082:  BC    1108C
.................... 				tabela_programa[6]--;
11084:  MOVF   xE3,W
11086:  BTFSC  FD8.2
11088:  DECF   xE4,F
1108A:  DECF   xE3,F
.................... 			}
.................... 			break;
1108C:  MOVLB  0
1108E:  BRA    1119C
.................... 		}
.................... 		case 7:{										// mes fim periodo seco
.................... 			if (tabela_programa[7] > 1){
11090:  MOVLB  1
11092:  MOVF   xE6,F
11094:  BNZ   1109C
11096:  MOVF   xE5,W
11098:  SUBLW  01
1109A:  BC    110A4
.................... 				tabela_programa[7]--;
1109C:  MOVF   xE5,W
1109E:  BTFSC  FD8.2
110A0:  DECF   xE6,F
110A2:  DECF   xE5,F
.................... 			}
.................... 			break;
110A4:  MOVLB  0
110A6:  BRA    1119C
.................... 		}
.................... 		case 8:											// horario de inicio ponta
.................... 		case 9:											// minuto inicio
.................... 		case 10:										// hora final
.................... 		case 11:{										// minuto final
.................... 			if (tabela_programa[menu_aux] > 0){
110A8:  BCF    FD8.0
110AA:  RLCF   36,W
110AC:  CLRF   03
110AE:  ADDLW  D7
110B0:  MOVWF  FE9
110B2:  MOVLW  01
110B4:  ADDWFC 03,W
110B6:  MOVWF  FEA
110B8:  MOVFF  FEC,A4C
110BC:  MOVF   FED,F
110BE:  MOVFF  FEF,A4B
110C2:  MOVLB  A
110C4:  MOVF   x4B,F
110C6:  BNZ   110CC
110C8:  MOVF   x4C,F
110CA:  BZ    110E6
.................... 				tabela_programa[menu_aux]--;
110CC:  BCF    FD8.0
110CE:  RLCF   36,W
110D0:  CLRF   03
110D2:  ADDLW  D7
110D4:  MOVWF  FE9
110D6:  MOVLW  01
110D8:  ADDWFC 03,W
110DA:  MOVWF  FEA
110DC:  MOVLW  FF
110DE:  ADDWF  FEF,F
110E0:  BC    110E6
110E2:  MOVF   FEE,F
110E4:  DECF   FED,F
.................... 			}
.................... 			break;
110E6:  MOVLB  0
110E8:  BRA    1119C
.................... 		}				
.................... 		#if (com_tc == true)
.................... 	 		case 12:{									// decrementa valor tc
.................... 				if (aux_tab > 0){
110EA:  MOVF   x80,F
110EC:  BZ    110F0
.................... 					aux_tab --;
110EE:  DECF   x80,F
.................... 				}
.................... 				tabela_programa[12] = tabela_tc[aux_tab];
110F0:  BCF    FD8.0
110F2:  RLCF   x80,W
110F4:  CLRF   03
110F6:  CALL   0128
110FA:  TBLRD*+
110FC:  MOVFF  FF5,03
11100:  MOVLB  1
11102:  MOVWF  xEF
11104:  MOVFF  03,1F0
.................... 				break;
11108:  MOVLB  0
1110A:  BRA    1119C
.................... 		 	}
.................... 	 		case 13:{									// decrementa valor tp
.................... 		 		if (tabela_programa[13] > 1){
1110C:  MOVLB  1
1110E:  MOVF   xF2,F
11110:  BNZ   11118
11112:  MOVF   xF1,W
11114:  SUBLW  01
11116:  BC    11120
.................... 					tabela_programa[13]--;
11118:  MOVF   xF1,W
1111A:  BTFSC  FD8.2
1111C:  DECF   xF2,F
1111E:  DECF   xF1,F
.................... 				}
.................... 				break;
11120:  MOVLB  0
11122:  BRA    1119C
.................... 		 	}
.................... 		#elif (com_rep == true)
.................... 		 	case 12:									// incrementa fat_conv_ativa e fat_conv_reativa
.................... 		 	case 13:{
.................... 			 	if (tabela_programa[menu_aux] > 1){
.................... 					tabela_programa[menu_aux]--;
.................... 				}
.................... 				break;
....................  			}
....................  		#endif
.................... 	 	case 14:{										// incrementa valor endereco do modbus
.................... 	 		if (tabela_programa[14] > 2){
11124:  MOVLB  1
11126:  MOVF   xF4,F
11128:  BNZ   11130
1112A:  MOVF   xF3,W
1112C:  SUBLW  02
1112E:  BC    1113A
.................... 				tabela_programa[14]--;
11130:  MOVF   xF3,W
11132:  BTFSC  FD8.2
11134:  DECF   xF4,F
11136:  DECF   xF3,F
.................... 			}
11138:  BRA    11140
.................... 			else{
.................... 				tabela_programa[14] = 1;
1113A:  CLRF   xF4
1113C:  MOVLW  01
1113E:  MOVWF  xF3
.................... 			}
.................... 			break;
11140:  MOVLB  0
11142:  BRA    1119C
....................  		}
.................... 	 	case 15:{										// incrementa valor de baudrate
.................... 	 		if (tabela_programa[15] > 0){
11144:  MOVLB  1
11146:  MOVF   xF5,F
11148:  BNZ   1114E
1114A:  MOVF   xF6,F
1114C:  BZ    11156
.................... 				tabela_programa[15]--;
1114E:  MOVF   xF5,W
11150:  BTFSC  FD8.2
11152:  DECF   xF6,F
11154:  DECF   xF5,F
.................... 			}
.................... 			if (tabela_programa[15] > (NRO_POSI_BAUD - 1)){
11156:  MOVF   xF6,F
11158:  BNZ   11160
1115A:  MOVF   xF5,W
1115C:  SUBLW  05
1115E:  BC    11164
.................... 				tabela_programa[15] = 0;
11160:  CLRF   xF6
11162:  CLRF   xF5
.................... 			}
.................... 			break;
11164:  MOVLB  0
11166:  BRA    1119C
....................  		}
....................  		case 16:{
.................... 	 		if (tabela_programa[16] == MODO_INVERTIDO){
11168:  MOVLB  1
1116A:  MOVF   xF7,F
1116C:  BNZ   1117A
1116E:  MOVF   xF8,F
11170:  BNZ   1117A
....................  				tabela_programa[16] = MODO_NORMAL;
11172:  CLRF   xF8
11174:  MOVLW  01
11176:  MOVWF  xF7
.................... 		 	}
11178:  BRA    1117E
.................... 		 	else{
.................... 				tabela_programa[16] = MODO_INVERTIDO;
1117A:  CLRF   xF8
1117C:  CLRF   xF7
.................... 			}
.................... 	 		break;
1117E:  MOVLB  0
11180:  BRA    1119C
.................... 	 	}
....................  		case 17:{
.................... 	 		if(tabela_programa[17] > 0){
11182:  MOVLB  1
11184:  MOVF   xF9,F
11186:  BNZ   1118C
11188:  MOVF   xFA,F
1118A:  BZ    11196
.................... 		 		tabela_programa[17]--;
1118C:  MOVF   xF9,W
1118E:  BTFSC  FD8.2
11190:  DECF   xFA,F
11192:  DECF   xF9,F
.................... 	 		}
11194:  BRA    1119A
.................... 	 		else{
.................... 		 		tabela_programa[17] = 0;
11196:  CLRF   xFA
11198:  CLRF   xF9
.................... 	 		}
.................... 	 		break;
1119A:  MOVLB  0
....................  		}
.................... 	}
1119C:  GOTO   121F6 (RETURN)
.................... }
.................... 
.................... 
.................... void exibe_programa(void){
.................... 	if (menu_aux == 0){
*
11776:  MOVF   36,F
11778:  BNZ   1177E
.................... 		menu_aux = 1;
1177A:  MOVLW  01
1177C:  MOVWF  36
.................... 	}
.................... 
.................... 	if (exibir_menu == 0){
1177E:  BTFSC  2B.6
11780:  BRA    11786
.................... 		return;
11782:  GOTO   11FFA
.................... 	}
.................... 	exibir_menu = 0;
11786:  BCF    2B.6
.................... 	switch (menu_aux){
11788:  MOVF   36,W
1178A:  XORLW  01
1178C:  BZ    117EE
1178E:  XORLW  03
11790:  BZ    117EE
11792:  XORLW  01
11794:  BZ    117EE
11796:  XORLW  07
11798:  BTFSC  FD8.2
1179A:  BRA    118B0
1179C:  XORLW  01
1179E:  BTFSC  FD8.2
117A0:  BRA    118B0
117A2:  XORLW  03
117A4:  BTFSC  FD8.2
117A6:  BRA    118B0
117A8:  XORLW  01
117AA:  BTFSC  FD8.2
117AC:  BRA    118B0
117AE:  XORLW  0F
117B0:  BTFSC  FD8.2
117B2:  BRA    119E4
117B4:  XORLW  01
117B6:  BTFSC  FD8.2
117B8:  BRA    119E4
117BA:  XORLW  03
117BC:  BTFSC  FD8.2
117BE:  BRA    119E4
117C0:  XORLW  01
117C2:  BTFSC  FD8.2
117C4:  BRA    119E4
117C6:  XORLW  07
117C8:  BTFSC  FD8.2
117CA:  BRA    11B18
117CC:  XORLW  01
117CE:  BTFSC  FD8.2
117D0:  BRA    11B18
117D2:  XORLW  03
117D4:  BTFSC  FD8.2
117D6:  BRA    11BC4
117D8:  XORLW  01
117DA:  BTFSC  FD8.2
117DC:  BRA    11BC4
117DE:  XORLW  1F
117E0:  BTFSC  FD8.2
117E2:  BRA    11C90
117E4:  XORLW  01
117E6:  BTFSC  FD8.2
117E8:  BRA    11DB0
117EA:  GOTO   11FF6
.................... 		case 1:
.................... 		case 2:
.................... 		case 3:{
.................... 			if (exibiu == 0){
117EE:  BTFSC  29.6
117F0:  BRA    11874
.................... 				desativa_cursor();
117F2:  CALL   FFC0
.................... 				if (menu_aux == 3){
117F6:  MOVF   36,W
117F8:  SUBLW  03
117FA:  BNZ   1181E
.................... 					mensagem (1, 12);
117FC:  MOVLW  01
117FE:  MOVLB  A
11800:  MOVWF  x4D
11802:  MOVLW  0C
11804:  MOVWF  x4E
11806:  MOVLB  0
11808:  CALL   47E8
.................... 					mensagem (2, 13);
1180C:  MOVLW  02
1180E:  MOVLB  A
11810:  MOVWF  x4D
11812:  MOVLW  0D
11814:  MOVWF  x4E
11816:  MOVLB  0
11818:  CALL   47E8
.................... 				}
1181C:  BRA    11872
.................... 				else{
.................... 					if(aux_tab<12){
1181E:  MOVF   x80,W
11820:  SUBLW  0B
11822:  BNC   1186E
.................... 						mensagem (1, 34);						// Demanda Contratado			
11824:  MOVLW  01
11826:  MOVLB  A
11828:  MOVWF  x4D
1182A:  MOVLW  22
1182C:  MOVWF  x4E
1182E:  MOVLB  0
11830:  CALL   47E8
.................... 						displayp(14,(aux_tab+1),2,0,0);
11834:  MOVLW  01
11836:  ADDWF  x80,W
11838:  MOVLB  A
1183A:  MOVWF  x4B
1183C:  MOVLW  0E
1183E:  MOVWF  x4E
11840:  CLRF   x50
11842:  MOVFF  A4B,A4F
11846:  MOVLW  02
11848:  MOVWF  x51
1184A:  CLRF   x52
1184C:  CLRF   x53
1184E:  MOVLB  0
11850:  CALL   5038
.................... 						mensagem (2, 35 + (menu_aux -1));		// msg qdemanda
11854:  MOVLW  01
11856:  SUBWF  36,W
11858:  ADDLW  23
1185A:  MOVLB  A
1185C:  MOVWF  x4B
1185E:  MOVLW  02
11860:  MOVWF  x4D
11862:  MOVFF  A4B,A4E
11866:  MOVLB  0
11868:  CALL   47E8
.................... 					}
1186C:  BRA    11872
.................... 					else{
.................... 						aux_tab=11;
1186E:  MOVLW  0B
11870:  MOVWF  x80
.................... 					}
.................... 				}
.................... 				exibiu = 1;
11872:  BSF    29.6
.................... 			}
.................... 			displayp(26,tabela_programa[menu_aux],5,0,'P');
11874:  BCF    FD8.0
11876:  RLCF   36,W
11878:  CLRF   03
1187A:  ADDLW  D7
1187C:  MOVWF  FE9
1187E:  MOVLW  01
11880:  ADDWFC 03,W
11882:  MOVWF  FEA
11884:  MOVFF  FEC,A4C
11888:  MOVF   FED,F
1188A:  MOVFF  FEF,A4B
1188E:  MOVLW  1A
11890:  MOVLB  A
11892:  MOVWF  x4E
11894:  MOVFF  A4C,A50
11898:  MOVFF  A4B,A4F
1189C:  MOVLW  05
1189E:  MOVWF  x51
118A0:  CLRF   x52
118A2:  MOVLW  50
118A4:  MOVWF  x53
118A6:  MOVLB  0
118A8:  CALL   5038
.................... 			break;
118AC:  GOTO   11FFA
.................... 		}
.................... 		
.................... 		case 4:
.................... 		case 5:
.................... 		case 6:
.................... 		case 7:{
.................... 			if (exibiu == 0){
118B0:  BTFSC  29.6
118B2:  BRA    1190E
.................... 				desativa_cursor();
118B4:  CALL   FFC0
.................... 				mensagem (1, 45);			//  PROGRAMAÿÇÿÃO DO PERIODO SECO
118B8:  MOVLW  01
118BA:  MOVLB  A
118BC:  MOVWF  x4D
118BE:  MOVLW  2D
118C0:  MOVWF  x4E
118C2:  MOVLB  0
118C4:  CALL   47E8
.................... 				mensagem (2, 46);	
118C8:  MOVLW  02
118CA:  MOVLB  A
118CC:  MOVWF  x4D
118CE:  MOVLW  2E
118D0:  MOVWF  x4E
118D2:  MOVLB  0
118D4:  CALL   47E8
.................... 				exibiu = 1;
118D8:  BSF    29.6
.................... 				tabela_pisca[0] = 0;
118DA:  MOVLB  1
118DC:  CLRF   xD1
.................... 				tabela_pisca[1] = 0;
118DE:  CLRF   xD2
.................... 				tabela_pisca[2] = 0;
118E0:  CLRF   xD3
.................... 				tabela_pisca[3] = 0;
118E2:  CLRF   xD4
.................... 				if (menu_aux == 6){
118E4:  MOVF   36,W
118E6:  SUBLW  06
118E8:  BNZ   118F0
.................... 					tabela_pisca[0] = 'P';
118EA:  MOVLW  50
118EC:  MOVWF  xD1
.................... 				}
118EE:  BRA    1190C
.................... 				else if (menu_aux == 7){
118F0:  MOVF   36,W
118F2:  SUBLW  07
118F4:  BNZ   118FC
.................... 					tabela_pisca[1] = 'P';
118F6:  MOVLW  50
118F8:  MOVWF  xD2
.................... 				}
118FA:  BRA    1190C
.................... 				else if (menu_aux == 8){
118FC:  MOVF   36,W
118FE:  SUBLW  08
11900:  BNZ   11908
.................... 					tabela_pisca[2] = 'P';
11902:  MOVLW  50
11904:  MOVWF  xD3
.................... 				}
11906:  BRA    1190C
.................... 				else{
.................... 					tabela_pisca[3] = 'P';
11908:  MOVLW  50
1190A:  MOVWF  xD4
1190C:  MOVLB  0
.................... 				}
.................... 			}
.................... 			displayp(19,tabela_programa[4],2,0,tabela_pisca[0]);
1190E:  MOVLW  13
11910:  MOVLB  A
11912:  MOVWF  x4E
11914:  MOVFF  1E0,A50
11918:  MOVFF  1DF,A4F
1191C:  MOVLW  02
1191E:  MOVWF  x51
11920:  CLRF   x52
11922:  MOVFF  1D1,A53
11926:  MOVLB  0
11928:  CALL   5038
.................... 			displayp(22,tabela_programa[5],2,0,tabela_pisca[1]);
1192C:  MOVLW  16
1192E:  MOVLB  A
11930:  MOVWF  x4E
11932:  MOVFF  1E2,A50
11936:  MOVFF  1E1,A4F
1193A:  MOVLW  02
1193C:  MOVWF  x51
1193E:  CLRF   x52
11940:  MOVFF  1D2,A53
11944:  MOVLB  0
11946:  CALL   5038
.................... 			displayp(27,tabela_programa[6],2,0,tabela_pisca[2]);
1194A:  MOVLW  1B
1194C:  MOVLB  A
1194E:  MOVWF  x4E
11950:  MOVFF  1E4,A50
11954:  MOVFF  1E3,A4F
11958:  MOVLW  02
1195A:  MOVWF  x51
1195C:  CLRF   x52
1195E:  MOVFF  1D3,A53
11962:  MOVLB  0
11964:  CALL   5038
.................... 			displayp(30,tabela_programa[7],2,0,tabela_pisca[3]);
11968:  MOVLW  1E
1196A:  MOVLB  A
1196C:  MOVWF  x4E
1196E:  MOVFF  1E6,A50
11972:  MOVFF  1E5,A4F
11976:  MOVLW  02
11978:  MOVWF  x51
1197A:  CLRF   x52
1197C:  MOVFF  1D4,A53
11980:  MOVLB  0
11982:  CALL   5038
.................... 			if (menu_aux == 4){
11986:  MOVF   36,W
11988:  SUBLW  04
1198A:  BNZ   1199E
.................... 				lcd_gotoxy(4,2);
1198C:  MOVLW  04
1198E:  MOVLB  A
11990:  MOVWF  x62
11992:  MOVLW  02
11994:  MOVWF  x63
11996:  MOVLB  0
11998:  CALL   46C4
.................... 			}
1199C:  BRA    119DE
.................... 			else if (menu_aux == 5){
1199E:  MOVF   36,W
119A0:  SUBLW  05
119A2:  BNZ   119B6
.................... 				lcd_gotoxy(7,2);
119A4:  MOVLW  07
119A6:  MOVLB  A
119A8:  MOVWF  x62
119AA:  MOVLW  02
119AC:  MOVWF  x63
119AE:  MOVLB  0
119B0:  CALL   46C4
.................... 			}
119B4:  BRA    119DE
.................... 			else if (menu_aux == 6){
119B6:  MOVF   36,W
119B8:  SUBLW  06
119BA:  BNZ   119CE
.................... 				lcd_gotoxy(12,2);
119BC:  MOVLW  0C
119BE:  MOVLB  A
119C0:  MOVWF  x62
119C2:  MOVLW  02
119C4:  MOVWF  x63
119C6:  MOVLB  0
119C8:  CALL   46C4
.................... 			}
119CC:  BRA    119DE
.................... 			else{
.................... 				lcd_gotoxy(15,2);
119CE:  MOVLW  0F
119D0:  MOVLB  A
119D2:  MOVWF  x62
119D4:  MOVLW  02
119D6:  MOVWF  x63
119D8:  MOVLB  0
119DA:  CALL   46C4
.................... 			}
.................... 			ativa_cursor();
119DE:  CALL   FFD0
.................... 			break;
119E2:  BRA    11FFA
.................... 		}
.................... 		case 8:
.................... 		case 9:
.................... 		case 10:
.................... 		case 11:{
.................... 			if (exibiu == 0){
119E4:  BTFSC  29.6
119E6:  BRA    11A42
.................... 				desativa_cursor();
119E8:  CALL   FFC0
.................... 				mensagem (1, 57);				// PROGRAMAÇAO DO PERIODO DE PONTA
119EC:  MOVLW  01
119EE:  MOVLB  A
119F0:  MOVWF  x4D
119F2:  MOVLW  39
119F4:  MOVWF  x4E
119F6:  MOVLB  0
119F8:  CALL   47E8
.................... 				mensagem (2, 59);		
119FC:  MOVLW  02
119FE:  MOVLB  A
11A00:  MOVWF  x4D
11A02:  MOVLW  3B
11A04:  MOVWF  x4E
11A06:  MOVLB  0
11A08:  CALL   47E8
.................... 				exibiu = 1;
11A0C:  BSF    29.6
.................... 				tabela_pisca[0] = 0;
11A0E:  MOVLB  1
11A10:  CLRF   xD1
.................... 				tabela_pisca[1] = 0;
11A12:  CLRF   xD2
.................... 				tabela_pisca[2] = 0;
11A14:  CLRF   xD3
.................... 				tabela_pisca[3] = 0;
11A16:  CLRF   xD4
.................... 				if (menu_aux == 8){
11A18:  MOVF   36,W
11A1A:  SUBLW  08
11A1C:  BNZ   11A24
.................... 					tabela_pisca[0] = 'P';
11A1E:  MOVLW  50
11A20:  MOVWF  xD1
.................... 				}
11A22:  BRA    11A40
.................... 				else if (menu_aux == 9){
11A24:  MOVF   36,W
11A26:  SUBLW  09
11A28:  BNZ   11A30
.................... 					tabela_pisca[1] = 'P';
11A2A:  MOVLW  50
11A2C:  MOVWF  xD2
.................... 				}
11A2E:  BRA    11A40
.................... 				else if (menu_aux == 10){
11A30:  MOVF   36,W
11A32:  SUBLW  0A
11A34:  BNZ   11A3C
.................... 					tabela_pisca[2] = 'P';
11A36:  MOVLW  50
11A38:  MOVWF  xD3
.................... 				}
11A3A:  BRA    11A40
.................... 				else{
.................... 					tabela_pisca[3] = 'P';
11A3C:  MOVLW  50
11A3E:  MOVWF  xD4
11A40:  MOVLB  0
.................... 				}
.................... 			}
.................... 			displayp(19,tabela_programa[8],2,0,tabela_pisca[0]);
11A42:  MOVLW  13
11A44:  MOVLB  A
11A46:  MOVWF  x4E
11A48:  MOVFF  1E8,A50
11A4C:  MOVFF  1E7,A4F
11A50:  MOVLW  02
11A52:  MOVWF  x51
11A54:  CLRF   x52
11A56:  MOVFF  1D1,A53
11A5A:  MOVLB  0
11A5C:  CALL   5038
.................... 			displayp(22,tabela_programa[9],2,0,tabela_pisca[1]);
11A60:  MOVLW  16
11A62:  MOVLB  A
11A64:  MOVWF  x4E
11A66:  MOVFF  1EA,A50
11A6A:  MOVFF  1E9,A4F
11A6E:  MOVLW  02
11A70:  MOVWF  x51
11A72:  CLRF   x52
11A74:  MOVFF  1D2,A53
11A78:  MOVLB  0
11A7A:  CALL   5038
.................... 			displayp(27,tabela_programa[10],2,0,tabela_pisca[2]);
11A7E:  MOVLW  1B
11A80:  MOVLB  A
11A82:  MOVWF  x4E
11A84:  MOVFF  1EC,A50
11A88:  MOVFF  1EB,A4F
11A8C:  MOVLW  02
11A8E:  MOVWF  x51
11A90:  CLRF   x52
11A92:  MOVFF  1D3,A53
11A96:  MOVLB  0
11A98:  CALL   5038
.................... 			displayp(30,tabela_programa[11],2,0,tabela_pisca[3]);
11A9C:  MOVLW  1E
11A9E:  MOVLB  A
11AA0:  MOVWF  x4E
11AA2:  MOVFF  1EE,A50
11AA6:  MOVFF  1ED,A4F
11AAA:  MOVLW  02
11AAC:  MOVWF  x51
11AAE:  CLRF   x52
11AB0:  MOVFF  1D4,A53
11AB4:  MOVLB  0
11AB6:  CALL   5038
.................... 			if (menu_aux == 8){
11ABA:  MOVF   36,W
11ABC:  SUBLW  08
11ABE:  BNZ   11AD2
.................... 				lcd_gotoxy(4,2);
11AC0:  MOVLW  04
11AC2:  MOVLB  A
11AC4:  MOVWF  x62
11AC6:  MOVLW  02
11AC8:  MOVWF  x63
11ACA:  MOVLB  0
11ACC:  CALL   46C4
.................... 			}
11AD0:  BRA    11B12
.................... 			else if (menu_aux == 9){
11AD2:  MOVF   36,W
11AD4:  SUBLW  09
11AD6:  BNZ   11AEA
.................... 				lcd_gotoxy(7,2);
11AD8:  MOVLW  07
11ADA:  MOVLB  A
11ADC:  MOVWF  x62
11ADE:  MOVLW  02
11AE0:  MOVWF  x63
11AE2:  MOVLB  0
11AE4:  CALL   46C4
.................... 			}
11AE8:  BRA    11B12
.................... 			else if (menu_aux == 10){
11AEA:  MOVF   36,W
11AEC:  SUBLW  0A
11AEE:  BNZ   11B02
.................... 				lcd_gotoxy(12,2);
11AF0:  MOVLW  0C
11AF2:  MOVLB  A
11AF4:  MOVWF  x62
11AF6:  MOVLW  02
11AF8:  MOVWF  x63
11AFA:  MOVLB  0
11AFC:  CALL   46C4
.................... 			}
11B00:  BRA    11B12
.................... 			else{
.................... 				lcd_gotoxy(15,2);
11B02:  MOVLW  0F
11B04:  MOVLB  A
11B06:  MOVWF  x62
11B08:  MOVLW  02
11B0A:  MOVWF  x63
11B0C:  MOVLB  0
11B0E:  CALL   46C4
.................... 			}
.................... 			ativa_cursor();
11B12:  CALL   FFD0
.................... 			break;
11B16:  BRA    11FFA
.................... 		}
.................... 		case 12:
.................... 		case 13:{
.................... 			if (exibiu == 0){
11B18:  BTFSC  29.6
11B1A:  BRA    11B5A
.................... 				desativa_cursor();
11B1C:  CALL   FFC0
.................... 				#if (com_tc == true)
.................... 					mensagem (1,170);
11B20:  MOVLW  01
11B22:  MOVLB  A
11B24:  MOVWF  x4D
11B26:  MOVLW  AA
11B28:  MOVWF  x4E
11B2A:  MOVLB  0
11B2C:  CALL   47E8
.................... 					mensagem (2,171);
11B30:  MOVLW  02
11B32:  MOVLB  A
11B34:  MOVWF  x4D
11B36:  MOVLW  AB
11B38:  MOVWF  x4E
11B3A:  MOVLB  0
11B3C:  CALL   47E8
.................... 				#endif
.................... 				#if (com_rep == true)
.................... 					mensagem (1,142);
.................... 					mensagem (2,143);
.................... 				#endif
.................... 				exibiu = 1;
11B40:  BSF    29.6
.................... 				tabela_pisca[0] = 0;
11B42:  MOVLB  1
11B44:  CLRF   xD1
.................... 				tabela_pisca[1] = 0;
11B46:  CLRF   xD2
.................... 				if (menu_aux == 12){
11B48:  MOVF   36,W
11B4A:  SUBLW  0C
11B4C:  BNZ   11B54
.................... 					tabela_pisca[0] = 'P';
11B4E:  MOVLW  50
11B50:  MOVWF  xD1
.................... 				}
11B52:  BRA    11B58
.................... 				else{
.................... 					tabela_pisca[1] = 'P';
11B54:  MOVLW  50
11B56:  MOVWF  xD2
11B58:  MOVLB  0
.................... 				}
.................... 			}
.................... 			#if (com_tc == true)
.................... 				displayp (11, tabela_programa[12],4,0,tabela_pisca[0]);
11B5A:  MOVLW  0B
11B5C:  MOVLB  A
11B5E:  MOVWF  x4E
11B60:  MOVFF  1F0,A50
11B64:  MOVFF  1EF,A4F
11B68:  MOVLW  04
11B6A:  MOVWF  x51
11B6C:  CLRF   x52
11B6E:  MOVFF  1D1,A53
11B72:  MOVLB  0
11B74:  CALL   5038
.................... 				displayp (29, tabela_programa[13],3,0,tabela_pisca[1]);
11B78:  MOVLW  1D
11B7A:  MOVLB  A
11B7C:  MOVWF  x4E
11B7E:  MOVFF  1F2,A50
11B82:  MOVFF  1F1,A4F
11B86:  MOVLW  03
11B88:  MOVWF  x51
11B8A:  CLRF   x52
11B8C:  MOVFF  1D2,A53
11B90:  MOVLB  0
11B92:  CALL   5038
.................... 			#endif
.................... 			#if (com_rep == true)
.................... 				displayp (12, tabela_programa[12],4,0,tabela_pisca[0]);
.................... 				displayp (28, tabela_programa[13],4,0,tabela_pisca[1]);
.................... 			#endif
.................... 			if (menu_aux == 12){
11B96:  MOVF   36,W
11B98:  SUBLW  0C
11B9A:  BNZ   11BAE
.................... 				lcd_gotoxy(14,1);
11B9C:  MOVLW  0E
11B9E:  MOVLB  A
11BA0:  MOVWF  x62
11BA2:  MOVLW  01
11BA4:  MOVWF  x63
11BA6:  MOVLB  0
11BA8:  CALL   46C4
.................... 			}
11BAC:  BRA    11BBE
.................... 			else{
.................... 				lcd_gotoxy(15,2);
11BAE:  MOVLW  0F
11BB0:  MOVLB  A
11BB2:  MOVWF  x62
11BB4:  MOVLW  02
11BB6:  MOVWF  x63
11BB8:  MOVLB  0
11BBA:  CALL   46C4
.................... 			}
.................... 			ativa_cursor();
11BBE:  CALL   FFD0
.................... 			break;
11BC2:  BRA    11FFA
.................... 		}
.................... 		case 14:
.................... 		case 15:{
.................... 			if (exibiu == 0){
11BC4:  BTFSC  29.6
11BC6:  BRA    11C06
.................... 				desativa_cursor();
11BC8:  CALL   FFC0
.................... 				mensagem (1,39);
11BCC:  MOVLW  01
11BCE:  MOVLB  A
11BD0:  MOVWF  x4D
11BD2:  MOVLW  27
11BD4:  MOVWF  x4E
11BD6:  MOVLB  0
11BD8:  CALL   47E8
.................... 				mensagem (2,40);
11BDC:  MOVLW  02
11BDE:  MOVLB  A
11BE0:  MOVWF  x4D
11BE2:  MOVLW  28
11BE4:  MOVWF  x4E
11BE6:  MOVLB  0
11BE8:  CALL   47E8
.................... 				exibiu = 1;
11BEC:  BSF    29.6
.................... 				tabela_pisca[0] = 0;
11BEE:  MOVLB  1
11BF0:  CLRF   xD1
.................... 				tabela_pisca[1] = 0;
11BF2:  CLRF   xD2
.................... 				if (menu_aux == 14){
11BF4:  MOVF   36,W
11BF6:  SUBLW  0E
11BF8:  BNZ   11C00
.................... 					tabela_pisca[0] = 'P';
11BFA:  MOVLW  50
11BFC:  MOVWF  xD1
.................... 				}
11BFE:  BRA    11C04
.................... 				else{
.................... 					tabela_pisca[1] = 'P';
11C00:  MOVLW  50
11C02:  MOVWF  xD2
11C04:  MOVLB  0
.................... 				}
.................... 			}
.................... 			displayp (14,tabela_programa[14],3,0,tabela_pisca[0]);
11C06:  MOVLW  0E
11C08:  MOVLB  A
11C0A:  MOVWF  x4E
11C0C:  MOVFF  1F4,A50
11C10:  MOVFF  1F3,A4F
11C14:  MOVLW  03
11C16:  MOVWF  x51
11C18:  CLRF   x52
11C1A:  MOVFF  1D1,A53
11C1E:  MOVLB  0
11C20:  CALL   5038
.................... 			displayp (28,tabela_baud[tabela_programa[15]],5,0,tabela_pisca[1]);
11C24:  BCF    FD8.0
11C26:  MOVLB  1
11C28:  RLCF   xF5,W
11C2A:  MOVWF  02
11C2C:  RLCF   xF6,W
11C2E:  MOVWF  03
11C30:  MOVF   02,W
11C32:  MOVLB  0
11C34:  CALL   0108
11C38:  TBLRD*+
11C3A:  MOVFF  FF5,03
11C3E:  MOVLB  A
11C40:  MOVWF  x4B
11C42:  MOVFF  03,A4C
11C46:  MOVLW  1C
11C48:  MOVWF  x4E
11C4A:  MOVFF  A4C,A50
11C4E:  MOVFF  A4B,A4F
11C52:  MOVLW  05
11C54:  MOVWF  x51
11C56:  CLRF   x52
11C58:  MOVFF  1D2,A53
11C5C:  MOVLB  0
11C5E:  CALL   5038
.................... 			if (menu_aux == 14){
11C62:  MOVF   36,W
11C64:  SUBLW  0E
11C66:  BNZ   11C7A
.................... 				lcd_gotoxy(16,1);
11C68:  MOVLW  10
11C6A:  MOVLB  A
11C6C:  MOVWF  x62
11C6E:  MOVLW  01
11C70:  MOVWF  x63
11C72:  MOVLB  0
11C74:  CALL   46C4
.................... 			}
11C78:  BRA    11C8A
.................... 			else{
.................... 				lcd_gotoxy(16,2);
11C7A:  MOVLW  10
11C7C:  MOVLB  A
11C7E:  MOVWF  x62
11C80:  MOVLW  02
11C82:  MOVWF  x63
11C84:  MOVLB  0
11C86:  CALL   46C4
.................... 			}
.................... 			ativa_cursor();
11C8A:  CALL   FFD0
.................... 			break;
11C8E:  BRA    11FFA
.................... 		}
....................  		case 16:{
.................... 			mensagem (1,172);
11C90:  MOVLW  01
11C92:  MOVLB  A
11C94:  MOVWF  x4D
11C96:  MOVLW  AC
11C98:  MOVWF  x4E
11C9A:  MOVLB  0
11C9C:  CALL   47E8
.................... 	 		if (tabela_programa[16] == MODO_INVERTIDO){
11CA0:  MOVLB  1
11CA2:  MOVF   xF7,F
11CA4:  BNZ   11D2E
11CA6:  MOVF   xF8,F
11CA8:  BNZ   11D2E
.................... 		 		if (programando == 1){
11CAA:  BTFSS  29.5
11CAC:  BRA    11D1A
.................... 			 		if (piscar == true){
11CAE:  BTFSS  29.7
11CB0:  BRA    11D06
.................... 						lcd_gotoxy(13,2);
11CB2:  MOVLW  0D
11CB4:  MOVLB  A
11CB6:  MOVWF  x62
11CB8:  MOVLW  02
11CBA:  MOVWF  x63
11CBC:  MOVLB  0
11CBE:  CALL   46C4
.................... 						wr_lcd(1, ' ');
11CC2:  MOVLW  01
11CC4:  MOVLB  A
11CC6:  MOVWF  x65
11CC8:  MOVLW  20
11CCA:  MOVWF  x66
11CCC:  MOVLB  0
11CCE:  CALL   1864
.................... 						wr_lcd(1, ' ');
11CD2:  MOVLW  01
11CD4:  MOVLB  A
11CD6:  MOVWF  x65
11CD8:  MOVLW  20
11CDA:  MOVWF  x66
11CDC:  MOVLB  0
11CDE:  CALL   1864
.................... 						wr_lcd(1, ' ');
11CE2:  MOVLW  01
11CE4:  MOVLB  A
11CE6:  MOVWF  x65
11CE8:  MOVLW  20
11CEA:  MOVWF  x66
11CEC:  MOVLB  0
11CEE:  CALL   1864
.................... 						wr_lcd(1, ' ');
11CF2:  MOVLW  01
11CF4:  MOVLB  A
11CF6:  MOVWF  x65
11CF8:  MOVLW  20
11CFA:  MOVWF  x66
11CFC:  MOVLB  0
11CFE:  CALL   1864
.................... 				 	}
11D02:  BRA    11D16
11D04:  MOVLB  1
.................... 				 	else{
.................... 						mensagem (2,173);
11D06:  MOVLW  02
11D08:  MOVLB  A
11D0A:  MOVWF  x4D
11D0C:  MOVLW  AD
11D0E:  MOVWF  x4E
11D10:  MOVLB  0
11D12:  CALL   47E8
.................... 					}
.................... 			 	}
11D16:  BRA    11D2A
11D18:  MOVLB  1
.................... 			 	else{
.................... 					mensagem (2,173);
11D1A:  MOVLW  02
11D1C:  MOVLB  A
11D1E:  MOVWF  x4D
11D20:  MOVLW  AD
11D22:  MOVWF  x4E
11D24:  MOVLB  0
11D26:  CALL   47E8
.................... 				}
.................... 		 	}
11D2A:  BRA    11DAE
11D2C:  MOVLB  1
.................... 		 	else{
.................... 		 		if (programando == 1){
11D2E:  BTFSS  29.5
11D30:  BRA    11D9E
.................... 			 		if (piscar == true){
11D32:  BTFSS  29.7
11D34:  BRA    11D8A
.................... 						lcd_gotoxy(13,2);
11D36:  MOVLW  0D
11D38:  MOVLB  A
11D3A:  MOVWF  x62
11D3C:  MOVLW  02
11D3E:  MOVWF  x63
11D40:  MOVLB  0
11D42:  CALL   46C4
.................... 						wr_lcd(1, ' ');
11D46:  MOVLW  01
11D48:  MOVLB  A
11D4A:  MOVWF  x65
11D4C:  MOVLW  20
11D4E:  MOVWF  x66
11D50:  MOVLB  0
11D52:  CALL   1864
.................... 						wr_lcd(1, ' ');
11D56:  MOVLW  01
11D58:  MOVLB  A
11D5A:  MOVWF  x65
11D5C:  MOVLW  20
11D5E:  MOVWF  x66
11D60:  MOVLB  0
11D62:  CALL   1864
.................... 						wr_lcd(1, ' ');
11D66:  MOVLW  01
11D68:  MOVLB  A
11D6A:  MOVWF  x65
11D6C:  MOVLW  20
11D6E:  MOVWF  x66
11D70:  MOVLB  0
11D72:  CALL   1864
.................... 						wr_lcd(1, ' ');
11D76:  MOVLW  01
11D78:  MOVLB  A
11D7A:  MOVWF  x65
11D7C:  MOVLW  20
11D7E:  MOVWF  x66
11D80:  MOVLB  0
11D82:  CALL   1864
.................... 				 	}
11D86:  BRA    11D9A
11D88:  MOVLB  1
.................... 				 	else{
.................... 						mensagem (2,174);
11D8A:  MOVLW  02
11D8C:  MOVLB  A
11D8E:  MOVWF  x4D
11D90:  MOVLW  AE
11D92:  MOVWF  x4E
11D94:  MOVLB  0
11D96:  CALL   47E8
.................... 					}
.................... 			 	}
11D9A:  BRA    11DAE
11D9C:  MOVLB  1
.................... 			 	else{
.................... 					mensagem (2,174);
11D9E:  MOVLW  02
11DA0:  MOVLB  A
11DA2:  MOVWF  x4D
11DA4:  MOVLW  AE
11DA6:  MOVWF  x4E
11DA8:  MOVLB  0
11DAA:  CALL   47E8
.................... 				}
.................... 			}
.................... 	 		break;
11DAE:  BRA    11FFA
.................... 	 	}
.................... 		case 17:{						// Tipo de Protocolo do REP
.................... 			if (exibiu == 0){
11DB0:  BTFSC  29.6
11DB2:  BRA    11DE4
.................... 				mensagem (1,156);
11DB4:  MOVLW  01
11DB6:  MOVLB  A
11DB8:  MOVWF  x4D
11DBA:  MOVLW  9C
11DBC:  MOVWF  x4E
11DBE:  MOVLB  0
11DC0:  CALL   47E8
.................... 				mensagem (2,0);
11DC4:  MOVLW  02
11DC6:  MOVLB  A
11DC8:  MOVWF  x4D
11DCA:  CLRF   x4E
11DCC:  MOVLB  0
11DCE:  CALL   47E8
.................... 				mensagem (2,157);
11DD2:  MOVLW  02
11DD4:  MOVLB  A
11DD6:  MOVWF  x4D
11DD8:  MOVLW  9D
11DDA:  MOVWF  x4E
11DDC:  MOVLB  0
11DDE:  CALL   47E8
.................... 				exibiu = 1;
11DE2:  BSF    29.6
.................... 			}
.................... 			lcd_gotoxy(10,2);
11DE4:  MOVLW  0A
11DE6:  MOVLB  A
11DE8:  MOVWF  x62
11DEA:  MOVLW  02
11DEC:  MOVWF  x63
11DEE:  MOVLB  0
11DF0:  CALL   46C4
.................... 			if (programando == 1){
11DF4:  BTFSS  29.5
11DF6:  BRA    11F0C
.................... 				if (piscar){
11DF8:  BTFSS  29.7
11DFA:  BRA    11E22
.................... 					display(' ');
11DFC:  MOVLW  20
11DFE:  MOVLB  A
11E00:  MOVWF  x4F
11E02:  MOVLB  0
11E04:  CALL   4770
.................... 					display(' ');
11E08:  MOVLW  20
11E0A:  MOVLB  A
11E0C:  MOVWF  x4F
11E0E:  MOVLB  0
11E10:  CALL   4770
.................... 					display(' ');
11E14:  MOVLW  20
11E16:  MOVLB  A
11E18:  MOVWF  x4F
11E1A:  MOVLB  0
11E1C:  CALL   4770
.................... 				}
11E20:  BRA    11F0A
.................... 				else{
.................... 					switch(tabela_programa[17]){
11E22:  MOVLB  1
11E24:  MOVF   xF9,W
11E26:  MOVWF  00
11E28:  MOVF   xFA,W
11E2A:  MOVWF  03
11E2C:  MOVF   03,W
11E2E:  BNZ   11E38
11E30:  MOVF   00,F
11E32:  MOVLB  0
11E34:  BZ    11E64
11E36:  MOVLB  1
11E38:  MOVF   03,W
11E3A:  BNZ   11E46
11E3C:  MOVLW  01
11E3E:  SUBWF  00,W
11E40:  MOVLB  0
11E42:  BZ    11E8E
11E44:  MOVLB  1
11E46:  MOVF   03,W
11E48:  BNZ   11E54
11E4A:  MOVLW  02
11E4C:  SUBWF  00,W
11E4E:  MOVLB  0
11E50:  BZ    11EB8
11E52:  MOVLB  1
11E54:  MOVF   03,W
11E56:  BNZ   11E62
11E58:  MOVLW  03
11E5A:  SUBWF  00,W
11E5C:  MOVLB  0
11E5E:  BZ    11EE2
11E60:  MOVLB  1
11E62:  BRA    11F08
.................... 						case 0:{
.................... 							display('N');
11E64:  MOVLW  4E
11E66:  MOVLB  A
11E68:  MOVWF  x4F
11E6A:  MOVLB  0
11E6C:  CALL   4770
.................... 							display('O');
11E70:  MOVLW  4F
11E72:  MOVLB  A
11E74:  MOVWF  x4F
11E76:  MOVLB  0
11E78:  CALL   4770
.................... 							display('R');
11E7C:  MOVLW  52
11E7E:  MOVLB  A
11E80:  MOVWF  x4F
11E82:  MOVLB  0
11E84:  CALL   4770
.................... 							break;
11E88:  MOVLB  1
11E8A:  BRA    11F08
11E8C:  MOVLB  0
.................... 						}
.................... 						case 1:{
.................... 							display('E');
11E8E:  MOVLW  45
11E90:  MOVLB  A
11E92:  MOVWF  x4F
11E94:  MOVLB  0
11E96:  CALL   4770
.................... 							display('S');
11E9A:  MOVLW  53
11E9C:  MOVLB  A
11E9E:  MOVWF  x4F
11EA0:  MOVLB  0
11EA2:  CALL   4770
.................... 							display('T');
11EA6:  MOVLW  54
11EA8:  MOVLB  A
11EAA:  MOVWF  x4F
11EAC:  MOVLB  0
11EAE:  CALL   4770
.................... 							break;
11EB2:  MOVLB  1
11EB4:  BRA    11F08
11EB6:  MOVLB  0
.................... 						}
.................... 						case 2:{
.................... 							display('G');
11EB8:  MOVLW  47
11EBA:  MOVLB  A
11EBC:  MOVWF  x4F
11EBE:  MOVLB  0
11EC0:  CALL   4770
.................... 							display('R');
11EC4:  MOVLW  52
11EC6:  MOVLB  A
11EC8:  MOVWF  x4F
11ECA:  MOVLB  0
11ECC:  CALL   4770
.................... 							display('A');
11ED0:  MOVLW  41
11ED2:  MOVLB  A
11ED4:  MOVWF  x4F
11ED6:  MOVLB  0
11ED8:  CALL   4770
.................... 							break;
11EDC:  MOVLB  1
11EDE:  BRA    11F08
11EE0:  MOVLB  0
.................... 						}
.................... 						case 3:{
.................... 							display('M');
11EE2:  MOVLW  4D
11EE4:  MOVLB  A
11EE6:  MOVWF  x4F
11EE8:  MOVLB  0
11EEA:  CALL   4770
.................... 							display('I');
11EEE:  MOVLW  49
11EF0:  MOVLB  A
11EF2:  MOVWF  x4F
11EF4:  MOVLB  0
11EF6:  CALL   4770
.................... 							display('S');
11EFA:  MOVLW  53
11EFC:  MOVLB  A
11EFE:  MOVWF  x4F
11F00:  MOVLB  0
11F02:  CALL   4770
.................... 							break;
11F06:  MOVLB  1
11F08:  MOVLB  0
.................... 						}
.................... 					}
.................... 				}
.................... 			}
11F0A:  BRA    11FF4
.................... 			else{
.................... 				switch(tabela_programa[17]){
11F0C:  MOVLB  1
11F0E:  MOVF   xF9,W
11F10:  MOVWF  00
11F12:  MOVF   xFA,W
11F14:  MOVWF  03
11F16:  MOVF   03,W
11F18:  BNZ   11F22
11F1A:  MOVF   00,F
11F1C:  MOVLB  0
11F1E:  BZ    11F4E
11F20:  MOVLB  1
11F22:  MOVF   03,W
11F24:  BNZ   11F30
11F26:  MOVLW  01
11F28:  SUBWF  00,W
11F2A:  MOVLB  0
11F2C:  BZ    11F78
11F2E:  MOVLB  1
11F30:  MOVF   03,W
11F32:  BNZ   11F3E
11F34:  MOVLW  02
11F36:  SUBWF  00,W
11F38:  MOVLB  0
11F3A:  BZ    11FA2
11F3C:  MOVLB  1
11F3E:  MOVF   03,W
11F40:  BNZ   11F4C
11F42:  MOVLW  03
11F44:  SUBWF  00,W
11F46:  MOVLB  0
11F48:  BZ    11FCC
11F4A:  MOVLB  1
11F4C:  BRA    11FF2
.................... 					case 0:{
.................... 						display('N');
11F4E:  MOVLW  4E
11F50:  MOVLB  A
11F52:  MOVWF  x4F
11F54:  MOVLB  0
11F56:  CALL   4770
.................... 						display('O');
11F5A:  MOVLW  4F
11F5C:  MOVLB  A
11F5E:  MOVWF  x4F
11F60:  MOVLB  0
11F62:  CALL   4770
.................... 						display('R');
11F66:  MOVLW  52
11F68:  MOVLB  A
11F6A:  MOVWF  x4F
11F6C:  MOVLB  0
11F6E:  CALL   4770
.................... 						break;
11F72:  MOVLB  1
11F74:  BRA    11FF2
11F76:  MOVLB  0
.................... 					}
.................... 					case 1:{
.................... 						display('E');
11F78:  MOVLW  45
11F7A:  MOVLB  A
11F7C:  MOVWF  x4F
11F7E:  MOVLB  0
11F80:  CALL   4770
.................... 						display('S');
11F84:  MOVLW  53
11F86:  MOVLB  A
11F88:  MOVWF  x4F
11F8A:  MOVLB  0
11F8C:  CALL   4770
.................... 						display('T');
11F90:  MOVLW  54
11F92:  MOVLB  A
11F94:  MOVWF  x4F
11F96:  MOVLB  0
11F98:  CALL   4770
.................... 						break;
11F9C:  MOVLB  1
11F9E:  BRA    11FF2
11FA0:  MOVLB  0
.................... 					}
.................... 					case 2:{
.................... 						display('G');
11FA2:  MOVLW  47
11FA4:  MOVLB  A
11FA6:  MOVWF  x4F
11FA8:  MOVLB  0
11FAA:  CALL   4770
.................... 						display('R');
11FAE:  MOVLW  52
11FB0:  MOVLB  A
11FB2:  MOVWF  x4F
11FB4:  MOVLB  0
11FB6:  CALL   4770
.................... 						display('A');
11FBA:  MOVLW  41
11FBC:  MOVLB  A
11FBE:  MOVWF  x4F
11FC0:  MOVLB  0
11FC2:  CALL   4770
.................... 						break;
11FC6:  MOVLB  1
11FC8:  BRA    11FF2
11FCA:  MOVLB  0
.................... 					}
.................... 					case 3:{
.................... 						display('M');
11FCC:  MOVLW  4D
11FCE:  MOVLB  A
11FD0:  MOVWF  x4F
11FD2:  MOVLB  0
11FD4:  CALL   4770
.................... 						display('I');
11FD8:  MOVLW  49
11FDA:  MOVLB  A
11FDC:  MOVWF  x4F
11FDE:  MOVLB  0
11FE0:  CALL   4770
.................... 						display('S');
11FE4:  MOVLW  53
11FE6:  MOVLB  A
11FE8:  MOVWF  x4F
11FEA:  MOVLB  0
11FEC:  CALL   4770
.................... 						break;
11FF0:  MOVLB  1
11FF2:  MOVLB  0
.................... 					}
.................... 				}
.................... 			}
.................... 			break;
11FF4:  BRA    11FFA
.................... 		}
.................... 		default:{
.................... 			menu_aux = 1;
11FF6:  MOVLW  01
11FF8:  MOVWF  36
.................... 		}
.................... 	}
11FFA:  RETURN 0
.................... }
.................... 
.................... void salvar_programa(void){
.................... 	dem_cont_ponta[aux_tab] = tabela_programa[1];
11FFC:  BCF    FD8.0
11FFE:  RLCF   x80,W
12000:  CLRF   03
12002:  ADDLW  DB
12004:  MOVWF  FE9
12006:  MOVLW  04
12008:  ADDWFC 03,W
1200A:  MOVWF  FEA
1200C:  MOVFF  1DA,FEC
12010:  MOVF   FED,F
12012:  MOVFF  1D9,FEF
.................... 	dem_cont_fora_ponta[aux_tab] = tabela_programa[2];
12016:  BCF    FD8.0
12018:  RLCF   x80,W
1201A:  CLRF   03
1201C:  ADDLW  F5
1201E:  MOVWF  FE9
12020:  MOVLW  04
12022:  ADDWFC 03,W
12024:  MOVWF  FEA
12026:  MOVFF  1DC,FEC
1202A:  MOVF   FED,F
1202C:  MOVFF  1DB,FEF
.................... 	carga_programada = tabela_programa[3];
12030:  MOVFF  1DE,510
12034:  MOVFF  1DD,50F
.................... 	dia_inicio_pc = tabela_programa[4];
12038:  MOVFF  1DF,511
.................... 	mes_inicio_pc = tabela_programa[5];
1203C:  MOVFF  1E1,512
.................... 	dia_final_pc = tabela_programa[6];
12040:  MOVFF  1E3,513
.................... 	mes_final_pc = tabela_programa[7];
12044:  MOVFF  1E5,514
.................... 	hora_ponta = tabela_programa[8];
12048:  MOVFF  1E7,515
.................... 	minuto_ponta = tabela_programa[9];
1204C:  MOVFF  1E9,516
.................... 	hora_final_ponta = tabela_programa[10];
12050:  MOVFF  1EB,517
.................... 	minuto_final_ponta = tabela_programa[11];
12054:  MOVFF  1ED,518
.................... 	#if (com_rep == true)
.................... 		fat_conv_ativa = tabela_programa[12];
.................... 		fat_conv_reativa = tabela_programa[13];
.................... 	#endif
.................... 	#if (com_tc == true)
.................... 		valor_tc = tabela_programa[12];
12058:  MOVFF  1F0,4C0
1205C:  MOVFF  1EF,4BF
.................... 		valor_tp = tabela_programa[13];
12060:  MOVFF  1F2,4C2
12064:  MOVFF  1F1,4C1
.................... 	#endif
.................... 	endereco = tabela_programa[14];
12068:  MOVFF  1F3,4CE
.................... 	baud_rate = tabela_baud[tabela_programa[15]];
1206C:  BCF    FD8.0
1206E:  MOVLB  1
12070:  RLCF   xF5,W
12072:  MOVWF  02
12074:  RLCF   xF6,W
12076:  MOVWF  03
12078:  MOVF   02,W
1207A:  MOVLB  0
1207C:  CALL   0108
12080:  TBLRD*+
12082:  MOVFF  FF5,03
12086:  MOVLB  4
12088:  MOVWF  xC3
1208A:  MOVFF  03,4C4
.................... 	modo_saidas = tabela_programa[16];
1208E:  MOVFF  1F7,6C
.................... 	#if(com_rep)
.................... 		protocolo_REP = tabela_programa[17];
.................... 	#endif
.................... 
.................... 	busca_demanda_contratada();
12092:  MOVLB  0
12094:  CALL   6A36
.................... 
.................... 	salva_programa();
12098:  CALL   111E2
.................... 	valida_programa();
1209C:  CALL   36FE
....................  	exibe_programa();
120A0:  CALL   11776
.................... 	calcula_mul_tc();
120A4:  CALL   2AB8
120A8:  GOTO   122D0 (RETURN)
.................... }
.................... 
.................... void trata_menu4(void){
.................... 	char x;
.................... 
.................... 	if (qmenu != 4){
120AC:  MOVF   3A,W
120AE:  SUBLW  04
120B0:  BZ    120CA
.................... 		qmenu = 4;
120B2:  MOVLW  04
120B4:  MOVWF  3A
.................... 	 	exibiu = 0;
120B6:  BCF    29.6
.................... 		menu_aux = 1;
120B8:  MOVLW  01
120BA:  MOVWF  36
.................... 		time_out_menus = 60;
120BC:  MOVLW  3C
120BE:  MOVWF  31
.................... 		exibir_menu = 1;
120C0:  BSF    2B.6
.................... 		le_programa_st8500c();
120C2:  CALL   10C32
.................... 		reset_rolar();
120C6:  CALL   E704
.................... 	}
.................... 		
.................... 	
.................... 	if (tecla_up == 1){
120CA:  BTFSS  2A.5
120CC:  BRA    121DE
.................... 		exibir_menu = 1;
120CE:  BSF    2B.6
.................... 		tecla_up=0;
120D0:  BCF    2A.5
.................... 	 	exibiu = 0;
120D2:  BCF    29.6
.................... 		if (programando == 1){
120D4:  BTFSS  29.5
120D6:  BRA    120F0
.................... 			tempo_senha = 255;
120D8:  MOVLB  4
120DA:  SETF   xA6
.................... 	 		trata_up4_st8500c();
120DC:  MOVLB  0
120DE:  GOTO   10D1A
.................... 			if (tempo_senha != 255){
120E2:  MOVLB  4
120E4:  INCFSZ xA6,W
120E6:  BRA    120EA
120E8:  BRA    120EC
.................... 				tempo_senha++;
120EA:  INCF   xA6,F
.................... 			}
.................... 		}
120EC:  BRA    121DA
120EE:  MOVLB  0
.................... 		else{
.................... 			if (menu_aux > 0){
120F0:  MOVF   36,F
120F2:  BTFSC  FD8.2
120F4:  BRA    121CC
.................... 				if (menu_aux < 3){
120F6:  MOVF   36,W
120F8:  SUBLW  02
120FA:  BNC   12144
.................... 					if (menu_aux == 1){
120FC:  DECFSZ 36,W
120FE:  BRA    12140
.................... 						if (aux_tab > 0){
12100:  MOVF   x80,F
12102:  BZ    1213E
.................... 							aux_tab--;
12104:  DECF   x80,F
.................... 							menu_aux = 2;
12106:  MOVLW  02
12108:  MOVWF  36
.................... 							tabela_programa[1] = dem_cont_ponta[aux_tab];
1210A:  BCF    FD8.0
1210C:  RLCF   x80,W
1210E:  CLRF   03
12110:  ADDLW  DB
12112:  MOVWF  FE9
12114:  MOVLW  04
12116:  ADDWFC 03,W
12118:  MOVWF  FEA
1211A:  MOVFF  FEC,1DA
1211E:  MOVF   FED,F
12120:  MOVFF  FEF,1D9
.................... 							tabela_programa[2] = dem_cont_fora_ponta[aux_tab];
12124:  BCF    FD8.0
12126:  RLCF   x80,W
12128:  CLRF   03
1212A:  ADDLW  F5
1212C:  MOVWF  FE9
1212E:  MOVLW  04
12130:  ADDWFC 03,W
12132:  MOVWF  FEA
12134:  MOVFF  FEC,1DC
12138:  MOVF   FED,F
1213A:  MOVFF  FEF,1DB
.................... 						}
.................... 					}
1213E:  BRA    12142
.................... 					else{
.................... 						menu_aux--;
12140:  DECF   36,F
.................... 					}
.................... 				}
12142:  BRA    121CA
.................... 				else{
.................... 					if (menu_aux == 3){
12144:  MOVF   36,W
12146:  SUBLW  03
12148:  BNZ   12184
.................... 						aux_tab = 11;
1214A:  MOVLW  0B
1214C:  MOVWF  x80
.................... 						tabela_programa[1] = dem_cont_ponta[aux_tab];
1214E:  BCF    FD8.0
12150:  RLCF   x80,W
12152:  CLRF   03
12154:  ADDLW  DB
12156:  MOVWF  FE9
12158:  MOVLW  04
1215A:  ADDWFC 03,W
1215C:  MOVWF  FEA
1215E:  MOVFF  FEC,1DA
12162:  MOVF   FED,F
12164:  MOVFF  FEF,1D9
.................... 						tabela_programa[2] = dem_cont_fora_ponta[aux_tab];
12168:  BCF    FD8.0
1216A:  RLCF   x80,W
1216C:  CLRF   03
1216E:  ADDLW  F5
12170:  MOVWF  FE9
12172:  MOVLW  04
12174:  ADDWFC 03,W
12176:  MOVWF  FEA
12178:  MOVFF  FEC,1DC
1217C:  MOVF   FED,F
1217E:  MOVFF  FEF,1DB
.................... 					}
.................... 					#if (com_tc == true)
12182:  BRA    121C8
.................... 						else if (menu_aux == 13){
12184:  MOVF   36,W
12186:  SUBLW  0D
12188:  BNZ   121C8
.................... 							aux_tab = 18;
1218A:  MOVLW  12
1218C:  MOVWF  x80
.................... 							for (x = 0; x < (NRO_POSI_TC) ;x++){
1218E:  MOVLB  A
12190:  CLRF   x4A
12192:  MOVF   x4A,W
12194:  SUBLW  24
12196:  BNC   121C6
.................... 								if (tabela_programa[12] == tabela_tc[x]){
12198:  BCF    FD8.0
1219A:  RLCF   x4A,W
1219C:  CLRF   03
1219E:  MOVLB  0
121A0:  CALL   0128
121A4:  TBLRD*+
121A6:  MOVFF  FF5,03
121AA:  MOVLB  1
121AC:  SUBWF  xEF,W
121AE:  BNZ   121C0
121B0:  MOVF   03,W
121B2:  SUBWF  xF0,W
121B4:  BNZ   121C0
.................... 									aux_tab = x;
121B6:  MOVFF  A4A,80
.................... 									break;
121BA:  MOVLB  A
121BC:  BRA    121C6
121BE:  MOVLB  1
.................... 								}
121C0:  MOVLB  A
121C2:  INCF   x4A,F
121C4:  BRA    12192
121C6:  MOVLB  0
.................... 							}
.................... 						}
.................... 					#endif
.................... 					menu_aux--;
121C8:  DECF   36,F
.................... 				}
.................... 			}
121CA:  BRA    121D4
.................... 			else{
.................... 			 	if (menu_aux > 1){
121CC:  MOVF   36,W
121CE:  SUBLW  01
121D0:  BC    121D4
....................  					menu_aux--;
121D2:  DECF   36,F
....................  				}
....................  			}
.................... 			reset_rolar();
121D4:  CALL   E704
121D8:  MOVLB  4
.................... 		}
.................... 	}
121DA:  BRA    123D2
121DC:  MOVLB  0
.................... 	else if (tecla_down){
121DE:  BTFSS  2A.6
121E0:  BRA    122BA
.................... 		exibir_menu = 1;
121E2:  BSF    2B.6
.................... 		tecla_down = 0;
121E4:  BCF    2A.6
.................... 		exibiu = 0;
121E6:  BCF    29.6
.................... 		if (programando == 1){
121E8:  BTFSS  29.5
121EA:  BRA    12204
.................... 			tempo_senha = 255;
121EC:  MOVLB  4
121EE:  SETF   xA6
.................... 	 		trata_down4_st8500c();
121F0:  MOVLB  0
121F2:  GOTO   10F5E
.................... 			if (tempo_senha != 255){
121F6:  MOVLB  4
121F8:  INCFSZ xA6,W
121FA:  BRA    121FE
121FC:  BRA    12200
.................... 				tempo_senha++;
121FE:  INCF   xA6,F
.................... 			}
.................... 		}
12200:  BRA    122B6
12202:  MOVLB  0
.................... 		else{
.................... 			if (menu_aux < nro_menus4){
12204:  MOVF   36,W
12206:  SUBLW  0F
12208:  BNC   122B4
.................... 				if (menu_aux < 3){
1220A:  MOVF   36,W
1220C:  SUBLW  02
1220E:  BNC   1226A
.................... 					if (menu_aux == 2){
12210:  MOVF   36,W
12212:  SUBLW  02
12214:  BNZ   12266
.................... 						aux_tab++;
12216:  INCF   x80,F
.................... 						menu_aux = 1;
12218:  MOVLW  01
1221A:  MOVWF  36
.................... 						if (aux_tab<12){
1221C:  MOVF   x80,W
1221E:  SUBLW  0B
12220:  BNC   12256
.................... 							tabela_programa[1] = dem_cont_ponta[aux_tab];
12222:  BCF    FD8.0
12224:  RLCF   x80,W
12226:  CLRF   03
12228:  ADDLW  DB
1222A:  MOVWF  FE9
1222C:  MOVLW  04
1222E:  ADDWFC 03,W
12230:  MOVWF  FEA
12232:  MOVFF  FEC,1DA
12236:  MOVF   FED,F
12238:  MOVFF  FEF,1D9
.................... 							tabela_programa[2] = dem_cont_fora_ponta[aux_tab];
1223C:  BCF    FD8.0
1223E:  RLCF   x80,W
12240:  CLRF   03
12242:  ADDLW  F5
12244:  MOVWF  FE9
12246:  MOVLW  04
12248:  ADDWFC 03,W
1224A:  MOVWF  FEA
1224C:  MOVFF  FEC,1DC
12250:  MOVF   FED,F
12252:  MOVFF  FEF,1DB
.................... 						}
.................... 						if (aux_tab > 11){
12256:  MOVF   x80,W
12258:  SUBLW  0B
1225A:  BC    12264
.................... 							menu_aux = 3;
1225C:  MOVLW  03
1225E:  MOVWF  36
.................... 							aux_tab=11;
12260:  MOVLW  0B
12262:  MOVWF  x80
.................... 						}
.................... 					}
12264:  BRA    12268
.................... 					else{
.................... 						menu_aux++;
12266:  INCF   36,F
.................... 					}
.................... 				}
12268:  BRA    122B0
.................... 				else{
.................... 					#if (com_tc == true)
.................... 						if (menu_aux == 11){
1226A:  MOVF   36,W
1226C:  SUBLW  0B
1226E:  BNZ   122AE
.................... 							aux_tab = 18;
12270:  MOVLW  12
12272:  MOVWF  x80
.................... 							for (x = 0; x < (NRO_POSI_TC) ;x++){
12274:  MOVLB  A
12276:  CLRF   x4A
12278:  MOVF   x4A,W
1227A:  SUBLW  24
1227C:  BNC   122AC
.................... 								if (tabela_programa[12] == tabela_tc[x]){
1227E:  BCF    FD8.0
12280:  RLCF   x4A,W
12282:  CLRF   03
12284:  MOVLB  0
12286:  CALL   0128
1228A:  TBLRD*+
1228C:  MOVFF  FF5,03
12290:  MOVLB  1
12292:  SUBWF  xEF,W
12294:  BNZ   122A6
12296:  MOVF   03,W
12298:  SUBWF  xF0,W
1229A:  BNZ   122A6
.................... 									aux_tab = x;
1229C:  MOVFF  A4A,80
.................... 									break;
122A0:  MOVLB  A
122A2:  BRA    122AC
122A4:  MOVLB  1
.................... 								}
122A6:  MOVLB  A
122A8:  INCF   x4A,F
122AA:  BRA    12278
122AC:  MOVLB  0
.................... 							}
.................... 						}
.................... 					#endif
.................... 	 				menu_aux++;
122AE:  INCF   36,F
.................... 	 			}
.................... 				reset_rolar();
122B0:  CALL   E704
122B4:  MOVLB  4
.................... 	 		}
....................  		}
.................... 	}
122B6:  BRA    123D2
122B8:  MOVLB  0
.................... 	else if (tecla_enter){
122BA:  BTFSS  2B.0
122BC:  BRA    123A6
.................... 	 	tecla_enter = 0;
122BE:  BCF    2B.0
.................... 		exibir_menu = 1;
122C0:  BSF    2B.6
.................... 	 	exibiu = 0;
122C2:  BCF    29.6
.................... 		desativa_cursor();
122C4:  CALL   FFC0
.................... 		if (programando == 1){
122C8:  BTFSS  29.5
122CA:  BRA    1238E
.................... 			programando = 0;
122CC:  BCF    29.5
.................... 			salvar_programa();
122CE:  BRA    11FFC
.................... 		 	exibiu = 0;
122D0:  BCF    29.6
.................... 			exibir_menu = 1;
122D2:  BSF    2B.6
.................... 			if (menu_aux < 3){
122D4:  MOVF   36,W
122D6:  SUBLW  02
122D8:  BNC   12340
.................... 				if (aux_tab <= 11){
122DA:  MOVF   x80,W
122DC:  SUBLW  0B
122DE:  BNC   1233A
.................... 					if (menu_aux == 2){
122E0:  MOVF   36,W
122E2:  SUBLW  02
122E4:  BNZ   12336
.................... 						aux_tab++;
122E6:  INCF   x80,F
.................... 						menu_aux = 1;
122E8:  MOVLW  01
122EA:  MOVWF  36
.................... 						if (aux_tab<12) {
122EC:  MOVF   x80,W
122EE:  SUBLW  0B
122F0:  BNC   12326
.................... 							tabela_programa[1] = dem_cont_ponta[aux_tab];
122F2:  BCF    FD8.0
122F4:  RLCF   x80,W
122F6:  CLRF   03
122F8:  ADDLW  DB
122FA:  MOVWF  FE9
122FC:  MOVLW  04
122FE:  ADDWFC 03,W
12300:  MOVWF  FEA
12302:  MOVFF  FEC,1DA
12306:  MOVF   FED,F
12308:  MOVFF  FEF,1D9
.................... 							tabela_programa[2] = dem_cont_fora_ponta[aux_tab];
1230C:  BCF    FD8.0
1230E:  RLCF   x80,W
12310:  CLRF   03
12312:  ADDLW  F5
12314:  MOVWF  FE9
12316:  MOVLW  04
12318:  ADDWFC 03,W
1231A:  MOVWF  FEA
1231C:  MOVFF  FEC,1DC
12320:  MOVF   FED,F
12322:  MOVFF  FEF,1DB
.................... 						}
.................... 						if (aux_tab>11){
12326:  MOVF   x80,W
12328:  SUBLW  0B
1232A:  BC    12334
.................... 							menu_aux=3;
1232C:  MOVLW  03
1232E:  MOVWF  36
.................... 							aux_tab=11;
12330:  MOVLW  0B
12332:  MOVWF  x80
.................... 						}
.................... 					}
12334:  BRA    12338
.................... 					else{
.................... 						menu_aux++;
12336:  INCF   36,F
.................... 					}
.................... 				}
12338:  BRA    1233E
.................... 				else {
.................... 					menu_aux = 3;
1233A:  MOVLW  03
1233C:  MOVWF  36
.................... 				}
.................... 			}
1233E:  BRA    1238C
.................... 			else{
.................... 				if (menu_aux < nro_menus4){
12340:  MOVF   36,W
12342:  SUBLW  0F
12344:  BNC   1238C
.................... 					#if (com_tc == true)
.................... 						if (menu_aux == 11){
12346:  MOVF   36,W
12348:  SUBLW  0B
1234A:  BNZ   1238A
.................... 							aux_tab = 18;
1234C:  MOVLW  12
1234E:  MOVWF  x80
.................... 							for (x = 0; x < (NRO_POSI_TC) ;x++){
12350:  MOVLB  A
12352:  CLRF   x4A
12354:  MOVF   x4A,W
12356:  SUBLW  24
12358:  BNC   12388
.................... 								if (tabela_programa[12] == tabela_tc[x]){
1235A:  BCF    FD8.0
1235C:  RLCF   x4A,W
1235E:  CLRF   03
12360:  MOVLB  0
12362:  CALL   0128
12366:  TBLRD*+
12368:  MOVFF  FF5,03
1236C:  MOVLB  1
1236E:  SUBWF  xEF,W
12370:  BNZ   12382
12372:  MOVF   03,W
12374:  SUBWF  xF0,W
12376:  BNZ   12382
.................... 									aux_tab = x;
12378:  MOVFF  A4A,80
.................... 									break;
1237C:  MOVLB  A
1237E:  BRA    12388
12380:  MOVLB  1
.................... 								}
12382:  MOVLB  A
12384:  INCF   x4A,F
12386:  BRA    12354
12388:  MOVLB  0
.................... 							}
.................... 						}
.................... 					#endif
.................... 		 			menu_aux++;
1238A:  INCF   36,F
.................... 	 			}
.................... 			}
.................... 		}
1238C:  BRA    123A4
.................... 		else{
.................... 			if (tempo_senha == 0){
1238E:  MOVLB  4
12390:  MOVF   xA6,F
12392:  BNZ   123A0
.................... 				trata_senha();
12394:  MOVLB  0
12396:  CALL   FFE0
.................... 				return;
1239A:  BRA    123D8
.................... 			}
1239C:  BRA    123A4
1239E:  MOVLB  4
.................... 			else{
.................... 				programando = 1;
123A0:  BSF    29.5
123A2:  MOVLB  0
.................... 			}
.................... 		}
.................... 	}		
123A4:  BRA    123D0
.................... 	else if (tecla_reset){
123A6:  BTFSS  2B.1
123A8:  BRA    123D0
.................... 		exibir_menu = 1;
123AA:  BSF    2B.6
.................... 		tecla_reset=0;
123AC:  BCF    2B.1
.................... 		reset_rolar();
123AE:  CALL   E704
.................... 		desativa_cursor();
123B2:  CALL   FFC0
.................... 		if (programando == 1){
123B6:  BTFSS  29.5
123B8:  BRA    123C2
.................... 			programando = 0;
123BA:  BCF    29.5
.................... 			le_programa_st8500c();
123BC:  CALL   10C32
.................... 		}
123C0:  BRA    123D0
.................... 		else{
.................... 			menu_aux = 0;
123C2:  CLRF   36
.................... 			menu1 = 4;
123C4:  MOVLW  04
123C6:  MOVWF  35
.................... 			qmenu = 0;
123C8:  CLRF   3A
.................... 			exibe_menu();
123CA:  CALL   E70A
.................... 			return;
123CE:  BRA    123D8
123D0:  MOVLB  4
.................... 		}
.................... 	}
.................... 	exibe_programa();
123D2:  MOVLB  0
123D4:  CALL   11776
123D8:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... #if (st8500c == true)
.................... 	#include "st8500_men5.c"		// menu cargas
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610_MEN5                                                    *
.................... ; Funcao: TRATAMENTO DO MENU DE PROGRAMAÇÃO DE BANCOS					 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
....................   
.................... 
.................... 
.................... void exibe_programa_cargas(void)
.................... {
.................... 	char x;
.................... 	if (exibir_menu == 0)
123DA:  BTFSC  2B.6
123DC:  BRA    123E0
.................... 		{
.................... 		return;
123DE:  BRA    12916
.................... 		}
.................... 	exibir_menu = 0;
123E0:  BCF    2B.6
.................... 	
.................... 	if (menu_aux == 0)
123E2:  MOVF   36,F
123E4:  BNZ   123EA
.................... 		{
.................... 		menu_aux = 1;
123E6:  MOVLW  01
123E8:  MOVWF  36
.................... 		}
.................... 	if (menu_aux < 7)
123EA:  MOVF   36,W
123EC:  SUBLW  06
123EE:  BNC   123F4
.................... 		{
.................... 		desativa_cursor();
123F0:  CALL   FFC0
.................... 		}
.................... 	switch (menu_aux)
123F4:  MOVF   36,W
123F6:  XORLW  01
123F8:  BZ    12424
123FA:  XORLW  03
123FC:  BZ    1246A
123FE:  XORLW  01
12400:  BTFSC  FD8.2
12402:  BRA    12518
12404:  XORLW  07
12406:  BTFSC  FD8.2
12408:  BRA    1255E
1240A:  XORLW  01
1240C:  BTFSC  FD8.2
1240E:  BRA    12594
12410:  XORLW  03
12412:  BTFSC  FD8.2
12414:  BRA    125CA
12416:  XORLW  01
12418:  BTFSC  FD8.2
1241A:  BRA    1262C
1241C:  XORLW  0F
1241E:  BTFSC  FD8.2
12420:  BRA    1269E
12422:  BRA    12912
.................... 		{
.................... 		case 1:		//Número de Cargas
.................... 			{
.................... 			if (exibiu == 0)
12424:  BTFSC  29.6
12426:  BRA    1244A
.................... 				{
.................... 				mensagem (1,8);
12428:  MOVLW  01
1242A:  MOVLB  A
1242C:  MOVWF  x4D
1242E:  MOVLW  08
12430:  MOVWF  x4E
12432:  MOVLB  0
12434:  CALL   47E8
.................... 				mensagem (2,14);
12438:  MOVLW  02
1243A:  MOVLB  A
1243C:  MOVWF  x4D
1243E:  MOVLW  0E
12440:  MOVWF  x4E
12442:  MOVLB  0
12444:  CALL   47E8
.................... 				exibiu = 1;
12448:  BSF    29.6
.................... 				}
.................... 			displayp (31,tabela_programa[1],2,0,'P');
1244A:  MOVLW  1F
1244C:  MOVLB  A
1244E:  MOVWF  x4E
12450:  MOVFF  1DA,A50
12454:  MOVFF  1D9,A4F
12458:  MOVLW  02
1245A:  MOVWF  x51
1245C:  CLRF   x52
1245E:  MOVLW  50
12460:  MOVWF  x53
12462:  MOVLB  0
12464:  CALL   5038
.................... 			break;
12468:  BRA    12916
.................... 			}
.................... 		case 2:		//Tipo de controle
.................... 			{
.................... 			if (exibiu == 0)
1246A:  BTFSC  29.6
1246C:  BRA    12480
.................... 				{
.................... 				mensagem (1,159);
1246E:  MOVLW  01
12470:  MOVLB  A
12472:  MOVWF  x4D
12474:  MOVLW  9F
12476:  MOVWF  x4E
12478:  MOVLB  0
1247A:  CALL   47E8
.................... 				exibiu = 1;
1247E:  BSF    29.6
.................... 				}
.................... 			if (tabela_programa[2] == 0)
12480:  MOVLB  1
12482:  MOVF   xDB,F
12484:  BNZ   124CC
12486:  MOVF   xDC,F
12488:  BNZ   124CC
.................... 				{
.................... 				if (programando == true)
1248A:  BTFSS  29.5
1248C:  BRA    124B8
.................... 					{
.................... 					if (piscar == 1)
1248E:  BTFSS  29.7
12490:  BRA    124A4
.................... 						{
.................... 						mensagem (2,0);
12492:  MOVLW  02
12494:  MOVLB  A
12496:  MOVWF  x4D
12498:  CLRF   x4E
1249A:  MOVLB  0
1249C:  CALL   47E8
.................... 						}
124A0:  BRA    124B4
124A2:  MOVLB  1
.................... 					else
.................... 						{
.................... 						mensagem (2,160);
124A4:  MOVLW  02
124A6:  MOVLB  A
124A8:  MOVWF  x4D
124AA:  MOVLW  A0
124AC:  MOVWF  x4E
124AE:  MOVLB  0
124B0:  CALL   47E8
.................... 						}
.................... 					}
124B4:  BRA    124C8
124B6:  MOVLB  1
.................... 				else
.................... 					{
.................... 					mensagem (2,160);
124B8:  MOVLW  02
124BA:  MOVLB  A
124BC:  MOVWF  x4D
124BE:  MOVLW  A0
124C0:  MOVWF  x4E
124C2:  MOVLB  0
124C4:  CALL   47E8
.................... 					}
.................... 				}
124C8:  BRA    12512
124CA:  MOVLB  1
.................... 			else if (tabela_programa[2] == 1)
124CC:  DECFSZ xDB,W
124CE:  BRA    12514
124D0:  MOVF   xDC,F
124D2:  BNZ   12514
.................... 				{
.................... 				if (programando == true)
124D4:  BTFSS  29.5
124D6:  BRA    12502
.................... 					{
.................... 					if (piscar == 1)
124D8:  BTFSS  29.7
124DA:  BRA    124EE
.................... 						{
.................... 						mensagem (2,0);
124DC:  MOVLW  02
124DE:  MOVLB  A
124E0:  MOVWF  x4D
124E2:  CLRF   x4E
124E4:  MOVLB  0
124E6:  CALL   47E8
.................... 						}
124EA:  BRA    124FE
124EC:  MOVLB  1
.................... 					else
.................... 						{
.................... 						mensagem (2,161);
124EE:  MOVLW  02
124F0:  MOVLB  A
124F2:  MOVWF  x4D
124F4:  MOVLW  A1
124F6:  MOVWF  x4E
124F8:  MOVLB  0
124FA:  CALL   47E8
.................... 						}
.................... 					}
124FE:  BRA    12512
12500:  MOVLB  1
.................... 				else
.................... 					{
.................... 					mensagem (2,161);
12502:  MOVLW  02
12504:  MOVLB  A
12506:  MOVWF  x4D
12508:  MOVLW  A1
1250A:  MOVWF  x4E
1250C:  MOVLB  0
1250E:  CALL   47E8
12512:  MOVLB  1
.................... 					}
.................... 				}
.................... 			break;
12514:  MOVLB  0
12516:  BRA    12916
.................... 			}
.................... 		case 3:		//Máximo Acionamento
.................... 			{
.................... 			if (exibiu == 0)
12518:  BTFSC  29.6
1251A:  BRA    1253E
.................... 				{
.................... 				mensagem (1,8);
1251C:  MOVLW  01
1251E:  MOVLB  A
12520:  MOVWF  x4D
12522:  MOVLW  08
12524:  MOVWF  x4E
12526:  MOVLB  0
12528:  CALL   47E8
.................... 				mensagem (2,16);
1252C:  MOVLW  02
1252E:  MOVLB  A
12530:  MOVWF  x4D
12532:  MOVLW  10
12534:  MOVWF  x4E
12536:  MOVLB  0
12538:  CALL   47E8
.................... 				exibiu = 1;
1253C:  BSF    29.6
.................... 				}
.................... 			displayp (27,tabela_programa[3],4,0,'P');
1253E:  MOVLW  1B
12540:  MOVLB  A
12542:  MOVWF  x4E
12544:  MOVFF  1DE,A50
12548:  MOVFF  1DD,A4F
1254C:  MOVLW  04
1254E:  MOVWF  x51
12550:  CLRF   x52
12552:  MOVLW  50
12554:  MOVWF  x53
12556:  MOVLB  0
12558:  CALL   5038
.................... 			break;
1255C:  BRA    12916
.................... 			}
.................... 		case 4:		//Tempo de Acionamento
.................... 			{
.................... 			if (exibiu == 0)
1255E:  BTFSC  29.6
12560:  BRA    12574
.................... 				{
.................... 				mensagem (2,18);
12562:  MOVLW  02
12564:  MOVLB  A
12566:  MOVWF  x4D
12568:  MOVLW  12
1256A:  MOVWF  x4E
1256C:  MOVLB  0
1256E:  CALL   47E8
.................... 				exibiu = 1;
12572:  BSF    29.6
.................... 				}
.................... 				displayp (29,tabela_programa[4],3,0,'P');
12574:  MOVLW  1D
12576:  MOVLB  A
12578:  MOVWF  x4E
1257A:  MOVFF  1E0,A50
1257E:  MOVFF  1DF,A4F
12582:  MOVLW  03
12584:  MOVWF  x51
12586:  CLRF   x52
12588:  MOVLW  50
1258A:  MOVWF  x53
1258C:  MOVLB  0
1258E:  CALL   5038
.................... 			break;
12592:  BRA    12916
.................... 			}
.................... 		case 5:		//Tempo Desaciona
.................... 			{
.................... 			if (exibiu == 0)
12594:  BTFSC  29.6
12596:  BRA    125AA
.................... 				{
.................... 				mensagem (2,137);
12598:  MOVLW  02
1259A:  MOVLB  A
1259C:  MOVWF  x4D
1259E:  MOVLW  89
125A0:  MOVWF  x4E
125A2:  MOVLB  0
125A4:  CALL   47E8
.................... 				exibiu = 1;
125A8:  BSF    29.6
.................... 				}
.................... 				displayp (29,tabela_programa[5],3,0,'P');
125AA:  MOVLW  1D
125AC:  MOVLB  A
125AE:  MOVWF  x4E
125B0:  MOVFF  1E2,A50
125B4:  MOVFF  1E1,A4F
125B8:  MOVLW  03
125BA:  MOVWF  x51
125BC:  CLRF   x52
125BE:  MOVLW  50
125C0:  MOVWF  x53
125C2:  MOVLB  0
125C4:  CALL   5038
.................... 			break;
125C8:  BRA    12916
.................... 			}
.................... 		case 6:		//Valor de Cada Carga
.................... 			{
.................... 			if (exibiu == 0)
125CA:  BTFSC  29.6
125CC:  BRA    125E0
.................... 				{
.................... 				mensagem (2,19);
125CE:  MOVLW  02
125D0:  MOVLB  A
125D2:  MOVWF  x4D
125D4:  MOVLW  13
125D6:  MOVWF  x4E
125D8:  MOVLB  0
125DA:  CALL   47E8
.................... 				exibiu = 1;
125DE:  BSF    29.6
.................... 				}
.................... 			displayp (23,aux_tab + 1,2,0,0);
125E0:  MOVLW  01
125E2:  ADDWF  x80,W
125E4:  MOVLB  A
125E6:  MOVWF  x4D
125E8:  MOVLW  17
125EA:  MOVWF  x4E
125EC:  CLRF   x50
125EE:  MOVFF  A4D,A4F
125F2:  MOVLW  02
125F4:  MOVWF  x51
125F6:  CLRF   x52
125F8:  CLRF   x53
125FA:  MOVLB  0
125FC:  CALL   5038
.................... 			displayp (27,tabela_valor_cargas[aux_tab],3,0,'P');
12600:  CLRF   03
12602:  MOVF   x80,W
12604:  ADDLW  37
12606:  MOVWF  FE9
12608:  MOVLW  01
1260A:  ADDWFC 03,W
1260C:  MOVWF  FEA
1260E:  MOVFF  FEF,A4F
12612:  MOVLW  1B
12614:  MOVLB  A
12616:  MOVWF  x4E
12618:  CLRF   x50
1261A:  MOVLW  03
1261C:  MOVWF  x51
1261E:  CLRF   x52
12620:  MOVLW  50
12622:  MOVWF  x53
12624:  MOVLB  0
12626:  CALL   5038
.................... 			break;
1262A:  BRA    12916
.................... 			}
.................... 		case 7:		//Tempo de Repouso de Cada Carga
.................... 			{
.................... 			if (exibiu == 0)
1262C:  BTFSC  29.6
1262E:  BRA    12652
.................... 				{
.................... 				mensagem (1,8);
12630:  MOVLW  01
12632:  MOVLB  A
12634:  MOVWF  x4D
12636:  MOVLW  08
12638:  MOVWF  x4E
1263A:  MOVLB  0
1263C:  CALL   47E8
.................... 				mensagem (2,20);
12640:  MOVLW  02
12642:  MOVLB  A
12644:  MOVWF  x4D
12646:  MOVLW  14
12648:  MOVWF  x4E
1264A:  MOVLB  0
1264C:  CALL   47E8
.................... 				exibiu = 1;
12650:  BSF    29.6
.................... 				}
.................... 			displayp (25,aux_tab + 1,2,0,0);
12652:  MOVLW  01
12654:  ADDWF  x80,W
12656:  MOVLB  A
12658:  MOVWF  x4D
1265A:  MOVLW  19
1265C:  MOVWF  x4E
1265E:  CLRF   x50
12660:  MOVFF  A4D,A4F
12664:  MOVLW  02
12666:  MOVWF  x51
12668:  CLRF   x52
1266A:  CLRF   x53
1266C:  MOVLB  0
1266E:  CALL   5038
.................... 			displayp (28,tabela_tempo_repouso[aux_tab],3,0,'P');
12672:  CLRF   03
12674:  MOVF   x80,W
12676:  ADDLW  48
12678:  MOVWF  FE9
1267A:  MOVLW  01
1267C:  ADDWFC 03,W
1267E:  MOVWF  FEA
12680:  MOVFF  FEF,A4F
12684:  MOVLW  1C
12686:  MOVLB  A
12688:  MOVWF  x4E
1268A:  CLRF   x50
1268C:  MOVLW  03
1268E:  MOVWF  x51
12690:  CLRF   x52
12692:  MOVLW  50
12694:  MOVWF  x53
12696:  MOVLB  0
12698:  CALL   5038
.................... 			break;
1269C:  BRA    12916
.................... 			}
.................... 		case 8:		// se carga tem controle por horario ou pro demanda e se tiver programação pro horário, programar o horario
.................... 			{
.................... 			if (exibiu == 0)
1269E:  BTFSC  29.6
126A0:  BRA    12770
.................... 				{
.................... 				//		1234567890123456
.................... 				//		Modo Carga: @@-X		onde o X = D(demanda) ou H(horario)
.................... 				//		 L-??:?? D-??:??
.................... 				if (aux_tab2 == 0)
126A2:  MOVF   x81,F
126A4:  BNZ   126C8
.................... 					{
.................... 					mensagem (1,8);
126A6:  MOVLW  01
126A8:  MOVLB  A
126AA:  MOVWF  x4D
126AC:  MOVLW  08
126AE:  MOVWF  x4E
126B0:  MOVLB  0
126B2:  CALL   47E8
.................... 					mensagem (2,158);
126B6:  MOVLW  02
126B8:  MOVLB  A
126BA:  MOVWF  x4D
126BC:  MOVLW  9E
126BE:  MOVWF  x4E
126C0:  MOVLB  0
126C2:  CALL   47E8
.................... 					}
126C6:  BRA    1274E
.................... 				else
.................... 					{
.................... 					if (forma_controle[aux_tab] == 'H')
126C8:  CLRF   03
126CA:  MOVF   x80,W
126CC:  ADDLW  59
126CE:  MOVWF  FE9
126D0:  MOVLW  01
126D2:  ADDWFC 03,W
126D4:  MOVWF  FEA
126D6:  MOVF   FEF,W
126D8:  SUBLW  48
126DA:  BNZ   1272E
.................... 						{
.................... 						mensagem (1,158);
126DC:  MOVLW  01
126DE:  MOVLB  A
126E0:  MOVWF  x4D
126E2:  MOVLW  9E
126E4:  MOVWF  x4E
126E6:  MOVLB  0
126E8:  CALL   47E8
.................... 					    displayp(13,aux_tab+1,2,0,0);
126EC:  MOVLW  01
126EE:  ADDWF  x80,W
126F0:  MOVLB  A
126F2:  MOVWF  x4D
126F4:  MOVLW  0D
126F6:  MOVWF  x4E
126F8:  CLRF   x50
126FA:  MOVFF  A4D,A4F
126FE:  MOVLW  02
12700:  MOVWF  x51
12702:  CLRF   x52
12704:  CLRF   x53
12706:  MOVLB  0
12708:  CALL   5038
.................... 						lcd_gotoxy(16,1);
1270C:  MOVLW  10
1270E:  MOVLB  A
12710:  MOVWF  x62
12712:  MOVLW  01
12714:  MOVWF  x63
12716:  MOVLB  0
12718:  CALL   46C4
.................... 					    wr_lcd(1,'H');
1271C:  MOVLW  01
1271E:  MOVLB  A
12720:  MOVWF  x65
12722:  MOVLW  48
12724:  MOVWF  x66
12726:  MOVLB  0
12728:  CALL   1864
.................... 						}
1272C:  BRA    1273E
.................... 					else
.................... 						{
.................... 						mensagem (1,8);
1272E:  MOVLW  01
12730:  MOVLB  A
12732:  MOVWF  x4D
12734:  MOVLW  08
12736:  MOVWF  x4E
12738:  MOVLB  0
1273A:  CALL   47E8
.................... 						}
.................... 					mensagem (2,136);
1273E:  MOVLW  02
12740:  MOVLB  A
12742:  MOVWF  x4D
12744:  MOVLW  88
12746:  MOVWF  x4E
12748:  MOVLB  0
1274A:  CALL   47E8
.................... 					}
.................... 				exibiu = 1;
1274E:  BSF    29.6
.................... 
.................... 				tabela_pisca[0] = 0;
12750:  MOVLB  1
12752:  CLRF   xD1
.................... 				tabela_pisca[1] = 0;
12754:  CLRF   xD2
.................... 				tabela_pisca[2] = 0;
12756:  CLRF   xD3
.................... 				tabela_pisca[3] = 0;
12758:  CLRF   xD4
.................... 				tabela_pisca[4] = 0;
1275A:  CLRF   xD5
.................... 				tabela_pisca[aux_tab2] = 'P';
1275C:  CLRF   03
1275E:  MOVLB  0
12760:  MOVF   x81,W
12762:  ADDLW  D1
12764:  MOVWF  FE9
12766:  MOVLW  01
12768:  ADDWFC 03,W
1276A:  MOVWF  FEA
1276C:  MOVLW  50
1276E:  MOVWF  FEF
.................... 				}
.................... 			if (aux_tab2 == 0)
12770:  MOVF   x81,F
12772:  BNZ   127F2
.................... 				{
.................... 			    displayp(29,aux_tab+1,2,0,0);
12774:  MOVLW  01
12776:  ADDWF  x80,W
12778:  MOVLB  A
1277A:  MOVWF  x4D
1277C:  MOVLW  1D
1277E:  MOVWF  x4E
12780:  CLRF   x50
12782:  MOVFF  A4D,A4F
12786:  MOVLW  02
12788:  MOVWF  x51
1278A:  CLRF   x52
1278C:  CLRF   x53
1278E:  MOVLB  0
12790:  CALL   5038
.................... 				lcd_gotoxy(16,2);
12794:  MOVLW  10
12796:  MOVLB  A
12798:  MOVWF  x62
1279A:  MOVLW  02
1279C:  MOVWF  x63
1279E:  MOVLB  0
127A0:  CALL   46C4
.................... 				if (piscar == 1)
127A4:  BTFSS  29.7
127A6:  BRA    127BA
.................... 					{
.................... 				    wr_lcd(1,' ');
127A8:  MOVLW  01
127AA:  MOVLB  A
127AC:  MOVWF  x65
127AE:  MOVLW  20
127B0:  MOVWF  x66
127B2:  MOVLB  0
127B4:  CALL   1864
.................... 					}
127B8:  BRA    127F0
.................... 				else
.................... 					{
.................... 					if (forma_controle[aux_tab] == 'H')
127BA:  CLRF   03
127BC:  MOVF   x80,W
127BE:  ADDLW  59
127C0:  MOVWF  FE9
127C2:  MOVLW  01
127C4:  ADDWFC 03,W
127C6:  MOVWF  FEA
127C8:  MOVF   FEF,W
127CA:  SUBLW  48
127CC:  BNZ   127E0
.................... 						{
.................... 					    wr_lcd(1,'H');
127CE:  MOVLW  01
127D0:  MOVLB  A
127D2:  MOVWF  x65
127D4:  MOVLW  48
127D6:  MOVWF  x66
127D8:  MOVLB  0
127DA:  CALL   1864
.................... 						}
127DE:  BRA    127F0
.................... 					else
.................... 						{
.................... 					    wr_lcd(1,'D');
127E0:  MOVLW  01
127E2:  MOVLB  A
127E4:  MOVWF  x65
127E6:  MOVLW  44
127E8:  MOVWF  x66
127EA:  MOVLB  0
127EC:  CALL   1864
.................... 					    }
.................... 					}
.................... 				}
127F0:  BRA    1289A
.................... 			else
.................... 				{
.................... 			    displayp(20,hora_desliga_controle[aux_tab],2,0,tabela_pisca[1]);
127F2:  CLRF   03
127F4:  MOVF   x80,W
127F6:  ADDLW  8C
127F8:  MOVWF  FE9
127FA:  MOVLW  01
127FC:  ADDWFC 03,W
127FE:  MOVWF  FEA
12800:  MOVFF  FEF,A4F
12804:  MOVLW  14
12806:  MOVLB  A
12808:  MOVWF  x4E
1280A:  CLRF   x50
1280C:  MOVLW  02
1280E:  MOVWF  x51
12810:  CLRF   x52
12812:  MOVFF  1D2,A53
12816:  MOVLB  0
12818:  CALL   5038
.................... 			    displayp(23,minuto_desliga_controle[aux_tab],2,0,tabela_pisca[2]);
1281C:  CLRF   03
1281E:  MOVF   x80,W
12820:  ADDLW  9D
12822:  MOVWF  FE9
12824:  MOVLW  01
12826:  ADDWFC 03,W
12828:  MOVWF  FEA
1282A:  MOVFF  FEF,A4F
1282E:  MOVLW  17
12830:  MOVLB  A
12832:  MOVWF  x4E
12834:  CLRF   x50
12836:  MOVLW  02
12838:  MOVWF  x51
1283A:  CLRF   x52
1283C:  MOVFF  1D3,A53
12840:  MOVLB  0
12842:  CALL   5038
.................... 			    displayp(28,hora_liga_controle[aux_tab],2,0,tabela_pisca[3]);
12846:  CLRF   03
12848:  MOVF   x80,W
1284A:  ADDLW  6A
1284C:  MOVWF  FE9
1284E:  MOVLW  01
12850:  ADDWFC 03,W
12852:  MOVWF  FEA
12854:  MOVFF  FEF,A4F
12858:  MOVLW  1C
1285A:  MOVLB  A
1285C:  MOVWF  x4E
1285E:  CLRF   x50
12860:  MOVLW  02
12862:  MOVWF  x51
12864:  CLRF   x52
12866:  MOVFF  1D4,A53
1286A:  MOVLB  0
1286C:  CALL   5038
.................... 			    displayp(31,minuto_liga_controle[aux_tab],2,0,tabela_pisca[4]);
12870:  CLRF   03
12872:  MOVF   x80,W
12874:  ADDLW  7B
12876:  MOVWF  FE9
12878:  MOVLW  01
1287A:  ADDWFC 03,W
1287C:  MOVWF  FEA
1287E:  MOVFF  FEF,A4F
12882:  MOVLW  1F
12884:  MOVLB  A
12886:  MOVWF  x4E
12888:  CLRF   x50
1288A:  MOVLW  02
1288C:  MOVWF  x51
1288E:  CLRF   x52
12890:  MOVFF  1D5,A53
12894:  MOVLB  0
12896:  CALL   5038
.................... 			    }
.................... 			if (aux_tab2 == 0)
1289A:  MOVF   x81,F
1289C:  BNZ   128B0
.................... 				{
.................... 				lcd_gotoxy(18,2);
1289E:  MOVLW  12
128A0:  MOVLB  A
128A2:  MOVWF  x62
128A4:  MOVLW  02
128A6:  MOVWF  x63
128A8:  MOVLB  0
128AA:  CALL   46C4
.................... 				}
128AE:  BRA    1290C
.................... 			else if (aux_tab2 == 1)
128B0:  DECFSZ x81,W
128B2:  BRA    128C6
.................... 				{
.................... 				lcd_gotoxy(5,2);
128B4:  MOVLW  05
128B6:  MOVLB  A
128B8:  MOVWF  x62
128BA:  MOVLW  02
128BC:  MOVWF  x63
128BE:  MOVLB  0
128C0:  CALL   46C4
.................... 				}
128C4:  BRA    1290C
.................... 			else if (aux_tab2 == 2)
128C6:  MOVF   x81,W
128C8:  SUBLW  02
128CA:  BNZ   128DE
.................... 				{
.................... 				lcd_gotoxy(8,2);
128CC:  MOVLW  08
128CE:  MOVLB  A
128D0:  MOVWF  x62
128D2:  MOVLW  02
128D4:  MOVWF  x63
128D6:  MOVLB  0
128D8:  CALL   46C4
.................... 				}
128DC:  BRA    1290C
.................... 			else if (aux_tab2 == 3)
128DE:  MOVF   x81,W
128E0:  SUBLW  03
128E2:  BNZ   128F6
.................... 				{
.................... 				lcd_gotoxy(13,2);
128E4:  MOVLW  0D
128E6:  MOVLB  A
128E8:  MOVWF  x62
128EA:  MOVLW  02
128EC:  MOVWF  x63
128EE:  MOVLB  0
128F0:  CALL   46C4
.................... 				}
128F4:  BRA    1290C
.................... 			else if (aux_tab2 == 4)
128F6:  MOVF   x81,W
128F8:  SUBLW  04
128FA:  BNZ   1290C
.................... 				{
.................... 				lcd_gotoxy(16,2);
128FC:  MOVLW  10
128FE:  MOVLB  A
12900:  MOVWF  x62
12902:  MOVLW  02
12904:  MOVWF  x63
12906:  MOVLB  0
12908:  CALL   46C4
.................... 				}
.................... 			ativa_cursor();
1290C:  CALL   FFD0
.................... 			break;
12910:  BRA    12916
.................... 			}
.................... 		default:
.................... 			{
.................... 			menu_aux = 1;
12912:  MOVLW  01
12914:  MOVWF  36
.................... 			}
.................... 		}
12916:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... void salva_programa_cargas(void)
.................... {
.................... 	char x;
.................... 	nro_cargas = tabela_programa[1];
12918:  MOVFF  1D9,6D
.................... 	tipo_controle_demanda = tabela_programa[2];
1291C:  MOVFF  1DB,84
.................... 	max_kw = tabela_programa[3];
12920:  MOVFF  1DE,66
12924:  MOVFF  1DD,65
.................... 	write_word(ee_max_kw, max_kw);
12928:  MOVLW  02
1292A:  MOVLB  A
1292C:  MOVWF  x5D
1292E:  MOVLW  81
12930:  MOVWF  x5C
12932:  MOVFF  66,A5F
12936:  MOVFF  65,A5E
1293A:  MOVLB  0
1293C:  CALL   23AE
.................... 
.................... 	
.................... 	tempo_aciona = tabela_programa[4];
12940:  MOVFF  1DF,6A
.................... 	tempo_desaciona = tabela_programa[5];
12944:  MOVFF  1E1,6B
.................... 	for (x = 0; x < nro_cargas; x++)
12948:  MOVLB  A
1294A:  CLRF   x4B
1294C:  MOVLB  0
1294E:  MOVF   x6D,W
12950:  MOVLB  A
12952:  SUBWF  x4B,W
12954:  BC    129B6
.................... 		{
.................... 		carga[x] = tabela_valor_cargas[x];
12956:  CLRF   03
12958:  MOVF   x4B,W
1295A:  ADDLW  07
1295C:  MOVWF  01
1295E:  MOVLW  01
12960:  ADDWFC 03,F
12962:  MOVFF  03,A4D
12966:  CLRF   03
12968:  MOVF   x4B,W
1296A:  ADDLW  37
1296C:  MOVWF  FE9
1296E:  MOVLW  01
12970:  ADDWFC 03,W
12972:  MOVWF  FEA
12974:  MOVFF  FEF,A4E
12978:  MOVFF  A4D,FEA
1297C:  MOVFF  01,FE9
12980:  MOVFF  A4E,FEF
.................... 		tempo_repouso[x] = tabela_tempo_repouso[x];
12984:  CLRF   03
12986:  MOVF   x4B,W
12988:  ADDLW  E7
1298A:  MOVWF  01
1298C:  MOVLW  00
1298E:  ADDWFC 03,F
12990:  MOVFF  03,A4D
12994:  CLRF   03
12996:  MOVF   x4B,W
12998:  ADDLW  48
1299A:  MOVWF  FE9
1299C:  MOVLW  01
1299E:  ADDWFC 03,W
129A0:  MOVWF  FEA
129A2:  MOVFF  FEF,A4E
129A6:  MOVFF  A4D,FEA
129AA:  MOVFF  01,FE9
129AE:  MOVFF  A4E,FEF
129B2:  INCF   x4B,F
129B4:  BRA    1294C
.................... 		}
.................... 
.................... 	valida_max_kw();
129B6:  MOVLB  0
129B8:  CALL   35F8
.................... 	tabela_programa[3] = max_kw;
129BC:  MOVFF  66,1DE
129C0:  MOVFF  65,1DD
.................... 
.................... 	salva_programa();
129C4:  CALL   111E2
.................... 	valida_programa();
129C8:  CALL   36FE
....................  	exibe_programa_cargas();
129CC:  RCALL  123DA
129CE:  GOTO   13066 (RETURN)
.................... }
.................... 
.................... 
.................... void trata_menu5(void)
.................... {
.................... 	char x;
.................... 	if (qmenu != 5)
129D2:  MOVF   3A,W
129D4:  SUBLW  05
129D6:  BTFSC  FD8.2
129D8:  BRA    12AF8
.................... 		{
.................... 		qmenu = 5;
129DA:  MOVLW  05
129DC:  MOVWF  3A
.................... 		exibiu = 0;
129DE:  BCF    29.6
.................... 		menu_aux = 1;
129E0:  MOVLW  01
129E2:  MOVWF  36
.................... 		aux_tab2 = 0;
129E4:  CLRF   x81
.................... 		time_out_menus = 60;
129E6:  MOVLW  3C
129E8:  MOVWF  31
.................... 		
.................... 		aux_tab = 0;
129EA:  CLRF   x80
.................... 
.................... 		if ((nro_cargas == 0) || (nro_cargas > NRO_MAXIMO_CARGAS))
129EC:  MOVF   x6D,F
129EE:  BZ    129F6
129F0:  MOVF   x6D,W
129F2:  SUBLW  10
129F4:  BC    129FA
.................... 			{
.................... 			nro_cargas = (NRO_MAXIMO_CARGAS/2);
129F6:  MOVLW  08
129F8:  MOVWF  x6D
.................... 			}
.................... 		tabela_programa[1] = nro_cargas;
129FA:  MOVLB  1
129FC:  CLRF   xDA
129FE:  MOVFF  6D,1D9
.................... 		if (max_kw != 0)
12A02:  MOVLB  0
12A04:  MOVF   x65,F
12A06:  BNZ   12A0C
12A08:  MOVF   x66,F
12A0A:  BZ    12A54
.................... 			{
.................... 			for (x = 0; x < nro_cargas; x++)
12A0C:  MOVLB  A
12A0E:  CLRF   x4A
12A10:  MOVLB  0
12A12:  MOVF   x6D,W
12A14:  MOVLB  A
12A16:  SUBWF  x4A,W
12A18:  BC    12A52
.................... 				{
.................... 				if (max_kw < carga[x])
12A1A:  CLRF   03
12A1C:  MOVF   x4A,W
12A1E:  ADDLW  07
12A20:  MOVWF  FE9
12A22:  MOVLW  01
12A24:  ADDWFC 03,W
12A26:  MOVWF  FEA
12A28:  MOVF   FEF,W
12A2A:  MOVLB  0
12A2C:  MOVF   x66,F
12A2E:  BNZ   12A4C
12A30:  SUBWF  x65,W
12A32:  BC    12A4C
.................... 					{
.................... 					max_kw = carga[x];
12A34:  CLRF   03
12A36:  MOVLB  A
12A38:  MOVF   x4A,W
12A3A:  ADDLW  07
12A3C:  MOVWF  FE9
12A3E:  MOVLW  01
12A40:  ADDWFC 03,W
12A42:  MOVWF  FEA
12A44:  MOVLB  0
12A46:  CLRF   x66
12A48:  MOVFF  FEF,65
.................... 					}
12A4C:  MOVLB  A
12A4E:  INCF   x4A,F
12A50:  BRA    12A10
12A52:  MOVLB  0
.................... 				}
.................... 			}
.................... 		tabela_programa[2] = tipo_controle_demanda;
12A54:  MOVLB  1
12A56:  CLRF   xDC
12A58:  MOVFF  84,1DB
.................... 		tabela_programa[3] = max_kw;
12A5C:  MOVFF  66,1DE
12A60:  MOVFF  65,1DD
.................... 			
.................... 		if (tempo_aciona == 0)
12A64:  MOVLB  0
12A66:  MOVF   x6A,F
12A68:  BNZ   12A6E
.................... 			{
.................... 			tempo_aciona = 30;
12A6A:  MOVLW  1E
12A6C:  MOVWF  x6A
.................... 			}
.................... 		tabela_programa[4] = tempo_aciona;
12A6E:  MOVLB  1
12A70:  CLRF   xE0
12A72:  MOVFF  6A,1DF
.................... 		if (tempo_desaciona == 0)
12A76:  MOVLB  0
12A78:  MOVF   x6B,F
12A7A:  BNZ   12A80
.................... 			{
.................... 			tempo_desaciona = 30;
12A7C:  MOVLW  1E
12A7E:  MOVWF  x6B
.................... 			}
.................... 		tabela_programa[5] = tempo_desaciona;
12A80:  MOVLB  1
12A82:  CLRF   xE2
12A84:  MOVFF  6B,1E1
.................... 		for (x = 0; x < nro_cargas; x++)
12A88:  MOVLB  A
12A8A:  CLRF   x4A
12A8C:  MOVLB  0
12A8E:  MOVF   x6D,W
12A90:  MOVLB  A
12A92:  SUBWF  x4A,W
12A94:  BC    12AF6
.................... 			{
.................... 			tabela_valor_cargas[x] = carga[x];
12A96:  CLRF   03
12A98:  MOVF   x4A,W
12A9A:  ADDLW  37
12A9C:  MOVWF  01
12A9E:  MOVLW  01
12AA0:  ADDWFC 03,F
12AA2:  MOVFF  03,A4C
12AA6:  CLRF   03
12AA8:  MOVF   x4A,W
12AAA:  ADDLW  07
12AAC:  MOVWF  FE9
12AAE:  MOVLW  01
12AB0:  ADDWFC 03,W
12AB2:  MOVWF  FEA
12AB4:  MOVFF  FEF,A4D
12AB8:  MOVFF  A4C,FEA
12ABC:  MOVFF  01,FE9
12AC0:  MOVFF  A4D,FEF
.................... 			tabela_tempo_repouso[x] = tempo_repouso[x];
12AC4:  CLRF   03
12AC6:  MOVF   x4A,W
12AC8:  ADDLW  48
12ACA:  MOVWF  01
12ACC:  MOVLW  01
12ACE:  ADDWFC 03,F
12AD0:  MOVFF  03,A4C
12AD4:  CLRF   03
12AD6:  MOVF   x4A,W
12AD8:  ADDLW  E7
12ADA:  MOVWF  FE9
12ADC:  MOVLW  00
12ADE:  ADDWFC 03,W
12AE0:  MOVWF  FEA
12AE2:  MOVFF  FEF,A4D
12AE6:  MOVFF  A4C,FEA
12AEA:  MOVFF  01,FE9
12AEE:  MOVFF  A4D,FEF
12AF2:  INCF   x4A,F
12AF4:  BRA    12A8C
12AF6:  MOVLB  0
.................... 			}
.................... 		}
.................... 
.................... 	if (tecla_up == 1)
12AF8:  BTFSS  2A.5
12AFA:  BRA    12D9A
.................... 		{
.................... 		tecla_up = 0;
12AFC:  BCF    2A.5
.................... 		exibiu = 0;
12AFE:  BCF    29.6
.................... 		exibir_menu = 1;
12B00:  BSF    2B.6
.................... 
.................... 		if (programando == 1)
12B02:  BTFSS  29.5
12B04:  BRA    12CF2
.................... 			{
.................... 			tempo_senha = 255;
12B06:  MOVLB  4
12B08:  SETF   xA6
.................... 			switch (menu_aux)
12B0A:  MOVLW  01
12B0C:  SUBWF  36,W
12B0E:  ADDLW  F8
12B10:  BTFSC  FD8.0
12B12:  BRA    12CEE
12B14:  ADDLW  08
12B16:  MOVLB  0
12B18:  GOTO   130CE
.................... 				{
.................... 				case 1:				// incrementa nro de cargas 
.................... 			 		{
.................... 			 		if (tabela_programa[1] < NRO_MAXIMO_CARGAS)
12B1C:  MOVLB  1
12B1E:  MOVF   xDA,F
12B20:  BNZ   12B2E
12B22:  MOVF   xD9,W
12B24:  SUBLW  0F
12B26:  BNC   12B2E
.................... 		 				{
.................... 						tabela_programa[1]++;
12B28:  INCF   xD9,F
12B2A:  BTFSC  FD8.2
12B2C:  INCF   xDA,F
.................... 						}
.................... 					break;
12B2E:  MOVLB  4
12B30:  BRA    12CEE
12B32:  MOVLB  0
.................... 		 			}
.................... 		 		case 2:
.................... 		 			{
.................... 			 		if (tabela_programa[2] == 0)
12B34:  MOVLB  1
12B36:  MOVF   xDB,F
12B38:  BNZ   12B46
12B3A:  MOVF   xDC,F
12B3C:  BNZ   12B46
.................... 		 				{
.................... 						tabela_programa[2] = 1;
12B3E:  CLRF   xDC
12B40:  MOVLW  01
12B42:  MOVWF  xDB
.................... 						}
12B44:  BRA    12B4A
.................... 					else
.................... 		 				{
.................... 						tabela_programa[2] = 0;
12B46:  CLRF   xDC
12B48:  CLRF   xDB
.................... 						}
.................... 			 		break;
12B4A:  MOVLB  4
12B4C:  BRA    12CEE
12B4E:  MOVLB  0
.................... 			 		}
.................... 			 	case 3: // incrementa max kvar 
.................... 			 		{
.................... 			 		if (tabela_programa[3] < carga_instalada)
12B50:  MOVLB  1
12B52:  MOVF   xDE,W
12B54:  MOVLB  0
12B56:  SUBWF  x6F,W
12B58:  BNC   12B76
12B5A:  BNZ   12B6C
12B5C:  MOVF   x6E,W
12B5E:  MOVLB  1
12B60:  SUBWF  xDD,W
12B62:  BTFSS  FD8.0
12B64:  BRA    12B6A
12B66:  MOVLB  0
12B68:  BRA    12B76
12B6A:  MOVLB  0
.................... 		 				{
.................... 						tabela_programa[3]++;
12B6C:  MOVLB  1
12B6E:  INCF   xDD,F
12B70:  BTFSC  FD8.2
12B72:  INCF   xDE,F
12B74:  MOVLB  0
.................... 						}
.................... 					break;
12B76:  MOVLB  4
12B78:  BRA    12CEE
12B7A:  MOVLB  0
.................... 		 			}
.................... 			 	case 4: // incrementa tempo acionamento 
.................... 			 		{
.................... 			 		if (tabela_programa[4] < 240)
12B7C:  MOVLB  1
12B7E:  MOVF   xE0,F
12B80:  BNZ   12B8E
12B82:  MOVF   xDF,W
12B84:  SUBLW  EF
12B86:  BNC   12B8E
.................... 		 				{
.................... 						tabela_programa[4]++;
12B88:  INCF   xDF,F
12B8A:  BTFSC  FD8.2
12B8C:  INCF   xE0,F
.................... 						}
.................... 					break;
12B8E:  MOVLB  4
12B90:  BRA    12CEE
12B92:  MOVLB  0
.................... 		 			}
.................... 				case 5:	// incrementa tempo desaciona 
.................... 					{
.................... 			 		if (tabela_programa[5] < 240)
12B94:  MOVLB  1
12B96:  MOVF   xE2,F
12B98:  BNZ   12BA6
12B9A:  MOVF   xE1,W
12B9C:  SUBLW  EF
12B9E:  BNC   12BA6
.................... 		 				{
.................... 						tabela_programa[5]++;
12BA0:  INCF   xE1,F
12BA2:  BTFSC  FD8.2
12BA4:  INCF   xE2,F
.................... 						}
.................... 					break;
12BA6:  MOVLB  4
12BA8:  BRA    12CEE
12BAA:  MOVLB  0
.................... 					}
.................... 			 	case 6: // incrementa valor de cada carga 
.................... 			 		{                   
.................... 					if (tabela_valor_cargas[aux_tab] < MAXIMA_CARGA)
12BAC:  CLRF   03
12BAE:  MOVF   x80,W
12BB0:  ADDLW  37
12BB2:  MOVWF  FE9
12BB4:  MOVLW  01
12BB6:  ADDWFC 03,W
12BB8:  MOVWF  FEA
12BBA:  MOVF   FEF,W
12BBC:  SUBLW  F9
12BBE:  BNC   12BD0
.................... 						{
.................... 						tabela_valor_cargas[aux_tab]++;
12BC0:  CLRF   03
12BC2:  MOVF   x80,W
12BC4:  ADDLW  37
12BC6:  MOVWF  FE9
12BC8:  MOVLW  01
12BCA:  ADDWFC 03,W
12BCC:  MOVWF  FEA
12BCE:  INCF   FEF,F
.................... 						}
.................... 					break;
12BD0:  MOVLB  4
12BD2:  BRA    12CEE
12BD4:  MOVLB  0
.................... 		 			}
.................... 			 	case 7: // incrementa valor de tempo de repouso por carga 
.................... 			 		{                   
.................... 					if (tabela_tempo_repouso[aux_tab] < 240)
12BD6:  CLRF   03
12BD8:  MOVF   x80,W
12BDA:  ADDLW  48
12BDC:  MOVWF  FE9
12BDE:  MOVLW  01
12BE0:  ADDWFC 03,W
12BE2:  MOVWF  FEA
12BE4:  MOVF   FEF,W
12BE6:  SUBLW  EF
12BE8:  BNC   12BFA
.................... 						{
.................... 						tabela_tempo_repouso[aux_tab]++;
12BEA:  CLRF   03
12BEC:  MOVF   x80,W
12BEE:  ADDLW  48
12BF0:  MOVWF  FE9
12BF2:  MOVLW  01
12BF4:  ADDWFC 03,W
12BF6:  MOVWF  FEA
12BF8:  INCF   FEF,F
.................... 						}
.................... 					break;
12BFA:  MOVLB  4
12BFC:  BRA    12CEE
12BFE:  MOVLB  0
.................... 		 			}
.................... 		 		case 8:
.................... 		 			{
.................... 			 		switch (aux_tab2)
12C00:  MOVF   x81,W
12C02:  BZ    12C16
12C04:  XORLW  01
12C06:  BZ    12C52
12C08:  XORLW  03
12C0A:  BZ    12C78
12C0C:  XORLW  01
12C0E:  BZ    12C9E
12C10:  XORLW  07
12C12:  BZ    12CC4
12C14:  BRA    12CEA
.................... 			 			{
.................... 				 		case 0:
.................... 				 			{
.................... 							if (forma_controle[aux_tab] == 'H')
12C16:  CLRF   03
12C18:  MOVF   x80,W
12C1A:  ADDLW  59
12C1C:  MOVWF  FE9
12C1E:  MOVLW  01
12C20:  ADDWFC 03,W
12C22:  MOVWF  FEA
12C24:  MOVF   FEF,W
12C26:  SUBLW  48
12C28:  BNZ   12C3E
.................... 								{
.................... 								forma_controle[aux_tab] = 'P';
12C2A:  CLRF   03
12C2C:  MOVF   x80,W
12C2E:  ADDLW  59
12C30:  MOVWF  FE9
12C32:  MOVLW  01
12C34:  ADDWFC 03,W
12C36:  MOVWF  FEA
12C38:  MOVLW  50
12C3A:  MOVWF  FEF
.................... 								}
12C3C:  BRA    12C50
.................... 							else
.................... 								{
.................... 								forma_controle[aux_tab] = 'H';
12C3E:  CLRF   03
12C40:  MOVF   x80,W
12C42:  ADDLW  59
12C44:  MOVWF  FE9
12C46:  MOVLW  01
12C48:  ADDWFC 03,W
12C4A:  MOVWF  FEA
12C4C:  MOVLW  48
12C4E:  MOVWF  FEF
.................... 								}
.................... 					 		break;
12C50:  BRA    12CEC
.................... 					 		}
.................... 				 		case 1:
.................... 				 			{
.................... 					 		if (hora_desliga_controle[aux_tab] < 23)
12C52:  CLRF   03
12C54:  MOVF   x80,W
12C56:  ADDLW  8C
12C58:  MOVWF  FE9
12C5A:  MOVLW  01
12C5C:  ADDWFC 03,W
12C5E:  MOVWF  FEA
12C60:  MOVF   FEF,W
12C62:  SUBLW  16
12C64:  BNC   12C76
.................... 					 			{
.................... 						 		hora_desliga_controle[aux_tab]++; 
12C66:  CLRF   03
12C68:  MOVF   x80,W
12C6A:  ADDLW  8C
12C6C:  MOVWF  FE9
12C6E:  MOVLW  01
12C70:  ADDWFC 03,W
12C72:  MOVWF  FEA
12C74:  INCF   FEF,F
.................... 						 		}
.................... 					 		break;
12C76:  BRA    12CEC
.................... 					 		}
.................... 				 		case 2:
.................... 				 			{
.................... 					 		if (minuto_desliga_controle[aux_tab] < 59)
12C78:  CLRF   03
12C7A:  MOVF   x80,W
12C7C:  ADDLW  9D
12C7E:  MOVWF  FE9
12C80:  MOVLW  01
12C82:  ADDWFC 03,W
12C84:  MOVWF  FEA
12C86:  MOVF   FEF,W
12C88:  SUBLW  3A
12C8A:  BNC   12C9C
.................... 					 			{
.................... 						 		minuto_desliga_controle[aux_tab]++; 
12C8C:  CLRF   03
12C8E:  MOVF   x80,W
12C90:  ADDLW  9D
12C92:  MOVWF  FE9
12C94:  MOVLW  01
12C96:  ADDWFC 03,W
12C98:  MOVWF  FEA
12C9A:  INCF   FEF,F
.................... 						 		}
.................... 					 		break;
12C9C:  BRA    12CEC
.................... 					 		}
.................... 				 		case 3:
.................... 				 			{
.................... 					 		if (hora_liga_controle[aux_tab] < 23)
12C9E:  CLRF   03
12CA0:  MOVF   x80,W
12CA2:  ADDLW  6A
12CA4:  MOVWF  FE9
12CA6:  MOVLW  01
12CA8:  ADDWFC 03,W
12CAA:  MOVWF  FEA
12CAC:  MOVF   FEF,W
12CAE:  SUBLW  16
12CB0:  BNC   12CC2
.................... 					 			{
.................... 						 		hora_liga_controle[aux_tab]++; 
12CB2:  CLRF   03
12CB4:  MOVF   x80,W
12CB6:  ADDLW  6A
12CB8:  MOVWF  FE9
12CBA:  MOVLW  01
12CBC:  ADDWFC 03,W
12CBE:  MOVWF  FEA
12CC0:  INCF   FEF,F
.................... 						 		}
.................... 					 		break;
12CC2:  BRA    12CEC
.................... 					 		}
.................... 				 		case 4:
.................... 				 			{
.................... 					 		if (minuto_liga_controle[aux_tab] < 59)
12CC4:  CLRF   03
12CC6:  MOVF   x80,W
12CC8:  ADDLW  7B
12CCA:  MOVWF  FE9
12CCC:  MOVLW  01
12CCE:  ADDWFC 03,W
12CD0:  MOVWF  FEA
12CD2:  MOVF   FEF,W
12CD4:  SUBLW  3A
12CD6:  BNC   12CE8
.................... 					 			{
.................... 						 		minuto_liga_controle[aux_tab]++; 
12CD8:  CLRF   03
12CDA:  MOVF   x80,W
12CDC:  ADDLW  7B
12CDE:  MOVWF  FE9
12CE0:  MOVLW  01
12CE2:  ADDWFC 03,W
12CE4:  MOVWF  FEA
12CE6:  INCF   FEF,F
.................... 						 		}
.................... 					 		break;
12CE8:  BRA    12CEC
.................... 					 		}
.................... 				 		default:
.................... 				 			{
.................... 				 			aux_tab2 = 0;
12CEA:  CLRF   x81
12CEC:  MOVLB  4
.................... 				 			}
.................... 				 		}
.................... 			 		}		 			
.................... 				}
.................... 		 	}
12CEE:  BRA    12D9C
12CF0:  MOVLB  0
.................... 		else
.................... 		 	{
.................... 			if ((menu_aux == 6) || (menu_aux == 7))
12CF2:  MOVF   36,W
12CF4:  SUBLW  06
12CF6:  BZ    12CFE
12CF8:  MOVF   36,W
12CFA:  SUBLW  07
12CFC:  BNZ   12D2C
.................... 				{
.................... 				if (aux_tab > 0)
12CFE:  MOVF   x80,F
12D00:  BZ    12D06
.................... 					{
.................... 					aux_tab--;
12D02:  DECF   x80,F
.................... 					}
12D04:  BRA    12D2A
.................... 				else
.................... 					{
.................... 					if (menu_aux == 7)
12D06:  MOVF   36,W
12D08:  SUBLW  07
12D0A:  BNZ   12D16
.................... 						{
.................... 						menu_aux--;
12D0C:  DECF   36,F
.................... 						aux_tab = nro_cargas-1;
12D0E:  MOVLW  01
12D10:  SUBWF  x6D,W
12D12:  MOVWF  x80
.................... 						}
12D14:  BRA    12D2A
.................... 					else if (menu_aux == 8)
12D16:  MOVF   36,W
12D18:  SUBLW  08
12D1A:  BNZ   12D28
.................... 						{
.................... 						menu_aux--;
12D1C:  DECF   36,F
.................... 						aux_tab = nro_cargas-1;
12D1E:  MOVLW  01
12D20:  SUBWF  x6D,W
12D22:  MOVWF  x80
.................... 						aux_tab2 = 0;
12D24:  CLRF   x81
.................... 						}
12D26:  BRA    12D2A
.................... 					else
.................... 						{
.................... 						menu_aux--;
12D28:  DECF   36,F
.................... 						}
.................... 					}
.................... 				}
12D2A:  BRA    12D9A
.................... 			else if (menu_aux == 8)
12D2C:  MOVF   36,W
12D2E:  SUBLW  08
12D30:  BNZ   12D92
.................... 				{
.................... 				if (forma_controle[aux_tab] == 'D')
12D32:  CLRF   03
12D34:  MOVF   x80,W
12D36:  ADDLW  59
12D38:  MOVWF  FE9
12D3A:  MOVLW  01
12D3C:  ADDWFC 03,W
12D3E:  MOVWF  FEA
12D40:  MOVF   FEF,W
12D42:  SUBLW  44
12D44:  BNZ   12D5C
.................... 					{
.................... 					aux_tab2 = 0;
12D46:  CLRF   x81
.................... 					if (aux_tab > 0)
12D48:  MOVF   x80,F
12D4A:  BZ    12D50
.................... 						{
.................... 						aux_tab--;
12D4C:  DECF   x80,F
.................... 						}
12D4E:  BRA    12D5A
.................... 					else
.................... 						{
.................... 						menu_aux--;					// Edison 22/12/09 - Não permitia subida no menu de programação.
12D50:  DECF   36,F
.................... 						aux_tab = nro_cargas-1;
12D52:  MOVLW  01
12D54:  SUBWF  x6D,W
12D56:  MOVWF  x80
.................... 						aux_tab2 = 0;
12D58:  CLRF   x81
.................... 						}
.................... 					}
12D5A:  BRA    12D90
.................... 				else
.................... 					{
.................... 					if (aux_tab2 > 0)
12D5C:  MOVF   x81,F
12D5E:  BZ    12D64
.................... 						{
.................... 						aux_tab2--;
12D60:  DECF   x81,F
.................... 						}
12D62:  BRA    12D90
.................... 					else
.................... 						{
.................... 						aux_tab2 = 4;
12D64:  MOVLW  04
12D66:  MOVWF  x81
.................... 						if (aux_tab > 0)
12D68:  MOVF   x80,F
12D6A:  BZ    12D86
.................... 							{
.................... 							aux_tab--;
12D6C:  DECF   x80,F
.................... 							if (forma_controle[aux_tab] == 'D')
12D6E:  CLRF   03
12D70:  MOVF   x80,W
12D72:  ADDLW  59
12D74:  MOVWF  FE9
12D76:  MOVLW  01
12D78:  ADDWFC 03,W
12D7A:  MOVWF  FEA
12D7C:  MOVF   FEF,W
12D7E:  SUBLW  44
12D80:  BNZ   12D84
.................... 								{
.................... 								aux_tab2 = 0;
12D82:  CLRF   x81
.................... 								}
.................... 							}
12D84:  BRA    12D90
.................... 						else
.................... 							{
.................... 							menu_aux--;					// Edison 22/12/09 - Não permitia subida no menu de programação.
12D86:  DECF   36,F
.................... 							aux_tab = nro_cargas-1;
12D88:  MOVLW  01
12D8A:  SUBWF  x6D,W
12D8C:  MOVWF  x80
.................... 							aux_tab2 = 0;
12D8E:  CLRF   x81
.................... 							}
.................... 						}
.................... 					}
.................... 				}
12D90:  BRA    12D9A
.................... 			else
.................... 				{
.................... 				if (menu_aux > 1)
12D92:  MOVF   36,W
12D94:  SUBLW  01
12D96:  BC    12D9A
.................... 					{
.................... 					menu_aux--;
12D98:  DECF   36,F
12D9A:  MOVLB  4
.................... 					}
.................... 				}
.................... 		 	}
.................... 		}
.................... 	if (tecla_down == 1)
12D9C:  BTFSS  2A.6
12D9E:  BRA    13014
.................... 		{
.................... 		tecla_down = 0;
12DA0:  BCF    2A.6
.................... 		exibiu = 0;
12DA2:  BCF    29.6
.................... 		exibir_menu = 1;
12DA4:  BSF    2B.6
.................... 
.................... 		if (programando == 1)
12DA6:  BTFSS  29.5
12DA8:  BRA    12F94
.................... 			{
.................... 			tempo_senha = 255;
12DAA:  SETF   xA6
.................... 			switch (menu_aux)
12DAC:  MOVLW  01
12DAE:  SUBWF  36,W
12DB0:  ADDLW  F8
12DB2:  BTFSC  FD8.0
12DB4:  BRA    12F92
12DB6:  ADDLW  08
12DB8:  MOVLB  0
12DBA:  GOTO   130FE
.................... 				{
.................... 				case 1:	// decrementa nro de cargas 
.................... 			 		{
.................... 			 		if (tabela_programa[1] > 2)
12DBE:  MOVLB  1
12DC0:  MOVF   xDA,F
12DC2:  BNZ   12DCA
12DC4:  MOVF   xD9,W
12DC6:  SUBLW  02
12DC8:  BC    12DD2
.................... 		 				{
.................... 						tabela_programa[1]--;
12DCA:  MOVF   xD9,W
12DCC:  BTFSC  FD8.2
12DCE:  DECF   xDA,F
12DD0:  DECF   xD9,F
.................... 						}
.................... 					break;
12DD2:  MOVLB  4
12DD4:  BRA    12F92
12DD6:  MOVLB  0
.................... 		 			}
.................... 		 		case 2:
.................... 		 			{
.................... 			 		if (tabela_programa[2] == 0)
12DD8:  MOVLB  1
12DDA:  MOVF   xDB,F
12DDC:  BNZ   12DEA
12DDE:  MOVF   xDC,F
12DE0:  BNZ   12DEA
.................... 		 				{
.................... 						tabela_programa[2] = 1;
12DE2:  CLRF   xDC
12DE4:  MOVLW  01
12DE6:  MOVWF  xDB
.................... 						}
12DE8:  BRA    12DEE
.................... 					else
.................... 		 				{
.................... 						tabela_programa[2] = 0;
12DEA:  CLRF   xDC
12DEC:  CLRF   xDB
.................... 						}
.................... 			 		break;
12DEE:  MOVLB  4
12DF0:  BRA    12F92
12DF2:  MOVLB  0
.................... 			 		}
.................... 			 	case 3: // decrementa max kw
.................... 			 		{
.................... 			 		if (tabela_programa[3] > menor_carga)
12DF4:  MOVF   x71,W
12DF6:  MOVLB  1
12DF8:  SUBWF  xDE,W
12DFA:  BNC   12E16
12DFC:  BNZ   12E0E
12DFE:  MOVF   xDD,W
12E00:  MOVLB  0
12E02:  SUBWF  x70,W
12E04:  BTFSS  FD8.0
12E06:  BRA    12E0C
12E08:  MOVLB  1
12E0A:  BRA    12E16
12E0C:  MOVLB  1
.................... 		 				{
.................... 						tabela_programa[3]--;
12E0E:  MOVF   xDD,W
12E10:  BTFSC  FD8.2
12E12:  DECF   xDE,F
12E14:  DECF   xDD,F
.................... 						}
.................... 					break;
12E16:  MOVLB  4
12E18:  BRA    12F92
12E1A:  MOVLB  0
.................... 			 		}	
.................... 			 	case 4: // decrementa tempo acionamento 
.................... 			 		{
.................... 			 		if (tabela_programa[4] > 5)				//Alterado por pedido de cliente de 30s para 5s em 14/01/09.
12E1C:  MOVLB  1
12E1E:  MOVF   xE0,F
12E20:  BNZ   12E28
12E22:  MOVF   xDF,W
12E24:  SUBLW  05
12E26:  BC    12E30
.................... 		 				{
.................... 						tabela_programa[4]--;
12E28:  MOVF   xDF,W
12E2A:  BTFSC  FD8.2
12E2C:  DECF   xE0,F
12E2E:  DECF   xDF,F
.................... 						}
.................... 					break;
12E30:  MOVLB  4
12E32:  BRA    12F92
12E34:  MOVLB  0
.................... 		 			}
.................... 				case 5:	// decrementa tempo desaciona 
.................... 					{
.................... 			 		if (tabela_programa[5] > 5)				//Alterado por pedido de cliente de 30s para 5s em 14/01/09.
12E36:  MOVLB  1
12E38:  MOVF   xE2,F
12E3A:  BNZ   12E42
12E3C:  MOVF   xE1,W
12E3E:  SUBLW  05
12E40:  BC    12E4A
.................... 		 				{
.................... 						tabela_programa[5]--;
12E42:  MOVF   xE1,W
12E44:  BTFSC  FD8.2
12E46:  DECF   xE2,F
12E48:  DECF   xE1,F
.................... 						}
.................... 					break;
12E4A:  MOVLB  4
12E4C:  BRA    12F92
12E4E:  MOVLB  0
.................... 					}
.................... 			 	case 6: // decrementa valor de cada carga 
.................... 			 		{                   
.................... 					if (tabela_valor_cargas[aux_tab] > 0)
12E50:  CLRF   03
12E52:  MOVF   x80,W
12E54:  ADDLW  37
12E56:  MOVWF  FE9
12E58:  MOVLW  01
12E5A:  ADDWFC 03,W
12E5C:  MOVWF  FEA
12E5E:  MOVF   FEF,F
12E60:  BZ    12E72
.................... 						{
.................... 						tabela_valor_cargas[aux_tab]--;
12E62:  CLRF   03
12E64:  MOVF   x80,W
12E66:  ADDLW  37
12E68:  MOVWF  FE9
12E6A:  MOVLW  01
12E6C:  ADDWFC 03,W
12E6E:  MOVWF  FEA
12E70:  DECF   FEF,F
.................... 						}
.................... 					break;
12E72:  MOVLB  4
12E74:  BRA    12F92
12E76:  MOVLB  0
.................... 		 			}
.................... 			 	case 7: // decrementa valor de tempo de repouso por carga 
.................... 			 		{                   
.................... 					if (tabela_tempo_repouso[aux_tab] > tabela_programa[4])
12E78:  CLRF   03
12E7A:  MOVF   x80,W
12E7C:  ADDLW  48
12E7E:  MOVWF  FE9
12E80:  MOVLW  01
12E82:  ADDWFC 03,W
12E84:  MOVWF  FEA
12E86:  MOVLB  1
12E88:  MOVF   xE0,F
12E8A:  BNZ   12EA6
12E8C:  MOVF   FEF,W
12E8E:  SUBWF  xDF,W
12E90:  BC    12EA6
.................... 						{
.................... 						tabela_tempo_repouso[aux_tab]--;
12E92:  CLRF   03
12E94:  MOVLB  0
12E96:  MOVF   x80,W
12E98:  ADDLW  48
12E9A:  MOVWF  FE9
12E9C:  MOVLW  01
12E9E:  ADDWFC 03,W
12EA0:  MOVWF  FEA
12EA2:  DECF   FEF,F
12EA4:  MOVLB  1
.................... 						}
.................... 					break;
12EA6:  MOVLB  4
12EA8:  BRA    12F92
12EAA:  MOVLB  0
.................... 		 			}
.................... 		 		case 8:
.................... 		 			{
.................... 			 		switch (aux_tab2)
12EAC:  MOVF   x81,W
12EAE:  BZ    12EC2
12EB0:  XORLW  01
12EB2:  BZ    12EFE
12EB4:  XORLW  03
12EB6:  BZ    12F22
12EB8:  XORLW  01
12EBA:  BZ    12F46
12EBC:  XORLW  07
12EBE:  BZ    12F6A
12EC0:  BRA    12F8E
.................... 			 			{
.................... 				 		case 0:
.................... 				 			{
.................... 							if (forma_controle[aux_tab] == 'H')
12EC2:  CLRF   03
12EC4:  MOVF   x80,W
12EC6:  ADDLW  59
12EC8:  MOVWF  FE9
12ECA:  MOVLW  01
12ECC:  ADDWFC 03,W
12ECE:  MOVWF  FEA
12ED0:  MOVF   FEF,W
12ED2:  SUBLW  48
12ED4:  BNZ   12EEA
.................... 								{
.................... 								forma_controle[aux_tab] = 'P';
12ED6:  CLRF   03
12ED8:  MOVF   x80,W
12EDA:  ADDLW  59
12EDC:  MOVWF  FE9
12EDE:  MOVLW  01
12EE0:  ADDWFC 03,W
12EE2:  MOVWF  FEA
12EE4:  MOVLW  50
12EE6:  MOVWF  FEF
.................... 								}
12EE8:  BRA    12EFC
.................... 							else
.................... 								{
.................... 								forma_controle[aux_tab] = 'H';
12EEA:  CLRF   03
12EEC:  MOVF   x80,W
12EEE:  ADDLW  59
12EF0:  MOVWF  FE9
12EF2:  MOVLW  01
12EF4:  ADDWFC 03,W
12EF6:  MOVWF  FEA
12EF8:  MOVLW  48
12EFA:  MOVWF  FEF
.................... 								}
.................... 					 		break;
12EFC:  BRA    12F90
.................... 					 		}
.................... 				 		case 1:
.................... 				 			{
.................... 					 		if (hora_desliga_controle[aux_tab] > 0)
12EFE:  CLRF   03
12F00:  MOVF   x80,W
12F02:  ADDLW  8C
12F04:  MOVWF  FE9
12F06:  MOVLW  01
12F08:  ADDWFC 03,W
12F0A:  MOVWF  FEA
12F0C:  MOVF   FEF,F
12F0E:  BZ    12F20
.................... 					 			{
.................... 						 		hora_desliga_controle[aux_tab]--; 
12F10:  CLRF   03
12F12:  MOVF   x80,W
12F14:  ADDLW  8C
12F16:  MOVWF  FE9
12F18:  MOVLW  01
12F1A:  ADDWFC 03,W
12F1C:  MOVWF  FEA
12F1E:  DECF   FEF,F
.................... 						 		}
.................... 					 		break;
12F20:  BRA    12F90
.................... 					 		}
.................... 				 		case 2:
.................... 				 			{
.................... 					 		if (minuto_desliga_controle[aux_tab] > 0)
12F22:  CLRF   03
12F24:  MOVF   x80,W
12F26:  ADDLW  9D
12F28:  MOVWF  FE9
12F2A:  MOVLW  01
12F2C:  ADDWFC 03,W
12F2E:  MOVWF  FEA
12F30:  MOVF   FEF,F
12F32:  BZ    12F44
.................... 					 			{
.................... 						 		minuto_desliga_controle[aux_tab]--; 
12F34:  CLRF   03
12F36:  MOVF   x80,W
12F38:  ADDLW  9D
12F3A:  MOVWF  FE9
12F3C:  MOVLW  01
12F3E:  ADDWFC 03,W
12F40:  MOVWF  FEA
12F42:  DECF   FEF,F
.................... 						 		}
.................... 					 		break;
12F44:  BRA    12F90
.................... 					 		}
.................... 				 		case 3:
.................... 				 			{
.................... 					 		if (hora_liga_controle[aux_tab] > 0)
12F46:  CLRF   03
12F48:  MOVF   x80,W
12F4A:  ADDLW  6A
12F4C:  MOVWF  FE9
12F4E:  MOVLW  01
12F50:  ADDWFC 03,W
12F52:  MOVWF  FEA
12F54:  MOVF   FEF,F
12F56:  BZ    12F68
.................... 					 			{
.................... 						 		hora_liga_controle[aux_tab]--; 
12F58:  CLRF   03
12F5A:  MOVF   x80,W
12F5C:  ADDLW  6A
12F5E:  MOVWF  FE9
12F60:  MOVLW  01
12F62:  ADDWFC 03,W
12F64:  MOVWF  FEA
12F66:  DECF   FEF,F
.................... 						 		}
.................... 					 		break;
12F68:  BRA    12F90
.................... 					 		}
.................... 				 		case 4:
.................... 				 			{
.................... 					 		if (minuto_liga_controle[aux_tab] > 0)
12F6A:  CLRF   03
12F6C:  MOVF   x80,W
12F6E:  ADDLW  7B
12F70:  MOVWF  FE9
12F72:  MOVLW  01
12F74:  ADDWFC 03,W
12F76:  MOVWF  FEA
12F78:  MOVF   FEF,F
12F7A:  BZ    12F8C
.................... 					 			{
.................... 						 		minuto_liga_controle[aux_tab]--; 
12F7C:  CLRF   03
12F7E:  MOVF   x80,W
12F80:  ADDLW  7B
12F82:  MOVWF  FE9
12F84:  MOVLW  01
12F86:  ADDWFC 03,W
12F88:  MOVWF  FEA
12F8A:  DECF   FEF,F
.................... 						 		}
.................... 					 		break;
12F8C:  BRA    12F90
.................... 					 		}
.................... 				 		default:
.................... 				 			{
.................... 				 			aux_tab2 = 0;
12F8E:  CLRF   x81
12F90:  MOVLB  4
.................... 				 			}
.................... 				 		}
.................... 			 		}
.................... 				}
.................... 		 	}
12F92:  BRA    13014
.................... 		 else
.................... 		 	{
.................... 			if ((menu_aux == 6) || (menu_aux == 7))
12F94:  MOVF   36,W
12F96:  SUBLW  06
12F98:  BZ    12FA0
12F9A:  MOVF   36,W
12F9C:  SUBLW  07
12F9E:  BNZ   12FCA
.................... 				{
.................... 				if (aux_tab < (nro_cargas-1))
12FA0:  MOVLW  01
12FA2:  MOVLB  0
12FA4:  SUBWF  x6D,W
12FA6:  SUBWF  x80,W
12FA8:  BC    12FAE
.................... 					{
.................... 					aux_tab++;
12FAA:  INCF   x80,F
.................... 					}
12FAC:  BRA    12FC6
.................... 				else
.................... 					{
.................... 					if (menu_aux == 6)
12FAE:  MOVF   36,W
12FB0:  SUBLW  06
12FB2:  BNZ   12FBA
.................... 						{
.................... 						menu_aux++;
12FB4:  INCF   36,F
.................... 						aux_tab = 0;
12FB6:  CLRF   x80
.................... 						}
12FB8:  BRA    12FC6
.................... 					else if (menu_aux == 7)
12FBA:  MOVF   36,W
12FBC:  SUBLW  07
12FBE:  BNZ   12FC6
.................... 						{
.................... 						menu_aux++;
12FC0:  INCF   36,F
.................... 						aux_tab = 0;
12FC2:  CLRF   x80
.................... 						aux_tab2 = 0;
12FC4:  CLRF   x81
.................... 						}
.................... 					}
.................... 				}
12FC6:  BRA    13016
12FC8:  MOVLB  4
.................... 			else if (menu_aux == 8)
12FCA:  MOVF   36,W
12FCC:  SUBLW  08
12FCE:  BNZ   1300C
.................... 				{
.................... 				if (forma_controle[aux_tab] == 'D')
12FD0:  CLRF   03
12FD2:  MOVLB  0
12FD4:  MOVF   x80,W
12FD6:  ADDLW  59
12FD8:  MOVWF  FE9
12FDA:  MOVLW  01
12FDC:  ADDWFC 03,W
12FDE:  MOVWF  FEA
12FE0:  MOVF   FEF,W
12FE2:  SUBLW  44
12FE4:  BNZ   12FF2
.................... 					{
.................... 					if (aux_tab < (nro_cargas-1))
12FE6:  MOVLW  01
12FE8:  SUBWF  x6D,W
12FEA:  SUBWF  x80,W
12FEC:  BC    12FF0
.................... 						{
.................... 						aux_tab++;
12FEE:  INCF   x80,F
.................... 						}
.................... 					}
12FF0:  BRA    13008
.................... 				else
.................... 					{
.................... 					if (aux_tab2 < 4)
12FF2:  MOVF   x81,W
12FF4:  SUBLW  03
12FF6:  BNC   12FFC
.................... 						{
.................... 						aux_tab2++;
12FF8:  INCF   x81,F
.................... 						}
12FFA:  BRA    13008
.................... 					else
.................... 						{
.................... 						aux_tab2 = 0;
12FFC:  CLRF   x81
.................... 						if (aux_tab < (nro_cargas-1))
12FFE:  MOVLW  01
13000:  SUBWF  x6D,W
13002:  SUBWF  x80,W
13004:  BC    13008
.................... 							{
.................... 							aux_tab++;
13006:  INCF   x80,F
.................... 							}
.................... 						}
.................... 					}
.................... 				}
13008:  BRA    13016
1300A:  MOVLB  4
.................... 			else
.................... 				{
.................... 				if (menu_aux < nro_menus5)
1300C:  MOVF   36,W
1300E:  SUBLW  07
13010:  BNC   13014
.................... 					{
.................... 					menu_aux++;
13012:  INCF   36,F
13014:  MOVLB  0
.................... 					}
.................... 				}
.................... 	 		}
.................... 		}
.................... 	if (tecla_enter == 1)
13016:  BTFSS  2B.0
13018:  BRA    1307E
.................... 		{
.................... 		exibir_menu = 1;
1301A:  BSF    2B.6
.................... 	 	tecla_enter = 0;
1301C:  BCF    2B.0
.................... 		if (programando == 1)
1301E:  BTFSS  29.5
13020:  BRA    13068
.................... 			{
.................... 			programando = 0;
13022:  BCF    29.5
.................... 			if (menu_aux == 8)
13024:  MOVF   36,W
13026:  SUBLW  08
13028:  BNZ   13064
.................... 				{
.................... 				exibiu = 0;
1302A:  BCF    29.6
.................... 				if (forma_controle[aux_tab] == 'H')
1302C:  CLRF   03
1302E:  MOVF   x80,W
13030:  ADDLW  59
13032:  MOVWF  FE9
13034:  MOVLW  01
13036:  ADDWFC 03,W
13038:  MOVWF  FEA
1303A:  MOVF   FEF,W
1303C:  SUBLW  48
1303E:  BNZ   13058
.................... 					{
.................... 					if (aux_tab2 < 4)
13040:  MOVF   x81,W
13042:  SUBLW  03
13044:  BNC   1304A
.................... 						{
.................... 						aux_tab2++;
13046:  INCF   x81,F
.................... 						}
13048:  BRA    13056
.................... 					else
.................... 						{
.................... 						aux_tab2 = 0;
1304A:  CLRF   x81
.................... 						if (aux_tab < (nro_cargas-1))
1304C:  MOVLW  01
1304E:  SUBWF  x6D,W
13050:  SUBWF  x80,W
13052:  BC    13056
.................... 							{
.................... 							aux_tab++;
13054:  INCF   x80,F
.................... 							}
.................... 						}
.................... 					}
13056:  BRA    13064
.................... 				else
.................... 					{
.................... 					aux_tab2 = 0;
13058:  CLRF   x81
.................... 					if (aux_tab < (nro_cargas-1))
1305A:  MOVLW  01
1305C:  SUBWF  x6D,W
1305E:  SUBWF  x80,W
13060:  BC    13064
.................... 						{
.................... 						aux_tab++;
13062:  INCF   x80,F
.................... 						}
.................... 					}
.................... 				}
.................... 			salva_programa_cargas();
13064:  BRA    12918
.................... 			}
13066:  BRA    1307E
.................... 		else
.................... 			{
.................... 			if (tempo_senha == 0)
13068:  MOVLB  4
1306A:  MOVF   xA6,F
1306C:  BNZ   1307A
.................... 				{
.................... 				trata_senha();
1306E:  MOVLB  0
13070:  CALL   FFE0
.................... 				return;
13074:  BRA    130CC
.................... 				}
13076:  BRA    1307E
13078:  MOVLB  4
.................... 			else
.................... 				{
.................... 				programando = 1;
1307A:  BSF    29.5
1307C:  MOVLB  0
.................... 				}
.................... 			}
.................... 		}
.................... 	if (tecla_reset == true)
1307E:  BTFSS  2B.1
13080:  BRA    130C4
.................... 		{
.................... 		exibir_menu = 1;
13082:  BSF    2B.6
.................... 		tecla_reset = 0;
13084:  BCF    2B.1
.................... 		exibiu = 0;
13086:  BCF    29.6
.................... 		if (programando == 1)
13088:  BTFSS  29.5
1308A:  BRA    130B4
.................... 			{
.................... 			programando = 0;
1308C:  BCF    29.5
.................... 			tabela_programa[1] = nro_cargas;
1308E:  MOVLB  1
13090:  CLRF   xDA
13092:  MOVFF  6D,1D9
.................... 			tabela_programa[2] = tipo_controle_demanda;
13096:  CLRF   xDC
13098:  MOVFF  84,1DB
.................... 			tabela_programa[3] = max_kw;
1309C:  MOVFF  66,1DE
130A0:  MOVFF  65,1DD
.................... 			tabela_programa[4] = tempo_aciona;
130A4:  CLRF   xE0
130A6:  MOVFF  6A,1DF
.................... 			tabela_programa[5] = tempo_desaciona;
130AA:  CLRF   xE2
130AC:  MOVFF  6B,1E1
.................... 			}
130B0:  BRA    130C6
130B2:  MOVLB  0
.................... 		else
.................... 			{
.................... 			menu_aux = 1;
130B4:  MOVLW  01
130B6:  MOVWF  36
.................... 			menu1 = 5;
130B8:  MOVLW  05
130BA:  MOVWF  35
.................... 			qmenu = 0;
130BC:  CLRF   3A
.................... 			exibe_menu();
130BE:  CALL   E70A
.................... 			return;
130C2:  BRA    130CC
130C4:  MOVLB  1
.................... 			}
.................... 		}
.................... //	}
.................... 	exibe_programa_cargas();
130C6:  MOVLB  0
130C8:  CALL   123DA
130CC:  RETURN 0
.................... }
.................... 
.................... 
.................... void gera_sequencia_valor_bancos(void) 
.................... {
*
1726C:  GOTO   17396 (RETURN)
.................... }
.................... 
.................... #else
.................... 	#include "st8x00_men5.c"		// menu bancos
.................... #endif
.................... #include "st8x00_men6.c"		// menu alarmes
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610_MEN6                                                    *
.................... ; Funcao: TRATAMENTO DO MENU DE PROGRAMAÇAO DE ALARMES					 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
....................   
.................... void trata_menu6(void);
.................... void exibe_alarmes(void);
.................... void salva_alarmes(void);
.................... //void exibe_off(void);
.................... //void valida_programa(void);
.................... 
.................... 
.................... void trata_menu6(void)
.................... {
.................... 	if (qmenu != 6)
*
13528:  MOVF   3A,W
1352A:  SUBLW  06
1352C:  BZ    13562
.................... 		{
.................... 		qmenu = 6;
1352E:  MOVLW  06
13530:  MOVWF  3A
.................... 		exibiu = 0;
13532:  BCF    29.6
.................... 		#if (st8500c == true)
.................... 			tabela_programa[1] = ala_fp_ind;
13534:  MOVLB  1
13536:  CLRF   xDA
13538:  MOVFF  4D0,1D9
.................... 			tabela_programa[2] = ala_fp_cap;
1353C:  CLRF   xDC
1353E:  MOVFF  4D1,1DB
.................... 			tabela_programa[3] = ala_ten_a;
13542:  CLRF   xDE
13544:  MOVFF  4D2,1DD
.................... 			tabela_programa[4] = ala_ten_b;
13548:  CLRF   xE0
1354A:  MOVFF  4D3,1DF
.................... 			tabela_programa[5] = ala_demanda_ativa;
1354E:  CLRF   xE2
13550:  MOVFF  4DA,1E1
.................... 		#else
.................... 			tabela_programa[1] = ala_fp_ind;
.................... 			tabela_programa[2] = ala_fp_cap;
.................... 			tabela_programa[3] = ala_ten_a;
.................... 			tabela_programa[4] = ala_ten_b;
.................... 			tabela_programa[5] = ala_sc;
.................... 			tabela_programa[6] = ala_subc;
.................... 			tabela_programa[7] = ala_chtt;
.................... 			tabela_programa[8] = ala_chtc;
.................... 		#endif
.................... 		time_out_menus = 60;
13554:  MOVLW  3C
13556:  MOVWF  31
.................... 		ja_rolou = false;
13558:  BCF    2C.1
.................... 		rolando = false;
1355A:  BCF    2C.0
.................... 		exibe_alarmes();
1355C:  MOVLB  0
1355E:  RCALL  13352
.................... 		return;
13560:  BRA    1375C
.................... 		}
.................... 		
.................... 	if (tecla_enter == 1)
13562:  BTFSS  2B.0
13564:  BRA    1359C
.................... 		{
.................... 	 	#if ((st8200c == true) || (st8300c == true) || (st8500c == true))
.................... 	 		ja_rolou = true;
13566:  BSF    2C.1
.................... 			rolando = false;
13568:  BCF    2C.0
.................... 	 	#endif
.................... 			
.................... 	 	tecla_enter = 0;
1356A:  BCF    2B.0
.................... 		exibiu = 0;
1356C:  BCF    29.6
.................... 		if (ja_rolou == false)
1356E:  BTFSC  2C.1
13570:  BRA    13578
.................... 			{
.................... 			ja_rolou = true;
13572:  BSF    2C.1
.................... 			rolando = false;
13574:  BCF    2C.0
.................... 			}
13576:  BRA    13596
.................... 		else
.................... 			{
.................... 			exibir_menu = 1;
13578:  BSF    2B.6
.................... 			if (programando == 1)
1357A:  BTFSS  29.5
1357C:  BRA    13584
.................... 				{
.................... 				programando = 0;
1357E:  BCF    29.5
.................... 				salva_alarmes();
13580:  BRA    13506
.................... 				}
13582:  BRA    13596
.................... 			else
.................... 				{
.................... 				if (tempo_senha != 0)
13584:  MOVLB  4
13586:  MOVF   xA6,F
13588:  BZ    1358E
.................... 					{
.................... 					programando = 1;
1358A:  BSF    29.5
.................... 					}
1358C:  BRA    13598
.................... 				else
.................... 					{
.................... 					trata_senha();
1358E:  MOVLB  0
13590:  CALL   FFE0
.................... 					return;
13594:  BRA    1375C
13596:  MOVLB  4
.................... 					}
.................... 				}
.................... 			}
.................... 		}		
13598:  BRA    13758
1359A:  MOVLB  0
.................... 	else if (tecla_up == 1)
1359C:  BTFSS  2A.5
1359E:  BRA    1365E
.................... 		{
.................... 		tecla_up = 0;
135A0:  BCF    2A.5
.................... 		exibiu = 0;
135A2:  BCF    29.6
.................... 		if (programando == 1)
135A4:  BTFSS  29.5
135A6:  BRA    1364E
.................... 			{
.................... 			tempo_senha = 255;
135A8:  MOVLB  4
135AA:  SETF   xA6
.................... 			switch(menu_aux)
135AC:  MOVLW  01
135AE:  SUBWF  36,W
135B0:  ADDLW  FB
135B2:  BC    1364A
135B4:  ADDLW  05
135B6:  MOVLB  0
135B8:  GOTO   1375E
.................... 				{
.................... 				case 1:					//FP Indutivo e Capacitivo
.................... 				case 2:
.................... 					{
.................... 				 	if (tabela_programa[menu_aux] < 100)
135BC:  BCF    FD8.0
135BE:  RLCF   36,W
135C0:  CLRF   03
135C2:  ADDLW  D7
135C4:  MOVWF  FE9
135C6:  MOVLW  01
135C8:  ADDWFC 03,W
135CA:  MOVWF  FEA
135CC:  MOVFF  FEC,A4B
135D0:  MOVF   FED,F
135D2:  MOVFF  FEF,A4A
135D6:  MOVLB  A
135D8:  MOVF   x4B,F
135DA:  BNZ   135FA
135DC:  MOVF   x4A,W
135DE:  SUBLW  63
135E0:  BNC   135FA
.................... 				 		{
.................... 						tabela_programa[menu_aux]++;
135E2:  BCF    FD8.0
135E4:  RLCF   36,W
135E6:  CLRF   03
135E8:  ADDLW  D7
135EA:  MOVWF  FE9
135EC:  MOVLW  01
135EE:  ADDWFC 03,W
135F0:  MOVWF  FEA
135F2:  MOVLW  01
135F4:  ADDWF  FEE,F
135F6:  BNC   135FA
135F8:  INCF   FEF,F
.................... 						}
.................... 					break;
135FA:  MOVLB  4
135FC:  BRA    1364A
135FE:  MOVLB  0
.................... 		 			}
.................... 		 		case 3:					//Sobretensão
.................... 			 		{
.................... 				 	if (tabela_programa[3] < 20)
13600:  MOVLB  1
13602:  MOVF   xDE,F
13604:  BNZ   13612
13606:  MOVF   xDD,W
13608:  SUBLW  13
1360A:  BNC   13612
.................... 				 		{
.................... 						tabela_programa[3]++;
1360C:  INCF   xDD,F
1360E:  BTFSC  FD8.2
13610:  INCF   xDE,F
.................... 						}
.................... 					break;
13612:  MOVLB  4
13614:  BRA    1364A
13616:  MOVLB  0
.................... 				 	}
.................... 				 case 4:			//Subtensão
.................... 			 		{
.................... 				 	if (tabela_programa[4] < 30)
13618:  MOVLB  1
1361A:  MOVF   xE0,F
1361C:  BNZ   1362A
1361E:  MOVF   xDF,W
13620:  SUBLW  1D
13622:  BNC   1362A
.................... 				 		{
.................... 						tabela_programa[4]++;
13624:  INCF   xDF,F
13626:  BTFSC  FD8.2
13628:  INCF   xE0,F
.................... 						}
.................... 					break;
1362A:  MOVLB  4
1362C:  BRA    1364A
1362E:  MOVLB  0
.................... 			 		}
.................... 		 		case 5:							//Sobrecorrente
.................... 			 		{
.................... 				 	#if (st8500c == true)
.................... 					 	if (tabela_programa[5] < 20)
13630:  MOVLB  1
13632:  MOVF   xE2,F
13634:  BNZ   13642
13636:  MOVF   xE1,W
13638:  SUBLW  13
1363A:  BNC   13642
.................... 					 		{
.................... 							tabela_programa[5]++;
1363C:  INCF   xE1,F
1363E:  BTFSC  FD8.2
13640:  INCF   xE2,F
.................... 							}
.................... 				 	#else
.................... 					 	if (tabela_programa[5] < 150)
.................... 					 		{
.................... 							tabela_programa[5]++;
.................... 							}
.................... 					#endif
.................... 					break;
13642:  MOVLB  4
13644:  BRA    1364A
13646:  MOVLB  0
13648:  MOVLB  4
.................... 					}
.................... 				#if ((st8100c == true) || (st8200c == true) || (st8300c == true))
.................... 				 	case 6:							//Subcorrente
.................... 				 		{
.................... 					 	if (tabela_programa[6] < 20)
.................... 					 		{
.................... 							tabela_programa[6]++;
.................... 							}
.................... 						break;
.................... 						}
.................... 		 			default:											//Conteúdo Harmônico de Tensão
.................... 		 				{
.................... 					 	if (tabela_programa[menu_aux] < 50)
.................... 					 		{
.................... 							tabela_programa[menu_aux]++;
.................... 							}
.................... 						}
.................... 				#endif
.................... 				}
.................... 		 	}
1364A:  BRA    1365A
1364C:  MOVLB  0
.................... 		else
.................... 			{
.................... 		 	if (menu_aux > 0)
1364E:  MOVF   36,F
13650:  BZ    13658
.................... 		 		{
....................  				menu_aux--;
13652:  DECF   36,F
.................... 				ja_rolou = false;
13654:  BCF    2C.1
.................... 				rolando = false;
13656:  BCF    2C.0
13658:  MOVLB  4
.................... 		 		}
.................... 		 	}
.................... 		 }
1365A:  BRA    13758
1365C:  MOVLB  0
.................... 	else if (tecla_down == 1)
1365E:  BTFSS  2A.6
13660:  BRA    13712
.................... 		{
.................... 		tecla_down = 0;
13662:  BCF    2A.6
.................... 		exibiu = 0;
13664:  BCF    29.6
.................... 		if (programando == 1)
13666:  BTFSS  29.5
13668:  BRA    13700
.................... 			{
.................... 			tempo_senha = 255;
1366A:  MOVLB  4
1366C:  SETF   xA6
.................... 		 	if ((menu_aux == 1) || (menu_aux == 2))
1366E:  DECFSZ 36,W
13670:  BRA    13674
13672:  BRA    1367A
13674:  MOVF   36,W
13676:  SUBLW  02
13678:  BNZ   136BE
.................... 		 		{
.................... 			 	if (tabela_programa[menu_aux] > 80)
1367A:  BCF    FD8.0
1367C:  RLCF   36,W
1367E:  CLRF   03
13680:  ADDLW  D7
13682:  MOVWF  FE9
13684:  MOVLW  01
13686:  ADDWFC 03,W
13688:  MOVWF  FEA
1368A:  MOVFF  FEC,A4B
1368E:  MOVF   FED,F
13690:  MOVFF  FEF,A4A
13694:  MOVLB  A
13696:  MOVF   x4B,F
13698:  BNZ   136A0
1369A:  MOVF   x4A,W
1369C:  SUBLW  50
1369E:  BC    136BA
.................... 			 		{
.................... 					tabela_programa[menu_aux]--;
136A0:  BCF    FD8.0
136A2:  RLCF   36,W
136A4:  CLRF   03
136A6:  ADDLW  D7
136A8:  MOVWF  FE9
136AA:  MOVLW  01
136AC:  ADDWFC 03,W
136AE:  MOVWF  FEA
136B0:  MOVLW  FF
136B2:  ADDWF  FEF,F
136B4:  BC    136BA
136B6:  MOVF   FEE,F
136B8:  DECF   FED,F
.................... 					}
.................... 				}
136BA:  BRA    136FC
136BC:  MOVLB  4
.................... 		 	else
.................... 		 		{
.................... 			 	if (tabela_programa[menu_aux] > 0)
136BE:  BCF    FD8.0
136C0:  RLCF   36,W
136C2:  CLRF   03
136C4:  ADDLW  D7
136C6:  MOVWF  FE9
136C8:  MOVLW  01
136CA:  ADDWFC 03,W
136CC:  MOVWF  FEA
136CE:  MOVFF  FEC,A4B
136D2:  MOVF   FED,F
136D4:  MOVFF  FEF,A4A
136D8:  MOVLB  A
136DA:  MOVF   x4A,F
136DC:  BNZ   136E2
136DE:  MOVF   x4B,F
136E0:  BZ    136FC
.................... 			 		{
.................... 					tabela_programa[menu_aux]--;
136E2:  BCF    FD8.0
136E4:  RLCF   36,W
136E6:  CLRF   03
136E8:  ADDLW  D7
136EA:  MOVWF  FE9
136EC:  MOVLW  01
136EE:  ADDWFC 03,W
136F0:  MOVWF  FEA
136F2:  MOVLW  FF
136F4:  ADDWF  FEF,F
136F6:  BC    136FC
136F8:  MOVF   FEE,F
136FA:  DECF   FED,F
.................... 					}
.................... 				}
.................... 		 	}
136FC:  BRA    1370E
136FE:  MOVLB  0
.................... 		else
.................... 			{
.................... 			#if (st8500c == true)
.................... 				 if (menu_aux < nro_menus6)
13700:  MOVF   36,W
13702:  SUBLW  04
13704:  BNC   1370C
.................... 			#else
.................... 				 if (menu_aux < nro_menus5)
.................... 			#endif
.................... 		 		{
.................... 	 			menu_aux++;
13706:  INCF   36,F
.................... 				reset_rolar();
13708:  CALL   E704
1370C:  MOVLB  A
.................... 	 			}
.................... 	 		}
.................... 		}
1370E:  BRA    13756
13710:  MOVLB  0
.................... 	else if (tecla_reset == 1)
13712:  BTFSS  2B.1
13714:  BRA    13754
.................... 		{
.................... 		tecla_reset = 0;
13716:  BCF    2B.1
.................... 		reset_rolar();
13718:  CALL   E704
.................... 		if (programando == 1)
1371C:  BTFSS  29.5
1371E:  BRA    13746
.................... 			{
.................... 			programando = 0;
13720:  BCF    29.5
.................... 			tabela_programa[1] = ala_fp_ind;
13722:  MOVLB  1
13724:  CLRF   xDA
13726:  MOVFF  4D0,1D9
.................... 			tabela_programa[2] = ala_fp_cap;
1372A:  CLRF   xDC
1372C:  MOVFF  4D1,1DB
.................... 			tabela_programa[3] = ala_ten_a;
13730:  CLRF   xDE
13732:  MOVFF  4D2,1DD
.................... 			tabela_programa[4] = ala_ten_b;
13736:  CLRF   xE0
13738:  MOVFF  4D3,1DF
.................... 			#if (st8500c == true)
.................... 				tabela_programa[5] = ala_demanda_ativa;
1373C:  CLRF   xE2
1373E:  MOVFF  4DA,1E1
.................... 			#else
.................... 				tabela_programa[5] = ala_sc;
.................... 				tabela_programa[6] = ala_subc;
.................... 				tabela_programa[7] = ala_chtt;
.................... 				tabela_programa[8] = ala_chtc;
.................... 			#endif
.................... 			}
13742:  BRA    13756
13744:  MOVLB  0
.................... 		else
.................... 			{
.................... 			menu_aux = 0;
13746:  CLRF   36
.................... 			menu1 = 6;
13748:  MOVLW  06
1374A:  MOVWF  35
.................... 			qmenu = 0;
1374C:  CLRF   3A
.................... 			exibe_menu();
1374E:  CALL   E70A
.................... 			return;
13752:  BRA    1375C
13754:  MOVLB  1
13756:  MOVLB  4
.................... 			}
.................... 		}
.................... 	exibe_alarmes();
13758:  MOVLB  0
1375A:  RCALL  13352
1375C:  RETURN 0
.................... }
.................... 
.................... 
.................... void salva_alarmes(void)
.................... {
.................... 	ala_fp_ind = tabela_programa[1];
*
13506:  MOVFF  1D9,4D0
.................... 	ala_fp_cap = tabela_programa[2];
1350A:  MOVFF  1DB,4D1
.................... 	ala_ten_a = tabela_programa[3];
1350E:  MOVFF  1DD,4D2
.................... 	ala_ten_b = tabela_programa[4];
13512:  MOVFF  1DF,4D3
.................... 	#if (st8500c == true)
.................... 		ala_demanda_ativa = tabela_programa[5];
13516:  MOVFF  1E1,4DA
.................... 	#else
.................... 		ala_sc = tabela_programa[5];
.................... 		ala_subc = tabela_programa[6];
.................... 		ala_chtt = tabela_programa[7];
.................... 		ala_chtc = tabela_programa[8];
.................... 	#endif
.................... 
.................... 	salva_programa();
1351A:  CALL   111E2
.................... 	valida_programa();
1351E:  CALL   36FE
....................  	exibe_alarmes();
13522:  RCALL  13352
13524:  GOTO   13582 (RETURN)
.................... }
.................... 
.................... 
.................... void exibe_alarmes(void)
.................... {
.................... 	char x;
.................... 	x = 38;
*
13352:  MOVLW  26
13354:  MOVLB  A
13356:  MOVWF  x4A
.................... 	#if (ST8100C == true)
.................... 		switch (menu_aux)
.................... 			{
.................... 			case 0:
.................... 				{
.................... 				menu_aux = 1;
.................... 				break;
.................... 				}
.................... 			default:
.................... 				{
.................... 				if (ja_rolou == true)
.................... 					{
.................... 					rolando = false;
.................... 					}
.................... 				else
.................... 					{
.................... 					if (rolando == false)
.................... 						{
.................... 						mensagem_rola((x + menu_aux),1);
.................... 						}
.................... 					}
.................... 				break;						
.................... 				}
.................... 			}
.................... 	
.................... 		if (ja_rolou == true)
.................... 			{
.................... 			if ((menu_aux == 1) || (menu_aux == 2))
.................... 				{
.................... 				if (tabela_programa[menu_aux] == 100)
.................... 					{
.................... 					exibe_off();
.................... 					}
.................... 				else
.................... 					{
.................... 					binasc2(tabela_programa[menu_aux]);
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[M0] | 0x80;
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				}
.................... 			else
.................... 				{
.................... 				if (tabela_programa[menu_aux] == 0)
.................... 					{
.................... 					exibe_off();
.................... 					}
.................... 				else
.................... 					{
.................... 					binasc2(tabela_programa[menu_aux]);
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[buf_tmp[2] - '0'];
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				}
.................... 			}
.................... 	
.................... 		pisca_pontos();
.................... 	#else
.................... 		switch (menu_aux)
13358:  MOVF   36,W
1335A:  XORLW  01
1335C:  MOVLB  0
1335E:  BZ    13376
13360:  XORLW  03
13362:  BZ    133BE
13364:  XORLW  01
13366:  BZ    13406
13368:  XORLW  07
1336A:  BTFSC  FD8.2
1336C:  BRA    13454
1336E:  XORLW  01
13370:  BTFSC  FD8.2
13372:  BRA    134A2
13374:  BRA    13500
.................... 			{
.................... 			case 1:
.................... 				{
.................... 				if (exibiu == 0)
13376:  BTFSC  29.6
13378:  BRA    1338C
.................... 					{
.................... 					exibiu = 1;
1337A:  BSF    29.6
.................... 					mensagem (2,41);
1337C:  MOVLW  02
1337E:  MOVLB  A
13380:  MOVWF  x4D
13382:  MOVLW  29
13384:  MOVWF  x4E
13386:  MOVLB  0
13388:  CALL   47E8
.................... 					}
.................... 				if (tabela_programa[1] > 99 )
1338C:  MOVLB  1
1338E:  MOVF   xDA,F
13390:  BNZ   13398
13392:  MOVF   xD9,W
13394:  SUBLW  63
13396:  BC    133A6
.................... 					{
.................... 					exibe_off(29);
13398:  MOVLW  1D
1339A:  MOVLB  A
1339C:  MOVWF  x4B
1339E:  MOVLB  0
133A0:  RCALL  1312E
.................... 					}
133A2:  BRA    133BC
133A4:  MOVLB  1
.................... 				else
.................... 					{
.................... 					displayd(29,tabela_programa[1],'P');
133A6:  MOVLW  1D
133A8:  MOVLB  A
133AA:  MOVWF  x4B
133AC:  MOVFF  1DA,A4D
133B0:  MOVFF  1D9,A4C
133B4:  MOVLW  50
133B6:  MOVWF  x4E
133B8:  MOVLB  0
133BA:  RCALL  13214
.................... 					}
.................... 				break;
133BC:  BRA    13504
.................... 				}
.................... 			case 2:
.................... 				{
.................... 				if (exibiu == 0)
133BE:  BTFSC  29.6
133C0:  BRA    133D4
.................... 					{
.................... 					exibiu = 1;
133C2:  BSF    29.6
.................... 					mensagem (2,42);
133C4:  MOVLW  02
133C6:  MOVLB  A
133C8:  MOVWF  x4D
133CA:  MOVLW  2A
133CC:  MOVWF  x4E
133CE:  MOVLB  0
133D0:  CALL   47E8
.................... 					}
.................... 				if (tabela_programa[2] > 99 )
133D4:  MOVLB  1
133D6:  MOVF   xDC,F
133D8:  BNZ   133E0
133DA:  MOVF   xDB,W
133DC:  SUBLW  63
133DE:  BC    133EE
.................... 					{
.................... 					exibe_off(29);
133E0:  MOVLW  1D
133E2:  MOVLB  A
133E4:  MOVWF  x4B
133E6:  MOVLB  0
133E8:  RCALL  1312E
.................... 					}
133EA:  BRA    13404
133EC:  MOVLB  1
.................... 				else
.................... 					{
.................... 					displayd(29,tabela_programa[2],'P');
133EE:  MOVLW  1D
133F0:  MOVLB  A
133F2:  MOVWF  x4B
133F4:  MOVFF  1DC,A4D
133F8:  MOVFF  1DB,A4C
133FC:  MOVLW  50
133FE:  MOVWF  x4E
13400:  MOVLB  0
13402:  RCALL  13214
.................... 					}
.................... 				break;
13404:  BRA    13504
.................... 				}
.................... 			case 3:
.................... 				{
.................... 				if (exibiu == 0)
13406:  BTFSC  29.6
13408:  BRA    1341C
.................... 					{
.................... 					exibiu = 1;
1340A:  BSF    29.6
.................... 					mensagem (2,43);
1340C:  MOVLW  02
1340E:  MOVLB  A
13410:  MOVWF  x4D
13412:  MOVLW  2B
13414:  MOVWF  x4E
13416:  MOVLB  0
13418:  CALL   47E8
.................... 					}
.................... 				if (tabela_programa[3] == 0)
1341C:  MOVLB  1
1341E:  MOVF   xDD,F
13420:  BNZ   13434
13422:  MOVF   xDE,F
13424:  BNZ   13434
.................... 					{
.................... 					exibe_off(29);
13426:  MOVLW  1D
13428:  MOVLB  A
1342A:  MOVWF  x4B
1342C:  MOVLB  0
1342E:  RCALL  1312E
.................... 					}
13430:  BRA    13452
13432:  MOVLB  1
.................... 				else
.................... 					{
.................... 					displayp(30,tabela_programa[3],2,0,'P');
13434:  MOVLW  1E
13436:  MOVLB  A
13438:  MOVWF  x4E
1343A:  MOVFF  1DE,A50
1343E:  MOVFF  1DD,A4F
13442:  MOVLW  02
13444:  MOVWF  x51
13446:  CLRF   x52
13448:  MOVLW  50
1344A:  MOVWF  x53
1344C:  MOVLB  0
1344E:  CALL   5038
.................... 					}
.................... 				break;
13452:  BRA    13504
.................... 				}
.................... 			case 4:
.................... 				{
.................... 				if (exibiu == 0)
13454:  BTFSC  29.6
13456:  BRA    1346A
.................... 					{
.................... 					exibiu = 1;
13458:  BSF    29.6
.................... 					mensagem (2,44);
1345A:  MOVLW  02
1345C:  MOVLB  A
1345E:  MOVWF  x4D
13460:  MOVLW  2C
13462:  MOVWF  x4E
13464:  MOVLB  0
13466:  CALL   47E8
.................... 					}
.................... 				if (tabela_programa[4] == 0)
1346A:  MOVLB  1
1346C:  MOVF   xDF,F
1346E:  BNZ   13482
13470:  MOVF   xE0,F
13472:  BNZ   13482
.................... 					{
.................... 					exibe_off(29);
13474:  MOVLW  1D
13476:  MOVLB  A
13478:  MOVWF  x4B
1347A:  MOVLB  0
1347C:  RCALL  1312E
.................... 					}
1347E:  BRA    134A0
13480:  MOVLB  1
.................... 				else
.................... 					{
.................... 					displayp(30,tabela_programa[4],2,0,'P');
13482:  MOVLW  1E
13484:  MOVLB  A
13486:  MOVWF  x4E
13488:  MOVFF  1E0,A50
1348C:  MOVFF  1DF,A4F
13490:  MOVLW  02
13492:  MOVWF  x51
13494:  CLRF   x52
13496:  MOVLW  50
13498:  MOVWF  x53
1349A:  MOVLB  0
1349C:  CALL   5038
.................... 					}
.................... 				break;
134A0:  BRA    13504
.................... 				}
.................... 			#if (st8500c == true)
.................... 				case 5:
.................... 					{
.................... 					if (exibiu == 0)
134A2:  BTFSC  29.6
134A4:  BRA    134B8
.................... 						{
.................... 						exibiu = 1;
134A6:  BSF    29.6
.................... 						mensagem (2,21);
134A8:  MOVLW  02
134AA:  MOVLB  A
134AC:  MOVWF  x4D
134AE:  MOVLW  15
134B0:  MOVWF  x4E
134B2:  MOVLB  0
134B4:  CALL   47E8
.................... 						}
.................... 					if (tabela_programa[5] == 0)
134B8:  MOVLB  1
134BA:  MOVF   xE1,F
134BC:  BNZ   134E0
134BE:  MOVF   xE2,F
134C0:  BNZ   134E0
.................... 						{
.................... 						exibe_off(28);
134C2:  MOVLW  1C
134C4:  MOVLB  A
134C6:  MOVWF  x4B
134C8:  MOVLB  0
134CA:  RCALL  1312E
.................... 						wr_lcd(1,' ');
134CC:  MOVLW  01
134CE:  MOVLB  A
134D0:  MOVWF  x65
134D2:  MOVLW  20
134D4:  MOVWF  x66
134D6:  MOVLB  0
134D8:  CALL   1864
.................... 						}
134DC:  BRA    134FE
134DE:  MOVLB  1
.................... 					else
.................... 						{
.................... 						displayp(30,tabela_programa[5],2,0,'P');
134E0:  MOVLW  1E
134E2:  MOVLB  A
134E4:  MOVWF  x4E
134E6:  MOVFF  1E2,A50
134EA:  MOVFF  1E1,A4F
134EE:  MOVLW  02
134F0:  MOVWF  x51
134F2:  CLRF   x52
134F4:  MOVLW  50
134F6:  MOVWF  x53
134F8:  MOVLB  0
134FA:  CALL   5038
.................... 						}
.................... 					break;
134FE:  BRA    13504
.................... 					}
.................... 			#else
.................... 				case 5:
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						exibiu = 1;
.................... 						mensagem (2,45);
.................... 						}
.................... 					if (tabela_programa[5] == 0)
.................... 						{
.................... 						exibe_off(29);
.................... 						}
.................... 					else
.................... 						{
.................... 						displayp(29,tabela_programa[5],3,0,'P');
.................... 						}
.................... 					break;
.................... 					}
.................... 			#endif
.................... 			#if ((st8100c == true) || (st8200c == true) || (st8300c == true))
.................... 				case 6:
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						exibiu = 1;
.................... 						mensagem (2,46);
.................... 						}
.................... 					if (tabela_programa[6] == 0)
.................... 						{
.................... 						exibe_off(29);
.................... 						}
.................... 					else
.................... 						{
.................... 						displayp(29,tabela_programa[6],3,0,'P');
.................... 						}
.................... 					break;
.................... 					}
.................... 				case 7:
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						exibiu = 1;
.................... 						mensagem (2,47);
.................... 						}
.................... 					if (tabela_programa[7] == 0)
.................... 						{
.................... 						exibe_off(29);
.................... 						}
.................... 					else
.................... 						{
.................... 						displayp(30,tabela_programa[7],2,0,'P');
.................... 						}
.................... 					break;
.................... 					}
.................... 				case 8:
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						exibiu = 1;
.................... 						mensagem (2,48);
.................... 						}
.................... 					if (tabela_programa[8] == 0)
.................... 						{
.................... 						exibe_off(29);
.................... 						}
.................... 					else
.................... 						{
.................... 						displayp(30,tabela_programa[8],2,0,'P');
.................... 						}
.................... 					break;
.................... 					}
.................... 			#endif
.................... 			default:
.................... 				{
.................... 				menu_aux = 1;
13500:  MOVLW  01
13502:  MOVWF  36
.................... 				break;
.................... 				}
.................... 			}
.................... 	#endif
13504:  RETURN 0
.................... }
.................... 
.................... #if ((st8100c == true) || ( st8200c == true) || ( st8300c == true))
.................... 	#include "st8x00_men7.c"		// menu desligamentos
.................... 	#include "st8x00_men8.c"		// menu manual
.................... #endif	
.................... #include "st8x00_men9.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610_MEN9                                                    *
.................... ; Funcao: TRATAMENTO DO MENU DE OCORRÊNCIAS								 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... #if ((st8500c == true) || (ST8200C == true) || (ST8300C == true))
.................... 	char ult_posi_ocor;
.................... #endif
.................... short prog_apaga;
.................... short existe_ocor;
.................... void exibe_ocorrencia(void);
.................... 
.................... 
.................... void trata_menu9(void)
.................... {
.................... 	if (qmenu != 9)
*
13CDC:  MOVF   3A,W
13CDE:  SUBLW  09
13CE0:  BZ    13D36
.................... 		{
.................... 		qmenu = 9;
13CE2:  MOVLW  09
13CE4:  MOVWF  3A
.................... 		limpa_ocor = 0;
13CE6:  BCF    22.0
.................... 		prog_apaga = 0;
13CE8:  MOVLB  8
13CEA:  BCF    x9E.0
.................... 		#if ((st8500c == true) || (ST8200C == true) || (ST8300C == true))
.................... 			// ler posicao da ultima ocorrencia	
.................... 			aux_w1 = 0;	
13CEC:  MOVLB  3
13CEE:  CLRF   x63
13CF0:  CLRF   x62
.................... 			#if (com_relogio == true)
.................... 				aux_w1 =  read_word_nvr(ds_ptr_ocor);
13CF2:  MOVLW  0E
13CF4:  MOVLB  A
13CF6:  MOVWF  x79
13CF8:  MOVLB  0
13CFA:  CALL   54CA
13CFE:  MOVFF  02,363
13D02:  MOVFF  01,362
.................... 			#else
.................... 				aux_w1 =  read_word(ee_ptr_rocor);
.................... 			#endif
.................... 			if (aux_w1 > limite_ocorrencias)
13D06:  MOVLB  3
13D08:  MOVF   x63,F
13D0A:  BNZ   13D12
13D0C:  MOVF   x62,W
13D0E:  SUBLW  FA
13D10:  BC    13D16
.................... 				{
.................... 				aux_w1 = 0;
13D12:  CLRF   x63
13D14:  CLRF   x62
.................... 				}
.................... 			if (aux_w1 != 0)
13D16:  MOVF   x62,F
13D18:  BNZ   13D1E
13D1A:  MOVF   x63,F
13D1C:  BZ    13D26
.................... 				{
.................... 				aux_w1--;
13D1E:  MOVF   x62,W
13D20:  BTFSC  FD8.2
13D22:  DECF   x63,F
13D24:  DECF   x62,F
.................... 				}
.................... 			menu_aux = aux_w1;
13D26:  MOVFF  362,36
.................... 			ult_posi_ocor = menu_aux;
13D2A:  MOVFF  36,89D
.................... 		#else
.................... 			menu_aux = read_byte(ee_ptr_ocor);
.................... 			if (menu_aux > 99)
.................... 				{
.................... 				menu_aux = 0;
.................... 				write_byte(ee_ptr_ocor,0);
.................... 				}
.................... 			menu_aux = 1;
.................... 			em_status = false;
.................... 			reset_rolar();
.................... 		#endif
.................... 		exibiu = 0;
13D2E:  BCF    29.6
.................... 		time_out_menus = 60;
13D30:  MOVLW  3C
13D32:  MOVWF  31
13D34:  MOVLB  0
.................... 		}
.................... 		
.................... 	if (tecla_enter == 1)
13D36:  BTFSS  2B.0
13D38:  BRA    13D6A
.................... 		{
.................... 	 	tecla_enter = 0;
13D3A:  BCF    2B.0
.................... 		exibiu = 0;
13D3C:  BCF    29.6
.................... 		#if ((st8500c == true) || (ST8200C == true) || (ST8300C == true))
.................... 			menu_aux = ult_posi_ocor;
13D3E:  MOVFF  89D,36
.................... 		#else
.................... 			menu_aux = read_byte(ee_ptr_ocor);
.................... 		#endif
.................... 		if (tempo_senha == 0)
13D42:  MOVLB  4
13D44:  MOVF   xA6,F
13D46:  BNZ   13D54
.................... 			{
.................... 			trata_senha();
13D48:  MOVLB  0
13D4A:  CALL   FFE0
.................... 			return;
13D4E:  BRA    13DBE
.................... 			}
13D50:  BRA    13D6A
13D52:  MOVLB  4
.................... 		else
.................... 			{
.................... 			#if (ST8100C == true)
.................... 				if (prog_apaga == 0)
.................... 					{
.................... 					prog_apaga = 1;
.................... 					limpa_ocor = 1;
.................... 					if (rolando == true)
.................... 						{
.................... 						rolando = false;
.................... 						ja_rolou = true;
.................... 						return;
.................... 						}
.................... 					}
.................... 				else
.................... 					{
.................... 					limpa_ocor = 0;
.................... 					prog_apaga = 0;
.................... 					apaga_ocorrencias();
.................... 					rolando = false;
.................... 					ja_rolou = false;
.................... 					}
.................... 			#else
.................... 				if (limpa_ocor == 1)
13D54:  BTFSS  22.0
13D56:  BRA    13D66
.................... 					{
.................... 					limpa_ocor = 0;
13D58:  BCF    22.0
.................... 					#if (com_regs == true)
.................... 						apaga_ocorrencias();
13D5A:  MOVLB  0
13D5C:  CALL   A6FC
.................... 					#endif
.................... 					goto tec_reset_menu9;
13D60:  BRA    13D6E
.................... 					}
13D62:  BRA    13D6A
13D64:  MOVLB  4
.................... 				else
.................... 					{
.................... 					limpa_ocor = 1;
13D66:  BSF    22.0
13D68:  MOVLB  0
.................... 					}
.................... 			#endif
.................... 			}
.................... 		}
.................... 
.................... 	if (tecla_reset == 1)
13D6A:  BTFSS  2B.1
13D6C:  BRA    13D94
.................... 		{
.................... tec_reset_menu9:
.................... 		prog_apaga = 0;
13D6E:  MOVLB  8
13D70:  BCF    x9E.0
.................... 		tecla_reset = 0;
13D72:  BCF    2B.1
.................... 		exibiu = 0;
13D74:  BCF    29.6
.................... 		if (limpa_ocor == 1)
13D76:  BTFSS  22.0
13D78:  BRA    13D7E
.................... 			{
.................... 			limpa_ocor = 0;
13D7A:  BCF    22.0
.................... 			}
13D7C:  BRA    13D90
.................... 		else
.................... 			{
.................... 			menu_aux = 1;
13D7E:  MOVLW  01
13D80:  MOVWF  36
.................... 			menu1 = 9;
13D82:  MOVLW  09
13D84:  MOVWF  35
.................... 			qmenu = 0;
13D86:  CLRF   3A
.................... 			exibe_menu();
13D88:  MOVLB  0
13D8A:  CALL   E70A
13D8E:  MOVLB  8
.................... 			}
.................... 		return;
13D90:  MOVLB  0
13D92:  BRA    13DBE
.................... 		}
.................... 
.................... 	if (tecla_up == 1)
13D94:  BTFSS  2A.5
13D96:  BRA    13DA8
.................... 		{
.................... 		tecla_up = 0;
13D98:  BCF    2A.5
.................... 		exibiu = 0;
13D9A:  BCF    29.6
.................... 		#if ((st8500c == true) || (ST8200C == true) || (ST8300C == true))
.................... 			if (menu_aux < limite_ocorrencias)
13D9C:  MOVF   36,W
13D9E:  SUBLW  F9
13DA0:  BNC   13DA6
.................... 				{
.................... 				menu_aux++;
13DA2:  INCF   36,F
.................... 				}
13DA4:  BRA    13DA8
.................... 			else
.................... 				{
.................... 				menu_aux = 0;
13DA6:  CLRF   36
.................... 				}
.................... 		#else		
.................... 			if (menu_aux < read_byte(ee_ptr_ocor))
.................... 				{
.................... 				menu_aux++;
.................... 				#if (ST8100C == true)
.................... 					rolando = false;
.................... 				#endif
.................... 				}
.................... 		#endif
.................... 		}
.................... 
.................... 	if (tecla_down == 1)
13DA8:  BTFSS  2A.6
13DAA:  BRA    13DBC
.................... 		{
.................... 		tecla_down = 0;
13DAC:  BCF    2A.6
.................... 		exibiu = 0;
13DAE:  BCF    29.6
.................... 		if (menu_aux > 0)
13DB0:  MOVF   36,F
13DB2:  BZ    13DB8
.................... 			{
.................... 			menu_aux--;
13DB4:  DECF   36,F
.................... 			#if (ST8100C == true)
.................... 				rolando = false;
.................... 			#endif
.................... 			}
.................... 		#if ((st8500c == true) || (ST8200C == true) || (ST8300C == true))
13DB6:  BRA    13DBC
.................... 			else
.................... 				{
.................... 				menu_aux = limite_ocorrencias;
13DB8:  MOVLW  FA
13DBA:  MOVWF  36
.................... 				}
.................... 		#endif
.................... 		}
.................... 
.................... 	exibe_ocorrencia();
13DBC:  BRA    13788
13DBE:  RETURN 0
.................... }
.................... 
.................... void exibe_ocorrencia(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (limpa_ocor == 1)
.................... 			{
.................... 			if (rolando == false)
.................... 				{
.................... 				mensagem_rola(52,1);		//busca mensagem na tabela de mensagens geral
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			aux_b1 = read_byte(ee_ocorrencias + menu_aux);
.................... 			if (aux_b1 > limite_ocorrencias)
.................... 				{
.................... 				if (rolando == false)
.................... 					{
.................... 					mensagem_rola(1,0);
.................... 					}
.................... 				}
.................... 			else
.................... 				{
.................... 				if (rolando == false)
.................... 					{
.................... 					mensagem_rola(aux_b1,0);		//busca mensagem na tabela de erros
.................... 					}
.................... 				}
.................... 			}
.................... 	#else
.................... 		#if ((st8500c == true) || (ST8200C == true) || (ST8300C == true))
.................... 			#if (com_regs == true)
.................... 				if (exibiu == 0)
*
13788:  BTFSC  29.6
1378A:  BRA    13CD8
.................... 					{
.................... 					exibiu = 1;
1378C:  BSF    29.6
.................... 					if (limpa_ocor == 1)
1378E:  BTFSS  22.0
13790:  BRA    137D4
.................... 						{
.................... 						mensagem(1,131);
13792:  MOVLW  01
13794:  MOVLB  A
13796:  MOVWF  x4D
13798:  MOVLW  83
1379A:  MOVWF  x4E
1379C:  MOVLB  0
1379E:  CALL   47E8
.................... 						lcd_gotoxy(2,1);
137A2:  MOVLW  02
137A4:  MOVLB  A
137A6:  MOVWF  x62
137A8:  MOVLW  01
137AA:  MOVWF  x63
137AC:  MOVLB  0
137AE:  CALL   46C4
.................... 					    wr_lcd(1,0x7F);		//escreve a seta para esquerda
137B2:  MOVLW  01
137B4:  MOVLB  A
137B6:  MOVWF  x65
137B8:  MOVLW  7F
137BA:  MOVWF  x66
137BC:  MOVLB  0
137BE:  CALL   1864
.................... 						mensagem(2,132);
137C2:  MOVLW  02
137C4:  MOVLB  A
137C6:  MOVWF  x4D
137C8:  MOVLW  84
137CA:  MOVWF  x4E
137CC:  MOVLB  0
137CE:  CALL   47E8
.................... 						}
137D2:  BRA    13CD8
.................... 					else
.................... 						{
.................... 						// apontar para posicao de ocorrencia na flash
.................... 						// ler da Flash a ocorrencia
.................... 						// se codigo for 255, avançar até encontrar um código válido, se rodar 255 posiçoes, avisa final de ocorrencias
.................... 						existe_ocor = false;
137D4:  MOVLB  8
137D6:  BCF    x9E.1
.................... 						for (aux_b1 = menu_aux; aux_b1 < 250; aux_b1++)
137D8:  MOVFF  36,3B1
137DC:  MOVLB  3
137DE:  MOVF   xB1,W
137E0:  SUBLW  F9
137E2:  BTFSS  FD8.0
137E4:  BRA    139E8
.................... 							{
.................... 							aux_l2 = aux_b1;
137E6:  CLRF   x77
137E8:  CLRF   x76
137EA:  CLRF   x75
137EC:  MOVFF  3B1,374
.................... 							aux_l1 = inicio_ocorrencias;
137F0:  CLRF   x73
137F2:  MOVLW  07
137F4:  MOVWF  x72
137F6:  MOVLW  63
137F8:  MOVWF  x71
137FA:  CLRF   x70
.................... 							aux_l1 = aux_l1 + (int32)(aux_l2 * TAM_REGS);
137FC:  RLCF   x74,W
137FE:  MOVWF  00
13800:  RLCF   x75,W
13802:  MOVWF  01
13804:  RLCF   x76,W
13806:  MOVWF  02
13808:  RLCF   x77,W
1380A:  MOVWF  03
1380C:  RLCF   00,F
1380E:  RLCF   01,F
13810:  RLCF   02,F
13812:  RLCF   03,F
13814:  RLCF   00,F
13816:  RLCF   01,F
13818:  RLCF   02,F
1381A:  RLCF   03,F
1381C:  RLCF   00,F
1381E:  RLCF   01,F
13820:  RLCF   02,F
13822:  RLCF   03,F
13824:  RLCF   00,F
13826:  RLCF   01,F
13828:  RLCF   02,F
1382A:  RLCF   03,F
1382C:  MOVLW  E0
1382E:  ANDWF  00,F
13830:  MOVF   00,W
13832:  ADDWF  x70,F
13834:  MOVF   01,W
13836:  ADDWFC x71,F
13838:  MOVF   02,W
1383A:  ADDWFC x72,F
1383C:  MOVF   03,W
1383E:  ADDWFC x73,F
.................... 							aux_b2 = read_byte_flash(aux_l1); 
13840:  MOVFF  373,A7C
13844:  MOVFF  372,A7B
13848:  MOVFF  371,A7A
1384C:  MOVFF  370,A79
13850:  MOVLB  0
13852:  CALL   550A
13856:  MOVFF  01,3B2
.................... 							if (aux_b2 != 0xff)
1385A:  MOVLB  3
1385C:  INCFSZ xB2,W
1385E:  BRA    13862
13860:  BRA    139E0
.................... 								{
.................... 								if (aux_b2 < nro_tab_ocor)
13862:  MOVF   xB2,W
13864:  SUBLW  3F
13866:  BTFSS  FD8.0
13868:  BRA    139E0
.................... 									{
.................... 									aux_l1++;
1386A:  MOVLW  01
1386C:  ADDWF  x70,F
1386E:  BTFSC  FD8.0
13870:  INCF   x71,F
13872:  BTFSC  FD8.2
13874:  INCF   x72,F
13876:  BTFSC  FD8.2
13878:  INCF   x73,F
.................... 									// Le dia e hora
.................... 									dia_old = read_byte_flash(aux_l1++);
1387A:  MOVFF  373,03
1387E:  MOVFF  372,02
13882:  MOVFF  371,01
13886:  MOVFF  370,00
1388A:  MOVLW  01
1388C:  ADDWF  x70,F
1388E:  BTFSC  FD8.0
13890:  INCF   x71,F
13892:  BTFSC  FD8.2
13894:  INCF   x72,F
13896:  BTFSC  FD8.2
13898:  INCF   x73,F
1389A:  MOVFF  03,A4D
1389E:  MOVFF  02,A4C
138A2:  MOVFF  01,A4B
138A6:  MOVFF  00,A4A
138AA:  MOVFF  03,A7C
138AE:  MOVFF  02,A7B
138B2:  MOVFF  01,A7A
138B6:  MOVFF  00,A79
138BA:  MOVLB  0
138BC:  CALL   550A
138C0:  MOVFF  01,3D
.................... 									mes_old = read_byte_flash(aux_l1++);
138C4:  MOVLB  3
138C6:  MOVFF  373,03
138CA:  MOVFF  372,02
138CE:  MOVFF  371,01
138D2:  MOVFF  370,00
138D6:  MOVLW  01
138D8:  ADDWF  x70,F
138DA:  BTFSC  FD8.0
138DC:  INCF   x71,F
138DE:  BTFSC  FD8.2
138E0:  INCF   x72,F
138E2:  BTFSC  FD8.2
138E4:  INCF   x73,F
138E6:  MOVFF  03,A4D
138EA:  MOVFF  02,A4C
138EE:  MOVFF  01,A4B
138F2:  MOVFF  00,A4A
138F6:  MOVFF  03,A7C
138FA:  MOVFF  02,A7B
138FE:  MOVFF  01,A7A
13902:  MOVFF  00,A79
13906:  MOVLB  0
13908:  CALL   550A
1390C:  MOVFF  01,3E
.................... 									ano_old = read_byte_flash(aux_l1++);
13910:  MOVLB  3
13912:  MOVFF  373,03
13916:  MOVFF  372,02
1391A:  MOVFF  371,01
1391E:  MOVFF  370,00
13922:  MOVLW  01
13924:  ADDWF  x70,F
13926:  BTFSC  FD8.0
13928:  INCF   x71,F
1392A:  BTFSC  FD8.2
1392C:  INCF   x72,F
1392E:  BTFSC  FD8.2
13930:  INCF   x73,F
13932:  MOVFF  03,A4D
13936:  MOVFF  02,A4C
1393A:  MOVFF  01,A4B
1393E:  MOVFF  00,A4A
13942:  MOVFF  03,A7C
13946:  MOVFF  02,A7B
1394A:  MOVFF  01,A7A
1394E:  MOVFF  00,A79
13952:  MOVLB  0
13954:  CALL   550A
13958:  MOVFF  01,3F
.................... 									hora_old = read_byte_flash(aux_l1++);
1395C:  MOVLB  3
1395E:  MOVFF  373,03
13962:  MOVFF  372,02
13966:  MOVFF  371,01
1396A:  MOVFF  370,00
1396E:  MOVLW  01
13970:  ADDWF  x70,F
13972:  BTFSC  FD8.0
13974:  INCF   x71,F
13976:  BTFSC  FD8.2
13978:  INCF   x72,F
1397A:  BTFSC  FD8.2
1397C:  INCF   x73,F
1397E:  MOVFF  03,A4D
13982:  MOVFF  02,A4C
13986:  MOVFF  01,A4B
1398A:  MOVFF  00,A4A
1398E:  MOVFF  03,A7C
13992:  MOVFF  02,A7B
13996:  MOVFF  01,A7A
1399A:  MOVFF  00,A79
1399E:  MOVLB  0
139A0:  CALL   550A
139A4:  MOVFF  01,40
.................... 									minuto_old = read_byte_flash(aux_l1);
139A8:  MOVFF  373,A7C
139AC:  MOVFF  372,A7B
139B0:  MOVFF  371,A7A
139B4:  MOVFF  370,A79
139B8:  CALL   550A
139BC:  MOVFF  01,41
.................... 									if (dia_old < 32)
139C0:  MOVF   3D,W
139C2:  SUBLW  1F
139C4:  BNC   139E2
.................... 										{
.................... 										if (mes_old < 13)
139C6:  MOVF   3E,W
139C8:  SUBLW  0C
139CA:  BNC   139E2
.................... 											{
.................... 											if (hora_old < 24)
139CC:  MOVF   40,W
139CE:  SUBLW  17
139D0:  BNC   139E2
.................... 												{
.................... 												if (minuto_old < 60)
139D2:  MOVF   41,W
139D4:  SUBLW  3B
139D6:  BNC   139E2
.................... 													{
.................... 													existe_ocor = true;
139D8:  MOVLB  8
139DA:  BSF    x9E.1
.................... 													break;
139DC:  MOVLB  3
139DE:  BRA    139E8
139E0:  MOVLB  0
.................... 													}
.................... 												}
.................... 											}
.................... 										}
.................... 									}
.................... 								}
139E2:  MOVLB  3
139E4:  INCF   xB1,F
139E6:  BRA    137DE
.................... 							}
.................... 						if (existe_ocor == false)
139E8:  MOVLB  8
139EA:  BTFSC  x9E.1
139EC:  BRA    13BFE
.................... 							{
.................... 							for (aux_b1 = 0; aux_b1 < menu_aux; aux_b1++)
139EE:  MOVLB  3
139F0:  CLRF   xB1
139F2:  MOVF   36,W
139F4:  SUBWF  xB1,W
139F6:  BTFSC  FD8.0
139F8:  BRA    13BFC
.................... 								{
.................... 								aux_l2 = aux_b1;
139FA:  CLRF   x77
139FC:  CLRF   x76
139FE:  CLRF   x75
13A00:  MOVFF  3B1,374
.................... 								aux_l1 = inicio_ocorrencias;
13A04:  CLRF   x73
13A06:  MOVLW  07
13A08:  MOVWF  x72
13A0A:  MOVLW  63
13A0C:  MOVWF  x71
13A0E:  CLRF   x70
.................... 								aux_l1 = aux_l1 + (int32)(aux_l2 * TAM_REGS);
13A10:  RLCF   x74,W
13A12:  MOVWF  00
13A14:  RLCF   x75,W
13A16:  MOVWF  01
13A18:  RLCF   x76,W
13A1A:  MOVWF  02
13A1C:  RLCF   x77,W
13A1E:  MOVWF  03
13A20:  RLCF   00,F
13A22:  RLCF   01,F
13A24:  RLCF   02,F
13A26:  RLCF   03,F
13A28:  RLCF   00,F
13A2A:  RLCF   01,F
13A2C:  RLCF   02,F
13A2E:  RLCF   03,F
13A30:  RLCF   00,F
13A32:  RLCF   01,F
13A34:  RLCF   02,F
13A36:  RLCF   03,F
13A38:  RLCF   00,F
13A3A:  RLCF   01,F
13A3C:  RLCF   02,F
13A3E:  RLCF   03,F
13A40:  MOVLW  E0
13A42:  ANDWF  00,F
13A44:  MOVF   00,W
13A46:  ADDWF  x70,F
13A48:  MOVF   01,W
13A4A:  ADDWFC x71,F
13A4C:  MOVF   02,W
13A4E:  ADDWFC x72,F
13A50:  MOVF   03,W
13A52:  ADDWFC x73,F
.................... 								aux_b2 = read_byte_flash(aux_l1); 
13A54:  MOVFF  373,A7C
13A58:  MOVFF  372,A7B
13A5C:  MOVFF  371,A7A
13A60:  MOVFF  370,A79
13A64:  MOVLB  0
13A66:  CALL   550A
13A6A:  MOVFF  01,3B2
.................... 								if (aux_b2 != 0xff)
13A6E:  MOVLB  3
13A70:  INCFSZ xB2,W
13A72:  BRA    13A76
13A74:  BRA    13BF4
.................... 									{
.................... 									if (aux_b2 < nro_tab_ocor)
13A76:  MOVF   xB2,W
13A78:  SUBLW  3F
13A7A:  BTFSS  FD8.0
13A7C:  BRA    13BF4
.................... 										{
.................... 										aux_l1++;
13A7E:  MOVLW  01
13A80:  ADDWF  x70,F
13A82:  BTFSC  FD8.0
13A84:  INCF   x71,F
13A86:  BTFSC  FD8.2
13A88:  INCF   x72,F
13A8A:  BTFSC  FD8.2
13A8C:  INCF   x73,F
.................... 										// Le dia e hora
.................... 										dia_old = read_byte_flash(aux_l1++);
13A8E:  MOVFF  373,03
13A92:  MOVFF  372,02
13A96:  MOVFF  371,01
13A9A:  MOVFF  370,00
13A9E:  MOVLW  01
13AA0:  ADDWF  x70,F
13AA2:  BTFSC  FD8.0
13AA4:  INCF   x71,F
13AA6:  BTFSC  FD8.2
13AA8:  INCF   x72,F
13AAA:  BTFSC  FD8.2
13AAC:  INCF   x73,F
13AAE:  MOVFF  03,A4D
13AB2:  MOVFF  02,A4C
13AB6:  MOVFF  01,A4B
13ABA:  MOVFF  00,A4A
13ABE:  MOVFF  03,A7C
13AC2:  MOVFF  02,A7B
13AC6:  MOVFF  01,A7A
13ACA:  MOVFF  00,A79
13ACE:  MOVLB  0
13AD0:  CALL   550A
13AD4:  MOVFF  01,3D
.................... 										mes_old = read_byte_flash(aux_l1++);
13AD8:  MOVLB  3
13ADA:  MOVFF  373,03
13ADE:  MOVFF  372,02
13AE2:  MOVFF  371,01
13AE6:  MOVFF  370,00
13AEA:  MOVLW  01
13AEC:  ADDWF  x70,F
13AEE:  BTFSC  FD8.0
13AF0:  INCF   x71,F
13AF2:  BTFSC  FD8.2
13AF4:  INCF   x72,F
13AF6:  BTFSC  FD8.2
13AF8:  INCF   x73,F
13AFA:  MOVFF  03,A4D
13AFE:  MOVFF  02,A4C
13B02:  MOVFF  01,A4B
13B06:  MOVFF  00,A4A
13B0A:  MOVFF  03,A7C
13B0E:  MOVFF  02,A7B
13B12:  MOVFF  01,A7A
13B16:  MOVFF  00,A79
13B1A:  MOVLB  0
13B1C:  CALL   550A
13B20:  MOVFF  01,3E
.................... 										ano_old = read_byte_flash(aux_l1++);
13B24:  MOVLB  3
13B26:  MOVFF  373,03
13B2A:  MOVFF  372,02
13B2E:  MOVFF  371,01
13B32:  MOVFF  370,00
13B36:  MOVLW  01
13B38:  ADDWF  x70,F
13B3A:  BTFSC  FD8.0
13B3C:  INCF   x71,F
13B3E:  BTFSC  FD8.2
13B40:  INCF   x72,F
13B42:  BTFSC  FD8.2
13B44:  INCF   x73,F
13B46:  MOVFF  03,A4D
13B4A:  MOVFF  02,A4C
13B4E:  MOVFF  01,A4B
13B52:  MOVFF  00,A4A
13B56:  MOVFF  03,A7C
13B5A:  MOVFF  02,A7B
13B5E:  MOVFF  01,A7A
13B62:  MOVFF  00,A79
13B66:  MOVLB  0
13B68:  CALL   550A
13B6C:  MOVFF  01,3F
.................... 										hora_old = read_byte_flash(aux_l1++);
13B70:  MOVLB  3
13B72:  MOVFF  373,03
13B76:  MOVFF  372,02
13B7A:  MOVFF  371,01
13B7E:  MOVFF  370,00
13B82:  MOVLW  01
13B84:  ADDWF  x70,F
13B86:  BTFSC  FD8.0
13B88:  INCF   x71,F
13B8A:  BTFSC  FD8.2
13B8C:  INCF   x72,F
13B8E:  BTFSC  FD8.2
13B90:  INCF   x73,F
13B92:  MOVFF  03,A4D
13B96:  MOVFF  02,A4C
13B9A:  MOVFF  01,A4B
13B9E:  MOVFF  00,A4A
13BA2:  MOVFF  03,A7C
13BA6:  MOVFF  02,A7B
13BAA:  MOVFF  01,A7A
13BAE:  MOVFF  00,A79
13BB2:  MOVLB  0
13BB4:  CALL   550A
13BB8:  MOVFF  01,40
.................... 										minuto_old = read_byte_flash(aux_l1);
13BBC:  MOVFF  373,A7C
13BC0:  MOVFF  372,A7B
13BC4:  MOVFF  371,A7A
13BC8:  MOVFF  370,A79
13BCC:  CALL   550A
13BD0:  MOVFF  01,41
.................... 										if (dia_old < 32)
13BD4:  MOVF   3D,W
13BD6:  SUBLW  1F
13BD8:  BNC   13BF6
.................... 											{
.................... 											if (mes_old < 13)
13BDA:  MOVF   3E,W
13BDC:  SUBLW  0C
13BDE:  BNC   13BF6
.................... 												{
.................... 												if (hora_old < 24)
13BE0:  MOVF   40,W
13BE2:  SUBLW  17
13BE4:  BNC   13BF6
.................... 													{
.................... 													if (minuto_old < 60)
13BE6:  MOVF   41,W
13BE8:  SUBLW  3B
13BEA:  BNC   13BF6
.................... 														{
.................... 														existe_ocor = true;
13BEC:  MOVLB  8
13BEE:  BSF    x9E.1
.................... 														break;
13BF0:  MOVLB  3
13BF2:  BRA    13BFC
13BF4:  MOVLB  0
.................... 														}
.................... 													}
.................... 												}
.................... 											}
.................... 										}
.................... 									}
13BF6:  MOVLB  3
13BF8:  INCF   xB1,F
13BFA:  BRA    139F2
13BFC:  MOVLB  8
.................... 								}
.................... 							}
.................... 						menu_aux = aux_b1;
13BFE:  MOVFF  3B1,36
.................... 						if (existe_ocor == false)
13C02:  BTFSC  x9E.1
13C04:  BRA    13C28
.................... 							{
.................... 							// exibe final de ocorencias
.................... 							mensagem(1,66);
13C06:  MOVLW  01
13C08:  MOVLB  A
13C0A:  MOVWF  x4D
13C0C:  MOVLW  42
13C0E:  MOVWF  x4E
13C10:  MOVLB  0
13C12:  CALL   47E8
.................... 							mensagem(2,0);
13C16:  MOVLW  02
13C18:  MOVLB  A
13C1A:  MOVWF  x4D
13C1C:  CLRF   x4E
13C1E:  MOVLB  0
13C20:  CALL   47E8
.................... 							}
13C24:  BRA    13CD8
13C26:  MOVLB  8
.................... 						else
.................... 							{
.................... 							// colocar a mensagem referente a ocorrencia
.................... 							mensagem(1,tabela_ocorrencias[aux_b2]);
13C28:  CLRF   03
13C2A:  MOVLB  3
13C2C:  MOVF   xB2,W
13C2E:  MOVLB  0
13C30:  CALL   1000
13C34:  MOVLB  A
13C36:  MOVWF  x4A
13C38:  MOVLW  01
13C3A:  MOVWF  x4D
13C3C:  MOVFF  A4A,A4E
13C40:  MOVLB  0
13C42:  CALL   47E8
.................... 							mensagem(2,60);
13C46:  MOVLW  02
13C48:  MOVLB  A
13C4A:  MOVWF  x4D
13C4C:  MOVLW  3C
13C4E:  MOVWF  x4E
13C50:  MOVLB  0
13C52:  CALL   47E8
.................... 							// colocar a data e hora da ocorrencia
.................... 							//displayp(17,aux_b1,2,0,0);
.................... 							
.................... 							displayp(18,dia_old,2,0,0);
13C56:  MOVLW  12
13C58:  MOVLB  A
13C5A:  MOVWF  x4E
13C5C:  CLRF   x50
13C5E:  MOVFF  3D,A4F
13C62:  MOVLW  02
13C64:  MOVWF  x51
13C66:  CLRF   x52
13C68:  CLRF   x53
13C6A:  MOVLB  0
13C6C:  CALL   5038
.................... 							displayp(21,mes_old,2,0,0);
13C70:  MOVLW  15
13C72:  MOVLB  A
13C74:  MOVWF  x4E
13C76:  CLRF   x50
13C78:  MOVFF  3E,A4F
13C7C:  MOVLW  02
13C7E:  MOVWF  x51
13C80:  CLRF   x52
13C82:  CLRF   x53
13C84:  MOVLB  0
13C86:  CALL   5038
.................... 							displayp(24,ano_old,2,0,0);
13C8A:  MOVLW  18
13C8C:  MOVLB  A
13C8E:  MOVWF  x4E
13C90:  CLRF   x50
13C92:  MOVFF  3F,A4F
13C96:  MOVLW  02
13C98:  MOVWF  x51
13C9A:  CLRF   x52
13C9C:  CLRF   x53
13C9E:  MOVLB  0
13CA0:  CALL   5038
.................... 							displayp(27,hora_old,2,0,0);
13CA4:  MOVLW  1B
13CA6:  MOVLB  A
13CA8:  MOVWF  x4E
13CAA:  CLRF   x50
13CAC:  MOVFF  40,A4F
13CB0:  MOVLW  02
13CB2:  MOVWF  x51
13CB4:  CLRF   x52
13CB6:  CLRF   x53
13CB8:  MOVLB  0
13CBA:  CALL   5038
.................... 							displayp(30,minuto_old,2,0,0);
13CBE:  MOVLW  1E
13CC0:  MOVLB  A
13CC2:  MOVWF  x4E
13CC4:  CLRF   x50
13CC6:  MOVFF  41,A4F
13CCA:  MOVLW  02
13CCC:  MOVWF  x51
13CCE:  CLRF   x52
13CD0:  CLRF   x53
13CD2:  MOVLB  0
13CD4:  CALL   5038
.................... 							}
.................... 						}
.................... 					}
.................... 			#endif
.................... 		#else
.................... 			if (exibiu == 0)
.................... 				{
.................... 				exibiu = 1;
.................... 				if (limpa_ocor == 1)
.................... 					{
.................... 					mensagem(1,131);
.................... 					lcd_gotoxy(2,1);
.................... 				    wr_lcd(1,0x7F);		//escreve a seta para esquerda
.................... 					mensagem(2,132);
.................... 					}
.................... 				else
.................... 					{
.................... 					mensagem(1,122);
.................... 					aux_b1 = read_byte(ee_ocorrencias + menu_aux);
.................... 					if (aux_b1 > limite_ocorrencias)
.................... 						{
.................... 						mensagem(2,tabela_ocorrencias[0]);
.................... 						displayp(14,0,2,0,0);
.................... 						}
.................... 					else
.................... 						{
.................... 						mensagem(2,tabela_ocorrencias[aux_b1]);
.................... 						displayp(14,aux_b1,2,0,0);
.................... 						}
.................... 					}
.................... 				}
.................... 		#endif
.................... 	#endif
13CD8:  GOTO   13DBE (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #include "st8x00_men10.c"
.................... /*************************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610_MEN10                                                   *
.................... ; Funcao: TRATAMENTO DO MENU DE MANUTENÇÃO								 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 03/2005                                                        *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... void exibe_manutencao(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (apaga_banco == 1)
.................... 			{
.................... 			if (ja_rolou == true)
.................... 				{
.................... 				mensagem_rola(52,1);		//busca mensagem na tabela de mensagens geral
.................... 				ja_rolou = false;
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			if (time_out2 == 0)
.................... 				{
.................... 				ja_rolou = true;
.................... 				}
.................... 			else
.................... 				{
.................... 				if (menu_aux < nro_bancos_capacitor)
.................... 					{
.................... 					mensagem((menu_aux + 1),2);
.................... 					}
.................... 				else
.................... 					{
.................... 					aux_tab = menu_aux - nro_bancos_capacitor;
.................... 					mensagem((aux_tab + 1),2);
.................... 					}
.................... 				}
.................... 			if (menu_aux < nro_bancos_capacitor)
.................... 				{
.................... 				if (ja_rolou == true)
.................... 					{
.................... 					binasc2(horimetro[menu_aux]);
.................... 					buf_display[0] = tabela_caracteres[buf_tmp[1] - '0'];
.................... 					buf_display[1] = tabela_caracteres[buf_tmp[2] - '0'];
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				else
.................... 					{
.................... 					buf_display[3] = tabela_caracteres[MT];
.................... 					}
.................... 				}
.................... 			else
.................... 				{
.................... 				if (ja_rolou == true)
.................... 					{
.................... 					binasc2(acionamentos[menu_aux - nro_bancos_capacitor]);
.................... 					buf_display[0] = tabela_caracteres[buf_tmp[1] - '0'];
.................... 					buf_display[1] = tabela_caracteres[buf_tmp[2] - '0'];
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				else
.................... 					{
.................... 					buf_display[3] = tabela_caracteres[MA];
.................... 					}
.................... 				}
.................... 			}
.................... 	#else
.................... 		if (apaga_banco == 1)
*
13DC0:  BTFSS  22.1
13DC2:  BRA    13E0A
.................... 			{
.................... 			if (exibiu == 0)
13DC4:  BTFSC  29.6
13DC6:  BRA    13E08
.................... 				{
.................... 				exibiu = 1;
13DC8:  BSF    29.6
.................... 				mensagem(1,133);
13DCA:  MOVLW  01
13DCC:  MOVLB  A
13DCE:  MOVWF  x4D
13DD0:  MOVLW  85
13DD2:  MOVWF  x4E
13DD4:  MOVLB  0
13DD6:  CALL   47E8
.................... 				lcd_gotoxy(1,1);
13DDA:  MOVLW  01
13DDC:  MOVLB  A
13DDE:  MOVWF  x62
13DE0:  MOVWF  x63
13DE2:  MOVLB  0
13DE4:  CALL   46C4
.................... 			    wr_lcd(1,0x7F);		//escreve a seta para esquerda
13DE8:  MOVLW  01
13DEA:  MOVLB  A
13DEC:  MOVWF  x65
13DEE:  MOVLW  7F
13DF0:  MOVWF  x66
13DF2:  MOVLB  0
13DF4:  CALL   1864
.................... 				mensagem(2,132);
13DF8:  MOVLW  02
13DFA:  MOVLB  A
13DFC:  MOVWF  x4D
13DFE:  MOVLW  84
13E00:  MOVWF  x4E
13E02:  MOVLB  0
13E04:  CALL   47E8
.................... 				}
.................... 			}
13E08:  BRA    13EE2
.................... 		else
.................... 			{
.................... 			#if (st8500c == true)
.................... 				if (menu_aux < nro_cargas)
13E0A:  MOVF   x6D,W
13E0C:  SUBWF  36,W
13E0E:  BC    13E86
.................... 					{
.................... 					if (exibiu == 0)
13E10:  BTFSC  29.6
13E12:  BRA    13E36
.................... 						{
.................... 						mensagem(1,62);
13E14:  MOVLW  01
13E16:  MOVLB  A
13E18:  MOVWF  x4D
13E1A:  MOVLW  3E
13E1C:  MOVWF  x4E
13E1E:  MOVLB  0
13E20:  CALL   47E8
.................... 						mensagem(2,64);
13E24:  MOVLW  02
13E26:  MOVLB  A
13E28:  MOVWF  x4D
13E2A:  MOVLW  40
13E2C:  MOVWF  x4E
13E2E:  MOVLB  0
13E30:  CALL   47E8
.................... 						exibiu = 1;
13E34:  BSF    29.6
.................... 						}
.................... 					displayp(19,horimetro[menu_aux],5,0,0);
13E36:  BCF    FD8.0
13E38:  RLCF   36,W
13E3A:  CLRF   03
13E3C:  ADDLW  87
13E3E:  MOVWF  FE9
13E40:  MOVLW  00
13E42:  ADDWFC 03,W
13E44:  MOVWF  FEA
13E46:  MOVFF  FEC,A50
13E4A:  MOVF   FED,F
13E4C:  MOVFF  FEF,A4F
13E50:  MOVLW  13
13E52:  MOVLB  A
13E54:  MOVWF  x4E
13E56:  MOVLW  05
13E58:  MOVWF  x51
13E5A:  CLRF   x52
13E5C:  CLRF   x53
13E5E:  MOVLB  0
13E60:  CALL   5038
.................... 					displayp(15,(menu_aux+1),2,0,0);
13E64:  MOVLW  01
13E66:  ADDWF  36,W
13E68:  MOVLB  A
13E6A:  MOVWF  x4A
13E6C:  MOVLW  0F
13E6E:  MOVWF  x4E
13E70:  CLRF   x50
13E72:  MOVFF  A4A,A4F
13E76:  MOVLW  02
13E78:  MOVWF  x51
13E7A:  CLRF   x52
13E7C:  CLRF   x53
13E7E:  MOVLB  0
13E80:  CALL   5038
.................... 					}
13E84:  BRA    13EE2
.................... 				else
.................... 					{
.................... 					if (exibiu == 0)
13E86:  BTFSC  29.6
13E88:  BRA    13EAC
.................... 						{
.................... 						mensagem(1,63);
13E8A:  MOVLW  01
13E8C:  MOVLB  A
13E8E:  MOVWF  x4D
13E90:  MOVLW  3F
13E92:  MOVWF  x4E
13E94:  MOVLB  0
13E96:  CALL   47E8
.................... 						mensagem(2,65);
13E9A:  MOVLW  02
13E9C:  MOVLB  A
13E9E:  MOVWF  x4D
13EA0:  MOVLW  41
13EA2:  MOVWF  x4E
13EA4:  MOVLB  0
13EA6:  CALL   47E8
.................... 						exibiu = 1;
13EAA:  BSF    29.6
.................... 						}
.................... 					displayp(19,acionamentos[menu_aux - nro_cargas],5,0,0);
13EAC:  MOVF   x6D,W
13EAE:  SUBWF  36,W
13EB0:  MOVWF  00
13EB2:  BCF    FD8.0
13EB4:  RLCF   00,F
13EB6:  MOVF   00,W
13EB8:  CLRF   03
13EBA:  ADDLW  C7
13EBC:  MOVWF  FE9
13EBE:  MOVLW  00
13EC0:  ADDWFC 03,W
13EC2:  MOVWF  FEA
13EC4:  MOVFF  FEC,A50
13EC8:  MOVF   FED,F
13ECA:  MOVFF  FEF,A4F
13ECE:  MOVLW  13
13ED0:  MOVLB  A
13ED2:  MOVWF  x4E
13ED4:  MOVLW  05
13ED6:  MOVWF  x51
13ED8:  CLRF   x52
13EDA:  CLRF   x53
13EDC:  MOVLB  0
13EDE:  CALL   5038
.................... 					}
.................... 			#else
.................... 				if (menu_aux < nro_bancos_capacitor)
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						mensagem(1,62);
.................... 						mensagem(2,64);
.................... 						exibiu = 1;
.................... 						}
.................... 					displayp(19,horimetro[menu_aux],5,0,0);
.................... 					displayp(15,(menu_aux+1),2,0,0);
.................... 					}
.................... 				else
.................... 					{
.................... 					if (exibiu == 0)
.................... 						{
.................... 						mensagem(1,63);
.................... 						mensagem(2,65);
.................... 						exibiu = 1;
.................... 						}
.................... 					displayp(19,acionamentos[menu_aux - nro_bancos_capacitor],5,0,0);
.................... 					}
.................... 			#endif
.................... 			}
.................... 		#if (st8500c == true)
.................... 			if (menu_aux < nro_cargas)
13EE2:  MOVF   x6D,W
13EE4:  SUBWF  36,W
13EE6:  BC    13F0A
.................... 				{
.................... 				displayp(15,(menu_aux+1),2,0,0);
13EE8:  MOVLW  01
13EEA:  ADDWF  36,W
13EEC:  MOVLB  A
13EEE:  MOVWF  x4A
13EF0:  MOVLW  0F
13EF2:  MOVWF  x4E
13EF4:  CLRF   x50
13EF6:  MOVFF  A4A,A4F
13EFA:  MOVLW  02
13EFC:  MOVWF  x51
13EFE:  CLRF   x52
13F00:  CLRF   x53
13F02:  MOVLB  0
13F04:  CALL   5038
.................... 				}
13F08:  BRA    13F30
.................... 			else
.................... 				{
.................... 				aux_tab = menu_aux - nro_cargas;
13F0A:  MOVF   x6D,W
13F0C:  SUBWF  36,W
13F0E:  MOVWF  x80
.................... 				displayp(15,(aux_tab+1),2,0,0);
13F10:  MOVLW  01
13F12:  ADDWF  x80,W
13F14:  MOVLB  A
13F16:  MOVWF  x4A
13F18:  MOVLW  0F
13F1A:  MOVWF  x4E
13F1C:  CLRF   x50
13F1E:  MOVFF  A4A,A4F
13F22:  MOVLW  02
13F24:  MOVWF  x51
13F26:  CLRF   x52
13F28:  CLRF   x53
13F2A:  MOVLB  0
13F2C:  CALL   5038
.................... 				}
.................... 		#else
.................... 			if (menu_aux < nro_bancos_capacitor)
.................... 				{
.................... 				displayp(15,(menu_aux+1),2,0,0);
.................... 				}
.................... 			else
.................... 				{
.................... 				aux_tab = menu_aux - nro_bancos_capacitor;
.................... 				displayp(15,(aux_tab+1),2,0,0);
.................... 				}
.................... 		#endif
.................... 	#endif
13F30:  GOTO   1412E (RETURN)
.................... }
.................... 			
.................... void trata_menu10(void)
.................... {
.................... 	if (qmenu != 10)
13F34:  MOVF   3A,W
13F36:  SUBLW  0A
13F38:  BZ    13F5C
.................... 		{
.................... 		salva_contadores();
13F3A:  CALL   DB90
.................... 		qmenu = 10;
13F3E:  MOVLW  0A
13F40:  MOVWF  3A
.................... 		exibiu = 0;
13F42:  BCF    29.6
.................... 		time_out_menus = 60;
13F44:  MOVLW  3C
13F46:  MOVWF  31
.................... 		reset_rolar();
13F48:  CALL   E704
.................... 		menu_aux = 0;
13F4C:  CLRF   36
.................... 		aux_tab = 0;
13F4E:  CLRF   x80
.................... 	 	apaga_banco = 0;
13F50:  BCF    22.1
.................... 	 	ja_rolou = false;
13F52:  BCF    2C.1
.................... 	 	time_out2 = 2;
13F54:  MOVLW  02
13F56:  MOVLB  3
13F58:  MOVWF  xB8
13F5A:  MOVLB  0
.................... 		}
.................... 	if (tecla_enter == 1)
13F5C:  BTFSS  2B.0
13F5E:  BRA    140CC
.................... 		{
.................... 	 	tecla_enter = 0;
13F60:  BCF    2B.0
.................... 	 	#if (ST8100C == true)
.................... 			if (ja_rolou == false)
.................... 				{
.................... 				if (menu_aux < nro_bancos_capacitor)
.................... 					{
.................... 					if (apaga_banco == true)
.................... 						{
.................... 						apaga_banco = 0;
.................... 						minuteiro[menu_aux] = 0;
.................... 						horimetro[menu_aux] = 0;
.................... 						acionamentos[menu_aux] = 0;
.................... 						write_byte(ee_minuteiro + menu_aux, 0);
.................... 						write_word(ee_horimetro + (menu_aux * 2), 0);
.................... 						write_word(ee_acionamentos + (menu_aux * 2), 0);
.................... 						time_out2 = 2;
.................... 						}
.................... 					else
.................... 						{
.................... 						time_out2 = 0;
.................... 						}
.................... 					}
.................... 				else
.................... 					{
.................... 					if (apaga_banco == true)
.................... 						{
.................... 						apaga_banco = 0;
.................... 						aux_b1 = (menu_aux - nro_bancos_capacitor);
.................... 						minuteiro[aux_b1] = 0;
.................... 						horimetro[aux_b1] = 0;
.................... 						acionamentos[aux_b1] = 0;
.................... 						write_byte(ee_minuteiro + aux_b1, 0);
.................... 						write_word(ee_horimetro + (aux_b1 * 2), 0);
.................... 						write_word(ee_acionamentos + (aux_b1 * 2), 0);
.................... 						time_out2 = 2;
.................... 						}
.................... 					else
.................... 						{
.................... 						time_out2 = 0;
.................... 						}
.................... 					}
.................... 				}
.................... 			else
.................... 				{
.................... 				if (apaga_banco == 0)
.................... 					{
.................... 					apaga_banco = 1;
.................... 					}
.................... 				}
.................... 		#else
.................... 		 	exibiu = 0;
13F62:  BCF    29.6
.................... 			if (apaga_banco == 0)
13F64:  BTFSC  22.1
13F66:  BRA    13F6C
.................... 				{
.................... 				apaga_banco = 1;
13F68:  BSF    22.1
.................... 				}
13F6A:  BRA    140CA
.................... 			else
.................... 				{
.................... 				apaga_banco = 0;
13F6C:  BCF    22.1
.................... 				#if (st8500c == true)
.................... 					if (menu_aux < nro_cargas)
13F6E:  MOVF   x6D,W
13F70:  SUBWF  36,W
13F72:  BC    1401A
.................... 						{
.................... 						minuteiro[menu_aux] = 0;
13F74:  CLRF   03
13F76:  MOVF   36,W
13F78:  ADDLW  A7
13F7A:  MOVWF  FE9
13F7C:  MOVLW  00
13F7E:  ADDWFC 03,W
13F80:  MOVWF  FEA
13F82:  CLRF   FEF
.................... 						horimetro[menu_aux] = 0;
13F84:  BCF    FD8.0
13F86:  RLCF   36,W
13F88:  CLRF   03
13F8A:  ADDLW  87
13F8C:  MOVWF  FE9
13F8E:  MOVLW  00
13F90:  ADDWFC 03,W
13F92:  MOVWF  FEA
13F94:  CLRF   FEC
13F96:  MOVF   FED,F
13F98:  CLRF   FEF
.................... 						acionamentos[menu_aux] = 0;
13F9A:  BCF    FD8.0
13F9C:  RLCF   36,W
13F9E:  CLRF   03
13FA0:  ADDLW  C7
13FA2:  MOVWF  FE9
13FA4:  MOVLW  00
13FA6:  ADDWFC 03,W
13FA8:  MOVWF  FEA
13FAA:  CLRF   FEC
13FAC:  MOVF   FED,F
13FAE:  CLRF   FEF
.................... 						write_byte(ee_minuteiro + menu_aux, 0);
13FB0:  MOVLW  8A
13FB2:  ADDWF  36,W
13FB4:  MOVLB  A
13FB6:  MOVWF  x4A
13FB8:  MOVLW  02
13FBA:  MOVWF  x4B
13FBC:  BTFSC  FD8.0
13FBE:  INCF   x4B,F
13FC0:  MOVFF  A4B,A68
13FC4:  MOVFF  A4A,A67
13FC8:  CLRF   x69
13FCA:  MOVLB  0
13FCC:  CALL   1C46
.................... 						write_word(ee_horimetro + (menu_aux * 2), 0);
13FD0:  BCF    FD8.0
13FD2:  RLCF   36,W
13FD4:  ADDLW  9A
13FD6:  MOVLB  A
13FD8:  MOVWF  x4A
13FDA:  MOVLW  02
13FDC:  MOVWF  x4B
13FDE:  BTFSC  FD8.0
13FE0:  INCF   x4B,F
13FE2:  MOVFF  A4B,A5D
13FE6:  MOVFF  A4A,A5C
13FEA:  CLRF   x5F
13FEC:  CLRF   x5E
13FEE:  MOVLB  0
13FF0:  CALL   23AE
.................... 						write_word(ee_acionamentos + (menu_aux * 2), 0);
13FF4:  BCF    FD8.0
13FF6:  RLCF   36,W
13FF8:  ADDLW  BA
13FFA:  MOVLB  A
13FFC:  MOVWF  x4A
13FFE:  MOVLW  02
14000:  MOVWF  x4B
14002:  BTFSC  FD8.0
14004:  INCF   x4B,F
14006:  MOVFF  A4B,A5D
1400A:  MOVFF  A4A,A5C
1400E:  CLRF   x5F
14010:  CLRF   x5E
14012:  MOVLB  0
14014:  CALL   23AE
.................... 						}
14018:  BRA    140CA
.................... 					else
.................... 						{
.................... 						aux_b1 = (menu_aux - nro_cargas);
1401A:  MOVF   x6D,W
1401C:  SUBWF  36,W
1401E:  MOVLB  3
14020:  MOVWF  xB1
.................... 						minuteiro[aux_b1] = 0;
14022:  CLRF   03
14024:  MOVF   xB1,W
14026:  ADDLW  A7
14028:  MOVWF  FE9
1402A:  MOVLW  00
1402C:  ADDWFC 03,W
1402E:  MOVWF  FEA
14030:  CLRF   FEF
.................... 						horimetro[aux_b1] = 0;
14032:  BCF    FD8.0
14034:  RLCF   xB1,W
14036:  CLRF   03
14038:  ADDLW  87
1403A:  MOVWF  FE9
1403C:  MOVLW  00
1403E:  ADDWFC 03,W
14040:  MOVWF  FEA
14042:  CLRF   FEC
14044:  MOVF   FED,F
14046:  CLRF   FEF
.................... 						acionamentos[aux_b1] = 0;
14048:  BCF    FD8.0
1404A:  RLCF   xB1,W
1404C:  CLRF   03
1404E:  ADDLW  C7
14050:  MOVWF  FE9
14052:  MOVLW  00
14054:  ADDWFC 03,W
14056:  MOVWF  FEA
14058:  CLRF   FEC
1405A:  MOVF   FED,F
1405C:  CLRF   FEF
.................... 						write_byte(ee_minuteiro + aux_b1, 0);
1405E:  MOVLW  8A
14060:  ADDWF  xB1,W
14062:  MOVLB  A
14064:  MOVWF  x4A
14066:  MOVLW  02
14068:  MOVWF  x4B
1406A:  BTFSC  FD8.0
1406C:  INCF   x4B,F
1406E:  MOVFF  A4B,A68
14072:  MOVFF  A4A,A67
14076:  CLRF   x69
14078:  MOVLB  0
1407A:  CALL   1C46
.................... 						write_word(ee_horimetro + (aux_b1 * 2), 0);
1407E:  BCF    FD8.0
14080:  MOVLB  3
14082:  RLCF   xB1,W
14084:  ADDLW  9A
14086:  MOVLB  A
14088:  MOVWF  x4A
1408A:  MOVLW  02
1408C:  MOVWF  x4B
1408E:  BTFSC  FD8.0
14090:  INCF   x4B,F
14092:  MOVFF  A4B,A5D
14096:  MOVFF  A4A,A5C
1409A:  CLRF   x5F
1409C:  CLRF   x5E
1409E:  MOVLB  0
140A0:  CALL   23AE
.................... 						write_word(ee_acionamentos + (aux_b1 * 2), 0);
140A4:  BCF    FD8.0
140A6:  MOVLB  3
140A8:  RLCF   xB1,W
140AA:  ADDLW  BA
140AC:  MOVLB  A
140AE:  MOVWF  x4A
140B0:  MOVLW  02
140B2:  MOVWF  x4B
140B4:  BTFSC  FD8.0
140B6:  INCF   x4B,F
140B8:  MOVFF  A4B,A5D
140BC:  MOVFF  A4A,A5C
140C0:  CLRF   x5F
140C2:  CLRF   x5E
140C4:  MOVLB  0
140C6:  CALL   23AE
.................... 						}
.................... 				#else
.................... 					if (menu_aux < nro_bancos_capacitor)
.................... 						{
.................... 						minuteiro[menu_aux] = 0;
.................... 						horimetro[menu_aux] = 0;
.................... 						acionamentos[menu_aux] = 0;
.................... 						write_byte(ee_minuteiro + menu_aux, 0);
.................... 						write_word(ee_horimetro + (menu_aux * 2), 0);
.................... 						write_word(ee_acionamentos + (menu_aux * 2), 0);
.................... 						}
.................... 					else
.................... 						{
.................... 						aux_b1 = (menu_aux - nro_bancos_capacitor);
.................... 						minuteiro[aux_b1] = 0;
.................... 						horimetro[aux_b1] = 0;
.................... 						acionamentos[aux_b1] = 0;
.................... 						write_byte(ee_minuteiro + aux_b1, 0);
.................... 						write_word(ee_horimetro + (aux_b1 * 2), 0);
.................... 						write_word(ee_acionamentos + (aux_b1 * 2), 0);
.................... 						}
.................... 				#endif
.................... 				}
.................... 		#endif
.................... 		}		
140CA:  BRA    14128
.................... 	else if (tecla_up == 1)
140CC:  BTFSS  2A.5
140CE:  BRA    140E6
.................... 		{
.................... 		tecla_up = 0;
140D0:  BCF    2A.5
.................... 		exibiu = 0;
140D2:  BCF    29.6
.................... 		ja_rolou = false;
140D4:  BCF    2C.1
.................... 	 	time_out2 = 2;
140D6:  MOVLW  02
140D8:  MOVLB  3
140DA:  MOVWF  xB8
.................... 		if (menu_aux > 0)
140DC:  MOVF   36,F
140DE:  BZ    140E2
.................... 			{
.................... 			menu_aux--;
140E0:  DECF   36,F
.................... 			}
.................... 		}
140E2:  BRA    1412A
140E4:  MOVLB  0
.................... 	else if (tecla_down == 1)
140E6:  BTFSS  2A.6
140E8:  BRA    14106
.................... 		{
.................... 		tecla_down = 0;
140EA:  BCF    2A.6
.................... 		exibiu = 0;
140EC:  BCF    29.6
.................... 		ja_rolou = false;
140EE:  BCF    2C.1
.................... 	 	time_out2 = 2;
140F0:  MOVLW  02
140F2:  MOVLB  3
140F4:  MOVWF  xB8
.................... 	 	#if (st8500c == true)
.................... 			if (menu_aux < ((nro_cargas * 2)-1))
140F6:  BCF    FD8.0
140F8:  MOVLB  0
140FA:  RLCF   x6D,W
140FC:  ADDLW  FF
140FE:  SUBWF  36,W
14100:  BC    14104
.................... 				{
.................... 				menu_aux++;
14102:  INCF   36,F
.................... 				}
.................... 	 	#else
.................... 			if (menu_aux < ((nro_bancos_capacitor * 2)-1))
.................... 				{
.................... 				menu_aux++;
.................... 				}
.................... 		#endif
.................... 		}
14104:  BRA    14128
.................... 	else if (tecla_reset == 1)
14106:  BTFSS  2B.1
14108:  BRA    14128
.................... 		{
.................... 		tecla_reset = 0;
1410A:  BCF    2B.1
.................... 		exibiu = 0;
1410C:  BCF    29.6
.................... 		ja_rolou = false;
1410E:  BCF    2C.1
.................... 		if (apaga_banco == 1)
14110:  BTFSS  22.1
14112:  BRA    14118
.................... 			{
.................... 			apaga_banco = 0;
14114:  BCF    22.1
.................... 			}
14116:  BRA    14128
.................... 		else
.................... 			{
.................... 			menu_aux = 1;
14118:  MOVLW  01
1411A:  MOVWF  36
.................... 			menu1 = 10;
1411C:  MOVLW  0A
1411E:  MOVWF  35
.................... 			qmenu = 0;
14120:  CLRF   3A
.................... 			exibe_menu();
14122:  CALL   E70A
.................... 			return;
14126:  BRA    1412E
14128:  MOVLB  3
.................... 			}
.................... 		}
.................... 	exibe_manutencao();
1412A:  MOVLB  0
1412C:  BRA    13DC0
1412E:  RETURN 0
.................... }
.................... 
.................... #include "st8x00_men11.c"
.................... /*************************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610_MEN11                                                   *
.................... ; Funcao: TRATAMENTO DO MENU DE AJUSTE DO RELÓGIO						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 29/03/2005                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;************************************************************************/
.................... void salva_relogio (void);
.................... 
.................... 
.................... void exibe_relogio (void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (time_out2 == 0)
.................... 			{
.................... 			ja_rolou = true;
.................... 			}
.................... 		if (menu_aux == 1)
.................... 			{
.................... 			if (aux_tab == 0)
.................... 				{
.................... 				if (ja_rolou == true)
.................... 					{
.................... 					rolando = false;
.................... 					binasc2(tabela_programa[1]);
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[MESPACO];
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				else if (rolando == false)
.................... 					{
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[MD];
.................... 					buf_display[2] = tabela_caracteres[MI];
.................... 					buf_display[3] = tabela_caracteres[MA];
.................... 					}
.................... 				}
.................... 			else if (aux_tab == 1)
.................... 				{
.................... 				if (ja_rolou == true)
.................... 					{
.................... 					rolando = false;
.................... 					binasc2(tabela_programa[2]);
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[MESPACO];
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				else if (rolando == false)
.................... 					{
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[MM];
.................... 					buf_display[2] = tabela_caracteres[ME];
.................... 					buf_display[3] = tabela_caracteres[MS];
.................... 					}
.................... 				}
.................... 			else if (aux_tab == 2)
.................... 				{
.................... 				if (ja_rolou == true)
.................... 					{
.................... 					rolando = false;
.................... 					binasc2(tabela_programa[3]);
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[MESPACO];
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				else if (rolando == false)
.................... 					{
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[MA];
.................... 					buf_display[2] = tabela_caracteres[MN];
.................... 					buf_display[3] = tabela_caracteres[MO];
.................... 					}
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			if (aux_tab == 0)
.................... 				{
.................... 				if (ja_rolou == true)
.................... 					{
.................... 					rolando = false;
.................... 					binasc2(tabela_programa[4]);
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[MESPACO];
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				else if (rolando == false)
.................... 					{
.................... 					buf_display[0] = tabela_caracteres[MH];
.................... 					buf_display[1] = tabela_caracteres[MO];
.................... 					buf_display[2] = tabela_caracteres[MR];
.................... 					buf_display[3] = tabela_caracteres[MA];
.................... 					}
.................... 				}
.................... 			else if (aux_tab == 1)
.................... 				{
.................... 				if (ja_rolou == true)
.................... 					{
.................... 					rolando = false;
.................... 					binasc2(tabela_programa[5]);
.................... 					buf_display[0] = tabela_caracteres[MESPACO];
.................... 					buf_display[1] = tabela_caracteres[MESPACO];
.................... 					buf_display[2] = tabela_caracteres[buf_tmp[3] - '0'];
.................... 					buf_display[3] = tabela_caracteres[buf_tmp[4] - '0'];
.................... 					}
.................... 				else if (rolando == false)
.................... 					{
.................... 					buf_display[0] = tabela_caracteres[MM];
.................... 					buf_display[1] = tabela_caracteres[MI];
.................... 					buf_display[2] = tabela_caracteres[MN];
.................... 					buf_display[3] = tabela_caracteres[MU];
.................... 					}
.................... 				}
.................... 			}
.................... 		pisca_pontos();
.................... 	#else
.................... 		if (menu_aux == 1)
*
141E6:  DECFSZ 36,W
141E8:  BRA    14370
.................... 			{
.................... 			if (exibiu == 0)
141EA:  BTFSC  29.6
141EC:  BRA    14200
.................... 				{
.................... 				mensagem (2,124);
141EE:  MOVLW  02
141F0:  MOVLB  A
141F2:  MOVWF  x4D
141F4:  MOVLW  7C
141F6:  MOVWF  x4E
141F8:  MOVLB  0
141FA:  CALL   47E8
.................... 				exibiu = 1;
141FE:  BSF    29.6
.................... 				}
.................... 			if (programando == 1)
14200:  BTFSS  29.5
14202:  BRA    1431A
.................... 				{
.................... 				if (aux_tab == 0)
14204:  MOVF   x80,F
14206:  BNZ   14260
.................... 					{
.................... 					displayp (24,tabela_programa[1],2,0,'P');	//dia
14208:  MOVLW  18
1420A:  MOVLB  A
1420C:  MOVWF  x4E
1420E:  MOVFF  1DA,A50
14212:  MOVFF  1D9,A4F
14216:  MOVLW  02
14218:  MOVWF  x51
1421A:  CLRF   x52
1421C:  MOVLW  50
1421E:  MOVWF  x53
14220:  MOVLB  0
14222:  CALL   5038
.................... 					displayp (27,tabela_programa[2],2,0,0);		//mes
14226:  MOVLW  1B
14228:  MOVLB  A
1422A:  MOVWF  x4E
1422C:  MOVFF  1DC,A50
14230:  MOVFF  1DB,A4F
14234:  MOVLW  02
14236:  MOVWF  x51
14238:  CLRF   x52
1423A:  CLRF   x53
1423C:  MOVLB  0
1423E:  CALL   5038
.................... 					displayp (30,tabela_programa[3],2,0,0);		//ano
14242:  MOVLW  1E
14244:  MOVLB  A
14246:  MOVWF  x4E
14248:  MOVFF  1DE,A50
1424C:  MOVFF  1DD,A4F
14250:  MOVLW  02
14252:  MOVWF  x51
14254:  CLRF   x52
14256:  CLRF   x53
14258:  MOVLB  0
1425A:  CALL   5038
.................... 					}
1425E:  BRA    14318
.................... 				else if (aux_tab == 1)
14260:  DECFSZ x80,W
14262:  BRA    142BC
.................... 					{
.................... 					displayp (24,tabela_programa[1],2,0,0);		//dia
14264:  MOVLW  18
14266:  MOVLB  A
14268:  MOVWF  x4E
1426A:  MOVFF  1DA,A50
1426E:  MOVFF  1D9,A4F
14272:  MOVLW  02
14274:  MOVWF  x51
14276:  CLRF   x52
14278:  CLRF   x53
1427A:  MOVLB  0
1427C:  CALL   5038
.................... 					displayp (27,tabela_programa[2],2,0,'P');	//mes
14280:  MOVLW  1B
14282:  MOVLB  A
14284:  MOVWF  x4E
14286:  MOVFF  1DC,A50
1428A:  MOVFF  1DB,A4F
1428E:  MOVLW  02
14290:  MOVWF  x51
14292:  CLRF   x52
14294:  MOVLW  50
14296:  MOVWF  x53
14298:  MOVLB  0
1429A:  CALL   5038
.................... 					displayp (30,tabela_programa[3],2,0,0);		//ano
1429E:  MOVLW  1E
142A0:  MOVLB  A
142A2:  MOVWF  x4E
142A4:  MOVFF  1DE,A50
142A8:  MOVFF  1DD,A4F
142AC:  MOVLW  02
142AE:  MOVWF  x51
142B0:  CLRF   x52
142B2:  CLRF   x53
142B4:  MOVLB  0
142B6:  CALL   5038
.................... 					}
142BA:  BRA    14318
.................... 				else if (aux_tab == 2)
142BC:  MOVF   x80,W
142BE:  SUBLW  02
142C0:  BNZ   14318
.................... 					{
.................... 					displayp (24,tabela_programa[1],2,0,0);		//dia
142C2:  MOVLW  18
142C4:  MOVLB  A
142C6:  MOVWF  x4E
142C8:  MOVFF  1DA,A50
142CC:  MOVFF  1D9,A4F
142D0:  MOVLW  02
142D2:  MOVWF  x51
142D4:  CLRF   x52
142D6:  CLRF   x53
142D8:  MOVLB  0
142DA:  CALL   5038
.................... 					displayp (27,tabela_programa[2],2,0,0);		//mes
142DE:  MOVLW  1B
142E0:  MOVLB  A
142E2:  MOVWF  x4E
142E4:  MOVFF  1DC,A50
142E8:  MOVFF  1DB,A4F
142EC:  MOVLW  02
142EE:  MOVWF  x51
142F0:  CLRF   x52
142F2:  CLRF   x53
142F4:  MOVLB  0
142F6:  CALL   5038
.................... 					displayp (30,tabela_programa[3],2,0,'P');	//ano
142FA:  MOVLW  1E
142FC:  MOVLB  A
142FE:  MOVWF  x4E
14300:  MOVFF  1DE,A50
14304:  MOVFF  1DD,A4F
14308:  MOVLW  02
1430A:  MOVWF  x51
1430C:  CLRF   x52
1430E:  MOVLW  50
14310:  MOVWF  x53
14312:  MOVLB  0
14314:  CALL   5038
.................... 					}
.................... 				}
14318:  BRA    1436E
.................... 			else
.................... 				{
.................... 				displayp (24,tabela_programa[1],2,0,0);		//dia
1431A:  MOVLW  18
1431C:  MOVLB  A
1431E:  MOVWF  x4E
14320:  MOVFF  1DA,A50
14324:  MOVFF  1D9,A4F
14328:  MOVLW  02
1432A:  MOVWF  x51
1432C:  CLRF   x52
1432E:  CLRF   x53
14330:  MOVLB  0
14332:  CALL   5038
.................... 				displayp (27,tabela_programa[2],2,0,0);		//mês
14336:  MOVLW  1B
14338:  MOVLB  A
1433A:  MOVWF  x4E
1433C:  MOVFF  1DC,A50
14340:  MOVFF  1DB,A4F
14344:  MOVLW  02
14346:  MOVWF  x51
14348:  CLRF   x52
1434A:  CLRF   x53
1434C:  MOVLB  0
1434E:  CALL   5038
.................... 				displayp (30,tabela_programa[3],2,0,0);		//ano
14352:  MOVLW  1E
14354:  MOVLB  A
14356:  MOVWF  x4E
14358:  MOVFF  1DE,A50
1435C:  MOVFF  1DD,A4F
14360:  MOVLW  02
14362:  MOVWF  x51
14364:  CLRF   x52
14366:  CLRF   x53
14368:  MOVLB  0
1436A:  CALL   5038
.................... 				}
.................... 			}
1436E:  BRA    14442
.................... 		else
.................... 			{
.................... 			if (exibiu == 0)
14370:  BTFSC  29.6
14372:  BRA    14386
.................... 				{
.................... 				mensagem (2,125);
14374:  MOVLW  02
14376:  MOVLB  A
14378:  MOVWF  x4D
1437A:  MOVLW  7D
1437C:  MOVWF  x4E
1437E:  MOVLB  0
14380:  CALL   47E8
.................... 				exibiu = 1;
14384:  BSF    29.6
.................... 				}
.................... 			if (programando == 1)
14386:  BTFSS  29.5
14388:  BRA    1440A
.................... 				{
.................... 				if (aux_tab == 0)
1438A:  MOVF   x80,F
1438C:  BNZ   143CA
.................... 					{
.................... 					displayp (26,tabela_programa[4],2,0,'P');		//hora
1438E:  MOVLW  1A
14390:  MOVLB  A
14392:  MOVWF  x4E
14394:  MOVFF  1E0,A50
14398:  MOVFF  1DF,A4F
1439C:  MOVLW  02
1439E:  MOVWF  x51
143A0:  CLRF   x52
143A2:  MOVLW  50
143A4:  MOVWF  x53
143A6:  MOVLB  0
143A8:  CALL   5038
.................... 					displayp (29,tabela_programa[5],2,0,0);		//minuto
143AC:  MOVLW  1D
143AE:  MOVLB  A
143B0:  MOVWF  x4E
143B2:  MOVFF  1E2,A50
143B6:  MOVFF  1E1,A4F
143BA:  MOVLW  02
143BC:  MOVWF  x51
143BE:  CLRF   x52
143C0:  CLRF   x53
143C2:  MOVLB  0
143C4:  CALL   5038
.................... 					}
143C8:  BRA    14408
.................... 				else if (aux_tab == 1)
143CA:  DECFSZ x80,W
143CC:  BRA    14408
.................... 					{
.................... 					displayp (26,tabela_programa[4],2,0,0);		//hora
143CE:  MOVLW  1A
143D0:  MOVLB  A
143D2:  MOVWF  x4E
143D4:  MOVFF  1E0,A50
143D8:  MOVFF  1DF,A4F
143DC:  MOVLW  02
143DE:  MOVWF  x51
143E0:  CLRF   x52
143E2:  CLRF   x53
143E4:  MOVLB  0
143E6:  CALL   5038
.................... 					displayp (29,tabela_programa[5],2,0,'P');		//minuto
143EA:  MOVLW  1D
143EC:  MOVLB  A
143EE:  MOVWF  x4E
143F0:  MOVFF  1E2,A50
143F4:  MOVFF  1E1,A4F
143F8:  MOVLW  02
143FA:  MOVWF  x51
143FC:  CLRF   x52
143FE:  MOVLW  50
14400:  MOVWF  x53
14402:  MOVLB  0
14404:  CALL   5038
.................... 					}
.................... 				}
14408:  BRA    14442
.................... 			else
.................... 				{
.................... 				displayp (26,tabela_programa[4],2,0,0);		//hora
1440A:  MOVLW  1A
1440C:  MOVLB  A
1440E:  MOVWF  x4E
14410:  MOVFF  1E0,A50
14414:  MOVFF  1DF,A4F
14418:  MOVLW  02
1441A:  MOVWF  x51
1441C:  CLRF   x52
1441E:  CLRF   x53
14420:  MOVLB  0
14422:  CALL   5038
.................... 				displayp (29,tabela_programa[5],2,0,0);		//minuto
14426:  MOVLW  1D
14428:  MOVLB  A
1442A:  MOVWF  x4E
1442C:  MOVFF  1E2,A50
14430:  MOVFF  1E1,A4F
14434:  MOVLW  02
14436:  MOVWF  x51
14438:  CLRF   x52
1443A:  CLRF   x53
1443C:  MOVLB  0
1443E:  CALL   5038
.................... 				}
.................... 			}
.................... 	#endif
14442:  GOTO   146B6 (RETURN)
.................... }
.................... 	
.................... 
.................... void trata_menu11(void)
.................... {
.................... 	if (qmenu != 11)
14446:  MOVF   3A,W
14448:  SUBLW  0B
1444A:  BZ    1448A
.................... 		{
.................... 		qmenu = 11;
1444C:  MOVLW  0B
1444E:  MOVWF  3A
.................... 		exibiu = 0;
14450:  BCF    29.6
.................... 		menu_aux = 1;
14452:  MOVLW  01
14454:  MOVWF  36
.................... 		aux_tab = 0;
14456:  CLRF   x80
.................... 		time_out_menus = 60;
14458:  MOVLW  3C
1445A:  MOVWF  31
.................... 		reset_rolar();
1445C:  CALL   E704
.................... 	 	time_out2 = 2;
14460:  MOVLW  02
14462:  MOVLB  3
14464:  MOVWF  xB8
.................... 
.................... 		tabela_programa[1] = dia;			//dia;
14466:  MOVLB  1
14468:  CLRF   xDA
1446A:  MOVFF  3BF,1D9
.................... 		tabela_programa[2] = mes;			//mes;
1446E:  CLRF   xDC
14470:  MOVFF  3C0,1DB
.................... 		tabela_programa[3] = ano;			//ano;
14474:  CLRF   xDE
14476:  MOVFF  3C1,1DD
.................... 		tabela_programa[4] = hora;			//hora;
1447A:  CLRF   xE0
1447C:  MOVFF  3C2,1DF
.................... 		tabela_programa[5] = minuto;		//minuto;
14480:  CLRF   xE2
14482:  MOVFF  3C3,1E1
.................... 		
.................... 		}
14486:  BRA    146B0
14488:  MOVLB  0
.................... 	else if (tecla_enter == 1)
1448A:  BTFSS  2B.0
1448C:  BRA    144D4
.................... 		{
.................... 	 	tecla_enter = 0;
1448E:  BCF    2B.0
.................... 		exibiu = 0;
14490:  BCF    29.6
.................... 		if (programando == 1)
14492:  BTFSS  29.5
14494:  BRA    144BC
.................... 			{
.................... 			#if (ST8100C == true)
.................... 				programando = 0;
.................... 				salva_relogio();
.................... 				reset_rolar();
.................... 			 	time_out2 = 2;
.................... 			#else
.................... 				if (menu_aux == 1)
14496:  DECFSZ 36,W
14498:  BRA    144AC
.................... 					{
.................... 					if (aux_tab == 2)
1449A:  MOVF   x80,W
1449C:  SUBLW  02
1449E:  BNZ   144A8
.................... 						{
.................... 						programando = 0;
144A0:  BCF    29.5
.................... 						salva_relogio();
144A2:  RCALL  14130
.................... 						aux_tab = 0;
144A4:  CLRF   x80
.................... 						}
144A6:  BRA    144AA
.................... 					else
.................... 						{
.................... 						aux_tab++;
144A8:  INCF   x80,F
.................... 						}
.................... 					}
144AA:  BRA    144BA
.................... 				else
.................... 					{
.................... 					if (aux_tab == 1)
144AC:  DECFSZ x80,W
144AE:  BRA    144B8
.................... 						{
.................... 						programando = 0;
144B0:  BCF    29.5
.................... 						salva_relogio();
144B2:  RCALL  14130
.................... 						aux_tab = 0;
144B4:  CLRF   x80
.................... 						}
144B6:  BRA    144BA
.................... 					else
.................... 						{
.................... 						aux_tab++;
144B8:  INCF   x80,F
.................... 						}
.................... 					}
.................... 			#endif
.................... 			}
144BA:  BRA    144CE
.................... 		else
.................... 			{
.................... 			#if (ST8100C == true)
.................... 				if (time_out2 != 0)
.................... 					{
.................... 					ja_rolou = true;
.................... 					}
.................... 				else
.................... 					{
.................... 					if (tempo_senha != 0)
.................... 						{
.................... 						programando = 1;
.................... 						}
.................... 					else
.................... 						{
.................... 						trata_senha();
.................... 						return;
.................... 						}
.................... 					}
.................... 			#else
.................... 				if (tempo_senha != 0)
144BC:  MOVLB  4
144BE:  MOVF   xA6,F
144C0:  BZ    144C6
.................... 					{
.................... 					programando = 1;
144C2:  BSF    29.5
.................... 					}
144C4:  BRA    144D0
.................... 				else
.................... 					{
.................... 					trata_senha();
144C6:  MOVLB  0
144C8:  CALL   FFE0
.................... 					return;
144CC:  BRA    146B6
144CE:  MOVLB  4
.................... 					}
.................... 			#endif
.................... 			}
.................... 		}		
144D0:  BRA    146B2
144D2:  MOVLB  0
.................... 	else if (tecla_up == 1)
144D4:  BTFSS  2A.5
144D6:  BRA    1459A
.................... 		{
.................... 		tecla_up = 0;
144D8:  BCF    2A.5
.................... 		exibiu = 0;
144DA:  BCF    29.6
.................... 		ja_rolou = false;
144DC:  BCF    2C.1
.................... 	 	time_out2 = 2;
144DE:  MOVLW  02
144E0:  MOVLB  3
144E2:  MOVWF  xB8
.................... 		if (programando == 1)
144E4:  BTFSS  29.5
144E6:  BRA    14586
.................... 			{
.................... 			tempo_senha = 255;
144E8:  MOVLB  4
144EA:  SETF   xA6
.................... 			switch (menu_aux)
144EC:  MOVF   36,W
144EE:  XORLW  01
144F0:  MOVLB  0
144F2:  BZ    144FA
144F4:  XORLW  03
144F6:  BZ    1454A
144F8:  BRA    1457E
.................... 				{
.................... 				case 1:
.................... 					{
.................... 					if (aux_tab == 0)
144FA:  MOVF   x80,F
144FC:  BNZ   14514
.................... 						{
.................... 						if (tabela_programa[1] < 31)
144FE:  MOVLB  1
14500:  MOVF   xDA,F
14502:  BNZ   14510
14504:  MOVF   xD9,W
14506:  SUBLW  1E
14508:  BNC   14510
.................... 							{
.................... 							tabela_programa[1]++;
1450A:  INCF   xD9,F
1450C:  BTFSC  FD8.2
1450E:  INCF   xDA,F
.................... 							}
.................... 						}
14510:  BRA    14546
14512:  MOVLB  0
.................... 					else if (aux_tab == 1)
14514:  DECFSZ x80,W
14516:  BRA    1452E
.................... 						{
.................... 						if (tabela_programa[2] < 12)
14518:  MOVLB  1
1451A:  MOVF   xDC,F
1451C:  BNZ   1452A
1451E:  MOVF   xDB,W
14520:  SUBLW  0B
14522:  BNC   1452A
.................... 							{
.................... 							tabela_programa[2]++;
14524:  INCF   xDB,F
14526:  BTFSC  FD8.2
14528:  INCF   xDC,F
.................... 							}
.................... 						}
1452A:  BRA    14546
1452C:  MOVLB  0
.................... 					else if (aux_tab == 2)
1452E:  MOVF   x80,W
14530:  SUBLW  02
14532:  BNZ   14548
.................... 						{
.................... 						if (tabela_programa[2] < 99)
14534:  MOVLB  1
14536:  MOVF   xDC,F
14538:  BNZ   14546
1453A:  MOVF   xDB,W
1453C:  SUBLW  62
1453E:  BNC   14546
.................... 							{
.................... 							tabela_programa[3]++;
14540:  INCF   xDD,F
14542:  BTFSC  FD8.2
14544:  INCF   xDE,F
14546:  MOVLB  0
.................... 							}
.................... 						}
.................... 					break;
14548:  BRA    14582
.................... 					}
.................... 				case 2:
.................... 					{
.................... 					if (aux_tab == 0)
1454A:  MOVF   x80,F
1454C:  BNZ   14564
.................... 						{
.................... 						if (tabela_programa[4] < 23)
1454E:  MOVLB  1
14550:  MOVF   xE0,F
14552:  BNZ   14560
14554:  MOVF   xDF,W
14556:  SUBLW  16
14558:  BNC   14560
.................... 							{
.................... 							tabela_programa[4]++;
1455A:  INCF   xDF,F
1455C:  BTFSC  FD8.2
1455E:  INCF   xE0,F
.................... 							}
.................... 						}
14560:  BRA    1457A
14562:  MOVLB  0
.................... 					else if (aux_tab == 1)
14564:  DECFSZ x80,W
14566:  BRA    1457C
.................... 						{
.................... 						if (tabela_programa[5] < 59)
14568:  MOVLB  1
1456A:  MOVF   xE2,F
1456C:  BNZ   1457A
1456E:  MOVF   xE1,W
14570:  SUBLW  3A
14572:  BNC   1457A
.................... 							{
.................... 							tabela_programa[5]++;
14574:  INCF   xE1,F
14576:  BTFSC  FD8.2
14578:  INCF   xE2,F
1457A:  MOVLB  0
.................... 							}
.................... 						}
.................... 					break;
1457C:  BRA    14582
.................... 					}
.................... 				default:
.................... 					{
.................... 					menu_aux = 1;
1457E:  MOVLW  01
14580:  MOVWF  36
.................... 					}
.................... 				}
.................... 		 	}
14582:  BRA    14594
14584:  MOVLB  3
.................... 		else
.................... 			{
.................... 		 	#if (ST8100C == true)
.................... 		 		if (menu_aux == 2)
.................... 		 			{
.................... 			 		if (aux_tab > 0)
.................... 			 			{
.................... 				 		aux_tab--;
.................... 				 		}
.................... 				 	else
.................... 				 		{
.................... 					 	menu_aux--;
.................... 					 	aux_tab = 2;
.................... 					 	}
.................... 			 		}
.................... 			 	else
.................... 			 		{
.................... 				 	if (aux_tab > 0)
.................... 				 		{
.................... 					 	aux_tab--;
.................... 					 	}
.................... 				 	}
.................... 		 	#else
.................... 			 	if (menu_aux > 1)
14586:  MOVF   36,W
14588:  SUBLW  01
1458A:  BC    14596
.................... 		 			{
.................... 					menu_aux--;
1458C:  DECF   36,F
.................... 					reset_rolar();
1458E:  MOVLB  0
14590:  CALL   E704
14594:  MOVLB  3
.................... 		 			}
.................... 	 		#endif
.................... 		 	}
.................... 		}
14596:  BRA    146B0
14598:  MOVLB  0
.................... 	else if (tecla_down == 1)
1459A:  BTFSS  2A.6
1459C:  BRA    14664
.................... 		{
.................... 		tecla_down = 0;
1459E:  BCF    2A.6
.................... 		exibiu = 0;
145A0:  BCF    29.6
.................... 		ja_rolou = false;
145A2:  BCF    2C.1
.................... 	 	time_out2 = 2;
145A4:  MOVLW  02
145A6:  MOVLB  3
145A8:  MOVWF  xB8
.................... 		if (programando == 1)
145AA:  BTFSS  29.5
145AC:  BRA    14650
.................... 	 		{
.................... 			tempo_senha = 255;
145AE:  MOVLB  4
145B0:  SETF   xA6
.................... 			switch (menu_aux)
145B2:  MOVF   36,W
145B4:  XORLW  01
145B6:  MOVLB  0
145B8:  BZ    145C0
145BA:  XORLW  03
145BC:  BZ    14614
145BE:  BRA    14648
.................... 				{
.................... 				case 1:
.................... 					{
.................... 					if (aux_tab == 0)
145C0:  MOVF   x80,F
145C2:  BNZ   145DC
.................... 						{
.................... 						if (tabela_programa[1] > 1)
145C4:  MOVLB  1
145C6:  MOVF   xDA,F
145C8:  BNZ   145D0
145CA:  MOVF   xD9,W
145CC:  SUBLW  01
145CE:  BC    145D8
.................... 							{
.................... 							tabela_programa[1]--;
145D0:  MOVF   xD9,W
145D2:  BTFSC  FD8.2
145D4:  DECF   xDA,F
145D6:  DECF   xD9,F
.................... 							}
.................... 						}
145D8:  BRA    14610
145DA:  MOVLB  0
.................... 					else if (aux_tab == 1)
145DC:  DECFSZ x80,W
145DE:  BRA    145F8
.................... 						{
.................... 						if (tabela_programa[2] > 1)
145E0:  MOVLB  1
145E2:  MOVF   xDC,F
145E4:  BNZ   145EC
145E6:  MOVF   xDB,W
145E8:  SUBLW  01
145EA:  BC    145F4
.................... 							{
.................... 							tabela_programa[2]--;
145EC:  MOVF   xDB,W
145EE:  BTFSC  FD8.2
145F0:  DECF   xDC,F
145F2:  DECF   xDB,F
.................... 							}
.................... 						}
145F4:  BRA    14610
145F6:  MOVLB  0
.................... 					else if (aux_tab == 2)
145F8:  MOVF   x80,W
145FA:  SUBLW  02
145FC:  BNZ   14612
.................... 						{
.................... 						if (tabela_programa[3] > 0)
145FE:  MOVLB  1
14600:  MOVF   xDD,F
14602:  BNZ   14608
14604:  MOVF   xDE,F
14606:  BZ    14610
.................... 							{
.................... 							tabela_programa[3]--;
14608:  MOVF   xDD,W
1460A:  BTFSC  FD8.2
1460C:  DECF   xDE,F
1460E:  DECF   xDD,F
14610:  MOVLB  0
.................... 							}
.................... 						}
.................... 					break;
14612:  BRA    1464C
.................... 					}
.................... 				case 2:
.................... 					{
.................... 					if (aux_tab == 0)
14614:  MOVF   x80,F
14616:  BNZ   1462E
.................... 						{
.................... 						if (tabela_programa[4] > 0)
14618:  MOVLB  1
1461A:  MOVF   xDF,F
1461C:  BNZ   14622
1461E:  MOVF   xE0,F
14620:  BZ    1462A
.................... 							{
.................... 							tabela_programa[4]--;
14622:  MOVF   xDF,W
14624:  BTFSC  FD8.2
14626:  DECF   xE0,F
14628:  DECF   xDF,F
.................... 							}
.................... 						}
1462A:  BRA    14644
1462C:  MOVLB  0
.................... 					else if (aux_tab == 1)
1462E:  DECFSZ x80,W
14630:  BRA    14646
.................... 						{
.................... 						if (tabela_programa[5] > 0)
14632:  MOVLB  1
14634:  MOVF   xE1,F
14636:  BNZ   1463C
14638:  MOVF   xE2,F
1463A:  BZ    14644
.................... 							{
.................... 							tabela_programa[5]--;
1463C:  MOVF   xE1,W
1463E:  BTFSC  FD8.2
14640:  DECF   xE2,F
14642:  DECF   xE1,F
14644:  MOVLB  0
.................... 							}
.................... 						}
.................... 					break;
14646:  BRA    1464C
.................... 					}
.................... 				default:
.................... 					{
.................... 					menu_aux = 1;
14648:  MOVLW  01
1464A:  MOVWF  36
.................... 					}
.................... 				}
.................... 			}
1464C:  BRA    1465E
1464E:  MOVLB  3
.................... 		 else
.................... 		 	{
.................... 		 	#if (ST8100C == true)
.................... 		 		if (menu_aux == 1)
.................... 		 			{
.................... 			 		if (aux_tab < 2)
.................... 			 			{
.................... 				 		aux_tab++;
.................... 				 		}
.................... 				 	else
.................... 				 		{
.................... 					 	menu_aux++;
.................... 					 	aux_tab = 0;
.................... 					 	}
.................... 			 		}
.................... 			 	else
.................... 			 		{
.................... 				 	if (aux_tab < 1)
.................... 				 		{
.................... 					 	aux_tab++;
.................... 					 	}
.................... 				 	}
.................... 		 	#else
.................... 				if (menu_aux < nro_menus11)
14650:  MOVF   36,W
14652:  SUBLW  01
14654:  BNC   14660
.................... 			 		{
.................... 					menu_aux++;
14656:  INCF   36,F
.................... 					reset_rolar();
14658:  MOVLB  0
1465A:  CALL   E704
1465E:  MOVLB  3
.................... 		 			}
.................... 		 	#endif
.................... 	 		}
.................... 		}
14660:  BRA    146B0
14662:  MOVLB  0
.................... 	else if (tecla_reset==1)
14664:  BTFSS  2B.1
14666:  BRA    146AE
.................... 		{
.................... 		tecla_reset = 0;
14668:  BCF    2B.1
.................... 		reset_rolar();
1466A:  CALL   E704
.................... 	 	time_out2 = 2;
1466E:  MOVLW  02
14670:  MOVLB  3
14672:  MOVWF  xB8
.................... 		if (programando == 1)
14674:  BTFSS  29.5
14676:  BRA    1469E
.................... 			{
.................... 			programando = 0;
14678:  BCF    29.5
.................... 			tabela_programa[1] = dia;
1467A:  MOVLB  1
1467C:  CLRF   xDA
1467E:  MOVFF  3BF,1D9
.................... 			tabela_programa[2] = mes;
14682:  CLRF   xDC
14684:  MOVFF  3C0,1DB
.................... 			tabela_programa[3] = ano;
14688:  CLRF   xDE
1468A:  MOVFF  3C1,1DD
.................... 			tabela_programa[4] = hora;
1468E:  CLRF   xE0
14690:  MOVFF  3C2,1DF
.................... 			tabela_programa[5] = minuto;
14694:  CLRF   xE2
14696:  MOVFF  3C3,1E1
.................... 			}
1469A:  BRA    146B0
1469C:  MOVLB  3
.................... 		else
.................... 			{
.................... 			menu_aux = 0;
1469E:  CLRF   36
.................... 			menu1 = 11;
146A0:  MOVLW  0B
146A2:  MOVWF  35
.................... 			qmenu = 0;
146A4:  CLRF   3A
.................... 			exibe_menu();
146A6:  MOVLB  0
146A8:  CALL   E70A
.................... 			return;
146AC:  BRA    146B6
146AE:  MOVLB  1
146B0:  MOVLB  4
.................... 			}
.................... 		}
.................... 	exibe_relogio();
146B2:  MOVLB  0
146B4:  BRA    141E6
146B6:  RETURN 0
.................... }
.................... 
.................... void salva_relogio (void)
.................... {
.................... 	dia = tabela_programa[1];
*
14130:  MOVFF  1D9,3BF
.................... 	mes = tabela_programa[2];
14134:  MOVFF  1DB,3C0
.................... 	ano = tabela_programa[3];
14138:  MOVFF  1DD,3C1
.................... 	hora = tabela_programa[4];
1413C:  MOVFF  1DF,3C2
.................... 	minuto = tabela_programa[5];
14140:  MOVFF  1E1,3C3
.................... 
.................... 	if ((ano % 4) == 0)
14144:  MOVLB  3
14146:  MOVF   xC1,W
14148:  ANDLW  03
1414A:  BNZ   1416A
.................... 		{
.................... 		if (mes == 2)
1414C:  MOVF   xC0,W
1414E:  SUBLW  02
14150:  BNZ   1415E
.................... 			{
.................... 			if (dia > 29)
14152:  MOVF   xBF,W
14154:  SUBLW  1D
14156:  BC    1415C
.................... 				{
.................... 				dia = 1;
14158:  MOVLW  01
1415A:  MOVWF  xBF
.................... 				}
.................... 			}
1415C:  BRA    14168
.................... 		else
.................... 			{
.................... 			if (dia > 31)
1415E:  MOVF   xBF,W
14160:  SUBLW  1F
14162:  BC    14168
.................... 				{
.................... 				dia = 1;
14164:  MOVLW  01
14166:  MOVWF  xBF
.................... 				}
.................... 			}
.................... 		}
14168:  BRA    14186
.................... 	else
.................... 		{
.................... 		if (mes == 2)
1416A:  MOVF   xC0,W
1416C:  SUBLW  02
1416E:  BNZ   1417C
.................... 			{
.................... 			if (dia > 28)
14170:  MOVF   xBF,W
14172:  SUBLW  1C
14174:  BC    1417A
.................... 				{
.................... 				dia = 1;
14176:  MOVLW  01
14178:  MOVWF  xBF
.................... 				}
.................... 			}
1417A:  BRA    14186
.................... 		else
.................... 			{
.................... 			if (dia > 31)
1417C:  MOVF   xBF,W
1417E:  SUBLW  1F
14180:  BC    14186
.................... 				{
.................... 				dia = 1;
14182:  MOVLW  01
14184:  MOVWF  xBF
.................... 				}
.................... 			}
.................... 		}
.................... 	if (mes > 12)
14186:  MOVF   xC0,W
14188:  SUBLW  0C
1418A:  BC    14190
.................... 		{
.................... 		mes = 1;
1418C:  MOVLW  01
1418E:  MOVWF  xC0
.................... 		}
.................... 	if (ano > 99)
14190:  MOVF   xC1,W
14192:  SUBLW  63
14194:  BC    1419A
.................... 		{
.................... 		ano = 1;
14196:  MOVLW  01
14198:  MOVWF  xC1
.................... 		}
.................... 	if (hora > 23)
1419A:  MOVF   xC2,W
1419C:  SUBLW  17
1419E:  BC    141A4
.................... 		{
.................... 		hora = 1;
141A0:  MOVLW  01
141A2:  MOVWF  xC2
.................... 		}
.................... 	if (minuto > 59)
141A4:  MOVF   xC3,W
141A6:  SUBLW  3B
141A8:  BC    141AE
.................... 		{
.................... 		minuto = 1;
141AA:  MOVLW  01
141AC:  MOVWF  xC3
.................... 		}
.................... 	
.................... 	ajuste_relogio = 0;
141AE:  BCF    24.6
.................... 
.................... 	#if (com_relogio == true)
.................... 		data_modbus = data1_int;
141B0:  MOVFF  3F0,520
141B4:  MOVFF  3EF,51F
.................... 		rtc_set_datetime();
141B8:  MOVLB  0
141BA:  CALL   BF3A
.................... 	#else
.................... 		data_modbus = data1_int;
.................... 		rtc_wr_e2p();
.................... 	#endif
.................... 
.................... 	tabela_programa[1] = dia;
141BE:  MOVLB  1
141C0:  CLRF   xDA
141C2:  MOVFF  3BF,1D9
.................... 	tabela_programa[2] = mes;
141C6:  CLRF   xDC
141C8:  MOVFF  3C0,1DB
.................... 	tabela_programa[3] = ano;
141CC:  CLRF   xDE
141CE:  MOVFF  3C1,1DD
.................... 	tabela_programa[4] = hora;
141D2:  CLRF   xE0
141D4:  MOVFF  3C2,1DF
.................... 	tabela_programa[5] = minuto;
141D8:  CLRF   xE2
141DA:  MOVFF  3C3,1E1
.................... 
.................... 	exibe_data_hora();
141DE:  MOVLB  0
141E0:  CALL   E078
141E4:  RETURN 0
.................... }
.................... 
.................... void exibe_data_hora(void)
.................... {
.................... 	#if ((st8200c == true) || (st8300c == true) || ( st8500c == true))
.................... 		mensagem(2,60);
*
0E078:  MOVLW  02
0E07A:  MOVLB  A
0E07C:  MOVWF  x4D
0E07E:  MOVLW  3C
0E080:  MOVWF  x4E
0E082:  MOVLB  0
0E084:  CALL   47E8
.................... 		displayp(18,dia,2,0,0);
0E088:  MOVLW  12
0E08A:  MOVLB  A
0E08C:  MOVWF  x4E
0E08E:  CLRF   x50
0E090:  MOVFF  3BF,A4F
0E094:  MOVLW  02
0E096:  MOVWF  x51
0E098:  CLRF   x52
0E09A:  CLRF   x53
0E09C:  MOVLB  0
0E09E:  CALL   5038
.................... 		displayp(21,mes,2,0,0);
0E0A2:  MOVLW  15
0E0A4:  MOVLB  A
0E0A6:  MOVWF  x4E
0E0A8:  CLRF   x50
0E0AA:  MOVFF  3C0,A4F
0E0AE:  MOVLW  02
0E0B0:  MOVWF  x51
0E0B2:  CLRF   x52
0E0B4:  CLRF   x53
0E0B6:  MOVLB  0
0E0B8:  CALL   5038
.................... 		displayp(24,ano,2,0,0);
0E0BC:  MOVLW  18
0E0BE:  MOVLB  A
0E0C0:  MOVWF  x4E
0E0C2:  CLRF   x50
0E0C4:  MOVFF  3C1,A4F
0E0C8:  MOVLW  02
0E0CA:  MOVWF  x51
0E0CC:  CLRF   x52
0E0CE:  CLRF   x53
0E0D0:  MOVLB  0
0E0D2:  CALL   5038
.................... 		displayp(27,hora,2,0,0);
0E0D6:  MOVLW  1B
0E0D8:  MOVLB  A
0E0DA:  MOVWF  x4E
0E0DC:  CLRF   x50
0E0DE:  MOVFF  3C2,A4F
0E0E2:  MOVLW  02
0E0E4:  MOVWF  x51
0E0E6:  CLRF   x52
0E0E8:  CLRF   x53
0E0EA:  MOVLB  0
0E0EC:  CALL   5038
.................... 		displayp(30,minuto,2,0,0);
0E0F0:  MOVLW  1E
0E0F2:  MOVLB  A
0E0F4:  MOVWF  x4E
0E0F6:  CLRF   x50
0E0F8:  MOVFF  3C3,A4F
0E0FC:  MOVLW  02
0E0FE:  MOVWF  x51
0E100:  CLRF   x52
0E102:  CLRF   x53
0E104:  MOVLB  0
0E106:  CALL   5038
.................... 	#endif
0E10A:  RETURN 0
.................... }
.................... 
.................... #if (controlador == true)
.................... 	#include "st8x00_men12.c"
.................... /*************************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST8610_MEN12                                                   *
.................... ; Funcao: TRATAMENTO DO MENU DE STATUS									 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado:  VAGNER SANTOS                                             *
.................... ; Inicio: 03/2005                                                        *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... void trata_menu12(void)
.................... {
.................... 	if (qmenu != 12)
*
146B8:  MOVF   3A,W
146BA:  SUBLW  0C
146BC:  BZ    146CE
.................... 		{
.................... 		qmenu = 12;
146BE:  MOVLW  0C
146C0:  MOVWF  3A
.................... 		em_status = true;
146C2:  BSF    24.7
.................... 		exibiu = 0;
146C4:  BCF    29.6
.................... 		time_out_menus = 60;
146C6:  MOVLW  3C
146C8:  MOVWF  31
.................... 		rolando = false;
146CA:  BCF    2C.0
.................... 		tecla_up = 1;
146CC:  BSF    2A.5
.................... 		}
.................... 	if (tecla_enter == 1)
146CE:  BTFSS  2B.0
146D0:  BRA    146D6
.................... 		{
.................... 	 	tecla_enter = 0;
146D2:  BCF    2B.0
.................... 		}
146D4:  BRA    14700
.................... 	else if (tecla_up == 1)
146D6:  BTFSS  2A.5
146D8:  BRA    146E2
.................... 		{
.................... 		tecla_up = 0;
146DA:  BCF    2A.5
.................... 		exibe_erro();
146DC:  CALL   E10C
.................... 		}
146E0:  BRA    14700
.................... 	else if (tecla_down == 1)
146E2:  BTFSS  2A.6
146E4:  BRA    146EE
.................... 		{
.................... 		tecla_down = 0;
146E6:  BCF    2A.6
.................... 		exibe_erro();
146E8:  CALL   E10C
.................... 		}
146EC:  BRA    14700
.................... 	else if (tecla_reset == 1)
146EE:  BTFSS  2B.1
146F0:  BRA    14700
.................... 		{
.................... 		tecla_reset = 0;
146F2:  BCF    2B.1
.................... 		em_status = false;
146F4:  BCF    24.7
.................... 		menu1 = 12;
146F6:  MOVLW  0C
146F8:  MOVWF  35
.................... 		qmenu = 0;
146FA:  CLRF   3A
.................... 		exibe_menu();
146FC:  CALL   E70A
.................... 		}
14700:  RETURN 0
.................... }
.................... 
.................... #endif
.................... 
.................... void reinicializa_menus(void)
.................... {
.................... 	MENU_FIXO = read_bit(ee_bits_menu2, EE_MENU_FIXO);;
*
025BA:  MOVLW  03
025BC:  MOVLB  A
025BE:  MOVWF  x4B
025C0:  MOVLW  81
025C2:  MOVWF  x4A
025C4:  CLRF   x4C
025C6:  MOVLB  0
025C8:  BRA    257C
025CA:  BCF    26.6
025CC:  BTFSC  01.0
025CE:  BSF    26.6
.................... 	menu_aux = read_byte(ee_menu_aux);
025D0:  MOVLW  03
025D2:  MOVLB  A
025D4:  MOVWF  x66
025D6:  MOVLW  82
025D8:  MOVWF  x65
025DA:  MOVLB  0
025DC:  CALL   1C24
025E0:  MOVFF  01,36
.................... 	qmenu = read_byte(ee_qmenu);
025E4:  MOVLW  03
025E6:  MOVLB  A
025E8:  MOVWF  x66
025EA:  MOVLW  83
025EC:  MOVWF  x65
025EE:  MOVLB  0
025F0:  CALL   1C24
025F4:  MOVFF  01,3A
025F8:  RETURN 0
.................... }
.................... 
.................... void salva_menus(void)
.................... {
.................... 	write_bit(ee_bits_menu2, EE_MENU_FIXO, MENU_FIXO);
*
0E6BE:  MOVLW  00
0E6C0:  BTFSC  26.6
0E6C2:  MOVLW  01
0E6C4:  MOVLB  A
0E6C6:  MOVWF  x4A
0E6C8:  MOVLW  03
0E6CA:  MOVWF  x4C
0E6CC:  MOVLW  81
0E6CE:  MOVWF  x4B
0E6D0:  CLRF   x4D
0E6D2:  MOVFF  A4A,A4E
0E6D6:  MOVLB  0
0E6D8:  BRA    E638
.................... 	write_byte(ee_menu_aux, menu_aux);
0E6DA:  MOVLW  03
0E6DC:  MOVLB  A
0E6DE:  MOVWF  x68
0E6E0:  MOVLW  82
0E6E2:  MOVWF  x67
0E6E4:  MOVFF  36,A69
0E6E8:  MOVLB  0
0E6EA:  CALL   1C46
.................... 	write_byte(ee_qmenu, qmenu);
0E6EE:  MOVLW  03
0E6F0:  MOVLB  A
0E6F2:  MOVWF  x68
0E6F4:  MOVLW  83
0E6F6:  MOVWF  x67
0E6F8:  MOVFF  3A,A69
0E6FC:  MOVLB  0
0E6FE:  CALL   1C46
0E702:  RETURN 0
.................... }
.................... 
.................... word inkey(char tempo)
.................... {
.................... 	short temporizado;
.................... 	time_out = tempo;
.................... 	temporizado = true;
.................... 	if (time_out == 0)
.................... 		{
.................... 		temporizado = false;
.................... 		}
.................... 	delay_ms(500);
.................... 	teclas = 1023;
.................... 	while (teclas > 1000)
.................... 		{
.................... 		if (temporizado == true)
.................... 			{
.................... 			if (time_out == 0)
.................... 				{
.................... 				break;
.................... 				}
.................... 			}
.................... 		}
.................... 	return(teclas);
.................... }
.................... 
.................... void exibe_menu(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		switch(menu1)
.................... 			{
.................... 			case 1:
.................... 				{
.................... 				mensagem_rola(m_menu1, 1);
.................... 				break;
.................... 				}
.................... 			case 2:
.................... 				{
.................... 				#if (com_cht == true)
.................... 					mensagem_rola(m_menu2, 1);
.................... 					break;
.................... 				#endif
.................... 				}
.................... 			case 3:
.................... 				{
.................... 				#if (com_cht == true)
.................... 					mensagem_rola(m_menu3, 1);
.................... 					break;
.................... 				#endif
.................... 				}
.................... 			case 4:
.................... 				{
.................... 				mensagem_rola(m_menu4, 1);
.................... 				break;
.................... 				}
.................... 			case 5:
.................... 				{
.................... 				mensagem_rola(m_menu5, 1);
.................... 				break;
.................... 				}
.................... 			case 6:
.................... 				{
.................... 				mensagem_rola(m_menu6, 1);
.................... 				break;
.................... 				}
.................... 			case 7:
.................... 				{
.................... 				mensagem_rola(m_menu7, 1);
.................... 				break;
.................... 				}
.................... 			case 8:
.................... 				{
.................... 				mensagem_rola(m_menu8, 1);
.................... 				break;
.................... 				}
.................... 			case 9:
.................... 				{
.................... 				mensagem_rola(m_menu9, 1);
.................... 				break;
.................... 				}
.................... 			case 10:
.................... 				{
.................... 				mensagem_rola(m_menu10, 1);
.................... 				break;
.................... 				}
.................... 			case 11:
.................... 				{
.................... 				mensagem_rola(m_menu11, 1);
.................... 				break;
.................... 				}
.................... 			case 12:
.................... 				{
.................... 				mensagem_rola(m_menu12, 1);
.................... 				break;
.................... 				}
.................... 	    	default:
.................... 		    	{
.................... 				 menu1 = 1;
.................... 	    		}
.................... 			}
.................... 		#if (disp_7seg == true)
.................... 			buf_display[4]=tabela_caracteres[MESPACO];
.................... 		#endif
.................... 	#else
.................... 		limpa_display();
*
0E70A:  CALL   1A2A
.................... 		if (menu1 == 0)
0E70E:  MOVF   35,F
0E710:  BNZ   E716
.................... 			{
.................... 			menu1 = 1;
0E712:  MOVLW  01
0E714:  MOVWF  35
.................... 			}
.................... 
.................... 		#if (com_cht == false)
.................... 			switch (menu1)
0E716:  MOVF   35,W
0E718:  XORLW  02
0E71A:  BZ    E722
0E71C:  XORLW  01
0E71E:  BZ    E722
0E720:  BRA    E734
.................... 				{
.................... 				case 2:
.................... 				case 3:
.................... 					{
.................... 					if (tecla_up == 1)
0E722:  BTFSS  2A.5
0E724:  BRA    E72C
.................... 						{
.................... 						menu1 = 1;
0E726:  MOVLW  01
0E728:  MOVWF  35
.................... 						}
0E72A:  BRA    E734
.................... 					else if (tecla_down == 1)
0E72C:  BTFSS  2A.6
0E72E:  BRA    E734
.................... 						{
.................... 						menu1 = 4;
0E730:  MOVLW  04
0E732:  MOVWF  35
.................... 						}	
.................... 					}
.................... 				}				
.................... 		#endif
.................... 		#if (st8500c == true)
.................... 			switch (menu1)
0E734:  MOVF   35,W
0E736:  XORLW  07
0E738:  BZ    E740
0E73A:  XORLW  0F
0E73C:  BZ    E740
0E73E:  BRA    E752
.................... 				{
.................... 				case 7:
.................... 				case 8:
.................... 					{
.................... 					if (tecla_up == 1)
0E740:  BTFSS  2A.5
0E742:  BRA    E74A
.................... 						{
.................... 						menu1 = 6;
0E744:  MOVLW  06
0E746:  MOVWF  35
.................... 						}
0E748:  BRA    E752
.................... 					else if (tecla_down == 1)
0E74A:  BTFSS  2A.6
0E74C:  BRA    E752
.................... 						{
.................... 						menu1 = 9;
0E74E:  MOVLW  09
0E750:  MOVWF  35
.................... 						}	
.................... 					}
.................... 				}				
.................... 		#endif
.................... 		
.................... 		switch(menu1)
0E752:  MOVF   35,W
0E754:  XORLW  01
0E756:  BZ    E786
0E758:  XORLW  03
0E75A:  BZ    E798
0E75C:  XORLW  01
0E75E:  BZ    E798
0E760:  XORLW  07
0E762:  BZ    E798
0E764:  XORLW  01
0E766:  BZ    E7AA
0E768:  XORLW  03
0E76A:  BZ    E7BC
0E76C:  XORLW  01
0E76E:  BZ    E7CE
0E770:  XORLW  0F
0E772:  BZ    E7CE
0E774:  XORLW  01
0E776:  BZ    E7CE
0E778:  XORLW  03
0E77A:  BZ    E7E0
0E77C:  XORLW  01
0E77E:  BZ    E7F2
0E780:  XORLW  07
0E782:  BZ    E804
0E784:  BRA    E816
.................... 			{
.................... 			case 1:
.................... 				{
.................... 				mensagem(1,3);
0E786:  MOVLW  01
0E788:  MOVLB  A
0E78A:  MOVWF  x4D
0E78C:  MOVLW  03
0E78E:  MOVWF  x4E
0E790:  MOVLB  0
0E792:  CALL   47E8
.................... 				break;
0E796:  BRA    E81A
.................... 				}
.................... 			#if (com_cht == true)
.................... 				case 2:
.................... 					{
.................... 					mensagem(1,12);
.................... 					break;
.................... 					}
.................... 				case 3:
.................... 					{
.................... 					mensagem(1,13);
.................... 					break;
.................... 					}
.................... 			#else
.................... 				case 2:
.................... 				case 3:
.................... 			#endif
.................... 			case 4:
.................... 				{
.................... 				mensagem(1,7);
0E798:  MOVLW  01
0E79A:  MOVLB  A
0E79C:  MOVWF  x4D
0E79E:  MOVLW  07
0E7A0:  MOVWF  x4E
0E7A2:  MOVLB  0
0E7A4:  CALL   47E8
.................... 				break;
0E7A8:  BRA    E81A
.................... 				}
.................... 			case 5:
.................... 				{
.................... 				mensagem(1,8);
0E7AA:  MOVLW  01
0E7AC:  MOVLB  A
0E7AE:  MOVWF  x4D
0E7B0:  MOVLW  08
0E7B2:  MOVWF  x4E
0E7B4:  MOVLB  0
0E7B6:  CALL   47E8
.................... 				break;
0E7BA:  BRA    E81A
.................... 				}
.................... 			case 6:
.................... 				{
.................... 				mensagem(1,9);
0E7BC:  MOVLW  01
0E7BE:  MOVLB  A
0E7C0:  MOVWF  x4D
0E7C2:  MOVLW  09
0E7C4:  MOVWF  x4E
0E7C6:  MOVLB  0
0E7C8:  CALL   47E8
.................... 				break;
0E7CC:  BRA    E81A
.................... 				}
.................... 			#if ((st8100c == true) || (st8200c == true) || (st8300c == true))
.................... 				case 7:
.................... 					{
.................... 					mensagem(1,10);
.................... 					break;
.................... 					}
.................... 				case 8:
.................... 					{
.................... 					mensagem(1,5);
.................... 					break;
.................... 					}
.................... 			#else
.................... 				case 7:
.................... 				case 8:
.................... 			#endif
.................... 			case 9:
.................... 				{
.................... 				mensagem(1,6);
0E7CE:  MOVLW  01
0E7D0:  MOVLB  A
0E7D2:  MOVWF  x4D
0E7D4:  MOVLW  06
0E7D6:  MOVWF  x4E
0E7D8:  MOVLB  0
0E7DA:  CALL   47E8
.................... 				break;
0E7DE:  BRA    E81A
.................... 				}
.................... 			case 10:
.................... 				{
.................... 				mensagem(1,11);
0E7E0:  MOVLW  01
0E7E2:  MOVLB  A
0E7E4:  MOVWF  x4D
0E7E6:  MOVLW  0B
0E7E8:  MOVWF  x4E
0E7EA:  MOVLB  0
0E7EC:  CALL   47E8
.................... 				break;
0E7F0:  BRA    E81A
.................... 				}
.................... 			case 11:
.................... 				{
.................... 				mensagem(1,123);
0E7F2:  MOVLW  01
0E7F4:  MOVLB  A
0E7F6:  MOVWF  x4D
0E7F8:  MOVLW  7B
0E7FA:  MOVWF  x4E
0E7FC:  MOVLB  0
0E7FE:  CALL   47E8
.................... 				break;
0E802:  BRA    E81A
.................... 				}
.................... 			case 12:
.................... 				{
.................... 				#if (monofasico == true)
.................... 					mensagem(1,138);
.................... 				#else
.................... 					mensagem(1,135);
0E804:  MOVLW  01
0E806:  MOVLB  A
0E808:  MOVWF  x4D
0E80A:  MOVLW  87
0E80C:  MOVWF  x4E
0E80E:  MOVLB  0
0E810:  CALL   47E8
.................... 				#endif
.................... 				break;
0E814:  BRA    E81A
.................... 				}
.................... 			default:
.................... 				{
.................... 				menu1 = 1;
0E816:  MOVLW  01
0E818:  MOVWF  35
.................... 				break;
.................... 				}
.................... 			}			
.................... 		exibir_menu = 0;
0E81A:  BCF    2B.6
.................... 	#endif
0E81C:  RETURN 0
.................... }        
.................... 
.................... 
.................... 
.................... void trata_menu(void)
.................... {
.................... 	#if (AUTOSET == true)
.................... 		if (em_autoset == false)
.................... 			{
.................... 			if (tecla_enter == 1)
.................... 				{
.................... 				if (time_out_enter < 15)
.................... 					{
.................... 					time_out_enter++;
.................... 					}
.................... 				else
.................... 					{
.................... 					if (tempo_senha != 0)
.................... 						{
.................... 						tecla_enter = 0;
.................... 						em_autoset = true;
.................... 						time_out_autoset = 60;
.................... 						time_out_enter = 0;
.................... 						passo_autoset = 0;
.................... 						#if (st8200c == true)
.................... 							mensagem(2,149);
.................... 						#else
.................... 							#error falta mensagem
.................... 						#endif
.................... 						grava_ocorrencias(reg_auto_set);
.................... 						return;
.................... 						}
.................... 					else
.................... 						{
.................... 						trata_senha();
.................... 						time_out_enter = 0;
.................... 						return;
.................... 						}	
.................... 					}
.................... 				}
.................... 			}
.................... 		else
.................... 			{
.................... 			if (tecla_reset == true)
.................... 				{
.................... 				tecla_reset = 0;
.................... 				if (time_out_reset < 15)
.................... 					{
.................... 					time_out_reset++;
.................... 					}
.................... 				else
.................... 					{
.................... 					em_autoset = false;
.................... 					}
.................... 				}
.................... 			return;
.................... 			}
.................... 	#endif
.................... 
.................... //	if (tecla_up_down_reset == 1)
.................... //		{
.................... //		tecla_up_down_reset = 0;
.................... //		#if (com_consumo == true)
.................... //			mensagem(1,28);
.................... //			mensagem(2,0);
.................... //			exibiu = 0;
.................... //			time_out_menus = 10;
.................... //			zera_consumo();
.................... //			#if (com_demanda == true)
.................... //				zera_demandas();
.................... //			#endif
.................... //			delay_ms(1000);
.................... //			fim_menu1();
.................... //			return;
.................... //		#endif
.................... //		}
.................... 
.................... 	
.................... 	if (tecla_reset_up == 1)
*
1472C:  BTFSS  2A.2
1472E:  BRA    14732
.................... 		{
.................... 		tecla_reset_up = 0;
14730:  BCF    2A.2
.................... 		}
.................... 
.................... 	if ((programando == 0) && (time_out_exibe_status_teclando == 0))
14732:  BTFSC  29.5
14734:  BRA    1478C
14736:  MOVF   2E,F
14738:  BNZ   1478C
.................... 		{
.................... 		if (tem_erro == 1)
1473A:  BTFSS  24.3
1473C:  BRA    1478C
.................... 			{
.................... 			if (qmenu < 4)
1473E:  MOVF   3A,W
14740:  SUBLW  03
14742:  BNC   1478C
.................... 				{
.................... 				if ((segundo == 0) || (segundo == 10)|| (segundo == 20) || (segundo == 30)|| (segundo == 40) || (segundo == 50))
14744:  MOVLB  3
14746:  MOVF   xC4,F
14748:  BZ    14768
1474A:  MOVF   xC4,W
1474C:  SUBLW  0A
1474E:  BZ    14768
14750:  MOVF   xC4,W
14752:  SUBLW  14
14754:  BZ    14768
14756:  MOVF   xC4,W
14758:  SUBLW  1E
1475A:  BZ    14768
1475C:  MOVF   xC4,W
1475E:  SUBLW  28
14760:  BZ    14768
14762:  MOVF   xC4,W
14764:  SUBLW  32
14766:  BNZ   14784
.................... 					{
.................... 					if (exibiu_erro_menu == 0)
14768:  BTFSC  2B.4
1476A:  BRA    14780
.................... 						{
.................... 						exibiu_erro_menu = 1;
1476C:  BSF    2B.4
.................... 						if (em_status == false)
1476E:  BTFSC  24.7
14770:  BRA    1477A
.................... 							{
.................... 							#if ((st8200c == true) || (st8300c == true))
.................... 								mensagem(2,0);
.................... 							#endif
.................... 							exibe_erro();
14772:  MOVLB  0
14774:  CALL   E10C
14778:  MOVLB  3
.................... 							}
.................... 						time_out_exibe_erro = 2;
1477A:  MOVLW  02
1477C:  MOVWF  xB9
.................... 						exibiu = 0;
1477E:  BCF    29.6
.................... 						}
.................... 					return;
14780:  BRA    1489A
.................... 					}
14782:  BRA    1478A
.................... 				else
.................... 					{
.................... 					if (time_out_exibe_erro != 0)
14784:  MOVF   xB9,F
14786:  BZ    1478A
.................... 						{
.................... 						return;
14788:  BRA    1489A
1478A:  MOVLB  0
.................... 						}
.................... 					}
.................... 				}
.................... 			}
.................... 		}
.................... 	exibiu_erro_menu = 0;
1478C:  BCF    2B.4
.................... 
.................... 	switch (qmenu)
1478E:  MOVF   3A,W
14790:  XORLW  01
14792:  BZ    147C2
14794:  XORLW  03
14796:  BZ    147C8
14798:  XORLW  01
1479A:  BZ    147C8
1479C:  XORLW  07
1479E:  BZ    147C8
147A0:  XORLW  01
147A2:  BZ    147CE
147A4:  XORLW  03
147A6:  BZ    147D4
147A8:  XORLW  01
147AA:  BZ    147DA
147AC:  XORLW  0F
147AE:  BZ    147DA
147B0:  XORLW  01
147B2:  BZ    147DA
147B4:  XORLW  03
147B6:  BZ    147E0
147B8:  XORLW  01
147BA:  BZ    147E6
147BC:  XORLW  07
147BE:  BZ    147EA
147C0:  BRA    147EE
.................... 		{
.................... 		case 1:		
.................... 			{
.................... 			trata_menu1();
147C2:  CALL   10AAC
.................... 			break;
147C6:  BRA    14898
.................... 			}
.................... 		#if (com_cht == true)
.................... 			case 2:		
.................... 			case 3:		
.................... 				{
.................... 				trata_menu2();
.................... 				break;
.................... 				}
.................... 		#else
.................... 			case 2:
.................... 			case 3:
.................... 		#endif
.................... 		case 4:		
.................... 			{
.................... 			trata_menu4();
147C8:  CALL   120AC
.................... 			break;
147CC:  BRA    14898
.................... 			}
.................... 		case 5:		
.................... 			{
.................... 			trata_menu5();
147CE:  CALL   129D2
.................... 			break;
147D2:  BRA    14898
.................... 			}
.................... 		case 6:		
.................... 			{
.................... 			trata_menu6();
147D4:  CALL   13528
.................... 			break;
147D8:  BRA    14898
.................... 			}
.................... 		#if ((st8100c == true) || ( st8200c == true) || ( st8300c == true))
.................... 			case 7:		
.................... 				{
.................... 				trata_menu7();
.................... 				break;
.................... 				}
.................... 			case 8:		
.................... 				{
.................... 				trata_menu8();
.................... 				break;
.................... 				}
.................... 		#else
.................... 			case 7:
.................... 			case 8:
.................... 		#endif
.................... 		case 9:		
.................... 			{
.................... 			trata_menu9();
147DA:  CALL   13CDC
.................... 			break;
147DE:  BRA    14898
.................... 			}
.................... 		case 10:		
.................... 			{
.................... 			trata_menu10();
147E0:  CALL   13F34
.................... 			break;
147E4:  BRA    14898
.................... 			}
.................... 		case 11:
.................... 			{
.................... 			trata_menu11();
147E6:  RCALL  14446
.................... 			break;
147E8:  BRA    14898
.................... 			}
.................... 		case 12:
.................... 			{
.................... 			trata_menu12();
147EA:  RCALL  146B8
.................... 			break;
147EC:  BRA    14898
.................... 			}
.................... 		default:
.................... 			{
.................... 			if (tecla_up == 1)
147EE:  BTFSS  2A.5
147F0:  BRA    14804
.................... 				{
.................... 		 		if (menu1 > 1)
147F2:  MOVF   35,W
147F4:  SUBLW  01
147F6:  BC    147FC
.................... 		 			{
.................... 			 		menu1--;
147F8:  DECF   35,F
.................... 					rolando = false;
147FA:  BCF    2C.0
.................... 				 	}
.................... 		 		exibe_menu();
147FC:  CALL   E70A
.................... 				tecla_up = 0;
14800:  BCF    2A.5
.................... 				}
14802:  BRA    14898
.................... 			else if (tecla_down == 1)
14804:  BTFSS  2A.6
14806:  BRA    14822
.................... 				{
.................... 				if (menu1 < nro_menus)
14808:  MOVF   35,W
1480A:  SUBLW  0B
1480C:  BNC   14814
.................... 		 			{
.................... 		 			menu1++;
1480E:  INCF   35,F
.................... 					rolando = false;
14810:  BCF    2C.0
.................... 					}
14812:  BRA    1481A
.................... 				else
.................... 					{
.................... 		 			menu1 = 1;
14814:  MOVLW  01
14816:  MOVWF  35
.................... 					rolando = false;
14818:  BCF    2C.0
.................... 					}
.................... 	 			exibe_menu();
1481A:  CALL   E70A
.................... 				tecla_down = 0;
1481E:  BCF    2A.6
.................... 				}
14820:  BRA    14898
.................... 			else if (tecla_enter == 1)
14822:  BTFSS  2B.0
14824:  BRA    14892
.................... 				{
.................... 		 		tecla_enter = 0;
14826:  BCF    2B.0
.................... 				rolando = false;
14828:  BCF    2C.0
.................... 				switch(menu1)
1482A:  MOVF   35,W
1482C:  XORLW  01
1482E:  BZ    1485E
14830:  XORLW  03
14832:  BZ    14864
14834:  XORLW  01
14836:  BZ    14864
14838:  XORLW  07
1483A:  BZ    14864
1483C:  XORLW  01
1483E:  BZ    1486A
14840:  XORLW  03
14842:  BZ    14870
14844:  XORLW  01
14846:  BZ    14876
14848:  XORLW  0F
1484A:  BZ    14876
1484C:  XORLW  01
1484E:  BZ    14876
14850:  XORLW  03
14852:  BZ    1487C
14854:  XORLW  01
14856:  BZ    14882
14858:  XORLW  07
1485A:  BZ    14886
1485C:  BRA    1488C
.................... 					{
.................... 					case 1:
.................... 						{
.................... 						trata_menu1();
1485E:  CALL   10AAC
.................... 						break;
14862:  BRA    14890
.................... 						}
.................... 					#if (com_cht == true)
.................... 						case 2:
.................... 						case 3:
.................... 							{
.................... 							qchtt = 1;
.................... 							fase_cht = 'R';
.................... 							trata_menu2();
.................... 							break;
.................... 							}
.................... 					#else
.................... 						case 2:
.................... 						case 3:
.................... 					#endif
.................... 					case 4:
.................... 						{
.................... 						trata_menu4();		/* menu programacao */
14864:  CALL   120AC
.................... 						break;
14868:  BRA    14890
.................... 						}
.................... 					case 5:
.................... 						{
.................... 						trata_menu5();
1486A:  CALL   129D2
.................... 						break;
1486E:  BRA    14890
.................... 						}
.................... 					case 6:
.................... 						{
.................... 						trata_menu6();
14870:  CALL   13528
.................... 						break;
14874:  BRA    14890
.................... 						}
.................... 					#if ((st8100c == true) || ( st8200c == true) || ( st8300c == true))
.................... 						case 7:
.................... 							{
.................... 							trata_menu7();
.................... 							break;
.................... 							}
.................... 						case 8:
.................... 							{
.................... 							trata_menu8();
.................... 							break;
.................... 							}
.................... 					#else
.................... 						case 7:
.................... 						case 8:
.................... 					#endif
.................... 					case 9:
.................... 						{
.................... 						trata_menu9();
14876:  CALL   13CDC
.................... 						break;
1487A:  BRA    14890
.................... 						}
.................... 					case 10:
.................... 						{
.................... 						trata_menu10();
1487C:  CALL   13F34
.................... 						break;
14880:  BRA    14890
.................... 						}
.................... 					case 11:
.................... 						{
.................... 						trata_menu11();
14882:  RCALL  14446
.................... 						break;
14884:  BRA    14890
.................... 						}
.................... 					case 12:
.................... 						{
.................... 						rolando = false;
14886:  BCF    2C.0
.................... 						trata_menu12();
14888:  RCALL  146B8
.................... 						break;
1488A:  BRA    14890
.................... 						}
.................... 					default:
.................... 						{
.................... 						trata_menu1();
1488C:  CALL   10AAC
.................... 						}
.................... 					}
.................... 				}		
14890:  BRA    14898
.................... 			else if (tecla_reset == 1)
14892:  BTFSS  2B.1
14894:  BRA    14898
.................... 				{
.................... 				fim_menu1();
14896:  BRA    14702
14898:  MOVLB  3
.................... 				}
....................     	    }
....................         }
1489A:  MOVLB  0
1489C:  GOTO   149FA (RETURN)
.................... 		
.................... }
.................... 
.................... 
.................... 
.................... // Definicao dos valores a serem comparados para definicao das teclas via conversor AD.
.................... #define VAL_UP				2800
.................... #define VAL_DOWN			2030
.................... #define VAL_UP_DOWN			1660
.................... #define VAL_ENTER			1420
.................... #define VAL_ENTER_DOWN		1260
.................... #define VAL_RESET			715
.................... #define VAL_UP_RESET		680
.................... #define VAL_UP_DOWN_RESET	600
.................... #define VAL_ENTER_RESET		530
.................... 
.................... void teclado(void){
.................... 	if (time_tecla == 0){
148A0:  MOVF   37,F
148A2:  BTFSS  FD8.2
148A4:  BRA    149FA
.................... 		if (teclas > 3000){
148A6:  MOVF   33,W
148A8:  SUBLW  0A
148AA:  BC    148BA
148AC:  XORLW  FF
148AE:  BNZ   148B6
148B0:  MOVF   32,W
148B2:  SUBLW  B8
148B4:  BC    148BA
.................... //			ha_tecla = true;
.................... 			acelera_teclado = 0;
148B6:  CLRF   34
.................... 		}
148B8:  BRA    149F8
.................... 		else {
.................... 			#if (disp_lcd == true)
.................... 				time_out_back = 180;
148BA:  MOVLW  B4
148BC:  MOVLB  3
148BE:  MOVWF  xBA
.................... 			#endif
.................... 			rolando = false;
148C0:  BCF    2C.0
.................... 			
.................... 			time_out_exibe_status_teclando = 10;				
148C2:  MOVLW  0A
148C4:  MOVWF  2E
.................... 			time_out_menus = 10;	//120;
148C6:  MOVWF  31
.................... 			teclando = 30;
148C8:  MOVLW  1E
148CA:  MOVWF  39
.................... //			teclando_2 = 5;
.................... 			#if (disp_lcd == true)
.................... 				val_pwm = LIMITE_VAL_PWM;
148CC:  MOVLW  02
148CE:  MOVWF  xC8
148D0:  CLRF   xC7
.................... 			#endif
.................... 
.................... 
.................... 			time_tecla = 1 + (MAX_TIME_TECLA - acelera_teclado);
148D2:  MOVLW  19
148D4:  BSF    FD8.0
148D6:  SUBFWB 34,W
148D8:  ADDLW  01
148DA:  MOVWF  37
.................... 
.................... 			if (teclas >= VAL_UP)
148DC:  MOVF   33,W
148DE:  SUBLW  09
148E0:  BC    148F0
148E2:  XORLW  FF
148E4:  BNZ   148EC
148E6:  MOVF   32,W
148E8:  SUBLW  EF
148EA:  BC    148F0
.................... 				{
.................... 				tecla_up = 1;			/* tecla up pressionada */
148EC:  BSF    2A.5
.................... 				#if (AUTOSET == true)
.................... 					time_out_enter = 0;
.................... 					time_out_reset = 0;
.................... 				#endif
.................... 				}
148EE:  BRA    149E6
.................... 			else if (teclas >= VAL_DOWN)
148F0:  MOVF   33,W
148F2:  SUBLW  06
148F4:  BC    14904
148F6:  XORLW  FF
148F8:  BNZ   14900
148FA:  MOVF   32,W
148FC:  SUBLW  ED
148FE:  BC    14904
.................... 				{
.................... 				tecla_down = 1;			/* tecla down pressionada */
14900:  BSF    2A.6
.................... 				#if (AUTOSET == true)
.................... 					time_out_enter = 0;
.................... 					time_out_reset = 0;
.................... 				#endif
.................... 				}
14902:  BRA    149E6
.................... 			else if (teclas >= VAL_UP_DOWN)
14904:  MOVF   33,W
14906:  SUBLW  05
14908:  BC    14918
1490A:  XORLW  FF
1490C:  BNZ   14914
1490E:  MOVF   32,W
14910:  SUBLW  7B
14912:  BC    14918
.................... 				{
.................... 				tecla_up_down = 1;  	/* tecla up e down pressionadas */
14914:  BSF    2A.1
.................... 				}
14916:  BRA    149E6
.................... 			else if (teclas >= VAL_ENTER)
14918:  MOVF   33,W
1491A:  SUBLW  04
1491C:  BC    1492E
1491E:  XORLW  FF
14920:  BNZ   14928
14922:  MOVF   32,W
14924:  SUBLW  8B
14926:  BC    1492E
.................... 				{
.................... 				tecla_enter = 1;			/* tecla enter pressionada */
14928:  BSF    2B.0
.................... 				teclou_enter = ~teclou_enter;
1492A:  BTG    2B.5
.................... 				#if (AUTOSET == true)
.................... 					time_out_reset = 0;
.................... 				#endif
.................... 				}
1492C:  BRA    149E6
.................... 			else if (teclas >= VAL_ENTER_DOWN)
1492E:  MOVF   33,W
14930:  SUBLW  03
14932:  BC    14942
14934:  XORLW  FF
14936:  BNZ   1493E
14938:  MOVF   32,W
1493A:  SUBLW  EB
1493C:  BC    14942
.................... 				{
.................... 				tecla_enter_down = 1;  	/* tecla enter e down pressionadas */
1493E:  BSF    2A.3
.................... 				}
14940:  BRA    149E6
.................... 			else if (teclas >= VAL_RESET)
14942:  MOVF   33,W
14944:  SUBLW  01
14946:  BC    149A6
14948:  XORLW  FF
1494A:  BNZ   14952
1494C:  MOVF   32,W
1494E:  SUBLW  CA
14950:  BC    149A6
.................... 				{
.................... 				tecla_reset = 1;			/* tecla reset pressionada */
14952:  BSF    2B.1
.................... 				output_low(alarme);
14954:  BCF    F98.0
14956:  BCF    F8F.0
.................... 				#if (disp_lcd == true)
.................... 					#if (st8200c == false)
.................... 					    setup_timer_2(T2_DIV_BY_4, 127, 1);
14958:  MOVLW  00
1495A:  IORLW  05
1495C:  MOVWF  FCA
1495E:  MOVLW  7F
14960:  MOVWF  FCB
.................... 						setup_ccp1(ccp_pwm);
14962:  BCF    F94.2
14964:  BCF    F8B.2
14966:  MOVLW  0C
14968:  MOVWF  FBB
1496A:  CLRF   FBE
1496C:  CLRF   FBF
1496E:  MOVLW  01
14970:  MOVWF  F9C
14972:  MOVLW  F8
14974:  MOVLB  F
14976:  ANDWF  x2D,F
14978:  MOVLW  00
1497A:  IORWF  x2D,F
.................... 						set_pwm1_duty(val_pwm);	
1497C:  MOVFF  3C8,02
14980:  MOVFF  3C7,01
14984:  RRCF   02,F
14986:  RRCF   01,F
14988:  RRCF   02,F
1498A:  RRCF   01,F
1498C:  RRCF   02,F
1498E:  MOVFF  01,FBC
14992:  RRCF   02,F
14994:  RRCF   02,W
14996:  ANDLW  30
14998:  MOVWF  00
1499A:  MOVF   FBB,W
1499C:  ANDLW  CF
1499E:  IORWF  00,W
149A0:  MOVWF  FBB
.................... 					#endif
.................... 				#endif
.................... 				#if (AUTOSET == true)
.................... 					time_out_enter = 0;
.................... 				#endif
.................... 				}
149A2:  BRA    149E8
149A4:  MOVLB  3
.................... 			else if (teclas >= VAL_UP_RESET)
149A6:  MOVF   33,W
149A8:  SUBLW  01
149AA:  BC    149BA
149AC:  XORLW  FF
149AE:  BNZ   149B6
149B0:  MOVF   32,W
149B2:  SUBLW  A7
149B4:  BC    149BA
.................... 				{
.................... 				tecla_reset_up = 1;	/* tecla up e reset pressionadas */
149B6:  BSF    2A.2
.................... 				}
149B8:  BRA    149E6
.................... //			else if (teclas >= VAL_UP_DOWN_RESET)
.................... //				{
.................... //				tecla_up_down_reset = TRUE;
.................... //				}
.................... 			else if (teclas >= VAL_ENTER_RESET)
149BA:  MOVF   33,W
149BC:  SUBLW  01
149BE:  BC    149E6
149C0:  XORLW  FF
149C2:  BNZ   149CA
149C4:  MOVF   32,W
149C6:  SUBLW  11
149C8:  BC    149E6
.................... 				{
.................... 				tecla_enter_reset = 1;	/* tecla enter e reset pressionadas */
149CA:  BSF    2A.4
.................... 				tempo_senha = 255;		
149CC:  MOVLB  4
149CE:  SETF   xA6
.................... 				exibiu = 0;
149D0:  BCF    29.6
.................... 				#if (ST8100C == true)
.................... 					if (rolando == false)
.................... 						{
.................... 						ja_rolou = false;
.................... 						mensagem_rola(m_prog_liberada, 1);
.................... 						buf_display[4]=255;
.................... 						}
.................... 				#else
.................... 					mensagem (2,50);
149D2:  MOVLW  02
149D4:  MOVLB  A
149D6:  MOVWF  x4D
149D8:  MOVLW  32
149DA:  MOVWF  x4E
149DC:  MOVLB  0
149DE:  CALL   47E8
.................... 				#endif
.................... 				time_out_menus = 10;	//120;
149E2:  MOVLW  0A
149E4:  MOVWF  31
149E6:  MOVLB  F
.................... 				}
.................... 
.................... 			if (acelera_teclado < MAX_TIME_TECLA )
149E8:  MOVF   34,W
149EA:  SUBLW  18
149EC:  BNC   149F0
.................... 				{
.................... 				acelera_teclado++;	
149EE:  INCF   34,F
.................... 				}
.................... 			teclas = 4095;
149F0:  MOVLW  0F
149F2:  MOVWF  33
149F4:  SETF   32
149F6:  MOVLB  0
.................... 			}
.................... 		trata_menu();
149F8:  BRA    1472C
.................... 		}
149FA:  GOTO   1BED6 (RETURN)
.................... 	}
.................... 
.................... 
.................... void trata_senha(void)
.................... {
.................... 	#if (ST8100C == true)
.................... 		if (rolando == false)
.................... 			{
.................... 			time_out2 = 15;
.................... 			ja_rolou = false;
.................... 			mensagem_rola(m_prog_nao_auto, 1);
.................... 			buf_display[4] = 255;
.................... 			}
.................... 	#else
.................... 		mensagem (2,49);
*
0FFE0:  MOVLW  02
0FFE2:  MOVLB  A
0FFE4:  MOVWF  x4D
0FFE6:  MOVLW  31
0FFE8:  MOVWF  x4E
0FFEA:  MOVLB  0
0FFEC:  CALL   47E8
.................... 	#endif
0FFF0:  RETURN 0
.................... }   
.................... 
.................... 
.................... 
.................... void trata_time_out_menus(void){
.................... //		if (com_manual == false){
.................... //			if (min_kvar == 0){
.................... //				trata_desligamentos_old();
.................... //			}
.................... //		}
.................... //		if (teclando_2 != 0){
.................... //			teclando_2--;
.................... //		}
.................... 
.................... 	if (teclando != 0){
*
1700A:  MOVF   39,F
1700C:  BZ    17016
.................... 		teclando--;
1700E:  DECF   39,F
.................... 		time_out_menus = VAL_TIME_OUT_MENUS1;
17010:  MOVLW  0A
17012:  MOVWF  31
.................... 		return;
17014:  BRA    17064
.................... 	}
.................... 	if (teclando == 0){
17016:  MOVF   39,F
17018:  BNZ   1701C
.................... 		com_manual = false;
1701A:  BCF    25.2
.................... 	}
.................... 	if (time_out_menus != 0){
1701C:  MOVF   31,F
1701E:  BZ    17064
.................... 		if (MENU_FIXO == 0){
17020:  BTFSC  26.6
17022:  BRA    17026
.................... 			time_out_menus--;
17024:  DECF   31,F
.................... 		}
.................... 		if (time_out_menus == 0){
17026:  MOVF   31,F
17028:  BNZ   17064
.................... 			em_status = false;
1702A:  BCF    24.7
.................... 			time_out_menus = VAL_TIME_OUT_MENUS1;
1702C:  MOVLW  0A
1702E:  MOVWF  31
.................... 		 	if (qmenu == 1){
17030:  DECFSZ 3A,W
17032:  BRA    17052
.................... 				exibiu = 0;
17034:  BCF    29.6
.................... 				reset_rolar();
17036:  CALL   E704
.................... 				if (menu_aux == 0){
1703A:  MOVF   36,F
1703C:  BNZ   17042
.................... 					menu_aux = 8;
1703E:  MOVLW  08
17040:  MOVWF  36
.................... 				}
.................... 				if (menu_aux < nro_menus1){
17042:  MOVF   36,W
17044:  SUBLW  0C
17046:  BNC   1704C
.................... 	 				menu_aux++;
17048:  INCF   36,F
.................... 	 			}
1704A:  BRA    17050
.................... 	 			else{
.................... 	 				menu_aux = 1;
1704C:  MOVLW  01
1704E:  MOVWF  36
.................... 				}
.................... 		 	}
17050:  BRA    17064
.................... 			else{
.................... 			 	#if (disp_lcd == true)
.................... 					desativa_cursor();
17052:  CALL   FFC0
.................... 				#endif
.................... 			 	 	
.................... 			 	exibiu = 0;
17056:  BCF    29.6
.................... 				tecla_reset = 0;
17058:  BCF    2B.1
.................... 				menu1 = 0;
1705A:  CLRF   35
.................... 				menu_aux = 1;
1705C:  MOVLW  01
1705E:  MOVWF  36
.................... 				programando = 0;
17060:  BCF    29.5
.................... 				qmenu = 1;
17062:  MOVWF  3A
.................... 		 	}
.................... 	 	}
.................... 	}
17064:  GOTO   17364 (RETURN)
.................... }
.................... 	
.................... 
.................... 
.................... void fim_menu1(void){		
.................... 	tecla_reset = 0;
*
14702:  BCF    2B.1
.................... 	mensagem_inicial();
14704:  CALL   49BA
.................... 	if (qmenu != 0){
14708:  MOVF   3A,F
1470A:  BZ    14714
.................... 		salva_menus();
1470C:  CALL   E6BE
.................... 		calcula_mul_tc();
14710:  CALL   2AB8
.................... 	}
.................... 	rolando = false;
14714:  BCF    2C.0
.................... 	ja_rolou = false;
14716:  BCF    2C.1
.................... 	menu1 = 0;
14718:  CLRF   35
.................... 	menu_aux = 1;
1471A:  MOVLW  01
1471C:  MOVWF  36
.................... 	programando = 0;
1471E:  BCF    29.5
.................... 	qmenu = 0;
14720:  CLRF   3A
.................... 	MENU_FIXO = 0;
14722:  BCF    26.6
.................... 	time_out_menus = 5;
14724:  MOVLW  05
14726:  MOVWF  31
14728:  GOTO   14898 (RETURN)
.................... }
.................... 
.................... #if (disp_7seg == true)
.................... 	void exibe_off(void)
.................... 	{
.................... 		buf_display[0] = tabela_caracteres[MESPACO];
.................... 		buf_display[1] = tabela_caracteres[MO];
.................... 		buf_display[2] = tabela_caracteres[MF];
.................... 		buf_display[3] = tabela_caracteres[MF];
.................... 	}
.................... #endif
.................... 
.................... 
.................... 
.................... #include "st_ints.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_INTS                                                        *
.................... ; Funcao: MODULO Interrupçoes 					  						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 06/06/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... #if (st8500c == true)
.................... 	#include "st8500c_timer1.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_INTS                                                        *
.................... ; Funcao: MODULO Interrupçoes 					  						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 06/06/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... 
.................... #INT_TIMER1		//a cada 10 ms
.................... void temporizador(void){
.................... 	set_timer1(valor_timer1);
*
012EE:  MOVLW  3C
012F0:  MOVWF  FCF
012F2:  MOVLW  B0
012F4:  MOVWF  FCE
012F6:  NOP   
.................... 	
.................... 	nro_ints++;
012F8:  MOVLB  4
012FA:  INCF   x20,F
.................... 	conta_ints++;
012FC:  INCF   x27,F
.................... 	morder_t1 = 1;
012FE:  BSF    1F.6
.................... 	if (time_out_int0 != 0){
01300:  MOVF   x22,F
01302:  BZ    1306
.................... 		time_out_int0--;
01304:  DECF   x22,F
.................... 	}
.................... 	if (time_out_t3 != 0){
01306:  MOVLB  3
01308:  MOVF   xBB,F
0130A:  BZ    130E
.................... 		time_out_t3--;
0130C:  DECF   xBB,F
.................... 	}
.................... 		
.................... 	if (time_out_modbus != 0){
0130E:  MOVLB  5
01310:  MOVF   x1D,F
01312:  BZ    1316
.................... 		time_out_modbus--;
01314:  DECF   x1D,F
.................... 	}
.................... 	if (time_tecla != 0){
01316:  MOVF   37,F
01318:  BZ    131C
....................   		time_tecla--;
0131A:  DECF   37,F
....................   	}
.................... 	set_adc_channel(9);
0131C:  MOVLW  24
0131E:  MOVWF  01
01320:  MOVF   FC2,W
01322:  ANDLW  83
01324:  IORWF  01,W
01326:  MOVWF  FC2
01328:  MOVLW  00
0132A:  MOVWF  01
0132C:  MOVF   FC1,W
0132E:  ANDLW  F8
01330:  IORWF  01,W
01332:  MOVWF  FC1
.................... 	delay_us(20);												// espera chavear
01334:  CLRWDT
01336:  MOVLW  42
01338:  MOVWF  00
0133A:  DECFSZ 00,F
0133C:  BRA    133A
.................... 	teclas = read_adc();
0133E:  BSF    FC2.1
01340:  BTFSC  FC2.1
01342:  BRA    1340
01344:  MOVFF  FC4,33
01348:  MOVFF  FC3,32
.................... 
.................... 	#if (com_rep == true)
.................... 		if (modo_rep == 1){
.................... 			if (time_out_rec_rep != 0){
.................... 				time_out_rec_rep--;
.................... 				cont_sem_REP = 0;
.................... 			}
.................... 			else{
.................... 				qtd_byte_REP = nbyte_rep;
.................... 				nbyte_rep = 0;
.................... 				transferir_REP = 1;
.................... 			}
.................... 		}
.................... 	#endif
.................... 
.................... 	cont0--;
0134C:  MOVLB  3
0134E:  DECF   xF1,F
.................... 	if (cont0 == 0){
01350:  MOVF   xF1,F
01352:  BNZ   13AE
.................... 		cont0 = INTS_PER_250MS;
01354:  MOVLW  19
01356:  MOVWF  xF1
.................... 		virou_250ms = 1;
01358:  BSF    1E.6
.................... 		cont1++;
0135A:  INCF   xF2,F
.................... 		if (tem_erro == 1){
0135C:  BTFSS  24.3
0135E:  BRA    1368
.................... 			led_alarme = ~led_alarme;
01360:  MOVLB  8
01362:  BTG    x84.1
.................... 		}
01364:  BRA    136C
01366:  MOVLB  3
.................... 		else{
.................... 			led_alarme = 0;
01368:  MOVLB  8
0136A:  BCF    x84.1
.................... 		}
.................... 		
.................... 		if (cont1 == 1){
0136C:  MOVLB  3
0136E:  DECFSZ xF2,W
01370:  BRA    137C
.................... 			virou_500ms = 1;
01372:  BSF    1E.7
.................... 			led_ok = ~led_ok;
01374:  MOVLB  8
01376:  BTG    x84.0
.................... 		}
01378:  BRA    13B0
0137A:  MOVLB  3
.................... 		else if (cont1 == 2){
0137C:  MOVF   xF2,W
0137E:  SUBLW  02
01380:  BNZ   1386
.................... 			virou_750ms = 1;
01382:  BSF    1F.0
.................... 		}
01384:  BRA    13AE
.................... 		else if (cont1 == 3){
01386:  MOVF   xF2,W
01388:  SUBLW  03
0138A:  BNZ   13A2
.................... 			led_ok = ~led_ok;
0138C:  MOVLB  8
0138E:  BTG    x84.0
.................... 			virouseg = 1;
01390:  BSF    1F.1
.................... 			if (time_out != 0){
01392:  MOVLB  3
01394:  MOVF   xB7,F
01396:  BZ    139A
.................... 				time_out--;
01398:  DECF   xB7,F
.................... 			}
.................... 			if (time_out2 != 0){
0139A:  MOVF   xB8,F
0139C:  BZ    13A0
.................... 				time_out2--;
0139E:  DECF   xB8,F
.................... 			}
.................... 		}
013A0:  BRA    13AE
.................... 		else if (cont1 == 4){
013A2:  MOVF   xF2,W
013A4:  SUBLW  04
013A6:  BNZ   13AC
.................... 			cont1 = 0;
013A8:  CLRF   xF2
.................... 		}
013AA:  BRA    13AE
.................... 		else{
.................... 			cont1 = 0;
013AC:  CLRF   xF2
013AE:  MOVLB  8
.................... 		}
.................... 	}
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #else
.................... 	#include "timer1.c"
.................... #endif
.................... #if (sames_9904 == true)
.................... 	#include "timer3_sames.c"
.................... 	#include "int_ext_sames.c"
.................... #else
.................... 	#if (st9230r == true)
.................... 		#if (epcos == true)
.................... 			#include "timer3_epcos.c"
.................... 		#else
.................... 			#include "timer3.c"
.................... 		#endif
.................... 	#elif (st8500c == true)
.................... 		#include "st8500c_timer3.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÔNICOS                                  *
.................... ; Modulo: ST_INTS                                                        *
.................... ; Funcao: MODULO Interrupçoes 					  						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 06/06/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... 
.................... 
013B0:  BCF    F9E.0
013B2:  MOVLB  0
013B4:  GOTO   0098
.................... #INT_TIMER3  // FAST //a cada ???? ms
.................... void temporizador3(void){
.................... 	word leitura;
.................... 	cont_fase++;
013B8:  MOVLB  3
013BA:  INCF   xC6,F
.................... 	if (freq_50HZ == 1){
013BC:  BTFSS  21.3
013BE:  BRA    13CC
.................... 		set_timer3(valor_timer3_2_50HZ);
013C0:  MOVLW  F9
013C2:  MOVWF  FB3
013C4:  MOVLW  E5
013C6:  MOVWF  FB2
013C8:  NOP   
.................... 	}
013CA:  BRA    13D6
.................... 	else{
.................... 		set_timer3(valor_timer3_2_60HZ);
013CC:  MOVLW  FA
013CE:  MOVWF  FB3
013D0:  MOVLW  EA
013D2:  MOVWF  FB2
013D4:  NOP   
.................... 	}
.................... 	morder_t3 = 1;
013D6:  BSF    1F.7
.................... 	if (med_ten_ok == 0){
013D8:  BTFSC  1E.3
013DA:  BRA    15B2
.................... 		if ((ler_ad_t3 == 1) || (time_out_t3 == 0)){
013DC:  BTFSC  20.3
013DE:  BRA    13E6
013E0:  MOVF   xBB,F
013E2:  BTFSS  FD8.2
013E4:  BRA    15B2
.................... 			if (passo_ad_8300 == 0){
013E6:  MOVLB  2
013E8:  MOVF   x95,F
013EA:  BNZ   1472
.................... 				set_adc_channel(6);
013EC:  MOVLW  18
013EE:  MOVWF  01
013F0:  MOVF   FC2,W
013F2:  ANDLW  83
013F4:  IORWF  01,W
013F6:  MOVWF  FC2
013F8:  MOVLW  00
013FA:  MOVWF  01
013FC:  MOVF   FC1,W
013FE:  ANDLW  F8
01400:  IORWF  01,W
01402:  MOVWF  FC1
.................... 				delay_us(20);
01404:  CLRWDT
01406:  MOVLW  42
01408:  MOVWF  00
0140A:  DECFSZ 00,F
0140C:  BRA    140A
.................... 				buf_tensao_r[passo_tensao] = (signed word)read_adc();
0140E:  BCF    FD8.0
01410:  MOVLB  4
01412:  RLCF   x0B,W
01414:  CLRF   03
01416:  ADDLW  34
01418:  MOVWF  FE9
0141A:  MOVLW  05
0141C:  ADDWFC 03,W
0141E:  MOVWF  FEA
01420:  BSF    FC2.1
01422:  BTFSC  FC2.1
01424:  BRA    1422
01426:  MOVFF  FC3,FEF
0142A:  MOVFF  FC4,FEC
.................... 				#if (com_tc == true)
.................... 					set_adc_channel(0);
0142E:  MOVLW  00
01430:  MOVWF  01
01432:  MOVF   FC2,W
01434:  ANDLW  83
01436:  IORWF  01,W
01438:  MOVWF  FC2
0143A:  MOVLW  00
0143C:  MOVWF  01
0143E:  MOVF   FC1,W
01440:  ANDLW  F8
01442:  IORWF  01,W
01444:  MOVWF  FC1
.................... 					delay_us(20);
01446:  CLRWDT
01448:  MOVLW  42
0144A:  MOVWF  00
0144C:  DECFSZ 00,F
0144E:  BRA    144C
.................... 					buf_corrente_r[passo_corrente] = (signed word)read_adc();
01450:  BCF    FD8.0
01452:  RLCF   x0C,W
01454:  CLRF   03
01456:  ADDLW  B6
01458:  MOVWF  FE9
0145A:  MOVLW  05
0145C:  ADDWFC 03,W
0145E:  MOVWF  FEA
01460:  BSF    FC2.1
01462:  BTFSC  FC2.1
01464:  BRA    1462
01466:  MOVFF  FC3,FEF
0146A:  MOVFF  FC4,FEC
.................... 				#endif
.................... 				}
0146E:  BRA    158E
01470:  MOVLB  2
.................... 			else if (passo_ad_8300 == 1){
01472:  DECFSZ x95,W
01474:  BRA    14FC
.................... 				set_adc_channel(7);
01476:  MOVLW  1C
01478:  MOVWF  01
0147A:  MOVF   FC2,W
0147C:  ANDLW  83
0147E:  IORWF  01,W
01480:  MOVWF  FC2
01482:  MOVLW  00
01484:  MOVWF  01
01486:  MOVF   FC1,W
01488:  ANDLW  F8
0148A:  IORWF  01,W
0148C:  MOVWF  FC1
.................... 				delay_us(20);
0148E:  CLRWDT
01490:  MOVLW  42
01492:  MOVWF  00
01494:  DECFSZ 00,F
01496:  BRA    1494
.................... 				buf_tensao_s[passo_tensao] = (signed word)read_adc();
01498:  BCF    FD8.0
0149A:  MOVLB  4
0149C:  RLCF   x0B,W
0149E:  CLRF   03
014A0:  ADDLW  38
014A2:  MOVWF  FE9
014A4:  MOVLW  06
014A6:  ADDWFC 03,W
014A8:  MOVWF  FEA
014AA:  BSF    FC2.1
014AC:  BTFSC  FC2.1
014AE:  BRA    14AC
014B0:  MOVFF  FC3,FEF
014B4:  MOVFF  FC4,FEC
.................... 				#if (com_tc == true)
.................... 					set_adc_channel(1);
014B8:  MOVLW  04
014BA:  MOVWF  01
014BC:  MOVF   FC2,W
014BE:  ANDLW  83
014C0:  IORWF  01,W
014C2:  MOVWF  FC2
014C4:  MOVLW  00
014C6:  MOVWF  01
014C8:  MOVF   FC1,W
014CA:  ANDLW  F8
014CC:  IORWF  01,W
014CE:  MOVWF  FC1
.................... 					delay_us(20);
014D0:  CLRWDT
014D2:  MOVLW  42
014D4:  MOVWF  00
014D6:  DECFSZ 00,F
014D8:  BRA    14D6
.................... 					buf_corrente_s[passo_corrente] = (signed word)read_adc();
014DA:  BCF    FD8.0
014DC:  RLCF   x0C,W
014DE:  CLRF   03
014E0:  ADDLW  3C
014E2:  MOVWF  FE9
014E4:  MOVLW  07
014E6:  ADDWFC 03,W
014E8:  MOVWF  FEA
014EA:  BSF    FC2.1
014EC:  BTFSC  FC2.1
014EE:  BRA    14EC
014F0:  MOVFF  FC3,FEF
014F4:  MOVFF  FC4,FEC
.................... 				#endif
.................... 			}
014F8:  BRA    158E
014FA:  MOVLB  2
.................... 			else if (passo_ad_8300 == 2){
014FC:  MOVF   x95,W
014FE:  SUBLW  02
01500:  BNZ   1588
.................... 				set_adc_channel(8);
01502:  MOVLW  20
01504:  MOVWF  01
01506:  MOVF   FC2,W
01508:  ANDLW  83
0150A:  IORWF  01,W
0150C:  MOVWF  FC2
0150E:  MOVLW  00
01510:  MOVWF  01
01512:  MOVF   FC1,W
01514:  ANDLW  F8
01516:  IORWF  01,W
01518:  MOVWF  FC1
.................... 				delay_us(20);
0151A:  CLRWDT
0151C:  MOVLW  42
0151E:  MOVWF  00
01520:  DECFSZ 00,F
01522:  BRA    1520
.................... 				buf_tensao_t[passo_tensao] = (signed word)read_adc();
01524:  BCF    FD8.0
01526:  MOVLB  4
01528:  RLCF   x0B,W
0152A:  CLRF   03
0152C:  ADDLW  BA
0152E:  MOVWF  FE9
01530:  MOVLW  06
01532:  ADDWFC 03,W
01534:  MOVWF  FEA
01536:  BSF    FC2.1
01538:  BTFSC  FC2.1
0153A:  BRA    1538
0153C:  MOVFF  FC3,FEF
01540:  MOVFF  FC4,FEC
.................... 				#if (com_tc == true)
.................... 					set_adc_channel(2);
01544:  MOVLW  08
01546:  MOVWF  01
01548:  MOVF   FC2,W
0154A:  ANDLW  83
0154C:  IORWF  01,W
0154E:  MOVWF  FC2
01550:  MOVLW  00
01552:  MOVWF  01
01554:  MOVF   FC1,W
01556:  ANDLW  F8
01558:  IORWF  01,W
0155A:  MOVWF  FC1
.................... 					delay_us(20);
0155C:  CLRWDT
0155E:  MOVLW  42
01560:  MOVWF  00
01562:  DECFSZ 00,F
01564:  BRA    1562
.................... 					buf_corrente_t[passo_corrente] = (signed word)read_adc();
01566:  BCF    FD8.0
01568:  RLCF   x0C,W
0156A:  CLRF   03
0156C:  ADDLW  BE
0156E:  MOVWF  FE9
01570:  MOVLW  07
01572:  ADDWFC 03,W
01574:  MOVWF  FEA
01576:  BSF    FC2.1
01578:  BTFSC  FC2.1
0157A:  BRA    1578
0157C:  MOVFF  FC3,FEF
01580:  MOVFF  FC4,FEC
.................... 				#endif
.................... 			}
01584:  BRA    158E
01586:  MOVLB  2
.................... 			else{
.................... 				med_ten_ok = 1;
01588:  BSF    1E.3
.................... 				passo_ad_8300 = 255;
0158A:  SETF   x95
0158C:  MOVLB  4
.................... 			}
.................... 				
.................... 			passo_tensao++;
0158E:  INCF   x0B,F
.................... 			#if (com_tc == true)
.................... 				passo_corrente++;
01590:  INCF   x0C,F
.................... 				if (passo_corrente == NRO_AMOSTRAS){
01592:  MOVF   x0C,W
01594:  SUBLW  40
01596:  BNZ   159A
.................... 					passo_corrente = 0;
01598:  CLRF   x0C
.................... 				}
.................... 			#endif
.................... 			if (passo_tensao == NRO_AMOSTRAS){
0159A:  MOVF   x0B,W
0159C:  SUBLW  40
0159E:  BNZ   15B0
.................... 				med_ten_ok = 1;
015A0:  BSF    1E.3
.................... 				ler_ad_t3 = 0;
015A2:  BCF    20.3
.................... 				passo_tensao = 0;
015A4:  CLRF   x0B
.................... 				#if (com_tc == true)
.................... 					passo_corrente = off_cor_r;
015A6:  MOVFF  4B7,40C
.................... 				#endif
.................... 				passo_ad_8300++;
015AA:  MOVLB  2
015AC:  INCF   x95,F
015AE:  MOVLB  4
015B0:  MOVLB  3
.................... //				if (nro_soma_vref < NRO_MEDIAS_VREF){
.................... //					set_adc_channel(4);
.................... //					delay_us(20);
.................... //					soma_vref += read_adc();
.................... //					nro_soma_vref++;
.................... //				}
.................... 			}
.................... 		}
.................... 	}
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 	#else
.................... 		#include "timer3.c"
.................... 	#endif
.................... 	#include "int_ext.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRÿÔNICOS                                  *
.................... ; Modulo: ST_INTS                                                        *
.................... ; Funcao: MODULO Interrupÿçoes 					  						 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 06/06/2003                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;*************************************************************************/
.................... 
.................... 
.................... #if (st94 == true) || (st92 == true)
.................... 	#if (rev_pci_st94 >= 11)
.................... 		#INT_EXT  // FAST
.................... 	#else
.................... 		#INT_EXT2  // FAST
.................... 	#endif
.................... #else
015B2:  BCF    FA1.1
015B4:  MOVLB  0
015B6:  GOTO   0098
.................... 	#INT_EXT  // FAST
.................... #endif
.................... void int_externa0(void)
.................... {
.................... 	// TRATAMENTO DA INTERRUPÇÃO EXTERNA 0(TENSAO) //
.................... 	
.................... 	// obtem o timer atual;
.................... 	conta_freq++;
015BA:  MOVLB  4
015BC:  INCF   x26,F
.................... 	
.................... 	if (calculando_freq == 0)
015BE:  BTFSC  21.2
015C0:  BRA    15E4
.................... 		{
.................... 		freq_tmp1 = freq_tmp;
015C2:  MOVFF  41D,41F
015C6:  MOVFF  41C,41E
.................... 		freq_tmp = get_timer1();
015CA:  MOVF   FCE,W
015CC:  MOVWF  x1C
015CE:  MOVFF  FCF,41D
.................... 		nro_ints_old = nro_ints;
015D2:  MOVFF  420,421
.................... 		nro_ints = 0;
015D6:  CLRF   x20
.................... 		if (nro_ints_old <= 2)
015D8:  MOVF   x21,W
015DA:  SUBLW  02
015DC:  BNC   15E2
.................... 			{
.................... 			calcular_frequencia = 1;
015DE:  BSF    21.1
.................... 			}
015E0:  BRA    15E4
.................... 		else
.................... 			{
.................... 			calcular_frequencia = 0;
015E2:  BCF    21.1
.................... 			}
.................... 		}
.................... 
.................... 		
.................... 	ler_senoide = 1;
015E4:  BSF    20.1
.................... 	time_out_t3 = 3;
015E6:  MOVLW  03
015E8:  MOVLB  3
015EA:  MOVWF  xBB
.................... 	if (med_ten_ok == 0)
015EC:  BTFSC  1E.3
015EE:  BRA    15F2
.................... 		{
.................... 		ler_ad_t3 = 1;
015F0:  BSF    20.3
.................... 		}
.................... 
.................... 
.................... 			
.................... 	// obtem a fase entre tensao e corrente	
.................... 	distancia_fase = cont_fase;
015F2:  MOVFF  3C6,3C5
.................... 		
.................... 	fase_tmp = get_timer1() - fase_tmp1;
015F6:  MOVF   FCE,W
015F8:  MOVLB  A
015FA:  MOVWF  x98
015FC:  MOVLB  1
015FE:  MOVF   xFE,W
01600:  MOVLB  A
01602:  SUBWF  x98,W
01604:  MOVWF  00
01606:  MOVLB  1
01608:  MOVF   xFF,W
0160A:  SUBWFB FCF,W
0160C:  MOVFF  00,1FC
01610:  MOVLB  1
01612:  MOVWF  xFD
.................... //	#if (controlador == true)
.................... //		tempo_falta_energia = 255;
.................... //		faltou_energia = false;
.................... //
.................... //	#endif
.................... }
.................... 
.................... 
01614:  BCF    FF2.1
01616:  MOVLB  0
01618:  GOTO   0098
.................... #INT_EXT1 // FAST
.................... void int_externa1(void)
.................... {
.................... 	// TRATAMENTO DA INTERRUPÇÃO EXTERNA 1(CORRENTE) //
.................... 		fase_tmp1 = get_timer1();
0161C:  MOVF   FCE,W
0161E:  MOVLB  1
01620:  MOVWF  xFE
01622:  MOVFF  FCF,1FF
.................... 		
.................... 		cont_fase = 0;
01626:  MOVLB  3
01628:  CLRF   xC6
.................... 		
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif	
.................... #if (home_system == false)
.................... 	#include "serial.c"
.................... //***********************************************************************
.................... // Empresa: Sultech Sistemas Eletrônicos								*
.................... // Modulo: Inicial														*
.................... // Função: Definição das Interrupções Seriais							*
.................... // Responsável: Edison Valério Nunes Junior								*
.................... // Modificado: Edison Valério Nunes Junior								*
.................... // Inicio: 02/07/2012													*
.................... // Revisão: Edison Valério Nunes Junior									*
.................... //***********************************************************************
.................... 
0162A:  BCF    FF0.0
0162C:  MOVLB  0
0162E:  GOTO   0098
.................... #INT_RDA
.................... void serial(void){
.................... 	led_rx = 1;
*
0164A:  MOVLB  8
0164C:  BSF    x84.2
.................... 	comuni_busy = 5;
0164E:  MOVLW  05
01650:  MOVWF  58
.................... 	time_out_modbus = 4;
01652:  MOVLW  04
01654:  MOVLB  5
01656:  MOVWF  x1D
.................... 	buf_rx[ptrrx++] = getc(modbus);   
01658:  MOVF   x30,W
0165A:  INCF   x30,F
0165C:  CLRF   03
0165E:  ADDLW  40
01660:  MOVWF  FE9
01662:  MOVLW  08
01664:  ADDWFC 03,W
01666:  MOVWF  FEA
01668:  MOVFF  FEA,A9B
0166C:  MOVFF  FE9,A9A
01670:  MOVLB  0
01672:  BRA    1632
01674:  MOVFF  A9B,FEA
01678:  MOVFF  A9A,FE9
0167C:  MOVFF  01,FEF
.................... 	numbrx++;
01680:  MOVLB  5
01682:  INCF   x32,F
.................... 	if(numbrx == 8){
01684:  MOVF   x32,W
01686:  SUBLW  08
01688:  BNZ   1690
.................... 		aux_b1 = 0;
0168A:  MOVLB  3
0168C:  CLRF   xB1
0168E:  MOVLB  5
.................... 	}
.................... 	if (ptrrx >= TAM_RX){
01690:  MOVF   x30,W
01692:  SUBLW  1F
01694:  BC    169A
.................... 		ptrrx = 0;
01696:  CLRF   x30
.................... 		numbrx = 0;
01698:  CLRF   x32
.................... 	}
.................... }
.................... 
.................... #if (com_rep == true)
.................... 	#INT_RDA2
.................... 	void serial2(void){
.................... 	 	buf_rec_rep[nbyte_rep++] = getc(rep);
.................... 		led_rx = ~led_rx;
.................... 		time_out_rec_rep = 3;		//15;
.................... 
.................... 		if(nbyte_rep > 55){
.................... 			aux_b1 = 0;
.................... 		}
.................... 	}
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
0169A:  BCF    F9E.5
0169C:  MOVLB  0
0169E:  GOTO   0098
.................... #include "st_calc.c"
.................... //***********************************************************************
.................... // Empresa: Sultech Sistemas Eletrônicos								*
.................... // Módulo: ST_CALC														*
.................... // Função: Calcular valores de tensão e corrente.						*
.................... // Responsável: Edison Valério Nunes Junior								*
.................... // Modificado: Edison Valério Nunes Junior								*
.................... // Inicio: 01/08/2003													*
.................... // Revisão: Edison Valério Nunes Junior									*
.................... //***********************************************************************
.................... 
.................... void calcula_vref(void){
.................... 	int x;
.................... 	soma_vreft = 0;
*
1757E:  MOVLB  4
17580:  CLRF   x16
17582:  CLRF   x15
17584:  CLRF   x14
17586:  CLRF   x13
.................... 	soma_vrefc = 0;
17588:  CLRF   x1A
1758A:  CLRF   x19
1758C:  CLRF   x18
1758E:  CLRF   x17
.................... 	for(x = 0; x < NRO_AMOSTRAS; x++){
17590:  MOVLB  A
17592:  CLRF   x4A
17594:  MOVF   x4A,W
17596:  SUBLW  3F
17598:  BNC   1763A
.................... 		soma_vreft += buf_tensao_r[x];
1759A:  BCF    FD8.0
1759C:  RLCF   x4A,W
1759E:  CLRF   03
175A0:  ADDLW  34
175A2:  MOVWF  FE9
175A4:  MOVLW  05
175A6:  ADDWFC 03,W
175A8:  MOVWF  FEA
175AA:  MOVFF  FEC,03
175AE:  MOVF   FED,F
175B0:  MOVFF  FEF,00
175B4:  MOVFF  03,01
175B8:  CLRF   02
175BA:  CLRF   03
175BC:  BTFSS  01.7
175BE:  BRA    175C4
175C0:  DECF   02,F
175C2:  DECF   03,F
175C4:  MOVLB  4
175C6:  MOVF   x13,W
175C8:  ADDWF  00,F
175CA:  MOVF   x14,W
175CC:  ADDWFC 01,F
175CE:  MOVF   x15,W
175D0:  ADDWFC 02,F
175D2:  MOVF   x16,W
175D4:  ADDWFC 03,F
175D6:  MOVFF  03,416
175DA:  MOVFF  02,415
175DE:  MOVFF  01,414
175E2:  MOVFF  00,413
.................... 		soma_vrefc += buf_corrente_r[x];
175E6:  BCF    FD8.0
175E8:  MOVLB  A
175EA:  RLCF   x4A,W
175EC:  CLRF   03
175EE:  ADDLW  B6
175F0:  MOVWF  FE9
175F2:  MOVLW  05
175F4:  ADDWFC 03,W
175F6:  MOVWF  FEA
175F8:  MOVFF  FEC,03
175FC:  MOVF   FED,F
175FE:  MOVFF  FEF,00
17602:  MOVFF  03,01
17606:  CLRF   02
17608:  CLRF   03
1760A:  BTFSS  01.7
1760C:  BRA    17612
1760E:  DECF   02,F
17610:  DECF   03,F
17612:  MOVLB  4
17614:  MOVF   x17,W
17616:  ADDWF  00,F
17618:  MOVF   x18,W
1761A:  ADDWFC 01,F
1761C:  MOVF   x19,W
1761E:  ADDWFC 02,F
17620:  MOVF   x1A,W
17622:  ADDWFC 03,F
17624:  MOVFF  03,41A
17628:  MOVFF  02,419
1762C:  MOVFF  01,418
17630:  MOVFF  00,417
17634:  MOVLB  A
17636:  INCF   x4A,F
17638:  BRA    17594
.................... 	}
.................... 	vreftr = (soma_vreft / NRO_AMOSTRAS);
1763A:  MOVLB  4
1763C:  RRCF   x16,W
1763E:  MOVWF  03
17640:  RRCF   x15,W
17642:  MOVWF  02
17644:  RRCF   x14,W
17646:  MOVWF  01
17648:  RRCF   x13,W
1764A:  MOVWF  00
1764C:  RRCF   03,F
1764E:  RRCF   02,F
17650:  RRCF   01,F
17652:  RRCF   00,F
17654:  RRCF   03,F
17656:  RRCF   02,F
17658:  RRCF   01,F
1765A:  RRCF   00,F
1765C:  RRCF   03,F
1765E:  RRCF   02,F
17660:  RRCF   01,F
17662:  RRCF   00,F
17664:  RRCF   03,F
17666:  RRCF   02,F
17668:  RRCF   01,F
1766A:  RRCF   00,F
1766C:  RRCF   03,F
1766E:  RRCF   02,F
17670:  RRCF   01,F
17672:  RRCF   00,F
17674:  MOVFF  00,3E7
17678:  MOVLB  3
1767A:  MOVFF  01,3E8
.................... 	vrefcr = (soma_vrefc / NRO_AMOSTRAS);
1767E:  MOVLB  4
17680:  RRCF   x1A,W
17682:  MOVWF  03
17684:  RRCF   x19,W
17686:  MOVWF  02
17688:  RRCF   x18,W
1768A:  MOVWF  01
1768C:  RRCF   x17,W
1768E:  MOVWF  00
17690:  RRCF   03,F
17692:  RRCF   02,F
17694:  RRCF   01,F
17696:  RRCF   00,F
17698:  RRCF   03,F
1769A:  RRCF   02,F
1769C:  RRCF   01,F
1769E:  RRCF   00,F
176A0:  RRCF   03,F
176A2:  RRCF   02,F
176A4:  RRCF   01,F
176A6:  RRCF   00,F
176A8:  RRCF   03,F
176AA:  RRCF   02,F
176AC:  RRCF   01,F
176AE:  RRCF   00,F
176B0:  RRCF   03,F
176B2:  RRCF   02,F
176B4:  RRCF   01,F
176B6:  RRCF   00,F
176B8:  MOVFF  00,3E1
176BC:  MOVLB  3
176BE:  MOVFF  01,3E2
.................... 
.................... 	soma_vreft = 0;
176C2:  MOVLB  4
176C4:  CLRF   x16
176C6:  CLRF   x15
176C8:  CLRF   x14
176CA:  CLRF   x13
.................... 	soma_vrefc = 0;
176CC:  CLRF   x1A
176CE:  CLRF   x19
176D0:  CLRF   x18
176D2:  CLRF   x17
.................... 	for(x = 0; x < NRO_AMOSTRAS; x++){
176D4:  MOVLB  A
176D6:  CLRF   x4A
176D8:  MOVF   x4A,W
176DA:  SUBLW  3F
176DC:  BNC   1777E
.................... 		soma_vreft += buf_tensao_s[x];
176DE:  BCF    FD8.0
176E0:  RLCF   x4A,W
176E2:  CLRF   03
176E4:  ADDLW  38
176E6:  MOVWF  FE9
176E8:  MOVLW  06
176EA:  ADDWFC 03,W
176EC:  MOVWF  FEA
176EE:  MOVFF  FEC,03
176F2:  MOVF   FED,F
176F4:  MOVFF  FEF,00
176F8:  MOVFF  03,01
176FC:  CLRF   02
176FE:  CLRF   03
17700:  BTFSS  01.7
17702:  BRA    17708
17704:  DECF   02,F
17706:  DECF   03,F
17708:  MOVLB  4
1770A:  MOVF   x13,W
1770C:  ADDWF  00,F
1770E:  MOVF   x14,W
17710:  ADDWFC 01,F
17712:  MOVF   x15,W
17714:  ADDWFC 02,F
17716:  MOVF   x16,W
17718:  ADDWFC 03,F
1771A:  MOVFF  03,416
1771E:  MOVFF  02,415
17722:  MOVFF  01,414
17726:  MOVFF  00,413
.................... 		soma_vrefc += buf_corrente_s[x];
1772A:  BCF    FD8.0
1772C:  MOVLB  A
1772E:  RLCF   x4A,W
17730:  CLRF   03
17732:  ADDLW  3C
17734:  MOVWF  FE9
17736:  MOVLW  07
17738:  ADDWFC 03,W
1773A:  MOVWF  FEA
1773C:  MOVFF  FEC,03
17740:  MOVF   FED,F
17742:  MOVFF  FEF,00
17746:  MOVFF  03,01
1774A:  CLRF   02
1774C:  CLRF   03
1774E:  BTFSS  01.7
17750:  BRA    17756
17752:  DECF   02,F
17754:  DECF   03,F
17756:  MOVLB  4
17758:  MOVF   x17,W
1775A:  ADDWF  00,F
1775C:  MOVF   x18,W
1775E:  ADDWFC 01,F
17760:  MOVF   x19,W
17762:  ADDWFC 02,F
17764:  MOVF   x1A,W
17766:  ADDWFC 03,F
17768:  MOVFF  03,41A
1776C:  MOVFF  02,419
17770:  MOVFF  01,418
17774:  MOVFF  00,417
17778:  MOVLB  A
1777A:  INCF   x4A,F
1777C:  BRA    176D8
.................... 	}
.................... 	vrefts = (soma_vreft / NRO_AMOSTRAS);
1777E:  MOVLB  4
17780:  RRCF   x16,W
17782:  MOVWF  03
17784:  RRCF   x15,W
17786:  MOVWF  02
17788:  RRCF   x14,W
1778A:  MOVWF  01
1778C:  RRCF   x13,W
1778E:  MOVWF  00
17790:  RRCF   03,F
17792:  RRCF   02,F
17794:  RRCF   01,F
17796:  RRCF   00,F
17798:  RRCF   03,F
1779A:  RRCF   02,F
1779C:  RRCF   01,F
1779E:  RRCF   00,F
177A0:  RRCF   03,F
177A2:  RRCF   02,F
177A4:  RRCF   01,F
177A6:  RRCF   00,F
177A8:  RRCF   03,F
177AA:  RRCF   02,F
177AC:  RRCF   01,F
177AE:  RRCF   00,F
177B0:  RRCF   03,F
177B2:  RRCF   02,F
177B4:  RRCF   01,F
177B6:  RRCF   00,F
177B8:  MOVFF  00,3E9
177BC:  MOVLB  3
177BE:  MOVFF  01,3EA
.................... 	vrefcs = (soma_vrefc / NRO_AMOSTRAS);
177C2:  MOVLB  4
177C4:  RRCF   x1A,W
177C6:  MOVWF  03
177C8:  RRCF   x19,W
177CA:  MOVWF  02
177CC:  RRCF   x18,W
177CE:  MOVWF  01
177D0:  RRCF   x17,W
177D2:  MOVWF  00
177D4:  RRCF   03,F
177D6:  RRCF   02,F
177D8:  RRCF   01,F
177DA:  RRCF   00,F
177DC:  RRCF   03,F
177DE:  RRCF   02,F
177E0:  RRCF   01,F
177E2:  RRCF   00,F
177E4:  RRCF   03,F
177E6:  RRCF   02,F
177E8:  RRCF   01,F
177EA:  RRCF   00,F
177EC:  RRCF   03,F
177EE:  RRCF   02,F
177F0:  RRCF   01,F
177F2:  RRCF   00,F
177F4:  RRCF   03,F
177F6:  RRCF   02,F
177F8:  RRCF   01,F
177FA:  RRCF   00,F
177FC:  MOVFF  00,3E3
17800:  MOVLB  3
17802:  MOVFF  01,3E4
.................... 
.................... 	soma_vreft = 0;
17806:  MOVLB  4
17808:  CLRF   x16
1780A:  CLRF   x15
1780C:  CLRF   x14
1780E:  CLRF   x13
.................... 	soma_vrefc = 0;
17810:  CLRF   x1A
17812:  CLRF   x19
17814:  CLRF   x18
17816:  CLRF   x17
.................... 	for(x = 0; x < NRO_AMOSTRAS; x++){
17818:  MOVLB  A
1781A:  CLRF   x4A
1781C:  MOVF   x4A,W
1781E:  SUBLW  3F
17820:  BNC   178C2
.................... 		soma_vreft += buf_tensao_t[x];
17822:  BCF    FD8.0
17824:  RLCF   x4A,W
17826:  CLRF   03
17828:  ADDLW  BA
1782A:  MOVWF  FE9
1782C:  MOVLW  06
1782E:  ADDWFC 03,W
17830:  MOVWF  FEA
17832:  MOVFF  FEC,03
17836:  MOVF   FED,F
17838:  MOVFF  FEF,00
1783C:  MOVFF  03,01
17840:  CLRF   02
17842:  CLRF   03
17844:  BTFSS  01.7
17846:  BRA    1784C
17848:  DECF   02,F
1784A:  DECF   03,F
1784C:  MOVLB  4
1784E:  MOVF   x13,W
17850:  ADDWF  00,F
17852:  MOVF   x14,W
17854:  ADDWFC 01,F
17856:  MOVF   x15,W
17858:  ADDWFC 02,F
1785A:  MOVF   x16,W
1785C:  ADDWFC 03,F
1785E:  MOVFF  03,416
17862:  MOVFF  02,415
17866:  MOVFF  01,414
1786A:  MOVFF  00,413
.................... 		soma_vrefc += buf_corrente_t[x];
1786E:  BCF    FD8.0
17870:  MOVLB  A
17872:  RLCF   x4A,W
17874:  CLRF   03
17876:  ADDLW  BE
17878:  MOVWF  FE9
1787A:  MOVLW  07
1787C:  ADDWFC 03,W
1787E:  MOVWF  FEA
17880:  MOVFF  FEC,03
17884:  MOVF   FED,F
17886:  MOVFF  FEF,00
1788A:  MOVFF  03,01
1788E:  CLRF   02
17890:  CLRF   03
17892:  BTFSS  01.7
17894:  BRA    1789A
17896:  DECF   02,F
17898:  DECF   03,F
1789A:  MOVLB  4
1789C:  MOVF   x17,W
1789E:  ADDWF  00,F
178A0:  MOVF   x18,W
178A2:  ADDWFC 01,F
178A4:  MOVF   x19,W
178A6:  ADDWFC 02,F
178A8:  MOVF   x1A,W
178AA:  ADDWFC 03,F
178AC:  MOVFF  03,41A
178B0:  MOVFF  02,419
178B4:  MOVFF  01,418
178B8:  MOVFF  00,417
178BC:  MOVLB  A
178BE:  INCF   x4A,F
178C0:  BRA    1781C
.................... 	}
.................... 	vreftt = (soma_vreft / NRO_AMOSTRAS);
178C2:  MOVLB  4
178C4:  RRCF   x16,W
178C6:  MOVWF  03
178C8:  RRCF   x15,W
178CA:  MOVWF  02
178CC:  RRCF   x14,W
178CE:  MOVWF  01
178D0:  RRCF   x13,W
178D2:  MOVWF  00
178D4:  RRCF   03,F
178D6:  RRCF   02,F
178D8:  RRCF   01,F
178DA:  RRCF   00,F
178DC:  RRCF   03,F
178DE:  RRCF   02,F
178E0:  RRCF   01,F
178E2:  RRCF   00,F
178E4:  RRCF   03,F
178E6:  RRCF   02,F
178E8:  RRCF   01,F
178EA:  RRCF   00,F
178EC:  RRCF   03,F
178EE:  RRCF   02,F
178F0:  RRCF   01,F
178F2:  RRCF   00,F
178F4:  RRCF   03,F
178F6:  RRCF   02,F
178F8:  RRCF   01,F
178FA:  RRCF   00,F
178FC:  MOVFF  00,3EB
17900:  MOVLB  3
17902:  MOVFF  01,3EC
.................... 	vrefct = (soma_vrefc / NRO_AMOSTRAS);
17906:  MOVLB  4
17908:  RRCF   x1A,W
1790A:  MOVWF  03
1790C:  RRCF   x19,W
1790E:  MOVWF  02
17910:  RRCF   x18,W
17912:  MOVWF  01
17914:  RRCF   x17,W
17916:  MOVWF  00
17918:  RRCF   03,F
1791A:  RRCF   02,F
1791C:  RRCF   01,F
1791E:  RRCF   00,F
17920:  RRCF   03,F
17922:  RRCF   02,F
17924:  RRCF   01,F
17926:  RRCF   00,F
17928:  RRCF   03,F
1792A:  RRCF   02,F
1792C:  RRCF   01,F
1792E:  RRCF   00,F
17930:  RRCF   03,F
17932:  RRCF   02,F
17934:  RRCF   01,F
17936:  RRCF   00,F
17938:  RRCF   03,F
1793A:  RRCF   02,F
1793C:  RRCF   01,F
1793E:  RRCF   00,F
17940:  MOVFF  00,3E5
17944:  MOVLB  3
17946:  MOVFF  01,3E6
1794A:  MOVLB  0
1794C:  GOTO   1C0DC (RETURN)
.................... }
.................... 
.................... int32 calcula_soma_efi(int32 soma, char tipo){
.................... 	float aux_f1;
.................... 
.................... 	aux_f1 = (float)(soma / NRO_AMOSTRAS);
*
1843A:  MOVLB  A
1843C:  RRCF   x4D,W
1843E:  MOVWF  03
18440:  RRCF   x4C,W
18442:  MOVWF  02
18444:  RRCF   x4B,W
18446:  MOVWF  01
18448:  RRCF   x4A,W
1844A:  MOVWF  00
1844C:  RRCF   03,F
1844E:  RRCF   02,F
18450:  RRCF   01,F
18452:  RRCF   00,F
18454:  RRCF   03,F
18456:  RRCF   02,F
18458:  RRCF   01,F
1845A:  RRCF   00,F
1845C:  RRCF   03,F
1845E:  RRCF   02,F
18460:  RRCF   01,F
18462:  RRCF   00,F
18464:  RRCF   03,F
18466:  RRCF   02,F
18468:  RRCF   01,F
1846A:  RRCF   00,F
1846C:  RRCF   03,F
1846E:  RRCF   02,F
18470:  RRCF   01,F
18472:  RRCF   00,F
18474:  MOVLW  03
18476:  ANDWF  03,F
18478:  MOVFF  03,A7C
1847C:  MOVFF  02,A7B
18480:  MOVFF  01,A7A
18484:  MOVFF  00,A79
18488:  MOVLB  0
1848A:  CALL   5438
1848E:  MOVFF  03,A52
18492:  MOVFF  02,A51
18496:  MOVFF  01,A50
1849A:  MOVFF  00,A4F
.................... 	aux_l1 = (int32)(sqrtx(aux_f1));
1849E:  MOVFF  A52,A75
184A2:  MOVFF  A51,A74
184A6:  MOVFF  A50,A73
184AA:  MOVFF  A4F,A72
184AE:  CALL   158EC
184B2:  MOVFF  03,A7C
184B6:  MOVFF  02,A7B
184BA:  MOVFF  01,A7A
184BE:  MOVFF  00,A79
184C2:  CALL   5470
184C6:  MOVFF  03,373
184CA:  MOVFF  02,372
184CE:  MOVFF  01,371
184D2:  MOVFF  00,370
.................... 	if (tipo == 'C'){
184D6:  MOVLB  A
184D8:  MOVF   x4E,W
184DA:  SUBLW  43
184DC:  BNZ   18590
.................... 		aux_l2 = valor_tc_fixo;
184DE:  MOVLB  3
184E0:  CLRF   x77
184E2:  CLRF   x76
184E4:  MOVLW  01
184E6:  MOVWF  x75
184E8:  MOVLW  F4
184EA:  MOVWF  x74
.................... 		return((int32)((aux_l1 * aux_l2) / 32)/5);	// Sensor Magmattec
184EC:  MOVFF  373,A75
184F0:  MOVFF  372,A74
184F4:  MOVFF  371,A73
184F8:  MOVFF  370,A72
184FC:  MOVFF  377,A79
18500:  MOVFF  376,A78
18504:  MOVFF  375,A77
18508:  MOVFF  374,A76
1850C:  MOVLB  0
1850E:  CALL   67FC
18512:  MOVFF  03,A56
18516:  MOVFF  02,A55
1851A:  MOVFF  01,A54
1851E:  MOVFF  00,A53
18522:  MOVLB  A
18524:  RRCF   03,W
18526:  MOVWF  03
18528:  RRCF   02,W
1852A:  MOVWF  02
1852C:  RRCF   01,W
1852E:  MOVWF  01
18530:  RRCF   00,W
18532:  MOVWF  00
18534:  RRCF   03,F
18536:  RRCF   02,F
18538:  RRCF   01,F
1853A:  RRCF   00,F
1853C:  RRCF   03,F
1853E:  RRCF   02,F
18540:  RRCF   01,F
18542:  RRCF   00,F
18544:  RRCF   03,F
18546:  RRCF   02,F
18548:  RRCF   01,F
1854A:  RRCF   00,F
1854C:  RRCF   03,F
1854E:  RRCF   02,F
18550:  RRCF   01,F
18552:  RRCF   00,F
18554:  MOVLW  07
18556:  ANDWF  03,F
18558:  MOVFF  03,A56
1855C:  MOVFF  02,A55
18560:  MOVFF  01,A54
18564:  MOVFF  00,A53
18568:  BCF    FD8.1
1856A:  MOVFF  03,A73
1856E:  MOVFF  02,A72
18572:  MOVFF  01,A71
18576:  MOVFF  00,A70
1857A:  CLRF   x77
1857C:  CLRF   x76
1857E:  CLRF   x75
18580:  MOVLW  05
18582:  MOVWF  x74
18584:  MOVLB  0
18586:  CALL   6858
1858A:  BRA    185E8
.................... 	}
1858C:  BRA    185E8
1858E:  MOVLB  A
.................... 	else{
.................... 		return((int32)((aux_l1 * 32)/2));	
18590:  MOVLB  3
18592:  RLCF   x70,W
18594:  MOVLB  A
18596:  MOVWF  x53
18598:  MOVLB  3
1859A:  RLCF   x71,W
1859C:  MOVLB  A
1859E:  MOVWF  x54
185A0:  MOVLB  3
185A2:  RLCF   x72,W
185A4:  MOVLB  A
185A6:  MOVWF  x55
185A8:  MOVLB  3
185AA:  RLCF   x73,W
185AC:  MOVLB  A
185AE:  MOVWF  x56
185B0:  RLCF   x53,F
185B2:  RLCF   x54,F
185B4:  RLCF   x55,F
185B6:  RLCF   x56,F
185B8:  RLCF   x53,F
185BA:  RLCF   x54,F
185BC:  RLCF   x55,F
185BE:  RLCF   x56,F
185C0:  RLCF   x53,F
185C2:  RLCF   x54,F
185C4:  RLCF   x55,F
185C6:  RLCF   x56,F
185C8:  RLCF   x53,F
185CA:  RLCF   x54,F
185CC:  RLCF   x55,F
185CE:  RLCF   x56,F
185D0:  MOVLW  E0
185D2:  ANDWF  x53,F
185D4:  BCF    FD8.0
185D6:  RRCF   x56,W
185D8:  MOVWF  03
185DA:  RRCF   x55,W
185DC:  MOVWF  02
185DE:  RRCF   x54,W
185E0:  MOVWF  01
185E2:  RRCF   x53,W
185E4:  MOVWF  00
185E6:  MOVLB  0
.................... 	}
185E8:  RETURN 0
.................... }
.................... 
.................... word calcula_eficaz(int32 soma_efi, signed word off_set, char tipo){
.................... 	aux_l1 = soma_efi >> nro_desloca;
185EA:  BCF    FD8.0
185EC:  MOVLB  A
185EE:  RRCF   x4D,W
185F0:  MOVLB  3
185F2:  MOVWF  x73
185F4:  MOVLB  A
185F6:  RRCF   x4C,W
185F8:  MOVLB  3
185FA:  MOVWF  x72
185FC:  MOVLB  A
185FE:  RRCF   x4B,W
18600:  MOVLB  3
18602:  MOVWF  x71
18604:  MOVLB  A
18606:  RRCF   x4A,W
18608:  MOVLB  3
1860A:  MOVWF  x70
.................... 	aux_l2 = (signed word)(1024 + off_set);
1860C:  MOVLB  A
1860E:  MOVFF  A4E,00
18612:  MOVLW  04
18614:  ADDWF  x4F,W
18616:  MOVWF  03
18618:  MOVWF  01
1861A:  CLRF   02
1861C:  CLRF   03
1861E:  BTFSS  FE8.7
18620:  BRA    18626
18622:  DECF   02,F
18624:  DECF   03,F
18626:  MOVFF  03,377
1862A:  MOVFF  02,376
1862E:  MOVFF  01,375
18632:  MOVFF  00,374
.................... 	aux_l2 = (int32)(aux_l2 * aux_l1);
18636:  MOVFF  377,A75
1863A:  MOVFF  376,A74
1863E:  MOVFF  375,A73
18642:  MOVFF  374,A72
18646:  MOVFF  373,A79
1864A:  MOVFF  372,A78
1864E:  MOVFF  371,A77
18652:  MOVFF  370,A76
18656:  MOVLB  0
18658:  CALL   67FC
1865C:  MOVFF  03,377
18660:  MOVFF  02,376
18664:  MOVFF  01,375
18668:  MOVFF  00,374
.................... 	return(word)(aux_l2 / 1024);
1866C:  CLRF   03
1866E:  MOVLB  3
18670:  RRCF   x77,W
18672:  MOVWF  02
18674:  RRCF   x76,W
18676:  MOVWF  01
18678:  RRCF   x75,W
1867A:  MOVWF  00
1867C:  RRCF   02,F
1867E:  RRCF   01,F
18680:  RRCF   00,F
18682:  MOVLW  3F
18684:  ANDWF  02,F
18686:  MOVFF  01,02
1868A:  MOVFF  00,01
1868E:  MOVLB  0
18690:  RETURN 0
.................... }
.................... 
.................... void le_off_set_kvar(void){
.................... 	if (tipo_ligacao == 2){
*
17950:  MOVLB  4
17952:  MOVF   xC7,W
17954:  SUBLW  02
17956:  BNZ   1795E
.................... 		off_set_kvar = NRO_AMOSTRAS - off_cor_delta + (NRO_AMOSTRAS / 4);
17958:  MOVLW  40
1795A:  MOVWF  xBA
.................... 	}
1795C:  BRA    17964
.................... 	else{
.................... 		off_set_kvar = off_cor_r + (NRO_AMOSTRAS / 4);
1795E:  MOVLW  10
17960:  ADDWF  xB7,W
17962:  MOVWF  xBA
.................... 	}
17964:  MOVLB  0
17966:  GOTO   17A60 (RETURN)
.................... }
.................... 
.................... void mul_buffers_ten(void){
.................... 	for (aux_calc = 0; aux_calc < NRO_AMOSTRAS; aux_calc++){
.................... 		#if (com_modbus == true)
.................... 			trata_modbus();
.................... 		#endif
.................... 		#if (home_system == true)
.................... 			trata_hsnet();
.................... 		#endif
.................... 	// fase R
.................... 		aux_sl1 = (signed int32)(buf_tensao_r[aux_calc] - 2048);
.................... 		soma_tr += (signed int32)(aux_sl1 * aux_sl1);
.................... 	// fase S
.................... 		aux_sl1 = (signed int32)(buf_tensao_s[aux_calc] - 2048);
.................... 		soma_ts += (signed int32)(aux_sl1 * aux_sl1);
.................... 	// fase T
.................... 		aux_sl1 = (signed int32)(buf_tensao_t[aux_calc] - 2048);
.................... 		soma_tt += (signed int32)(aux_sl1 * aux_sl1);
.................... 	}
.................... }
.................... 
.................... void mul_buffers_ten_cor(void){
.................... 	//calcula_vref();
.................... 	if (modo_funca == 1){
*
17A54:  MOVLB  4
17A56:  DECFSZ xA7,W
17A58:  GOTO   1828C
.................... 		le_off_set_kvar();
17A5C:  MOVLB  0
17A5E:  BRA    17950
.................... 		vreftr = 2048;
17A60:  MOVLW  08
17A62:  MOVLB  3
17A64:  MOVWF  xE8
17A66:  CLRF   xE7
.................... 		vrefcr = 2048;
17A68:  MOVWF  xE2
17A6A:  CLRF   xE1
.................... 		for (aux_calc = 0; aux_calc < NRO_AMOSTRAS; aux_calc++){
17A6C:  CLRF   xB5
17A6E:  MOVF   xB5,W
17A70:  SUBLW  3F
17A72:  BTFSS  FD8.0
17A74:  GOTO   18288
.................... 			#if (com_modbus == true)
.................... 				trata_modbus();
17A78:  MOVLB  0
17A7A:  CALL   DEBA
.................... 			#endif
.................... 			#if (home_system == true)
.................... 				trata_hsnet();
.................... 			#endif
.................... 
.................... // fase R
.................... 			aux_sl1 = (signed int32)(buf_tensao_r[aux_calc] - 2048);
17A7E:  BCF    FD8.0
17A80:  MOVLB  3
17A82:  RLCF   xB5,W
17A84:  CLRF   03
17A86:  ADDLW  34
17A88:  MOVWF  FE9
17A8A:  MOVLW  05
17A8C:  ADDWFC 03,W
17A8E:  MOVWF  FEA
17A90:  MOVFF  FEC,A4B
17A94:  MOVF   FED,F
17A96:  MOVFF  FEF,A4A
17A9A:  MOVLW  00
17A9C:  MOVLB  A
17A9E:  SUBWF  x4A,W
17AA0:  MOVWF  00
17AA2:  MOVLW  08
17AA4:  SUBWFB x4B,W
17AA6:  MOVWF  03
17AA8:  MOVFF  00,3C9
17AAC:  MOVLB  3
17AAE:  MOVWF  xCA
17AB0:  CLRF   xCB
17AB2:  CLRF   xCC
17AB4:  BTFSS  xCA.7
17AB6:  BRA    17ABC
17AB8:  DECF   xCB,F
17ABA:  DECF   xCC,F
.................... 			if (aux_calc < (NRO_AMOSTRAS-1)){
17ABC:  MOVF   xB5,W
17ABE:  SUBLW  3E
17AC0:  BNC   17B0C
.................... 				aux_sl3 = (signed int32)(buf_tensao_r[aux_calc+1] - vreftr);
17AC2:  MOVLW  01
17AC4:  ADDWF  xB5,W
17AC6:  MOVWF  00
17AC8:  BCF    FD8.0
17ACA:  RLCF   00,F
17ACC:  MOVF   00,W
17ACE:  CLRF   03
17AD0:  ADDLW  34
17AD2:  MOVWF  FE9
17AD4:  MOVLW  05
17AD6:  ADDWFC 03,W
17AD8:  MOVWF  FEA
17ADA:  MOVFF  FEC,A4B
17ADE:  MOVF   FED,F
17AE0:  MOVFF  FEF,A4A
17AE4:  MOVF   xE7,W
17AE6:  MOVLB  A
17AE8:  SUBWF  x4A,W
17AEA:  MOVWF  00
17AEC:  MOVLB  3
17AEE:  MOVF   xE8,W
17AF0:  MOVLB  A
17AF2:  SUBWFB x4B,W
17AF4:  MOVWF  03
17AF6:  MOVFF  00,3D1
17AFA:  MOVLB  3
17AFC:  MOVWF  xD2
17AFE:  CLRF   xD3
17B00:  CLRF   xD4
17B02:  BTFSS  xD2.7
17B04:  BRA    17B0A
17B06:  DECF   xD3,F
17B08:  DECF   xD4,F
.................... 			}
17B0A:  BRA    17B2E
.................... 			else{
.................... 				aux_sl3 = (signed int32)(buf_tensao_r[0] - 2048);
17B0C:  MOVLW  00
17B0E:  MOVLB  5
17B10:  SUBWF  x34,W
17B12:  MOVWF  00
17B14:  MOVLW  08
17B16:  SUBWFB x35,W
17B18:  MOVWF  03
17B1A:  MOVFF  00,3D1
17B1E:  MOVLB  3
17B20:  MOVWF  xD2
17B22:  CLRF   xD3
17B24:  CLRF   xD4
17B26:  BTFSS  xD2.7
17B28:  BRA    17B2E
17B2A:  DECF   xD3,F
17B2C:  DECF   xD4,F
.................... 			}
.................... 			aux_sl4 = (signed int32)(buf_tensao_r[off_set_kvar] - 2048);
17B2E:  BCF    FD8.0
17B30:  MOVLB  4
17B32:  RLCF   xBA,W
17B34:  CLRF   03
17B36:  ADDLW  34
17B38:  MOVWF  FE9
17B3A:  MOVLW  05
17B3C:  ADDWFC 03,W
17B3E:  MOVWF  FEA
17B40:  MOVFF  FEC,A4B
17B44:  MOVF   FED,F
17B46:  MOVFF  FEF,A4A
17B4A:  MOVLW  00
17B4C:  MOVLB  A
17B4E:  SUBWF  x4A,W
17B50:  MOVWF  00
17B52:  MOVLW  08
17B54:  SUBWFB x4B,W
17B56:  MOVWF  03
17B58:  MOVFF  00,3D5
17B5C:  MOVLB  3
17B5E:  MOVWF  xD6
17B60:  CLRF   xD7
17B62:  CLRF   xD8
17B64:  BTFSS  xD6.7
17B66:  BRA    17B6C
17B68:  DECF   xD7,F
17B6A:  DECF   xD8,F
.................... 			aux_sl2 = (signed int32)(buf_corrente_r[aux_calc] - 2048);
17B6C:  BCF    FD8.0
17B6E:  RLCF   xB5,W
17B70:  CLRF   03
17B72:  ADDLW  B6
17B74:  MOVWF  FE9
17B76:  MOVLW  05
17B78:  ADDWFC 03,W
17B7A:  MOVWF  FEA
17B7C:  MOVFF  FEC,A4B
17B80:  MOVF   FED,F
17B82:  MOVFF  FEF,A4A
17B86:  MOVLW  00
17B88:  MOVLB  A
17B8A:  SUBWF  x4A,W
17B8C:  MOVWF  00
17B8E:  MOVLW  08
17B90:  SUBWFB x4B,W
17B92:  MOVWF  03
17B94:  MOVFF  00,3CD
17B98:  MOVLB  3
17B9A:  MOVWF  xCE
17B9C:  CLRF   xCF
17B9E:  CLRF   xD0
17BA0:  BTFSS  xCE.7
17BA2:  BRA    17BA8
17BA4:  DECF   xCF,F
17BA6:  DECF   xD0,F
.................... 			aux_sl5 = aux_sl2;					// soma corrente de neutro
17BA8:  MOVFF  3D0,3DC
17BAC:  MOVFF  3CF,3DB
17BB0:  MOVFF  3CE,3DA
17BB4:  MOVFF  3CD,3D9
.................... 
.................... 			soma_tr += (signed int32)(aux_sl1 * aux_sl1);
17BB8:  MOVFF  3CC,A75
17BBC:  MOVFF  3CB,A74
17BC0:  MOVFF  3CA,A73
17BC4:  MOVFF  3C9,A72
17BC8:  MOVFF  3CC,A79
17BCC:  MOVFF  3CB,A78
17BD0:  MOVFF  3CA,A77
17BD4:  MOVFF  3C9,A76
17BD8:  MOVLB  0
17BDA:  CALL   67FC
17BDE:  MOVLB  2
17BE0:  MOVF   x22,W
17BE2:  ADDWF  00,F
17BE4:  MOVF   x23,W
17BE6:  ADDWFC 01,F
17BE8:  MOVF   x24,W
17BEA:  ADDWFC 02,F
17BEC:  MOVF   x25,W
17BEE:  ADDWFC 03,F
17BF0:  MOVFF  03,225
17BF4:  MOVFF  02,224
17BF8:  MOVFF  01,223
17BFC:  MOVFF  00,222
.................... 			soma_cr += (signed int32)(aux_sl2 * aux_sl2);
17C00:  MOVFF  3D0,A75
17C04:  MOVFF  3CF,A74
17C08:  MOVFF  3CE,A73
17C0C:  MOVFF  3CD,A72
17C10:  MOVFF  3D0,A79
17C14:  MOVFF  3CF,A78
17C18:  MOVFF  3CE,A77
17C1C:  MOVFF  3CD,A76
17C20:  MOVLB  0
17C22:  CALL   67FC
17C26:  MOVLB  2
17C28:  MOVF   x1E,W
17C2A:  ADDWF  00,F
17C2C:  MOVF   x1F,W
17C2E:  ADDWFC 01,F
17C30:  MOVF   x20,W
17C32:  ADDWFC 02,F
17C34:  MOVF   x21,W
17C36:  ADDWFC 03,F
17C38:  MOVFF  03,221
17C3C:  MOVFF  02,220
17C40:  MOVFF  01,21F
17C44:  MOVFF  00,21E
.................... 			if (cor_baixa_r == 0){
17C48:  BTFSC  24.1
17C4A:  BRA    17D10
.................... 				aux_sl1 = (aux_sl1 + aux_sl3) / 2;
17C4C:  MOVLB  3
17C4E:  MOVF   xD1,W
17C50:  ADDWF  xC9,W
17C52:  MOVLB  A
17C54:  MOVWF  x4A
17C56:  MOVLB  3
17C58:  MOVF   xD2,W
17C5A:  ADDWFC xCA,W
17C5C:  MOVLB  A
17C5E:  MOVWF  x4B
17C60:  MOVLB  3
17C62:  MOVF   xD3,W
17C64:  ADDWFC xCB,W
17C66:  MOVLB  A
17C68:  MOVWF  x4C
17C6A:  MOVLB  3
17C6C:  MOVF   xD4,W
17C6E:  ADDWFC xCC,W
17C70:  MOVLB  A
17C72:  MOVWF  x4D
17C74:  BCF    FD8.1
17C76:  MOVWF  x71
17C78:  MOVFF  A4C,A70
17C7C:  MOVFF  A4B,A6F
17C80:  MOVFF  A4A,A6E
17C84:  CLRF   x75
17C86:  CLRF   x74
17C88:  CLRF   x73
17C8A:  MOVLW  02
17C8C:  MOVWF  x72
17C8E:  MOVLB  0
17C90:  RCALL  1796A
17C92:  MOVFF  03,3CC
17C96:  MOVFF  02,3CB
17C9A:  MOVFF  01,3CA
17C9E:  MOVFF  00,3C9
.................... 				soma_pr += (signed int32)(aux_sl1 * aux_sl2);
17CA2:  MOVFF  3CC,A75
17CA6:  MOVFF  3CB,A74
17CAA:  MOVFF  3CA,A73
17CAE:  MOVFF  3C9,A72
17CB2:  MOVFF  3D0,A79
17CB6:  MOVFF  3CF,A78
17CBA:  MOVFF  3CE,A77
17CBE:  MOVFF  3CD,A76
17CC2:  CALL   67FC
17CC6:  MOVF   00,W
17CC8:  MOVLB  2
17CCA:  ADDWF  x26,F
17CCC:  MOVF   01,W
17CCE:  ADDWFC x27,F
17CD0:  MOVF   02,W
17CD2:  ADDWFC x28,F
17CD4:  MOVF   03,W
17CD6:  ADDWFC x29,F
.................... 				soma_kvar_r += (signed int32)(aux_sl4 * aux_sl2);
17CD8:  MOVFF  3D8,A75
17CDC:  MOVFF  3D7,A74
17CE0:  MOVFF  3D6,A73
17CE4:  MOVFF  3D5,A72
17CE8:  MOVFF  3D0,A79
17CEC:  MOVFF  3CF,A78
17CF0:  MOVFF  3CE,A77
17CF4:  MOVFF  3CD,A76
17CF8:  MOVLB  0
17CFA:  CALL   67FC
17CFE:  MOVF   00,W
17D00:  MOVLB  2
17D02:  ADDWF  x32,F
17D04:  MOVF   01,W
17D06:  ADDWFC x33,F
17D08:  MOVF   02,W
17D0A:  ADDWFC x34,F
17D0C:  MOVF   03,W
17D0E:  ADDWFC x35,F
.................... 			}
.................... 					
.................... // fase S
.................... 			aux_sl1 = (signed int32)(buf_tensao_s[aux_calc]- 2048);
17D10:  BCF    FD8.0
17D12:  MOVLB  3
17D14:  RLCF   xB5,W
17D16:  CLRF   03
17D18:  ADDLW  38
17D1A:  MOVWF  FE9
17D1C:  MOVLW  06
17D1E:  ADDWFC 03,W
17D20:  MOVWF  FEA
17D22:  MOVFF  FEC,A4B
17D26:  MOVF   FED,F
17D28:  MOVFF  FEF,A4A
17D2C:  MOVLW  00
17D2E:  MOVLB  A
17D30:  SUBWF  x4A,W
17D32:  MOVWF  00
17D34:  MOVLW  08
17D36:  SUBWFB x4B,W
17D38:  MOVWF  03
17D3A:  MOVFF  00,3C9
17D3E:  MOVLB  3
17D40:  MOVWF  xCA
17D42:  CLRF   xCB
17D44:  CLRF   xCC
17D46:  BTFSS  xCA.7
17D48:  BRA    17D4E
17D4A:  DECF   xCB,F
17D4C:  DECF   xCC,F
.................... 			if (aux_calc < (NRO_AMOSTRAS-1)){
17D4E:  MOVF   xB5,W
17D50:  SUBLW  3E
17D52:  BNC   17D9A
.................... 				aux_sl3 = (signed int32)(buf_tensao_s[aux_calc+1] - 2048);
17D54:  MOVLW  01
17D56:  ADDWF  xB5,W
17D58:  MOVWF  00
17D5A:  BCF    FD8.0
17D5C:  RLCF   00,F
17D5E:  MOVF   00,W
17D60:  CLRF   03
17D62:  ADDLW  38
17D64:  MOVWF  FE9
17D66:  MOVLW  06
17D68:  ADDWFC 03,W
17D6A:  MOVWF  FEA
17D6C:  MOVFF  FEC,A4B
17D70:  MOVF   FED,F
17D72:  MOVFF  FEF,A4A
17D76:  MOVLW  00
17D78:  MOVLB  A
17D7A:  SUBWF  x4A,W
17D7C:  MOVWF  00
17D7E:  MOVLW  08
17D80:  SUBWFB x4B,W
17D82:  MOVWF  03
17D84:  MOVFF  00,3D1
17D88:  MOVLB  3
17D8A:  MOVWF  xD2
17D8C:  CLRF   xD3
17D8E:  CLRF   xD4
17D90:  BTFSS  xD2.7
17D92:  BRA    17D98
17D94:  DECF   xD3,F
17D96:  DECF   xD4,F
.................... 			}
17D98:  BRA    17DBC
.................... 			else{
.................... 				aux_sl3 = (signed int32)(buf_tensao_s[0] - 2048);
17D9A:  MOVLW  00
17D9C:  MOVLB  6
17D9E:  SUBWF  x38,W
17DA0:  MOVWF  00
17DA2:  MOVLW  08
17DA4:  SUBWFB x39,W
17DA6:  MOVWF  03
17DA8:  MOVFF  00,3D1
17DAC:  MOVLB  3
17DAE:  MOVWF  xD2
17DB0:  CLRF   xD3
17DB2:  CLRF   xD4
17DB4:  BTFSS  xD2.7
17DB6:  BRA    17DBC
17DB8:  DECF   xD3,F
17DBA:  DECF   xD4,F
.................... 			}
.................... 			aux_sl4 = (signed int32)(buf_tensao_s[off_set_kvar] - 2048);
17DBC:  BCF    FD8.0
17DBE:  MOVLB  4
17DC0:  RLCF   xBA,W
17DC2:  CLRF   03
17DC4:  ADDLW  38
17DC6:  MOVWF  FE9
17DC8:  MOVLW  06
17DCA:  ADDWFC 03,W
17DCC:  MOVWF  FEA
17DCE:  MOVFF  FEC,A4B
17DD2:  MOVF   FED,F
17DD4:  MOVFF  FEF,A4A
17DD8:  MOVLW  00
17DDA:  MOVLB  A
17DDC:  SUBWF  x4A,W
17DDE:  MOVWF  00
17DE0:  MOVLW  08
17DE2:  SUBWFB x4B,W
17DE4:  MOVWF  03
17DE6:  MOVFF  00,3D5
17DEA:  MOVLB  3
17DEC:  MOVWF  xD6
17DEE:  CLRF   xD7
17DF0:  CLRF   xD8
17DF2:  BTFSS  xD6.7
17DF4:  BRA    17DFA
17DF6:  DECF   xD7,F
17DF8:  DECF   xD8,F
.................... 			aux_sl2 = (signed int32)(buf_corrente_s[aux_calc] - 2048);
17DFA:  BCF    FD8.0
17DFC:  RLCF   xB5,W
17DFE:  CLRF   03
17E00:  ADDLW  3C
17E02:  MOVWF  FE9
17E04:  MOVLW  07
17E06:  ADDWFC 03,W
17E08:  MOVWF  FEA
17E0A:  MOVFF  FEC,A4B
17E0E:  MOVF   FED,F
17E10:  MOVFF  FEF,A4A
17E14:  MOVLW  00
17E16:  MOVLB  A
17E18:  SUBWF  x4A,W
17E1A:  MOVWF  00
17E1C:  MOVLW  08
17E1E:  SUBWFB x4B,W
17E20:  MOVWF  03
17E22:  MOVFF  00,3CD
17E26:  MOVLB  3
17E28:  MOVWF  xCE
17E2A:  CLRF   xCF
17E2C:  CLRF   xD0
17E2E:  BTFSS  xCE.7
17E30:  BRA    17E36
17E32:  DECF   xCF,F
17E34:  DECF   xD0,F
.................... 			aux_sl5 += aux_sl2;					// soma corrente de neutro
17E36:  MOVF   xCD,W
17E38:  ADDWF  xD9,F
17E3A:  MOVF   xCE,W
17E3C:  ADDWFC xDA,F
17E3E:  MOVF   xCF,W
17E40:  ADDWFC xDB,F
17E42:  MOVF   xD0,W
17E44:  ADDWFC xDC,F
.................... 			
.................... 			soma_ts += (signed int32)(aux_sl1 * aux_sl1);
17E46:  MOVFF  3CC,A75
17E4A:  MOVFF  3CB,A74
17E4E:  MOVFF  3CA,A73
17E52:  MOVFF  3C9,A72
17E56:  MOVFF  3CC,A79
17E5A:  MOVFF  3CB,A78
17E5E:  MOVFF  3CA,A77
17E62:  MOVFF  3C9,A76
17E66:  MOVLB  0
17E68:  CALL   67FC
17E6C:  MOVLB  2
17E6E:  MOVF   xB4,W
17E70:  ADDWF  00,F
17E72:  MOVF   xB5,W
17E74:  ADDWFC 01,F
17E76:  MOVF   xB6,W
17E78:  ADDWFC 02,F
17E7A:  MOVF   xB7,W
17E7C:  ADDWFC 03,F
17E7E:  MOVFF  03,2B7
17E82:  MOVFF  02,2B6
17E86:  MOVFF  01,2B5
17E8A:  MOVFF  00,2B4
.................... 			soma_cs += (signed int32)(aux_sl2 * aux_sl2);
17E8E:  MOVFF  3D0,A75
17E92:  MOVFF  3CF,A74
17E96:  MOVFF  3CE,A73
17E9A:  MOVFF  3CD,A72
17E9E:  MOVFF  3D0,A79
17EA2:  MOVFF  3CF,A78
17EA6:  MOVFF  3CE,A77
17EAA:  MOVFF  3CD,A76
17EAE:  MOVLB  0
17EB0:  CALL   67FC
17EB4:  MOVLB  2
17EB6:  MOVF   xB8,W
17EB8:  ADDWF  00,F
17EBA:  MOVF   xB9,W
17EBC:  ADDWFC 01,F
17EBE:  MOVF   xBA,W
17EC0:  ADDWFC 02,F
17EC2:  MOVF   xBB,W
17EC4:  ADDWFC 03,F
17EC6:  MOVFF  03,2BB
17ECA:  MOVFF  02,2BA
17ECE:  MOVFF  01,2B9
17ED2:  MOVFF  00,2B8
.................... 			if (cor_baixa_s == 0){
17ED6:  BTFSC  28.7
17ED8:  BRA    17F9E
.................... 				aux_sl1 = (aux_sl1 + aux_sl3) / 2;
17EDA:  MOVLB  3
17EDC:  MOVF   xD1,W
17EDE:  ADDWF  xC9,W
17EE0:  MOVLB  A
17EE2:  MOVWF  x4A
17EE4:  MOVLB  3
17EE6:  MOVF   xD2,W
17EE8:  ADDWFC xCA,W
17EEA:  MOVLB  A
17EEC:  MOVWF  x4B
17EEE:  MOVLB  3
17EF0:  MOVF   xD3,W
17EF2:  ADDWFC xCB,W
17EF4:  MOVLB  A
17EF6:  MOVWF  x4C
17EF8:  MOVLB  3
17EFA:  MOVF   xD4,W
17EFC:  ADDWFC xCC,W
17EFE:  MOVLB  A
17F00:  MOVWF  x4D
17F02:  BCF    FD8.1
17F04:  MOVWF  x71
17F06:  MOVFF  A4C,A70
17F0A:  MOVFF  A4B,A6F
17F0E:  MOVFF  A4A,A6E
17F12:  CLRF   x75
17F14:  CLRF   x74
17F16:  CLRF   x73
17F18:  MOVLW  02
17F1A:  MOVWF  x72
17F1C:  MOVLB  0
17F1E:  RCALL  1796A
17F20:  MOVFF  03,3CC
17F24:  MOVFF  02,3CB
17F28:  MOVFF  01,3CA
17F2C:  MOVFF  00,3C9
.................... 				soma_ps += (signed int32)(aux_sl1 * aux_sl2);
17F30:  MOVFF  3CC,A75
17F34:  MOVFF  3CB,A74
17F38:  MOVFF  3CA,A73
17F3C:  MOVFF  3C9,A72
17F40:  MOVFF  3D0,A79
17F44:  MOVFF  3CF,A78
17F48:  MOVFF  3CE,A77
17F4C:  MOVFF  3CD,A76
17F50:  CALL   67FC
17F54:  MOVF   00,W
17F56:  MOVLB  2
17F58:  ADDWF  xBC,F
17F5A:  MOVF   01,W
17F5C:  ADDWFC xBD,F
17F5E:  MOVF   02,W
17F60:  ADDWFC xBE,F
17F62:  MOVF   03,W
17F64:  ADDWFC xBF,F
.................... 				soma_kvar_s += (signed int32)(aux_sl4 * aux_sl2);
17F66:  MOVFF  3D8,A75
17F6A:  MOVFF  3D7,A74
17F6E:  MOVFF  3D6,A73
17F72:  MOVFF  3D5,A72
17F76:  MOVFF  3D0,A79
17F7A:  MOVFF  3CF,A78
17F7E:  MOVFF  3CE,A77
17F82:  MOVFF  3CD,A76
17F86:  MOVLB  0
17F88:  CALL   67FC
17F8C:  MOVF   00,W
17F8E:  MOVLB  2
17F90:  ADDWF  xC8,F
17F92:  MOVF   01,W
17F94:  ADDWFC xC9,F
17F96:  MOVF   02,W
17F98:  ADDWFC xCA,F
17F9A:  MOVF   03,W
17F9C:  ADDWFC xCB,F
.................... 			}
.................... // fase T
.................... 			aux_sl1 = (signed int32)(buf_tensao_t[aux_calc] - 2048);
17F9E:  BCF    FD8.0
17FA0:  MOVLB  3
17FA2:  RLCF   xB5,W
17FA4:  CLRF   03
17FA6:  ADDLW  BA
17FA8:  MOVWF  FE9
17FAA:  MOVLW  06
17FAC:  ADDWFC 03,W
17FAE:  MOVWF  FEA
17FB0:  MOVFF  FEC,A4B
17FB4:  MOVF   FED,F
17FB6:  MOVFF  FEF,A4A
17FBA:  MOVLW  00
17FBC:  MOVLB  A
17FBE:  SUBWF  x4A,W
17FC0:  MOVWF  00
17FC2:  MOVLW  08
17FC4:  SUBWFB x4B,W
17FC6:  MOVWF  03
17FC8:  MOVFF  00,3C9
17FCC:  MOVLB  3
17FCE:  MOVWF  xCA
17FD0:  CLRF   xCB
17FD2:  CLRF   xCC
17FD4:  BTFSS  xCA.7
17FD6:  BRA    17FDC
17FD8:  DECF   xCB,F
17FDA:  DECF   xCC,F
.................... 			if (aux_calc < (NRO_AMOSTRAS-1)){
17FDC:  MOVF   xB5,W
17FDE:  SUBLW  3E
17FE0:  BNC   18028
.................... 				aux_sl3 = (signed int32)(buf_tensao_t[aux_calc+1] - 2048);
17FE2:  MOVLW  01
17FE4:  ADDWF  xB5,W
17FE6:  MOVWF  00
17FE8:  BCF    FD8.0
17FEA:  RLCF   00,F
17FEC:  MOVF   00,W
17FEE:  CLRF   03
17FF0:  ADDLW  BA
17FF2:  MOVWF  FE9
17FF4:  MOVLW  06
17FF6:  ADDWFC 03,W
17FF8:  MOVWF  FEA
17FFA:  MOVFF  FEC,A4B
17FFE:  MOVF   FED,F
18000:  MOVFF  FEF,A4A
18004:  MOVLW  00
18006:  MOVLB  A
18008:  SUBWF  x4A,W
1800A:  MOVWF  00
1800C:  MOVLW  08
1800E:  SUBWFB x4B,W
18010:  MOVWF  03
18012:  MOVFF  00,3D1
18016:  MOVLB  3
18018:  MOVWF  xD2
1801A:  CLRF   xD3
1801C:  CLRF   xD4
1801E:  BTFSS  xD2.7
18020:  BRA    18026
18022:  DECF   xD3,F
18024:  DECF   xD4,F
.................... 			}
18026:  BRA    1804A
.................... 			else{
.................... 				aux_sl3 = (signed int32)(buf_tensao_t[0] - 2048);
18028:  MOVLW  00
1802A:  MOVLB  6
1802C:  SUBWF  xBA,W
1802E:  MOVWF  00
18030:  MOVLW  08
18032:  SUBWFB xBB,W
18034:  MOVWF  03
18036:  MOVFF  00,3D1
1803A:  MOVLB  3
1803C:  MOVWF  xD2
1803E:  CLRF   xD3
18040:  CLRF   xD4
18042:  BTFSS  xD2.7
18044:  BRA    1804A
18046:  DECF   xD3,F
18048:  DECF   xD4,F
.................... 			}
.................... 			aux_sl4 = (signed int32)(buf_tensao_t[off_set_kvar] - 2048);
1804A:  BCF    FD8.0
1804C:  MOVLB  4
1804E:  RLCF   xBA,W
18050:  CLRF   03
18052:  ADDLW  BA
18054:  MOVWF  FE9
18056:  MOVLW  06
18058:  ADDWFC 03,W
1805A:  MOVWF  FEA
1805C:  MOVFF  FEC,A4B
18060:  MOVF   FED,F
18062:  MOVFF  FEF,A4A
18066:  MOVLW  00
18068:  MOVLB  A
1806A:  SUBWF  x4A,W
1806C:  MOVWF  00
1806E:  MOVLW  08
18070:  SUBWFB x4B,W
18072:  MOVWF  03
18074:  MOVFF  00,3D5
18078:  MOVLB  3
1807A:  MOVWF  xD6
1807C:  CLRF   xD7
1807E:  CLRF   xD8
18080:  BTFSS  xD6.7
18082:  BRA    18088
18084:  DECF   xD7,F
18086:  DECF   xD8,F
.................... 			aux_sl2 = (signed int32)(buf_corrente_t[aux_calc]- 2048);
18088:  BCF    FD8.0
1808A:  RLCF   xB5,W
1808C:  CLRF   03
1808E:  ADDLW  BE
18090:  MOVWF  FE9
18092:  MOVLW  07
18094:  ADDWFC 03,W
18096:  MOVWF  FEA
18098:  MOVFF  FEC,A4B
1809C:  MOVF   FED,F
1809E:  MOVFF  FEF,A4A
180A2:  MOVLW  00
180A4:  MOVLB  A
180A6:  SUBWF  x4A,W
180A8:  MOVWF  00
180AA:  MOVLW  08
180AC:  SUBWFB x4B,W
180AE:  MOVWF  03
180B0:  MOVFF  00,3CD
180B4:  MOVLB  3
180B6:  MOVWF  xCE
180B8:  CLRF   xCF
180BA:  CLRF   xD0
180BC:  BTFSS  xCE.7
180BE:  BRA    180C4
180C0:  DECF   xCF,F
180C2:  DECF   xD0,F
.................... 			aux_sl5 += aux_sl2;					// soma corrente de neutro
180C4:  MOVF   xCD,W
180C6:  ADDWF  xD9,F
180C8:  MOVF   xCE,W
180CA:  ADDWFC xDA,F
180CC:  MOVF   xCF,W
180CE:  ADDWFC xDB,F
180D0:  MOVF   xD0,W
180D2:  ADDWFC xDC,F
.................... 			
.................... 			soma_tt += (signed int32)(aux_sl1 * aux_sl1);
180D4:  MOVFF  3CC,A75
180D8:  MOVFF  3CB,A74
180DC:  MOVFF  3CA,A73
180E0:  MOVFF  3C9,A72
180E4:  MOVFF  3CC,A79
180E8:  MOVFF  3CB,A78
180EC:  MOVFF  3CA,A77
180F0:  MOVFF  3C9,A76
180F4:  MOVLB  0
180F6:  CALL   67FC
180FA:  MOVLB  3
180FC:  MOVF   x0B,W
180FE:  ADDWF  00,F
18100:  MOVF   x0C,W
18102:  ADDWFC 01,F
18104:  MOVF   x0D,W
18106:  ADDWFC 02,F
18108:  MOVF   x0E,W
1810A:  ADDWFC 03,F
1810C:  MOVFF  03,30E
18110:  MOVFF  02,30D
18114:  MOVFF  01,30C
18118:  MOVFF  00,30B
.................... 			soma_ct += (signed int32)(aux_sl2 * aux_sl2);
1811C:  MOVFF  3D0,A75
18120:  MOVFF  3CF,A74
18124:  MOVFF  3CE,A73
18128:  MOVFF  3CD,A72
1812C:  MOVFF  3D0,A79
18130:  MOVFF  3CF,A78
18134:  MOVFF  3CE,A77
18138:  MOVFF  3CD,A76
1813C:  MOVLB  0
1813E:  CALL   67FC
18142:  MOVLB  3
18144:  MOVF   x0F,W
18146:  ADDWF  00,F
18148:  MOVF   x10,W
1814A:  ADDWFC 01,F
1814C:  MOVF   x11,W
1814E:  ADDWFC 02,F
18150:  MOVF   x12,W
18152:  ADDWFC 03,F
18154:  MOVFF  03,312
18158:  MOVFF  02,311
1815C:  MOVFF  01,310
18160:  MOVFF  00,30F
.................... 			if (cor_baixa_t == 0){
18164:  BTFSC  29.0
18166:  BRA    1822C
.................... 				aux_sl1 = (aux_sl1 + aux_sl3) / 2;
18168:  MOVF   xD1,W
1816A:  ADDWF  xC9,W
1816C:  MOVLB  A
1816E:  MOVWF  x4A
18170:  MOVLB  3
18172:  MOVF   xD2,W
18174:  ADDWFC xCA,W
18176:  MOVLB  A
18178:  MOVWF  x4B
1817A:  MOVLB  3
1817C:  MOVF   xD3,W
1817E:  ADDWFC xCB,W
18180:  MOVLB  A
18182:  MOVWF  x4C
18184:  MOVLB  3
18186:  MOVF   xD4,W
18188:  ADDWFC xCC,W
1818A:  MOVLB  A
1818C:  MOVWF  x4D
1818E:  BCF    FD8.1
18190:  MOVWF  x71
18192:  MOVFF  A4C,A70
18196:  MOVFF  A4B,A6F
1819A:  MOVFF  A4A,A6E
1819E:  CLRF   x75
181A0:  CLRF   x74
181A2:  CLRF   x73
181A4:  MOVLW  02
181A6:  MOVWF  x72
181A8:  MOVLB  0
181AA:  CALL   1796A
181AE:  MOVFF  03,3CC
181B2:  MOVFF  02,3CB
181B6:  MOVFF  01,3CA
181BA:  MOVFF  00,3C9
.................... 				soma_pt += (signed int32)(aux_sl1 * aux_sl2);
181BE:  MOVFF  3CC,A75
181C2:  MOVFF  3CB,A74
181C6:  MOVFF  3CA,A73
181CA:  MOVFF  3C9,A72
181CE:  MOVFF  3D0,A79
181D2:  MOVFF  3CF,A78
181D6:  MOVFF  3CE,A77
181DA:  MOVFF  3CD,A76
181DE:  CALL   67FC
181E2:  MOVF   00,W
181E4:  MOVLB  3
181E6:  ADDWF  x13,F
181E8:  MOVF   01,W
181EA:  ADDWFC x14,F
181EC:  MOVF   02,W
181EE:  ADDWFC x15,F
181F0:  MOVF   03,W
181F2:  ADDWFC x16,F
.................... 				soma_kvar_t += (signed int32)(aux_sl4 * aux_sl2);
181F4:  MOVFF  3D8,A75
181F8:  MOVFF  3D7,A74
181FC:  MOVFF  3D6,A73
18200:  MOVFF  3D5,A72
18204:  MOVFF  3D0,A79
18208:  MOVFF  3CF,A78
1820C:  MOVFF  3CE,A77
18210:  MOVFF  3CD,A76
18214:  MOVLB  0
18216:  CALL   67FC
1821A:  MOVF   00,W
1821C:  MOVLB  3
1821E:  ADDWF  x1F,F
18220:  MOVF   01,W
18222:  ADDWFC x20,F
18224:  MOVF   02,W
18226:  ADDWFC x21,F
18228:  MOVF   03,W
1822A:  ADDWFC x22,F
.................... 			}
.................... 
.................... 			soma_cn += (signed int32)(aux_sl5 * aux_sl5);
1822C:  MOVFF  3DC,A75
18230:  MOVFF  3DB,A74
18234:  MOVFF  3DA,A73
18238:  MOVFF  3D9,A72
1823C:  MOVFF  3DC,A79
18240:  MOVFF  3DB,A78
18244:  MOVFF  3DA,A77
18248:  MOVFF  3D9,A76
1824C:  MOVLB  0
1824E:  CALL   67FC
18252:  MOVLB  3
18254:  MOVF   x44,W
18256:  ADDWF  00,F
18258:  MOVF   x45,W
1825A:  ADDWFC 01,F
1825C:  MOVF   x46,W
1825E:  ADDWFC 02,F
18260:  MOVF   x47,W
18262:  ADDWFC 03,F
18264:  MOVFF  03,347
18268:  MOVFF  02,346
1826C:  MOVFF  01,345
18270:  MOVFF  00,344
.................... 
.................... 			off_set_kvar++;
18274:  MOVLB  4
18276:  INCF   xBA,F
.................... 			if (off_set_kvar >= NRO_AMOSTRAS){
18278:  MOVF   xBA,W
1827A:  SUBLW  3F
1827C:  BC    18280
.................... 				off_set_kvar = 0;
1827E:  CLRF   xBA
.................... 			}
18280:  MOVLB  3
18282:  INCF   xB5,F
18284:  GOTO   17A6E
.................... 		}
.................... 	}
18288:  BRA    18434
1828A:  MOVLB  4
.................... 	else{
.................... 		for (aux_calc = 0; aux_calc < NRO_AMOSTRAS; aux_calc++){
1828C:  MOVLB  3
1828E:  CLRF   xB5
18290:  MOVF   xB5,W
18292:  SUBLW  3F
18294:  BTFSS  FD8.0
18296:  BRA    18434
.................... 			#if com_modbus
.................... 				trata_modbus();
18298:  MOVLB  0
1829A:  CALL   DEBA
.................... 			#endif
.................... 			#if (home_system == true)
.................... 				trata_hsnet();
.................... 			#endif
.................... // fase R
.................... 			aux_sl1 = (signed int32)(buf_tensao_r[aux_calc] - 2048);
1829E:  BCF    FD8.0
182A0:  MOVLB  3
182A2:  RLCF   xB5,W
182A4:  CLRF   03
182A6:  ADDLW  34
182A8:  MOVWF  FE9
182AA:  MOVLW  05
182AC:  ADDWFC 03,W
182AE:  MOVWF  FEA
182B0:  MOVFF  FEC,A4B
182B4:  MOVF   FED,F
182B6:  MOVFF  FEF,A4A
182BA:  MOVLW  00
182BC:  MOVLB  A
182BE:  SUBWF  x4A,W
182C0:  MOVWF  00
182C2:  MOVLW  08
182C4:  SUBWFB x4B,W
182C6:  MOVWF  03
182C8:  MOVFF  00,3C9
182CC:  MOVLB  3
182CE:  MOVWF  xCA
182D0:  CLRF   xCB
182D2:  CLRF   xCC
182D4:  BTFSS  xCA.7
182D6:  BRA    182DC
182D8:  DECF   xCB,F
182DA:  DECF   xCC,F
.................... 			soma_tr += (signed int32)(aux_sl1 * aux_sl1);
182DC:  MOVFF  3CC,A75
182E0:  MOVFF  3CB,A74
182E4:  MOVFF  3CA,A73
182E8:  MOVFF  3C9,A72
182EC:  MOVFF  3CC,A79
182F0:  MOVFF  3CB,A78
182F4:  MOVFF  3CA,A77
182F8:  MOVFF  3C9,A76
182FC:  MOVLB  0
182FE:  CALL   67FC
18302:  MOVLB  2
18304:  MOVF   x22,W
18306:  ADDWF  00,F
18308:  MOVF   x23,W
1830A:  ADDWFC 01,F
1830C:  MOVF   x24,W
1830E:  ADDWFC 02,F
18310:  MOVF   x25,W
18312:  ADDWFC 03,F
18314:  MOVFF  03,225
18318:  MOVFF  02,224
1831C:  MOVFF  01,223
18320:  MOVFF  00,222
.................... // fase S
.................... 			aux_sl1 = (signed int32)(buf_tensao_s[aux_calc] - 2048);
18324:  BCF    FD8.0
18326:  MOVLB  3
18328:  RLCF   xB5,W
1832A:  CLRF   03
1832C:  ADDLW  38
1832E:  MOVWF  FE9
18330:  MOVLW  06
18332:  ADDWFC 03,W
18334:  MOVWF  FEA
18336:  MOVFF  FEC,A4B
1833A:  MOVF   FED,F
1833C:  MOVFF  FEF,A4A
18340:  MOVLW  00
18342:  MOVLB  A
18344:  SUBWF  x4A,W
18346:  MOVWF  00
18348:  MOVLW  08
1834A:  SUBWFB x4B,W
1834C:  MOVWF  03
1834E:  MOVFF  00,3C9
18352:  MOVLB  3
18354:  MOVWF  xCA
18356:  CLRF   xCB
18358:  CLRF   xCC
1835A:  BTFSS  xCA.7
1835C:  BRA    18362
1835E:  DECF   xCB,F
18360:  DECF   xCC,F
.................... 			soma_ts += (signed int32)(aux_sl1 * aux_sl1);
18362:  MOVFF  3CC,A75
18366:  MOVFF  3CB,A74
1836A:  MOVFF  3CA,A73
1836E:  MOVFF  3C9,A72
18372:  MOVFF  3CC,A79
18376:  MOVFF  3CB,A78
1837A:  MOVFF  3CA,A77
1837E:  MOVFF  3C9,A76
18382:  MOVLB  0
18384:  CALL   67FC
18388:  MOVLB  2
1838A:  MOVF   xB4,W
1838C:  ADDWF  00,F
1838E:  MOVF   xB5,W
18390:  ADDWFC 01,F
18392:  MOVF   xB6,W
18394:  ADDWFC 02,F
18396:  MOVF   xB7,W
18398:  ADDWFC 03,F
1839A:  MOVFF  03,2B7
1839E:  MOVFF  02,2B6
183A2:  MOVFF  01,2B5
183A6:  MOVFF  00,2B4
.................... // fase T
.................... 			aux_sl1 = (signed int32)(buf_tensao_t[aux_calc] - 2048);
183AA:  BCF    FD8.0
183AC:  MOVLB  3
183AE:  RLCF   xB5,W
183B0:  CLRF   03
183B2:  ADDLW  BA
183B4:  MOVWF  FE9
183B6:  MOVLW  06
183B8:  ADDWFC 03,W
183BA:  MOVWF  FEA
183BC:  MOVFF  FEC,A4B
183C0:  MOVF   FED,F
183C2:  MOVFF  FEF,A4A
183C6:  MOVLW  00
183C8:  MOVLB  A
183CA:  SUBWF  x4A,W
183CC:  MOVWF  00
183CE:  MOVLW  08
183D0:  SUBWFB x4B,W
183D2:  MOVWF  03
183D4:  MOVFF  00,3C9
183D8:  MOVLB  3
183DA:  MOVWF  xCA
183DC:  CLRF   xCB
183DE:  CLRF   xCC
183E0:  BTFSS  xCA.7
183E2:  BRA    183E8
183E4:  DECF   xCB,F
183E6:  DECF   xCC,F
.................... 			soma_tt += (signed int32)(aux_sl1 * aux_sl1);
183E8:  MOVFF  3CC,A75
183EC:  MOVFF  3CB,A74
183F0:  MOVFF  3CA,A73
183F4:  MOVFF  3C9,A72
183F8:  MOVFF  3CC,A79
183FC:  MOVFF  3CB,A78
18400:  MOVFF  3CA,A77
18404:  MOVFF  3C9,A76
18408:  MOVLB  0
1840A:  CALL   67FC
1840E:  MOVLB  3
18410:  MOVF   x0B,W
18412:  ADDWF  00,F
18414:  MOVF   x0C,W
18416:  ADDWFC 01,F
18418:  MOVF   x0D,W
1841A:  ADDWFC 02,F
1841C:  MOVF   x0E,W
1841E:  ADDWFC 03,F
18420:  MOVFF  03,30E
18424:  MOVFF  02,30D
18428:  MOVFF  01,30C
1842C:  MOVFF  00,30B
18430:  INCF   xB5,F
18432:  BRA    18290
.................... 		}
.................... 	}
18434:  MOVLB  0
18436:  GOTO   18B6E (RETURN)
.................... }
.................... 
.................... 
.................... void finaliza_calculo_tensao_corrente(void){
.................... 	#if (st8500c == true)
.................... 		if (conta_media_ten == nro_media_amostras){
*
18692:  MOVLB  3
18694:  MOVF   x60,W
18696:  SUBLW  02
18698:  BTFSS  FD8.2
1869A:  BRA    18A52
.................... 			tensao_r = calcula_eficaz(soma_efi_tr, os_ten_r, 'T');
1869C:  MOVFF  211,A4D
186A0:  MOVFF  210,A4C
186A4:  MOVFF  20F,A4B
186A8:  MOVFF  20E,A4A
186AC:  MOVLB  A
186AE:  CLRF   x4F
186B0:  MOVFF  4A8,A4E
186B4:  BTFSC  x4E.7
186B6:  DECF   x4F,F
186B8:  MOVLW  54
186BA:  MOVWF  x50
186BC:  MOVLB  0
186BE:  RCALL  185EA
186C0:  MOVFF  02,251
186C4:  MOVFF  01,250
.................... 			tensao_s = calcula_eficaz(soma_efi_ts, os_ten_s, 'T');
186C8:  MOVFF  2A7,A4D
186CC:  MOVFF  2A6,A4C
186D0:  MOVFF  2A5,A4B
186D4:  MOVFF  2A4,A4A
186D8:  MOVLB  A
186DA:  CLRF   x4F
186DC:  MOVFF  4A9,A4E
186E0:  BTFSC  x4E.7
186E2:  DECF   x4F,F
186E4:  MOVLW  54
186E6:  MOVWF  x50
186E8:  MOVLB  0
186EA:  RCALL  185EA
186EC:  MOVFF  02,2D5
186F0:  MOVFF  01,2D4
.................... 			tensao_t = calcula_eficaz(soma_efi_tt, os_ten_t, 'T');
186F4:  MOVFF  2FE,A4D
186F8:  MOVFF  2FD,A4C
186FC:  MOVFF  2FC,A4B
18700:  MOVFF  2FB,A4A
18704:  MOVLB  A
18706:  CLRF   x4F
18708:  MOVFF  4AA,A4E
1870C:  BTFSC  x4E.7
1870E:  DECF   x4F,F
18710:  MOVLW  54
18712:  MOVWF  x50
18714:  MOVLB  0
18716:  RCALL  185EA
18718:  MOVFF  02,32C
1871C:  MOVFF  01,32B
.................... 
.................... 			soma_ten_r += tensao_r;
18720:  MOVLB  2
18722:  MOVF   x50,W
18724:  ADDWF  x16,F
18726:  MOVF   x51,W
18728:  ADDWFC x17,F
1872A:  MOVLW  00
1872C:  ADDWFC x18,F
1872E:  ADDWFC x19,F
.................... 			tensao_r = soma_ten_r >> 1;
18730:  BCF    FD8.0
18732:  RRCF   x19,W
18734:  RRCF   x18,W
18736:  RRCF   x17,W
18738:  MOVWF  01
1873A:  RRCF   x16,W
1873C:  MOVWF  x50
1873E:  MOVFF  01,251
.................... 			soma_ten_r -= tensao_r;
18742:  MOVF   x50,W
18744:  SUBWF  x16,F
18746:  MOVF   x51,W
18748:  SUBWFB x17,F
1874A:  MOVLW  00
1874C:  SUBWFB x18,F
1874E:  SUBWFB x19,F
.................... 		
.................... 			soma_ten_s += tensao_s;
18750:  MOVF   xD4,W
18752:  ADDWF  xAC,F
18754:  MOVF   xD5,W
18756:  ADDWFC xAD,F
18758:  MOVLW  00
1875A:  ADDWFC xAE,F
1875C:  ADDWFC xAF,F
.................... 			tensao_s = soma_ten_s >> 1;
1875E:  BCF    FD8.0
18760:  RRCF   xAF,W
18762:  RRCF   xAE,W
18764:  RRCF   xAD,W
18766:  MOVWF  01
18768:  RRCF   xAC,W
1876A:  MOVWF  xD4
1876C:  MOVFF  01,2D5
.................... 			soma_ten_s -= tensao_s;
18770:  MOVF   xD4,W
18772:  SUBWF  xAC,F
18774:  MOVF   xD5,W
18776:  SUBWFB xAD,F
18778:  MOVLW  00
1877A:  SUBWFB xAE,F
1877C:  SUBWFB xAF,F
.................... 		
.................... 			soma_ten_t += tensao_t;
1877E:  MOVLB  3
18780:  MOVF   x2B,W
18782:  ADDWF  x07,F
18784:  MOVF   x2C,W
18786:  ADDWFC x08,F
18788:  MOVLW  00
1878A:  ADDWFC x09,F
1878C:  ADDWFC x0A,F
.................... 			tensao_t = soma_ten_t >> 1;
1878E:  BCF    FD8.0
18790:  RRCF   x0A,W
18792:  RRCF   x09,W
18794:  RRCF   x08,W
18796:  MOVWF  01
18798:  RRCF   x07,W
1879A:  MOVWF  x2B
1879C:  MOVFF  01,32C
.................... 			soma_ten_t -= tensao_t;
187A0:  MOVF   x2B,W
187A2:  SUBWF  x07,F
187A4:  MOVF   x2C,W
187A6:  SUBWFB x08,F
187A8:  MOVLW  00
187AA:  SUBWFB x09,F
187AC:  SUBWFB x0A,F
.................... 	
.................... 		
.................... 			calc_ten_ok = 1;
187AE:  BSF    1E.4
.................... 
.................... 			soma_efi_tr = 0;
187B0:  MOVLB  2
187B2:  CLRF   x11
187B4:  CLRF   x10
187B6:  CLRF   x0F
187B8:  CLRF   x0E
.................... 			soma_efi_ts = 0;
187BA:  CLRF   xA7
187BC:  CLRF   xA6
187BE:  CLRF   xA5
187C0:  CLRF   xA4
.................... 			soma_efi_tt = 0;
187C2:  CLRF   xFE
187C4:  CLRF   xFD
187C6:  CLRF   xFC
187C8:  CLRF   xFB
.................... 			
.................... 			#if (com_tc == true)
.................... 				corrente_r = calcula_eficaz(soma_efi_cr, os_cor_r, 'C');
187CA:  MOVFF  215,A4D
187CE:  MOVFF  214,A4C
187D2:  MOVFF  213,A4B
187D6:  MOVFF  212,A4A
187DA:  MOVLB  A
187DC:  CLRF   x4F
187DE:  MOVFF  4B1,A4E
187E2:  BTFSC  x4E.7
187E4:  DECF   x4F,F
187E6:  MOVLW  43
187E8:  MOVWF  x50
187EA:  MOVLB  0
187EC:  RCALL  185EA
187EE:  MOVFF  02,253
187F2:  MOVFF  01,252
.................... 				corrente_s = calcula_eficaz(soma_efi_cs, os_cor_s, 'C');
187F6:  MOVFF  2AB,A4D
187FA:  MOVFF  2AA,A4C
187FE:  MOVFF  2A9,A4B
18802:  MOVFF  2A8,A4A
18806:  MOVLB  A
18808:  CLRF   x4F
1880A:  MOVFF  4B2,A4E
1880E:  BTFSC  x4E.7
18810:  DECF   x4F,F
18812:  MOVLW  43
18814:  MOVWF  x50
18816:  MOVLB  0
18818:  RCALL  185EA
1881A:  MOVFF  02,2D7
1881E:  MOVFF  01,2D6
.................... 				corrente_t = calcula_eficaz(soma_efi_ct, os_cor_t, 'C');
18822:  MOVFF  302,A4D
18826:  MOVFF  301,A4C
1882A:  MOVFF  300,A4B
1882E:  MOVFF  2FF,A4A
18832:  MOVLB  A
18834:  CLRF   x4F
18836:  MOVFF  4B3,A4E
1883A:  BTFSC  x4E.7
1883C:  DECF   x4F,F
1883E:  MOVLW  43
18840:  MOVWF  x50
18842:  MOVLB  0
18844:  RCALL  185EA
18846:  MOVFF  02,32E
1884A:  MOVFF  01,32D
.................... 						
.................... 				soma_cor_r += corrente_r;
1884E:  MOVLB  2
18850:  MOVF   x52,W
18852:  ADDWF  x1A,F
18854:  MOVF   x53,W
18856:  ADDWFC x1B,F
18858:  MOVLW  00
1885A:  ADDWFC x1C,F
1885C:  ADDWFC x1D,F
.................... 				corrente_r = soma_cor_r >> 1;
1885E:  BCF    FD8.0
18860:  RRCF   x1D,W
18862:  RRCF   x1C,W
18864:  RRCF   x1B,W
18866:  MOVWF  01
18868:  RRCF   x1A,W
1886A:  MOVWF  x52
1886C:  MOVFF  01,253
.................... 				soma_cor_r -= corrente_r;
18870:  MOVF   x52,W
18872:  SUBWF  x1A,F
18874:  MOVF   x53,W
18876:  SUBWFB x1B,F
18878:  MOVLW  00
1887A:  SUBWFB x1C,F
1887C:  SUBWFB x1D,F
.................... 			
.................... 				soma_cor_s += corrente_s;
1887E:  MOVF   xD6,W
18880:  ADDWF  xB0,F
18882:  MOVF   xD7,W
18884:  ADDWFC xB1,F
18886:  MOVLW  00
18888:  ADDWFC xB2,F
1888A:  ADDWFC xB3,F
.................... 				corrente_s = soma_cor_s >> 1;
1888C:  BCF    FD8.0
1888E:  RRCF   xB3,W
18890:  RRCF   xB2,W
18892:  RRCF   xB1,W
18894:  MOVWF  01
18896:  RRCF   xB0,W
18898:  MOVWF  xD6
1889A:  MOVFF  01,2D7
.................... 				soma_cor_s -= corrente_s;
1889E:  MOVF   xD6,W
188A0:  SUBWF  xB0,F
188A2:  MOVF   xD7,W
188A4:  SUBWFB xB1,F
188A6:  MOVLW  00
188A8:  SUBWFB xB2,F
188AA:  SUBWFB xB3,F
.................... 			
.................... 				soma_cor_t += corrente_t;
188AC:  MOVLB  3
188AE:  MOVF   x2D,W
188B0:  ADDWF  x03,F
188B2:  MOVF   x2E,W
188B4:  ADDWFC x04,F
188B6:  MOVLW  00
188B8:  ADDWFC x05,F
188BA:  ADDWFC x06,F
.................... 				corrente_t = soma_cor_t >> 1;
188BC:  BCF    FD8.0
188BE:  RRCF   x06,W
188C0:  RRCF   x05,W
188C2:  RRCF   x04,W
188C4:  MOVWF  01
188C6:  RRCF   x03,W
188C8:  MOVWF  x2D
188CA:  MOVFF  01,32E
.................... 				soma_cor_t -= corrente_t;
188CE:  MOVF   x2D,W
188D0:  SUBWF  x03,F
188D2:  MOVF   x2E,W
188D4:  SUBWFB x04,F
188D6:  MOVLW  00
188D8:  SUBWFB x05,F
188DA:  SUBWFB x06,F
.................... 			
.................... 				aux_sl1 = (signed int32)(soma_pot_efi_r >> nro_desloca);
188DC:  BCF    FD8.0
188DE:  MOVLB  2
188E0:  RRCF   x31,W
188E2:  MOVWF  03
188E4:  RRCF   x30,W
188E6:  MOVWF  02
188E8:  RRCF   x2F,W
188EA:  MOVWF  01
188EC:  RRCF   x2E,W
188EE:  MOVFF  03,3CC
188F2:  MOVFF  02,3CB
188F6:  MOVFF  01,3CA
188FA:  MOVFF  FE8,3C9
.................... 				soma_efi_pr = (signed int32)(aux_sl1); 
188FE:  MOVFF  3CC,22D
18902:  MOVFF  3CB,22C
18906:  MOVFF  3CA,22B
1890A:  MOVFF  3C9,22A
.................... 						
.................... 				aux_sl1 = (signed int32)(soma_pot_kvar_r >> nro_desloca);
1890E:  BCF    FD8.0
18910:  RRCF   x3D,W
18912:  MOVWF  03
18914:  RRCF   x3C,W
18916:  MOVWF  02
18918:  RRCF   x3B,W
1891A:  MOVWF  01
1891C:  RRCF   x3A,W
1891E:  MOVFF  03,3CC
18922:  MOVFF  02,3CB
18926:  MOVFF  01,3CA
1892A:  MOVFF  FE8,3C9
.................... 				soma_efi_kvar_r = (signed int32)(aux_sl1);
1892E:  MOVFF  3CC,239
18932:  MOVFF  3CB,238
18936:  MOVFF  3CA,237
1893A:  MOVFF  3C9,236
.................... 			
.................... 				aux_sl1 = (signed int32)(soma_pot_efi_s >> nro_desloca);
1893E:  BCF    FD8.0
18940:  RRCF   xC7,W
18942:  MOVWF  03
18944:  RRCF   xC6,W
18946:  MOVWF  02
18948:  RRCF   xC5,W
1894A:  MOVWF  01
1894C:  RRCF   xC4,W
1894E:  MOVFF  03,3CC
18952:  MOVFF  02,3CB
18956:  MOVFF  01,3CA
1895A:  MOVFF  FE8,3C9
.................... 				soma_efi_ps = (signed int32)(aux_sl1); 
1895E:  MOVFF  3CC,2C3
18962:  MOVFF  3CB,2C2
18966:  MOVFF  3CA,2C1
1896A:  MOVFF  3C9,2C0
.................... 				aux_sl1 = (signed int32)(soma_pot_kvar_s >> nro_desloca);
1896E:  BCF    FD8.0
18970:  RRCF   xD3,W
18972:  MOVWF  03
18974:  RRCF   xD2,W
18976:  MOVWF  02
18978:  RRCF   xD1,W
1897A:  MOVWF  01
1897C:  RRCF   xD0,W
1897E:  MOVFF  03,3CC
18982:  MOVFF  02,3CB
18986:  MOVFF  01,3CA
1898A:  MOVFF  FE8,3C9
.................... 				soma_efi_kvar_s = (signed int32)(aux_sl1);
1898E:  MOVFF  3CC,2CF
18992:  MOVFF  3CB,2CE
18996:  MOVFF  3CA,2CD
1899A:  MOVFF  3C9,2CC
.................... 						
.................... 				aux_sl1 = (signed int32)(soma_pot_efi_t >> nro_desloca);
1899E:  BCF    FD8.0
189A0:  MOVLB  3
189A2:  RRCF   x1E,W
189A4:  MOVWF  03
189A6:  RRCF   x1D,W
189A8:  MOVWF  02
189AA:  RRCF   x1C,W
189AC:  MOVWF  01
189AE:  RRCF   x1B,W
189B0:  MOVFF  03,3CC
189B4:  MOVFF  02,3CB
189B8:  MOVFF  01,3CA
189BC:  MOVWF  xC9
.................... 				soma_efi_pt = (signed int32)(aux_sl1); 
189BE:  MOVFF  3CC,31A
189C2:  MOVFF  3CB,319
189C6:  MOVFF  3CA,318
189CA:  MOVFF  3C9,317
.................... 			
.................... 				aux_sl1 = (signed int32)(soma_pot_kvar_t >> nro_desloca);
189CE:  BCF    FD8.0
189D0:  RRCF   x2A,W
189D2:  MOVWF  03
189D4:  RRCF   x29,W
189D6:  MOVWF  02
189D8:  RRCF   x28,W
189DA:  MOVWF  01
189DC:  RRCF   x27,W
189DE:  MOVFF  03,3CC
189E2:  MOVFF  02,3CB
189E6:  MOVFF  01,3CA
189EA:  MOVWF  xC9
.................... 				soma_efi_kvar_t = (signed int32)(aux_sl1);
189EC:  MOVFF  3CC,326
189F0:  MOVFF  3CB,325
189F4:  MOVFF  3CA,324
189F8:  MOVFF  3C9,323
.................... 				
.................... 				soma_efi_cr = 0;
189FC:  MOVLB  2
189FE:  CLRF   x15
18A00:  CLRF   x14
18A02:  CLRF   x13
18A04:  CLRF   x12
.................... 				soma_efi_cs = 0;
18A06:  CLRF   xAB
18A08:  CLRF   xAA
18A0A:  CLRF   xA9
18A0C:  CLRF   xA8
.................... 				soma_efi_ct = 0;
18A0E:  MOVLB  3
18A10:  CLRF   x02
18A12:  CLRF   x01
18A14:  CLRF   x00
18A16:  MOVLB  2
18A18:  CLRF   xFF
.................... 				soma_pot_efi_r = 0;
18A1A:  CLRF   x31
18A1C:  CLRF   x30
18A1E:  CLRF   x2F
18A20:  CLRF   x2E
.................... 				soma_pot_efi_s = 0;
18A22:  CLRF   xC7
18A24:  CLRF   xC6
18A26:  CLRF   xC5
18A28:  CLRF   xC4
.................... 				soma_pot_efi_t = 0;
18A2A:  MOVLB  3
18A2C:  CLRF   x1E
18A2E:  CLRF   x1D
18A30:  CLRF   x1C
18A32:  CLRF   x1B
.................... 				soma_pot_kvar_r = 0;
18A34:  MOVLB  2
18A36:  CLRF   x3D
18A38:  CLRF   x3C
18A3A:  CLRF   x3B
18A3C:  CLRF   x3A
.................... 				soma_pot_kvar_s = 0;
18A3E:  CLRF   xD3
18A40:  CLRF   xD2
18A42:  CLRF   xD1
18A44:  CLRF   xD0
.................... 				soma_pot_kvar_t = 0;
18A46:  MOVLB  3
18A48:  CLRF   x2A
18A4A:  CLRF   x29
18A4C:  CLRF   x28
18A4E:  CLRF   x27
.................... 			
.................... //				fprintf(modbus,"NA calc1:");
.................... //				fprintf(modbus,"T:%lu , C:%lu \r\n", tensao_r, corrente_r);
.................... 
.................... 			#endif
.................... 			conta_media_ten = 0;
18A50:  CLRF   x60
.................... 		}
.................... 	#else
18A52:  MOVLB  0
18A54:  GOTO   18F38 (RETURN)
.................... 		if (conta_media_ten == nro_media_amostras){
.................... 			tensao_r = calcula_eficaz(soma_efi_tr, os_ten_r, 'T');
.................... 			if (tensao_r < TENSAO_FALTA){
.................... 				tensao_r = 0;
.................... 			}
.................... 			tensao_s = calcula_eficaz(soma_efi_ts, os_ten_s, 'T');
.................... 			if (tensao_s < TENSAO_FALTA){
.................... 				tensao_s = 0;
.................... 			}
.................... 			tensao_t = calcula_eficaz(soma_efi_tt, os_ten_t, 'T');
.................... 			if (tensao_t < TENSAO_FALTA){
.................... 				tensao_t = 0;
.................... 			}
.................... 	
.................... 			soma_ten_r += tensao_r;
.................... 			tensao_r = soma_ten_r >> 1;
.................... 			soma_ten_r -= tensao_r;
.................... 	
.................... 			soma_ten_s += tensao_s;
.................... 			tensao_s = soma_ten_s >> 1;
.................... 			soma_ten_s -= tensao_s;
.................... 
.................... 			soma_ten_t += tensao_t;
.................... 			tensao_t = soma_ten_t >> 1;
.................... 			soma_ten_t -= tensao_t;
.................... 		
.................... 			if (modo_funca == 1){
.................... 				corrente_r = calcula_eficaz(soma_efi_cr, os_cor_r, 'C');
.................... 				corrente_s = calcula_eficaz(soma_efi_cs, os_cor_s, 'C');
.................... 				corrente_t = calcula_eficaz(soma_efi_ct, os_cor_t, 'C');
.................... 				corrente_n = calcula_eficaz(soma_efi_cn, (os_cor_r + os_cor_s + os_cor_t), 'C');
.................... 				
.................... 				soma_cor_r += corrente_r;
.................... 				corrente_r = soma_cor_r >> 1;
.................... 				soma_cor_r -= corrente_r;
.................... 	
.................... 				soma_cor_s += corrente_s;
.................... 				corrente_s = soma_cor_s >> 1;
.................... 				soma_cor_s -= corrente_s;
.................... 
.................... 				soma_cor_t += corrente_t;
.................... 				corrente_t = soma_cor_t >> 1;
.................... 				soma_cor_t -= corrente_t;
.................... 	
.................... 				aux_sl1 = (signed int32)(soma_pot_efi_r >> nro_desloca);
.................... 				soma_efi_pr = (signed int32)(aux_sl1); 
.................... 				aux_sl1 = (signed int32)(soma_pot_kvar_r >> nro_desloca);
.................... 				soma_efi_kvar_r = (signed int32)(aux_sl1);
.................... 		
.................... 				aux_sl1 = (signed int32)(soma_pot_efi_s >> nro_desloca);
.................... 				soma_efi_ps = (signed int32)(aux_sl1); 
.................... 				aux_sl1 = (signed int32)(soma_pot_kvar_s >> nro_desloca);
.................... 				soma_efi_kvar_s = (signed int32)(aux_sl1);
.................... 			
.................... 				aux_sl1 = (signed int32)(soma_pot_efi_t >> nro_desloca);
.................... 				soma_efi_pt = (signed int32)(aux_sl1); 
.................... 				aux_sl1 = (signed int32)(soma_pot_kvar_t >> nro_desloca);
.................... 				soma_efi_kvar_t = (signed int32)(aux_sl1);
.................... 			}
.................... 			else{
.................... 				corrente_r = 0;
.................... 				corrente_s = 0;
.................... 				corrente_t = 0;
.................... 			}
.................... 	
.................... 			calc_ten_ok = 1;
.................... 	
.................... 			soma_efi_cr = 0;
.................... 			soma_efi_cs = 0;
.................... 			soma_efi_ct = 0;
.................... 			soma_efi_cn = 0;
.................... 	
.................... 			soma_pot_efi_r = 0;
.................... 				
.................... 			soma_pot_kvar_r = 0;
.................... 			soma_pot_efi_s = 0;
.................... 			soma_pot_efi_t = 0;
.................... 			soma_pot_kvar_s = 0;
.................... 			soma_pot_kvar_t = 0;
.................... 	
.................... 			soma_efi_tr = 0;
.................... 			soma_efi_tt = 0;
.................... 			soma_efi_ts = 0;
.................... 			
.................... 			conta_media_ten = 0;
.................... 		}
.................... 	#endif
.................... }
.................... 
.................... void calcula_tensao_corrente(void){
.................... //	conta_media++;
.................... 	morder_calc = 1;
18A58:  BSF    20.0
.................... 	
.................... 	cor_baixa_r = 0;
18A5A:  BCF    24.1
.................... 	cor_baixa_s = 0;
18A5C:  BCF    28.7
.................... 	cor_baixa_t = 0;
18A5E:  BCF    29.0
.................... 
.................... 	aux_w1 = 80;		// TC de 500: 2% = 15A com a quantização de corrente (2^3 = 8) temos o valor 80.
18A60:  MOVLB  3
18A62:  CLRF   x63
18A64:  MOVLW  50
18A66:  MOVWF  x62
.................... 
.................... 	if (corrente_r < aux_w1){
18A68:  MOVLB  2
18A6A:  MOVF   x53,W
18A6C:  MOVLB  3
18A6E:  SUBWF  x63,W
18A70:  BNC   18A9E
18A72:  BNZ   18A84
18A74:  MOVF   x62,W
18A76:  MOVLB  2
18A78:  SUBWF  x52,W
18A7A:  BTFSS  FD8.0
18A7C:  BRA    18A82
18A7E:  MOVLB  3
18A80:  BRA    18A9E
18A82:  MOVLB  3
.................... 		cor_baixa_r = 1;
18A84:  BSF    24.1
.................... 		sinal_fp[0] = '1';
18A86:  MOVLW  31
18A88:  MOVLB  2
18A8A:  MOVWF  x8A
.................... 		soma_pr = 0;
18A8C:  CLRF   x29
18A8E:  CLRF   x28
18A90:  CLRF   x27
18A92:  CLRF   x26
.................... 		soma_kvar_r = 0;
18A94:  CLRF   x35
18A96:  CLRF   x34
18A98:  CLRF   x33
18A9A:  CLRF   x32
18A9C:  MOVLB  3
.................... 	}
.................... 	if (corrente_s < aux_w1){
18A9E:  MOVLB  2
18AA0:  MOVF   xD7,W
18AA2:  MOVLB  3
18AA4:  SUBWF  x63,W
18AA6:  BNC   18AD4
18AA8:  BNZ   18ABA
18AAA:  MOVF   x62,W
18AAC:  MOVLB  2
18AAE:  SUBWF  xD6,W
18AB0:  BTFSS  FD8.0
18AB2:  BRA    18AB8
18AB4:  MOVLB  3
18AB6:  BRA    18AD4
18AB8:  MOVLB  3
.................... 		cor_baixa_s = 1;
18ABA:  BSF    28.7
.................... 		sinal_fp[1] = '1';
18ABC:  MOVLW  31
18ABE:  MOVLB  2
18AC0:  MOVWF  x8B
.................... 		soma_ps = 0;
18AC2:  CLRF   xBF
18AC4:  CLRF   xBE
18AC6:  CLRF   xBD
18AC8:  CLRF   xBC
.................... 		soma_kvar_s = 0;
18ACA:  CLRF   xCB
18ACC:  CLRF   xCA
18ACE:  CLRF   xC9
18AD0:  CLRF   xC8
18AD2:  MOVLB  3
.................... 	}
.................... 	if (corrente_t < aux_w1){
18AD4:  MOVF   x2E,W
18AD6:  SUBWF  x63,W
18AD8:  BNC   18AFC
18ADA:  BNZ   18AE2
18ADC:  MOVF   x62,W
18ADE:  SUBWF  x2D,W
18AE0:  BC    18AFC
.................... 		cor_baixa_t = 1;
18AE2:  BSF    29.0
.................... 		sinal_fp[2] = '1';
18AE4:  MOVLW  31
18AE6:  MOVLB  2
18AE8:  MOVWF  x8C
.................... 		soma_pt = 0;
18AEA:  MOVLB  3
18AEC:  CLRF   x16
18AEE:  CLRF   x15
18AF0:  CLRF   x14
18AF2:  CLRF   x13
.................... 		soma_kvar_t = 0;
18AF4:  CLRF   x22
18AF6:  CLRF   x21
18AF8:  CLRF   x20
18AFA:  CLRF   x1F
.................... 	}
.................... 
.................... 	soma_tr = 0;
18AFC:  MOVLB  2
18AFE:  CLRF   x25
18B00:  CLRF   x24
18B02:  CLRF   x23
18B04:  CLRF   x22
.................... 	soma_cr = 0;
18B06:  CLRF   x21
18B08:  CLRF   x20
18B0A:  CLRF   x1F
18B0C:  CLRF   x1E
.................... 	soma_pr = 0;
18B0E:  CLRF   x29
18B10:  CLRF   x28
18B12:  CLRF   x27
18B14:  CLRF   x26
.................... 	soma_kvar_r = 0;
18B16:  CLRF   x35
18B18:  CLRF   x34
18B1A:  CLRF   x33
18B1C:  CLRF   x32
.................... 	soma_ts = 0;
18B1E:  CLRF   xB7
18B20:  CLRF   xB6
18B22:  CLRF   xB5
18B24:  CLRF   xB4
.................... 	soma_cs = 0;
18B26:  CLRF   xBB
18B28:  CLRF   xBA
18B2A:  CLRF   xB9
18B2C:  CLRF   xB8
.................... 	soma_ps = 0;
18B2E:  CLRF   xBF
18B30:  CLRF   xBE
18B32:  CLRF   xBD
18B34:  CLRF   xBC
.................... 	soma_kvar_s = 0;
18B36:  CLRF   xCB
18B38:  CLRF   xCA
18B3A:  CLRF   xC9
18B3C:  CLRF   xC8
.................... 	soma_tt = 0;
18B3E:  MOVLB  3
18B40:  CLRF   x0E
18B42:  CLRF   x0D
18B44:  CLRF   x0C
18B46:  CLRF   x0B
.................... 	soma_ct = 0;
18B48:  CLRF   x12
18B4A:  CLRF   x11
18B4C:  CLRF   x10
18B4E:  CLRF   x0F
.................... 	soma_pt = 0;
18B50:  CLRF   x16
18B52:  CLRF   x15
18B54:  CLRF   x14
18B56:  CLRF   x13
.................... 	soma_kvar_t = 0;
18B58:  CLRF   x22
18B5A:  CLRF   x21
18B5C:  CLRF   x20
18B5E:  CLRF   x1F
.................... 	soma_cn = 0;
18B60:  CLRF   x47
18B62:  CLRF   x46
18B64:  CLRF   x45
18B66:  CLRF   x44
.................... 
.................... 	mul_buffers_ten_cor();				// multiplica pontos dos buffers de senoide
18B68:  MOVLB  0
18B6A:  GOTO   17A54
.................... 	
.................... 	soma_efi_tr += calcula_soma_efi(soma_tr, 'T');
18B6E:  MOVFF  225,A4D
18B72:  MOVFF  224,A4C
18B76:  MOVFF  223,A4B
18B7A:  MOVFF  222,A4A
18B7E:  MOVLW  54
18B80:  MOVLB  A
18B82:  MOVWF  x4E
18B84:  MOVLB  0
18B86:  RCALL  1843A
18B88:  MOVF   00,W
18B8A:  MOVLB  2
18B8C:  ADDWF  x0E,F
18B8E:  MOVF   01,W
18B90:  ADDWFC x0F,F
18B92:  MOVF   02,W
18B94:  ADDWFC x10,F
18B96:  MOVF   03,W
18B98:  ADDWFC x11,F
.................... 	soma_efi_ts += calcula_soma_efi(soma_ts, 'T');
18B9A:  MOVFF  2B7,A4D
18B9E:  MOVFF  2B6,A4C
18BA2:  MOVFF  2B5,A4B
18BA6:  MOVFF  2B4,A4A
18BAA:  MOVLW  54
18BAC:  MOVLB  A
18BAE:  MOVWF  x4E
18BB0:  MOVLB  0
18BB2:  RCALL  1843A
18BB4:  MOVF   00,W
18BB6:  MOVLB  2
18BB8:  ADDWF  xA4,F
18BBA:  MOVF   01,W
18BBC:  ADDWFC xA5,F
18BBE:  MOVF   02,W
18BC0:  ADDWFC xA6,F
18BC2:  MOVF   03,W
18BC4:  ADDWFC xA7,F
.................... 	soma_efi_tt += calcula_soma_efi(soma_tt, 'T');
18BC6:  MOVFF  30E,A4D
18BCA:  MOVFF  30D,A4C
18BCE:  MOVFF  30C,A4B
18BD2:  MOVFF  30B,A4A
18BD6:  MOVLW  54
18BD8:  MOVLB  A
18BDA:  MOVWF  x4E
18BDC:  MOVLB  0
18BDE:  RCALL  1843A
18BE0:  MOVF   00,W
18BE2:  MOVLB  2
18BE4:  ADDWF  xFB,F
18BE6:  MOVF   01,W
18BE8:  ADDWFC xFC,F
18BEA:  MOVF   02,W
18BEC:  ADDWFC xFD,F
18BEE:  MOVF   03,W
18BF0:  ADDWFC xFE,F
.................... 		
.................... 	if (modo_funca == 1){
18BF2:  MOVLB  4
18BF4:  DECFSZ xA7,W
18BF6:  BRA    18F2E
.................... 		soma_efi_cr += calcula_soma_efi(soma_cr, 'C');
18BF8:  MOVFF  221,A4D
18BFC:  MOVFF  220,A4C
18C00:  MOVFF  21F,A4B
18C04:  MOVFF  21E,A4A
18C08:  MOVLW  43
18C0A:  MOVLB  A
18C0C:  MOVWF  x4E
18C0E:  MOVLB  0
18C10:  RCALL  1843A
18C12:  MOVF   00,W
18C14:  MOVLB  2
18C16:  ADDWF  x12,F
18C18:  MOVF   01,W
18C1A:  ADDWFC x13,F
18C1C:  MOVF   02,W
18C1E:  ADDWFC x14,F
18C20:  MOVF   03,W
18C22:  ADDWFC x15,F
.................... 		soma_efi_cs += calcula_soma_efi(soma_cs, 'C');
18C24:  MOVFF  2BB,A4D
18C28:  MOVFF  2BA,A4C
18C2C:  MOVFF  2B9,A4B
18C30:  MOVFF  2B8,A4A
18C34:  MOVLW  43
18C36:  MOVLB  A
18C38:  MOVWF  x4E
18C3A:  MOVLB  0
18C3C:  CALL   1843A
18C40:  MOVF   00,W
18C42:  MOVLB  2
18C44:  ADDWF  xA8,F
18C46:  MOVF   01,W
18C48:  ADDWFC xA9,F
18C4A:  MOVF   02,W
18C4C:  ADDWFC xAA,F
18C4E:  MOVF   03,W
18C50:  ADDWFC xAB,F
.................... 		soma_efi_ct += calcula_soma_efi(soma_ct, 'C');
18C52:  MOVFF  312,A4D
18C56:  MOVFF  311,A4C
18C5A:  MOVFF  310,A4B
18C5E:  MOVFF  30F,A4A
18C62:  MOVLW  43
18C64:  MOVLB  A
18C66:  MOVWF  x4E
18C68:  MOVLB  0
18C6A:  CALL   1843A
18C6E:  MOVF   00,W
18C70:  MOVLB  2
18C72:  ADDWF  xFF,F
18C74:  MOVF   01,W
18C76:  MOVLB  3
18C78:  ADDWFC x00,F
18C7A:  MOVF   02,W
18C7C:  ADDWFC x01,F
18C7E:  MOVF   03,W
18C80:  ADDWFC x02,F
.................... 		soma_efi_cn += calcula_soma_efi(soma_cn, 'C');
18C82:  MOVFF  347,A4D
18C86:  MOVFF  346,A4C
18C8A:  MOVFF  345,A4B
18C8E:  MOVFF  344,A4A
18C92:  MOVLW  43
18C94:  MOVLB  A
18C96:  MOVWF  x4E
18C98:  MOVLB  0
18C9A:  CALL   1843A
18C9E:  MOVF   00,W
18CA0:  MOVLB  3
18CA2:  ADDWF  x48,F
18CA4:  MOVF   01,W
18CA6:  ADDWFC x49,F
18CA8:  MOVF   02,W
18CAA:  ADDWFC x4A,F
18CAC:  MOVF   03,W
18CAE:  ADDWFC x4B,F
.................... 		
.................... 		soma_pot_efi_r += (signed int32)(soma_pr /10 / NRO_AMOSTRAS);
18CB0:  BCF    FD8.1
18CB2:  MOVFF  229,A71
18CB6:  MOVFF  228,A70
18CBA:  MOVFF  227,A6F
18CBE:  MOVFF  226,A6E
18CC2:  MOVLB  A
18CC4:  CLRF   x75
18CC6:  CLRF   x74
18CC8:  CLRF   x73
18CCA:  MOVLW  0A
18CCC:  MOVWF  x72
18CCE:  MOVLB  0
18CD0:  CALL   1796A
18CD4:  MOVFF  03,A4D
18CD8:  MOVFF  02,A4C
18CDC:  MOVFF  01,A4B
18CE0:  MOVFF  00,A4A
18CE4:  BCF    FD8.1
18CE6:  MOVFF  03,A71
18CEA:  MOVFF  02,A70
18CEE:  MOVFF  01,A6F
18CF2:  MOVFF  00,A6E
18CF6:  MOVLB  A
18CF8:  CLRF   x75
18CFA:  CLRF   x74
18CFC:  CLRF   x73
18CFE:  MOVLW  40
18D00:  MOVWF  x72
18D02:  MOVLB  0
18D04:  CALL   1796A
18D08:  MOVF   00,W
18D0A:  MOVLB  2
18D0C:  ADDWF  x2E,F
18D0E:  MOVF   01,W
18D10:  ADDWFC x2F,F
18D12:  MOVF   02,W
18D14:  ADDWFC x30,F
18D16:  MOVF   03,W
18D18:  ADDWFC x31,F
.................... 		soma_pot_efi_s += (signed int32)(soma_ps /10 / NRO_AMOSTRAS);
18D1A:  BCF    FD8.1
18D1C:  MOVFF  2BF,A71
18D20:  MOVFF  2BE,A70
18D24:  MOVFF  2BD,A6F
18D28:  MOVFF  2BC,A6E
18D2C:  MOVLB  A
18D2E:  CLRF   x75
18D30:  CLRF   x74
18D32:  CLRF   x73
18D34:  MOVLW  0A
18D36:  MOVWF  x72
18D38:  MOVLB  0
18D3A:  CALL   1796A
18D3E:  MOVFF  03,A4D
18D42:  MOVFF  02,A4C
18D46:  MOVFF  01,A4B
18D4A:  MOVFF  00,A4A
18D4E:  BCF    FD8.1
18D50:  MOVFF  03,A71
18D54:  MOVFF  02,A70
18D58:  MOVFF  01,A6F
18D5C:  MOVFF  00,A6E
18D60:  MOVLB  A
18D62:  CLRF   x75
18D64:  CLRF   x74
18D66:  CLRF   x73
18D68:  MOVLW  40
18D6A:  MOVWF  x72
18D6C:  MOVLB  0
18D6E:  CALL   1796A
18D72:  MOVF   00,W
18D74:  MOVLB  2
18D76:  ADDWF  xC4,F
18D78:  MOVF   01,W
18D7A:  ADDWFC xC5,F
18D7C:  MOVF   02,W
18D7E:  ADDWFC xC6,F
18D80:  MOVF   03,W
18D82:  ADDWFC xC7,F
.................... 		soma_pot_efi_t += (signed int32)(soma_pt /10 / NRO_AMOSTRAS);
18D84:  BCF    FD8.1
18D86:  MOVFF  316,A71
18D8A:  MOVFF  315,A70
18D8E:  MOVFF  314,A6F
18D92:  MOVFF  313,A6E
18D96:  MOVLB  A
18D98:  CLRF   x75
18D9A:  CLRF   x74
18D9C:  CLRF   x73
18D9E:  MOVLW  0A
18DA0:  MOVWF  x72
18DA2:  MOVLB  0
18DA4:  CALL   1796A
18DA8:  MOVFF  03,A4D
18DAC:  MOVFF  02,A4C
18DB0:  MOVFF  01,A4B
18DB4:  MOVFF  00,A4A
18DB8:  BCF    FD8.1
18DBA:  MOVFF  03,A71
18DBE:  MOVFF  02,A70
18DC2:  MOVFF  01,A6F
18DC6:  MOVFF  00,A6E
18DCA:  MOVLB  A
18DCC:  CLRF   x75
18DCE:  CLRF   x74
18DD0:  CLRF   x73
18DD2:  MOVLW  40
18DD4:  MOVWF  x72
18DD6:  MOVLB  0
18DD8:  CALL   1796A
18DDC:  MOVF   00,W
18DDE:  MOVLB  3
18DE0:  ADDWF  x1B,F
18DE2:  MOVF   01,W
18DE4:  ADDWFC x1C,F
18DE6:  MOVF   02,W
18DE8:  ADDWFC x1D,F
18DEA:  MOVF   03,W
18DEC:  ADDWFC x1E,F
.................... 		soma_pot_kvar_r += (signed int32)(soma_kvar_r /10 / NRO_AMOSTRAS);
18DEE:  BCF    FD8.1
18DF0:  MOVFF  235,A71
18DF4:  MOVFF  234,A70
18DF8:  MOVFF  233,A6F
18DFC:  MOVFF  232,A6E
18E00:  MOVLB  A
18E02:  CLRF   x75
18E04:  CLRF   x74
18E06:  CLRF   x73
18E08:  MOVLW  0A
18E0A:  MOVWF  x72
18E0C:  MOVLB  0
18E0E:  CALL   1796A
18E12:  MOVFF  03,A4D
18E16:  MOVFF  02,A4C
18E1A:  MOVFF  01,A4B
18E1E:  MOVFF  00,A4A
18E22:  BCF    FD8.1
18E24:  MOVFF  03,A71
18E28:  MOVFF  02,A70
18E2C:  MOVFF  01,A6F
18E30:  MOVFF  00,A6E
18E34:  MOVLB  A
18E36:  CLRF   x75
18E38:  CLRF   x74
18E3A:  CLRF   x73
18E3C:  MOVLW  40
18E3E:  MOVWF  x72
18E40:  MOVLB  0
18E42:  CALL   1796A
18E46:  MOVF   00,W
18E48:  MOVLB  2
18E4A:  ADDWF  x3A,F
18E4C:  MOVF   01,W
18E4E:  ADDWFC x3B,F
18E50:  MOVF   02,W
18E52:  ADDWFC x3C,F
18E54:  MOVF   03,W
18E56:  ADDWFC x3D,F
.................... 		soma_pot_kvar_s += (signed int32)(soma_kvar_s /10 / NRO_AMOSTRAS);
18E58:  BCF    FD8.1
18E5A:  MOVFF  2CB,A71
18E5E:  MOVFF  2CA,A70
18E62:  MOVFF  2C9,A6F
18E66:  MOVFF  2C8,A6E
18E6A:  MOVLB  A
18E6C:  CLRF   x75
18E6E:  CLRF   x74
18E70:  CLRF   x73
18E72:  MOVLW  0A
18E74:  MOVWF  x72
18E76:  MOVLB  0
18E78:  CALL   1796A
18E7C:  MOVFF  03,A4D
18E80:  MOVFF  02,A4C
18E84:  MOVFF  01,A4B
18E88:  MOVFF  00,A4A
18E8C:  BCF    FD8.1
18E8E:  MOVFF  03,A71
18E92:  MOVFF  02,A70
18E96:  MOVFF  01,A6F
18E9A:  MOVFF  00,A6E
18E9E:  MOVLB  A
18EA0:  CLRF   x75
18EA2:  CLRF   x74
18EA4:  CLRF   x73
18EA6:  MOVLW  40
18EA8:  MOVWF  x72
18EAA:  MOVLB  0
18EAC:  CALL   1796A
18EB0:  MOVF   00,W
18EB2:  MOVLB  2
18EB4:  ADDWF  xD0,F
18EB6:  MOVF   01,W
18EB8:  ADDWFC xD1,F
18EBA:  MOVF   02,W
18EBC:  ADDWFC xD2,F
18EBE:  MOVF   03,W
18EC0:  ADDWFC xD3,F
.................... 		soma_pot_kvar_t += (signed int32)(soma_kvar_t /10 / NRO_AMOSTRAS);
18EC2:  BCF    FD8.1
18EC4:  MOVFF  322,A71
18EC8:  MOVFF  321,A70
18ECC:  MOVFF  320,A6F
18ED0:  MOVFF  31F,A6E
18ED4:  MOVLB  A
18ED6:  CLRF   x75
18ED8:  CLRF   x74
18EDA:  CLRF   x73
18EDC:  MOVLW  0A
18EDE:  MOVWF  x72
18EE0:  MOVLB  0
18EE2:  CALL   1796A
18EE6:  MOVFF  03,A4D
18EEA:  MOVFF  02,A4C
18EEE:  MOVFF  01,A4B
18EF2:  MOVFF  00,A4A
18EF6:  BCF    FD8.1
18EF8:  MOVFF  03,A71
18EFC:  MOVFF  02,A70
18F00:  MOVFF  01,A6F
18F04:  MOVFF  00,A6E
18F08:  MOVLB  A
18F0A:  CLRF   x75
18F0C:  CLRF   x74
18F0E:  CLRF   x73
18F10:  MOVLW  40
18F12:  MOVWF  x72
18F14:  MOVLB  0
18F16:  CALL   1796A
18F1A:  MOVF   00,W
18F1C:  MOVLB  3
18F1E:  ADDWF  x27,F
18F20:  MOVF   01,W
18F22:  ADDWFC x28,F
18F24:  MOVF   02,W
18F26:  ADDWFC x29,F
18F28:  MOVF   03,W
18F2A:  ADDWFC x2A,F
18F2C:  MOVLB  4
.................... 	}	
.................... 	conta_media_ten++;
18F2E:  MOVLB  3
18F30:  INCF   x60,F
.................... 	finaliza_calculo_tensao_corrente();
18F32:  MOVLB  0
18F34:  GOTO   18692
.................... 	med_ten_ok = 0;
18F38:  BCF    1E.3
18F3A:  GOTO   1BFEE (RETURN)
.................... }
.................... 
.................... 
.................... #include "st_pots.c"
.................... /*;***********************************************************************
.................... ; Empresa: SULTECH SISTEMAS ELETRONICOS								     *
.................... ; Modulo: st_pots                                                        *
.................... ; Funcao: MODULO ROTINAS DE CALCULOS de potencias e FP					 *
.................... ; Responsavel: VAGNER SANTOS											 *
.................... ; Modificado ; VAGNER SANTOS                                             *
.................... ; Inicio: 30/08/2000                                                     *
.................... ; Revisao: RENGAV ARIERREF SOD SOTNAS                                    *
.................... ;**********************************************************************  */
.................... 
.................... 
.................... void busca_mul_tc(void){
.................... 	char aux_bx;
.................... 	word aux_wx;
.................... 	for (aux_bx = 0; aux_bx < NRO_POSI_TC; aux_bx++)
*
07284:  MOVLB  A
07286:  CLRF   x4B
07288:  MOVF   x4B,W
0728A:  SUBLW  24
0728C:  BNC   7316
.................... 		{
.................... 		aux_wx = tabela_tc[aux_bx];
0728E:  BCF    FD8.0
07290:  RLCF   x4B,W
07292:  CLRF   03
07294:  MOVLB  0
07296:  CALL   0128
0729A:  TBLRD*+
0729C:  MOVFF  FF5,03
072A0:  MOVLB  A
072A2:  MOVWF  x4C
072A4:  MOVFF  03,A4D
.................... 		if (aux_wx == valor_tc){
072A8:  MOVLB  4
072AA:  MOVF   xBF,W
072AC:  MOVLB  A
072AE:  SUBWF  x4C,W
072B0:  BNZ   7312
072B2:  MOVLB  4
072B4:  MOVF   xC0,W
072B6:  MOVLB  A
072B8:  SUBWF  x4D,W
072BA:  BNZ   7312
.................... 			mul_tc = (float)(valor_tc);
072BC:  MOVFF  4C0,A7E
072C0:  MOVFF  4BF,A7D
072C4:  MOVLB  0
072C6:  CALL   2924
072CA:  MOVFF  03,351
072CE:  MOVFF  02,350
072D2:  MOVFF  01,34F
072D6:  MOVFF  00,34E
.................... 			mul_tc = (float)(mul_tc/500);
072DA:  MOVFF  351,A83
072DE:  MOVFF  350,A82
072E2:  MOVFF  34F,A81
072E6:  MOVFF  34E,A80
072EA:  MOVLB  A
072EC:  CLRF   x87
072EE:  CLRF   x86
072F0:  MOVLW  7A
072F2:  MOVWF  x85
072F4:  MOVLW  87
072F6:  MOVWF  x84
072F8:  MOVLB  0
072FA:  CALL   295A
072FE:  MOVFF  03,351
07302:  MOVFF  02,350
07306:  MOVFF  01,34F
0730A:  MOVFF  00,34E
.................... 			break;
0730E:  MOVLB  A
07310:  BRA    7316
.................... 		}
07312:  INCF   x4B,F
07314:  BRA    7288
.................... 	}
07316:  MOVLB  0
07318:  RETURN 0
.................... }
.................... 
.................... void calcula_fundo_escala_corrente(void){
*
00004:  RETURN 0
.................... 
.................... }
.................... 
.................... void zera_soma_pot(void){
.................... 	soma_ten_r = 0;
*
0231E:  MOVLB  2
02320:  CLRF   x19
02322:  CLRF   x18
02324:  CLRF   x17
02326:  CLRF   x16
.................... 	soma_cor_r = 0;
02328:  CLRF   x1D
0232A:  CLRF   x1C
0232C:  CLRF   x1B
0232E:  CLRF   x1A
.................... 	soma_pot_r = 0;
02330:  CLRF   x03
02332:  CLRF   x02
02334:  CLRF   x01
02336:  CLRF   x00
.................... 	soma_ten_s = 0;
02338:  CLRF   xAF
0233A:  CLRF   xAE
0233C:  CLRF   xAD
0233E:  CLRF   xAC
.................... 	soma_cor_s = 0;
02340:  CLRF   xB3
02342:  CLRF   xB2
02344:  CLRF   xB1
02346:  CLRF   xB0
.................... 	soma_pot_s = 0;
02348:  CLRF   x99
0234A:  CLRF   x98
0234C:  CLRF   x97
0234E:  CLRF   x96
.................... 	soma_ten_t = 0;
02350:  MOVLB  3
02352:  CLRF   x0A
02354:  CLRF   x09
02356:  CLRF   x08
02358:  CLRF   x07
.................... 	soma_cor_t = 0;
0235A:  CLRF   x06
0235C:  CLRF   x05
0235E:  CLRF   x04
02360:  CLRF   x03
.................... 	soma_pot_t = 0;
02362:  MOVLB  2
02364:  CLRF   xF0
02366:  CLRF   xEF
02368:  CLRF   xEE
0236A:  CLRF   xED
0236C:  MOVLB  0
0236E:  GOTO   273C (RETURN)
.................... }
.................... 
.................... void calculo_potencias(char fase){
.................... 	char indice_fp;
.................... 	word tensao;
.................... 	word corrente;
.................... 	word pot_ativa;
.................... 	word pot_aparente;
.................... 	word pot_reativa;
.................... 	int32 aux_lx;
.................... 	signed byte os_cor;
.................... 	signed byte os_ten;
.................... 	signed byte os_pot;
.................... 	signed int32 soma_efi_p;
.................... 	signed int32 soma_efi_kvar;
.................... 	
.................... 	float aux_f1;
.................... 	float aux_f2;
.................... 
.................... 	short sentido;
.................... 
.................... 	#if (com_rep == true)
.................... 		modo_rep = 1;
.................... 	#endif
.................... 	
.................... 	#if (com_rep == true)
.................... 		if (modo_rep == 1){
.................... 			if (time_out_modo_rep != 0){
.................... 				if (atualizar == false){
.................... 					return;
.................... 				}
.................... 				atualizar = false;
.................... 				
.................... 				if (fase == 'R'){
.................... 					aux_l1 = pot_ativa_tot;
.................... 					aux_l2 = pot_reativa_tot;
.................... 					pot_aparente_tot = sqrt((aux_l1 * aux_l1) + ( aux_l2 * aux_l2));
.................... 					if (pot_ativa_tot > pot_aparente_tot){
.................... 						pot_ativa_tot = pot_aparente_tot;
.................... 					}
.................... 						
.................... 					sentido_r = 0;
.................... 					pot_aparente_r = (word)(pot_aparente_tot / 3);
.................... 					if (pot_ativa_r > pot_aparente_r){
.................... 						pot_ativa_r = pot_aparente_r;
.................... 					}
.................... 					
.................... 					if (tensao_r > TENSAO_FALTA){
.................... 						aux_l1 = pot_aparente_r;
.................... 						aux_l1 = aux_l1 * 512000;
.................... 						aux_l2 = tensao_r;
.................... 
.................... 						if (valor_tp != 1){
.................... 							aux_l2 = aux_l2 * valor_tp;
.................... 						}
.................... 						aux_l1 = aux_l1 / aux_l2;
.................... 						corrente_r = (word)(aux_l1);
.................... 					}
.................... 					else{
.................... 						tensao_r = 0;
.................... 						corrente_r = 0;
.................... 					}
.................... 					aux_w1 = corrente_r / 8;
.................... 					if (aux_w1 > cor_minima_rep){
.................... 						status_banco_minimo = 0;
.................... 					}
.................... 			/* calculo do fator de potencia  */    
.................... 					if (pot_ativa_tot != pot_aparente_tot){
.................... 						aux_l1 = pot_ativa_tot;
.................... 						aux_l1 = (int32)(aux_l1 * 1024);
.................... 						fator_pot = (word)(aux_l1 / pot_aparente_tot);
.................... 						
.................... 						if (tarif_ind_rep == 1){
.................... 							fator_pot = fator_pot * (-1);
.................... 						}
.................... 					}
.................... 					else{
.................... 						fator_pot = 1024;
.................... 					}
.................... 					fator_pot_r = fator_pot;
.................... 					fator_pot_s = fator_pot_r;
.................... 					fator_pot_t = fator_pot_r;
.................... 
.................... 					sentido_s = 0;
.................... 					pot_aparente_s = pot_aparente_r;
.................... 					if (tensao_s > TENSAO_FALTA){
.................... 						aux_l1 = pot_aparente_s;
.................... 						aux_l1 = aux_l1 * 512000;
.................... 						aux_l2 = tensao_s;
.................... 						if (valor_tp != 1){
.................... 							aux_l2 = aux_l2 * valor_tp;
.................... 						}
.................... 						aux_l1 = aux_l1 / aux_l2;
.................... 						corrente_s = (word)(aux_l1);
.................... 					}
.................... 					else{
.................... 						tensao_s = 0;
.................... 						corrente_s = 0;
.................... 					}
.................... 					sentido_t = 0;
.................... 					pot_aparente_t = pot_aparente_r;
.................... 					if (tensao_t > TENSAO_FALTA){
.................... 						aux_l1 = pot_aparente_t;
.................... 						aux_l1 = aux_l1 * 512000;
.................... 						aux_l2 = tensao_t;
.................... 						if (valor_tp != 1){
.................... 							aux_l2 = aux_l2 * valor_tp;
.................... 						}
.................... 						aux_l1 = aux_l1 / aux_l2;
.................... 						corrente_t = (word)(aux_l1);
.................... 					}
.................... 					else{
.................... 						tensao_t = 0;
.................... 						corrente_t = 0;
.................... 					}
.................... 				}
.................... 
.................... 				#if (com_cht == true)
.................... 					for ( aux_b1 = 0; aux_b1 < NRO_CHT; aux_b1++){
.................... 						if (fase == 'R'){
.................... 							CHT_cr[aux_b1]=0;
.................... 						}
.................... 						else if (fase == 'S'){
.................... 							CHT_cs[aux_b1]=0;
.................... 						}
.................... 						else{
.................... 							CHT_ct[aux_b1]=0;
.................... 						}
.................... 					}
.................... 				#endif
.................... 				return;
.................... 			}
.................... 			else{
.................... 				corrente_r = 0;
.................... 				corrente_s = 0;
.................... 				corrente_t = 0;
.................... 				pot_ativa_tot = 0;
.................... 				pot_reativa_tot = 0;
.................... 				pot_aparente = 0;
.................... 				dem_ativa = 0;
.................... 				dem_reativa = 0;
.................... 				dem_ativa_proj = 0;
.................... 				dem_reativa_proj = 0;
.................... 				pot_ativa_r = 0;
.................... 				pot_ativa_s = 0;
.................... 				pot_ativa_t = 0;
.................... 				pot_reativa_r = 0;
.................... 				pot_reativa_s = 0;
.................... 				pot_reativa_t = 0;
.................... 				pot_aparente_r = 0;
.................... 				pot_aparente_s = 0;
.................... 				pot_aparente_r = 0;
.................... 				fator_pot = 1024;
.................... 				fator_pot_r = 1024;
.................... 				fator_pot_s = 1024;
.................... 				fator_pot_r = 1024;
.................... 				fator_carga = 1024;
.................... 				fator_demanda = 1024;
.................... 				seg_falt_rep = 0;
.................... 				puls_c1_rep = 0;
.................... 				puls_c2_rep = 0;
.................... 				return;
.................... 			}
.................... 		}
.................... 	#endif
.................... 
.................... 
.................... 	if (fase == 'R'){
*
18F3E:  MOVLB  A
18F40:  MOVF   x4A,W
18F42:  SUBLW  52
18F44:  BNZ   18F86
.................... 		tensao = tensao_r;
18F46:  MOVFF  251,A4D
18F4A:  MOVFF  250,A4C
.................... 		corrente = corrente_r;
18F4E:  MOVFF  253,A4F
18F52:  MOVFF  252,A4E
.................... 		soma_efi_p = soma_efi_pr;
18F56:  MOVFF  22D,A60
18F5A:  MOVFF  22C,A5F
18F5E:  MOVFF  22B,A5E
18F62:  MOVFF  22A,A5D
.................... 		soma_efi_kvar = soma_efi_kvar_r;
18F66:  MOVFF  239,A64
18F6A:  MOVFF  238,A63
18F6E:  MOVFF  237,A62
18F72:  MOVFF  236,A61
.................... 		os_cor = os_cor_r;
18F76:  MOVFF  4B1,A5A
.................... 		os_ten = os_ten_r;
18F7A:  MOVFF  4A8,A5B
.................... 		os_pot = os_pot_r;
18F7E:  MOVFF  4B4,A5C
.................... 		indice_fp = 0;
18F82:  CLRF   x4B
.................... 	}
18F84:  BRA    1901A
.................... 	else if (fase == 'S'){
18F86:  MOVF   x4A,W
18F88:  SUBLW  53
18F8A:  BNZ   18FCE
.................... 		tensao = tensao_s;
18F8C:  MOVFF  2D5,A4D
18F90:  MOVFF  2D4,A4C
.................... 		corrente = corrente_s;
18F94:  MOVFF  2D7,A4F
18F98:  MOVFF  2D6,A4E
.................... 		soma_efi_p = soma_efi_ps;
18F9C:  MOVFF  2C3,A60
18FA0:  MOVFF  2C2,A5F
18FA4:  MOVFF  2C1,A5E
18FA8:  MOVFF  2C0,A5D
.................... 		soma_efi_kvar = soma_efi_kvar_s;
18FAC:  MOVFF  2CF,A64
18FB0:  MOVFF  2CE,A63
18FB4:  MOVFF  2CD,A62
18FB8:  MOVFF  2CC,A61
.................... 		os_cor = os_cor_s;
18FBC:  MOVFF  4B2,A5A
.................... 		os_ten = os_ten_s;
18FC0:  MOVFF  4A9,A5B
.................... 		os_pot = os_pot_s;
18FC4:  MOVFF  4B5,A5C
.................... 		indice_fp = 1;
18FC8:  MOVLW  01
18FCA:  MOVWF  x4B
.................... 	}
18FCC:  BRA    1901A
.................... 	else if (fase == 'T'){
18FCE:  MOVF   x4A,W
18FD0:  SUBLW  54
18FD2:  BNZ   19016
.................... 		tensao = tensao_t;
18FD4:  MOVFF  32C,A4D
18FD8:  MOVFF  32B,A4C
.................... 		corrente = corrente_t;
18FDC:  MOVFF  32E,A4F
18FE0:  MOVFF  32D,A4E
.................... 		soma_efi_p = soma_efi_pt;
18FE4:  MOVFF  31A,A60
18FE8:  MOVFF  319,A5F
18FEC:  MOVFF  318,A5E
18FF0:  MOVFF  317,A5D
.................... 		soma_efi_kvar = soma_efi_kvar_t;
18FF4:  MOVFF  326,A64
18FF8:  MOVFF  325,A63
18FFC:  MOVFF  324,A62
19000:  MOVFF  323,A61
.................... 		os_cor = os_cor_t;
19004:  MOVFF  4B3,A5A
.................... 		os_ten = os_ten_t;
19008:  MOVFF  4AA,A5B
.................... 		os_pot = os_pot_t;
1900C:  MOVFF  4B6,A5C
.................... 		indice_fp = 2;
19010:  MOVLW  02
19012:  MOVWF  x4B
.................... 	}
19014:  BRA    1901A
.................... 	else{
.................... 		return;
19016:  GOTO   198C6
.................... 	}
.................... 
.................... 
.................... 	if (tensao > TENSAO_FALTA){	
1901A:  MOVF   x4D,W
1901C:  SUBLW  0B
1901E:  BTFSC  FD8.0
19020:  GOTO   197EE
19024:  XORLW  FF
19026:  BNZ   19032
19028:  MOVF   x4C,W
1902A:  SUBLW  80
1902C:  BTFSC  FD8.0
1902E:  GOTO   197EE
.................... 		aux_w1 = 80;
19032:  MOVLB  3
19034:  CLRF   x63
19036:  MOVLW  50
19038:  MOVWF  x62
.................... 		sentido = 0;
1903A:  MOVLB  A
1903C:  BCF    x6D.0
.................... 		if (corrente > aux_w1){
1903E:  MOVLB  3
19040:  MOVF   x63,W
19042:  MOVLB  A
19044:  SUBWF  x4F,W
19046:  BTFSS  FD8.0
19048:  BRA    1971C
1904A:  BNZ   1905C
1904C:  MOVF   x4E,W
1904E:  MOVLB  3
19050:  SUBWF  x62,W
19052:  BTFSS  FD8.0
19054:  BRA    1905A
19056:  MOVLB  A
19058:  BRA    1971C
1905A:  MOVLB  A
.................... 			status_banco_minimo = 0;
1905C:  CLRF   57
.................... 			if (make8(soma_efi_p, 3) != 0){
1905E:  MOVF   x60,W
19060:  BZ    1906E
.................... 				sentido = 1;
19062:  BSF    x6D.0
.................... 				soma_efi_p = ~soma_efi_p;
19064:  COMF   x5D,F
19066:  COMF   x5E,F
19068:  COMF   x5F,F
1906A:  COMF   x60,F
.................... 				soma_efi_p = soma_efi_p & 0x00ffffff;
1906C:  CLRF   x60
.................... 			}
.................... 			soma_efi_p_tmp = soma_efi_p;
1906E:  MOVFF  A60,241
19072:  MOVFF  A5F,240
19076:  MOVFF  A5E,23F
1907A:  MOVFF  A5D,23E
.................... 
.................... 			if (make8(soma_efi_kvar, 3) != 0 ){
1907E:  MOVF   x64,W
19080:  BZ    190A0
.................... 				sinal_fp[indice_fp] = '-';
19082:  CLRF   03
19084:  MOVF   x4B,W
19086:  ADDLW  8A
19088:  MOVWF  FE9
1908A:  MOVLW  02
1908C:  ADDWFC 03,W
1908E:  MOVWF  FEA
19090:  MOVLW  2D
19092:  MOVWF  FEF
.................... 				soma_efi_kvar = ~soma_efi_kvar;
19094:  COMF   x61,F
19096:  COMF   x62,F
19098:  COMF   x63,F
1909A:  COMF   x64,F
.................... 				soma_efi_kvar = soma_efi_kvar & 0x00ffffff;
1909C:  CLRF   x64
.................... 			}
1909E:  BRA    190B2
.................... 			else{
.................... 				sinal_fp[indice_fp] = '+';
190A0:  CLRF   03
190A2:  MOVF   x4B,W
190A4:  ADDLW  8A
190A6:  MOVWF  FE9
190A8:  MOVLW  02
190AA:  ADDWFC 03,W
190AC:  MOVWF  FEA
190AE:  MOVLW  2B
190B0:  MOVWF  FEF
.................... 			}
.................... 				
.................... 			#if (Magmattec == true)
.................... 				aux_l1 = (int32)(soma_efi_p / 32);
190B2:  BCF    FD8.1
190B4:  MOVFF  A60,A71
190B8:  MOVFF  A5F,A70
190BC:  MOVFF  A5E,A6F
190C0:  MOVFF  A5D,A6E
190C4:  CLRF   x75
190C6:  CLRF   x74
190C8:  CLRF   x73
190CA:  MOVLW  20
190CC:  MOVWF  x72
190CE:  MOVLB  0
190D0:  CALL   1796A
190D4:  MOVFF  03,373
190D8:  MOVFF  02,372
190DC:  MOVFF  01,371
190E0:  MOVFF  00,370
.................... 			#else
.................... 				aux_l1 = (int32)(soma_efi_p / 64);
.................... 			#endif
.................... 
.................... 			aux_sw1 = 1024;
190E4:  MOVLW  04
190E6:  MOVLB  3
190E8:  MOVWF  x6D
190EA:  CLRF   x6C
.................... 			if (fase == 'R'){
190EC:  MOVLB  A
190EE:  MOVF   x4A,W
190F0:  SUBLW  52
190F2:  BNZ   19110
.................... 				if (corrente_r > 40){
190F4:  MOVLB  2
190F6:  MOVF   x53,F
190F8:  BNZ   19100
190FA:  MOVF   x52,W
190FC:  SUBLW  28
190FE:  BC    1910C
.................... 					aux_sw1 -= 10;
19100:  MOVLW  0A
19102:  MOVLB  3
19104:  SUBWF  x6C,F
19106:  MOVLW  00
19108:  SUBWFB x6D,F
1910A:  MOVLB  2
.................... 				}
.................... 			}
1910C:  BRA    19148
1910E:  MOVLB  A
.................... 			else if (fase == 'S'){
19110:  MOVF   x4A,W
19112:  SUBLW  53
19114:  BNZ   19132
.................... 				if (corrente_s > 40){
19116:  MOVLB  2
19118:  MOVF   xD7,F
1911A:  BNZ   19122
1911C:  MOVF   xD6,W
1911E:  SUBLW  28
19120:  BC    1912E
.................... 					aux_sw1 -= 10;
19122:  MOVLW  0A
19124:  MOVLB  3
19126:  SUBWF  x6C,F
19128:  MOVLW  00
1912A:  SUBWFB x6D,F
1912C:  MOVLB  2
.................... 				}
.................... 			}
1912E:  BRA    19148
19130:  MOVLB  A
.................... 			else{
.................... 				if (corrente_t > 40){
19132:  MOVLB  3
19134:  MOVF   x2E,F
19136:  BNZ   1913E
19138:  MOVF   x2D,W
1913A:  SUBLW  28
1913C:  BC    19146
.................... 					aux_sw1 -= 10;
1913E:  MOVLW  0A
19140:  SUBWF  x6C,F
19142:  MOVLW  00
19144:  SUBWFB x6D,F
19146:  MOVLB  2
.................... 				}
.................... 			}
.................... 			aux_sw1 += os_pot;
19148:  CLRF   03
1914A:  MOVLB  A
1914C:  MOVF   x5C,W
1914E:  BTFSC  FE8.7
19150:  DECF   03,F
19152:  MOVLB  3
19154:  ADDWF  x6C,F
19156:  MOVF   03,W
19158:  ADDWFC x6D,F
.................... 			aux_sw1 += os_cor;
1915A:  CLRF   03
1915C:  MOVLB  A
1915E:  MOVF   x5A,W
19160:  BTFSC  FE8.7
19162:  DECF   03,F
19164:  MOVLB  3
19166:  ADDWF  x6C,F
19168:  MOVF   03,W
1916A:  ADDWFC x6D,F
.................... 			aux_sw1 += os_ten;
1916C:  CLRF   03
1916E:  MOVLB  A
19170:  MOVF   x5B,W
19172:  BTFSC  FE8.7
19174:  DECF   03,F
19176:  MOVLB  3
19178:  ADDWF  x6C,F
1917A:  MOVF   03,W
1917C:  ADDWFC x6D,F
.................... 			aux_l2 = (int32)(aux_l1 * aux_sw1);
1917E:  MOVFF  36C,00
19182:  MOVFF  36D,01
19186:  CLRF   02
19188:  CLRF   03
1918A:  BTFSS  01.7
1918C:  BRA    19192
1918E:  DECF   02,F
19190:  DECF   03,F
19192:  MOVFF  03,A71
19196:  MOVFF  02,A70
1919A:  MOVFF  01,A6F
1919E:  MOVFF  00,A6E
191A2:  MOVFF  373,A75
191A6:  MOVFF  372,A74
191AA:  MOVFF  371,A73
191AE:  MOVFF  370,A72
191B2:  MOVFF  03,A79
191B6:  MOVFF  02,A78
191BA:  MOVFF  01,A77
191BE:  MOVFF  00,A76
191C2:  MOVLB  0
191C4:  CALL   67FC
191C8:  MOVFF  03,377
191CC:  MOVFF  02,376
191D0:  MOVFF  01,375
191D4:  MOVFF  00,374
.................... 			aux_l2 = (int32)(aux_l2 / 1024);
191D8:  MOVLB  3
191DA:  RRCF   x77,W
191DC:  MOVWF  02
191DE:  RRCF   x76,W
191E0:  MOVWF  01
191E2:  RRCF   x75,W
191E4:  MOVWF  00
191E6:  RRCF   02,F
191E8:  RRCF   01,F
191EA:  RRCF   00,F
191EC:  MOVLW  3F
191EE:  ANDWF  02,F
191F0:  CLRF   x77
191F2:  MOVFF  02,376
191F6:  MOVFF  01,375
191FA:  MOVFF  00,374
.................... 			pot_ativa = (word)(aux_l2);
191FE:  MOVFF  375,A51
19202:  MOVFF  374,A50
.................... 			
.................... 			if (fase == 'R'){
19206:  MOVLB  A
19208:  MOVF   x4A,W
1920A:  SUBLW  52
1920C:  BNZ   19250
.................... 				soma_pot_r += pot_ativa;
1920E:  MOVF   x50,W
19210:  MOVLB  2
19212:  ADDWF  x00,F
19214:  MOVLB  A
19216:  MOVF   x51,W
19218:  MOVLB  2
1921A:  ADDWFC x01,F
1921C:  MOVLW  00
1921E:  ADDWFC x02,F
19220:  ADDWFC x03,F
.................... 				pot_ativa = soma_pot_r >> 1;
19222:  BCF    FD8.0
19224:  RRCF   x03,W
19226:  RRCF   x02,W
19228:  RRCF   x01,W
1922A:  MOVWF  01
1922C:  RRCF   x00,W
1922E:  MOVFF  FE8,A50
19232:  MOVLB  A
19234:  MOVFF  01,A51
.................... 				soma_pot_r -= pot_ativa;
19238:  MOVF   x50,W
1923A:  MOVLB  2
1923C:  SUBWF  x00,F
1923E:  MOVLB  A
19240:  MOVF   x51,W
19242:  MOVLB  2
19244:  SUBWFB x01,F
19246:  MOVLW  00
19248:  SUBWFB x02,F
1924A:  SUBWFB x03,F
.................... 			}
1924C:  BRA    192DC
1924E:  MOVLB  A
.................... 			else if (fase == 'S'){
19250:  MOVF   x4A,W
19252:  SUBLW  53
19254:  BNZ   19298
.................... 				soma_pot_s += pot_ativa;
19256:  MOVF   x50,W
19258:  MOVLB  2
1925A:  ADDWF  x96,F
1925C:  MOVLB  A
1925E:  MOVF   x51,W
19260:  MOVLB  2
19262:  ADDWFC x97,F
19264:  MOVLW  00
19266:  ADDWFC x98,F
19268:  ADDWFC x99,F
.................... 				pot_ativa = soma_pot_s >> 1;
1926A:  BCF    FD8.0
1926C:  RRCF   x99,W
1926E:  RRCF   x98,W
19270:  RRCF   x97,W
19272:  MOVWF  01
19274:  RRCF   x96,W
19276:  MOVFF  FE8,A50
1927A:  MOVLB  A
1927C:  MOVFF  01,A51
.................... 				soma_pot_s -= pot_ativa;
19280:  MOVF   x50,W
19282:  MOVLB  2
19284:  SUBWF  x96,F
19286:  MOVLB  A
19288:  MOVF   x51,W
1928A:  MOVLB  2
1928C:  SUBWFB x97,F
1928E:  MOVLW  00
19290:  SUBWFB x98,F
19292:  SUBWFB x99,F
.................... 			}
19294:  BRA    192DC
19296:  MOVLB  A
.................... 			else if (fase == 'T'){
19298:  MOVF   x4A,W
1929A:  SUBLW  54
1929C:  BNZ   192DE
.................... 				soma_pot_t += pot_ativa;
1929E:  MOVF   x50,W
192A0:  MOVLB  2
192A2:  ADDWF  xED,F
192A4:  MOVLB  A
192A6:  MOVF   x51,W
192A8:  MOVLB  2
192AA:  ADDWFC xEE,F
192AC:  MOVLW  00
192AE:  ADDWFC xEF,F
192B0:  ADDWFC xF0,F
.................... 				pot_ativa = soma_pot_t >> 1;
192B2:  BCF    FD8.0
192B4:  RRCF   xF0,W
192B6:  RRCF   xEF,W
192B8:  RRCF   xEE,W
192BA:  MOVWF  01
192BC:  RRCF   xED,W
192BE:  MOVFF  FE8,A50
192C2:  MOVLB  A
192C4:  MOVFF  01,A51
.................... 				soma_pot_t -= pot_ativa;
192C8:  MOVF   x50,W
192CA:  MOVLB  2
192CC:  SUBWF  xED,F
192CE:  MOVLB  A
192D0:  MOVF   x51,W
192D2:  MOVLB  2
192D4:  SUBWFB xEE,F
192D6:  MOVLW  00
192D8:  SUBWFB xEF,F
192DA:  SUBWFB xF0,F
192DC:  MOVLB  A
.................... 			}
.................... 
.................... // calculo da potencia aparente 
.................... 	    	aux_l1 = tensao;
192DE:  MOVLB  3
192E0:  CLRF   x73
192E2:  CLRF   x72
192E4:  MOVFF  A4D,371
192E8:  MOVFF  A4C,370
.................... 		    aux_l1 = aux_l1 * corrente;
192EC:  MOVFF  373,A75
192F0:  MOVFF  372,A74
192F4:  MOVFF  371,A73
192F8:  MOVFF  370,A72
192FC:  MOVLB  A
192FE:  CLRF   x79
19300:  CLRF   x78
19302:  MOVFF  A4F,A77
19306:  MOVFF  A4E,A76
1930A:  MOVLB  0
1930C:  CALL   67FC
19310:  MOVFF  03,373
19314:  MOVFF  02,372
19318:  MOVFF  01,371
1931C:  MOVFF  00,370
.................... 		    aux_l1 = (int32)(aux_l1 / 16000);
19320:  BCF    FD8.1
19322:  MOVFF  373,A73
19326:  MOVFF  372,A72
1932A:  MOVFF  371,A71
1932E:  MOVFF  370,A70
19332:  MOVLB  A
19334:  CLRF   x77
19336:  CLRF   x76
19338:  MOVLW  3E
1933A:  MOVWF  x75
1933C:  MOVLW  80
1933E:  MOVWF  x74
19340:  MOVLB  0
19342:  CALL   6858
19346:  MOVFF  03,373
1934A:  MOVFF  02,372
1934E:  MOVFF  01,371
19352:  MOVFF  00,370
.................... 		    data1_int = (word)(aux_l1);
19356:  MOVFF  371,3F0
1935A:  MOVFF  370,3EF
....................     			
.................... 			pot_aparente = data1_int;		
1935E:  MOVFF  3F0,A53
19362:  MOVFF  3EF,A52
.................... 		   	if (pot_ativa > pot_aparente){
19366:  MOVLB  A
19368:  MOVF   x53,W
1936A:  SUBWF  x51,W
1936C:  BNC   1937E
1936E:  BNZ   19376
19370:  MOVF   x50,W
19372:  SUBWF  x52,W
19374:  BC    1937E
.................... 			   	pot_ativa = pot_aparente;
19376:  MOVFF  A53,A51
1937A:  MOVFF  A52,A50
.................... 			}
.................... 
.................... 			if (fase == 'R'){
1937E:  MOVF   x4A,W
19380:  SUBLW  52
19382:  BNZ   193C4
.................... 				if (sentido != sentido_r){
19384:  CLRF   00
19386:  BTFSC  22.6
19388:  BSF    00.0
1938A:  MOVF   x6D,W
1938C:  XORWF  00,W
1938E:  ANDLW  01
19390:  BZ    193AC
.................... 					if (time_out_tc_r >= 15){
19392:  MOVLB  2
19394:  MOVF   x94,W
19396:  SUBLW  0E
19398:  BC    193A6
.................... 						sentido_r = sentido;
1939A:  BCF    22.6
1939C:  MOVLB  A
1939E:  BTFSC  x6D.0
193A0:  BSF    22.6
.................... 					}
193A2:  BRA    193AA
193A4:  MOVLB  2
.................... 					else{
.................... 						time_out_tc_r++;
193A6:  INCF   x94,F
193A8:  MOVLB  A
.................... 					}
.................... 				}
193AA:  BRA    193B2
.................... 				else{
.................... 					time_out_tc_r = 0;
193AC:  MOVLB  2
193AE:  CLRF   x94
193B0:  MOVLB  A
.................... 				}
.................... 				pot_ativa_r = pot_ativa;
193B2:  MOVFF  A51,259
193B6:  MOVFF  A50,258
.................... 				pot_aparente_r = pot_aparente;
193BA:  MOVFF  A53,25B
193BE:  MOVFF  A52,25A
.................... 			}
193C2:  BRA    1944E
.................... 			else if (fase == 'S'){
193C4:  MOVF   x4A,W
193C6:  SUBLW  53
193C8:  BNZ   1940A
.................... 				if (sentido != sentido_s){
193CA:  CLRF   00
193CC:  BTFSC  27.3
193CE:  BSF    00.0
193D0:  MOVF   x6D,W
193D2:  XORWF  00,W
193D4:  ANDLW  01
193D6:  BZ    193F2
.................... 					if (time_out_tc_s >= 15){
193D8:  MOVLB  2
193DA:  MOVF   xEC,W
193DC:  SUBLW  0E
193DE:  BC    193EC
.................... 						sentido_s = sentido;
193E0:  BCF    27.3
193E2:  MOVLB  A
193E4:  BTFSC  x6D.0
193E6:  BSF    27.3
.................... 					}
193E8:  BRA    193F0
193EA:  MOVLB  2
.................... 					else{
.................... 						time_out_tc_s++;
193EC:  INCF   xEC,F
193EE:  MOVLB  A
.................... 					}
.................... 				}
193F0:  BRA    193F8
.................... 				else{
.................... 					time_out_tc_s = 0;
193F2:  MOVLB  2
193F4:  CLRF   xEC
193F6:  MOVLB  A
.................... 				}
.................... 				pot_ativa_s = pot_ativa;
193F8:  MOVFF  A51,2DD
193FC:  MOVFF  A50,2DC
.................... 				pot_aparente_s = pot_aparente;
19400:  MOVFF  A53,2DF
19404:  MOVFF  A52,2DE
.................... 			}
19408:  BRA    1944E
.................... 			else if (fase == 'T'){
1940A:  MOVF   x4A,W
1940C:  SUBLW  54
1940E:  BNZ   1944E
.................... 				if (sentido != sentido_t){
19410:  CLRF   00
19412:  BTFSC  27.4
19414:  BSF    00.0
19416:  MOVF   x6D,W
19418:  XORWF  00,W
1941A:  ANDLW  01
1941C:  BZ    19438
.................... 					if (time_out_tc_t >= 15){
1941E:  MOVLB  3
19420:  MOVF   x43,W
19422:  SUBLW  0E
19424:  BC    19432
.................... 						sentido_t = sentido;
19426:  BCF    27.4
19428:  MOVLB  A
1942A:  BTFSC  x6D.0
1942C:  BSF    27.4
.................... 					}
1942E:  BRA    19436
19430:  MOVLB  3
.................... 					else{
.................... 						time_out_tc_t++;
19432:  INCF   x43,F
19434:  MOVLB  A
.................... 					}
.................... 				}
19436:  BRA    1943E
.................... 				else{
.................... 					time_out_tc_t = 0;
19438:  MOVLB  3
1943A:  CLRF   x43
1943C:  MOVLB  A
.................... 				}
.................... 				pot_ativa_t = pot_ativa;
1943E:  MOVFF  A51,334
19442:  MOVFF  A50,333
.................... 				pot_aparente_t = pot_aparente;
19446:  MOVFF  A53,336
1944A:  MOVFF  A52,335
.................... 			}
.................... 	
.................... 			if (pot_ativa != pot_aparente){
1944E:  MOVF   x52,W
19450:  SUBWF  x50,W
19452:  BNZ   1945C
19454:  MOVF   x53,W
19456:  SUBWF  x51,W
19458:  BTFSC  FD8.2
1945A:  BRA    196C0
.................... /* calculo da potencia reativa */    
.................... /* Kvar = sqr(kva^2 - Kw^2) */	
.................... 				aux_f1 = (float)(pot_ativa);
1945C:  MOVFF  A51,A7E
19460:  MOVFF  A50,A7D
19464:  MOVLB  0
19466:  CALL   2924
1946A:  MOVFF  03,A68
1946E:  MOVFF  02,A67
19472:  MOVFF  01,A66
19476:  MOVFF  00,A65
.................... 				aux_f1 = (float)(aux_f1 * aux_f1);
1947A:  MOVFF  A68,A80
1947E:  MOVFF  A67,A7F
19482:  MOVFF  A66,A7E
19486:  MOVFF  A65,A7D
1948A:  MOVFF  A68,A84
1948E:  MOVFF  A67,A83
19492:  MOVFF  A66,A82
19496:  MOVFF  A65,A81
1949A:  CALL   5306
1949E:  MOVFF  03,A68
194A2:  MOVFF  02,A67
194A6:  MOVFF  01,A66
194AA:  MOVFF  00,A65
.................... 				aux_f2 = (float)(pot_aparente);
194AE:  MOVFF  A53,A7E
194B2:  MOVFF  A52,A7D
194B6:  CALL   2924
194BA:  MOVFF  03,A6C
194BE:  MOVFF  02,A6B
194C2:  MOVFF  01,A6A
194C6:  MOVFF  00,A69
.................... 				aux_f2 = (float)(aux_f2 * aux_f2);
194CA:  MOVFF  A6C,A80
194CE:  MOVFF  A6B,A7F
194D2:  MOVFF  A6A,A7E
194D6:  MOVFF  A69,A7D
194DA:  MOVFF  A6C,A84
194DE:  MOVFF  A6B,A83
194E2:  MOVFF  A6A,A82
194E6:  MOVFF  A69,A81
194EA:  CALL   5306
194EE:  MOVFF  03,A6C
194F2:  MOVFF  02,A6B
194F6:  MOVFF  01,A6A
194FA:  MOVFF  00,A69
.................... 				pot_reativa =(word)(sqrtx(aux_f2 - aux_f1));
194FE:  BSF    FD8.1
19500:  MOVFF  A6C,A83
19504:  MOVFF  A6B,A82
19508:  MOVFF  A6A,A81
1950C:  MOVFF  A69,A80
19510:  MOVFF  A68,A87
19514:  MOVFF  A67,A86
19518:  MOVFF  A66,A85
1951C:  MOVFF  A65,A84
19520:  CALL   14D0E
19524:  MOVFF  03,A71
19528:  MOVFF  02,A70
1952C:  MOVFF  01,A6F
19530:  MOVFF  00,A6E
19534:  MOVFF  03,A75
19538:  MOVFF  02,A74
1953C:  MOVFF  01,A73
19540:  MOVFF  00,A72
19544:  CALL   158EC
19548:  MOVFF  03,A7C
1954C:  MOVFF  02,A7B
19550:  MOVFF  01,A7A
19554:  MOVFF  00,A79
19558:  CALL   53FC
1955C:  MOVFF  02,A55
19560:  MOVFF  01,A54
.................... 		
.................... /* calculo do fator de potencia  */    
.................... 				aux_l1 = pot_ativa;
19564:  MOVLB  3
19566:  CLRF   x73
19568:  CLRF   x72
1956A:  MOVFF  A51,371
1956E:  MOVFF  A50,370
.................... 				aux_l1 = (int32)(aux_l1 * 1024);
19572:  RLCF   x70,W
19574:  MOVWF  01
19576:  RLCF   x71,W
19578:  MOVWF  02
1957A:  RLCF   x72,W
1957C:  MOVWF  03
1957E:  RLCF   01,F
19580:  RLCF   02,F
19582:  RLCF   03,F
19584:  MOVLW  FC
19586:  ANDWF  01,F
19588:  MOVFF  03,373
1958C:  MOVFF  02,372
19590:  MOVFF  01,371
19594:  CLRF   x70
.................... 				aux_sw1 = (signed word)(aux_l1 / pot_aparente);
19596:  BCF    FD8.1
19598:  MOVFF  373,A73
1959C:  MOVFF  372,A72
195A0:  MOVFF  371,A71
195A4:  MOVFF  370,A70
195A8:  MOVLB  A
195AA:  CLRF   x77
195AC:  CLRF   x76
195AE:  MOVFF  A53,A75
195B2:  MOVFF  A52,A74
195B6:  MOVLB  0
195B8:  CALL   6858
195BC:  MOVFF  01,36D
195C0:  MOVFF  00,36C
.................... 
.................... 				if (sinal_fp[indice_fp] == '-'){
195C4:  CLRF   03
195C6:  MOVLB  A
195C8:  MOVF   x4B,W
195CA:  ADDLW  8A
195CC:  MOVWF  FE9
195CE:  MOVLW  02
195D0:  ADDWFC 03,W
195D2:  MOVWF  FEA
195D4:  MOVF   FEF,W
195D6:  SUBLW  2D
195D8:  BNZ   195F6
.................... 	    			aux_sw1 = aux_sw1 * (-1);
195DA:  MOVFF  36D,A6F
195DE:  MOVFF  36C,A6E
195E2:  SETF   x71
195E4:  SETF   x70
195E6:  MOVLB  0
195E8:  CALL   FA44
195EC:  MOVFF  02,36D
195F0:  MOVFF  01,36C
195F4:  MOVLB  A
.................... 				}
.................... 				if (sinal_fp[indice_fp] == '1'){
195F6:  CLRF   03
195F8:  MOVF   x4B,W
195FA:  ADDLW  8A
195FC:  MOVWF  FE9
195FE:  MOVLW  02
19600:  ADDWFC 03,W
19602:  MOVWF  FEA
19604:  MOVF   FEF,W
19606:  SUBLW  31
19608:  BNZ   19614
.................... 					aux_sw1 = 1024;
1960A:  MOVLW  04
1960C:  MOVLB  3
1960E:  MOVWF  x6D
19610:  CLRF   x6C
19612:  MOVLB  A
.................... 				}
.................... 				if (aux_sw1 > 1024){
19614:  MOVLB  3
19616:  BTFSC  x6D.7
19618:  BRA    19630
1961A:  MOVF   x6D,W
1961C:  SUBLW  03
1961E:  BC    19630
19620:  XORLW  FF
19622:  BNZ   1962A
19624:  MOVF   x6C,W
19626:  SUBLW  00
19628:  BC    19630
.................... 					aux_sw1 = 1024;
1962A:  MOVLW  04
1962C:  MOVWF  x6D
1962E:  CLRF   x6C
.................... 				}
.................... 				if ((aux_sw1 < 1024) && (aux_sw1 > 1020)){
19630:  BTFSC  x6D.7
19632:  BRA    1963A
19634:  MOVF   x6D,W
19636:  SUBLW  03
19638:  BNC   19654
1963A:  BTFSC  x6D.7
1963C:  BRA    19654
1963E:  MOVF   x6D,W
19640:  SUBLW  02
19642:  BC    19654
19644:  XORLW  FF
19646:  BNZ   1964E
19648:  MOVF   x6C,W
1964A:  SUBLW  FC
1964C:  BC    19654
.................... 					aux_sw1 = 1024;
1964E:  MOVLW  04
19650:  MOVWF  x6D
19652:  CLRF   x6C
.................... 				}
.................... 				if ((aux_sw1 == 1024) || (aux_sw1 == 0)){
19654:  MOVF   x6C,F
19656:  BNZ   1965E
19658:  MOVF   x6D,W
1965A:  SUBLW  04
1965C:  BZ    19666
1965E:  MOVF   x6C,F
19660:  BNZ   19676
19662:  MOVF   x6D,F
19664:  BNZ   19676
.................... 			 	  	pot_ativa = pot_aparente;
19666:  MOVFF  A53,A51
1966A:  MOVFF  A52,A50
.................... 					pot_reativa = 0;
1966E:  MOVLB  A
19670:  CLRF   x55
19672:  CLRF   x54
19674:  MOVLB  3
.................... 				}
.................... 
.................... 				if (fase == 'R'){
19676:  MOVLB  A
19678:  MOVF   x4A,W
1967A:  SUBLW  52
1967C:  BNZ   19690
.................... 				   	fator_pot_r = aux_sw1;
1967E:  MOVFF  36D,263
19682:  MOVFF  36C,262
.................... 					pot_reativa_r = pot_reativa;
19686:  MOVFF  A55,25D
1968A:  MOVFF  A54,25C
.................... 				}
1968E:  BRA    196BE
.................... 				else if (fase == 'S'){
19690:  MOVF   x4A,W
19692:  SUBLW  53
19694:  BNZ   196A8
.................... 				   	fator_pot_s = aux_sw1;
19696:  MOVFF  36D,2E3
1969A:  MOVFF  36C,2E2
.................... 					pot_reativa_s = pot_reativa;
1969E:  MOVFF  A55,2E1
196A2:  MOVFF  A54,2E0
.................... 				}
196A6:  BRA    196BE
.................... 				else if (fase == 'T'){
196A8:  MOVF   x4A,W
196AA:  SUBLW  54
196AC:  BNZ   196BE
.................... 				   	fator_pot_t = aux_sw1;
196AE:  MOVFF  36D,33A
196B2:  MOVFF  36C,339
.................... 					pot_reativa_t = pot_reativa;
196B6:  MOVFF  A55,338
196BA:  MOVFF  A54,337
.................... 				}
.................... 			}
196BE:  BRA    1971A
.................... 			else{
.................... 				if (fase == 'R'){
196C0:  MOVF   x4A,W
196C2:  SUBLW  52
196C4:  BNZ   196DE
.................... 				   	fator_pot_r = 1024;
196C6:  MOVLW  04
196C8:  MOVLB  2
196CA:  MOVWF  x63
196CC:  CLRF   x62
.................... 					pot_reativa_r = 0;
196CE:  CLRF   x5D
196D0:  CLRF   x5C
.................... 					pot_req_r = 0;
196D2:  CLRF   x89
196D4:  CLRF   x88
.................... 					pot_exec_r = 0;
196D6:  CLRF   x87
196D8:  CLRF   x86
.................... 				}
196DA:  BRA    19718
196DC:  MOVLB  A
.................... 				else if (fase == 'S'){
196DE:  MOVF   x4A,W
196E0:  SUBLW  53
196E2:  BNZ   196FC
.................... 				   	fator_pot_s = 1024;
196E4:  MOVLW  04
196E6:  MOVLB  2
196E8:  MOVWF  xE3
196EA:  CLRF   xE2
.................... 					pot_reativa_s = 0;
196EC:  CLRF   xE1
196EE:  CLRF   xE0
.................... 					pot_req_s = 0;
196F0:  CLRF   xEB
196F2:  CLRF   xEA
.................... 					pot_exec_s = 0;
196F4:  CLRF   xE9
196F6:  CLRF   xE8
.................... 				}
196F8:  BRA    19718
196FA:  MOVLB  A
.................... 				else if (fase == 'T'){
196FC:  MOVF   x4A,W
196FE:  SUBLW  54
19700:  BNZ   19716
.................... 				   	fator_pot_t = 1024;
19702:  MOVLW  04
19704:  MOVLB  3
19706:  MOVWF  x3A
19708:  CLRF   x39
.................... 					pot_reativa_t = 0;
1970A:  CLRF   x38
1970C:  CLRF   x37
.................... 					pot_req_t = 0;
1970E:  CLRF   x42
19710:  CLRF   x41
.................... 					pot_exec_t = 0;
19712:  CLRF   x40
19714:  CLRF   x3F
19716:  MOVLB  2
19718:  MOVLB  A
.................... 				}
.................... 			}
.................... 		}
1971A:  BRA    197EC
.................... 		else{
.................... 			if (fase == 'R'){
1971C:  MOVF   x4A,W
1971E:  SUBLW  52
19720:  BNZ   19760
.................... 				soma_pot_efi_r = 0;
19722:  MOVLB  2
19724:  CLRF   x31
19726:  CLRF   x30
19728:  CLRF   x2F
1972A:  CLRF   x2E
.................... 				soma_pot_kvar_r = 0;
1972C:  CLRF   x3D
1972E:  CLRF   x3C
19730:  CLRF   x3B
19732:  CLRF   x3A
.................... 				soma_pr = 0;
19734:  CLRF   x29
19736:  CLRF   x28
19738:  CLRF   x27
1973A:  CLRF   x26
.................... 			    pot_ativa_r = 0;
1973C:  CLRF   x59
1973E:  CLRF   x58
.................... 			    pot_aparente_r = 0;
19740:  CLRF   x5B
19742:  CLRF   x5A
.................... 				pot_reativa_r = 0;
19744:  CLRF   x5D
19746:  CLRF   x5C
.................... 			   	fator_pot_r = 1024;
19748:  MOVLW  04
1974A:  MOVWF  x63
1974C:  CLRF   x62
.................... 				pot_req_r = 0;
1974E:  CLRF   x89
19750:  CLRF   x88
.................... 				pot_exec_r = 0;
19752:  CLRF   x87
19754:  CLRF   x86
.................... 				corrente_r = 0;
19756:  CLRF   x53
19758:  CLRF   x52
.................... 				sentido_r = 0;
1975A:  BCF    22.6
.................... 			}
1975C:  BRA    197EA
1975E:  MOVLB  A
.................... 			else if (fase == 'S'){
19760:  MOVF   x4A,W
19762:  SUBLW  53
19764:  BNZ   197A4
.................... 				soma_pot_efi_s = 0;
19766:  MOVLB  2
19768:  CLRF   xC7
1976A:  CLRF   xC6
1976C:  CLRF   xC5
1976E:  CLRF   xC4
.................... 				soma_pot_kvar_s = 0;
19770:  CLRF   xD3
19772:  CLRF   xD2
19774:  CLRF   xD1
19776:  CLRF   xD0
.................... 				soma_ps = 0;
19778:  CLRF   xBF
1977A:  CLRF   xBE
1977C:  CLRF   xBD
1977E:  CLRF   xBC
.................... 			    pot_ativa_s = 0;
19780:  CLRF   xDD
19782:  CLRF   xDC
.................... 			    pot_aparente_s = 0;
19784:  CLRF   xDF
19786:  CLRF   xDE
.................... 				pot_reativa_s = 0;
19788:  CLRF   xE1
1978A:  CLRF   xE0
.................... 			   	fator_pot_s = 1024;
1978C:  MOVLW  04
1978E:  MOVWF  xE3
19790:  CLRF   xE2
.................... 				pot_req_s = 0;
19792:  CLRF   xEB
19794:  CLRF   xEA
.................... 				pot_exec_s = 0;
19796:  CLRF   xE9
19798:  CLRF   xE8
.................... 				corrente_s = 0;
1979A:  CLRF   xD7
1979C:  CLRF   xD6
.................... 				sentido_s = 0;
1979E:  BCF    27.3
.................... 			}
197A0:  BRA    197EA
197A2:  MOVLB  A
.................... 			else if (fase == 'T'){
197A4:  MOVF   x4A,W
197A6:  SUBLW  54
197A8:  BNZ   197E8
.................... 				soma_pot_efi_t = 0;
197AA:  MOVLB  3
197AC:  CLRF   x1E
197AE:  CLRF   x1D
197B0:  CLRF   x1C
197B2:  CLRF   x1B
.................... 				soma_pot_kvar_t = 0;
197B4:  CLRF   x2A
197B6:  CLRF   x29
197B8:  CLRF   x28
197BA:  CLRF   x27
.................... 				soma_ps = 0;
197BC:  MOVLB  2
197BE:  CLRF   xBF
197C0:  CLRF   xBE
197C2:  CLRF   xBD
197C4:  CLRF   xBC
.................... 			    pot_ativa_t = 0;
197C6:  MOVLB  3
197C8:  CLRF   x34
197CA:  CLRF   x33
.................... 			    pot_aparente_t = 0;
197CC:  CLRF   x36
197CE:  CLRF   x35
.................... 				pot_reativa_t = 0;
197D0:  CLRF   x38
197D2:  CLRF   x37
.................... 			   	fator_pot_t = 1024;
197D4:  MOVLW  04
197D6:  MOVWF  x3A
197D8:  CLRF   x39
.................... 				pot_req_t = 0;
197DA:  CLRF   x42
197DC:  CLRF   x41
.................... 				pot_exec_t = 0;
197DE:  CLRF   x40
197E0:  CLRF   x3F
.................... 				corrente_t = 0;
197E2:  CLRF   x2E
197E4:  CLRF   x2D
.................... 				sentido_t = 0;
197E6:  BCF    27.4
197E8:  MOVLB  2
197EA:  MOVLB  A
.................... 			}
.................... 
.................... 			#if (com_cht == true)
.................... 				for ( aux_b1 = 0; aux_b1 < (NRO_CHT + 1); aux_b1++){
.................... 					if (fase == 'R'){
.................... 						CHT_cr[aux_b1]=0;
.................... 					}
.................... 					else if (fase == 'S'){
.................... 						CHT_cs[aux_b1]=0;
.................... 					}
.................... 					else if (fase == 'T'){
.................... 						CHT_ct[aux_b1]=0;
.................... 					}
.................... 				}
.................... 			#endif
.................... 		}
.................... 	}
197EC:  BRA    198C6
.................... 	else{
.................... 		if (fase == 'R'){
197EE:  MOVF   x4A,W
197F0:  SUBLW  52
197F2:  BNZ   19836
.................... 			soma_pot_efi_r = 0;
197F4:  MOVLB  2
197F6:  CLRF   x31
197F8:  CLRF   x30
197FA:  CLRF   x2F
197FC:  CLRF   x2E
.................... 			soma_pot_kvar_r = 0;
197FE:  CLRF   x3D
19800:  CLRF   x3C
19802:  CLRF   x3B
19804:  CLRF   x3A
.................... 			soma_pr = 0;
19806:  CLRF   x29
19808:  CLRF   x28
1980A:  CLRF   x27
1980C:  CLRF   x26
.................... 		    pot_ativa_r = 0;
1980E:  CLRF   x59
19810:  CLRF   x58
.................... 		    pot_aparente_r = 0;
19812:  CLRF   x5B
19814:  CLRF   x5A
.................... 			pot_reativa_r = 0;
19816:  CLRF   x5D
19818:  CLRF   x5C
.................... 		   	fator_pot_r = 1024;
1981A:  MOVLW  04
1981C:  MOVWF  x63
1981E:  CLRF   x62
.................... 			pot_req_r = 0;
19820:  CLRF   x89
19822:  CLRF   x88
.................... 			pot_exec_r = 0;
19824:  CLRF   x87
19826:  CLRF   x86
.................... 			corrente_r = 0;
19828:  CLRF   x53
1982A:  CLRF   x52
.................... 			tensao_r = 0;
1982C:  CLRF   x51
1982E:  CLRF   x50
.................... 			sentido_r = 0;
19830:  BCF    22.6
.................... 		}
19832:  BRA    198C4
19834:  MOVLB  A
.................... 		else if (fase == 'S'){
19836:  MOVF   x4A,W
19838:  SUBLW  53
1983A:  BNZ   1987E
.................... 			soma_pot_efi_s = 0;
1983C:  MOVLB  2
1983E:  CLRF   xC7
19840:  CLRF   xC6
19842:  CLRF   xC5
19844:  CLRF   xC4
.................... 			soma_pot_kvar_s = 0;
19846:  CLRF   xD3
19848:  CLRF   xD2
1984A:  CLRF   xD1
1984C:  CLRF   xD0
.................... 			soma_ps = 0;
1984E:  CLRF   xBF
19850:  CLRF   xBE
19852:  CLRF   xBD
19854:  CLRF   xBC
.................... 		    pot_ativa_s = 0;
19856:  CLRF   xDD
19858:  CLRF   xDC
.................... 		    pot_aparente_s = 0;
1985A:  CLRF   xDF
1985C:  CLRF   xDE
.................... 			pot_reativa_s = 0;
1985E:  CLRF   xE1
19860:  CLRF   xE0
.................... 		   	fator_pot_s = 1024;
19862:  MOVLW  04
19864:  MOVWF  xE3
19866:  CLRF   xE2
.................... 			pot_req_s = 0;
19868:  CLRF   xEB
1986A:  CLRF   xEA
.................... 			pot_exec_s = 0;
1986C:  CLRF   xE9
1986E:  CLRF   xE8
.................... 			corrente_s = 0;
19870:  CLRF   xD7
19872:  CLRF   xD6
.................... 			tensao_s = 0;
19874:  CLRF   xD5
19876:  CLRF   xD4
.................... 			sentido_s = 0;
19878:  BCF    27.3
.................... 		}
1987A:  BRA    198C4
1987C:  MOVLB  A
.................... 		else if (fase == 'T'){
1987E:  MOVF   x4A,W
19880:  SUBLW  54
19882:  BNZ   198C2
.................... 			soma_pot_efi_t = 0;
19884:  MOVLB  3
19886:  CLRF   x1E
19888:  CLRF   x1D
1988A:  CLRF   x1C
1988C:  CLRF   x1B
.................... 			soma_pot_kvar_t = 0;
1988E:  CLRF   x2A
19890:  CLRF   x29
19892:  CLRF   x28
19894:  CLRF   x27
.................... 			soma_pt = 0;
19896:  CLRF   x16
19898:  CLRF   x15
1989A:  CLRF   x14
1989C:  CLRF   x13
.................... 		    pot_ativa_t = 0;
1989E:  CLRF   x34
198A0:  CLRF   x33
.................... 		    pot_aparente_t = 0;
198A2:  CLRF   x36
198A4:  CLRF   x35
.................... 			pot_reativa_t = 0;
198A6:  CLRF   x38
198A8:  CLRF   x37
.................... 		   	fator_pot_t = 1024;
198AA:  MOVLW  04
198AC:  MOVWF  x3A
198AE:  CLRF   x39
.................... 			pot_req_t = 0;
198B0:  CLRF   x42
198B2:  CLRF   x41
.................... 			pot_exec_t = 0;
198B4:  CLRF   x40
198B6:  CLRF   x3F
.................... 			corrente_t = 0;
198B8:  CLRF   x2E
198BA:  CLRF   x2D
.................... 			tensao_t = 0;
198BC:  CLRF   x2C
198BE:  CLRF   x2B
.................... 			sentido_t = 0;
198C0:  BCF    27.4
198C2:  MOVLB  2
198C4:  MOVLB  A
.................... 		}
.................... 
.................... 		#if (com_cht == true)
.................... 			for ( aux_b1 = 0; aux_b1 < (NRO_CHT + 1); aux_b1++){
.................... 				if (fase == 'R'){
.................... 					CHT_tr[aux_b1]=0;
.................... 				 	CHT_cr[aux_b1]=0;
.................... 				}
.................... 				else if (fase == 'S'){
.................... 					CHT_ts[aux_b1]=0;
.................... 				 	CHT_cs[aux_b1]=0;
.................... 				}
.................... 				else{
.................... 					CHT_tt[aux_b1]=0;
.................... 			 		CHT_ct[aux_b1]=0;
.................... 				}
.................... 			}
.................... 		#endif
.................... 	}
198C6:  MOVLB  0
198C8:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #if (com_time_funciona == true)
.................... 	#include "time_func.c"
.................... #endif
.................... 
.................... void main(void){
*
1BC66:  CLRF   FF8
1BC68:  BCF    FD0.7
1BC6A:  BSF    07.7
1BC6C:  CLRF   1B
1BC6E:  BSF    F65.3
1BC70:  MOVLW  08
1BC72:  MOVWF  FAF
1BC74:  MOVLW  02
1BC76:  MOVWF  FD4
1BC78:  MOVLW  A6
1BC7A:  MOVWF  FAC
1BC7C:  MOVLW  90
1BC7E:  MOVWF  FAB
1BC80:  BCF    1E.0
1BC82:  MOVLB  4
1BC84:  CLRF   x8B
1BC86:  CLRF   x8A
1BC88:  CLRF   x89
1BC8A:  CLRF   x88
1BC8C:  CLRF   x8D
1BC8E:  CLRF   x8C
1BC90:  MOVLB  8
1BC92:  CLRF   x8A
1BC94:  CLRF   x89
1BC96:  CLRF   x93
1BC98:  CLRF   x97
1BC9A:  MOVLW  0F
1BC9C:  MOVWF  x96
1BC9E:  SETF   x95
1BCA0:  SETF   x94
1BCA2:  CLRF   x9B
1BCA4:  CLRF   x9A
1BCA6:  CLRF   x99
1BCA8:  CLRF   x98
1BCAA:  MOVLW  00
1BCAC:  MOVLB  F
1BCAE:  MOVWF  x23
1BCB0:  MOVWF  x24
1BCB2:  MOVWF  x25
1BCB4:  BCF    FC1.3
1BCB6:  BCF    FC1.4
1BCB8:  BCF    FC1.5
1BCBA:  CLRF   x2E
1BCBC:  CLRF   x2F
1BCBE:  CLRF   x54
1BCC0:  CLRF   1C
1BCC2:  CLRF   1D
.................... 	disable_interrupts(GLOBAL);
1BCC4:  BCF    FF2.6
1BCC6:  BCF    FF2.7
1BCC8:  BTFSC  FF2.7
1BCCA:  BRA    1BCC6
.................... 
.................... 	//			 76543210
.................... 	set_tris_a(0b11111111);
1BCCC:  MOVLW  FF
1BCCE:  MOVWF  F92
.................... 	set_tris_b(0b11101111);
1BCD0:  MOVLW  EF
1BCD2:  MOVWF  F93
.................... 	set_tris_c(0b10100000);
1BCD4:  MOVLW  A0
1BCD6:  MOVWF  F94
.................... 	set_tris_d(0b00000000);
1BCD8:  MOVLW  00
1BCDA:  MOVWF  F95
.................... 	set_tris_e(0b00000000);
1BCDC:  MOVWF  F96
.................... 	set_tris_g(0b11100100);
1BCDE:  MOVLW  E4
1BCE0:  MOVWF  F98
.................... 
.................... 	SAIDA2 = 0;
1BCE2:  MOVLB  8
1BCE4:  CLRF   x85
.................... 	SAIDA3 = 0;
1BCE6:  CLRF   x86
.................... 	trata_saidas();
1BCE8:  MOVLB  0
1BCEA:  CALL   16A2
.................... 
.................... 	#if (com_485 == true)
.................... 		output_low(direcao);
1BCEE:  BCF    F98.3
1BCF0:  BCF    F8F.3
1BCF2:  MOVLB  F
.................... 	#endif	
.................... 
.................... //	setup_timer_0(T0_DIV_2);
.................... //	disable_interrupts(INT_TIMER0);
.................... //	setup_rtc(RTC_ENABLE,20);
.................... 	setup_rtc(RTC_DISABLE);
1BCF4:  MOVLB  F
1BCF6:  MOVLW  55
1BCF8:  MOVWF  F7E
1BCFA:  MOVLW  AA
1BCFC:  MOVWF  F7E
1BCFE:  BSF    x5F.5
1BD00:  CLRF   x5F
1BD02:  BCF    x5F.5
.................... 
.................... /* define funcionamento do temporizador 1 */
.................... 	setup_timer_1(T1_INTERNAL|T1_DIV_BY_2);
1BD04:  MOVLW  17
1BD06:  MOVWF  FCD
1BD08:  CLRF   FAA
.................... 	set_timer1(valor_timer1);
1BD0A:  MOVLW  3C
1BD0C:  MOVWF  FCF
1BD0E:  MOVLW  B0
1BD10:  MOVWF  FCE
1BD12:  NOP   
.................... 	enable_interrupts(INT_TIMER1);
1BD14:  BSF    F9D.0
.................... 
.................... //	setup_timer_2(T2_DISABLED,0,1);
.................... 	
.................... 	setup_timer_3(T3_INTERNAL|T3_DIV_BY_2);
1BD16:  CLRF   FB0
1BD18:  MOVLW  17
1BD1A:  MOVWF  FB1
.................... 	set_timer3(valor_timer3_2_60HZ);
1BD1C:  MOVLW  FA
1BD1E:  MOVWF  FB3
1BD20:  MOVLW  EA
1BD22:  MOVWF  FB2
1BD24:  NOP   
.................... 	enable_interrupts(INT_TIMER3);
1BD26:  BSF    FA0.1
.................... 
.................... 	setup_timer_4(T4_DISABLED,0,1);
1BD28:  MOVLW  00
1BD2A:  MOVWF  F6B
1BD2C:  MOVLW  00
1BD2E:  MOVWF  F6C
.................... 
.................... /* define funcionamento da uart */
.................... 
.................... 	baud_rate =  read_word(ee_baud_rate);
1BD30:  MOVLB  A
1BD32:  CLRF   x5D
1BD34:  MOVLW  2D
1BD36:  MOVWF  x5C
1BD38:  MOVLB  0
1BD3A:  CALL   170A
1BD3E:  MOVFF  02,4C4
1BD42:  MOVFF  01,4C3
.................... 	seta_baud_rate();
1BD46:  CALL   1766
.................... 	enable_interrupts(INT_RDA);
1BD4A:  BSF    F9D.5
.................... 	#if (com_rep == true)
.................... 		enable_interrupts(INT_RDA2);
....................   		set_uart_speed (2400, rep);
.................... 	#endif
.................... 	
.................... 	ext_int_edge(0,H_TO_L);
1BD4C:  BCF    FF1.6
.................... 	enable_interrupts(INT_EXT);
1BD4E:  BSF    FF2.4
.................... 	ext_int_edge(1,H_TO_L);
1BD50:  BCF    FF1.5
.................... 	enable_interrupts(INT_EXT1);
1BD52:  BSF    FF0.3
.................... 
....................     setup_timer_2(T2_DIV_BY_4, 127, 1);
1BD54:  MOVLW  00
1BD56:  IORLW  05
1BD58:  MOVWF  FCA
1BD5A:  MOVLW  7F
1BD5C:  MOVWF  FCB
.................... 	setup_ccp1(ccp_pwm);
1BD5E:  BCF    F94.2
1BD60:  BCF    F8B.2
1BD62:  MOVLW  0C
1BD64:  MOVWF  FBB
1BD66:  CLRF   FBE
1BD68:  CLRF   FBF
1BD6A:  MOVLW  01
1BD6C:  MOVWF  F9C
1BD6E:  MOVLW  F8
1BD70:  MOVLB  F
1BD72:  ANDWF  x2D,F
1BD74:  MOVLW  00
1BD76:  IORWF  x2D,F
.................... 	set_pwm1_duty(512);	
1BD78:  MOVLW  80
1BD7A:  MOVWF  FBC
1BD7C:  MOVF   FBB,W
1BD7E:  ANDLW  CF
1BD80:  MOVWF  FBB
.................... 
.................... // Define funcionamento do watchdog.
.................... 	setup_wdt(WDT_ON);
1BD82:  BSF    FD1.0
.................... 	restart_wdt();
1BD84:  CLRWDT
.................... 
.................... 	setup_adc_ports(sAN0 | sAN1 | sAN2 | sAN3 | sAN4 | sAN5 | sAN6 | sAN7 | VSS_VDD);
1BD86:  MOVLW  00
1BD88:  MOVWF  x23
1BD8A:  MOVWF  x24
1BD8C:  MOVLW  FF
1BD8E:  MOVWF  x25
1BD90:  BCF    FC1.3
1BD92:  BCF    FC1.4
1BD94:  BCF    FC1.5
.................... 	setup_adc(ADC_CLOCK_DIV_4);
1BD96:  MOVF   FC0,W
1BD98:  ANDLW  C0
1BD9A:  IORLW  04
1BD9C:  MOVWF  FC0
1BD9E:  BSF    FC0.7
1BDA0:  BSF    FC2.0
.................... 
.................... 	enable_interrupts(GLOBAL);
1BDA2:  MOVLW  C0
1BDA4:  IORWF  FF2,F
.................... 
.................... 	inic_dis();
1BDA6:  MOVLB  0
1BDA8:  CALL   18B4
.................... 	limpa_display();
1BDAC:  CALL   1A2A
.................... 
.................... 	le_config();	// Le configuracoes
1BDB0:  CALL   1A4A
.................... 	inicializa_variaveis();	//inicializa variaveis
1BDB4:  GOTO   2644
.................... 	inicializa_programa();
1BDB8:  GOTO   30BC
.................... 	valida_programa();
1BDBC:  CALL   36FE
.................... 
.................... 	
.................... 	
.................... 	// Inicializa o canal SPI
.................... 	setup_spi(SPI_MASTER | SPI_SCK_IDLE_HIGH | SPI_XMIT_L_TO_H | SPI_SAMPLE_AT_MIDDLE | SPI_CLK_DIV_4);
1BDC0:  BCF    FC6.5
1BDC2:  BCF    F94.5
1BDC4:  BSF    F94.4
1BDC6:  BCF    F94.3
1BDC8:  MOVLW  30
1BDCA:  MOVWF  FC6
1BDCC:  MOVLW  00
1BDCE:  MOVWF  FC7
.................... 	output_low(FLASH_SI);
1BDD0:  BCF    F94.5
1BDD2:  BCF    F8B.5
.................... 	output_low(FLASH_CLK);
1BDD4:  BCF    F94.3
1BDD6:  BCF    F8B.3
.................... 	output_high(FLASH1_CE);
1BDD8:  BCF    F96.2
1BDDA:  BSF    F8D.2
.................... 	aux_b1 = input(FLASH_SO);
1BDDC:  BSF    F94.4
1BDDE:  MOVLB  3
1BDE0:  CLRF   xB1
1BDE2:  BTFSC  F82.4
1BDE4:  INCF   xB1,F
.................... 	FLASH_CE_High();
1BDE6:  MOVLB  0
1BDE8:  CALL   46AC
.................... 	Unhold();
1BDEC:  CALL   46BE
.................... 
.................... 	led_tx = 1;
1BDF0:  MOVLB  8
1BDF2:  BSF    x84.3
.................... 	led_rx = 1;
1BDF4:  BSF    x84.2
.................... 
.................... 	write_byte(ee_passo_main, passo_main);
1BDF6:  MOVLB  A
1BDF8:  CLRF   x68
1BDFA:  CLRF   x67
1BDFC:  MOVFF  361,A69
1BE00:  MOVLB  0
1BE02:  CALL   1C46
.................... 
.................... 	mensagem_inicial();
1BE06:  CALL   49BA
.................... 	delay_ms(250);
1BE0A:  MOVLW  FA
1BE0C:  MOVLB  A
1BE0E:  MOVWF  x67
1BE10:  MOVLB  0
1BE12:  CALL   1834
.................... 
.................... 
.................... 	#if (com_relogio == true)
.................... 		rtc_init();		// inicializa RTC ds1302
1BE16:  CALL   4C12
.................... 		delay_ms(100);
1BE1A:  MOVLW  64
1BE1C:  MOVLB  A
1BE1E:  MOVWF  x67
1BE20:  MOVLB  0
1BE22:  CALL   1834
.................... 		rtc_init();		// inicializa RTC ds1302
1BE26:  CALL   4C12
.................... 		delay_ms(100);
1BE2A:  MOVLW  64
1BE2C:  MOVLB  A
1BE2E:  MOVWF  x67
1BE30:  MOVLB  0
1BE32:  CALL   1834
.................... 		rtc_get_date();
1BE36:  CALL   4C98
.................... 		rtc_get_time();
1BE3A:  CALL   4CE2
.................... 	#else
.................... 		rtc_get_e2p();	
.................... 		ajuste_relogio = 1;
.................... 	#endif
.................... 
.................... 	if (var_mem != 67){
1BE3E:  MOVLB  3
1BE40:  MOVF   xB6,W
1BE42:  SUBLW  43
1BE44:  BZ    1BE5E
.................... 		le_hardware();
1BE46:  MOVLB  0
1BE48:  GOTO   52A8
.................... 		grava_ocorrencias(reg_reset);
1BE4C:  MOVLW  19
1BE4E:  MOVLB  A
1BE50:  MOVWF  x58
1BE52:  MOVLB  0
1BE54:  CALL   5828
.................... 		var_mem = 67;
1BE58:  MOVLW  43
1BE5A:  MOVLB  3
1BE5C:  MOVWF  xB6
.................... 	}
.................... 
.................... //	#if (com_relogio == true)
.................... //		le_calend();	
.................... //	#endif
.................... 
.................... 	#if (com_regs == true)
.................... 		wr_falta_energia();
1BE5E:  MOVLB  0
1BE60:  GOTO   66D0
.................... 		inicializa_regs();
1BE64:  CALL   68EC
.................... 		prox_grava = (int32)(aux_l2 + intervalo_reg);
1BE68:  MOVLB  4
1BE6A:  MOVF   xC5,W
1BE6C:  MOVLB  3
1BE6E:  ADDWF  x74,W
1BE70:  MOVWF  00
1BE72:  MOVLB  4
1BE74:  MOVF   xC6,W
1BE76:  MOVLB  3
1BE78:  ADDWFC x75,W
1BE7A:  MOVWF  01
1BE7C:  MOVLW  00
1BE7E:  ADDWFC x76,W
1BE80:  MOVWF  02
1BE82:  MOVLW  00
1BE84:  ADDWFC x77,W
1BE86:  MOVWF  4B
1BE88:  MOVFF  02,4A
1BE8C:  MOVFF  01,49
1BE90:  MOVFF  00,48
.................... 	#endif
.................... 	
.................... 	cont0 = INTS_PER_SECOND;
1BE94:  MOVLW  64
1BE96:  MOVWF  xF1
.................... 
.................... 
.................... 	inic_rx();
1BE98:  MOVLB  0
1BE9A:  CALL   6A08
.................... 	#if (com_rep == true)
.................... 		inic_rep();
.................... 	#endif
.................... 
.................... 	restart_wdt();
1BE9E:  CLRWDT
.................... 
.................... 	exibe_status();
1BEA0:  CALL   6A30
.................... 	reinicializa_menus();
1BEA4:  CALL   25BA
.................... 	busca_demanda_contratada();
1BEA8:  CALL   6A36
.................... 
.................... 	#if (com_relogio == false)
.................... 		ajuste_relogio = 1;
.................... 	#endif
.................... 
.................... 	#if (versao_hsnet_calibra == true)
.................... 		output_high(direcao);
.................... 		delay_ms(1);
.................... 		fprintf(modbus,"\r\nModo Calibra HSnet!\r\n");
.................... 		delay_ms(2);
.................... 		output_low(direcao);
.................... 	#endif
.................... 
.................... // ****************************************************************************************
.................... //  LOOP PRINCIPAL	
.................... //*****************************************************************************************
.................... 	while(TRUE){
.................... re_while:
.................... 		rotina = 0;
1BEAC:  MOVLB  3
1BEAE:  CLRF   x58
.................... 		modo_rep = 0;
1BEB0:  MOVLB  4
1BEB2:  CLRF   xC8
....................    		output_high(FLASH1_CE);
1BEB4:  BCF    F96.2
1BEB6:  BSF    F8D.2
.................... 		output_low(direcao);
1BEB8:  BCF    F98.3
1BEBA:  BCF    F8F.3
.................... 		output_low(CS_DISP);
1BEBC:  BCF    F96.1
1BEBE:  BCF    F8D.1
.................... 		Unhold();
1BEC0:  MOVLB  0
1BEC2:  CALL   46BE
.................... 		pulsa_wdt();
1BEC6:  CALL   2428
.................... 		trata_modbus();
1BECA:  CALL   DEBA
.................... 
.................... 		
.................... 		if (time_out_inicializando == 0){
1BECE:  MOVF   2F,F
1BED0:  BNZ   1BED6
.................... 			teclado();
1BED2:  GOTO   148A0
.................... 		}
.................... 
.................... 		#if (home_system == false)
.................... 			#if (com_cht == true)
.................... 				if (modo_funca == 1){
.................... 					if (programando == 0){
.................... 						cht_online();
.................... 					}
.................... 				}
.................... 			#endif		
.................... 		#else
.................... 			lendo_cht = false;
.................... 		#endif
.................... 
.................... 		trata_saidas();
1BED6:  CALL   16A2
.................... 
.................... 		#if (com_relogio == true)
.................... 			if ((dia > 31) || (mes > 12) || (ano < 4) || (hora > 23) || (minuto > 59) || (segundo > 59)){
1BEDA:  MOVLB  3
1BEDC:  MOVF   xBF,W
1BEDE:  SUBLW  1F
1BEE0:  BNC   1BF00
1BEE2:  MOVF   xC0,W
1BEE4:  SUBLW  0C
1BEE6:  BNC   1BF00
1BEE8:  MOVF   xC1,W
1BEEA:  SUBLW  03
1BEEC:  BC    1BF00
1BEEE:  MOVF   xC2,W
1BEF0:  SUBLW  17
1BEF2:  BNC   1BF00
1BEF4:  MOVF   xC3,W
1BEF6:  SUBLW  3B
1BEF8:  BNC   1BF00
1BEFA:  MOVF   xC4,W
1BEFC:  SUBLW  3B
1BEFE:  BC    1BF08
.................... 				le_calend();
1BF00:  MOVLB  0
1BF02:  CALL   149FE
1BF06:  MOVLB  3
.................... 			}
.................... 		#endif
.................... 
.................... 		passo_main++;
1BF08:  INCF   x61,F
.................... 		switch(passo_main){
1BF0A:  MOVF   x61,W
1BF0C:  XORLW  00
1BF0E:  MOVLB  0
1BF10:  BZ    1BF9A
1BF12:  XORLW  01
1BF14:  BZ    1BFA4
1BF16:  XORLW  03
1BF18:  BZ    1BFAE
1BF1A:  XORLW  01
1BF1C:  BZ    1BFB8
1BF1E:  XORLW  07
1BF20:  BZ    1BFC2
1BF22:  XORLW  01
1BF24:  BZ    1BFCC
1BF26:  XORLW  03
1BF28:  BZ    1BFD6
1BF2A:  XORLW  01
1BF2C:  BZ    1BFE0
1BF2E:  XORLW  0F
1BF30:  BZ    1BFE6
1BF32:  XORLW  01
1BF34:  BTFSC  FD8.2
1BF36:  BRA    1BFF0
1BF38:  XORLW  03
1BF3A:  BTFSC  FD8.2
1BF3C:  BRA    1C012
1BF3E:  XORLW  01
1BF40:  BTFSC  FD8.2
1BF42:  BRA    1C034
1BF44:  XORLW  07
1BF46:  BTFSC  FD8.2
1BF48:  BRA    1C056
1BF4A:  XORLW  01
1BF4C:  BTFSC  FD8.2
1BF4E:  BRA    1C064
1BF50:  XORLW  03
1BF52:  BTFSC  FD8.2
1BF54:  BRA    1C06C
1BF56:  XORLW  01
1BF58:  BTFSC  FD8.2
1BF5A:  BRA    1C07A
1BF5C:  XORLW  1F
1BF5E:  BTFSC  FD8.2
1BF60:  BRA    1C07C
1BF62:  XORLW  01
1BF64:  BTFSC  FD8.2
1BF66:  BRA    1C084
1BF68:  XORLW  03
1BF6A:  BTFSC  FD8.2
1BF6C:  BRA    1C08E
1BF6E:  XORLW  01
1BF70:  BTFSC  FD8.2
1BF72:  BRA    1C096
1BF74:  XORLW  07
1BF76:  BTFSC  FD8.2
1BF78:  BRA    1C09E
1BF7A:  XORLW  01
1BF7C:  BTFSC  FD8.2
1BF7E:  BRA    1C0A8
1BF80:  XORLW  03
1BF82:  BTFSC  FD8.2
1BF84:  BRA    1C0B0
1BF86:  XORLW  01
1BF88:  BTFSC  FD8.2
1BF8A:  BRA    1C0B6
1BF8C:  XORLW  0F
1BF8E:  BTFSC  FD8.2
1BF90:  BRA    1C0BE
1BF92:  XORLW  01
1BF94:  BTFSC  FD8.2
1BF96:  BRA    1C0C8
1BF98:  BRA    1C0D0
.................... 			case 0:{
.................... 				if (virou_250ms){
1BF9A:  BTFSS  1E.6
1BF9C:  BRA    1BFA2
.................... 					trata_virada_250ms();
1BF9E:  GOTO   FFF2
.................... 				}
.................... 				break;
1BFA2:  BRA    1C0DC
.................... 			}
.................... 			case 1:{
.................... 				if (virou_500ms){
1BFA4:  BTFSS  1E.7
1BFA6:  BRA    1BFAC
.................... 					trata_virada_500ms();
1BFA8:  GOTO   14BEC
.................... 				}
.................... 				break;
1BFAC:  BRA    1C0DC
.................... 			}
.................... 			case 2:{
.................... 				if (virouseg){
1BFAE:  BTFSS  1F.1
1BFB0:  BRA    1BFB6
.................... 					trata_virada_segundo();
1BFB2:  GOTO   17270
.................... 					}
.................... 				break;	
1BFB6:  BRA    1C0DC
.................... 				}
.................... 			case 3:{
.................... 				if (viroumin){
1BFB8:  BTFSS  1F.2
1BFBA:  BRA    1BFC0
.................... 				 	trata_virada_minuto();
1BFBC:  GOTO   17414
.................... 				}
.................... 				break;	
1BFC0:  BRA    1C0DC
.................... 			}
.................... 			case 4:{	
.................... 				if (viroudia){
1BFC2:  BTFSS  1F.4
1BFC4:  BRA    1BFCA
.................... 					trata_virada_dia();
1BFC6:  GOTO   17458
.................... 				}
.................... 				break;	
1BFCA:  BRA    1C0DC
.................... 			}
.................... 			case 5:{
.................... 				if (virouhora){
1BFCC:  BTFSS  1F.3
1BFCE:  BRA    1BFD4
.................... 					trata_virada_hora();
1BFD0:  GOTO   1747C
.................... 				}
.................... 				break;	
1BFD4:  BRA    1C0DC
.................... 			}
.................... 			case 6:{
.................... 				if (viroumes){
1BFD6:  BTFSS  1F.5
1BFD8:  BRA    1BFDE
.................... 					trata_virada_mes();
1BFDA:  GOTO   1748C
.................... 				}
.................... 				break;	
1BFDE:  BRA    1C0DC
.................... 			}
.................... 			case 7:{
.................... 				calcula_vref();
1BFE0:  GOTO   1757E
.................... 				break;
1BFE4:  BRA    1C0DC
.................... 			}
.................... 			case 8:{
.................... 					if (med_ten_ok == true){
1BFE6:  BTFSS  1E.3
1BFE8:  BRA    1BFEE
.................... 						calcula_tensao_corrente();
1BFEA:  GOTO   18A58
.................... 					}
.................... 				break;	
1BFEE:  BRA    1C0DC
.................... 			}
.................... 			case 9:{	
.................... 				if (programando == 0){
1BFF0:  BTFSC  29.5
1BFF2:  BRA    1C010
.................... 					if (calc_ten_ok == 1){
1BFF4:  BTFSS  1E.4
1BFF6:  BRA    1C010
.................... 						calculo_potencias('R');
1BFF8:  MOVLW  52
1BFFA:  MOVLB  A
1BFFC:  MOVWF  x4A
1BFFE:  MOVLB  0
1C000:  CALL   18F3E
.................... 						kvar_requerido('R');
1C004:  MOVLW  52
1C006:  MOVLB  A
1C008:  MOVWF  x4A
1C00A:  MOVLB  0
1C00C:  CALL   19B96
.................... 					}
.................... 				}
.................... 				break;	
1C010:  BRA    1C0DC
.................... 			}
.................... 			case 10:{
.................... 				if (programando == 0){
1C012:  BTFSC  29.5
1C014:  BRA    1C032
.................... 					if (calc_ten_ok == 1){
1C016:  BTFSS  1E.4
1C018:  BRA    1C032
.................... 						#if (com_tc == true)
.................... 							#if (com_rep == true)
.................... 								if (modo_rep == false){
.................... 									calculo_potencias('S');
.................... 									kvar_requerido('S');
.................... 								}
.................... 								else{
.................... 									passo_main++;
.................... 								}
.................... 							#else
.................... 								calculo_potencias('S');
1C01A:  MOVLW  53
1C01C:  MOVLB  A
1C01E:  MOVWF  x4A
1C020:  MOVLB  0
1C022:  CALL   18F3E
.................... 								kvar_requerido('S');
1C026:  MOVLW  53
1C028:  MOVLB  A
1C02A:  MOVWF  x4A
1C02C:  MOVLB  0
1C02E:  CALL   19B96
.................... 							#endif
.................... 						#else
.................... 							passo_main++;
.................... 						#endif
.................... 					}
.................... 				}
.................... 				break;	
1C032:  BRA    1C0DC
.................... 			}
.................... 			case 11:{
.................... 				if (programando == 0){
1C034:  BTFSC  29.5
1C036:  BRA    1C054
.................... 					if (calc_ten_ok == 1){
1C038:  BTFSS  1E.4
1C03A:  BRA    1C054
.................... 						#if (com_tc == true)
.................... 							#if (com_rep == true)
.................... 								if (modo_rep == false){
.................... 									calculo_potencias('T');
.................... 									kvar_requerido('T');
.................... 								}
.................... 								else{
.................... 									passo_main++;
.................... 								}
.................... 							#else
.................... 								calculo_potencias('T');
1C03C:  MOVLW  54
1C03E:  MOVLB  A
1C040:  MOVWF  x4A
1C042:  MOVLB  0
1C044:  CALL   18F3E
.................... 								kvar_requerido('T');
1C048:  MOVLW  54
1C04A:  MOVLB  A
1C04C:  MOVWF  x4A
1C04E:  MOVLB  0
1C050:  CALL   19B96
.................... 							#endif
.................... 						#else
.................... 							passo_main++;
.................... 						#endif
.................... 					}
.................... 				}
.................... 				break;
1C054:  BRA    1C0DC
.................... 			}
.................... 			case 12:{
.................... 				if (programando == 0){
1C056:  BTFSC  29.5
1C058:  BRA    1C062
.................... 					if (calc_ten_ok == 1){
1C05A:  BTFSS  1E.4
1C05C:  BRA    1C062
.................... 						calculo_trifasico();
1C05E:  GOTO   1AA78
.................... 					}
.................... 				}
.................... 				break;	
1C062:  BRA    1C0DC
.................... 			}
.................... 			case 13:{
.................... 				if (calc_ten_ok){
1C064:  BTFSS  1E.4
1C066:  BRA    1C06A
.................... 					calc_ten_ok = 0;	
1C068:  BCF    1E.4
.................... 				}
.................... 				break;	
1C06A:  BRA    1C0DC
.................... 			}
.................... 			case 14:{
.................... 				if (var_mem != 67){
1C06C:  MOVLB  3
1C06E:  MOVF   xB6,W
1C070:  SUBLW  43
1C072:  BZ    1C076
.................... 					reset_cpu();
1C074:  RESET
.................... 				}
.................... 				break;	
1C076:  MOVLB  0
1C078:  BRA    1C0DC
.................... 			}
.................... 			case 15:{
.................... 				break;	
1C07A:  BRA    1C0DC
.................... 			}
.................... 			case 16:{
.................... 				#if (home_system == false)
.................... 					#if (com_cht == true)
.................... 						if (modo_funca == 1){
.................... 							if (programando == 0){
.................... 								cht_online();
.................... 							}
.................... 						}
.................... 						break;	
.................... 					#else
.................... 						passo_main++;
1C07C:  MOVLB  3
1C07E:  INCF   x61,F
.................... 					#endif
.................... 				#else
.................... 					lendo_cht = false;
.................... 					passo_main++;
.................... 				#endif
....................                     break;
1C080:  MOVLB  0
1C082:  BRA    1C0DC
.................... 			}
.................... 			case 17:{
.................... 				if (programando == 0){
1C084:  BTFSC  29.5
1C086:  BRA    1C08C
.................... 					calc_frequencia();
1C088:  GOTO   1AB4C
.................... 				}
.................... 				break;	
1C08C:  BRA    1C0DC
.................... 			}
.................... 			case 18:{
.................... 				passo_main++;
1C08E:  MOVLB  3
1C090:  INCF   x61,F
....................                 break;
1C092:  MOVLB  0
1C094:  BRA    1C0DC
.................... 			}
.................... 			case 19:{
.................... 				passo_main++;
1C096:  MOVLB  3
1C098:  INCF   x61,F
....................                 break;
1C09A:  MOVLB  0
1C09C:  BRA    1C0DC
.................... 			}
.................... 			case 20:{
.................... 				#if (com_alarme == true)
.................... 					if (programando == 0){
1C09E:  BTFSC  29.5
1C0A0:  BRA    1C0A6
.................... 						trata_alarme();
1C0A2:  GOTO   1AD6A
.................... 					}
.................... 					break;
1C0A6:  BRA    1C0DC
.................... 				#else
.................... 					passo_main++;
.................... 				#endif
.................... 			}
.................... 			case 21:{
.................... 				#if (teste_regs == true)
.................... 					if (registro){
.................... 						grava_registros(registro_normal);
.................... 						if (programando == false){
.................... 							mensagem(2,1);
.................... 							mensagem(3,2);
.................... 						}
.................... 					}
.................... 				#else
.................... 					passo_main++;
1C0A8:  MOVLB  3
1C0AA:  INCF   x61,F
.................... 				#endif
....................                     break;
1C0AC:  MOVLB  0
1C0AE:  BRA    1C0DC
.................... 			}
.................... 			case 22:{
.................... 				verifica_status();
1C0B0:  GOTO   1AEC2
.................... 				break;
1C0B4:  BRA    1C0DC
.................... 			}
.................... 			case 23:{
.................... 				passo_main++;
1C0B6:  MOVLB  3
1C0B8:  INCF   x61,F
....................                 break;
1C0BA:  MOVLB  0
1C0BC:  BRA    1C0DC
.................... 			}
.................... 			case 24:{
.................... 				if(programando == false){
1C0BE:  BTFSC  29.5
1C0C0:  BRA    1C0C6
.................... 					st8500_decisao();
1C0C2:  GOTO   1B056
.................... 				}
.................... 				break;
1C0C6:  BRA    1C0DC
.................... 			}
.................... 			case 25:{
.................... 				if (virou_750ms){
1C0C8:  BTFSS  1F.0
1C0CA:  BRA    1C0CE
.................... 					trata_virada_750ms();
1C0CC:  BRA    1BC60
.................... 				}
.................... 				break;
1C0CE:  BRA    1C0DC
.................... 			}
.................... 
.................... 			#define LIMITE_PASSO_MAIN 25			// C U I D A D O,  ALTERAR ESTA POSICAO CASO SEJA CRIADO + OPCES NO CASE DA PASSO_MAIN
.................... 			default:{
.................... 				if (passo_main > LIMITE_PASSO_MAIN){
1C0D0:  MOVLB  3
1C0D2:  MOVF   x61,W
1C0D4:  SUBLW  19
1C0D6:  BC    1C0DA
.................... 					passo_main = 255;
1C0D8:  SETF   x61
1C0DA:  MOVLB  0
.................... 				}
.................... 			}
.................... 		}
1C0DC:  BRA    1BEAC
.................... 	}
.................... }
.................... 
1C0DE:  BRA    1C0DE
.................... void pulsa_wdt(void){
.................... 	if ((morder_t1 == 1) && (morder_t3 == 1) && (morder_calc == 1)){
*
02428:  BTFSS  1F.6
0242A:  BRA    243C
0242C:  BTFSS  1F.7
0242E:  BRA    243C
02430:  BTFSS  20.0
02432:  BRA    243C
.................... 		morder_t1 = 0;
02434:  BCF    1F.6
.................... 		morder_t3 = 0;
02436:  BCF    1F.7
.................... 		morder_calc = 0;
02438:  BCF    20.0
.................... 		restart_wdt();
0243A:  CLRWDT
.................... 	}
0243C:  RETURN 0
.................... }
.................... 
.................... 
.................... void trata_virada_500ms(void){
.................... 	le_calend();	
*
14BEC:  RCALL  149FE
.................... 
.................... 
.................... 	if(intervalo_reg < 60){
14BEE:  MOVLB  4
14BF0:  MOVF   xC6,F
14BF2:  BNZ   14C00
14BF4:  MOVF   xC5,W
14BF6:  SUBLW  3B
14BF8:  BNC   14C00
.................... 		decide_regs();	
14BFA:  MOVLB  0
14BFC:  RCALL  14AE4
14BFE:  MOVLB  4
.................... 	}
.................... 	if(intervalo_reg != INTERVALO_REG_DEFAULT){
14C00:  MOVF   xC5,W
14C02:  SUBLW  2C
14C04:  BNZ   14C0C
14C06:  DECFSZ xC6,W
14C08:  BRA    14C0C
14C0A:  BRA    14C14
.................... 		intervalo_reg = INTERVALO_REG_DEFAULT;
14C0C:  MOVLW  01
14C0E:  MOVWF  xC6
14C10:  MOVLW  2C
14C12:  MOVWF  xC5
.................... 	}
.................... 
.................... 	exibir_menu = 1;
14C14:  BSF    2B.6
.................... 	if(programando){
14C16:  BTFSS  29.5
14C18:  BRA    14C1E
.................... 		piscar = ~piscar;
14C1A:  BTG    29.7
.................... 	}
14C1C:  BRA    14C20
.................... 	else{
.................... 		piscar = 0;
14C1E:  BCF    29.7
.................... 	}
.................... 
.................... 	if(tempo_senha != 0){
14C20:  MOVF   xA6,F
14C22:  BZ    14C28
.................... 		tempo_senha--;
14C24:  DECF   xA6,F
.................... 	}
14C26:  BRA    14C2A
.................... 	else{
.................... 		programando = 0;
14C28:  BCF    29.5
.................... 	}
.................... 
.................... 	virou_500ms = 0;
14C2A:  BCF    1E.7
14C2C:  MOVLB  0
14C2E:  GOTO   1BFAC (RETURN)
.................... }
.................... 
.................... void trata_virada_750ms(void){
.................... 	virou_750ms = 0;
*
1BC60:  BCF    1F.0
1BC62:  GOTO   1C0CE (RETURN)
.................... }
.................... 
.................... void trata_virada_250ms(void){
.................... 	if (programando == true){
*
0FFF2:  BTFSS  29.5
0FFF4:  BRA    FFF8
.................... 		exibir_menu = 1;
0FFF6:  BSF    2B.6
.................... 	}
.................... 	piscar = 0;
0FFF8:  BCF    29.7
.................... 
.................... 	virou_250ms = 0;
0FFFA:  BCF    1E.6
0FFFC:  GOTO   1BFA2 (RETURN)
.................... }
.................... 
.................... void trata_virada_segundo(void){
.................... 	enable_interrupts(INT_RDA);
*
17270:  BSF    F9D.5
.................... 	if (time_out_inicializando != 0){
17272:  MOVF   2F,F
17274:  BZ    17282
.................... 		if (time_out_inicializando > 5){
17276:  MOVF   2F,W
17278:  SUBLW  05
1727A:  BC    17280
.................... 			time_out_inicializando = 4;
1727C:  MOVLW  04
1727E:  MOVWF  2F
.................... 		}
.................... 		time_out_inicializando--;
17280:  DECF   2F,F
.................... 	}
.................... 
.................... 	if (time_out_aciona_alarme != 0){
17282:  MOVLB  3
17284:  MOVF   xBC,F
17286:  BZ    1728A
.................... 		time_out_aciona_alarme--;
17288:  DECF   xBC,F
.................... 	}
.................... 
.................... //	finaliza_calculo_tensao_corrente();
.................... 
.................... 	#if (home_system == true)
.................... 		ler_dips = 1;
.................... 		le_dip_ligacao();
.................... 		trata_led();
.................... 		fprintf(hsnet,"Mul_TC=%u ", mul_tc);
.................... 		fprintf(hsnet,"Tensão=%lu ", tensao_r);
.................... 		fprintf(hsnet,"Corrente=%lu ", corrente_r);
.................... 	#endif
.................... 	
.................... 	#if (com_consumo == true)
.................... 		soma_consumo();
1728A:  MOVLB  0
1728C:  GOTO   14C32
.................... 		#if (com_tc == true)
.................... 			if ((seg_falt_rep == 0) || (seg_falt_rep > 900)){
17290:  MOVLB  5
17292:  MOVF   x2D,F
17294:  BNZ   1729A
17296:  MOVF   x2E,F
17298:  BZ    172AA
1729A:  MOVF   x2E,W
1729C:  SUBLW  02
1729E:  BC    172B2
172A0:  XORLW  FF
172A2:  BNZ   172AA
172A4:  MOVF   x2D,W
172A6:  SUBLW  84
172A8:  BC    172B2
.................... 				seg_falt_rep = 900;
172AA:  MOVLW  03
172AC:  MOVWF  x2E
172AE:  MOVLW  84
172B0:  MOVWF  x2D
.................... 			}
.................... 			seg_falt_rep--;
172B2:  MOVF   x2D,W
172B4:  BTFSC  FD8.2
172B6:  DECF   x2E,F
172B8:  DECF   x2D,F
.................... 			aux_w1 =  (word)(900 - seg_falt_rep);
172BA:  MOVLW  84
172BC:  BSF    FD8.0
172BE:  SUBFWB x2D,W
172C0:  MOVLB  3
172C2:  MOVWF  x62
172C4:  MOVLW  03
172C6:  MOVLB  5
172C8:  SUBFWB x2E,W
172CA:  MOVLB  3
172CC:  MOVWF  x63
.................... 			timer_integra = (unsigned char)(aux_w1 / 60);
172CE:  MOVFF  363,A6C
172D2:  MOVFF  362,A6B
172D6:  MOVLB  A
172D8:  CLRF   x6E
172DA:  MOVLW  3C
172DC:  MOVWF  x6D
172DE:  MOVLB  0
172E0:  CALL   4ECC
172E4:  MOVFF  01,52C
.................... 		#endif
.................... 		if (segundo == 30){
172E8:  MOVLB  3
172EA:  MOVF   xC4,W
172EC:  SUBLW  1E
172EE:  BNZ   172FC
.................... 			integra_consumo();
172F0:  MOVLB  0
172F2:  CALL   14F86
.................... 			#if (com_demanda == true)
.................... 				calcula_demandas();
172F6:  CALL   15A3E
172FA:  MOVLB  3
.................... 			#endif
.................... 		}
.................... 	#endif				
.................... 
.................... 	nro_conta_media = conta_media;
172FC:  MOVFF  357,356
.................... 	conta_media = 0;
17300:  CLRF   x57
.................... 
.................... 	if (retardo_alarmes != 0){
17302:  MOVF   xF5,F
17304:  BZ    17308
.................... 		retardo_alarmes--;
17306:  DECF   xF5,F
.................... 	}
.................... 
.................... 	decide();
17308:  MOVLB  0
1730A:  BRA    16F4A
.................... 
.................... 	if (intervalo_reg >= 60){
1730C:  MOVLB  4
1730E:  MOVF   xC6,F
17310:  BNZ   17318
17312:  MOVF   xC5,W
17314:  SUBLW  3B
17316:  BC    17320
.................... 		decide_regs();	
17318:  MOVLB  0
1731A:  CALL   14AE4
1731E:  MOVLB  4
.................... 	}
.................... 	wr_segundo_old();
17320:  MOVLB  0
17322:  BRA    16FF6
.................... 
.................... 	ponto_segundo = ~ponto_segundo;
17324:  BTG    20.7
.................... 
.................... 	if (val_pwm > 130){
17326:  MOVLB  3
17328:  MOVF   xC8,F
1732A:  BNZ   17332
1732C:  MOVF   xC7,W
1732E:  SUBLW  82
17330:  BC    1733A
.................... 		val_pwm--;
17332:  MOVF   xC7,W
17334:  BTFSC  FD8.2
17336:  DECF   xC8,F
17338:  DECF   xC7,F
.................... 	}
.................... 	set_pwm1_duty(val_pwm);	
1733A:  MOVFF  3C8,02
1733E:  MOVFF  3C7,01
17342:  RRCF   02,F
17344:  RRCF   01,F
17346:  RRCF   02,F
17348:  RRCF   01,F
1734A:  RRCF   02,F
1734C:  MOVFF  01,FBC
17350:  RRCF   02,F
17352:  RRCF   02,W
17354:  ANDLW  30
17356:  MOVWF  00
17358:  MOVF   FBB,W
1735A:  ANDLW  CF
1735C:  IORWF  00,W
1735E:  MOVWF  FBB
.................... 
.................... 
.................... 	trata_time_out_menus();
17360:  MOVLB  0
17362:  BRA    1700A
.................... 	if (time_out_exibe_status_teclando!= 0){
17364:  MOVF   2E,F
17366:  BZ    1736A
.................... 		time_out_exibe_status_teclando--;				
17368:  DECF   2E,F
.................... 	}
.................... 
.................... 	if (menu1 == 0){
1736A:  MOVF   35,F
1736C:  BNZ   17372
.................... 		exibe_status();
1736E:  CALL   6A30
.................... 	}
.................... 	if (time_out_exibe_erro != 0){
17372:  MOVLB  3
17374:  MOVF   xB9,F
17376:  BZ    1737A
.................... 		time_out_exibe_erro--;
17378:  DECF   xB9,F
.................... 	}
.................... 
.................... 	#if (com_cht == true)
.................... 		lendo_cht = false;
.................... 	#endif	
.................... 
.................... 	trata_tempos_aciona_repouso();
1737A:  MOVLB  0
1737C:  BRA    17068
.................... 	trata_segundeiro();
1737E:  BRA    1710E
.................... 	led_rx = 0;
17380:  MOVLB  8
17382:  BCF    x84.2
.................... 	led_tx = 0;
17384:  BCF    x84.3
.................... 	if (comuni_busy != 0){
17386:  MOVF   58,F
17388:  BZ    1738C
.................... 		comuni_busy--;
1738A:  DECF   58,F
.................... 	}
.................... 	if (calcular_bancos == 1){
1738C:  BTFSS  27.1
1738E:  BRA    17398
.................... 		calcular_bancos = 0;
17390:  BCF    27.1
.................... 		gera_sequencia_valor_bancos();
17392:  MOVLB  0
17394:  BRA    1726C
17396:  MOVLB  8
.................... 	}
.................... 
.................... 	#if (AUTOSET == true)
.................... 		if (em_autoset == true){
.................... 			if (time_out_autoset != 0){
.................... 				time_out_autoset--;
.................... 			}
.................... 			else{
.................... 				em_autoset = false;
.................... 			}
.................... 			if (time_out_teste_autoset != 0){
.................... 				time_out_teste_autoset --;
.................... 			}
.................... 		}
.................... 	#endif
.................... 
.................... 	virouseg = 0;
17398:  BCF    1F.1
1739A:  MOVLB  0
1739C:  GOTO   1BFB6 (RETURN)
.................... }	
.................... 
.................... 
.................... void trata_virada_minuto(void){
.................... 	gravou = false;
*
17414:  BCF    20.5
.................... 	
.................... 	pisca_minuto = ~pisca_minuto;
17416:  BTG    21.0
.................... 	#if (com_relogio == false)
.................... 		le_calend_int();
.................... 	#endif	
.................... 
.................... 	#if (versao_hsnet_calibra == true)
.................... 		baud_rate = 19200;
.................... 		endereco = 1;
.................... 		seta_baud_rate();
.................... 		tipo_ligacao = 0;
.................... 	#endif
.................... 
.................... 	#if (com_relogio == true)
.................... 		wr_tempo_old();
17418:  BRA    173A0
.................... 	#endif
.................... 
.................... 	#if (com_consumo == true)
.................... 		integra_consumo();
1741A:  CALL   14F86
.................... 		#if (com_demanda == true)
.................... 			calcula_demandas();
1741E:  CALL   15A3E
.................... 		#endif
.................... 	#endif	
.................... 
.................... 	verifica_checksum_vars();
17422:  BRA    173F4
.................... 
.................... 	valida_programa();
17424:  CALL   36FE
.................... 
.................... 	setup_timer_2(T2_DIV_BY_4, 127, 1);
17428:  MOVLW  00
1742A:  IORLW  05
1742C:  MOVWF  FCA
1742E:  MOVLW  7F
17430:  MOVWF  FCB
.................... 	setup_ccp1(ccp_pwm);
17432:  BCF    F94.2
17434:  BCF    F8B.2
17436:  MOVLW  0C
17438:  MOVWF  FBB
1743A:  CLRF   FBE
1743C:  CLRF   FBF
1743E:  MOVLW  01
17440:  MOVWF  F9C
17442:  MOVLW  F8
17444:  MOVLB  F
17446:  ANDWF  x2D,F
17448:  MOVLW  00
1744A:  IORWF  x2D,F
.................... 	
.................... 	#if (com_rep == true)
.................... 		if (modo_rep == 1){
.................... 			if (time_out_modo_rep != 0){
.................... 				time_out_modo_rep--;			
.................... 			}
.................... 		}
.................... 		kkw = (float)(fat_conv_ativa);
.................... //		kkvar = (float)(fat_conv_reativa);
.................... 		kkvar = (float)(fat_conv_ativa);
.................... 		kkw = (float)((kkw) /  1000);
.................... 		kkvar = (float)((kkvar) / 1000);
.................... 	#endif
.................... 
.................... 	#if (com_time_funciona == true)
.................... 		trata_time_funcionamento();
.................... 	#endif
.................... 	
.................... 	busca_demanda_contratada();
1744C:  MOVLB  0
1744E:  CALL   6A36
.................... 
.................... 	viroumin=0;
17452:  BCF    1F.2
17454:  GOTO   1BFC0 (RETURN)
.................... }
.................... 
.................... void trata_virada_hora(void){
.................... 	virouhora = false;
*
1747C:  BCF    1F.3
.................... 	
.................... 	#if (rotacionar == true)
.................... 		#if (controle_por_fase == true)
.................... 			rotaciona_banco('R');
.................... 			rotaciona_banco('S');
.................... 			rotaciona_banco('T');
.................... 		#else
.................... 			rotaciona_banco();
.................... 		#endif
.................... 		salva_contadores();
.................... 	#endif
.................... 
.................... 	fsentido_r = 0;
1747E:  BCF    22.5
.................... 	fsentido_s = 0;
17480:  BCF    29.3
.................... 	fsentido_t = 0;
17482:  BCF    29.4
.................... 
.................... 	fprintar = false;
17484:  BCF    26.5
.................... 
.................... 	#if (com_regs == true)
.................... 		codigo_old = 0;
17486:  CLRF   4C
.................... 	#endif
17488:  GOTO   1BFD4 (RETURN)
.................... }
.................... 
.................... void trata_virada_dia(void){
....................  	viroudia = 0;
*
17458:  BCF    1F.4
.................... 
.................... 	segundo++;
1745A:  MOVLB  3
1745C:  INCF   xC4,F
.................... 	grava_registros(registro_normal);
1745E:  MOVLW  01
17460:  MOVLB  A
17462:  MOVWF  x4A
17464:  MOVLB  0
17466:  CALL   5F70
.................... 	grava_registros(reg_virou_dia);
1746A:  MOVLW  46
1746C:  MOVLB  A
1746E:  MOVWF  x4A
17470:  MOVLB  0
17472:  CALL   5F70
.................... 
.................... 	#if (com_cht == 1)
.................... 		grava_cht(registro_normal);
.................... 	#endif
.................... 	codigo_old = 0;
17476:  CLRF   4C
17478:  GOTO   1BFCA (RETURN)
.................... }
.................... 
.................... void trata_virada_mes(void){
....................  	viroumes = 0;
*
1748C:  BCF    1F.5
....................  	#if (com_consumo == true)
....................  		#if (com_demanda == true)
.................... 		 	dem_maxima_aparente_ant = dem_maxima_aparente;
1748E:  MOVFF  26D,271
17492:  MOVFF  26C,270
....................  			dem_maxima_ativa_ant = dem_maxima_ativa;
17496:  MOVFF  26B,26F
1749A:  MOVFF  26A,26E
....................  	
.................... 	 		write_word(ee_dem_maxima_aparente_ant, dem_maxima_aparente_ant);
1749E:  MOVLB  A
174A0:  CLRF   x5D
174A2:  MOVLW  FC
174A4:  MOVWF  x5C
174A6:  MOVFF  271,A5F
174AA:  MOVFF  270,A5E
174AE:  MOVLB  0
174B0:  CALL   23AE
.................... 	 		write_word(ee_dem_maxima_ativa_ant, dem_maxima_ativa_ant);
174B4:  MOVLB  A
174B6:  CLRF   x5D
174B8:  MOVLW  FE
174BA:  MOVWF  x5C
174BC:  MOVFF  26F,A5F
174C0:  MOVFF  26E,A5E
174C4:  MOVLB  0
174C6:  CALL   23AE
.................... 
.................... 			dem_maxima_aparente = 0;
174CA:  MOVLB  2
174CC:  CLRF   x6D
174CE:  CLRF   x6C
.................... 			dem_maxima_ativa = 0;
174D0:  CLRF   x6B
174D2:  CLRF   x6A
.................... 	
.................... 		 	write_word(ee_dem_maxima_aparente, 0);
174D4:  MOVLW  01
174D6:  MOVLB  A
174D8:  MOVWF  x5D
174DA:  CLRF   x5C
174DC:  CLRF   x5F
174DE:  CLRF   x5E
174E0:  MOVLB  0
174E2:  CALL   23AE
....................  			write_word(ee_dem_maxima_ativa, 0);
174E6:  MOVLW  01
174E8:  MOVLB  A
174EA:  MOVWF  x5D
174EC:  MOVLW  02
174EE:  MOVWF  x5C
174F0:  CLRF   x5F
174F2:  CLRF   x5E
174F4:  MOVLB  0
174F6:  CALL   23AE
....................  		#endif
....................  	#endif
.................... 
.................... 	write_long(ee_consumo_ati_ant,read_long(ee_consumo_ati));
174FA:  MOVLW  01
174FC:  MOVLB  A
174FE:  MOVWF  x7A
17500:  MOVLW  04
17502:  MOVWF  x79
17504:  MOVLB  0
17506:  CALL   1A4E
1750A:  MOVFF  03,A4D
1750E:  MOVFF  02,A4C
17512:  MOVFF  01,A4B
17516:  MOVFF  00,A4A
1751A:  MOVLW  01
1751C:  MOVLB  A
1751E:  MOVWF  x7A
17520:  MOVLW  0C
17522:  MOVWF  x79
17524:  MOVFF  03,A7E
17528:  MOVFF  02,A7D
1752C:  MOVFF  01,A7C
17530:  MOVFF  00,A7B
17534:  MOVLB  0
17536:  CALL   1B0A
.................... 	write_long(ee_consumo_reati_ant,read_long(ee_consumo_reati));
1753A:  MOVLW  01
1753C:  MOVLB  A
1753E:  MOVWF  x7A
17540:  MOVLW  08
17542:  MOVWF  x79
17544:  MOVLB  0
17546:  CALL   1A4E
1754A:  MOVFF  03,A4D
1754E:  MOVFF  02,A4C
17552:  MOVFF  01,A4B
17556:  MOVFF  00,A4A
1755A:  MOVLW  01
1755C:  MOVLB  A
1755E:  MOVWF  x7A
17560:  MOVLW  10
17562:  MOVWF  x79
17564:  MOVFF  03,A7E
17568:  MOVFF  02,A7D
1756C:  MOVFF  01,A7C
17570:  MOVFF  00,A7B
17574:  MOVLB  0
17576:  CALL   1B0A
.................... 
.................... 	#if (com_time_funciona == true)
1757A:  GOTO   1BFDE (RETURN)
.................... 		write_long(ee_horas_funcionamento_ant,read_long(ee_horas_funcionamento));
.................... 	#endif	
.................... }
.................... 
.................... 
.................... #if ( debugar == true)
.................... 	void trace(char aux_trace){
.................... 		if (aux_trace != 0){
.................... 			#if (com_485 == true)
.................... 				output_high(direcao);
.................... 				delay_ms(1);
.................... 			#endif
.................... 				printf("[%u,%u,%u]\r\n",var_mem,passo_main, aux_trace);
.................... 			#if (com_485 == true)
.................... 				delay_ms(1);
.................... 				output_low(direcao);
.................... 			#endif
.................... 		}
.................... 	}
.................... #endif
.................... 
.................... // Fim st_main.c
.................... 
.................... 
.................... 
.................... // fim st8600.c

Configuration Fuses:
   Word  1: D215   VREGSLEEP INTRC_HP SOSC_DIG NOXINST HSH PLLEN FCMEN IESO
   Word  2: 1C79   NOPUT NOBROWNOUT BORV18 ZPBORM NOWDT WDT128
   Word  3: 8900   RTCOSC_INT CCP2C1 MSSPMSK7 MCLR
   Word  4: 0011   STVREN BBSIZ2K DEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
